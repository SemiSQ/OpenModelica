// name:     Modelica3.x.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving
// keywords: multibody, balancing, instantiation
// status:   correct
// 
//  Modelica MultiBody 3.x: instantiation and balance checking of the RollingWheelSetDriving model
//

loadFile("_ElementaryTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving);
getErrorString();
// check model doesn't work yet as we need to support implicit IF EQUATIONS
checkModel(Modelica.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving);
getErrorString();
system("rm -f *.so *.dll *.log *.c* *.makefile *.libs");

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length "Inline before index reduction"
//   input Real[:] v "Vector";
//   output Real result "Length of vector v";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize "Inline before index reduction"
//   input Real[:] v "Vector";
//   input Real eps = 1e-13 "if |v| < eps then result = v/eps";
//   output Real[size(v,1)] result "Input vector v normalized to length=1";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = "Angle", unit = "rad", displayUnit = "deg");
// 
// external "C";
// end Modelica.Math.asin;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = "Angle", unit = "rad", displayUnit = "deg");
// 
// external "C";
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.resolve1_der "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector resolved in frame 2";
//   input Real[3] v2_der "= der(v2)";
//   output Real[3] v1_der "Derivative of vector v resolved in frame 1";
// algorithm
//   v1_der := Modelica.Mechanics.MultiBody.Frames.resolve1(R,{v2_der[1] + R.w[2] * v2[3] - R.w[3] * v2[2],v2_der[2] + R.w[3] * v2[1] - R.w[1] * v2[3],v2_der[3] + R.w[1] * v2[2] - R.w[2] * v2[1]});
// end Modelica.Mechanics.MultiBody.Frames.Internal.resolve1_der;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.resolve2_der "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector resolved in frame 1";
//   input Real[3] v1_der "= der(v1)";
//   output Real[3] v2_der "Derivative of vector v resolved in frame 2";
// algorithm
//   v2_der := Modelica.Mechanics.MultiBody.Frames.resolve2(R,{v1_der[1],v1_der[2],v1_der[3]}) - cross({R.w[1],R.w[2],R.w[3]},Modelica.Mechanics.MultiBody.Frames.resolve2(R,{v1[1],v1[2],v1[3]}));
// end Modelica.Mechanics.MultiBody.Frames.Internal.resolve2_der;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation "Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation"
// input Real[3, 3] T;
// input Real(quantity="AngularVelocity", unit="rad/s")[3] w;
// output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
//   output Real[3] residue "The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)";
// algorithm
//   residue := {Modelica.Math.atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),Modelica.Math.atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),Modelica.Math.atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2 "Inline before index reduction"
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   input Real[4] der_Q(unit = "1/s") "Derivative of Q";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 2";
// algorithm
//   w := {2.0 * (Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]),2.0 * (-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]),2.0 * (Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4])};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T
//   input Real[3, 3] T "Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} "Guess value for Q (there are 2 solutions; the one close to Q_guess is used";
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04;
// algorithm
//   c1 := (1.0 + T[1,1]) - T[2,2] - T[3,3];
//   c2 := (1.0 + T[2,2]) - T[1,1] - T[3,3];
//   c3 := (1.0 + T[3,3]) - T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04 OR c4 > c1 AND c4 > c2 AND c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 AND c1 > c3 AND c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 AND c2 > c3 AND c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation "Inline before index reduction"
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint "Inline before index reduction"
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   output Real[1] residue "Residue constraint (shall be zero)";
// algorithm
//   residue := {(Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation "Inline before index reduction"
//   input Real[3, 3] T1 "Orientation object to rotate frame 0 into frame 1";
//   input Real[3, 3] T_rel "Orientation object to rotate frame 1 into frame 2";
//   output Real[3, 3] T2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation "Inline before index reduction"
//   input Integer axis(min = 1, max = 3) "Rotate around 'axis' of frame 1";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,Modelica.Math.cos(angle),Modelica.Math.sin(angle);0.0,-Modelica.Math.sin(angle),Modelica.Math.cos(angle)] else if axis == 2 then <matrix>[Modelica.Math.cos(angle),0.0,-Modelica.Math.sin(angle);0.0,1.0,0.0;Modelica.Math.sin(angle),0.0,Modelica.Math.cos(angle)] else <matrix>[Modelica.Math.cos(angle),Modelica.Math.sin(angle),0.0;-Modelica.Math.sin(angle),Modelica.Math.cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy
//   input Real[3] n_x(unit = "1") "Vector in direction of x-axis of frame 2, resolved in frame 1";
//   input Real[3] n_y(unit = "1") "Vector in direction of y-axis of frame 2, resolved in frame 1";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = "1") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = "1") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = "1") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
//   protected Real[3] e_z_aux(unit = "1") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = "1") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation "Inline before index reduction"
//   input Real[3] e(unit = "1") "Normalized axis of rotation (must have length=1)";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   T := <matrix>[e[1] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + Modelica.Math.cos(angle) * -e[1] * e[2]) - -Modelica.Math.sin(angle) * e[3],(e[1] * e[3] + Modelica.Math.cos(angle) * -e[1] * e[3]) - Modelica.Math.sin(angle) * e[2];(e[2] * e[1] + Modelica.Math.cos(angle) * -e[2] * e[1]) - Modelica.Math.sin(angle) * e[3],e[2] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + Modelica.Math.cos(angle) * -e[2] * e[3]) - -Modelica.Math.sin(angle) * e[1];(e[3] * e[1] + Modelica.Math.cos(angle) * -e[3] * e[1]) - -Modelica.Math.sin(angle) * e[2],(e[3] * e[2] + Modelica.Math.cos(angle) * -e[3] * e[2]) - Modelica.Math.sin(angle) * e[1],e[3] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[3] ^ 2.0)];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1 "Inline before index reduction"
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2 "Inline before index reduction"
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector in frame 1";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.absoluteRotation "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R_rel "Orientation object to rotate frame 1 into frame 2";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   R2 := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[R_rel.T[1,1] * R1.T[1,1] + R_rel.T[1,2] * R1.T[2,1] + R_rel.T[1,3] * R1.T[3,1],R_rel.T[1,1] * R1.T[1,2] + R_rel.T[1,2] * R1.T[2,2] + R_rel.T[1,3] * R1.T[3,2],R_rel.T[1,1] * R1.T[1,3] + R_rel.T[1,2] * R1.T[2,3] + R_rel.T[1,3] * R1.T[3,3];R_rel.T[2,1] * R1.T[1,1] + R_rel.T[2,2] * R1.T[2,1] + R_rel.T[2,3] * R1.T[3,1],R_rel.T[2,1] * R1.T[1,2] + R_rel.T[2,2] * R1.T[2,2] + R_rel.T[2,3] * R1.T[3,2],R_rel.T[2,1] * R1.T[1,3] + R_rel.T[2,2] * R1.T[2,3] + R_rel.T[2,3] * R1.T[3,3];R_rel.T[3,1] * R1.T[1,1] + R_rel.T[3,2] * R1.T[2,1] + R_rel.T[3,3] * R1.T[3,1],R_rel.T[3,1] * R1.T[1,2] + R_rel.T[3,2] * R1.T[2,2] + R_rel.T[3,3] * R1.T[3,2],R_rel.T[3,1] * R1.T[1,3] + R_rel.T[3,2] * R1.T[2,3] + R_rel.T[3,3] * R1.T[3,3]],Modelica.Mechanics.MultiBody.Frames.resolve2(R_rel,{R1.w[1],R1.w[2],R1.w[3]}) + {R_rel.w[1],R_rel.w[2],R_rel.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity1 "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 1";
// algorithm
//   w := Modelica.Mechanics.MultiBody.Frames.resolve1(R,{R.w[1],R.w[2],R.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity1;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2 "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 2";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations "Inline before index reduction"
//   input Integer[3] sequence = {1,2,3} "Sequence of rotations from frame 1 to frame 2 along axis sequence[i]";
//   input Real[3] angles(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angles around the axes defined in 'sequence'";
//   input Real[3] der_angles(quantity = "AngularVelocity", unit = "rad/s") "= der(angles)";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Integer[3] sequence = {1,2,3} "Sequence of rotations from frame 1 to frame 2 along axis sequence[i]";
//   input Real guessAngle1(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Select angles[1] such that |angles[1] - guessAngle1| is a minimum";
//   output Real[3] angles(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi";
//   protected Real[3] e1_1(unit = "1") "First rotation axis, resolved in frame 1";
//   protected Real[3] e2_1a(unit = "1") "Second rotation axis, resolved in frame 1a";
//   protected Real[3] e3_1(unit = "1") "Third rotation axis, resolved in frame 1";
//   protected Real[3] e3_2(unit = "1") "Third rotation axis, resolved in frame 2";
//   protected Real A "Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0";
//   protected Real B "Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0";
//   protected Real angle_1a(quantity = "Angle", unit = "rad", displayUnit = "deg") "Solution 1 for angles[1]";
//   protected Real angle_1b(quantity = "Angle", unit = "rad", displayUnit = "deg") "Solution 2 for angles[1]";
//   protected Real[3, 3] T_1a "Orientation object to rotate frame 1 into frame 1a";
// algorithm
//   assert( sequence[1] <> sequence[2] AND sequence[2] <> sequence[3], "input argument 'sequence[1:3]' is not valid");
//   e1_1 := /*/tp:REAL[3]/*/(if sequence[1] == 1 then {1,0,0} else if sequence[1] == 2 then {0,1,0} else {0,0,1});
//   e2_1a := /*/tp:REAL[3]/*/(if sequence[2] == 1 then {1,0,0} else if sequence[2] == 2 then {0,1,0} else {0,0,1});
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := /*/tp:REAL[3]/*/(if sequence[3] == 1 then {1,0,0} else if sequence[3] == 2 then {0,1,0} else {0,0,1});
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 1e-12 AND abs(B) <= 1e-12 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := Modelica.Math.atan2(A,-B);
//     angle_1b := Modelica.Math.atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis "Inline before index reduction"
//   input Integer axis(min = 1, max = 3) "Axis vector to be returned";
//   output Real[3] e(unit = "1") "Unit axis vector";
// algorithm
//   e := /*/tp:REAL[3]/*/(if axis == 1 then {1,0,0} else if axis == 2 then {0,1,0} else {0,0,1});
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q "Inline before index reduction"
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   input Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity from frame 2 with respect to frame 1, resolved in frame 2";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation "Inline before index reduction"
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object such that frame 1 and frame 2 are identical";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotation "Inline before index reduction"
//   input Real[3] e(unit = "1") "Normalized axis of rotation (must have length=1)";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e";
//   input Real der_angle(quantity = "AngularVelocity", unit = "rad/s") "= der(angle)";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e[1] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + Modelica.Math.cos(angle) * -e[1] * e[2]) - -Modelica.Math.sin(angle) * e[3],(e[1] * e[3] + Modelica.Math.cos(angle) * -e[1] * e[3]) - Modelica.Math.sin(angle) * e[2];(e[2] * e[1] + Modelica.Math.cos(angle) * -e[2] * e[1]) - Modelica.Math.sin(angle) * e[3],e[2] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + Modelica.Math.cos(angle) * -e[2] * e[3]) - -Modelica.Math.sin(angle) * e[1];(e[3] * e[1] + Modelica.Math.cos(angle) * -e[3] * e[1]) - -Modelica.Math.sin(angle) * e[2],(e[3] * e[2] + Modelica.Math.cos(angle) * -e[3] * e[2]) - Modelica.Math.sin(angle) * e[1],e[3] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[3] ^ 2.0)],{der_angle * e[1],der_angle * e[2],der_angle * e[3]});
// end Modelica.Mechanics.MultiBody.Frames.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle "Inline before index reduction"
//   input Real[3] e(unit = "1") "Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)";
//   input Real[3] v1 "A vector v resolved in frame 1 (shall not be parallel to e)";
//   input Real[3] v2 "Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)";
//   output Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi";
// algorithm
//   angle := Modelica.Math.atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],(v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3]) - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1 "Inline after index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2 "Inline after index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector in frame 1";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} "Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used";
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration
//   input Real[3] r(quantity = "Length", unit = "m") "Position vector from world frame to actual point, resolved in world frame";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType "Type of gravity field";
//   input Real[3] g(quantity = "Acceleration", unit = "m/s2") "Constant gravity acceleration, resolved in world frame, if gravityType=1";
//   input Real mue(unit = "m3/s2") "Field constant of point gravity field, if gravityType=2";
//   output Real[3] gravity(quantity = "Acceleration", unit = "m/s2") "Gravity acceleration at point r, resolved in world frame";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial "Inline before index reduction"
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape "Inline before index reduction"
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// class Modelica.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving
//   Real world.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real world.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real world.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean world.enableAnimation = true "= true, if animation of all components is enabled";
//   parameter Boolean world.animateWorld = true "= true, if world coordinate system shall be visualized";
//   parameter Boolean world.animateGravity = true "= true, if gravity field shall be visualized (acceleration vector or field center)";
//   parameter String world.label1 = "x" "Label of horizontal axis in icon";
//   parameter String world.label2 = "z" "Label of vertical axis in icon";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity "Type of gravity field";
//   parameter Real world.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Constant gravity acceleration";
//   parameter Real world.n[1](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.n[2](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.n[3](unit = "1") = -1.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.mue(unit = "m3/s2", min = 0.0) = 398600000000000.0 "Gravity field constant (default = field constant of earth)";
//   parameter Boolean world.driveTrainMechanics3D = true "= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account";
//   parameter Real world.axisLength(quantity = "Length", unit = "m", min = 0.0) = world.nominalLength / 2.0 "Length of world axes arrows";
//   parameter Real world.axisDiameter(quantity = "Length", unit = "m", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction "Diameter of world axes arrows";
//   parameter Boolean world.axisShowLabels = true "= true, if labels shall be shown";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] "Color of z-arrow";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] "Color of z-arrow";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] "Color of z-arrow";
//   parameter Real world.gravityArrowTail[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowTail[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowTail[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowLength(quantity = "Length", unit = "m") = world.axisLength / 2.0 "Length of gravity arrow";
//   parameter Real world.gravityArrowDiameter(quantity = "Length", unit = "m", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction "Diameter of gravity arrow";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 "Color of gravity arrow";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 "Color of gravity arrow";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 "Color of gravity arrow";
//   parameter Real world.gravitySphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 12742000.0 "Diameter of sphere representing gravity center (default = mean diameter of earth)";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 "Color of gravity sphere";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 "Color of gravity sphere";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 "Color of gravity sphere";
//   parameter Real world.nominalLength(quantity = "Length", unit = "m") = 1.0 "\"Nominal\" length of multi-body system";
//   parameter Real world.defaultAxisLength(quantity = "Length", unit = "m") = world.nominalLength / 5.0 "Default for length of a frame axis (but not world frame)";
//   parameter Real world.defaultJointLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a joint";
//   parameter Real world.defaultJointWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape representing a joint";
//   parameter Real world.defaultForceLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a force (e.g. damper)";
//   parameter Real world.defaultForceWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape represening a force (e.g. spring, bushing)";
//   parameter Real world.defaultBodyDiameter(quantity = "Length", unit = "m") = world.nominalLength / 9.0 "Default for diameter of sphere representing the center of mass of a body";
//   parameter Real world.defaultWidthFraction = 20.0 "Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)";
//   parameter Real world.defaultArrowDiameter(quantity = "Length", unit = "m") = world.nominalLength / 40.0 "Default for arrow diameter (e.g., of forces, torques, sensors)";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 "Default for arrow diameter of a coordinate system as a fraction of axis length";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 "Default reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real world.defaultN_to_m(unit = "N/m", min = 0.0) = 1000.0 "Default scaling of force arrows (length = force/defaultN_to_m)";
//   parameter Real world.defaultNm_to_m(unit = "N.m/m", min = 0.0) = 1000.0 "Default scaling of torque arrows (length = torque/defaultNm_to_m)";
//   protected parameter Integer world.ndim = if world.enableAnimation AND world.animateWorld then 1 else 0;
//   protected parameter Integer world.ndim2 = if world.enableAnimation AND world.animateWorld AND world.axisShowLabels then 1 else 0;
//   protected parameter Real world.headLength(quantity = "Length", unit = "m") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineLength(quantity = "Length", unit = "m") = max(0.0,world.axisLength - world.headLength);
//   protected parameter Real world.lineWidth(quantity = "Length", unit = "m") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
//   protected parameter Real world.labelStart(quantity = "Length", unit = "m") = 1.05 * world.axisLength;
//   protected parameter Real world.gravityHeadLength(quantity = "Length", unit = "m") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = "Length", unit = "m") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = "Length", unit = "m") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation AND world.animateGravity AND world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter String world.x_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowLine.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
//   input Real world.x_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
//   input Real world.x_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
//   input Real world.x_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) "Color of shape";
//   input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) "Color of shape";
//   input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) "Color of shape";
//   input Real world.x_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
//   protected Real world.x_arrowLine.e_x[1](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[2](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[3](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.n_z_aux[1](unit = "1") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
//   protected Real world.x_arrowLine.n_z_aux[2](unit = "1") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
//   protected Real world.x_arrowLine.n_z_aux[3](unit = "1") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
//   protected Real world.x_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
//   protected Real world.x_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
//   protected Real world.x_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
//   protected output Real world.x_arrowLine.Form;
//   output Real world.x_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowLine.Material;
//   protected output Real world.x_arrowLine.Extra;
//   parameter String world.x_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowHead.r[1](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowHead.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
//   input Real world.x_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
//   input Real world.x_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
//   input Real world.x_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) "Color of shape";
//   input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) "Color of shape";
//   input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) "Color of shape";
//   input Real world.x_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
//   protected Real world.x_arrowHead.e_x[1](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[2](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[3](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.n_z_aux[1](unit = "1") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
//   protected Real world.x_arrowHead.n_z_aux[2](unit = "1") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
//   protected Real world.x_arrowHead.n_z_aux[3](unit = "1") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
//   protected Real world.x_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
//   protected Real world.x_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
//   protected Real world.x_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
//   protected output Real world.x_arrowHead.Form;
//   output Real world.x_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowHead.Material;
//   protected output Real world.x_arrowHead.Extra;
//   input Real world.x_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.r_lines[1](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.x_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.x_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_x[1](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[1,2,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] "Color of cylinders";
//   input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] "Color of cylinders";
//   input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] "Color of cylinders";
//   input Real world.x_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer world.x_label.n = 2 "Number of cylinders";
//   protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][1];
//   protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][2];
//   protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][3];
//   protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][1];
//   protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][2];
//   protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][3];
//   protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][1];
//   protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][2];
//   protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][3];
//   protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][1];
//   protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][2];
//   protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][3];
//   protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][1];
//   protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][2];
//   protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][3];
//   protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][1];
//   protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][2];
//   protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][3];
//   protected Real world.x_label.r_abs[1](quantity = "Length", unit = "m") = world.x_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[1];
//   protected Real world.x_label.r_abs[2](quantity = "Length", unit = "m") = world.x_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[2];
//   protected Real world.x_label.r_abs[3](quantity = "Length", unit = "m") = world.x_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[3];
//   parameter String world.x_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[1].r[1](quantity = "Length", unit = "m") = world.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[1].r[2](quantity = "Length", unit = "m") = world.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[1].r[3](quantity = "Length", unit = "m") = world.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) "Length of visual object";
//   input Real world.x_label.cylinders[1].width(quantity = "Length", unit = "m") = world.x_label.diameter "Width of visual object";
//   input Real world.x_label.cylinders[1].height(quantity = "Length", unit = "m") = world.x_label.diameter "Height of visual object";
//   input Real world.x_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) "Color of shape";
//   input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) "Color of shape";
//   input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) "Color of shape";
//   input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real world.x_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].n_z_aux[1](unit = "1") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
//   protected Real world.x_label.cylinders[1].n_z_aux[2](unit = "1") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
//   protected Real world.x_label.cylinders[1].n_z_aux[3](unit = "1") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
//   protected Real world.x_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real world.x_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real world.x_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[1].Form;
//   output Real world.x_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[1].Material;
//   protected output Real world.x_label.cylinders[1].Extra;
//   parameter String world.x_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[2].r[1](quantity = "Length", unit = "m") = world.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[2].r[2](quantity = "Length", unit = "m") = world.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[2].r[3](quantity = "Length", unit = "m") = world.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) "Length of visual object";
//   input Real world.x_label.cylinders[2].width(quantity = "Length", unit = "m") = world.x_label.diameter "Width of visual object";
//   input Real world.x_label.cylinders[2].height(quantity = "Length", unit = "m") = world.x_label.diameter "Height of visual object";
//   input Real world.x_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) "Color of shape";
//   input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) "Color of shape";
//   input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) "Color of shape";
//   input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real world.x_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].n_z_aux[1](unit = "1") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
//   protected Real world.x_label.cylinders[2].n_z_aux[2](unit = "1") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
//   protected Real world.x_label.cylinders[2].n_z_aux[3](unit = "1") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
//   protected Real world.x_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real world.x_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real world.x_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[2].Form;
//   output Real world.x_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[2].Material;
//   protected output Real world.x_label.cylinders[2].Extra;
//   parameter String world.y_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowLine.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowLine.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowLine.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
//   input Real world.y_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
//   input Real world.y_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
//   input Real world.y_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) "Color of shape";
//   input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) "Color of shape";
//   input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) "Color of shape";
//   input Real world.y_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
//   protected Real world.y_arrowLine.e_x[1](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[2](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[3](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.n_z_aux[1](unit = "1") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
//   protected Real world.y_arrowLine.n_z_aux[2](unit = "1") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
//   protected Real world.y_arrowLine.n_z_aux[3](unit = "1") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
//   protected Real world.y_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
//   protected Real world.y_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
//   protected Real world.y_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
//   protected output Real world.y_arrowLine.Form;
//   output Real world.y_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowLine.Material;
//   protected output Real world.y_arrowLine.Extra;
//   parameter String world.y_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowHead.r[2](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowHead.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowHead.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowHead.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
//   input Real world.y_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
//   input Real world.y_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
//   input Real world.y_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) "Color of shape";
//   input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) "Color of shape";
//   input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) "Color of shape";
//   input Real world.y_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
//   protected Real world.y_arrowHead.e_x[1](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[2](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[3](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.n_z_aux[1](unit = "1") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
//   protected Real world.y_arrowHead.n_z_aux[2](unit = "1") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
//   protected Real world.y_arrowHead.n_z_aux[3](unit = "1") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
//   protected Real world.y_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
//   protected Real world.y_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
//   protected Real world.y_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
//   protected output Real world.y_arrowHead.Form;
//   output Real world.y_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowHead.Material;
//   protected output Real world.y_arrowHead.Extra;
//   input Real world.y_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.y_label.r_lines[2](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.y_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_x[2](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_y[1](unit = "1") = -1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_y[2](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[1,2,2](quantity = "Length", unit = "m") = 1.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,1,2](quantity = "Length", unit = "m") = 1.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,2,1](quantity = "Length", unit = "m") = 0.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.75 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] "Color of cylinders";
//   input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] "Color of cylinders";
//   input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] "Color of cylinders";
//   input Real world.y_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer world.y_label.n = 2 "Number of cylinders";
//   protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][1];
//   protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][2];
//   protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][3];
//   protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][1];
//   protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][2];
//   protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][3];
//   protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][1];
//   protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][2];
//   protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][3];
//   protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][1];
//   protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][2];
//   protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][3];
//   protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][1];
//   protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][2];
//   protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][3];
//   protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][1];
//   protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][2];
//   protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][3];
//   protected Real world.y_label.r_abs[1](quantity = "Length", unit = "m") = world.y_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[1];
//   protected Real world.y_label.r_abs[2](quantity = "Length", unit = "m") = world.y_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[2];
//   protected Real world.y_label.r_abs[3](quantity = "Length", unit = "m") = world.y_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[3];
//   parameter String world.y_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[1].r[1](quantity = "Length", unit = "m") = world.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[1].r[2](quantity = "Length", unit = "m") = world.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[1].r[3](quantity = "Length", unit = "m") = world.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) "Length of visual object";
//   input Real world.y_label.cylinders[1].width(quantity = "Length", unit = "m") = world.y_label.diameter "Width of visual object";
//   input Real world.y_label.cylinders[1].height(quantity = "Length", unit = "m") = world.y_label.diameter "Height of visual object";
//   input Real world.y_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) "Color of shape";
//   input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) "Color of shape";
//   input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) "Color of shape";
//   input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real world.y_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].n_z_aux[1](unit = "1") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
//   protected Real world.y_label.cylinders[1].n_z_aux[2](unit = "1") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
//   protected Real world.y_label.cylinders[1].n_z_aux[3](unit = "1") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
//   protected Real world.y_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real world.y_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real world.y_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[1].Form;
//   output Real world.y_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[1].Material;
//   protected output Real world.y_label.cylinders[1].Extra;
//   parameter String world.y_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[2].r[1](quantity = "Length", unit = "m") = world.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[2].r[2](quantity = "Length", unit = "m") = world.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[2].r[3](quantity = "Length", unit = "m") = world.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) "Length of visual object";
//   input Real world.y_label.cylinders[2].width(quantity = "Length", unit = "m") = world.y_label.diameter "Width of visual object";
//   input Real world.y_label.cylinders[2].height(quantity = "Length", unit = "m") = world.y_label.diameter "Height of visual object";
//   input Real world.y_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) "Color of shape";
//   input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) "Color of shape";
//   input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) "Color of shape";
//   input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real world.y_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].n_z_aux[1](unit = "1") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
//   protected Real world.y_label.cylinders[2].n_z_aux[2](unit = "1") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
//   protected Real world.y_label.cylinders[2].n_z_aux[3](unit = "1") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
//   protected Real world.y_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real world.y_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real world.y_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[2].Form;
//   output Real world.y_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[2].Material;
//   protected output Real world.y_label.cylinders[2].Extra;
//   parameter String world.z_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowLine.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
//   input Real world.z_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
//   input Real world.z_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
//   input Real world.z_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) "Color of shape";
//   input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) "Color of shape";
//   input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) "Color of shape";
//   input Real world.z_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
//   protected Real world.z_arrowLine.e_x[1](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[2](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[3](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.n_z_aux[1](unit = "1") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
//   protected Real world.z_arrowLine.n_z_aux[2](unit = "1") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
//   protected Real world.z_arrowLine.n_z_aux[3](unit = "1") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
//   protected Real world.z_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
//   protected Real world.z_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
//   protected Real world.z_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
//   protected output Real world.z_arrowLine.Form;
//   output Real world.z_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowLine.Material;
//   protected output Real world.z_arrowLine.Extra;
//   parameter String world.z_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowHead.r[3](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowHead.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
//   input Real world.z_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
//   input Real world.z_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
//   input Real world.z_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) "Color of shape";
//   input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) "Color of shape";
//   input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) "Color of shape";
//   input Real world.z_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
//   protected Real world.z_arrowHead.e_x[1](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[2](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[3](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.n_z_aux[1](unit = "1") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
//   protected Real world.z_arrowHead.n_z_aux[2](unit = "1") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
//   protected Real world.z_arrowHead.n_z_aux[3](unit = "1") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
//   protected Real world.z_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
//   protected Real world.z_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
//   protected Real world.z_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
//   protected output Real world.z_arrowHead.Form;
//   output Real world.z_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowHead.Material;
//   protected output Real world.z_arrowHead.Extra;
//   input Real world.z_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.z_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.z_label.r_lines[3](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_x[3](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[1,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,2,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] "Color of cylinders";
//   input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] "Color of cylinders";
//   input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] "Color of cylinders";
//   input Real world.z_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer world.z_label.n = 3 "Number of cylinders";
//   protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][1];
//   protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][2];
//   protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][3];
//   protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][1];
//   protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][2];
//   protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][3];
//   protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][1];
//   protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][2];
//   protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][3];
//   protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][1];
//   protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][2];
//   protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][3];
//   protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][1];
//   protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][2];
//   protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][3];
//   protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][1];
//   protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][2];
//   protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][3];
//   protected Real world.z_label.r_abs[1](quantity = "Length", unit = "m") = world.z_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[1];
//   protected Real world.z_label.r_abs[2](quantity = "Length", unit = "m") = world.z_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[2];
//   protected Real world.z_label.r_abs[3](quantity = "Length", unit = "m") = world.z_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[3];
//   parameter String world.z_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[1].r[1](quantity = "Length", unit = "m") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[1].r[2](quantity = "Length", unit = "m") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[1].r[3](quantity = "Length", unit = "m") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) "Length of visual object";
//   input Real world.z_label.cylinders[1].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
//   input Real world.z_label.cylinders[1].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
//   input Real world.z_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) "Color of shape";
//   input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) "Color of shape";
//   input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) "Color of shape";
//   input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real world.z_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].n_z_aux[1](unit = "1") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
//   protected Real world.z_label.cylinders[1].n_z_aux[2](unit = "1") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
//   protected Real world.z_label.cylinders[1].n_z_aux[3](unit = "1") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
//   protected Real world.z_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real world.z_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real world.z_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[1].Form;
//   output Real world.z_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[1].Material;
//   protected output Real world.z_label.cylinders[1].Extra;
//   parameter String world.z_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[2].r[1](quantity = "Length", unit = "m") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[2].r[2](quantity = "Length", unit = "m") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[2].r[3](quantity = "Length", unit = "m") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) "Length of visual object";
//   input Real world.z_label.cylinders[2].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
//   input Real world.z_label.cylinders[2].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
//   input Real world.z_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) "Color of shape";
//   input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) "Color of shape";
//   input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) "Color of shape";
//   input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real world.z_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].n_z_aux[1](unit = "1") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
//   protected Real world.z_label.cylinders[2].n_z_aux[2](unit = "1") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
//   protected Real world.z_label.cylinders[2].n_z_aux[3](unit = "1") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
//   protected Real world.z_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real world.z_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real world.z_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[2].Form;
//   output Real world.z_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[2].Material;
//   protected output Real world.z_label.cylinders[2].Extra;
//   parameter String world.z_label.cylinders[3].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_label.cylinders[3].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[3].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[3].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[3].r[1](quantity = "Length", unit = "m") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[3].r[2](quantity = "Length", unit = "m") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[3].r[3](quantity = "Length", unit = "m") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[3].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[3].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[3].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[3].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) "Length of visual object";
//   input Real world.z_label.cylinders[3].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
//   input Real world.z_label.cylinders[3].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
//   input Real world.z_label.cylinders[3].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) "Color of shape";
//   input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) "Color of shape";
//   input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) "Color of shape";
//   input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_label.cylinders[3].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real world.z_label.cylinders[3].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].n_z_aux[1](unit = "1") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
//   protected Real world.z_label.cylinders[3].n_z_aux[2](unit = "1") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
//   protected Real world.z_label.cylinders[3].n_z_aux[3](unit = "1") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
//   protected Real world.z_label.cylinders[3].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real world.z_label.cylinders[3].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real world.z_label.cylinders[3].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[3].Form;
//   output Real world.z_label.cylinders[3].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[3].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[3].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_label.cylinders[3].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[3].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[3].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[3].Material;
//   protected output Real world.z_label.cylinders[3].Extra;
//   parameter String world.gravityArrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.gravityArrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowLine.r_shape[1](quantity = "Length", unit = "m") = world.gravityArrowTail[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowLine.r_shape[2](quantity = "Length", unit = "m") = world.gravityArrowTail[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowLine.r_shape[3](quantity = "Length", unit = "m") = world.gravityArrowTail[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowLine.lengthDirection[1](unit = "1") = world.n[1] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowLine.lengthDirection[2](unit = "1") = world.n[2] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowLine.lengthDirection[3](unit = "1") = world.n[3] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowLine.length(quantity = "Length", unit = "m") = world.gravityLineLength "Length of visual object";
//   input Real world.gravityArrowLine.width(quantity = "Length", unit = "m") = world.gravityArrowDiameter "Width of visual object";
//   input Real world.gravityArrowLine.height(quantity = "Length", unit = "m") = world.gravityArrowDiameter "Height of visual object";
//   input Real world.gravityArrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.gravityArrowLine.color[1] = Real(world.gravityArrowColor[1]) "Color of shape";
//   input Real world.gravityArrowLine.color[2] = Real(world.gravityArrowColor[2]) "Color of shape";
//   input Real world.gravityArrowLine.color[3] = Real(world.gravityArrowColor[3]) "Color of shape";
//   input Real world.gravityArrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.gravityArrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.gravityArrowLine.lengthDirection[1],world.gravityArrowLine.lengthDirection[2],world.gravityArrowLine.lengthDirection[3]});
//   protected Real world.gravityArrowLine.e_x[1](unit = "1") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 1.0 else world.gravityArrowLine.lengthDirection[1] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[2](unit = "1") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[2] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[3](unit = "1") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[3] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.n_z_aux[1](unit = "1") = world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[3] - world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[2];
//   protected Real world.gravityArrowLine.n_z_aux[2](unit = "1") = world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[1] - world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[3];
//   protected Real world.gravityArrowLine.n_z_aux[3](unit = "1") = world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[2] - world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[1];
//   protected Real world.gravityArrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[1];
//   protected Real world.gravityArrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[2];
//   protected Real world.gravityArrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[3];
//   protected output Real world.gravityArrowLine.Form;
//   output Real world.gravityArrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.gravityArrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowLine.Material;
//   protected output Real world.gravityArrowLine.Extra;
//   parameter String world.gravityArrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.gravityArrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowHead.r_shape[1](quantity = "Length", unit = "m") = world.gravityArrowTail[1] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[1] * world.gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowHead.r_shape[2](quantity = "Length", unit = "m") = world.gravityArrowTail[2] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[2] * world.gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowHead.r_shape[3](quantity = "Length", unit = "m") = world.gravityArrowTail[3] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[3] * world.gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowHead.lengthDirection[1](unit = "1") = world.n[1] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowHead.lengthDirection[2](unit = "1") = world.n[2] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowHead.lengthDirection[3](unit = "1") = world.n[3] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowHead.length(quantity = "Length", unit = "m") = world.gravityHeadLength "Length of visual object";
//   input Real world.gravityArrowHead.width(quantity = "Length", unit = "m") = world.gravityHeadWidth "Width of visual object";
//   input Real world.gravityArrowHead.height(quantity = "Length", unit = "m") = world.gravityHeadWidth "Height of visual object";
//   input Real world.gravityArrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.gravityArrowHead.color[1] = Real(world.gravityArrowColor[1]) "Color of shape";
//   input Real world.gravityArrowHead.color[2] = Real(world.gravityArrowColor[2]) "Color of shape";
//   input Real world.gravityArrowHead.color[3] = Real(world.gravityArrowColor[3]) "Color of shape";
//   input Real world.gravityArrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.gravityArrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.gravityArrowHead.lengthDirection[1],world.gravityArrowHead.lengthDirection[2],world.gravityArrowHead.lengthDirection[3]});
//   protected Real world.gravityArrowHead.e_x[1](unit = "1") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 1.0 else world.gravityArrowHead.lengthDirection[1] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[2](unit = "1") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[2] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[3](unit = "1") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[3] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.n_z_aux[1](unit = "1") = world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[3] - world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[2];
//   protected Real world.gravityArrowHead.n_z_aux[2](unit = "1") = world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[1] - world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[3];
//   protected Real world.gravityArrowHead.n_z_aux[3](unit = "1") = world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[2] - world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[1];
//   protected Real world.gravityArrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[1];
//   protected Real world.gravityArrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[2];
//   protected Real world.gravityArrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[3];
//   protected output Real world.gravityArrowHead.Form;
//   output Real world.gravityArrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.gravityArrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowHead.Material;
//   protected output Real world.gravityArrowHead.Extra;
//   parameter Boolean ground.animation = true "= true, if animation of ground shall be enabled";
//   parameter Real ground.length(quantity = "Length", unit = "m") = 3.0 "Length and width of box (center is at x=y=0)";
//   parameter Real ground.height(quantity = "Length", unit = "m") = 0.02 "Height of box (upper surface is at z=0, lower surface is at z=-height)";
//   parameter Integer ground.groundColor[1](min = 0, max = 255) = 0 "Color of box";
//   parameter Integer ground.groundColor[2](min = 0, max = 255) = 255 "Color of box";
//   parameter Integer ground.groundColor[3](min = 0, max = 255) = 0 "Color of box";
//   Real ground.ground.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real ground.ground.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real ground.ground.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real ground.ground.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real ground.ground.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real ground.ground.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real ground.ground.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real ground.ground.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real ground.ground.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real ground.ground.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real ground.ground.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real ground.ground.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real ground.ground.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean ground.ground.animation = ground.animation "= true, if animation shall be enabled";
//   parameter String ground.ground.shapeType = "box" "Type of shape";
//   input Real ground.ground.r_shape[1](quantity = "Length", unit = "m") = (-ground.length) / 2.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real ground.ground.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real ground.ground.r_shape[3](quantity = "Length", unit = "m") = -ground.height "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real ground.ground.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real ground.ground.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real ground.ground.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real ground.ground.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real ground.ground.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real ground.ground.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real ground.ground.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = ground.length "Length of shape";
//   input Real ground.ground.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = ground.length "Width of shape";
//   input Real ground.ground.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = ground.height "Height of shape";
//   input Integer ground.ground.color[1](min = 0, max = 255) = ground.groundColor[1] "Color of shape";
//   input Integer ground.ground.color[2](min = 0, max = 255) = ground.groundColor[2] "Color of shape";
//   input Integer ground.ground.color[3](min = 0, max = 255) = ground.groundColor[3] "Color of shape";
//   input Real ground.ground.extra = 0.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real ground.ground.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String ground.ground.vis.shapeType = ground.ground.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real ground.ground.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real ground.ground.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real ground.ground.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real ground.ground.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real ground.ground.vis.r[1](quantity = "Length", unit = "m") = ground.ground.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real ground.ground.vis.r[2](quantity = "Length", unit = "m") = ground.ground.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real ground.ground.vis.r[3](quantity = "Length", unit = "m") = ground.ground.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real ground.ground.vis.r_shape[1](quantity = "Length", unit = "m") = ground.ground.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real ground.ground.vis.r_shape[2](quantity = "Length", unit = "m") = ground.ground.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real ground.ground.vis.r_shape[3](quantity = "Length", unit = "m") = ground.ground.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real ground.ground.vis.lengthDirection[1](unit = "1") = ground.ground.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real ground.ground.vis.lengthDirection[2](unit = "1") = ground.ground.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real ground.ground.vis.lengthDirection[3](unit = "1") = ground.ground.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real ground.ground.vis.widthDirection[1](unit = "1") = ground.ground.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real ground.ground.vis.widthDirection[2](unit = "1") = ground.ground.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real ground.ground.vis.widthDirection[3](unit = "1") = ground.ground.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real ground.ground.vis.length(quantity = "Length", unit = "m") = ground.ground.length "Length of visual object";
//   input Real ground.ground.vis.width(quantity = "Length", unit = "m") = ground.ground.width "Width of visual object";
//   input Real ground.ground.vis.height(quantity = "Length", unit = "m") = ground.ground.height "Height of visual object";
//   input Real ground.ground.vis.extra = ground.ground.extra "Additional size data for some of the shape types";
//   input Real ground.ground.vis.color[1] = Real(ground.ground.color[1]) "Color of shape";
//   input Real ground.ground.vis.color[2] = Real(ground.ground.color[2]) "Color of shape";
//   input Real ground.ground.vis.color[3] = Real(ground.ground.color[3]) "Color of shape";
//   input Real ground.ground.vis.specularCoefficient = ground.ground.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real ground.ground.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({ground.ground.vis.lengthDirection[1],ground.ground.vis.lengthDirection[2],ground.ground.vis.lengthDirection[3]});
//   protected Real ground.ground.vis.e_x[1](unit = "1") = if noEvent(ground.ground.vis.abs_n_x < 1e-10) then 1.0 else ground.ground.vis.lengthDirection[1] / ground.ground.vis.abs_n_x;
//   protected Real ground.ground.vis.e_x[2](unit = "1") = if noEvent(ground.ground.vis.abs_n_x < 1e-10) then 0.0 else ground.ground.vis.lengthDirection[2] / ground.ground.vis.abs_n_x;
//   protected Real ground.ground.vis.e_x[3](unit = "1") = if noEvent(ground.ground.vis.abs_n_x < 1e-10) then 0.0 else ground.ground.vis.lengthDirection[3] / ground.ground.vis.abs_n_x;
//   protected Real ground.ground.vis.n_z_aux[1](unit = "1") = ground.ground.vis.e_x[2] * ground.ground.vis.widthDirection[3] - ground.ground.vis.e_x[3] * ground.ground.vis.widthDirection[2];
//   protected Real ground.ground.vis.n_z_aux[2](unit = "1") = ground.ground.vis.e_x[3] * ground.ground.vis.widthDirection[1] - ground.ground.vis.e_x[1] * ground.ground.vis.widthDirection[3];
//   protected Real ground.ground.vis.n_z_aux[3](unit = "1") = ground.ground.vis.e_x[1] * ground.ground.vis.widthDirection[2] - ground.ground.vis.e_x[2] * ground.ground.vis.widthDirection[1];
//   protected Real ground.ground.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({ground.ground.vis.e_x[1],ground.ground.vis.e_x[2],ground.ground.vis.e_x[3]},if noEvent(ground.ground.vis.n_z_aux[1] ^ 2.0 + (ground.ground.vis.n_z_aux[2] ^ 2.0 + ground.ground.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {ground.ground.vis.widthDirection[1],ground.ground.vis.widthDirection[2],ground.ground.vis.widthDirection[3]} else if noEvent(abs(ground.ground.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{ground.ground.vis.e_x[1],ground.ground.vis.e_x[2],ground.ground.vis.e_x[3]})[1];
//   protected Real ground.ground.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({ground.ground.vis.e_x[1],ground.ground.vis.e_x[2],ground.ground.vis.e_x[3]},if noEvent(ground.ground.vis.n_z_aux[1] ^ 2.0 + (ground.ground.vis.n_z_aux[2] ^ 2.0 + ground.ground.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {ground.ground.vis.widthDirection[1],ground.ground.vis.widthDirection[2],ground.ground.vis.widthDirection[3]} else if noEvent(abs(ground.ground.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{ground.ground.vis.e_x[1],ground.ground.vis.e_x[2],ground.ground.vis.e_x[3]})[2];
//   protected Real ground.ground.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({ground.ground.vis.e_x[1],ground.ground.vis.e_x[2],ground.ground.vis.e_x[3]},if noEvent(ground.ground.vis.n_z_aux[1] ^ 2.0 + (ground.ground.vis.n_z_aux[2] ^ 2.0 + ground.ground.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {ground.ground.vis.widthDirection[1],ground.ground.vis.widthDirection[2],ground.ground.vis.widthDirection[3]} else if noEvent(abs(ground.ground.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{ground.ground.vis.e_x[1],ground.ground.vis.e_x[2],ground.ground.vis.e_x[3]})[3];
//   protected output Real ground.ground.vis.Form;
//   output Real ground.ground.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real ground.ground.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real ground.ground.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real ground.ground.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real ground.ground.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real ground.ground.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real ground.ground.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real ground.ground.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real ground.ground.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real ground.ground.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real ground.ground.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real ground.ground.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real ground.ground.vis.Material;
//   protected output Real ground.ground.vis.Extra;
//   Real ground.fixed.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real ground.fixed.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real ground.fixed.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real ground.fixed.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real ground.fixed.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real ground.fixed.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real ground.fixed.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real ground.fixed.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real ground.fixed.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real ground.fixed.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real ground.fixed.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real ground.fixed.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real ground.fixed.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean ground.fixed.animation = true "= true, if animation shall be enabled";
//   parameter Real ground.fixed.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from world frame to frame_b, resolved in world frame";
//   parameter Real ground.fixed.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from world frame to frame_b, resolved in world frame";
//   parameter Real ground.fixed.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from world frame to frame_b, resolved in world frame";
//   parameter String ground.fixed.shapeType = "cylinder" " Type of shape";
//   parameter Real ground.fixed.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from world frame to shape origin, resolved in world frame";
//   parameter Real ground.fixed.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from world frame to shape origin, resolved in world frame";
//   parameter Real ground.fixed.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from world frame to shape origin, resolved in world frame";
//   parameter Real ground.fixed.lengthDirection[1](quantity = "Length", unit = "m") = ground.fixed.r[1] - ground.fixed.r_shape[1] " Vector in length direction of shape, resolved in world frame";
//   parameter Real ground.fixed.lengthDirection[2](quantity = "Length", unit = "m") = ground.fixed.r[2] - ground.fixed.r_shape[2] " Vector in length direction of shape, resolved in world frame";
//   parameter Real ground.fixed.lengthDirection[3](quantity = "Length", unit = "m") = ground.fixed.r[3] - ground.fixed.r_shape[3] " Vector in length direction of shape, resolved in world frame";
//   parameter Real ground.fixed.widthDirection[1](quantity = "Length", unit = "m") = 0.0 " Vector in width direction of shape, resolved in world frame";
//   parameter Real ground.fixed.widthDirection[2](quantity = "Length", unit = "m") = 1.0 " Vector in width direction of shape, resolved in world frame";
//   parameter Real ground.fixed.widthDirection[3](quantity = "Length", unit = "m") = 0.0 " Vector in width direction of shape, resolved in world frame";
//   parameter Real ground.fixed.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({ground.fixed.r[1] - ground.fixed.r_shape[1],ground.fixed.r[2] - ground.fixed.r_shape[2],ground.fixed.r[3] - ground.fixed.r_shape[3]}) " Length of shape";
//   parameter Real ground.fixed.width(quantity = "Length", unit = "m", min = 0.0) = ground.fixed.length / world.defaultWidthFraction " Width of shape";
//   parameter Real ground.fixed.height(quantity = "Length", unit = "m", min = 0.0) = ground.fixed.width " Height of shape";
//   parameter Real ground.fixed.extra = 0.0 " Additional parameter for cone, pipe etc. (see docu of Visualizers.Advanced.Shape)";
//   input Integer ground.fixed.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer ground.fixed.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer ground.fixed.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real ground.fixed.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String ground.fixed.shape.shapeType = ground.fixed.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real ground.fixed.shape.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real ground.fixed.shape.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real ground.fixed.shape.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real ground.fixed.shape.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real ground.fixed.shape.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real ground.fixed.shape.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real ground.fixed.shape.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real ground.fixed.shape.r_shape[1](quantity = "Length", unit = "m") = ground.fixed.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real ground.fixed.shape.r_shape[2](quantity = "Length", unit = "m") = ground.fixed.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real ground.fixed.shape.r_shape[3](quantity = "Length", unit = "m") = ground.fixed.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real ground.fixed.shape.lengthDirection[1](unit = "1") = ground.fixed.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real ground.fixed.shape.lengthDirection[2](unit = "1") = ground.fixed.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real ground.fixed.shape.lengthDirection[3](unit = "1") = ground.fixed.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real ground.fixed.shape.widthDirection[1](unit = "1") = ground.fixed.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real ground.fixed.shape.widthDirection[2](unit = "1") = ground.fixed.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real ground.fixed.shape.widthDirection[3](unit = "1") = ground.fixed.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real ground.fixed.shape.length(quantity = "Length", unit = "m") = ground.fixed.length "Length of visual object";
//   input Real ground.fixed.shape.width(quantity = "Length", unit = "m") = ground.fixed.width "Width of visual object";
//   input Real ground.fixed.shape.height(quantity = "Length", unit = "m") = ground.fixed.height "Height of visual object";
//   input Real ground.fixed.shape.extra = ground.fixed.extra "Additional size data for some of the shape types";
//   input Real ground.fixed.shape.color[1] = Real(ground.fixed.color[1]) "Color of shape";
//   input Real ground.fixed.shape.color[2] = Real(ground.fixed.color[2]) "Color of shape";
//   input Real ground.fixed.shape.color[3] = Real(ground.fixed.color[3]) "Color of shape";
//   input Real ground.fixed.shape.specularCoefficient = ground.fixed.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real ground.fixed.shape.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({ground.fixed.shape.lengthDirection[1],ground.fixed.shape.lengthDirection[2],ground.fixed.shape.lengthDirection[3]});
//   protected Real ground.fixed.shape.e_x[1](unit = "1") = if noEvent(ground.fixed.shape.abs_n_x < 1e-10) then 1.0 else ground.fixed.shape.lengthDirection[1] / ground.fixed.shape.abs_n_x;
//   protected Real ground.fixed.shape.e_x[2](unit = "1") = if noEvent(ground.fixed.shape.abs_n_x < 1e-10) then 0.0 else ground.fixed.shape.lengthDirection[2] / ground.fixed.shape.abs_n_x;
//   protected Real ground.fixed.shape.e_x[3](unit = "1") = if noEvent(ground.fixed.shape.abs_n_x < 1e-10) then 0.0 else ground.fixed.shape.lengthDirection[3] / ground.fixed.shape.abs_n_x;
//   protected Real ground.fixed.shape.n_z_aux[1](unit = "1") = ground.fixed.shape.e_x[2] * ground.fixed.shape.widthDirection[3] - ground.fixed.shape.e_x[3] * ground.fixed.shape.widthDirection[2];
//   protected Real ground.fixed.shape.n_z_aux[2](unit = "1") = ground.fixed.shape.e_x[3] * ground.fixed.shape.widthDirection[1] - ground.fixed.shape.e_x[1] * ground.fixed.shape.widthDirection[3];
//   protected Real ground.fixed.shape.n_z_aux[3](unit = "1") = ground.fixed.shape.e_x[1] * ground.fixed.shape.widthDirection[2] - ground.fixed.shape.e_x[2] * ground.fixed.shape.widthDirection[1];
//   protected Real ground.fixed.shape.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({ground.fixed.shape.e_x[1],ground.fixed.shape.e_x[2],ground.fixed.shape.e_x[3]},if noEvent(ground.fixed.shape.n_z_aux[1] ^ 2.0 + (ground.fixed.shape.n_z_aux[2] ^ 2.0 + ground.fixed.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {ground.fixed.shape.widthDirection[1],ground.fixed.shape.widthDirection[2],ground.fixed.shape.widthDirection[3]} else if noEvent(abs(ground.fixed.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{ground.fixed.shape.e_x[1],ground.fixed.shape.e_x[2],ground.fixed.shape.e_x[3]})[1];
//   protected Real ground.fixed.shape.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({ground.fixed.shape.e_x[1],ground.fixed.shape.e_x[2],ground.fixed.shape.e_x[3]},if noEvent(ground.fixed.shape.n_z_aux[1] ^ 2.0 + (ground.fixed.shape.n_z_aux[2] ^ 2.0 + ground.fixed.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {ground.fixed.shape.widthDirection[1],ground.fixed.shape.widthDirection[2],ground.fixed.shape.widthDirection[3]} else if noEvent(abs(ground.fixed.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{ground.fixed.shape.e_x[1],ground.fixed.shape.e_x[2],ground.fixed.shape.e_x[3]})[2];
//   protected Real ground.fixed.shape.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({ground.fixed.shape.e_x[1],ground.fixed.shape.e_x[2],ground.fixed.shape.e_x[3]},if noEvent(ground.fixed.shape.n_z_aux[1] ^ 2.0 + (ground.fixed.shape.n_z_aux[2] ^ 2.0 + ground.fixed.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {ground.fixed.shape.widthDirection[1],ground.fixed.shape.widthDirection[2],ground.fixed.shape.widthDirection[3]} else if noEvent(abs(ground.fixed.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{ground.fixed.shape.e_x[1],ground.fixed.shape.e_x[2],ground.fixed.shape.e_x[3]})[3];
//   protected output Real ground.fixed.shape.Form;
//   output Real ground.fixed.shape.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real ground.fixed.shape.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real ground.fixed.shape.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real ground.fixed.shape.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real ground.fixed.shape.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real ground.fixed.shape.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real ground.fixed.shape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real ground.fixed.shape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real ground.fixed.shape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real ground.fixed.shape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real ground.fixed.shape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real ground.fixed.shape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real ground.fixed.shape.Material;
//   protected output Real ground.fixed.shape.Extra;
//   Real wheelSet.frameMiddle.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frameMiddle.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frameMiddle.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frameMiddle.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frameMiddle.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frameMiddle.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frameMiddle.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frameMiddle.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frameMiddle.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frameMiddle.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frameMiddle.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frameMiddle.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frameMiddle.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.animation = true "= true, if animation of wheel set shall be enabled";
//   parameter Real wheelSet.wheelRadius(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Radius of one wheel";
//   parameter Real wheelSet.wheelMass(quantity = "Mass", unit = "kg", min = 0.0) = 0.5 "Mass of one wheel";
//   parameter Real wheelSet.wheel_I_axis(quantity = "MomentOfInertia", unit = "kg.m2") = 0.01 "Inertia along one wheel axis";
//   parameter Real wheelSet.wheel_I_long(quantity = "MomentOfInertia", unit = "kg.m2") = 0.02 "Inertia perpendicular to one wheel axis";
//   parameter Real wheelSet.wheelDistance(quantity = "Length", unit = "m", min = 0.0) = 0.5 "Distance between the two wheels";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.stateSelect = StateSelect.always "Priority to use the generalized coordinates as states";
//   Real wheelSet.x(quantity = "Length", unit = "m", start = 0.1, fixed = true, StateSelect = StateSelect.always) "x coordinate of center between wheels";
//   Real wheelSet.y(quantity = "Length", unit = "m", start = 0.1, fixed = true, StateSelect = StateSelect.always) "y coordinate of center between wheels";
//   Real wheelSet.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Orientation angle of wheel axis along z-axis";
//   Real wheelSet.theta1(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Angle of wheel 1";
//   Real wheelSet.theta2(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Angle of wheel 2";
//   Real wheelSet.der_theta1(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Derivative of theta 1";
//   Real wheelSet.der_theta2(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Derivative of theta 2";
//   parameter Real wheelSet.wheelWidth(quantity = "Length", unit = "m", min = 0.0) = 0.01 "Width of one wheel";
//   parameter Real wheelSet.hollowFraction = 0.8 "1.0: Completely hollow, 0.0: rigid cylinder";
//   parameter Integer wheelSet.wheelColor[1](min = 0, max = 255) = 30 "Color of wheels";
//   parameter Integer wheelSet.wheelColor[2](min = 0, max = 255) = 30 "Color of wheels";
//   parameter Integer wheelSet.wheelColor[3](min = 0, max = 255) = 30 "Color of wheels";
//   Real wheelSet.frame1.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frame1.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frame1.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frame1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frame1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frame1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frame1.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frame1.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frame1.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frame1.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frame1.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frame1.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frame2.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frame2.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frame2.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.frame2.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.frame2.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frame2.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frame2.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.frame2.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frame2.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frame2.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.frame2.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frame2.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.frame2.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.body2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.body2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.body2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.body2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.body2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.body2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.body2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.body2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.body2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.body2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.body2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.body2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.body2.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real wheelSet.body2.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real wheelSet.body2.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real wheelSet.body2.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real wheelSet.body2.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = wheelSet.wheelMass "Mass of rigid body";
//   parameter Real wheelSet.body2.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = wheelSet.wheel_I_long " (1,1) element of inertia tensor";
//   parameter Real wheelSet.body2.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = wheelSet.wheel_I_axis " (2,2) element of inertia tensor";
//   parameter Real wheelSet.body2.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = wheelSet.wheel_I_long " (3,3) element of inertia tensor";
//   parameter Real wheelSet.body2.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real wheelSet.body2.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real wheelSet.body2.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real wheelSet.body2.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real wheelSet.body2.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real wheelSet.body2.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real wheelSet.body2.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real wheelSet.body2.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real wheelSet.body2.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real wheelSet.body2.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real wheelSet.body2.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real wheelSet.body2.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean wheelSet.body2.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real wheelSet.body2.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real wheelSet.body2.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real wheelSet.body2.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer wheelSet.body2.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer wheelSet.body2.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer wheelSet.body2.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean wheelSet.body2.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real wheelSet.body2.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real wheelSet.body2.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real wheelSet.body2.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean wheelSet.body2.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real wheelSet.body2.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real wheelSet.body2.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real wheelSet.body2.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real wheelSet.body2.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer wheelSet.body2.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer wheelSet.body2.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer wheelSet.body2.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real wheelSet.body2.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = wheelSet.body2.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer wheelSet.body2.cylinderColor[1](min = 0, max = 255) = wheelSet.body2.sphereColor[1] "Color of cylinder";
//   input Integer wheelSet.body2.cylinderColor[2](min = 0, max = 255) = wheelSet.body2.sphereColor[2] "Color of cylinder";
//   input Integer wheelSet.body2.cylinderColor[3](min = 0, max = 255) = wheelSet.body2.sphereColor[3] "Color of cylinder";
//   input Real wheelSet.body2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean wheelSet.body2.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean wheelSet.body2.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer wheelSet.body2.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer wheelSet.body2.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer wheelSet.body2.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real wheelSet.body2.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_11 "inertia tensor";
//   parameter Real wheelSet.body2.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_21 "inertia tensor";
//   parameter Real wheelSet.body2.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_31 "inertia tensor";
//   parameter Real wheelSet.body2.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_21 "inertia tensor";
//   parameter Real wheelSet.body2.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_22 "inertia tensor";
//   parameter Real wheelSet.body2.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_32 "inertia tensor";
//   parameter Real wheelSet.body2.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_31 "inertia tensor";
//   parameter Real wheelSet.body2.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_32 "inertia tensor";
//   parameter Real wheelSet.body2.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body2.I_33 "inertia tensor";
//   parameter Real wheelSet.body2.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body2.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.body2.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.body2.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.body2.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.z_0_start[1],wheelSet.body2.z_0_start[2],wheelSet.body2.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real wheelSet.body2.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.z_0_start[1],wheelSet.body2.z_0_start[2],wheelSet.body2.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real wheelSet.body2.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.z_0_start[1],wheelSet.body2.z_0_start[2],wheelSet.body2.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real wheelSet.body2.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.w_0_start[1],wheelSet.body2.w_0_start[2],wheelSet.body2.w_0_start[3]})[1], fixed = wheelSet.body2.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real wheelSet.body2.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.w_0_start[1],wheelSet.body2.w_0_start[2],wheelSet.body2.w_0_start[3]})[2], fixed = wheelSet.body2.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real wheelSet.body2.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.w_0_start[1],wheelSet.body2.w_0_start[2],wheelSet.body2.w_0_start[3]})[3], fixed = wheelSet.body2.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real wheelSet.body2.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.z_0_start[1],wheelSet.body2.z_0_start[2],wheelSet.body2.z_0_start[3]})[1], fixed = wheelSet.body2.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real wheelSet.body2.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.z_0_start[1],wheelSet.body2.z_0_start[2],wheelSet.body2.z_0_start[3]})[2], fixed = wheelSet.body2.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real wheelSet.body2.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.R_start,{wheelSet.body2.z_0_start[1],wheelSet.body2.z_0_start[2],wheelSet.body2.z_0_start[3]})[3], fixed = wheelSet.body2.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real wheelSet.body2.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real wheelSet.body2.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real wheelSet.body2.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real wheelSet.body2.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body2.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real wheelSet.body2.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body2.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real wheelSet.body2.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body2.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real wheelSet.body2.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body2.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real wheelSet.body2.Q[1](start = wheelSet.body2.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real wheelSet.body2.Q[2](start = wheelSet.body2.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real wheelSet.body2.Q[3](start = wheelSet.body2.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real wheelSet.body2.Q[4](start = wheelSet.body2.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real wheelSet.body2.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if wheelSet.body2.sequence_start[1] == wheelSet.body2.sequence_angleStates[1] AND wheelSet.body2.sequence_start[2] == wheelSet.body2.sequence_angleStates[2] AND wheelSet.body2.sequence_start[3] == wheelSet.body2.sequence_angleStates[3] then wheelSet.body2.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(wheelSet.body2.R_start,{wheelSet.body2.sequence_angleStates[1],wheelSet.body2.sequence_angleStates[2],wheelSet.body2.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real wheelSet.body2.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if wheelSet.body2.sequence_start[1] == wheelSet.body2.sequence_angleStates[1] AND wheelSet.body2.sequence_start[2] == wheelSet.body2.sequence_angleStates[2] AND wheelSet.body2.sequence_start[3] == wheelSet.body2.sequence_angleStates[3] then wheelSet.body2.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(wheelSet.body2.R_start,{wheelSet.body2.sequence_angleStates[1],wheelSet.body2.sequence_angleStates[2],wheelSet.body2.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real wheelSet.body2.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if wheelSet.body2.sequence_start[1] == wheelSet.body2.sequence_angleStates[1] AND wheelSet.body2.sequence_start[2] == wheelSet.body2.sequence_angleStates[2] AND wheelSet.body2.sequence_start[3] == wheelSet.body2.sequence_angleStates[3] then wheelSet.body2.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(wheelSet.body2.R_start,{wheelSet.body2.sequence_angleStates[1],wheelSet.body2.sequence_angleStates[2],wheelSet.body2.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real wheelSet.body2.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = wheelSet.body2.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real wheelSet.body2.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = wheelSet.body2.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real wheelSet.body2.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = wheelSet.body2.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real wheelSet.body2.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real wheelSet.body2.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real wheelSet.body2.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real wheelSet.body2.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real wheelSet.body2.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real wheelSet.body2.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   Real wheelSet.body1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.body1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.body1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.body1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.body1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.body1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.body1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.body1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.body1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.body1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.body1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.body1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.body1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.body1.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real wheelSet.body1.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real wheelSet.body1.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real wheelSet.body1.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real wheelSet.body1.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = wheelSet.wheelMass "Mass of rigid body";
//   parameter Real wheelSet.body1.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = wheelSet.wheel_I_long " (1,1) element of inertia tensor";
//   parameter Real wheelSet.body1.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = wheelSet.wheel_I_axis " (2,2) element of inertia tensor";
//   parameter Real wheelSet.body1.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = wheelSet.wheel_I_long " (3,3) element of inertia tensor";
//   parameter Real wheelSet.body1.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real wheelSet.body1.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real wheelSet.body1.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real wheelSet.body1.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real wheelSet.body1.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real wheelSet.body1.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real wheelSet.body1.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real wheelSet.body1.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real wheelSet.body1.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real wheelSet.body1.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real wheelSet.body1.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real wheelSet.body1.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean wheelSet.body1.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real wheelSet.body1.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real wheelSet.body1.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real wheelSet.body1.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer wheelSet.body1.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer wheelSet.body1.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer wheelSet.body1.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean wheelSet.body1.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real wheelSet.body1.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real wheelSet.body1.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real wheelSet.body1.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean wheelSet.body1.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real wheelSet.body1.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real wheelSet.body1.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real wheelSet.body1.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real wheelSet.body1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer wheelSet.body1.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer wheelSet.body1.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer wheelSet.body1.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real wheelSet.body1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = wheelSet.body1.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer wheelSet.body1.cylinderColor[1](min = 0, max = 255) = wheelSet.body1.sphereColor[1] "Color of cylinder";
//   input Integer wheelSet.body1.cylinderColor[2](min = 0, max = 255) = wheelSet.body1.sphereColor[2] "Color of cylinder";
//   input Integer wheelSet.body1.cylinderColor[3](min = 0, max = 255) = wheelSet.body1.sphereColor[3] "Color of cylinder";
//   input Real wheelSet.body1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean wheelSet.body1.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean wheelSet.body1.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer wheelSet.body1.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer wheelSet.body1.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer wheelSet.body1.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real wheelSet.body1.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_11 "inertia tensor";
//   parameter Real wheelSet.body1.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_21 "inertia tensor";
//   parameter Real wheelSet.body1.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_31 "inertia tensor";
//   parameter Real wheelSet.body1.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_21 "inertia tensor";
//   parameter Real wheelSet.body1.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_22 "inertia tensor";
//   parameter Real wheelSet.body1.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_32 "inertia tensor";
//   parameter Real wheelSet.body1.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_31 "inertia tensor";
//   parameter Real wheelSet.body1.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_32 "inertia tensor";
//   parameter Real wheelSet.body1.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = wheelSet.body1.I_33 "inertia tensor";
//   parameter Real wheelSet.body1.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real wheelSet.body1.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.body1.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.body1.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.body1.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.z_0_start[1],wheelSet.body1.z_0_start[2],wheelSet.body1.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real wheelSet.body1.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.z_0_start[1],wheelSet.body1.z_0_start[2],wheelSet.body1.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real wheelSet.body1.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.z_0_start[1],wheelSet.body1.z_0_start[2],wheelSet.body1.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real wheelSet.body1.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.w_0_start[1],wheelSet.body1.w_0_start[2],wheelSet.body1.w_0_start[3]})[1], fixed = wheelSet.body1.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real wheelSet.body1.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.w_0_start[1],wheelSet.body1.w_0_start[2],wheelSet.body1.w_0_start[3]})[2], fixed = wheelSet.body1.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real wheelSet.body1.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.w_0_start[1],wheelSet.body1.w_0_start[2],wheelSet.body1.w_0_start[3]})[3], fixed = wheelSet.body1.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real wheelSet.body1.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.z_0_start[1],wheelSet.body1.z_0_start[2],wheelSet.body1.z_0_start[3]})[1], fixed = wheelSet.body1.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real wheelSet.body1.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.z_0_start[1],wheelSet.body1.z_0_start[2],wheelSet.body1.z_0_start[3]})[2], fixed = wheelSet.body1.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real wheelSet.body1.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.R_start,{wheelSet.body1.z_0_start[1],wheelSet.body1.z_0_start[2],wheelSet.body1.z_0_start[3]})[3], fixed = wheelSet.body1.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real wheelSet.body1.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real wheelSet.body1.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real wheelSet.body1.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real wheelSet.body1.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body1.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real wheelSet.body1.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body1.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real wheelSet.body1.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body1.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real wheelSet.body1.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(wheelSet.body1.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real wheelSet.body1.Q[1](start = wheelSet.body1.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real wheelSet.body1.Q[2](start = wheelSet.body1.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real wheelSet.body1.Q[3](start = wheelSet.body1.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real wheelSet.body1.Q[4](start = wheelSet.body1.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real wheelSet.body1.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if wheelSet.body1.sequence_start[1] == wheelSet.body1.sequence_angleStates[1] AND wheelSet.body1.sequence_start[2] == wheelSet.body1.sequence_angleStates[2] AND wheelSet.body1.sequence_start[3] == wheelSet.body1.sequence_angleStates[3] then wheelSet.body1.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(wheelSet.body1.R_start,{wheelSet.body1.sequence_angleStates[1],wheelSet.body1.sequence_angleStates[2],wheelSet.body1.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real wheelSet.body1.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if wheelSet.body1.sequence_start[1] == wheelSet.body1.sequence_angleStates[1] AND wheelSet.body1.sequence_start[2] == wheelSet.body1.sequence_angleStates[2] AND wheelSet.body1.sequence_start[3] == wheelSet.body1.sequence_angleStates[3] then wheelSet.body1.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(wheelSet.body1.R_start,{wheelSet.body1.sequence_angleStates[1],wheelSet.body1.sequence_angleStates[2],wheelSet.body1.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real wheelSet.body1.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if wheelSet.body1.sequence_start[1] == wheelSet.body1.sequence_angleStates[1] AND wheelSet.body1.sequence_start[2] == wheelSet.body1.sequence_angleStates[2] AND wheelSet.body1.sequence_start[3] == wheelSet.body1.sequence_angleStates[3] then wheelSet.body1.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(wheelSet.body1.R_start,{wheelSet.body1.sequence_angleStates[1],wheelSet.body1.sequence_angleStates[2],wheelSet.body1.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real wheelSet.body1.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = wheelSet.body1.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real wheelSet.body1.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = wheelSet.body1.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real wheelSet.body1.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = wheelSet.body1.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real wheelSet.body1.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real wheelSet.body1.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real wheelSet.body1.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real wheelSet.body1.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real wheelSet.body1.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real wheelSet.body1.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   Real wheelSet.axis1.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.axis1.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.axis2.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.axis2.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.frameMiddle.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frameMiddle.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.animation = false "= true, if animation of wheel set shall be enabled";
//   parameter Real wheelSet.wheelSetJoint.wheelRadius(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelRadius "Radius of one wheel";
//   parameter Real wheelSet.wheelSetJoint.wheelDistance(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelDistance "Distance between the two wheels";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.wheelSetJoint.stateSelect = StateSelect.default "Priority to use the generalized coordinates as states";
//   Real wheelSet.wheelSetJoint.x(quantity = "Length", unit = "m", start = 0.0, fixed = false, StateSelect = StateSelect.default) "x coordinate for center between wheels";
//   Real wheelSet.wheelSetJoint.y(quantity = "Length", unit = "m", start = 0.0, fixed = false, StateSelect = StateSelect.default) "y coordinate for center between wheels";
//   Real wheelSet.wheelSetJoint.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = false, StateSelect = StateSelect.default) "Orientation angle of wheel axis along z-axis";
//   Real wheelSet.wheelSetJoint.theta1(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = false, StateSelect = StateSelect.default) "Angle of wheel 1";
//   Real wheelSet.wheelSetJoint.theta2(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = false, StateSelect = StateSelect.default) "Angle of wheel 2";
//   Real wheelSet.wheelSetJoint.der_theta1(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, fixed = false, StateSelect = StateSelect.default) "Derivative of theta 1";
//   Real wheelSet.wheelSetJoint.der_theta2(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, fixed = false, StateSelect = StateSelect.default) "Derivative of theta 2";
//   Real wheelSet.wheelSetJoint.frame1.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frame1.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frame1.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frame1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frame1.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame1.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame1.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame1.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame1.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame1.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame2.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frame2.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frame2.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frame2.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.frame2.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame2.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame2.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame2.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame2.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.frame2.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.fixed.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.fixed.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled";
//   parameter Real wheelSet.wheelSetJoint.fixed.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from world frame to frame_b, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from world frame to frame_b, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.r[3](quantity = "Length", unit = "m") = wheelSet.wheelSetJoint.wheelRadius "Position vector from world frame to frame_b, resolved in world frame";
//   parameter String wheelSet.wheelSetJoint.fixed.shapeType = "cylinder" " Type of shape";
//   parameter Real wheelSet.wheelSetJoint.fixed.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from world frame to shape origin, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from world frame to shape origin, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from world frame to shape origin, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.lengthDirection[1](quantity = "Length", unit = "m") = wheelSet.wheelSetJoint.fixed.r[1] - wheelSet.wheelSetJoint.fixed.r_shape[1] " Vector in length direction of shape, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.lengthDirection[2](quantity = "Length", unit = "m") = wheelSet.wheelSetJoint.fixed.r[2] - wheelSet.wheelSetJoint.fixed.r_shape[2] " Vector in length direction of shape, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.lengthDirection[3](quantity = "Length", unit = "m") = wheelSet.wheelSetJoint.fixed.r[3] - wheelSet.wheelSetJoint.fixed.r_shape[3] " Vector in length direction of shape, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.widthDirection[1](quantity = "Length", unit = "m") = 0.0 " Vector in width direction of shape, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.widthDirection[2](quantity = "Length", unit = "m") = 1.0 " Vector in width direction of shape, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.widthDirection[3](quantity = "Length", unit = "m") = 0.0 " Vector in width direction of shape, resolved in world frame";
//   parameter Real wheelSet.wheelSetJoint.fixed.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.fixed.r[1] - wheelSet.wheelSetJoint.fixed.r_shape[1],wheelSet.wheelSetJoint.fixed.r[2] - wheelSet.wheelSetJoint.fixed.r_shape[2],wheelSet.wheelSetJoint.fixed.r[3] - wheelSet.wheelSetJoint.fixed.r_shape[3]}) " Length of shape";
//   parameter Real wheelSet.wheelSetJoint.fixed.width(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.fixed.length / world.defaultWidthFraction " Width of shape";
//   parameter Real wheelSet.wheelSetJoint.fixed.height(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.fixed.width " Height of shape";
//   parameter Real wheelSet.wheelSetJoint.fixed.extra = 0.0 " Additional parameter for cone, pipe etc. (see docu of Visualizers.Advanced.Shape)";
//   input Integer wheelSet.wheelSetJoint.fixed.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer wheelSet.wheelSetJoint.fixed.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer wheelSet.wheelSetJoint.fixed.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real wheelSet.wheelSetJoint.fixed.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.rod1.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled";
//   parameter Real wheelSet.wheelSetJoint.rod1.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.r[2](quantity = "Length", unit = "m", start = 0.0) = wheelSet.wheelSetJoint.wheelDistance / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String wheelSet.wheelSetJoint.rod1.shapeType = "cylinder" " Type of shape";
//   parameter Real wheelSet.wheelSetJoint.rod1.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.lengthDirection[1](unit = "1") = wheelSet.wheelSetJoint.rod1.r[1] - wheelSet.wheelSetJoint.rod1.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.lengthDirection[2](unit = "1") = wheelSet.wheelSetJoint.rod1.r[2] - wheelSet.wheelSetJoint.rod1.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.lengthDirection[3](unit = "1") = wheelSet.wheelSetJoint.rod1.r[3] - wheelSet.wheelSetJoint.rod1.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod1.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rod1.r[1] - wheelSet.wheelSetJoint.rod1.r_shape[1],wheelSet.wheelSetJoint.rod1.r[2] - wheelSet.wheelSetJoint.rod1.r_shape[2],wheelSet.wheelSetJoint.rod1.r[3] - wheelSet.wheelSetJoint.rod1.r_shape[3]}) " Length of shape";
//   parameter Real wheelSet.wheelSetJoint.rod1.width(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.rod1.length / world.defaultWidthFraction " Width of shape";
//   parameter Real wheelSet.wheelSetJoint.rod1.height(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.rod1.width " Height of shape.";
//   parameter Real wheelSet.wheelSetJoint.rod1.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer wheelSet.wheelSetJoint.rod1.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer wheelSet.wheelSetJoint.rod1.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer wheelSet.wheelSetJoint.rod1.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real wheelSet.wheelSetJoint.rod1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.prismatic1.useAxisFlange = false "= true, if axis flange is enabled";
//   parameter Boolean wheelSet.wheelSetJoint.prismatic1.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.n[1](unit = "1") = 1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.n[2](unit = "1") = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.n[3](unit = "1") = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   constant Real wheelSet.wheelSetJoint.prismatic1.s_offset(quantity = "Length", unit = "m") = 0.0 "Relative distance offset (distance between frame_a and frame_b = s_offset + s)";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.boxHeight(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.prismatic1.boxWidth "Height of prismatic joint box";
//   input Integer wheelSet.wheelSetJoint.prismatic1.boxColor[1](min = 0, max = 255) = 255 "Color of prismatic joint box";
//   input Integer wheelSet.wheelSetJoint.prismatic1.boxColor[2](min = 0, max = 255) = 0 "Color of prismatic joint box";
//   input Integer wheelSet.wheelSetJoint.prismatic1.boxColor[3](min = 0, max = 255) = 0 "Color of prismatic joint box";
//   input Real wheelSet.wheelSetJoint.prismatic1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.wheelSetJoint.prismatic1.stateSelect = StateSelect.prefer "Priority to use distance s and v=der(s) as states";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.e[1](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.prismatic1.n[1],wheelSet.wheelSetJoint.prismatic1.n[2],wheelSet.wheelSetJoint.prismatic1.n[3]},1e-13)[1] "Unit vector in direction of prismatic axis n";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.e[2](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.prismatic1.n[1],wheelSet.wheelSetJoint.prismatic1.n[2],wheelSet.wheelSetJoint.prismatic1.n[3]},1e-13)[2] "Unit vector in direction of prismatic axis n";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.e[3](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.prismatic1.n[1],wheelSet.wheelSetJoint.prismatic1.n[2],wheelSet.wheelSetJoint.prismatic1.n[3]},1e-13)[3] "Unit vector in direction of prismatic axis n";
//   Real wheelSet.wheelSetJoint.prismatic1.s(quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.prefer) "Relative distance between frame_a and frame_b";
//   Real wheelSet.wheelSetJoint.prismatic1.v(quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of s (relative velocity)";
//   Real wheelSet.wheelSetJoint.prismatic1.a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Second derivative of s (relative acceleration)";
//   Real wheelSet.wheelSetJoint.prismatic1.f(quantity = "Force", unit = "N") "Actuation force in direction of joint axis";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.fixed.s0(quantity = "Length", unit = "m") = 0.0 "fixed offset position of housing";
//   Real wheelSet.wheelSetJoint.prismatic1.fixed.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real wheelSet.wheelSetJoint.prismatic1.fixed.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real wheelSet.wheelSetJoint.prismatic1.internalAxis.f(quantity = "Force", unit = "N") = wheelSet.wheelSetJoint.prismatic1.f "External support force (must be computed via force balance in model where InternalSupport is used; = flange.f)";
//   Real wheelSet.wheelSetJoint.prismatic1.internalAxis.s(quantity = "Length", unit = "m") "External support position (= flange.s)";
//   Real wheelSet.wheelSetJoint.prismatic1.internalAxis.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real wheelSet.wheelSetJoint.prismatic1.internalAxis.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean wheelSet.wheelSetJoint.prismatic1.constantForce.useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
//   Real wheelSet.wheelSetJoint.prismatic1.constantForce.s(quantity = "Length", unit = "m") = wheelSet.wheelSetJoint.prismatic1.constantForce.flange.s - wheelSet.wheelSetJoint.prismatic1.constantForce.s_support "distance between flange and support (= flange.s - support.s)";
//   Real wheelSet.wheelSetJoint.prismatic1.constantForce.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real wheelSet.wheelSetJoint.prismatic1.constantForce.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   protected Real wheelSet.wheelSetJoint.prismatic1.constantForce.s_support(quantity = "Length", unit = "m") "Absolute position of support flange";
//   Real wheelSet.wheelSetJoint.prismatic1.constantForce.f(quantity = "Force", unit = "N") = wheelSet.wheelSetJoint.prismatic1.constantForce.flange.f "Accelerating force acting at flange (= flange.f)";
//   parameter Real wheelSet.wheelSetJoint.prismatic1.constantForce.f_constant(quantity = "Force", unit = "N") = 0.0 "Nominal force (if negative, force is acting as load)";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.prismatic2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.prismatic2.useAxisFlange = false "= true, if axis flange is enabled";
//   parameter Boolean wheelSet.wheelSetJoint.prismatic2.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.n[1](unit = "1") = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.n[2](unit = "1") = 1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.n[3](unit = "1") = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   constant Real wheelSet.wheelSetJoint.prismatic2.s_offset(quantity = "Length", unit = "m") = 0.0 "Relative distance offset (distance between frame_a and frame_b = s_offset + s)";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.boxHeight(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.prismatic2.boxWidth "Height of prismatic joint box";
//   input Integer wheelSet.wheelSetJoint.prismatic2.boxColor[1](min = 0, max = 255) = 255 "Color of prismatic joint box";
//   input Integer wheelSet.wheelSetJoint.prismatic2.boxColor[2](min = 0, max = 255) = 0 "Color of prismatic joint box";
//   input Integer wheelSet.wheelSetJoint.prismatic2.boxColor[3](min = 0, max = 255) = 0 "Color of prismatic joint box";
//   input Real wheelSet.wheelSetJoint.prismatic2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.wheelSetJoint.prismatic2.stateSelect = StateSelect.prefer "Priority to use distance s and v=der(s) as states";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.e[1](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.prismatic2.n[1],wheelSet.wheelSetJoint.prismatic2.n[2],wheelSet.wheelSetJoint.prismatic2.n[3]},1e-13)[1] "Unit vector in direction of prismatic axis n";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.e[2](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.prismatic2.n[1],wheelSet.wheelSetJoint.prismatic2.n[2],wheelSet.wheelSetJoint.prismatic2.n[3]},1e-13)[2] "Unit vector in direction of prismatic axis n";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.e[3](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.prismatic2.n[1],wheelSet.wheelSetJoint.prismatic2.n[2],wheelSet.wheelSetJoint.prismatic2.n[3]},1e-13)[3] "Unit vector in direction of prismatic axis n";
//   Real wheelSet.wheelSetJoint.prismatic2.s(quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.prefer) "Relative distance between frame_a and frame_b";
//   Real wheelSet.wheelSetJoint.prismatic2.v(quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of s (relative velocity)";
//   Real wheelSet.wheelSetJoint.prismatic2.a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Second derivative of s (relative acceleration)";
//   Real wheelSet.wheelSetJoint.prismatic2.f(quantity = "Force", unit = "N") "Actuation force in direction of joint axis";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.fixed.s0(quantity = "Length", unit = "m") = 0.0 "fixed offset position of housing";
//   Real wheelSet.wheelSetJoint.prismatic2.fixed.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real wheelSet.wheelSetJoint.prismatic2.fixed.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real wheelSet.wheelSetJoint.prismatic2.internalAxis.f(quantity = "Force", unit = "N") = wheelSet.wheelSetJoint.prismatic2.f "External support force (must be computed via force balance in model where InternalSupport is used; = flange.f)";
//   Real wheelSet.wheelSetJoint.prismatic2.internalAxis.s(quantity = "Length", unit = "m") "External support position (= flange.s)";
//   Real wheelSet.wheelSetJoint.prismatic2.internalAxis.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real wheelSet.wheelSetJoint.prismatic2.internalAxis.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean wheelSet.wheelSetJoint.prismatic2.constantForce.useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
//   Real wheelSet.wheelSetJoint.prismatic2.constantForce.s(quantity = "Length", unit = "m") = wheelSet.wheelSetJoint.prismatic2.constantForce.flange.s - wheelSet.wheelSetJoint.prismatic2.constantForce.s_support "distance between flange and support (= flange.s - support.s)";
//   Real wheelSet.wheelSetJoint.prismatic2.constantForce.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real wheelSet.wheelSetJoint.prismatic2.constantForce.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   protected Real wheelSet.wheelSetJoint.prismatic2.constantForce.s_support(quantity = "Length", unit = "m") "Absolute position of support flange";
//   Real wheelSet.wheelSetJoint.prismatic2.constantForce.f(quantity = "Force", unit = "N") = wheelSet.wheelSetJoint.prismatic2.constantForce.flange.f "Accelerating force acting at flange (= flange.f)";
//   parameter Real wheelSet.wheelSetJoint.prismatic2.constantForce.f_constant(quantity = "Force", unit = "N") = 0.0 "Nominal force (if negative, force is acting as load)";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.revolute.useAxisFlange = false "= true, if axis flange is enabled";
//   parameter Boolean wheelSet.wheelSetJoint.revolute.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled (show axis as cylinder)";
//   parameter Real wheelSet.wheelSetJoint.revolute.n[1](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.revolute.n[2](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.revolute.n[3](unit = "1") = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   constant Real wheelSet.wheelSetJoint.revolute.phi_offset(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Relative angle offset (angle = phi_offset + phi)";
//   parameter Real wheelSet.wheelSetJoint.revolute.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinder representing the joint axis";
//   parameter Real wheelSet.wheelSetJoint.revolute.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Real wheelSet.wheelSetJoint.revolute.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.wheelSetJoint.revolute.stateSelect = StateSelect.prefer "Priority to use joint angle phi and w=der(phi) as states";
//   Real wheelSet.wheelSetJoint.revolute.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, StateSelect = StateSelect.prefer) "Relative rotation angle from frame_a to frame_b";
//   Real wheelSet.wheelSetJoint.revolute.w(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of angle phi (relative angular velocity)";
//   Real wheelSet.wheelSetJoint.revolute.a(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Second derivative of angle phi (relative angular acceleration)";
//   Real wheelSet.wheelSetJoint.revolute.tau(quantity = "Torque", unit = "N.m") "Driving torque in direction of axis of rotation";
//   Real wheelSet.wheelSetJoint.revolute.angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "= phi_offset + phi";
//   protected parameter Real wheelSet.wheelSetJoint.revolute.e[1](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute.n[1],wheelSet.wheelSetJoint.revolute.n[2],wheelSet.wheelSetJoint.revolute.n[3]},1e-13)[1] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real wheelSet.wheelSetJoint.revolute.e[2](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute.n[1],wheelSet.wheelSetJoint.revolute.n[2],wheelSet.wheelSetJoint.revolute.n[3]},1e-13)[2] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real wheelSet.wheelSetJoint.revolute.e[3](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute.n[1],wheelSet.wheelSetJoint.revolute.n[2],wheelSet.wheelSetJoint.revolute.n[3]},1e-13)[3] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.wheelSetJoint.revolute.fixed.phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
//   Real wheelSet.wheelSetJoint.revolute.fixed.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute.fixed.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real wheelSet.wheelSetJoint.revolute.internalAxis.tau(quantity = "Torque", unit = "N.m") = wheelSet.wheelSetJoint.revolute.tau "External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)";
//   Real wheelSet.wheelSetJoint.revolute.internalAxis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "External support angle (= flange.phi)";
//   Real wheelSet.wheelSetJoint.revolute.internalAxis.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute.internalAxis.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Boolean wheelSet.wheelSetJoint.revolute.constantTorque.useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
//   Real wheelSet.wheelSetJoint.revolute.constantTorque.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute.constantTorque.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   protected Real wheelSet.wheelSetJoint.revolute.constantTorque.phi_support(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of support flange";
//   Real wheelSet.wheelSetJoint.revolute.constantTorque.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Angle of flange with respect to support (= flange.phi - support.phi)";
//   parameter Real wheelSet.wheelSetJoint.revolute.constantTorque.tau_constant(quantity = "Torque", unit = "N.m") = 0.0 "Constant torque (if negative, torque is acting as load)";
//   Real wheelSet.wheelSetJoint.revolute.constantTorque.tau(quantity = "Torque", unit = "N.m") "Accelerating torque acting at flange (= -flange.tau)";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.rod2.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled";
//   parameter Real wheelSet.wheelSetJoint.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = (-wheelSet.wheelSetJoint.wheelDistance) / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String wheelSet.wheelSetJoint.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real wheelSet.wheelSetJoint.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.lengthDirection[1](unit = "1") = wheelSet.wheelSetJoint.rod2.r[1] - wheelSet.wheelSetJoint.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.lengthDirection[2](unit = "1") = wheelSet.wheelSetJoint.rod2.r[2] - wheelSet.wheelSetJoint.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.lengthDirection[3](unit = "1") = wheelSet.wheelSetJoint.rod2.r[3] - wheelSet.wheelSetJoint.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real wheelSet.wheelSetJoint.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rod2.r[1] - wheelSet.wheelSetJoint.rod2.r_shape[1],wheelSet.wheelSetJoint.rod2.r[2] - wheelSet.wheelSetJoint.rod2.r_shape[2],wheelSet.wheelSetJoint.rod2.r[3] - wheelSet.wheelSetJoint.rod2.r_shape[3]}) " Length of shape";
//   parameter Real wheelSet.wheelSetJoint.rod2.width(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.rod2.length / world.defaultWidthFraction " Width of shape";
//   parameter Real wheelSet.wheelSetJoint.rod2.height(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.rod2.width " Height of shape.";
//   parameter Real wheelSet.wheelSetJoint.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer wheelSet.wheelSetJoint.rod2.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer wheelSet.wheelSetJoint.rod2.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer wheelSet.wheelSetJoint.rod2.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real wheelSet.wheelSetJoint.rod2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.revolute1.useAxisFlange = true "= true, if axis flange is enabled";
//   parameter Boolean wheelSet.wheelSetJoint.revolute1.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled (show axis as cylinder)";
//   parameter Real wheelSet.wheelSetJoint.revolute1.n[1](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.revolute1.n[2](unit = "1") = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.revolute1.n[3](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   constant Real wheelSet.wheelSetJoint.revolute1.phi_offset(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Relative angle offset (angle = phi_offset + phi)";
//   parameter Real wheelSet.wheelSetJoint.revolute1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinder representing the joint axis";
//   parameter Real wheelSet.wheelSetJoint.revolute1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute1.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute1.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute1.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Real wheelSet.wheelSetJoint.revolute1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.wheelSetJoint.revolute1.stateSelect = StateSelect.prefer "Priority to use joint angle phi and w=der(phi) as states";
//   Real wheelSet.wheelSetJoint.revolute1.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, StateSelect = StateSelect.prefer) "Relative rotation angle from frame_a to frame_b";
//   Real wheelSet.wheelSetJoint.revolute1.w(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of angle phi (relative angular velocity)";
//   Real wheelSet.wheelSetJoint.revolute1.a(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Second derivative of angle phi (relative angular acceleration)";
//   Real wheelSet.wheelSetJoint.revolute1.tau(quantity = "Torque", unit = "N.m") "Driving torque in direction of axis of rotation";
//   Real wheelSet.wheelSetJoint.revolute1.angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "= phi_offset + phi";
//   protected parameter Real wheelSet.wheelSetJoint.revolute1.e[1](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute1.n[1],wheelSet.wheelSetJoint.revolute1.n[2],wheelSet.wheelSetJoint.revolute1.n[3]},1e-13)[1] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real wheelSet.wheelSetJoint.revolute1.e[2](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute1.n[1],wheelSet.wheelSetJoint.revolute1.n[2],wheelSet.wheelSetJoint.revolute1.n[3]},1e-13)[2] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real wheelSet.wheelSetJoint.revolute1.e[3](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute1.n[1],wheelSet.wheelSetJoint.revolute1.n[2],wheelSet.wheelSetJoint.revolute1.n[3]},1e-13)[3] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute1.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.wheelSetJoint.revolute1.fixed.phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
//   Real wheelSet.wheelSetJoint.revolute1.fixed.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute1.fixed.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real wheelSet.wheelSetJoint.revolute1.internalAxis.tau(quantity = "Torque", unit = "N.m") = wheelSet.wheelSetJoint.revolute1.tau "External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)";
//   Real wheelSet.wheelSetJoint.revolute1.internalAxis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "External support angle (= flange.phi)";
//   Real wheelSet.wheelSetJoint.revolute1.internalAxis.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute1.internalAxis.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.revolute1.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute1.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.revolute1.support.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute1.support.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.revolute2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.wheelSetJoint.revolute2.useAxisFlange = true "= true, if axis flange is enabled";
//   parameter Boolean wheelSet.wheelSetJoint.revolute2.animation = wheelSet.wheelSetJoint.animation "= true, if animation shall be enabled (show axis as cylinder)";
//   parameter Real wheelSet.wheelSetJoint.revolute2.n[1](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.revolute2.n[2](unit = "1") = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real wheelSet.wheelSetJoint.revolute2.n[3](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   constant Real wheelSet.wheelSetJoint.revolute2.phi_offset(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Relative angle offset (angle = phi_offset + phi)";
//   parameter Real wheelSet.wheelSetJoint.revolute2.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinder representing the joint axis";
//   parameter Real wheelSet.wheelSetJoint.revolute2.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute2.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute2.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Integer wheelSet.wheelSetJoint.revolute2.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Real wheelSet.wheelSetJoint.revolute2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) wheelSet.wheelSetJoint.revolute2.stateSelect = StateSelect.prefer "Priority to use joint angle phi and w=der(phi) as states";
//   Real wheelSet.wheelSetJoint.revolute2.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, StateSelect = StateSelect.prefer) "Relative rotation angle from frame_a to frame_b";
//   Real wheelSet.wheelSetJoint.revolute2.w(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of angle phi (relative angular velocity)";
//   Real wheelSet.wheelSetJoint.revolute2.a(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Second derivative of angle phi (relative angular acceleration)";
//   Real wheelSet.wheelSetJoint.revolute2.tau(quantity = "Torque", unit = "N.m") "Driving torque in direction of axis of rotation";
//   Real wheelSet.wheelSetJoint.revolute2.angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "= phi_offset + phi";
//   protected parameter Real wheelSet.wheelSetJoint.revolute2.e[1](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute2.n[1],wheelSet.wheelSetJoint.revolute2.n[2],wheelSet.wheelSetJoint.revolute2.n[3]},1e-13)[1] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real wheelSet.wheelSetJoint.revolute2.e[2](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute2.n[1],wheelSet.wheelSetJoint.revolute2.n[2],wheelSet.wheelSetJoint.revolute2.n[3]},1e-13)[2] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real wheelSet.wheelSetJoint.revolute2.e[3](unit = "1") = Modelica.Math.Vectors.normalize({wheelSet.wheelSetJoint.revolute2.n[1],wheelSet.wheelSetJoint.revolute2.n[2],wheelSet.wheelSetJoint.revolute2.n[3]},1e-13)[3] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.revolute2.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real wheelSet.wheelSetJoint.revolute2.fixed.phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
//   Real wheelSet.wheelSetJoint.revolute2.fixed.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute2.fixed.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real wheelSet.wheelSetJoint.revolute2.internalAxis.tau(quantity = "Torque", unit = "N.m") = wheelSet.wheelSetJoint.revolute2.tau "External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)";
//   Real wheelSet.wheelSetJoint.revolute2.internalAxis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "External support angle (= flange.phi)";
//   Real wheelSet.wheelSetJoint.revolute2.internalAxis.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute2.internalAxis.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.revolute2.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute2.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.revolute2.support.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.revolute2.support.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Real wheelSet.wheelSetJoint.rolling1.radius(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.wheelRadius "Wheel radius";
//   parameter Boolean wheelSet.wheelSetJoint.rolling1.lateralSlidingConstraint = true "= true, if lateral sliding constraint taken into account, = false if lateral force = 0 (needed to avoid overconstraining if two ideal rolling wheels are connect on one axis)";
//   Real wheelSet.wheelSetJoint.rolling1.f_wheel_0[1](quantity = "Force", unit = "N") "Contact force acting on wheel, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling1.f_wheel_0[2](quantity = "Force", unit = "N") "Contact force acting on wheel, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling1.f_wheel_0[3](quantity = "Force", unit = "N") "Contact force acting on wheel, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling1.f_lat(quantity = "Force", unit = "N") "Contact force acting on wheel in lateral direction";
//   Real wheelSet.wheelSetJoint.rolling1.f_long(quantity = "Force", unit = "N") "Contact force acting on wheel in longitudinal direction";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_axis_0[1] "Unit vector along wheel axis, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_axis_0[2] "Unit vector along wheel axis, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_axis_0[3] "Unit vector along wheel axis, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.rContact_0[1](quantity = "Length", unit = "m") "Distance vector from wheel center to contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.rContact_0[2](quantity = "Length", unit = "m") "Distance vector from wheel center to contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.rContact_0[3](quantity = "Length", unit = "m") "Distance vector from wheel center to contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_n_0[1] "Unit vector in normal direction of road at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_n_0[2] "Unit vector in normal direction of road at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_n_0[3] "Unit vector in normal direction of road at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_lat_0[1] "Unit vector in lateral direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_lat_0[2] "Unit vector in lateral direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_lat_0[3] "Unit vector in lateral direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_long_0[1] "Unit vector in longitudinal direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_long_0[2] "Unit vector in longitudinal direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.e_long_0[3] "Unit vector in longitudinal direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.v_0[1](quantity = "Velocity", unit = "m/s") "Velocity of wheel center, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.v_0[2](quantity = "Velocity", unit = "m/s") "Velocity of wheel center, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.v_0[3](quantity = "Velocity", unit = "m/s") "Velocity of wheel center, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.w_0[1](quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of wheel, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.w_0[2](quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of wheel, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.w_0[3](quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of wheel, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.vContact_0[1](quantity = "Velocity", unit = "m/s") "Velocity of wheel contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.vContact_0[2](quantity = "Velocity", unit = "m/s") "Velocity of wheel contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.vContact_0[3](quantity = "Velocity", unit = "m/s") "Velocity of wheel contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling1.aux[1];
//   protected Real wheelSet.wheelSetJoint.rolling1.aux[2];
//   protected Real wheelSet.wheelSetJoint.rolling1.aux[3];
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.rolling2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Real wheelSet.wheelSetJoint.rolling2.radius(quantity = "Length", unit = "m", min = 0.0) = wheelSet.wheelSetJoint.wheelRadius "Wheel radius";
//   parameter Boolean wheelSet.wheelSetJoint.rolling2.lateralSlidingConstraint = false "= true, if lateral sliding constraint taken into account, = false if lateral force = 0 (needed to avoid overconstraining if two ideal rolling wheels are connect on one axis)";
//   Real wheelSet.wheelSetJoint.rolling2.f_wheel_0[1](quantity = "Force", unit = "N") "Contact force acting on wheel, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling2.f_wheel_0[2](quantity = "Force", unit = "N") "Contact force acting on wheel, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling2.f_wheel_0[3](quantity = "Force", unit = "N") "Contact force acting on wheel, resolved in world frame";
//   Real wheelSet.wheelSetJoint.rolling2.f_lat(quantity = "Force", unit = "N") "Contact force acting on wheel in lateral direction";
//   Real wheelSet.wheelSetJoint.rolling2.f_long(quantity = "Force", unit = "N") "Contact force acting on wheel in longitudinal direction";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_axis_0[1] "Unit vector along wheel axis, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_axis_0[2] "Unit vector along wheel axis, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_axis_0[3] "Unit vector along wheel axis, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.rContact_0[1](quantity = "Length", unit = "m") "Distance vector from wheel center to contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.rContact_0[2](quantity = "Length", unit = "m") "Distance vector from wheel center to contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.rContact_0[3](quantity = "Length", unit = "m") "Distance vector from wheel center to contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_n_0[1] "Unit vector in normal direction of road at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_n_0[2] "Unit vector in normal direction of road at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_n_0[3] "Unit vector in normal direction of road at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_lat_0[1] "Unit vector in lateral direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_lat_0[2] "Unit vector in lateral direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_lat_0[3] "Unit vector in lateral direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_long_0[1] "Unit vector in longitudinal direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_long_0[2] "Unit vector in longitudinal direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.e_long_0[3] "Unit vector in longitudinal direction of wheel at contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.v_0[1](quantity = "Velocity", unit = "m/s") "Velocity of wheel center, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.v_0[2](quantity = "Velocity", unit = "m/s") "Velocity of wheel center, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.v_0[3](quantity = "Velocity", unit = "m/s") "Velocity of wheel center, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.w_0[1](quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of wheel, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.w_0[2](quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of wheel, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.w_0[3](quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of wheel, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.vContact_0[1](quantity = "Velocity", unit = "m/s") "Velocity of wheel contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.vContact_0[2](quantity = "Velocity", unit = "m/s") "Velocity of wheel contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.vContact_0[3](quantity = "Velocity", unit = "m/s") "Velocity of wheel contact point, resolved in world frame";
//   protected Real wheelSet.wheelSetJoint.rolling2.aux[1];
//   protected Real wheelSet.wheelSetJoint.rolling2.aux[2];
//   protected Real wheelSet.wheelSetJoint.rolling2.aux[3];
//   Real wheelSet.wheelSetJoint.axis1.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.axis1.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.axis2.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.axis2.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real wheelSet.wheelSetJoint.mounting1D.phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
//   parameter Real wheelSet.wheelSetJoint.mounting1D.n[1](unit = "1") = 1.0 "Axis of rotation = axis of support torque (resolved in frame_a)";
//   parameter Real wheelSet.wheelSetJoint.mounting1D.n[2](unit = "1") = 0.0 "Axis of rotation = axis of support torque (resolved in frame_a)";
//   parameter Real wheelSet.wheelSetJoint.mounting1D.n[3](unit = "1") = 0.0 "Axis of rotation = axis of support torque (resolved in frame_a)";
//   Real wheelSet.wheelSetJoint.mounting1D.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.mounting1D.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   input Real wheelSet.wheelSetJoint.mounting1D.housing.t[1](quantity = "Torque", unit = "N.m") = (-wheelSet.wheelSetJoint.mounting1D.flange_b.tau) * wheelSet.wheelSetJoint.mounting1D.n[1];
//   input Real wheelSet.wheelSetJoint.mounting1D.housing.t[2](quantity = "Torque", unit = "N.m") = (-wheelSet.wheelSetJoint.mounting1D.flange_b.tau) * wheelSet.wheelSetJoint.mounting1D.n[2];
//   input Real wheelSet.wheelSetJoint.mounting1D.housing.t[3](quantity = "Torque", unit = "N.m") = (-wheelSet.wheelSetJoint.mounting1D.flange_b.tau) * wheelSet.wheelSetJoint.mounting1D.n[3];
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.wheelSetJoint.support.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.wheelSetJoint.support.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.support.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real wheelSet.support.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real wheelSet.shape2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.shape2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.shape2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.shape2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.shape2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.shape2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.shape2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.shape2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.shape2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.shape2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.shape2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.shape2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.shape2.animation = wheelSet.animation "= true, if animation shall be enabled";
//   parameter String wheelSet.shape2.shapeType = "pipe" "Type of shape";
//   input Real wheelSet.shape2.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real wheelSet.shape2.r_shape[2](quantity = "Length", unit = "m") = -wheelSet.wheelWidth "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real wheelSet.shape2.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real wheelSet.shape2.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real wheelSet.shape2.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real wheelSet.shape2.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real wheelSet.shape2.widthDirection[1](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real wheelSet.shape2.widthDirection[2](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real wheelSet.shape2.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real wheelSet.shape2.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = 2.0 * wheelSet.wheelWidth "Length of shape";
//   input Real wheelSet.shape2.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = 2.0 * wheelSet.wheelRadius "Width of shape";
//   input Real wheelSet.shape2.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = 2.0 * wheelSet.wheelRadius "Height of shape";
//   input Integer wheelSet.shape2.color[1](min = 0, max = 255) = wheelSet.wheelColor[1] "Color of shape";
//   input Integer wheelSet.shape2.color[2](min = 0, max = 255) = wheelSet.wheelColor[2] "Color of shape";
//   input Integer wheelSet.shape2.color[3](min = 0, max = 255) = wheelSet.wheelColor[3] "Color of shape";
//   input Real wheelSet.shape2.extra = wheelSet.hollowFraction "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real wheelSet.shape2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String wheelSet.shape2.vis.shapeType = wheelSet.shape2.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real wheelSet.shape2.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape2.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real wheelSet.shape2.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real wheelSet.shape2.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real wheelSet.shape2.vis.r[1](quantity = "Length", unit = "m") = wheelSet.shape2.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real wheelSet.shape2.vis.r[2](quantity = "Length", unit = "m") = wheelSet.shape2.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real wheelSet.shape2.vis.r[3](quantity = "Length", unit = "m") = wheelSet.shape2.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real wheelSet.shape2.vis.r_shape[1](quantity = "Length", unit = "m") = wheelSet.shape2.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real wheelSet.shape2.vis.r_shape[2](quantity = "Length", unit = "m") = wheelSet.shape2.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real wheelSet.shape2.vis.r_shape[3](quantity = "Length", unit = "m") = wheelSet.shape2.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real wheelSet.shape2.vis.lengthDirection[1](unit = "1") = wheelSet.shape2.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real wheelSet.shape2.vis.lengthDirection[2](unit = "1") = wheelSet.shape2.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real wheelSet.shape2.vis.lengthDirection[3](unit = "1") = wheelSet.shape2.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real wheelSet.shape2.vis.widthDirection[1](unit = "1") = wheelSet.shape2.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real wheelSet.shape2.vis.widthDirection[2](unit = "1") = wheelSet.shape2.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real wheelSet.shape2.vis.widthDirection[3](unit = "1") = wheelSet.shape2.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real wheelSet.shape2.vis.length(quantity = "Length", unit = "m") = wheelSet.shape2.length "Length of visual object";
//   input Real wheelSet.shape2.vis.width(quantity = "Length", unit = "m") = wheelSet.shape2.width "Width of visual object";
//   input Real wheelSet.shape2.vis.height(quantity = "Length", unit = "m") = wheelSet.shape2.height "Height of visual object";
//   input Real wheelSet.shape2.vis.extra = wheelSet.shape2.extra "Additional size data for some of the shape types";
//   input Real wheelSet.shape2.vis.color[1] = Real(wheelSet.shape2.color[1]) "Color of shape";
//   input Real wheelSet.shape2.vis.color[2] = Real(wheelSet.shape2.color[2]) "Color of shape";
//   input Real wheelSet.shape2.vis.color[3] = Real(wheelSet.shape2.color[3]) "Color of shape";
//   input Real wheelSet.shape2.vis.specularCoefficient = wheelSet.shape2.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real wheelSet.shape2.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({wheelSet.shape2.vis.lengthDirection[1],wheelSet.shape2.vis.lengthDirection[2],wheelSet.shape2.vis.lengthDirection[3]});
//   protected Real wheelSet.shape2.vis.e_x[1](unit = "1") = if noEvent(wheelSet.shape2.vis.abs_n_x < 1e-10) then 1.0 else wheelSet.shape2.vis.lengthDirection[1] / wheelSet.shape2.vis.abs_n_x;
//   protected Real wheelSet.shape2.vis.e_x[2](unit = "1") = if noEvent(wheelSet.shape2.vis.abs_n_x < 1e-10) then 0.0 else wheelSet.shape2.vis.lengthDirection[2] / wheelSet.shape2.vis.abs_n_x;
//   protected Real wheelSet.shape2.vis.e_x[3](unit = "1") = if noEvent(wheelSet.shape2.vis.abs_n_x < 1e-10) then 0.0 else wheelSet.shape2.vis.lengthDirection[3] / wheelSet.shape2.vis.abs_n_x;
//   protected Real wheelSet.shape2.vis.n_z_aux[1](unit = "1") = wheelSet.shape2.vis.e_x[2] * wheelSet.shape2.vis.widthDirection[3] - wheelSet.shape2.vis.e_x[3] * wheelSet.shape2.vis.widthDirection[2];
//   protected Real wheelSet.shape2.vis.n_z_aux[2](unit = "1") = wheelSet.shape2.vis.e_x[3] * wheelSet.shape2.vis.widthDirection[1] - wheelSet.shape2.vis.e_x[1] * wheelSet.shape2.vis.widthDirection[3];
//   protected Real wheelSet.shape2.vis.n_z_aux[3](unit = "1") = wheelSet.shape2.vis.e_x[1] * wheelSet.shape2.vis.widthDirection[2] - wheelSet.shape2.vis.e_x[2] * wheelSet.shape2.vis.widthDirection[1];
//   protected Real wheelSet.shape2.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({wheelSet.shape2.vis.e_x[1],wheelSet.shape2.vis.e_x[2],wheelSet.shape2.vis.e_x[3]},if noEvent(wheelSet.shape2.vis.n_z_aux[1] ^ 2.0 + (wheelSet.shape2.vis.n_z_aux[2] ^ 2.0 + wheelSet.shape2.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {wheelSet.shape2.vis.widthDirection[1],wheelSet.shape2.vis.widthDirection[2],wheelSet.shape2.vis.widthDirection[3]} else if noEvent(abs(wheelSet.shape2.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{wheelSet.shape2.vis.e_x[1],wheelSet.shape2.vis.e_x[2],wheelSet.shape2.vis.e_x[3]})[1];
//   protected Real wheelSet.shape2.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({wheelSet.shape2.vis.e_x[1],wheelSet.shape2.vis.e_x[2],wheelSet.shape2.vis.e_x[3]},if noEvent(wheelSet.shape2.vis.n_z_aux[1] ^ 2.0 + (wheelSet.shape2.vis.n_z_aux[2] ^ 2.0 + wheelSet.shape2.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {wheelSet.shape2.vis.widthDirection[1],wheelSet.shape2.vis.widthDirection[2],wheelSet.shape2.vis.widthDirection[3]} else if noEvent(abs(wheelSet.shape2.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{wheelSet.shape2.vis.e_x[1],wheelSet.shape2.vis.e_x[2],wheelSet.shape2.vis.e_x[3]})[2];
//   protected Real wheelSet.shape2.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({wheelSet.shape2.vis.e_x[1],wheelSet.shape2.vis.e_x[2],wheelSet.shape2.vis.e_x[3]},if noEvent(wheelSet.shape2.vis.n_z_aux[1] ^ 2.0 + (wheelSet.shape2.vis.n_z_aux[2] ^ 2.0 + wheelSet.shape2.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {wheelSet.shape2.vis.widthDirection[1],wheelSet.shape2.vis.widthDirection[2],wheelSet.shape2.vis.widthDirection[3]} else if noEvent(abs(wheelSet.shape2.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{wheelSet.shape2.vis.e_x[1],wheelSet.shape2.vis.e_x[2],wheelSet.shape2.vis.e_x[3]})[3];
//   protected output Real wheelSet.shape2.vis.Form;
//   output Real wheelSet.shape2.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape2.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape2.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape2.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape2.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape2.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape2.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real wheelSet.shape2.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real wheelSet.shape2.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real wheelSet.shape2.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real wheelSet.shape2.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real wheelSet.shape2.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real wheelSet.shape2.vis.Material;
//   protected output Real wheelSet.shape2.vis.Extra;
//   Real wheelSet.shape1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.shape1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.shape1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real wheelSet.shape1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real wheelSet.shape1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.shape1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.shape1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real wheelSet.shape1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.shape1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.shape1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real wheelSet.shape1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.shape1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real wheelSet.shape1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean wheelSet.shape1.animation = wheelSet.animation "= true, if animation shall be enabled";
//   parameter String wheelSet.shape1.shapeType = "pipe" "Type of shape";
//   input Real wheelSet.shape1.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real wheelSet.shape1.r_shape[2](quantity = "Length", unit = "m") = -wheelSet.wheelWidth "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real wheelSet.shape1.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real wheelSet.shape1.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real wheelSet.shape1.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real wheelSet.shape1.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real wheelSet.shape1.widthDirection[1](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real wheelSet.shape1.widthDirection[2](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real wheelSet.shape1.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real wheelSet.shape1.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = 2.0 * wheelSet.wheelWidth "Length of shape";
//   input Real wheelSet.shape1.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = 2.0 * wheelSet.wheelRadius "Width of shape";
//   input Real wheelSet.shape1.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = 2.0 * wheelSet.wheelRadius "Height of shape";
//   input Integer wheelSet.shape1.color[1](min = 0, max = 255) = wheelSet.wheelColor[1] "Color of shape";
//   input Integer wheelSet.shape1.color[2](min = 0, max = 255) = wheelSet.wheelColor[2] "Color of shape";
//   input Integer wheelSet.shape1.color[3](min = 0, max = 255) = wheelSet.wheelColor[3] "Color of shape";
//   input Real wheelSet.shape1.extra = wheelSet.hollowFraction "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real wheelSet.shape1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String wheelSet.shape1.vis.shapeType = wheelSet.shape1.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real wheelSet.shape1.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real wheelSet.shape1.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real wheelSet.shape1.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real wheelSet.shape1.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real wheelSet.shape1.vis.r[1](quantity = "Length", unit = "m") = wheelSet.shape1.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real wheelSet.shape1.vis.r[2](quantity = "Length", unit = "m") = wheelSet.shape1.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real wheelSet.shape1.vis.r[3](quantity = "Length", unit = "m") = wheelSet.shape1.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real wheelSet.shape1.vis.r_shape[1](quantity = "Length", unit = "m") = wheelSet.shape1.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real wheelSet.shape1.vis.r_shape[2](quantity = "Length", unit = "m") = wheelSet.shape1.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real wheelSet.shape1.vis.r_shape[3](quantity = "Length", unit = "m") = wheelSet.shape1.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real wheelSet.shape1.vis.lengthDirection[1](unit = "1") = wheelSet.shape1.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real wheelSet.shape1.vis.lengthDirection[2](unit = "1") = wheelSet.shape1.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real wheelSet.shape1.vis.lengthDirection[3](unit = "1") = wheelSet.shape1.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real wheelSet.shape1.vis.widthDirection[1](unit = "1") = wheelSet.shape1.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real wheelSet.shape1.vis.widthDirection[2](unit = "1") = wheelSet.shape1.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real wheelSet.shape1.vis.widthDirection[3](unit = "1") = wheelSet.shape1.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real wheelSet.shape1.vis.length(quantity = "Length", unit = "m") = wheelSet.shape1.length "Length of visual object";
//   input Real wheelSet.shape1.vis.width(quantity = "Length", unit = "m") = wheelSet.shape1.width "Width of visual object";
//   input Real wheelSet.shape1.vis.height(quantity = "Length", unit = "m") = wheelSet.shape1.height "Height of visual object";
//   input Real wheelSet.shape1.vis.extra = wheelSet.shape1.extra "Additional size data for some of the shape types";
//   input Real wheelSet.shape1.vis.color[1] = Real(wheelSet.shape1.color[1]) "Color of shape";
//   input Real wheelSet.shape1.vis.color[2] = Real(wheelSet.shape1.color[2]) "Color of shape";
//   input Real wheelSet.shape1.vis.color[3] = Real(wheelSet.shape1.color[3]) "Color of shape";
//   input Real wheelSet.shape1.vis.specularCoefficient = wheelSet.shape1.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real wheelSet.shape1.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({wheelSet.shape1.vis.lengthDirection[1],wheelSet.shape1.vis.lengthDirection[2],wheelSet.shape1.vis.lengthDirection[3]});
//   protected Real wheelSet.shape1.vis.e_x[1](unit = "1") = if noEvent(wheelSet.shape1.vis.abs_n_x < 1e-10) then 1.0 else wheelSet.shape1.vis.lengthDirection[1] / wheelSet.shape1.vis.abs_n_x;
//   protected Real wheelSet.shape1.vis.e_x[2](unit = "1") = if noEvent(wheelSet.shape1.vis.abs_n_x < 1e-10) then 0.0 else wheelSet.shape1.vis.lengthDirection[2] / wheelSet.shape1.vis.abs_n_x;
//   protected Real wheelSet.shape1.vis.e_x[3](unit = "1") = if noEvent(wheelSet.shape1.vis.abs_n_x < 1e-10) then 0.0 else wheelSet.shape1.vis.lengthDirection[3] / wheelSet.shape1.vis.abs_n_x;
//   protected Real wheelSet.shape1.vis.n_z_aux[1](unit = "1") = wheelSet.shape1.vis.e_x[2] * wheelSet.shape1.vis.widthDirection[3] - wheelSet.shape1.vis.e_x[3] * wheelSet.shape1.vis.widthDirection[2];
//   protected Real wheelSet.shape1.vis.n_z_aux[2](unit = "1") = wheelSet.shape1.vis.e_x[3] * wheelSet.shape1.vis.widthDirection[1] - wheelSet.shape1.vis.e_x[1] * wheelSet.shape1.vis.widthDirection[3];
//   protected Real wheelSet.shape1.vis.n_z_aux[3](unit = "1") = wheelSet.shape1.vis.e_x[1] * wheelSet.shape1.vis.widthDirection[2] - wheelSet.shape1.vis.e_x[2] * wheelSet.shape1.vis.widthDirection[1];
//   protected Real wheelSet.shape1.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({wheelSet.shape1.vis.e_x[1],wheelSet.shape1.vis.e_x[2],wheelSet.shape1.vis.e_x[3]},if noEvent(wheelSet.shape1.vis.n_z_aux[1] ^ 2.0 + (wheelSet.shape1.vis.n_z_aux[2] ^ 2.0 + wheelSet.shape1.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {wheelSet.shape1.vis.widthDirection[1],wheelSet.shape1.vis.widthDirection[2],wheelSet.shape1.vis.widthDirection[3]} else if noEvent(abs(wheelSet.shape1.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{wheelSet.shape1.vis.e_x[1],wheelSet.shape1.vis.e_x[2],wheelSet.shape1.vis.e_x[3]})[1];
//   protected Real wheelSet.shape1.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({wheelSet.shape1.vis.e_x[1],wheelSet.shape1.vis.e_x[2],wheelSet.shape1.vis.e_x[3]},if noEvent(wheelSet.shape1.vis.n_z_aux[1] ^ 2.0 + (wheelSet.shape1.vis.n_z_aux[2] ^ 2.0 + wheelSet.shape1.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {wheelSet.shape1.vis.widthDirection[1],wheelSet.shape1.vis.widthDirection[2],wheelSet.shape1.vis.widthDirection[3]} else if noEvent(abs(wheelSet.shape1.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{wheelSet.shape1.vis.e_x[1],wheelSet.shape1.vis.e_x[2],wheelSet.shape1.vis.e_x[3]})[2];
//   protected Real wheelSet.shape1.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({wheelSet.shape1.vis.e_x[1],wheelSet.shape1.vis.e_x[2],wheelSet.shape1.vis.e_x[3]},if noEvent(wheelSet.shape1.vis.n_z_aux[1] ^ 2.0 + (wheelSet.shape1.vis.n_z_aux[2] ^ 2.0 + wheelSet.shape1.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {wheelSet.shape1.vis.widthDirection[1],wheelSet.shape1.vis.widthDirection[2],wheelSet.shape1.vis.widthDirection[3]} else if noEvent(abs(wheelSet.shape1.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{wheelSet.shape1.vis.e_x[1],wheelSet.shape1.vis.e_x[2],wheelSet.shape1.vis.e_x[3]})[3];
//   protected output Real wheelSet.shape1.vis.Form;
//   output Real wheelSet.shape1.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape1.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape1.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape1.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape1.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape1.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real wheelSet.shape1.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real wheelSet.shape1.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real wheelSet.shape1.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real wheelSet.shape1.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real wheelSet.shape1.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real wheelSet.shape1.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real wheelSet.shape1.vis.Material;
//   protected output Real wheelSet.shape1.vis.Extra;
//   Real body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 0.01 "Mass of rigid body";
//   parameter Real body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.001 " (1,1) element of inertia tensor";
//   parameter Real body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.001 " (2,2) element of inertia tensor";
//   parameter Real body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.001 " (3,3) element of inertia tensor";
//   parameter Real body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean body.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer body.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer body.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer body.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean body.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean body.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer body.cylinderColor[1](min = 0, max = 255) = body.sphereColor[1] "Color of cylinder";
//   input Integer body.cylinderColor[2](min = 0, max = 255) = body.sphereColor[2] "Color of cylinder";
//   input Integer body.cylinderColor[3](min = 0, max = 255) = body.sphereColor[3] "Color of cylinder";
//   input Real body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean body.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean body.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer body.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer body.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer body.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_11 "inertia tensor";
//   parameter Real body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_21 "inertia tensor";
//   parameter Real body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_31 "inertia tensor";
//   parameter Real body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_21 "inertia tensor";
//   parameter Real body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_22 "inertia tensor";
//   parameter Real body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_32 "inertia tensor";
//   parameter Real body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_31 "inertia tensor";
//   parameter Real body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_32 "inertia tensor";
//   parameter Real body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = body.I_33 "inertia tensor";
//   parameter Real body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.w_0_start[1],body.w_0_start[2],body.w_0_start[3]})[1], fixed = body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.w_0_start[1],body.w_0_start[2],body.w_0_start[3]})[2], fixed = body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.w_0_start[1],body.w_0_start[2],body.w_0_start[3]})[3], fixed = body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[1], fixed = body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[2], fixed = body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[3], fixed = body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real body.Q[1](start = body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real body.Q[2](start = body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real body.Q[3](start = body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real body.Q[4](start = body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if body.sequence_start[1] == body.sequence_angleStates[1] AND body.sequence_start[2] == body.sequence_angleStates[2] AND body.sequence_start[3] == body.sequence_angleStates[3] then body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(body.R_start,{body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if body.sequence_start[1] == body.sequence_angleStates[1] AND body.sequence_start[2] == body.sequence_angleStates[2] AND body.sequence_start[3] == body.sequence_angleStates[3] then body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(body.R_start,{body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if body.sequence_start[1] == body.sequence_angleStates[1] AND body.sequence_start[2] == body.sequence_angleStates[2] AND body.sequence_start[3] == body.sequence_angleStates[3] then body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(body.R_start,{body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   Real fixedTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real fixedTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean fixedTranslation.animation = true "= true, if animation shall be enabled";
//   parameter Real fixedTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.2 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real fixedTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real fixedTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String fixedTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real fixedTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real fixedTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real fixedTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real fixedTranslation.lengthDirection[1](unit = "1") = fixedTranslation.r[1] - fixedTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real fixedTranslation.lengthDirection[2](unit = "1") = fixedTranslation.r[2] - fixedTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real fixedTranslation.lengthDirection[3](unit = "1") = fixedTranslation.r[3] - fixedTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real fixedTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real fixedTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real fixedTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real fixedTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedTranslation.r[1] - fixedTranslation.r_shape[1],fixedTranslation.r[2] - fixedTranslation.r_shape[2],fixedTranslation.r[3] - fixedTranslation.r_shape[3]}) " Length of shape";
//   parameter Real fixedTranslation.width(quantity = "Length", unit = "m", min = 0.0) = 0.04 " Width of shape";
//   parameter Real fixedTranslation.height(quantity = "Length", unit = "m", min = 0.0) = fixedTranslation.width " Height of shape.";
//   parameter Real fixedTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer fixedTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer fixedTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer fixedTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real fixedTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String fixedTranslation.shape.shapeType = fixedTranslation.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedTranslation.shape.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedTranslation.shape.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedTranslation.shape.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedTranslation.shape.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedTranslation.shape.r[1](quantity = "Length", unit = "m") = fixedTranslation.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedTranslation.shape.r[2](quantity = "Length", unit = "m") = fixedTranslation.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedTranslation.shape.r[3](quantity = "Length", unit = "m") = fixedTranslation.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedTranslation.shape.r_shape[1](quantity = "Length", unit = "m") = fixedTranslation.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedTranslation.shape.r_shape[2](quantity = "Length", unit = "m") = fixedTranslation.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedTranslation.shape.r_shape[3](quantity = "Length", unit = "m") = fixedTranslation.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedTranslation.shape.lengthDirection[1](unit = "1") = fixedTranslation.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real fixedTranslation.shape.lengthDirection[2](unit = "1") = fixedTranslation.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real fixedTranslation.shape.lengthDirection[3](unit = "1") = fixedTranslation.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real fixedTranslation.shape.widthDirection[1](unit = "1") = fixedTranslation.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real fixedTranslation.shape.widthDirection[2](unit = "1") = fixedTranslation.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real fixedTranslation.shape.widthDirection[3](unit = "1") = fixedTranslation.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real fixedTranslation.shape.length(quantity = "Length", unit = "m") = fixedTranslation.length "Length of visual object";
//   input Real fixedTranslation.shape.width(quantity = "Length", unit = "m") = fixedTranslation.width "Width of visual object";
//   input Real fixedTranslation.shape.height(quantity = "Length", unit = "m") = fixedTranslation.height "Height of visual object";
//   input Real fixedTranslation.shape.extra = fixedTranslation.extra "Additional size data for some of the shape types";
//   input Real fixedTranslation.shape.color[1] = Real(fixedTranslation.color[1]) "Color of shape";
//   input Real fixedTranslation.shape.color[2] = Real(fixedTranslation.color[2]) "Color of shape";
//   input Real fixedTranslation.shape.color[3] = Real(fixedTranslation.color[3]) "Color of shape";
//   input Real fixedTranslation.shape.specularCoefficient = fixedTranslation.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedTranslation.shape.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedTranslation.shape.lengthDirection[1],fixedTranslation.shape.lengthDirection[2],fixedTranslation.shape.lengthDirection[3]});
//   protected Real fixedTranslation.shape.e_x[1](unit = "1") = if noEvent(fixedTranslation.shape.abs_n_x < 1e-10) then 1.0 else fixedTranslation.shape.lengthDirection[1] / fixedTranslation.shape.abs_n_x;
//   protected Real fixedTranslation.shape.e_x[2](unit = "1") = if noEvent(fixedTranslation.shape.abs_n_x < 1e-10) then 0.0 else fixedTranslation.shape.lengthDirection[2] / fixedTranslation.shape.abs_n_x;
//   protected Real fixedTranslation.shape.e_x[3](unit = "1") = if noEvent(fixedTranslation.shape.abs_n_x < 1e-10) then 0.0 else fixedTranslation.shape.lengthDirection[3] / fixedTranslation.shape.abs_n_x;
//   protected Real fixedTranslation.shape.n_z_aux[1](unit = "1") = fixedTranslation.shape.e_x[2] * fixedTranslation.shape.widthDirection[3] - fixedTranslation.shape.e_x[3] * fixedTranslation.shape.widthDirection[2];
//   protected Real fixedTranslation.shape.n_z_aux[2](unit = "1") = fixedTranslation.shape.e_x[3] * fixedTranslation.shape.widthDirection[1] - fixedTranslation.shape.e_x[1] * fixedTranslation.shape.widthDirection[3];
//   protected Real fixedTranslation.shape.n_z_aux[3](unit = "1") = fixedTranslation.shape.e_x[1] * fixedTranslation.shape.widthDirection[2] - fixedTranslation.shape.e_x[2] * fixedTranslation.shape.widthDirection[1];
//   protected Real fixedTranslation.shape.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedTranslation.shape.e_x[1],fixedTranslation.shape.e_x[2],fixedTranslation.shape.e_x[3]},if noEvent(fixedTranslation.shape.n_z_aux[1] ^ 2.0 + (fixedTranslation.shape.n_z_aux[2] ^ 2.0 + fixedTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedTranslation.shape.widthDirection[1],fixedTranslation.shape.widthDirection[2],fixedTranslation.shape.widthDirection[3]} else if noEvent(abs(fixedTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedTranslation.shape.e_x[1],fixedTranslation.shape.e_x[2],fixedTranslation.shape.e_x[3]})[1];
//   protected Real fixedTranslation.shape.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedTranslation.shape.e_x[1],fixedTranslation.shape.e_x[2],fixedTranslation.shape.e_x[3]},if noEvent(fixedTranslation.shape.n_z_aux[1] ^ 2.0 + (fixedTranslation.shape.n_z_aux[2] ^ 2.0 + fixedTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedTranslation.shape.widthDirection[1],fixedTranslation.shape.widthDirection[2],fixedTranslation.shape.widthDirection[3]} else if noEvent(abs(fixedTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedTranslation.shape.e_x[1],fixedTranslation.shape.e_x[2],fixedTranslation.shape.e_x[3]})[2];
//   protected Real fixedTranslation.shape.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedTranslation.shape.e_x[1],fixedTranslation.shape.e_x[2],fixedTranslation.shape.e_x[3]},if noEvent(fixedTranslation.shape.n_z_aux[1] ^ 2.0 + (fixedTranslation.shape.n_z_aux[2] ^ 2.0 + fixedTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedTranslation.shape.widthDirection[1],fixedTranslation.shape.widthDirection[2],fixedTranslation.shape.widthDirection[3]} else if noEvent(abs(fixedTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedTranslation.shape.e_x[1],fixedTranslation.shape.e_x[2],fixedTranslation.shape.e_x[3]})[3];
//   protected output Real fixedTranslation.shape.Form;
//   output Real fixedTranslation.shape.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedTranslation.shape.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedTranslation.shape.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedTranslation.shape.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedTranslation.shape.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedTranslation.shape.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedTranslation.shape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedTranslation.shape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedTranslation.shape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedTranslation.shape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedTranslation.shape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedTranslation.shape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedTranslation.shape.Material;
//   protected output Real fixedTranslation.shape.Extra;
//   output Real sine1.y "Connector of Real output signal";
//   parameter Real sine1.amplitude = 2.0 "Amplitude of sine wave";
//   parameter Real sine1.freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = 1.0 "Frequency of sine wave";
//   parameter Real sine1.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
//   parameter Real sine1.offset = 0.0 "Offset of output signal";
//   parameter Real sine1.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   protected constant Real sine1.pi = 3.14159265358979;
//   output Real sine2.y "Connector of Real output signal";
//   parameter Real sine2.amplitude = 2.0 "Amplitude of sine wave";
//   parameter Real sine2.freqHz(quantity = "Frequency", unit = "Hz", start = 1.0) = 1.0 "Frequency of sine wave";
//   parameter Real sine2.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 1.5707963267949 "Phase of sine wave";
//   parameter Real sine2.offset = 0.0 "Offset of output signal";
//   parameter Real sine2.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   protected constant Real sine2.pi = 3.14159265358979;
//   Real torque1.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque1.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torque1.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque1.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real torque1.tau "Torque driving the two flanges (a positive value accelerates the flange)";
//   Real torque2.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque2.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torque2.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque2.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real torque2.tau "Torque driving the two flanges (a positive value accelerates the flange)";
//   Real shape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real shape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real shape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real shape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real shape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real shape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real shape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real shape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real shape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real shape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real shape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real shape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real shape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean shape.animation = true "= true, if animation shall be enabled";
//   parameter String shape.shapeType = "pipe" "Type of shape";
//   input Real shape.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real shape.r_shape[2](quantity = "Length", unit = "m") = -wheelSet.wheelWidth "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real shape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real shape.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real shape.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real shape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real shape.widthDirection[1](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real shape.widthDirection[2](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real shape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real shape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = 2.0 * wheelSet.wheelWidth "Length of shape";
//   input Real shape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = 2.0 * wheelSet.wheelRadius "Width of shape";
//   input Real shape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = 2.0 * wheelSet.wheelRadius "Height of shape";
//   input Integer shape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer shape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer shape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real shape.extra = 0.8 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real shape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String shape.vis.shapeType = shape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real shape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real shape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real shape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real shape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real shape.vis.r[1](quantity = "Length", unit = "m") = shape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real shape.vis.r[2](quantity = "Length", unit = "m") = shape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real shape.vis.r[3](quantity = "Length", unit = "m") = shape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real shape.vis.r_shape[1](quantity = "Length", unit = "m") = shape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real shape.vis.r_shape[2](quantity = "Length", unit = "m") = shape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real shape.vis.r_shape[3](quantity = "Length", unit = "m") = shape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real shape.vis.lengthDirection[1](unit = "1") = shape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real shape.vis.lengthDirection[2](unit = "1") = shape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real shape.vis.lengthDirection[3](unit = "1") = shape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real shape.vis.widthDirection[1](unit = "1") = shape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real shape.vis.widthDirection[2](unit = "1") = shape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real shape.vis.widthDirection[3](unit = "1") = shape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real shape.vis.length(quantity = "Length", unit = "m") = shape.length "Length of visual object";
//   input Real shape.vis.width(quantity = "Length", unit = "m") = shape.width "Width of visual object";
//   input Real shape.vis.height(quantity = "Length", unit = "m") = shape.height "Height of visual object";
//   input Real shape.vis.extra = shape.extra "Additional size data for some of the shape types";
//   input Real shape.vis.color[1] = Real(shape.color[1]) "Color of shape";
//   input Real shape.vis.color[2] = Real(shape.color[2]) "Color of shape";
//   input Real shape.vis.color[3] = Real(shape.color[3]) "Color of shape";
//   input Real shape.vis.specularCoefficient = shape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real shape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({shape.vis.lengthDirection[1],shape.vis.lengthDirection[2],shape.vis.lengthDirection[3]});
//   protected Real shape.vis.e_x[1](unit = "1") = if noEvent(shape.vis.abs_n_x < 1e-10) then 1.0 else shape.vis.lengthDirection[1] / shape.vis.abs_n_x;
//   protected Real shape.vis.e_x[2](unit = "1") = if noEvent(shape.vis.abs_n_x < 1e-10) then 0.0 else shape.vis.lengthDirection[2] / shape.vis.abs_n_x;
//   protected Real shape.vis.e_x[3](unit = "1") = if noEvent(shape.vis.abs_n_x < 1e-10) then 0.0 else shape.vis.lengthDirection[3] / shape.vis.abs_n_x;
//   protected Real shape.vis.n_z_aux[1](unit = "1") = shape.vis.e_x[2] * shape.vis.widthDirection[3] - shape.vis.e_x[3] * shape.vis.widthDirection[2];
//   protected Real shape.vis.n_z_aux[2](unit = "1") = shape.vis.e_x[3] * shape.vis.widthDirection[1] - shape.vis.e_x[1] * shape.vis.widthDirection[3];
//   protected Real shape.vis.n_z_aux[3](unit = "1") = shape.vis.e_x[1] * shape.vis.widthDirection[2] - shape.vis.e_x[2] * shape.vis.widthDirection[1];
//   protected Real shape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({shape.vis.e_x[1],shape.vis.e_x[2],shape.vis.e_x[3]},if noEvent(shape.vis.n_z_aux[1] ^ 2.0 + (shape.vis.n_z_aux[2] ^ 2.0 + shape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {shape.vis.widthDirection[1],shape.vis.widthDirection[2],shape.vis.widthDirection[3]} else if noEvent(abs(shape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{shape.vis.e_x[1],shape.vis.e_x[2],shape.vis.e_x[3]})[1];
//   protected Real shape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({shape.vis.e_x[1],shape.vis.e_x[2],shape.vis.e_x[3]},if noEvent(shape.vis.n_z_aux[1] ^ 2.0 + (shape.vis.n_z_aux[2] ^ 2.0 + shape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {shape.vis.widthDirection[1],shape.vis.widthDirection[2],shape.vis.widthDirection[3]} else if noEvent(abs(shape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{shape.vis.e_x[1],shape.vis.e_x[2],shape.vis.e_x[3]})[2];
//   protected Real shape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({shape.vis.e_x[1],shape.vis.e_x[2],shape.vis.e_x[3]},if noEvent(shape.vis.n_z_aux[1] ^ 2.0 + (shape.vis.n_z_aux[2] ^ 2.0 + shape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {shape.vis.widthDirection[1],shape.vis.widthDirection[2],shape.vis.widthDirection[3]} else if noEvent(abs(shape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{shape.vis.e_x[1],shape.vis.e_x[2],shape.vis.e_x[3]})[3];
//   protected output Real shape.vis.Form;
//   output Real shape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real shape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real shape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real shape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real shape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real shape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real shape.vis.Material;
//   protected output Real shape.vis.Extra;
// equation
//   world.x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[1].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[1].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[1].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[2].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[2].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[2].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[1].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[1].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[1].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[2].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[2].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[2].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[1].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[1].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[1].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[2].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[2].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[2].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[3].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[3].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[3].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   world.gravityArrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowLine.shapeType);
//   world.gravityArrowLine.rxvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.rxvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.rxvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.ryvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.ryvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.ryvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.rvisobj = world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowLine.R.T[1,1],world.gravityArrowLine.R.T[1,2],world.gravityArrowLine.R.T[1,3]},{world.gravityArrowLine.R.T[2,1],world.gravityArrowLine.R.T[2,2],world.gravityArrowLine.R.T[2,3]},{world.gravityArrowLine.R.T[3,1],world.gravityArrowLine.R.T[3,2],world.gravityArrowLine.R.T[3,3]}},{world.gravityArrowLine.r_shape[1],world.gravityArrowLine.r_shape[2],world.gravityArrowLine.r_shape[3]});
//   world.gravityArrowLine.size[1] = world.gravityArrowLine.length;
//   world.gravityArrowLine.size[2] = world.gravityArrowLine.width;
//   world.gravityArrowLine.size[3] = world.gravityArrowLine.height;
//   world.gravityArrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowLine.color[1] / 255.0,world.gravityArrowLine.color[2] / 255.0,world.gravityArrowLine.color[3] / 255.0,world.gravityArrowLine.specularCoefficient);
//   world.gravityArrowLine.Extra = world.gravityArrowLine.extra;
//   world.gravityArrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowHead.shapeType);
//   world.gravityArrowHead.rxvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.rxvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.rxvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.ryvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.ryvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.ryvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.rvisobj = world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowHead.R.T[1,1],world.gravityArrowHead.R.T[1,2],world.gravityArrowHead.R.T[1,3]},{world.gravityArrowHead.R.T[2,1],world.gravityArrowHead.R.T[2,2],world.gravityArrowHead.R.T[2,3]},{world.gravityArrowHead.R.T[3,1],world.gravityArrowHead.R.T[3,2],world.gravityArrowHead.R.T[3,3]}},{world.gravityArrowHead.r_shape[1],world.gravityArrowHead.r_shape[2],world.gravityArrowHead.r_shape[3]});
//   world.gravityArrowHead.size[1] = world.gravityArrowHead.length;
//   world.gravityArrowHead.size[2] = world.gravityArrowHead.width;
//   world.gravityArrowHead.size[3] = world.gravityArrowHead.height;
//   world.gravityArrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowHead.color[1] / 255.0,world.gravityArrowHead.color[2] / 255.0,world.gravityArrowHead.color[3] / 255.0,world.gravityArrowHead.specularCoefficient);
//   world.gravityArrowHead.Extra = world.gravityArrowHead.extra;
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-10,"Parameter n of World object is wrong (lenght(n) > 0 required)");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   ground.ground.vis.R.T[1,1] = ground.ground.frame_a.R.T[1,1];
//   ground.ground.vis.R.T[1,2] = ground.ground.frame_a.R.T[1,2];
//   ground.ground.vis.R.T[1,3] = ground.ground.frame_a.R.T[1,3];
//   ground.ground.vis.R.T[2,1] = ground.ground.frame_a.R.T[2,1];
//   ground.ground.vis.R.T[2,2] = ground.ground.frame_a.R.T[2,2];
//   ground.ground.vis.R.T[2,3] = ground.ground.frame_a.R.T[2,3];
//   ground.ground.vis.R.T[3,1] = ground.ground.frame_a.R.T[3,1];
//   ground.ground.vis.R.T[3,2] = ground.ground.frame_a.R.T[3,2];
//   ground.ground.vis.R.T[3,3] = ground.ground.frame_a.R.T[3,3];
//   ground.ground.vis.R.w[1] = ground.ground.frame_a.R.w[1];
//   ground.ground.vis.R.w[2] = ground.ground.frame_a.R.w[2];
//   ground.ground.vis.R.w[3] = ground.ground.frame_a.R.w[3];
//   ground.ground.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(ground.ground.vis.shapeType);
//   ground.ground.vis.rxvisobj[1] = ground.ground.vis.R.T[1,1] * ground.ground.vis.e_x[1] + (ground.ground.vis.R.T[2,1] * ground.ground.vis.e_x[2] + ground.ground.vis.R.T[3,1] * ground.ground.vis.e_x[3]);
//   ground.ground.vis.rxvisobj[2] = ground.ground.vis.R.T[1,2] * ground.ground.vis.e_x[1] + (ground.ground.vis.R.T[2,2] * ground.ground.vis.e_x[2] + ground.ground.vis.R.T[3,2] * ground.ground.vis.e_x[3]);
//   ground.ground.vis.rxvisobj[3] = ground.ground.vis.R.T[1,3] * ground.ground.vis.e_x[1] + (ground.ground.vis.R.T[2,3] * ground.ground.vis.e_x[2] + ground.ground.vis.R.T[3,3] * ground.ground.vis.e_x[3]);
//   ground.ground.vis.ryvisobj[1] = ground.ground.vis.R.T[1,1] * ground.ground.vis.e_y[1] + (ground.ground.vis.R.T[2,1] * ground.ground.vis.e_y[2] + ground.ground.vis.R.T[3,1] * ground.ground.vis.e_y[3]);
//   ground.ground.vis.ryvisobj[2] = ground.ground.vis.R.T[1,2] * ground.ground.vis.e_y[1] + (ground.ground.vis.R.T[2,2] * ground.ground.vis.e_y[2] + ground.ground.vis.R.T[3,2] * ground.ground.vis.e_y[3]);
//   ground.ground.vis.ryvisobj[3] = ground.ground.vis.R.T[1,3] * ground.ground.vis.e_y[1] + (ground.ground.vis.R.T[2,3] * ground.ground.vis.e_y[2] + ground.ground.vis.R.T[3,3] * ground.ground.vis.e_y[3]);
//   ground.ground.vis.rvisobj = ground.ground.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{ground.ground.vis.R.T[1,1],ground.ground.vis.R.T[1,2],ground.ground.vis.R.T[1,3]},{ground.ground.vis.R.T[2,1],ground.ground.vis.R.T[2,2],ground.ground.vis.R.T[2,3]},{ground.ground.vis.R.T[3,1],ground.ground.vis.R.T[3,2],ground.ground.vis.R.T[3,3]}},{ground.ground.vis.r_shape[1],ground.ground.vis.r_shape[2],ground.ground.vis.r_shape[3]});
//   ground.ground.vis.size[1] = ground.ground.vis.length;
//   ground.ground.vis.size[2] = ground.ground.vis.width;
//   ground.ground.vis.size[3] = ground.ground.vis.height;
//   ground.ground.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(ground.ground.vis.color[1] / 255.0,ground.ground.vis.color[2] / 255.0,ground.ground.vis.color[3] / 255.0,ground.ground.vis.specularCoefficient);
//   ground.ground.vis.Extra = ground.ground.vis.extra;
//   ground.ground.frame_a.f[1] = 0.0;
//   ground.ground.frame_a.f[2] = 0.0;
//   ground.ground.frame_a.f[3] = 0.0;
//   ground.ground.frame_a.t[1] = 0.0;
//   ground.ground.frame_a.t[2] = 0.0;
//   ground.ground.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   ground.fixed.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(ground.fixed.shape.shapeType);
//   ground.fixed.shape.rxvisobj[1] = ground.fixed.shape.R.T[1,1] * ground.fixed.shape.e_x[1] + (ground.fixed.shape.R.T[2,1] * ground.fixed.shape.e_x[2] + ground.fixed.shape.R.T[3,1] * ground.fixed.shape.e_x[3]);
//   ground.fixed.shape.rxvisobj[2] = ground.fixed.shape.R.T[1,2] * ground.fixed.shape.e_x[1] + (ground.fixed.shape.R.T[2,2] * ground.fixed.shape.e_x[2] + ground.fixed.shape.R.T[3,2] * ground.fixed.shape.e_x[3]);
//   ground.fixed.shape.rxvisobj[3] = ground.fixed.shape.R.T[1,3] * ground.fixed.shape.e_x[1] + (ground.fixed.shape.R.T[2,3] * ground.fixed.shape.e_x[2] + ground.fixed.shape.R.T[3,3] * ground.fixed.shape.e_x[3]);
//   ground.fixed.shape.ryvisobj[1] = ground.fixed.shape.R.T[1,1] * ground.fixed.shape.e_y[1] + (ground.fixed.shape.R.T[2,1] * ground.fixed.shape.e_y[2] + ground.fixed.shape.R.T[3,1] * ground.fixed.shape.e_y[3]);
//   ground.fixed.shape.ryvisobj[2] = ground.fixed.shape.R.T[1,2] * ground.fixed.shape.e_y[1] + (ground.fixed.shape.R.T[2,2] * ground.fixed.shape.e_y[2] + ground.fixed.shape.R.T[3,2] * ground.fixed.shape.e_y[3]);
//   ground.fixed.shape.ryvisobj[3] = ground.fixed.shape.R.T[1,3] * ground.fixed.shape.e_y[1] + (ground.fixed.shape.R.T[2,3] * ground.fixed.shape.e_y[2] + ground.fixed.shape.R.T[3,3] * ground.fixed.shape.e_y[3]);
//   ground.fixed.shape.rvisobj = ground.fixed.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{ground.fixed.shape.R.T[1,1],ground.fixed.shape.R.T[1,2],ground.fixed.shape.R.T[1,3]},{ground.fixed.shape.R.T[2,1],ground.fixed.shape.R.T[2,2],ground.fixed.shape.R.T[2,3]},{ground.fixed.shape.R.T[3,1],ground.fixed.shape.R.T[3,2],ground.fixed.shape.R.T[3,3]}},{ground.fixed.shape.r_shape[1],ground.fixed.shape.r_shape[2],ground.fixed.shape.r_shape[3]});
//   ground.fixed.shape.size[1] = ground.fixed.shape.length;
//   ground.fixed.shape.size[2] = ground.fixed.shape.width;
//   ground.fixed.shape.size[3] = ground.fixed.shape.height;
//   ground.fixed.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(ground.fixed.shape.color[1] / 255.0,ground.fixed.shape.color[2] / 255.0,ground.fixed.shape.color[3] / 255.0,ground.fixed.shape.specularCoefficient);
//   ground.fixed.shape.Extra = ground.fixed.shape.extra;
//   ground.fixed.frame_b.r_0[1] = ground.fixed.r[1];
//   ground.fixed.frame_b.r_0[2] = ground.fixed.r[2];
//   ground.fixed.frame_b.r_0[3] = ground.fixed.r[3];
//   ground.fixed.frame_b.R.w[3] = 0.0;
//   ground.fixed.frame_b.R.w[2] = 0.0;
//   ground.fixed.frame_b.R.w[1] = 0.0;
//   ground.fixed.frame_b.R.T[3,3] = 1.0;
//   ground.fixed.frame_b.R.T[3,2] = 0.0;
//   ground.fixed.frame_b.R.T[3,1] = 0.0;
//   ground.fixed.frame_b.R.T[2,3] = 0.0;
//   ground.fixed.frame_b.R.T[2,2] = 1.0;
//   ground.fixed.frame_b.R.T[2,1] = 0.0;
//   ground.fixed.frame_b.R.T[1,3] = 0.0;
//   ground.fixed.frame_b.R.T[1,2] = 0.0;
//   ground.fixed.frame_b.R.T[1,1] = 1.0;
//   wheelSet.body2.r_0[1] = wheelSet.body2.frame_a.r_0[1];
//   wheelSet.body2.r_0[2] = wheelSet.body2.frame_a.r_0[2];
//   wheelSet.body2.r_0[3] = wheelSet.body2.frame_a.r_0[3];
//   if true then
//   wheelSet.body2.Q[1] = 0.0;
//   wheelSet.body2.Q[2] = 0.0;
//   wheelSet.body2.Q[3] = 0.0;
//   wheelSet.body2.Q[4] = 1.0;
//   wheelSet.body2.phi[1] = 0.0;
//   wheelSet.body2.phi[2] = 0.0;
//   wheelSet.body2.phi[3] = 0.0;
//   wheelSet.body2.phi_d[1] = 0.0;
//   wheelSet.body2.phi_d[2] = 0.0;
//   wheelSet.body2.phi_d[3] = 0.0;
//   wheelSet.body2.phi_dd[1] = 0.0;
//   wheelSet.body2.phi_dd[2] = 0.0;
//   wheelSet.body2.phi_dd[3] = 0.0;
//   elseif wheelSet.body2.useQuaternions then
//   wheelSet.body2.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({wheelSet.body2.Q[1],wheelSet.body2.Q[2],wheelSet.body2.Q[3],wheelSet.body2.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({wheelSet.body2.Q[1],wheelSet.body2.Q[2],wheelSet.body2.Q[3],wheelSet.body2.Q[4]},{der(wheelSet.body2.Q[1]),der(wheelSet.body2.Q[2]),der(wheelSet.body2.Q[3]),der(wheelSet.body2.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({wheelSet.body2.Q[1],wheelSet.body2.Q[2],wheelSet.body2.Q[3],wheelSet.body2.Q[4]});
//   wheelSet.body2.phi[1] = 0.0;
//   wheelSet.body2.phi[2] = 0.0;
//   wheelSet.body2.phi[3] = 0.0;
//   wheelSet.body2.phi_d[1] = 0.0;
//   wheelSet.body2.phi_d[2] = 0.0;
//   wheelSet.body2.phi_d[3] = 0.0;
//   wheelSet.body2.phi_dd[1] = 0.0;
//   wheelSet.body2.phi_dd[2] = 0.0;
//   wheelSet.body2.phi_dd[3] = 0.0;
//   else
//   wheelSet.body2.phi_d[1] = der(wheelSet.body2.phi[1]);
//   wheelSet.body2.phi_d[2] = der(wheelSet.body2.phi[2]);
//   wheelSet.body2.phi_d[3] = der(wheelSet.body2.phi[3]);
//   wheelSet.body2.phi_dd[1] = der(wheelSet.body2.phi_d[1]);
//   wheelSet.body2.phi_dd[2] = der(wheelSet.body2.phi_d[2]);
//   wheelSet.body2.phi_dd[3] = der(wheelSet.body2.phi_d[3]);
//   wheelSet.body2.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({wheelSet.body2.sequence_angleStates[1],wheelSet.body2.sequence_angleStates[2],wheelSet.body2.sequence_angleStates[3]},{wheelSet.body2.phi[1],wheelSet.body2.phi[2],wheelSet.body2.phi[3]},{wheelSet.body2.phi_d[1],wheelSet.body2.phi_d[2],wheelSet.body2.phi_d[3]});
//   wheelSet.body2.Q[1] = 0.0;
//   wheelSet.body2.Q[2] = 0.0;
//   wheelSet.body2.Q[3] = 0.0;
//   wheelSet.body2.Q[4] = 1.0;
//   end if;
//   wheelSet.body2.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({wheelSet.body2.frame_a.r_0[1],wheelSet.body2.frame_a.r_0[2],wheelSet.body2.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.body2.frame_a.R,{wheelSet.body2.r_CM[1],wheelSet.body2.r_CM[2],wheelSet.body2.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   wheelSet.body2.v_0[1] = der(wheelSet.body2.frame_a.r_0[1]);
//   wheelSet.body2.v_0[2] = der(wheelSet.body2.frame_a.r_0[2]);
//   wheelSet.body2.v_0[3] = der(wheelSet.body2.frame_a.r_0[3]);
//   wheelSet.body2.a_0[1] = der(wheelSet.body2.v_0[1]);
//   wheelSet.body2.a_0[2] = der(wheelSet.body2.v_0[2]);
//   wheelSet.body2.a_0[3] = der(wheelSet.body2.v_0[3]);
//   wheelSet.body2.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(wheelSet.body2.frame_a.R);
//   wheelSet.body2.z_a[1] = der(wheelSet.body2.w_a[1]);
//   wheelSet.body2.z_a[2] = der(wheelSet.body2.w_a[2]);
//   wheelSet.body2.z_a[3] = der(wheelSet.body2.w_a[3]);
//   wheelSet.body2.frame_a.f = wheelSet.body2.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body2.frame_a.R,{wheelSet.body2.a_0[1] - wheelSet.body2.g_0[1],wheelSet.body2.a_0[2] - wheelSet.body2.g_0[2],wheelSet.body2.a_0[3] - wheelSet.body2.g_0[3]}) + {wheelSet.body2.z_a[2] * wheelSet.body2.r_CM[3] - wheelSet.body2.z_a[3] * wheelSet.body2.r_CM[2],wheelSet.body2.z_a[3] * wheelSet.body2.r_CM[1] - wheelSet.body2.z_a[1] * wheelSet.body2.r_CM[3],wheelSet.body2.z_a[1] * wheelSet.body2.r_CM[2] - wheelSet.body2.z_a[2] * wheelSet.body2.r_CM[1]} + {wheelSet.body2.w_a[2] * (wheelSet.body2.w_a[1] * wheelSet.body2.r_CM[2] - wheelSet.body2.w_a[2] * wheelSet.body2.r_CM[1]) - wheelSet.body2.w_a[3] * (wheelSet.body2.w_a[3] * wheelSet.body2.r_CM[1] - wheelSet.body2.w_a[1] * wheelSet.body2.r_CM[3]),wheelSet.body2.w_a[3] * (wheelSet.body2.w_a[2] * wheelSet.body2.r_CM[3] - wheelSet.body2.w_a[3] * wheelSet.body2.r_CM[2]) - wheelSet.body2.w_a[1] * (wheelSet.body2.w_a[1] * wheelSet.body2.r_CM[2] - wheelSet.body2.w_a[2] * wheelSet.body2.r_CM[1]),wheelSet.body2.w_a[1] * (wheelSet.body2.w_a[3] * wheelSet.body2.r_CM[1] - wheelSet.body2.w_a[1] * wheelSet.body2.r_CM[3]) - wheelSet.body2.w_a[2] * (wheelSet.body2.w_a[2] * wheelSet.body2.r_CM[3] - wheelSet.body2.w_a[3] * wheelSet.body2.r_CM[2])});
//   wheelSet.body2.frame_a.t[1] = wheelSet.body2.I[1,1] * wheelSet.body2.z_a[1] + (wheelSet.body2.I[1,2] * wheelSet.body2.z_a[2] + (wheelSet.body2.I[1,3] * wheelSet.body2.z_a[3] + (wheelSet.body2.w_a[2] * (wheelSet.body2.I[3,1] * wheelSet.body2.w_a[1] + (wheelSet.body2.I[3,2] * wheelSet.body2.w_a[2] + wheelSet.body2.I[3,3] * wheelSet.body2.w_a[3])) + ((-wheelSet.body2.w_a[3] * (wheelSet.body2.I[2,1] * wheelSet.body2.w_a[1] + (wheelSet.body2.I[2,2] * wheelSet.body2.w_a[2] + wheelSet.body2.I[2,3] * wheelSet.body2.w_a[3]))) + (wheelSet.body2.r_CM[2] * wheelSet.body2.frame_a.f[3] + (-wheelSet.body2.r_CM[3] * wheelSet.body2.frame_a.f[2]))))));
//   wheelSet.body2.frame_a.t[2] = wheelSet.body2.I[2,1] * wheelSet.body2.z_a[1] + (wheelSet.body2.I[2,2] * wheelSet.body2.z_a[2] + (wheelSet.body2.I[2,3] * wheelSet.body2.z_a[3] + (wheelSet.body2.w_a[3] * (wheelSet.body2.I[1,1] * wheelSet.body2.w_a[1] + (wheelSet.body2.I[1,2] * wheelSet.body2.w_a[2] + wheelSet.body2.I[1,3] * wheelSet.body2.w_a[3])) + ((-wheelSet.body2.w_a[1] * (wheelSet.body2.I[3,1] * wheelSet.body2.w_a[1] + (wheelSet.body2.I[3,2] * wheelSet.body2.w_a[2] + wheelSet.body2.I[3,3] * wheelSet.body2.w_a[3]))) + (wheelSet.body2.r_CM[3] * wheelSet.body2.frame_a.f[1] + (-wheelSet.body2.r_CM[1] * wheelSet.body2.frame_a.f[3]))))));
//   wheelSet.body2.frame_a.t[3] = wheelSet.body2.I[3,1] * wheelSet.body2.z_a[1] + (wheelSet.body2.I[3,2] * wheelSet.body2.z_a[2] + (wheelSet.body2.I[3,3] * wheelSet.body2.z_a[3] + (wheelSet.body2.w_a[1] * (wheelSet.body2.I[2,1] * wheelSet.body2.w_a[1] + (wheelSet.body2.I[2,2] * wheelSet.body2.w_a[2] + wheelSet.body2.I[2,3] * wheelSet.body2.w_a[3])) + ((-wheelSet.body2.w_a[2] * (wheelSet.body2.I[1,1] * wheelSet.body2.w_a[1] + (wheelSet.body2.I[1,2] * wheelSet.body2.w_a[2] + wheelSet.body2.I[1,3] * wheelSet.body2.w_a[3]))) + (wheelSet.body2.r_CM[1] * wheelSet.body2.frame_a.f[2] + (-wheelSet.body2.r_CM[2] * wheelSet.body2.frame_a.f[1]))))));
//   wheelSet.body1.r_0[1] = wheelSet.body1.frame_a.r_0[1];
//   wheelSet.body1.r_0[2] = wheelSet.body1.frame_a.r_0[2];
//   wheelSet.body1.r_0[3] = wheelSet.body1.frame_a.r_0[3];
//   if true then
//   wheelSet.body1.Q[1] = 0.0;
//   wheelSet.body1.Q[2] = 0.0;
//   wheelSet.body1.Q[3] = 0.0;
//   wheelSet.body1.Q[4] = 1.0;
//   wheelSet.body1.phi[1] = 0.0;
//   wheelSet.body1.phi[2] = 0.0;
//   wheelSet.body1.phi[3] = 0.0;
//   wheelSet.body1.phi_d[1] = 0.0;
//   wheelSet.body1.phi_d[2] = 0.0;
//   wheelSet.body1.phi_d[3] = 0.0;
//   wheelSet.body1.phi_dd[1] = 0.0;
//   wheelSet.body1.phi_dd[2] = 0.0;
//   wheelSet.body1.phi_dd[3] = 0.0;
//   elseif wheelSet.body1.useQuaternions then
//   wheelSet.body1.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({wheelSet.body1.Q[1],wheelSet.body1.Q[2],wheelSet.body1.Q[3],wheelSet.body1.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({wheelSet.body1.Q[1],wheelSet.body1.Q[2],wheelSet.body1.Q[3],wheelSet.body1.Q[4]},{der(wheelSet.body1.Q[1]),der(wheelSet.body1.Q[2]),der(wheelSet.body1.Q[3]),der(wheelSet.body1.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({wheelSet.body1.Q[1],wheelSet.body1.Q[2],wheelSet.body1.Q[3],wheelSet.body1.Q[4]});
//   wheelSet.body1.phi[1] = 0.0;
//   wheelSet.body1.phi[2] = 0.0;
//   wheelSet.body1.phi[3] = 0.0;
//   wheelSet.body1.phi_d[1] = 0.0;
//   wheelSet.body1.phi_d[2] = 0.0;
//   wheelSet.body1.phi_d[3] = 0.0;
//   wheelSet.body1.phi_dd[1] = 0.0;
//   wheelSet.body1.phi_dd[2] = 0.0;
//   wheelSet.body1.phi_dd[3] = 0.0;
//   else
//   wheelSet.body1.phi_d[1] = der(wheelSet.body1.phi[1]);
//   wheelSet.body1.phi_d[2] = der(wheelSet.body1.phi[2]);
//   wheelSet.body1.phi_d[3] = der(wheelSet.body1.phi[3]);
//   wheelSet.body1.phi_dd[1] = der(wheelSet.body1.phi_d[1]);
//   wheelSet.body1.phi_dd[2] = der(wheelSet.body1.phi_d[2]);
//   wheelSet.body1.phi_dd[3] = der(wheelSet.body1.phi_d[3]);
//   wheelSet.body1.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({wheelSet.body1.sequence_angleStates[1],wheelSet.body1.sequence_angleStates[2],wheelSet.body1.sequence_angleStates[3]},{wheelSet.body1.phi[1],wheelSet.body1.phi[2],wheelSet.body1.phi[3]},{wheelSet.body1.phi_d[1],wheelSet.body1.phi_d[2],wheelSet.body1.phi_d[3]});
//   wheelSet.body1.Q[1] = 0.0;
//   wheelSet.body1.Q[2] = 0.0;
//   wheelSet.body1.Q[3] = 0.0;
//   wheelSet.body1.Q[4] = 1.0;
//   end if;
//   wheelSet.body1.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({wheelSet.body1.frame_a.r_0[1],wheelSet.body1.frame_a.r_0[2],wheelSet.body1.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.body1.frame_a.R,{wheelSet.body1.r_CM[1],wheelSet.body1.r_CM[2],wheelSet.body1.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   wheelSet.body1.v_0[1] = der(wheelSet.body1.frame_a.r_0[1]);
//   wheelSet.body1.v_0[2] = der(wheelSet.body1.frame_a.r_0[2]);
//   wheelSet.body1.v_0[3] = der(wheelSet.body1.frame_a.r_0[3]);
//   wheelSet.body1.a_0[1] = der(wheelSet.body1.v_0[1]);
//   wheelSet.body1.a_0[2] = der(wheelSet.body1.v_0[2]);
//   wheelSet.body1.a_0[3] = der(wheelSet.body1.v_0[3]);
//   wheelSet.body1.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(wheelSet.body1.frame_a.R);
//   wheelSet.body1.z_a[1] = der(wheelSet.body1.w_a[1]);
//   wheelSet.body1.z_a[2] = der(wheelSet.body1.w_a[2]);
//   wheelSet.body1.z_a[3] = der(wheelSet.body1.w_a[3]);
//   wheelSet.body1.frame_a.f = wheelSet.body1.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.body1.frame_a.R,{wheelSet.body1.a_0[1] - wheelSet.body1.g_0[1],wheelSet.body1.a_0[2] - wheelSet.body1.g_0[2],wheelSet.body1.a_0[3] - wheelSet.body1.g_0[3]}) + {wheelSet.body1.z_a[2] * wheelSet.body1.r_CM[3] - wheelSet.body1.z_a[3] * wheelSet.body1.r_CM[2],wheelSet.body1.z_a[3] * wheelSet.body1.r_CM[1] - wheelSet.body1.z_a[1] * wheelSet.body1.r_CM[3],wheelSet.body1.z_a[1] * wheelSet.body1.r_CM[2] - wheelSet.body1.z_a[2] * wheelSet.body1.r_CM[1]} + {wheelSet.body1.w_a[2] * (wheelSet.body1.w_a[1] * wheelSet.body1.r_CM[2] - wheelSet.body1.w_a[2] * wheelSet.body1.r_CM[1]) - wheelSet.body1.w_a[3] * (wheelSet.body1.w_a[3] * wheelSet.body1.r_CM[1] - wheelSet.body1.w_a[1] * wheelSet.body1.r_CM[3]),wheelSet.body1.w_a[3] * (wheelSet.body1.w_a[2] * wheelSet.body1.r_CM[3] - wheelSet.body1.w_a[3] * wheelSet.body1.r_CM[2]) - wheelSet.body1.w_a[1] * (wheelSet.body1.w_a[1] * wheelSet.body1.r_CM[2] - wheelSet.body1.w_a[2] * wheelSet.body1.r_CM[1]),wheelSet.body1.w_a[1] * (wheelSet.body1.w_a[3] * wheelSet.body1.r_CM[1] - wheelSet.body1.w_a[1] * wheelSet.body1.r_CM[3]) - wheelSet.body1.w_a[2] * (wheelSet.body1.w_a[2] * wheelSet.body1.r_CM[3] - wheelSet.body1.w_a[3] * wheelSet.body1.r_CM[2])});
//   wheelSet.body1.frame_a.t[1] = wheelSet.body1.I[1,1] * wheelSet.body1.z_a[1] + (wheelSet.body1.I[1,2] * wheelSet.body1.z_a[2] + (wheelSet.body1.I[1,3] * wheelSet.body1.z_a[3] + (wheelSet.body1.w_a[2] * (wheelSet.body1.I[3,1] * wheelSet.body1.w_a[1] + (wheelSet.body1.I[3,2] * wheelSet.body1.w_a[2] + wheelSet.body1.I[3,3] * wheelSet.body1.w_a[3])) + ((-wheelSet.body1.w_a[3] * (wheelSet.body1.I[2,1] * wheelSet.body1.w_a[1] + (wheelSet.body1.I[2,2] * wheelSet.body1.w_a[2] + wheelSet.body1.I[2,3] * wheelSet.body1.w_a[3]))) + (wheelSet.body1.r_CM[2] * wheelSet.body1.frame_a.f[3] + (-wheelSet.body1.r_CM[3] * wheelSet.body1.frame_a.f[2]))))));
//   wheelSet.body1.frame_a.t[2] = wheelSet.body1.I[2,1] * wheelSet.body1.z_a[1] + (wheelSet.body1.I[2,2] * wheelSet.body1.z_a[2] + (wheelSet.body1.I[2,3] * wheelSet.body1.z_a[3] + (wheelSet.body1.w_a[3] * (wheelSet.body1.I[1,1] * wheelSet.body1.w_a[1] + (wheelSet.body1.I[1,2] * wheelSet.body1.w_a[2] + wheelSet.body1.I[1,3] * wheelSet.body1.w_a[3])) + ((-wheelSet.body1.w_a[1] * (wheelSet.body1.I[3,1] * wheelSet.body1.w_a[1] + (wheelSet.body1.I[3,2] * wheelSet.body1.w_a[2] + wheelSet.body1.I[3,3] * wheelSet.body1.w_a[3]))) + (wheelSet.body1.r_CM[3] * wheelSet.body1.frame_a.f[1] + (-wheelSet.body1.r_CM[1] * wheelSet.body1.frame_a.f[3]))))));
//   wheelSet.body1.frame_a.t[3] = wheelSet.body1.I[3,1] * wheelSet.body1.z_a[1] + (wheelSet.body1.I[3,2] * wheelSet.body1.z_a[2] + (wheelSet.body1.I[3,3] * wheelSet.body1.z_a[3] + (wheelSet.body1.w_a[1] * (wheelSet.body1.I[2,1] * wheelSet.body1.w_a[1] + (wheelSet.body1.I[2,2] * wheelSet.body1.w_a[2] + wheelSet.body1.I[2,3] * wheelSet.body1.w_a[3])) + ((-wheelSet.body1.w_a[2] * (wheelSet.body1.I[1,1] * wheelSet.body1.w_a[1] + (wheelSet.body1.I[1,2] * wheelSet.body1.w_a[2] + wheelSet.body1.I[1,3] * wheelSet.body1.w_a[3]))) + (wheelSet.body1.r_CM[1] * wheelSet.body1.frame_a.f[2] + (-wheelSet.body1.r_CM[2] * wheelSet.body1.frame_a.f[1]))))));
//   wheelSet.wheelSetJoint.fixed.frame_b.r_0[1] = wheelSet.wheelSetJoint.fixed.r[1];
//   wheelSet.wheelSetJoint.fixed.frame_b.r_0[2] = wheelSet.wheelSetJoint.fixed.r[2];
//   wheelSet.wheelSetJoint.fixed.frame_b.r_0[3] = wheelSet.wheelSetJoint.fixed.r[3];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.w[3] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.w[2] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.w[1] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,3] = 1.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,2] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,1] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,3] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,2] = 1.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,1] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,3] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,2] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,1] = 1.0;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   wheelSet.wheelSetJoint.rod1.frame_b.r_0 = wheelSet.wheelSetJoint.rod1.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.rod1.frame_a.R,{wheelSet.wheelSetJoint.rod1.r[1],wheelSet.wheelSetJoint.rod1.r[2],wheelSet.wheelSetJoint.rod1.r[3]});
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.w[1] = wheelSet.wheelSetJoint.rod1.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.w[2] = wheelSet.wheelSetJoint.rod1.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.rod1.frame_b.R.w[3] = wheelSet.wheelSetJoint.rod1.frame_a.R.w[3];
//   0.0 = wheelSet.wheelSetJoint.rod1.frame_a.f[1] + wheelSet.wheelSetJoint.rod1.frame_b.f[1];
//   0.0 = wheelSet.wheelSetJoint.rod1.frame_a.f[2] + wheelSet.wheelSetJoint.rod1.frame_b.f[2];
//   0.0 = wheelSet.wheelSetJoint.rod1.frame_a.f[3] + wheelSet.wheelSetJoint.rod1.frame_b.f[3];
//   0.0 = wheelSet.wheelSetJoint.rod1.frame_a.t[1] + (wheelSet.wheelSetJoint.rod1.frame_b.t[1] + (wheelSet.wheelSetJoint.rod1.r[2] * wheelSet.wheelSetJoint.rod1.frame_b.f[3] + (-wheelSet.wheelSetJoint.rod1.r[3] * wheelSet.wheelSetJoint.rod1.frame_b.f[2])));
//   0.0 = wheelSet.wheelSetJoint.rod1.frame_a.t[2] + (wheelSet.wheelSetJoint.rod1.frame_b.t[2] + (wheelSet.wheelSetJoint.rod1.r[3] * wheelSet.wheelSetJoint.rod1.frame_b.f[1] + (-wheelSet.wheelSetJoint.rod1.r[1] * wheelSet.wheelSetJoint.rod1.frame_b.f[3])));
//   0.0 = wheelSet.wheelSetJoint.rod1.frame_a.t[3] + (wheelSet.wheelSetJoint.rod1.frame_b.t[3] + (wheelSet.wheelSetJoint.rod1.r[1] * wheelSet.wheelSetJoint.rod1.frame_b.f[2] + (-wheelSet.wheelSetJoint.rod1.r[2] * wheelSet.wheelSetJoint.rod1.frame_b.f[1])));
//   wheelSet.wheelSetJoint.prismatic1.fixed.flange.s = wheelSet.wheelSetJoint.prismatic1.fixed.s0;
//   wheelSet.wheelSetJoint.prismatic1.internalAxis.flange.f = wheelSet.wheelSetJoint.prismatic1.internalAxis.f;
//   wheelSet.wheelSetJoint.prismatic1.internalAxis.flange.s = wheelSet.wheelSetJoint.prismatic1.internalAxis.s;
//   wheelSet.wheelSetJoint.prismatic1.constantForce.f = -wheelSet.wheelSetJoint.prismatic1.constantForce.f_constant;
//   wheelSet.wheelSetJoint.prismatic1.constantForce.s_support = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.v = der(wheelSet.wheelSetJoint.prismatic1.s);
//   wheelSet.wheelSetJoint.prismatic1.a = der(wheelSet.wheelSetJoint.prismatic1.v);
//   wheelSet.wheelSetJoint.prismatic1.frame_b.r_0 = wheelSet.wheelSetJoint.prismatic1.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.prismatic1.frame_a.R,{wheelSet.wheelSetJoint.prismatic1.s * wheelSet.wheelSetJoint.prismatic1.e[1],wheelSet.wheelSetJoint.prismatic1.s * wheelSet.wheelSetJoint.prismatic1.e[2],wheelSet.wheelSetJoint.prismatic1.s * wheelSet.wheelSetJoint.prismatic1.e[3]});
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[3];
//   0.0 = wheelSet.wheelSetJoint.prismatic1.frame_a.f[1] + wheelSet.wheelSetJoint.prismatic1.frame_b.f[1];
//   0.0 = wheelSet.wheelSetJoint.prismatic1.frame_a.f[2] + wheelSet.wheelSetJoint.prismatic1.frame_b.f[2];
//   0.0 = wheelSet.wheelSetJoint.prismatic1.frame_a.f[3] + wheelSet.wheelSetJoint.prismatic1.frame_b.f[3];
//   0.0 = wheelSet.wheelSetJoint.prismatic1.frame_a.t[1] + (wheelSet.wheelSetJoint.prismatic1.frame_b.t[1] + (wheelSet.wheelSetJoint.prismatic1.s * (wheelSet.wheelSetJoint.prismatic1.e[2] * wheelSet.wheelSetJoint.prismatic1.frame_b.f[3]) + (-wheelSet.wheelSetJoint.prismatic1.s * (wheelSet.wheelSetJoint.prismatic1.e[3] * wheelSet.wheelSetJoint.prismatic1.frame_b.f[2]))));
//   0.0 = wheelSet.wheelSetJoint.prismatic1.frame_a.t[2] + (wheelSet.wheelSetJoint.prismatic1.frame_b.t[2] + (wheelSet.wheelSetJoint.prismatic1.s * (wheelSet.wheelSetJoint.prismatic1.e[3] * wheelSet.wheelSetJoint.prismatic1.frame_b.f[1]) + (-wheelSet.wheelSetJoint.prismatic1.s * (wheelSet.wheelSetJoint.prismatic1.e[1] * wheelSet.wheelSetJoint.prismatic1.frame_b.f[3]))));
//   0.0 = wheelSet.wheelSetJoint.prismatic1.frame_a.t[3] + (wheelSet.wheelSetJoint.prismatic1.frame_b.t[3] + (wheelSet.wheelSetJoint.prismatic1.s * (wheelSet.wheelSetJoint.prismatic1.e[1] * wheelSet.wheelSetJoint.prismatic1.frame_b.f[2]) + (-wheelSet.wheelSetJoint.prismatic1.s * (wheelSet.wheelSetJoint.prismatic1.e[2] * wheelSet.wheelSetJoint.prismatic1.frame_b.f[1]))));
//   wheelSet.wheelSetJoint.prismatic1.f = (-wheelSet.wheelSetJoint.prismatic1.e[1]) * wheelSet.wheelSetJoint.prismatic1.frame_b.f[1] + ((-wheelSet.wheelSetJoint.prismatic1.e[2]) * wheelSet.wheelSetJoint.prismatic1.frame_b.f[2] + (-wheelSet.wheelSetJoint.prismatic1.e[3]) * wheelSet.wheelSetJoint.prismatic1.frame_b.f[3]);
//   wheelSet.wheelSetJoint.prismatic1.s = wheelSet.wheelSetJoint.prismatic1.internalAxis.s;
//   assert(true,"Connector frame_a of joint object is not connected");
//   assert(true,"Connector frame_b of joint object is not connected");
//   wheelSet.wheelSetJoint.prismatic2.fixed.flange.s = wheelSet.wheelSetJoint.prismatic2.fixed.s0;
//   wheelSet.wheelSetJoint.prismatic2.internalAxis.flange.f = wheelSet.wheelSetJoint.prismatic2.internalAxis.f;
//   wheelSet.wheelSetJoint.prismatic2.internalAxis.flange.s = wheelSet.wheelSetJoint.prismatic2.internalAxis.s;
//   wheelSet.wheelSetJoint.prismatic2.constantForce.f = -wheelSet.wheelSetJoint.prismatic2.constantForce.f_constant;
//   wheelSet.wheelSetJoint.prismatic2.constantForce.s_support = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.v = der(wheelSet.wheelSetJoint.prismatic2.s);
//   wheelSet.wheelSetJoint.prismatic2.a = der(wheelSet.wheelSetJoint.prismatic2.v);
//   wheelSet.wheelSetJoint.prismatic2.frame_b.r_0 = wheelSet.wheelSetJoint.prismatic2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.prismatic2.frame_a.R,{wheelSet.wheelSetJoint.prismatic2.s * wheelSet.wheelSetJoint.prismatic2.e[1],wheelSet.wheelSetJoint.prismatic2.s * wheelSet.wheelSetJoint.prismatic2.e[2],wheelSet.wheelSetJoint.prismatic2.s * wheelSet.wheelSetJoint.prismatic2.e[3]});
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[3];
//   0.0 = wheelSet.wheelSetJoint.prismatic2.frame_a.f[1] + wheelSet.wheelSetJoint.prismatic2.frame_b.f[1];
//   0.0 = wheelSet.wheelSetJoint.prismatic2.frame_a.f[2] + wheelSet.wheelSetJoint.prismatic2.frame_b.f[2];
//   0.0 = wheelSet.wheelSetJoint.prismatic2.frame_a.f[3] + wheelSet.wheelSetJoint.prismatic2.frame_b.f[3];
//   0.0 = wheelSet.wheelSetJoint.prismatic2.frame_a.t[1] + (wheelSet.wheelSetJoint.prismatic2.frame_b.t[1] + (wheelSet.wheelSetJoint.prismatic2.s * (wheelSet.wheelSetJoint.prismatic2.e[2] * wheelSet.wheelSetJoint.prismatic2.frame_b.f[3]) + (-wheelSet.wheelSetJoint.prismatic2.s * (wheelSet.wheelSetJoint.prismatic2.e[3] * wheelSet.wheelSetJoint.prismatic2.frame_b.f[2]))));
//   0.0 = wheelSet.wheelSetJoint.prismatic2.frame_a.t[2] + (wheelSet.wheelSetJoint.prismatic2.frame_b.t[2] + (wheelSet.wheelSetJoint.prismatic2.s * (wheelSet.wheelSetJoint.prismatic2.e[3] * wheelSet.wheelSetJoint.prismatic2.frame_b.f[1]) + (-wheelSet.wheelSetJoint.prismatic2.s * (wheelSet.wheelSetJoint.prismatic2.e[1] * wheelSet.wheelSetJoint.prismatic2.frame_b.f[3]))));
//   0.0 = wheelSet.wheelSetJoint.prismatic2.frame_a.t[3] + (wheelSet.wheelSetJoint.prismatic2.frame_b.t[3] + (wheelSet.wheelSetJoint.prismatic2.s * (wheelSet.wheelSetJoint.prismatic2.e[1] * wheelSet.wheelSetJoint.prismatic2.frame_b.f[2]) + (-wheelSet.wheelSetJoint.prismatic2.s * (wheelSet.wheelSetJoint.prismatic2.e[2] * wheelSet.wheelSetJoint.prismatic2.frame_b.f[1]))));
//   wheelSet.wheelSetJoint.prismatic2.f = (-wheelSet.wheelSetJoint.prismatic2.e[1]) * wheelSet.wheelSetJoint.prismatic2.frame_b.f[1] + ((-wheelSet.wheelSetJoint.prismatic2.e[2]) * wheelSet.wheelSetJoint.prismatic2.frame_b.f[2] + (-wheelSet.wheelSetJoint.prismatic2.e[3]) * wheelSet.wheelSetJoint.prismatic2.frame_b.f[3]);
//   wheelSet.wheelSetJoint.prismatic2.s = wheelSet.wheelSetJoint.prismatic2.internalAxis.s;
//   assert(true,"Connector frame_a of joint object is not connected");
//   assert(true,"Connector frame_b of joint object is not connected");
//   wheelSet.wheelSetJoint.revolute.fixed.flange.phi = wheelSet.wheelSetJoint.revolute.fixed.phi0;
//   wheelSet.wheelSetJoint.revolute.internalAxis.flange.tau = wheelSet.wheelSetJoint.revolute.internalAxis.tau;
//   wheelSet.wheelSetJoint.revolute.internalAxis.flange.phi = wheelSet.wheelSetJoint.revolute.internalAxis.phi;
//   wheelSet.wheelSetJoint.revolute.constantTorque.tau = -wheelSet.wheelSetJoint.revolute.constantTorque.flange.tau;
//   wheelSet.wheelSetJoint.revolute.constantTorque.tau = wheelSet.wheelSetJoint.revolute.constantTorque.tau_constant;
//   wheelSet.wheelSetJoint.revolute.constantTorque.phi = wheelSet.wheelSetJoint.revolute.constantTorque.flange.phi - wheelSet.wheelSetJoint.revolute.constantTorque.phi_support;
//   wheelSet.wheelSetJoint.revolute.constantTorque.phi_support = 0.0;
//   assert(true,"Connector frame_a of revolute joint is not connected");
//   assert(true,"Connector frame_b of revolute joint is not connected");
//   wheelSet.wheelSetJoint.revolute.angle = wheelSet.wheelSetJoint.revolute.phi;
//   wheelSet.wheelSetJoint.revolute.w = der(wheelSet.wheelSetJoint.revolute.phi);
//   wheelSet.wheelSetJoint.revolute.a = der(wheelSet.wheelSetJoint.revolute.w);
//   wheelSet.wheelSetJoint.revolute.frame_b.r_0[1] = wheelSet.wheelSetJoint.revolute.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.revolute.frame_b.r_0[2] = wheelSet.wheelSetJoint.revolute.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.revolute.frame_b.r_0[3] = wheelSet.wheelSetJoint.revolute.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.revolute.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({wheelSet.wheelSetJoint.revolute.e[1],wheelSet.wheelSetJoint.revolute.e[2],wheelSet.wheelSetJoint.revolute.e[3]},wheelSet.wheelSetJoint.revolute.phi,wheelSet.wheelSetJoint.revolute.w);
//   wheelSet.wheelSetJoint.revolute.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(wheelSet.wheelSetJoint.revolute.frame_a.R,wheelSet.wheelSetJoint.revolute.R_rel);
//   wheelSet.wheelSetJoint.revolute.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.revolute.R_rel,{wheelSet.wheelSetJoint.revolute.frame_b.f[1],wheelSet.wheelSetJoint.revolute.frame_b.f[2],wheelSet.wheelSetJoint.revolute.frame_b.f[3]});
//   wheelSet.wheelSetJoint.revolute.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.revolute.R_rel,{wheelSet.wheelSetJoint.revolute.frame_b.t[1],wheelSet.wheelSetJoint.revolute.frame_b.t[2],wheelSet.wheelSetJoint.revolute.frame_b.t[3]});
//   wheelSet.wheelSetJoint.revolute.tau = (-wheelSet.wheelSetJoint.revolute.frame_b.t[1]) * wheelSet.wheelSetJoint.revolute.e[1] + ((-wheelSet.wheelSetJoint.revolute.frame_b.t[2]) * wheelSet.wheelSetJoint.revolute.e[2] + (-wheelSet.wheelSetJoint.revolute.frame_b.t[3]) * wheelSet.wheelSetJoint.revolute.e[3]);
//   wheelSet.wheelSetJoint.revolute.phi = wheelSet.wheelSetJoint.revolute.internalAxis.phi;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   wheelSet.wheelSetJoint.rod2.frame_b.r_0 = wheelSet.wheelSetJoint.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.rod2.frame_a.R,{wheelSet.wheelSetJoint.rod2.r[1],wheelSet.wheelSetJoint.rod2.r[2],wheelSet.wheelSetJoint.rod2.r[3]});
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.w[1] = wheelSet.wheelSetJoint.rod2.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.w[2] = wheelSet.wheelSetJoint.rod2.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.rod2.frame_b.R.w[3] = wheelSet.wheelSetJoint.rod2.frame_a.R.w[3];
//   0.0 = wheelSet.wheelSetJoint.rod2.frame_a.f[1] + wheelSet.wheelSetJoint.rod2.frame_b.f[1];
//   0.0 = wheelSet.wheelSetJoint.rod2.frame_a.f[2] + wheelSet.wheelSetJoint.rod2.frame_b.f[2];
//   0.0 = wheelSet.wheelSetJoint.rod2.frame_a.f[3] + wheelSet.wheelSetJoint.rod2.frame_b.f[3];
//   0.0 = wheelSet.wheelSetJoint.rod2.frame_a.t[1] + (wheelSet.wheelSetJoint.rod2.frame_b.t[1] + (wheelSet.wheelSetJoint.rod2.r[2] * wheelSet.wheelSetJoint.rod2.frame_b.f[3] + (-wheelSet.wheelSetJoint.rod2.r[3] * wheelSet.wheelSetJoint.rod2.frame_b.f[2])));
//   0.0 = wheelSet.wheelSetJoint.rod2.frame_a.t[2] + (wheelSet.wheelSetJoint.rod2.frame_b.t[2] + (wheelSet.wheelSetJoint.rod2.r[3] * wheelSet.wheelSetJoint.rod2.frame_b.f[1] + (-wheelSet.wheelSetJoint.rod2.r[1] * wheelSet.wheelSetJoint.rod2.frame_b.f[3])));
//   0.0 = wheelSet.wheelSetJoint.rod2.frame_a.t[3] + (wheelSet.wheelSetJoint.rod2.frame_b.t[3] + (wheelSet.wheelSetJoint.rod2.r[1] * wheelSet.wheelSetJoint.rod2.frame_b.f[2] + (-wheelSet.wheelSetJoint.rod2.r[2] * wheelSet.wheelSetJoint.rod2.frame_b.f[1])));
//   wheelSet.wheelSetJoint.revolute1.fixed.flange.phi = wheelSet.wheelSetJoint.revolute1.fixed.phi0;
//   wheelSet.wheelSetJoint.revolute1.internalAxis.flange.tau = wheelSet.wheelSetJoint.revolute1.internalAxis.tau;
//   wheelSet.wheelSetJoint.revolute1.internalAxis.flange.phi = wheelSet.wheelSetJoint.revolute1.internalAxis.phi;
//   assert(true,"Connector frame_a of revolute joint is not connected");
//   assert(true,"Connector frame_b of revolute joint is not connected");
//   wheelSet.wheelSetJoint.revolute1.angle = wheelSet.wheelSetJoint.revolute1.phi;
//   wheelSet.wheelSetJoint.revolute1.w = der(wheelSet.wheelSetJoint.revolute1.phi);
//   wheelSet.wheelSetJoint.revolute1.a = der(wheelSet.wheelSetJoint.revolute1.w);
//   wheelSet.wheelSetJoint.revolute1.frame_b.r_0[1] = wheelSet.wheelSetJoint.revolute1.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.revolute1.frame_b.r_0[2] = wheelSet.wheelSetJoint.revolute1.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.revolute1.frame_b.r_0[3] = wheelSet.wheelSetJoint.revolute1.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.revolute1.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({wheelSet.wheelSetJoint.revolute1.e[1],wheelSet.wheelSetJoint.revolute1.e[2],wheelSet.wheelSetJoint.revolute1.e[3]},wheelSet.wheelSetJoint.revolute1.phi,wheelSet.wheelSetJoint.revolute1.w);
//   wheelSet.wheelSetJoint.revolute1.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(wheelSet.wheelSetJoint.revolute1.frame_a.R,wheelSet.wheelSetJoint.revolute1.R_rel);
//   wheelSet.wheelSetJoint.revolute1.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.revolute1.R_rel,{wheelSet.wheelSetJoint.revolute1.frame_b.f[1],wheelSet.wheelSetJoint.revolute1.frame_b.f[2],wheelSet.wheelSetJoint.revolute1.frame_b.f[3]});
//   wheelSet.wheelSetJoint.revolute1.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.revolute1.R_rel,{wheelSet.wheelSetJoint.revolute1.frame_b.t[1],wheelSet.wheelSetJoint.revolute1.frame_b.t[2],wheelSet.wheelSetJoint.revolute1.frame_b.t[3]});
//   wheelSet.wheelSetJoint.revolute1.tau = (-wheelSet.wheelSetJoint.revolute1.frame_b.t[1]) * wheelSet.wheelSetJoint.revolute1.e[1] + ((-wheelSet.wheelSetJoint.revolute1.frame_b.t[2]) * wheelSet.wheelSetJoint.revolute1.e[2] + (-wheelSet.wheelSetJoint.revolute1.frame_b.t[3]) * wheelSet.wheelSetJoint.revolute1.e[3]);
//   wheelSet.wheelSetJoint.revolute1.phi = wheelSet.wheelSetJoint.revolute1.internalAxis.phi;
//   wheelSet.wheelSetJoint.revolute2.fixed.flange.phi = wheelSet.wheelSetJoint.revolute2.fixed.phi0;
//   wheelSet.wheelSetJoint.revolute2.internalAxis.flange.tau = wheelSet.wheelSetJoint.revolute2.internalAxis.tau;
//   wheelSet.wheelSetJoint.revolute2.internalAxis.flange.phi = wheelSet.wheelSetJoint.revolute2.internalAxis.phi;
//   assert(true,"Connector frame_a of revolute joint is not connected");
//   assert(true,"Connector frame_b of revolute joint is not connected");
//   wheelSet.wheelSetJoint.revolute2.angle = wheelSet.wheelSetJoint.revolute2.phi;
//   wheelSet.wheelSetJoint.revolute2.w = der(wheelSet.wheelSetJoint.revolute2.phi);
//   wheelSet.wheelSetJoint.revolute2.a = der(wheelSet.wheelSetJoint.revolute2.w);
//   wheelSet.wheelSetJoint.revolute2.frame_b.r_0[1] = wheelSet.wheelSetJoint.revolute2.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.revolute2.frame_b.r_0[2] = wheelSet.wheelSetJoint.revolute2.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.revolute2.frame_b.r_0[3] = wheelSet.wheelSetJoint.revolute2.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.revolute2.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({wheelSet.wheelSetJoint.revolute2.e[1],wheelSet.wheelSetJoint.revolute2.e[2],wheelSet.wheelSetJoint.revolute2.e[3]},wheelSet.wheelSetJoint.revolute2.phi,wheelSet.wheelSetJoint.revolute2.w);
//   wheelSet.wheelSetJoint.revolute2.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(wheelSet.wheelSetJoint.revolute2.frame_a.R,wheelSet.wheelSetJoint.revolute2.R_rel);
//   wheelSet.wheelSetJoint.revolute2.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.revolute2.R_rel,{wheelSet.wheelSetJoint.revolute2.frame_b.f[1],wheelSet.wheelSetJoint.revolute2.frame_b.f[2],wheelSet.wheelSetJoint.revolute2.frame_b.f[3]});
//   wheelSet.wheelSetJoint.revolute2.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.revolute2.R_rel,{wheelSet.wheelSetJoint.revolute2.frame_b.t[1],wheelSet.wheelSetJoint.revolute2.frame_b.t[2],wheelSet.wheelSetJoint.revolute2.frame_b.t[3]});
//   wheelSet.wheelSetJoint.revolute2.tau = (-wheelSet.wheelSetJoint.revolute2.frame_b.t[1]) * wheelSet.wheelSetJoint.revolute2.e[1] + ((-wheelSet.wheelSetJoint.revolute2.frame_b.t[2]) * wheelSet.wheelSetJoint.revolute2.e[2] + (-wheelSet.wheelSetJoint.revolute2.frame_b.t[3]) * wheelSet.wheelSetJoint.revolute2.e[3]);
//   wheelSet.wheelSetJoint.revolute2.phi = wheelSet.wheelSetJoint.revolute2.internalAxis.phi;
//   wheelSet.wheelSetJoint.rolling1.e_n_0[1] = 0.0;
//   wheelSet.wheelSetJoint.rolling1.e_n_0[2] = 0.0;
//   wheelSet.wheelSetJoint.rolling1.e_n_0[3] = 1.0;
//   wheelSet.wheelSetJoint.rolling1.e_axis_0 = Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.rolling1.frame_a.R,{0.0,1.0,0.0});
//   wheelSet.wheelSetJoint.rolling1.aux[1] = wheelSet.wheelSetJoint.rolling1.e_n_0[2] * wheelSet.wheelSetJoint.rolling1.e_axis_0[3] - wheelSet.wheelSetJoint.rolling1.e_n_0[3] * wheelSet.wheelSetJoint.rolling1.e_axis_0[2];
//   wheelSet.wheelSetJoint.rolling1.aux[2] = wheelSet.wheelSetJoint.rolling1.e_n_0[3] * wheelSet.wheelSetJoint.rolling1.e_axis_0[1] - wheelSet.wheelSetJoint.rolling1.e_n_0[1] * wheelSet.wheelSetJoint.rolling1.e_axis_0[3];
//   wheelSet.wheelSetJoint.rolling1.aux[3] = wheelSet.wheelSetJoint.rolling1.e_n_0[1] * wheelSet.wheelSetJoint.rolling1.e_axis_0[2] - wheelSet.wheelSetJoint.rolling1.e_n_0[2] * wheelSet.wheelSetJoint.rolling1.e_axis_0[1];
//   wheelSet.wheelSetJoint.rolling1.e_long_0[1] = wheelSet.wheelSetJoint.rolling1.aux[1] / Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rolling1.aux[1],wheelSet.wheelSetJoint.rolling1.aux[2],wheelSet.wheelSetJoint.rolling1.aux[3]});
//   wheelSet.wheelSetJoint.rolling1.e_long_0[2] = wheelSet.wheelSetJoint.rolling1.aux[2] / Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rolling1.aux[1],wheelSet.wheelSetJoint.rolling1.aux[2],wheelSet.wheelSetJoint.rolling1.aux[3]});
//   wheelSet.wheelSetJoint.rolling1.e_long_0[3] = wheelSet.wheelSetJoint.rolling1.aux[3] / Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rolling1.aux[1],wheelSet.wheelSetJoint.rolling1.aux[2],wheelSet.wheelSetJoint.rolling1.aux[3]});
//   wheelSet.wheelSetJoint.rolling1.e_lat_0[1] = wheelSet.wheelSetJoint.rolling1.e_long_0[2] * wheelSet.wheelSetJoint.rolling1.e_n_0[3] - wheelSet.wheelSetJoint.rolling1.e_long_0[3] * wheelSet.wheelSetJoint.rolling1.e_n_0[2];
//   wheelSet.wheelSetJoint.rolling1.e_lat_0[2] = wheelSet.wheelSetJoint.rolling1.e_long_0[3] * wheelSet.wheelSetJoint.rolling1.e_n_0[1] - wheelSet.wheelSetJoint.rolling1.e_long_0[1] * wheelSet.wheelSetJoint.rolling1.e_n_0[3];
//   wheelSet.wheelSetJoint.rolling1.e_lat_0[3] = wheelSet.wheelSetJoint.rolling1.e_long_0[1] * wheelSet.wheelSetJoint.rolling1.e_n_0[2] - wheelSet.wheelSetJoint.rolling1.e_long_0[2] * wheelSet.wheelSetJoint.rolling1.e_n_0[1];
//   wheelSet.wheelSetJoint.rolling1.rContact_0[1] = 0.0;
//   wheelSet.wheelSetJoint.rolling1.rContact_0[2] = 0.0;
//   wheelSet.wheelSetJoint.rolling1.rContact_0[3] = -wheelSet.wheelSetJoint.rolling1.radius;
//   wheelSet.wheelSetJoint.rolling1.v_0[1] = der(wheelSet.wheelSetJoint.rolling1.frame_a.r_0[1]);
//   wheelSet.wheelSetJoint.rolling1.v_0[2] = der(wheelSet.wheelSetJoint.rolling1.frame_a.r_0[2]);
//   wheelSet.wheelSetJoint.rolling1.v_0[3] = der(wheelSet.wheelSetJoint.rolling1.frame_a.r_0[3]);
//   wheelSet.wheelSetJoint.rolling1.w_0 = Modelica.Mechanics.MultiBody.Frames.angularVelocity1(wheelSet.wheelSetJoint.rolling1.frame_a.R);
//   wheelSet.wheelSetJoint.rolling1.vContact_0[1] = wheelSet.wheelSetJoint.rolling1.v_0[1] + (wheelSet.wheelSetJoint.rolling1.w_0[2] * wheelSet.wheelSetJoint.rolling1.rContact_0[3] + (-wheelSet.wheelSetJoint.rolling1.w_0[3] * wheelSet.wheelSetJoint.rolling1.rContact_0[2]));
//   wheelSet.wheelSetJoint.rolling1.vContact_0[2] = wheelSet.wheelSetJoint.rolling1.v_0[2] + (wheelSet.wheelSetJoint.rolling1.w_0[3] * wheelSet.wheelSetJoint.rolling1.rContact_0[1] + (-wheelSet.wheelSetJoint.rolling1.w_0[1] * wheelSet.wheelSetJoint.rolling1.rContact_0[3]));
//   wheelSet.wheelSetJoint.rolling1.vContact_0[3] = wheelSet.wheelSetJoint.rolling1.v_0[3] + (wheelSet.wheelSetJoint.rolling1.w_0[1] * wheelSet.wheelSetJoint.rolling1.rContact_0[2] + (-wheelSet.wheelSetJoint.rolling1.w_0[2] * wheelSet.wheelSetJoint.rolling1.rContact_0[1]));
//   0.0 = wheelSet.wheelSetJoint.rolling1.vContact_0[1] * wheelSet.wheelSetJoint.rolling1.e_long_0[1] + (wheelSet.wheelSetJoint.rolling1.vContact_0[2] * wheelSet.wheelSetJoint.rolling1.e_long_0[2] + wheelSet.wheelSetJoint.rolling1.vContact_0[3] * wheelSet.wheelSetJoint.rolling1.e_long_0[3]);
//   0.0 = wheelSet.wheelSetJoint.rolling1.vContact_0[1] * wheelSet.wheelSetJoint.rolling1.e_lat_0[1] + (wheelSet.wheelSetJoint.rolling1.vContact_0[2] * wheelSet.wheelSetJoint.rolling1.e_lat_0[2] + wheelSet.wheelSetJoint.rolling1.vContact_0[3] * wheelSet.wheelSetJoint.rolling1.e_lat_0[3]);
//   wheelSet.wheelSetJoint.rolling1.f_wheel_0[1] = wheelSet.wheelSetJoint.rolling1.f_lat * wheelSet.wheelSetJoint.rolling1.e_lat_0[1] + wheelSet.wheelSetJoint.rolling1.f_long * wheelSet.wheelSetJoint.rolling1.e_long_0[1];
//   wheelSet.wheelSetJoint.rolling1.f_wheel_0[2] = wheelSet.wheelSetJoint.rolling1.f_lat * wheelSet.wheelSetJoint.rolling1.e_lat_0[2] + wheelSet.wheelSetJoint.rolling1.f_long * wheelSet.wheelSetJoint.rolling1.e_long_0[2];
//   wheelSet.wheelSetJoint.rolling1.f_wheel_0[3] = wheelSet.wheelSetJoint.rolling1.f_lat * wheelSet.wheelSetJoint.rolling1.e_lat_0[3] + wheelSet.wheelSetJoint.rolling1.f_long * wheelSet.wheelSetJoint.rolling1.e_long_0[3];
//   {0.0,0.0,0.0} = wheelSet.wheelSetJoint.rolling1.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.wheelSetJoint.rolling1.frame_a.R,{wheelSet.wheelSetJoint.rolling1.f_wheel_0[1],wheelSet.wheelSetJoint.rolling1.f_wheel_0[2],wheelSet.wheelSetJoint.rolling1.f_wheel_0[3]});
//   {0.0,0.0,0.0} = wheelSet.wheelSetJoint.rolling1.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.wheelSetJoint.rolling1.frame_a.R,{wheelSet.wheelSetJoint.rolling1.rContact_0[2] * wheelSet.wheelSetJoint.rolling1.f_wheel_0[3] - wheelSet.wheelSetJoint.rolling1.rContact_0[3] * wheelSet.wheelSetJoint.rolling1.f_wheel_0[2],wheelSet.wheelSetJoint.rolling1.rContact_0[3] * wheelSet.wheelSetJoint.rolling1.f_wheel_0[1] - wheelSet.wheelSetJoint.rolling1.rContact_0[1] * wheelSet.wheelSetJoint.rolling1.f_wheel_0[3],wheelSet.wheelSetJoint.rolling1.rContact_0[1] * wheelSet.wheelSetJoint.rolling1.f_wheel_0[2] - wheelSet.wheelSetJoint.rolling1.rContact_0[2] * wheelSet.wheelSetJoint.rolling1.f_wheel_0[1]});
//   wheelSet.wheelSetJoint.rolling2.e_n_0[1] = 0.0;
//   wheelSet.wheelSetJoint.rolling2.e_n_0[2] = 0.0;
//   wheelSet.wheelSetJoint.rolling2.e_n_0[3] = 1.0;
//   wheelSet.wheelSetJoint.rolling2.e_axis_0 = Modelica.Mechanics.MultiBody.Frames.resolve1(wheelSet.wheelSetJoint.rolling2.frame_a.R,{0.0,1.0,0.0});
//   wheelSet.wheelSetJoint.rolling2.aux[1] = wheelSet.wheelSetJoint.rolling2.e_n_0[2] * wheelSet.wheelSetJoint.rolling2.e_axis_0[3] - wheelSet.wheelSetJoint.rolling2.e_n_0[3] * wheelSet.wheelSetJoint.rolling2.e_axis_0[2];
//   wheelSet.wheelSetJoint.rolling2.aux[2] = wheelSet.wheelSetJoint.rolling2.e_n_0[3] * wheelSet.wheelSetJoint.rolling2.e_axis_0[1] - wheelSet.wheelSetJoint.rolling2.e_n_0[1] * wheelSet.wheelSetJoint.rolling2.e_axis_0[3];
//   wheelSet.wheelSetJoint.rolling2.aux[3] = wheelSet.wheelSetJoint.rolling2.e_n_0[1] * wheelSet.wheelSetJoint.rolling2.e_axis_0[2] - wheelSet.wheelSetJoint.rolling2.e_n_0[2] * wheelSet.wheelSetJoint.rolling2.e_axis_0[1];
//   wheelSet.wheelSetJoint.rolling2.e_long_0[1] = wheelSet.wheelSetJoint.rolling2.aux[1] / Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rolling2.aux[1],wheelSet.wheelSetJoint.rolling2.aux[2],wheelSet.wheelSetJoint.rolling2.aux[3]});
//   wheelSet.wheelSetJoint.rolling2.e_long_0[2] = wheelSet.wheelSetJoint.rolling2.aux[2] / Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rolling2.aux[1],wheelSet.wheelSetJoint.rolling2.aux[2],wheelSet.wheelSetJoint.rolling2.aux[3]});
//   wheelSet.wheelSetJoint.rolling2.e_long_0[3] = wheelSet.wheelSetJoint.rolling2.aux[3] / Modelica.Math.Vectors.length({wheelSet.wheelSetJoint.rolling2.aux[1],wheelSet.wheelSetJoint.rolling2.aux[2],wheelSet.wheelSetJoint.rolling2.aux[3]});
//   wheelSet.wheelSetJoint.rolling2.e_lat_0[1] = wheelSet.wheelSetJoint.rolling2.e_long_0[2] * wheelSet.wheelSetJoint.rolling2.e_n_0[3] - wheelSet.wheelSetJoint.rolling2.e_long_0[3] * wheelSet.wheelSetJoint.rolling2.e_n_0[2];
//   wheelSet.wheelSetJoint.rolling2.e_lat_0[2] = wheelSet.wheelSetJoint.rolling2.e_long_0[3] * wheelSet.wheelSetJoint.rolling2.e_n_0[1] - wheelSet.wheelSetJoint.rolling2.e_long_0[1] * wheelSet.wheelSetJoint.rolling2.e_n_0[3];
//   wheelSet.wheelSetJoint.rolling2.e_lat_0[3] = wheelSet.wheelSetJoint.rolling2.e_long_0[1] * wheelSet.wheelSetJoint.rolling2.e_n_0[2] - wheelSet.wheelSetJoint.rolling2.e_long_0[2] * wheelSet.wheelSetJoint.rolling2.e_n_0[1];
//   wheelSet.wheelSetJoint.rolling2.rContact_0[1] = 0.0;
//   wheelSet.wheelSetJoint.rolling2.rContact_0[2] = 0.0;
//   wheelSet.wheelSetJoint.rolling2.rContact_0[3] = -wheelSet.wheelSetJoint.rolling2.radius;
//   wheelSet.wheelSetJoint.rolling2.v_0[1] = der(wheelSet.wheelSetJoint.rolling2.frame_a.r_0[1]);
//   wheelSet.wheelSetJoint.rolling2.v_0[2] = der(wheelSet.wheelSetJoint.rolling2.frame_a.r_0[2]);
//   wheelSet.wheelSetJoint.rolling2.v_0[3] = der(wheelSet.wheelSetJoint.rolling2.frame_a.r_0[3]);
//   wheelSet.wheelSetJoint.rolling2.w_0 = Modelica.Mechanics.MultiBody.Frames.angularVelocity1(wheelSet.wheelSetJoint.rolling2.frame_a.R);
//   wheelSet.wheelSetJoint.rolling2.vContact_0[1] = wheelSet.wheelSetJoint.rolling2.v_0[1] + (wheelSet.wheelSetJoint.rolling2.w_0[2] * wheelSet.wheelSetJoint.rolling2.rContact_0[3] + (-wheelSet.wheelSetJoint.rolling2.w_0[3] * wheelSet.wheelSetJoint.rolling2.rContact_0[2]));
//   wheelSet.wheelSetJoint.rolling2.vContact_0[2] = wheelSet.wheelSetJoint.rolling2.v_0[2] + (wheelSet.wheelSetJoint.rolling2.w_0[3] * wheelSet.wheelSetJoint.rolling2.rContact_0[1] + (-wheelSet.wheelSetJoint.rolling2.w_0[1] * wheelSet.wheelSetJoint.rolling2.rContact_0[3]));
//   wheelSet.wheelSetJoint.rolling2.vContact_0[3] = wheelSet.wheelSetJoint.rolling2.v_0[3] + (wheelSet.wheelSetJoint.rolling2.w_0[1] * wheelSet.wheelSetJoint.rolling2.rContact_0[2] + (-wheelSet.wheelSetJoint.rolling2.w_0[2] * wheelSet.wheelSetJoint.rolling2.rContact_0[1]));
//   0.0 = wheelSet.wheelSetJoint.rolling2.vContact_0[1] * wheelSet.wheelSetJoint.rolling2.e_long_0[1] + (wheelSet.wheelSetJoint.rolling2.vContact_0[2] * wheelSet.wheelSetJoint.rolling2.e_long_0[2] + wheelSet.wheelSetJoint.rolling2.vContact_0[3] * wheelSet.wheelSetJoint.rolling2.e_long_0[3]);
//   0.0 = wheelSet.wheelSetJoint.rolling2.f_lat;
//   wheelSet.wheelSetJoint.rolling2.f_wheel_0[1] = wheelSet.wheelSetJoint.rolling2.f_long * wheelSet.wheelSetJoint.rolling2.e_long_0[1];
//   wheelSet.wheelSetJoint.rolling2.f_wheel_0[2] = wheelSet.wheelSetJoint.rolling2.f_long * wheelSet.wheelSetJoint.rolling2.e_long_0[2];
//   wheelSet.wheelSetJoint.rolling2.f_wheel_0[3] = wheelSet.wheelSetJoint.rolling2.f_long * wheelSet.wheelSetJoint.rolling2.e_long_0[3];
//   {0.0,0.0,0.0} = wheelSet.wheelSetJoint.rolling2.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.wheelSetJoint.rolling2.frame_a.R,{wheelSet.wheelSetJoint.rolling2.f_wheel_0[1],wheelSet.wheelSetJoint.rolling2.f_wheel_0[2],wheelSet.wheelSetJoint.rolling2.f_wheel_0[3]});
//   {0.0,0.0,0.0} = wheelSet.wheelSetJoint.rolling2.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve2(wheelSet.wheelSetJoint.rolling2.frame_a.R,{wheelSet.wheelSetJoint.rolling2.rContact_0[2] * wheelSet.wheelSetJoint.rolling2.f_wheel_0[3] - wheelSet.wheelSetJoint.rolling2.rContact_0[3] * wheelSet.wheelSetJoint.rolling2.f_wheel_0[2],wheelSet.wheelSetJoint.rolling2.rContact_0[3] * wheelSet.wheelSetJoint.rolling2.f_wheel_0[1] - wheelSet.wheelSetJoint.rolling2.rContact_0[1] * wheelSet.wheelSetJoint.rolling2.f_wheel_0[3],wheelSet.wheelSetJoint.rolling2.rContact_0[1] * wheelSet.wheelSetJoint.rolling2.f_wheel_0[2] - wheelSet.wheelSetJoint.rolling2.rContact_0[2] * wheelSet.wheelSetJoint.rolling2.f_wheel_0[1]});
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[1] = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[2] = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[3] = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[1] = wheelSet.wheelSetJoint.mounting1D.housing.t[1];
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[2] = wheelSet.wheelSetJoint.mounting1D.housing.t[2];
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[3] = wheelSet.wheelSetJoint.mounting1D.housing.t[3];
//   wheelSet.wheelSetJoint.mounting1D.flange_b.phi = wheelSet.wheelSetJoint.mounting1D.phi0;
//   wheelSet.wheelSetJoint.prismatic1.s = wheelSet.wheelSetJoint.x;
//   wheelSet.wheelSetJoint.prismatic2.s = wheelSet.wheelSetJoint.y;
//   wheelSet.wheelSetJoint.revolute.phi = wheelSet.wheelSetJoint.phi;
//   wheelSet.wheelSetJoint.revolute1.phi = wheelSet.wheelSetJoint.theta1;
//   wheelSet.wheelSetJoint.revolute2.phi = wheelSet.wheelSetJoint.theta2;
//   wheelSet.wheelSetJoint.der_theta1 = der(wheelSet.wheelSetJoint.theta1);
//   wheelSet.wheelSetJoint.der_theta2 = der(wheelSet.wheelSetJoint.theta2);
//   wheelSet.shape2.vis.R.T[1,1] = wheelSet.shape2.frame_a.R.T[1,1];
//   wheelSet.shape2.vis.R.T[1,2] = wheelSet.shape2.frame_a.R.T[1,2];
//   wheelSet.shape2.vis.R.T[1,3] = wheelSet.shape2.frame_a.R.T[1,3];
//   wheelSet.shape2.vis.R.T[2,1] = wheelSet.shape2.frame_a.R.T[2,1];
//   wheelSet.shape2.vis.R.T[2,2] = wheelSet.shape2.frame_a.R.T[2,2];
//   wheelSet.shape2.vis.R.T[2,3] = wheelSet.shape2.frame_a.R.T[2,3];
//   wheelSet.shape2.vis.R.T[3,1] = wheelSet.shape2.frame_a.R.T[3,1];
//   wheelSet.shape2.vis.R.T[3,2] = wheelSet.shape2.frame_a.R.T[3,2];
//   wheelSet.shape2.vis.R.T[3,3] = wheelSet.shape2.frame_a.R.T[3,3];
//   wheelSet.shape2.vis.R.w[1] = wheelSet.shape2.frame_a.R.w[1];
//   wheelSet.shape2.vis.R.w[2] = wheelSet.shape2.frame_a.R.w[2];
//   wheelSet.shape2.vis.R.w[3] = wheelSet.shape2.frame_a.R.w[3];
//   wheelSet.shape2.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(wheelSet.shape2.vis.shapeType);
//   wheelSet.shape2.vis.rxvisobj[1] = wheelSet.shape2.vis.R.T[1,1] * wheelSet.shape2.vis.e_x[1] + (wheelSet.shape2.vis.R.T[2,1] * wheelSet.shape2.vis.e_x[2] + wheelSet.shape2.vis.R.T[3,1] * wheelSet.shape2.vis.e_x[3]);
//   wheelSet.shape2.vis.rxvisobj[2] = wheelSet.shape2.vis.R.T[1,2] * wheelSet.shape2.vis.e_x[1] + (wheelSet.shape2.vis.R.T[2,2] * wheelSet.shape2.vis.e_x[2] + wheelSet.shape2.vis.R.T[3,2] * wheelSet.shape2.vis.e_x[3]);
//   wheelSet.shape2.vis.rxvisobj[3] = wheelSet.shape2.vis.R.T[1,3] * wheelSet.shape2.vis.e_x[1] + (wheelSet.shape2.vis.R.T[2,3] * wheelSet.shape2.vis.e_x[2] + wheelSet.shape2.vis.R.T[3,3] * wheelSet.shape2.vis.e_x[3]);
//   wheelSet.shape2.vis.ryvisobj[1] = wheelSet.shape2.vis.R.T[1,1] * wheelSet.shape2.vis.e_y[1] + (wheelSet.shape2.vis.R.T[2,1] * wheelSet.shape2.vis.e_y[2] + wheelSet.shape2.vis.R.T[3,1] * wheelSet.shape2.vis.e_y[3]);
//   wheelSet.shape2.vis.ryvisobj[2] = wheelSet.shape2.vis.R.T[1,2] * wheelSet.shape2.vis.e_y[1] + (wheelSet.shape2.vis.R.T[2,2] * wheelSet.shape2.vis.e_y[2] + wheelSet.shape2.vis.R.T[3,2] * wheelSet.shape2.vis.e_y[3]);
//   wheelSet.shape2.vis.ryvisobj[3] = wheelSet.shape2.vis.R.T[1,3] * wheelSet.shape2.vis.e_y[1] + (wheelSet.shape2.vis.R.T[2,3] * wheelSet.shape2.vis.e_y[2] + wheelSet.shape2.vis.R.T[3,3] * wheelSet.shape2.vis.e_y[3]);
//   wheelSet.shape2.vis.rvisobj = wheelSet.shape2.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{wheelSet.shape2.vis.R.T[1,1],wheelSet.shape2.vis.R.T[1,2],wheelSet.shape2.vis.R.T[1,3]},{wheelSet.shape2.vis.R.T[2,1],wheelSet.shape2.vis.R.T[2,2],wheelSet.shape2.vis.R.T[2,3]},{wheelSet.shape2.vis.R.T[3,1],wheelSet.shape2.vis.R.T[3,2],wheelSet.shape2.vis.R.T[3,3]}},{wheelSet.shape2.vis.r_shape[1],wheelSet.shape2.vis.r_shape[2],wheelSet.shape2.vis.r_shape[3]});
//   wheelSet.shape2.vis.size[1] = wheelSet.shape2.vis.length;
//   wheelSet.shape2.vis.size[2] = wheelSet.shape2.vis.width;
//   wheelSet.shape2.vis.size[3] = wheelSet.shape2.vis.height;
//   wheelSet.shape2.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(wheelSet.shape2.vis.color[1] / 255.0,wheelSet.shape2.vis.color[2] / 255.0,wheelSet.shape2.vis.color[3] / 255.0,wheelSet.shape2.vis.specularCoefficient);
//   wheelSet.shape2.vis.Extra = wheelSet.shape2.vis.extra;
//   wheelSet.shape2.frame_a.f[1] = 0.0;
//   wheelSet.shape2.frame_a.f[2] = 0.0;
//   wheelSet.shape2.frame_a.f[3] = 0.0;
//   wheelSet.shape2.frame_a.t[1] = 0.0;
//   wheelSet.shape2.frame_a.t[2] = 0.0;
//   wheelSet.shape2.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   wheelSet.shape1.vis.R.T[1,1] = wheelSet.shape1.frame_a.R.T[1,1];
//   wheelSet.shape1.vis.R.T[1,2] = wheelSet.shape1.frame_a.R.T[1,2];
//   wheelSet.shape1.vis.R.T[1,3] = wheelSet.shape1.frame_a.R.T[1,3];
//   wheelSet.shape1.vis.R.T[2,1] = wheelSet.shape1.frame_a.R.T[2,1];
//   wheelSet.shape1.vis.R.T[2,2] = wheelSet.shape1.frame_a.R.T[2,2];
//   wheelSet.shape1.vis.R.T[2,3] = wheelSet.shape1.frame_a.R.T[2,3];
//   wheelSet.shape1.vis.R.T[3,1] = wheelSet.shape1.frame_a.R.T[3,1];
//   wheelSet.shape1.vis.R.T[3,2] = wheelSet.shape1.frame_a.R.T[3,2];
//   wheelSet.shape1.vis.R.T[3,3] = wheelSet.shape1.frame_a.R.T[3,3];
//   wheelSet.shape1.vis.R.w[1] = wheelSet.shape1.frame_a.R.w[1];
//   wheelSet.shape1.vis.R.w[2] = wheelSet.shape1.frame_a.R.w[2];
//   wheelSet.shape1.vis.R.w[3] = wheelSet.shape1.frame_a.R.w[3];
//   wheelSet.shape1.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(wheelSet.shape1.vis.shapeType);
//   wheelSet.shape1.vis.rxvisobj[1] = wheelSet.shape1.vis.R.T[1,1] * wheelSet.shape1.vis.e_x[1] + (wheelSet.shape1.vis.R.T[2,1] * wheelSet.shape1.vis.e_x[2] + wheelSet.shape1.vis.R.T[3,1] * wheelSet.shape1.vis.e_x[3]);
//   wheelSet.shape1.vis.rxvisobj[2] = wheelSet.shape1.vis.R.T[1,2] * wheelSet.shape1.vis.e_x[1] + (wheelSet.shape1.vis.R.T[2,2] * wheelSet.shape1.vis.e_x[2] + wheelSet.shape1.vis.R.T[3,2] * wheelSet.shape1.vis.e_x[3]);
//   wheelSet.shape1.vis.rxvisobj[3] = wheelSet.shape1.vis.R.T[1,3] * wheelSet.shape1.vis.e_x[1] + (wheelSet.shape1.vis.R.T[2,3] * wheelSet.shape1.vis.e_x[2] + wheelSet.shape1.vis.R.T[3,3] * wheelSet.shape1.vis.e_x[3]);
//   wheelSet.shape1.vis.ryvisobj[1] = wheelSet.shape1.vis.R.T[1,1] * wheelSet.shape1.vis.e_y[1] + (wheelSet.shape1.vis.R.T[2,1] * wheelSet.shape1.vis.e_y[2] + wheelSet.shape1.vis.R.T[3,1] * wheelSet.shape1.vis.e_y[3]);
//   wheelSet.shape1.vis.ryvisobj[2] = wheelSet.shape1.vis.R.T[1,2] * wheelSet.shape1.vis.e_y[1] + (wheelSet.shape1.vis.R.T[2,2] * wheelSet.shape1.vis.e_y[2] + wheelSet.shape1.vis.R.T[3,2] * wheelSet.shape1.vis.e_y[3]);
//   wheelSet.shape1.vis.ryvisobj[3] = wheelSet.shape1.vis.R.T[1,3] * wheelSet.shape1.vis.e_y[1] + (wheelSet.shape1.vis.R.T[2,3] * wheelSet.shape1.vis.e_y[2] + wheelSet.shape1.vis.R.T[3,3] * wheelSet.shape1.vis.e_y[3]);
//   wheelSet.shape1.vis.rvisobj = wheelSet.shape1.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{wheelSet.shape1.vis.R.T[1,1],wheelSet.shape1.vis.R.T[1,2],wheelSet.shape1.vis.R.T[1,3]},{wheelSet.shape1.vis.R.T[2,1],wheelSet.shape1.vis.R.T[2,2],wheelSet.shape1.vis.R.T[2,3]},{wheelSet.shape1.vis.R.T[3,1],wheelSet.shape1.vis.R.T[3,2],wheelSet.shape1.vis.R.T[3,3]}},{wheelSet.shape1.vis.r_shape[1],wheelSet.shape1.vis.r_shape[2],wheelSet.shape1.vis.r_shape[3]});
//   wheelSet.shape1.vis.size[1] = wheelSet.shape1.vis.length;
//   wheelSet.shape1.vis.size[2] = wheelSet.shape1.vis.width;
//   wheelSet.shape1.vis.size[3] = wheelSet.shape1.vis.height;
//   wheelSet.shape1.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(wheelSet.shape1.vis.color[1] / 255.0,wheelSet.shape1.vis.color[2] / 255.0,wheelSet.shape1.vis.color[3] / 255.0,wheelSet.shape1.vis.specularCoefficient);
//   wheelSet.shape1.vis.Extra = wheelSet.shape1.vis.extra;
//   wheelSet.shape1.frame_a.f[1] = 0.0;
//   wheelSet.shape1.frame_a.f[2] = 0.0;
//   wheelSet.shape1.frame_a.f[3] = 0.0;
//   wheelSet.shape1.frame_a.t[1] = 0.0;
//   wheelSet.shape1.frame_a.t[2] = 0.0;
//   wheelSet.shape1.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   wheelSet.wheelSetJoint.x = wheelSet.x;
//   wheelSet.wheelSetJoint.y = wheelSet.y;
//   wheelSet.wheelSetJoint.phi = wheelSet.phi;
//   wheelSet.wheelSetJoint.theta1 = wheelSet.theta1;
//   wheelSet.wheelSetJoint.theta2 = wheelSet.theta2;
//   wheelSet.der_theta1 = der(wheelSet.theta1);
//   wheelSet.der_theta2 = der(wheelSet.theta2);
//   body.r_0[1] = body.frame_a.r_0[1];
//   body.r_0[2] = body.frame_a.r_0[2];
//   body.r_0[3] = body.frame_a.r_0[3];
//   if true then
//   body.Q[1] = 0.0;
//   body.Q[2] = 0.0;
//   body.Q[3] = 0.0;
//   body.Q[4] = 1.0;
//   body.phi[1] = 0.0;
//   body.phi[2] = 0.0;
//   body.phi[3] = 0.0;
//   body.phi_d[1] = 0.0;
//   body.phi_d[2] = 0.0;
//   body.phi_d[3] = 0.0;
//   body.phi_dd[1] = 0.0;
//   body.phi_dd[2] = 0.0;
//   body.phi_dd[3] = 0.0;
//   elseif body.useQuaternions then
//   body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({body.Q[1],body.Q[2],body.Q[3],body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({body.Q[1],body.Q[2],body.Q[3],body.Q[4]},{der(body.Q[1]),der(body.Q[2]),der(body.Q[3]),der(body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({body.Q[1],body.Q[2],body.Q[3],body.Q[4]});
//   body.phi[1] = 0.0;
//   body.phi[2] = 0.0;
//   body.phi[3] = 0.0;
//   body.phi_d[1] = 0.0;
//   body.phi_d[2] = 0.0;
//   body.phi_d[3] = 0.0;
//   body.phi_dd[1] = 0.0;
//   body.phi_dd[2] = 0.0;
//   body.phi_dd[3] = 0.0;
//   else
//   body.phi_d[1] = der(body.phi[1]);
//   body.phi_d[2] = der(body.phi[2]);
//   body.phi_d[3] = der(body.phi[3]);
//   body.phi_dd[1] = der(body.phi_d[1]);
//   body.phi_dd[2] = der(body.phi_d[2]);
//   body.phi_dd[3] = der(body.phi_d[3]);
//   body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},{body.phi[1],body.phi[2],body.phi[3]},{body.phi_d[1],body.phi_d[2],body.phi_d[3]});
//   body.Q[1] = 0.0;
//   body.Q[2] = 0.0;
//   body.Q[3] = 0.0;
//   body.Q[4] = 1.0;
//   end if;
//   body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({body.frame_a.r_0[1],body.frame_a.r_0[2],body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(body.frame_a.R,{body.r_CM[1],body.r_CM[2],body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   body.v_0[1] = der(body.frame_a.r_0[1]);
//   body.v_0[2] = der(body.frame_a.r_0[2]);
//   body.v_0[3] = der(body.frame_a.r_0[3]);
//   body.a_0[1] = der(body.v_0[1]);
//   body.a_0[2] = der(body.v_0[2]);
//   body.a_0[3] = der(body.v_0[3]);
//   body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(body.frame_a.R);
//   body.z_a[1] = der(body.w_a[1]);
//   body.z_a[2] = der(body.w_a[2]);
//   body.z_a[3] = der(body.w_a[3]);
//   body.frame_a.f = body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(body.frame_a.R,{body.a_0[1] - body.g_0[1],body.a_0[2] - body.g_0[2],body.a_0[3] - body.g_0[3]}) + {body.z_a[2] * body.r_CM[3] - body.z_a[3] * body.r_CM[2],body.z_a[3] * body.r_CM[1] - body.z_a[1] * body.r_CM[3],body.z_a[1] * body.r_CM[2] - body.z_a[2] * body.r_CM[1]} + {body.w_a[2] * (body.w_a[1] * body.r_CM[2] - body.w_a[2] * body.r_CM[1]) - body.w_a[3] * (body.w_a[3] * body.r_CM[1] - body.w_a[1] * body.r_CM[3]),body.w_a[3] * (body.w_a[2] * body.r_CM[3] - body.w_a[3] * body.r_CM[2]) - body.w_a[1] * (body.w_a[1] * body.r_CM[2] - body.w_a[2] * body.r_CM[1]),body.w_a[1] * (body.w_a[3] * body.r_CM[1] - body.w_a[1] * body.r_CM[3]) - body.w_a[2] * (body.w_a[2] * body.r_CM[3] - body.w_a[3] * body.r_CM[2])});
//   body.frame_a.t[1] = body.I[1,1] * body.z_a[1] + (body.I[1,2] * body.z_a[2] + (body.I[1,3] * body.z_a[3] + (body.w_a[2] * (body.I[3,1] * body.w_a[1] + (body.I[3,2] * body.w_a[2] + body.I[3,3] * body.w_a[3])) + ((-body.w_a[3] * (body.I[2,1] * body.w_a[1] + (body.I[2,2] * body.w_a[2] + body.I[2,3] * body.w_a[3]))) + (body.r_CM[2] * body.frame_a.f[3] + (-body.r_CM[3] * body.frame_a.f[2]))))));
//   body.frame_a.t[2] = body.I[2,1] * body.z_a[1] + (body.I[2,2] * body.z_a[2] + (body.I[2,3] * body.z_a[3] + (body.w_a[3] * (body.I[1,1] * body.w_a[1] + (body.I[1,2] * body.w_a[2] + body.I[1,3] * body.w_a[3])) + ((-body.w_a[1] * (body.I[3,1] * body.w_a[1] + (body.I[3,2] * body.w_a[2] + body.I[3,3] * body.w_a[3]))) + (body.r_CM[3] * body.frame_a.f[1] + (-body.r_CM[1] * body.frame_a.f[3]))))));
//   body.frame_a.t[3] = body.I[3,1] * body.z_a[1] + (body.I[3,2] * body.z_a[2] + (body.I[3,3] * body.z_a[3] + (body.w_a[1] * (body.I[2,1] * body.w_a[1] + (body.I[2,2] * body.w_a[2] + body.I[2,3] * body.w_a[3])) + ((-body.w_a[2] * (body.I[1,1] * body.w_a[1] + (body.I[1,2] * body.w_a[2] + body.I[1,3] * body.w_a[3]))) + (body.r_CM[1] * body.frame_a.f[2] + (-body.r_CM[2] * body.frame_a.f[1]))))));
//   fixedTranslation.shape.R.T[1,1] = fixedTranslation.frame_a.R.T[1,1];
//   fixedTranslation.shape.R.T[1,2] = fixedTranslation.frame_a.R.T[1,2];
//   fixedTranslation.shape.R.T[1,3] = fixedTranslation.frame_a.R.T[1,3];
//   fixedTranslation.shape.R.T[2,1] = fixedTranslation.frame_a.R.T[2,1];
//   fixedTranslation.shape.R.T[2,2] = fixedTranslation.frame_a.R.T[2,2];
//   fixedTranslation.shape.R.T[2,3] = fixedTranslation.frame_a.R.T[2,3];
//   fixedTranslation.shape.R.T[3,1] = fixedTranslation.frame_a.R.T[3,1];
//   fixedTranslation.shape.R.T[3,2] = fixedTranslation.frame_a.R.T[3,2];
//   fixedTranslation.shape.R.T[3,3] = fixedTranslation.frame_a.R.T[3,3];
//   fixedTranslation.shape.R.w[1] = fixedTranslation.frame_a.R.w[1];
//   fixedTranslation.shape.R.w[2] = fixedTranslation.frame_a.R.w[2];
//   fixedTranslation.shape.R.w[3] = fixedTranslation.frame_a.R.w[3];
//   fixedTranslation.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedTranslation.shape.shapeType);
//   fixedTranslation.shape.rxvisobj[1] = fixedTranslation.shape.R.T[1,1] * fixedTranslation.shape.e_x[1] + (fixedTranslation.shape.R.T[2,1] * fixedTranslation.shape.e_x[2] + fixedTranslation.shape.R.T[3,1] * fixedTranslation.shape.e_x[3]);
//   fixedTranslation.shape.rxvisobj[2] = fixedTranslation.shape.R.T[1,2] * fixedTranslation.shape.e_x[1] + (fixedTranslation.shape.R.T[2,2] * fixedTranslation.shape.e_x[2] + fixedTranslation.shape.R.T[3,2] * fixedTranslation.shape.e_x[3]);
//   fixedTranslation.shape.rxvisobj[3] = fixedTranslation.shape.R.T[1,3] * fixedTranslation.shape.e_x[1] + (fixedTranslation.shape.R.T[2,3] * fixedTranslation.shape.e_x[2] + fixedTranslation.shape.R.T[3,3] * fixedTranslation.shape.e_x[3]);
//   fixedTranslation.shape.ryvisobj[1] = fixedTranslation.shape.R.T[1,1] * fixedTranslation.shape.e_y[1] + (fixedTranslation.shape.R.T[2,1] * fixedTranslation.shape.e_y[2] + fixedTranslation.shape.R.T[3,1] * fixedTranslation.shape.e_y[3]);
//   fixedTranslation.shape.ryvisobj[2] = fixedTranslation.shape.R.T[1,2] * fixedTranslation.shape.e_y[1] + (fixedTranslation.shape.R.T[2,2] * fixedTranslation.shape.e_y[2] + fixedTranslation.shape.R.T[3,2] * fixedTranslation.shape.e_y[3]);
//   fixedTranslation.shape.ryvisobj[3] = fixedTranslation.shape.R.T[1,3] * fixedTranslation.shape.e_y[1] + (fixedTranslation.shape.R.T[2,3] * fixedTranslation.shape.e_y[2] + fixedTranslation.shape.R.T[3,3] * fixedTranslation.shape.e_y[3]);
//   fixedTranslation.shape.rvisobj = fixedTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedTranslation.shape.R.T[1,1],fixedTranslation.shape.R.T[1,2],fixedTranslation.shape.R.T[1,3]},{fixedTranslation.shape.R.T[2,1],fixedTranslation.shape.R.T[2,2],fixedTranslation.shape.R.T[2,3]},{fixedTranslation.shape.R.T[3,1],fixedTranslation.shape.R.T[3,2],fixedTranslation.shape.R.T[3,3]}},{fixedTranslation.shape.r_shape[1],fixedTranslation.shape.r_shape[2],fixedTranslation.shape.r_shape[3]});
//   fixedTranslation.shape.size[1] = fixedTranslation.shape.length;
//   fixedTranslation.shape.size[2] = fixedTranslation.shape.width;
//   fixedTranslation.shape.size[3] = fixedTranslation.shape.height;
//   fixedTranslation.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedTranslation.shape.color[1] / 255.0,fixedTranslation.shape.color[2] / 255.0,fixedTranslation.shape.color[3] / 255.0,fixedTranslation.shape.specularCoefficient);
//   fixedTranslation.shape.Extra = fixedTranslation.shape.extra;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   fixedTranslation.frame_b.r_0 = fixedTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedTranslation.frame_a.R,{fixedTranslation.r[1],fixedTranslation.r[2],fixedTranslation.r[3]});
//   fixedTranslation.frame_b.R.T[1,1] = fixedTranslation.frame_a.R.T[1,1];
//   fixedTranslation.frame_b.R.T[1,2] = fixedTranslation.frame_a.R.T[1,2];
//   fixedTranslation.frame_b.R.T[1,3] = fixedTranslation.frame_a.R.T[1,3];
//   fixedTranslation.frame_b.R.T[2,1] = fixedTranslation.frame_a.R.T[2,1];
//   fixedTranslation.frame_b.R.T[2,2] = fixedTranslation.frame_a.R.T[2,2];
//   fixedTranslation.frame_b.R.T[2,3] = fixedTranslation.frame_a.R.T[2,3];
//   fixedTranslation.frame_b.R.T[3,1] = fixedTranslation.frame_a.R.T[3,1];
//   fixedTranslation.frame_b.R.T[3,2] = fixedTranslation.frame_a.R.T[3,2];
//   fixedTranslation.frame_b.R.T[3,3] = fixedTranslation.frame_a.R.T[3,3];
//   fixedTranslation.frame_b.R.w[1] = fixedTranslation.frame_a.R.w[1];
//   fixedTranslation.frame_b.R.w[2] = fixedTranslation.frame_a.R.w[2];
//   fixedTranslation.frame_b.R.w[3] = fixedTranslation.frame_a.R.w[3];
//   0.0 = fixedTranslation.frame_a.f[1] + fixedTranslation.frame_b.f[1];
//   0.0 = fixedTranslation.frame_a.f[2] + fixedTranslation.frame_b.f[2];
//   0.0 = fixedTranslation.frame_a.f[3] + fixedTranslation.frame_b.f[3];
//   0.0 = fixedTranslation.frame_a.t[1] + (fixedTranslation.frame_b.t[1] + (fixedTranslation.r[2] * fixedTranslation.frame_b.f[3] + (-fixedTranslation.r[3] * fixedTranslation.frame_b.f[2])));
//   0.0 = fixedTranslation.frame_a.t[2] + (fixedTranslation.frame_b.t[2] + (fixedTranslation.r[3] * fixedTranslation.frame_b.f[1] + (-fixedTranslation.r[1] * fixedTranslation.frame_b.f[3])));
//   0.0 = fixedTranslation.frame_a.t[3] + (fixedTranslation.frame_b.t[3] + (fixedTranslation.r[1] * fixedTranslation.frame_b.f[2] + (-fixedTranslation.r[2] * fixedTranslation.frame_b.f[1])));
//   sine1.y = sine1.offset + (if time < sine1.startTime then 0.0 else sine1.amplitude * Modelica.Math.sin(6.28318530717959 * (sine1.freqHz * (time - sine1.startTime)) + sine1.phase));
//   sine2.y = sine2.offset + (if time < sine2.startTime then 0.0 else sine2.amplitude * Modelica.Math.sin(6.28318530717959 * (sine2.freqHz * (time - sine2.startTime)) + sine2.phase));
//   torque1.flange_a.tau = torque1.tau;
//   torque1.flange_b.tau = -torque1.tau;
//   torque2.flange_a.tau = torque2.tau;
//   torque2.flange_b.tau = -torque2.tau;
//   shape.vis.R.T[1,1] = shape.frame_a.R.T[1,1];
//   shape.vis.R.T[1,2] = shape.frame_a.R.T[1,2];
//   shape.vis.R.T[1,3] = shape.frame_a.R.T[1,3];
//   shape.vis.R.T[2,1] = shape.frame_a.R.T[2,1];
//   shape.vis.R.T[2,2] = shape.frame_a.R.T[2,2];
//   shape.vis.R.T[2,3] = shape.frame_a.R.T[2,3];
//   shape.vis.R.T[3,1] = shape.frame_a.R.T[3,1];
//   shape.vis.R.T[3,2] = shape.frame_a.R.T[3,2];
//   shape.vis.R.T[3,3] = shape.frame_a.R.T[3,3];
//   shape.vis.R.w[1] = shape.frame_a.R.w[1];
//   shape.vis.R.w[2] = shape.frame_a.R.w[2];
//   shape.vis.R.w[3] = shape.frame_a.R.w[3];
//   shape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(shape.vis.shapeType);
//   shape.vis.rxvisobj[1] = shape.vis.R.T[1,1] * shape.vis.e_x[1] + (shape.vis.R.T[2,1] * shape.vis.e_x[2] + shape.vis.R.T[3,1] * shape.vis.e_x[3]);
//   shape.vis.rxvisobj[2] = shape.vis.R.T[1,2] * shape.vis.e_x[1] + (shape.vis.R.T[2,2] * shape.vis.e_x[2] + shape.vis.R.T[3,2] * shape.vis.e_x[3]);
//   shape.vis.rxvisobj[3] = shape.vis.R.T[1,3] * shape.vis.e_x[1] + (shape.vis.R.T[2,3] * shape.vis.e_x[2] + shape.vis.R.T[3,3] * shape.vis.e_x[3]);
//   shape.vis.ryvisobj[1] = shape.vis.R.T[1,1] * shape.vis.e_y[1] + (shape.vis.R.T[2,1] * shape.vis.e_y[2] + shape.vis.R.T[3,1] * shape.vis.e_y[3]);
//   shape.vis.ryvisobj[2] = shape.vis.R.T[1,2] * shape.vis.e_y[1] + (shape.vis.R.T[2,2] * shape.vis.e_y[2] + shape.vis.R.T[3,2] * shape.vis.e_y[3]);
//   shape.vis.ryvisobj[3] = shape.vis.R.T[1,3] * shape.vis.e_y[1] + (shape.vis.R.T[2,3] * shape.vis.e_y[2] + shape.vis.R.T[3,3] * shape.vis.e_y[3]);
//   shape.vis.rvisobj = shape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{shape.vis.R.T[1,1],shape.vis.R.T[1,2],shape.vis.R.T[1,3]},{shape.vis.R.T[2,1],shape.vis.R.T[2,2],shape.vis.R.T[2,3]},{shape.vis.R.T[3,1],shape.vis.R.T[3,2],shape.vis.R.T[3,3]}},{shape.vis.r_shape[1],shape.vis.r_shape[2],shape.vis.r_shape[3]});
//   shape.vis.size[1] = shape.vis.length;
//   shape.vis.size[2] = shape.vis.width;
//   shape.vis.size[3] = shape.vis.height;
//   shape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(shape.vis.color[1] / 255.0,shape.vis.color[2] / 255.0,shape.vis.color[3] / 255.0,shape.vis.specularCoefficient);
//   shape.vis.Extra = shape.vis.extra;
//   shape.frame_a.f[1] = 0.0;
//   shape.frame_a.f[2] = 0.0;
//   shape.frame_a.f[3] = 0.0;
//   shape.frame_a.t[1] = 0.0;
//   shape.frame_a.t[2] = 0.0;
//   shape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   shape.frame_a.t[1] + (fixedTranslation.frame_b.t[1] + body.frame_a.t[1]) = 0.0;
//   shape.frame_a.t[2] + (fixedTranslation.frame_b.t[2] + body.frame_a.t[2]) = 0.0;
//   shape.frame_a.t[3] + (fixedTranslation.frame_b.t[3] + body.frame_a.t[3]) = 0.0;
//   shape.frame_a.f[1] + (fixedTranslation.frame_b.f[1] + body.frame_a.f[1]) = 0.0;
//   shape.frame_a.f[2] + (fixedTranslation.frame_b.f[2] + body.frame_a.f[2]) = 0.0;
//   shape.frame_a.f[3] + (fixedTranslation.frame_b.f[3] + body.frame_a.f[3]) = 0.0;
//   body.frame_a.R.w[1] = fixedTranslation.frame_b.R.w[1];
//   body.frame_a.R.w[1] = shape.frame_a.R.w[1];
//   body.frame_a.R.w[2] = fixedTranslation.frame_b.R.w[2];
//   body.frame_a.R.w[2] = shape.frame_a.R.w[2];
//   body.frame_a.R.w[3] = fixedTranslation.frame_b.R.w[3];
//   body.frame_a.R.w[3] = shape.frame_a.R.w[3];
//   body.frame_a.R.T[1,1] = fixedTranslation.frame_b.R.T[1,1];
//   body.frame_a.R.T[1,1] = shape.frame_a.R.T[1,1];
//   body.frame_a.R.T[1,2] = fixedTranslation.frame_b.R.T[1,2];
//   body.frame_a.R.T[1,2] = shape.frame_a.R.T[1,2];
//   body.frame_a.R.T[1,3] = fixedTranslation.frame_b.R.T[1,3];
//   body.frame_a.R.T[1,3] = shape.frame_a.R.T[1,3];
//   body.frame_a.R.T[2,1] = fixedTranslation.frame_b.R.T[2,1];
//   body.frame_a.R.T[2,1] = shape.frame_a.R.T[2,1];
//   body.frame_a.R.T[2,2] = fixedTranslation.frame_b.R.T[2,2];
//   body.frame_a.R.T[2,2] = shape.frame_a.R.T[2,2];
//   body.frame_a.R.T[2,3] = fixedTranslation.frame_b.R.T[2,3];
//   body.frame_a.R.T[2,3] = shape.frame_a.R.T[2,3];
//   body.frame_a.R.T[3,1] = fixedTranslation.frame_b.R.T[3,1];
//   body.frame_a.R.T[3,1] = shape.frame_a.R.T[3,1];
//   body.frame_a.R.T[3,2] = fixedTranslation.frame_b.R.T[3,2];
//   body.frame_a.R.T[3,2] = shape.frame_a.R.T[3,2];
//   body.frame_a.R.T[3,3] = fixedTranslation.frame_b.R.T[3,3];
//   body.frame_a.R.T[3,3] = shape.frame_a.R.T[3,3];
//   body.frame_a.r_0[1] = fixedTranslation.frame_b.r_0[1];
//   body.frame_a.r_0[1] = shape.frame_a.r_0[1];
//   body.frame_a.r_0[2] = fixedTranslation.frame_b.r_0[2];
//   body.frame_a.r_0[2] = shape.frame_a.r_0[2];
//   body.frame_a.r_0[3] = fixedTranslation.frame_b.r_0[3];
//   body.frame_a.r_0[3] = shape.frame_a.r_0[3];
//   sine2.y = torque2.tau;
//   sine1.y = torque1.tau;
//   torque1.flange_b.tau + (wheelSet.support.tau + torque2.flange_b.tau) = 0.0;
//   torque1.flange_b.phi = torque2.flange_b.phi;
//   torque1.flange_b.phi = wheelSet.support.phi;
//   wheelSet.axis2.tau + torque2.flange_a.tau = 0.0;
//   torque2.flange_a.phi = wheelSet.axis2.phi;
//   wheelSet.axis1.tau + torque1.flange_a.tau = 0.0;
//   torque1.flange_a.phi = wheelSet.axis1.phi;
//   fixedTranslation.frame_a.t[1] + wheelSet.frameMiddle.t[1] = 0.0;
//   fixedTranslation.frame_a.t[2] + wheelSet.frameMiddle.t[2] = 0.0;
//   fixedTranslation.frame_a.t[3] + wheelSet.frameMiddle.t[3] = 0.0;
//   fixedTranslation.frame_a.f[1] + wheelSet.frameMiddle.f[1] = 0.0;
//   fixedTranslation.frame_a.f[2] + wheelSet.frameMiddle.f[2] = 0.0;
//   fixedTranslation.frame_a.f[3] + wheelSet.frameMiddle.f[3] = 0.0;
//   fixedTranslation.frame_a.R.w[1] = wheelSet.frameMiddle.R.w[1];
//   fixedTranslation.frame_a.R.w[2] = wheelSet.frameMiddle.R.w[2];
//   fixedTranslation.frame_a.R.w[3] = wheelSet.frameMiddle.R.w[3];
//   fixedTranslation.frame_a.R.T[1,1] = wheelSet.frameMiddle.R.T[1,1];
//   fixedTranslation.frame_a.R.T[1,2] = wheelSet.frameMiddle.R.T[1,2];
//   fixedTranslation.frame_a.R.T[1,3] = wheelSet.frameMiddle.R.T[1,3];
//   fixedTranslation.frame_a.R.T[2,1] = wheelSet.frameMiddle.R.T[2,1];
//   fixedTranslation.frame_a.R.T[2,2] = wheelSet.frameMiddle.R.T[2,2];
//   fixedTranslation.frame_a.R.T[2,3] = wheelSet.frameMiddle.R.T[2,3];
//   fixedTranslation.frame_a.R.T[3,1] = wheelSet.frameMiddle.R.T[3,1];
//   fixedTranslation.frame_a.R.T[3,2] = wheelSet.frameMiddle.R.T[3,2];
//   fixedTranslation.frame_a.R.T[3,3] = wheelSet.frameMiddle.R.T[3,3];
//   fixedTranslation.frame_a.r_0[1] = wheelSet.frameMiddle.r_0[1];
//   fixedTranslation.frame_a.r_0[2] = wheelSet.frameMiddle.r_0[2];
//   fixedTranslation.frame_a.r_0[3] = wheelSet.frameMiddle.r_0[3];
//   wheelSet.wheelSetJoint.frameMiddle.t[1] + (-wheelSet.frameMiddle.t[1]) = 0.0;
//   wheelSet.wheelSetJoint.frameMiddle.t[2] + (-wheelSet.frameMiddle.t[2]) = 0.0;
//   wheelSet.wheelSetJoint.frameMiddle.t[3] + (-wheelSet.frameMiddle.t[3]) = 0.0;
//   wheelSet.wheelSetJoint.frameMiddle.f[1] + (-wheelSet.frameMiddle.f[1]) = 0.0;
//   wheelSet.wheelSetJoint.frameMiddle.f[2] + (-wheelSet.frameMiddle.f[2]) = 0.0;
//   wheelSet.wheelSetJoint.frameMiddle.f[3] + (-wheelSet.frameMiddle.f[3]) = 0.0;
//   wheelSet.frameMiddle.R.w[1] = wheelSet.wheelSetJoint.frameMiddle.R.w[1];
//   wheelSet.frameMiddle.R.w[2] = wheelSet.wheelSetJoint.frameMiddle.R.w[2];
//   wheelSet.frameMiddle.R.w[3] = wheelSet.wheelSetJoint.frameMiddle.R.w[3];
//   wheelSet.frameMiddle.R.T[1,1] = wheelSet.wheelSetJoint.frameMiddle.R.T[1,1];
//   wheelSet.frameMiddle.R.T[1,2] = wheelSet.wheelSetJoint.frameMiddle.R.T[1,2];
//   wheelSet.frameMiddle.R.T[1,3] = wheelSet.wheelSetJoint.frameMiddle.R.T[1,3];
//   wheelSet.frameMiddle.R.T[2,1] = wheelSet.wheelSetJoint.frameMiddle.R.T[2,1];
//   wheelSet.frameMiddle.R.T[2,2] = wheelSet.wheelSetJoint.frameMiddle.R.T[2,2];
//   wheelSet.frameMiddle.R.T[2,3] = wheelSet.wheelSetJoint.frameMiddle.R.T[2,3];
//   wheelSet.frameMiddle.R.T[3,1] = wheelSet.wheelSetJoint.frameMiddle.R.T[3,1];
//   wheelSet.frameMiddle.R.T[3,2] = wheelSet.wheelSetJoint.frameMiddle.R.T[3,2];
//   wheelSet.frameMiddle.R.T[3,3] = wheelSet.wheelSetJoint.frameMiddle.R.T[3,3];
//   wheelSet.frameMiddle.r_0[1] = wheelSet.wheelSetJoint.frameMiddle.r_0[1];
//   wheelSet.frameMiddle.r_0[2] = wheelSet.wheelSetJoint.frameMiddle.r_0[2];
//   wheelSet.frameMiddle.r_0[3] = wheelSet.wheelSetJoint.frameMiddle.r_0[3];
//   wheelSet.wheelSetJoint.support.tau + (-wheelSet.support.tau) = 0.0;
//   wheelSet.support.phi = wheelSet.wheelSetJoint.support.phi;
//   wheelSet.wheelSetJoint.axis2.tau + (-wheelSet.axis2.tau) = 0.0;
//   wheelSet.axis2.phi = wheelSet.wheelSetJoint.axis2.phi;
//   wheelSet.wheelSetJoint.axis1.tau + (-wheelSet.axis1.tau) = 0.0;
//   wheelSet.axis1.phi = wheelSet.wheelSetJoint.axis1.phi;
//   wheelSet.wheelSetJoint.frame1.t[1] + (wheelSet.shape1.frame_a.t[1] + (wheelSet.body1.frame_a.t[1] + (-wheelSet.frame1.t[1]))) = 0.0;
//   wheelSet.wheelSetJoint.frame1.t[2] + (wheelSet.shape1.frame_a.t[2] + (wheelSet.body1.frame_a.t[2] + (-wheelSet.frame1.t[2]))) = 0.0;
//   wheelSet.wheelSetJoint.frame1.t[3] + (wheelSet.shape1.frame_a.t[3] + (wheelSet.body1.frame_a.t[3] + (-wheelSet.frame1.t[3]))) = 0.0;
//   wheelSet.wheelSetJoint.frame1.f[1] + (wheelSet.shape1.frame_a.f[1] + (wheelSet.body1.frame_a.f[1] + (-wheelSet.frame1.f[1]))) = 0.0;
//   wheelSet.wheelSetJoint.frame1.f[2] + (wheelSet.shape1.frame_a.f[2] + (wheelSet.body1.frame_a.f[2] + (-wheelSet.frame1.f[2]))) = 0.0;
//   wheelSet.wheelSetJoint.frame1.f[3] + (wheelSet.shape1.frame_a.f[3] + (wheelSet.body1.frame_a.f[3] + (-wheelSet.frame1.f[3]))) = 0.0;
//   wheelSet.body1.frame_a.R.w[1] = wheelSet.frame1.R.w[1];
//   wheelSet.body1.frame_a.R.w[1] = wheelSet.shape1.frame_a.R.w[1];
//   wheelSet.body1.frame_a.R.w[1] = wheelSet.wheelSetJoint.frame1.R.w[1];
//   wheelSet.body1.frame_a.R.w[2] = wheelSet.frame1.R.w[2];
//   wheelSet.body1.frame_a.R.w[2] = wheelSet.shape1.frame_a.R.w[2];
//   wheelSet.body1.frame_a.R.w[2] = wheelSet.wheelSetJoint.frame1.R.w[2];
//   wheelSet.body1.frame_a.R.w[3] = wheelSet.frame1.R.w[3];
//   wheelSet.body1.frame_a.R.w[3] = wheelSet.shape1.frame_a.R.w[3];
//   wheelSet.body1.frame_a.R.w[3] = wheelSet.wheelSetJoint.frame1.R.w[3];
//   wheelSet.body1.frame_a.R.T[1,1] = wheelSet.frame1.R.T[1,1];
//   wheelSet.body1.frame_a.R.T[1,1] = wheelSet.shape1.frame_a.R.T[1,1];
//   wheelSet.body1.frame_a.R.T[1,1] = wheelSet.wheelSetJoint.frame1.R.T[1,1];
//   wheelSet.body1.frame_a.R.T[1,2] = wheelSet.frame1.R.T[1,2];
//   wheelSet.body1.frame_a.R.T[1,2] = wheelSet.shape1.frame_a.R.T[1,2];
//   wheelSet.body1.frame_a.R.T[1,2] = wheelSet.wheelSetJoint.frame1.R.T[1,2];
//   wheelSet.body1.frame_a.R.T[1,3] = wheelSet.frame1.R.T[1,3];
//   wheelSet.body1.frame_a.R.T[1,3] = wheelSet.shape1.frame_a.R.T[1,3];
//   wheelSet.body1.frame_a.R.T[1,3] = wheelSet.wheelSetJoint.frame1.R.T[1,3];
//   wheelSet.body1.frame_a.R.T[2,1] = wheelSet.frame1.R.T[2,1];
//   wheelSet.body1.frame_a.R.T[2,1] = wheelSet.shape1.frame_a.R.T[2,1];
//   wheelSet.body1.frame_a.R.T[2,1] = wheelSet.wheelSetJoint.frame1.R.T[2,1];
//   wheelSet.body1.frame_a.R.T[2,2] = wheelSet.frame1.R.T[2,2];
//   wheelSet.body1.frame_a.R.T[2,2] = wheelSet.shape1.frame_a.R.T[2,2];
//   wheelSet.body1.frame_a.R.T[2,2] = wheelSet.wheelSetJoint.frame1.R.T[2,2];
//   wheelSet.body1.frame_a.R.T[2,3] = wheelSet.frame1.R.T[2,3];
//   wheelSet.body1.frame_a.R.T[2,3] = wheelSet.shape1.frame_a.R.T[2,3];
//   wheelSet.body1.frame_a.R.T[2,3] = wheelSet.wheelSetJoint.frame1.R.T[2,3];
//   wheelSet.body1.frame_a.R.T[3,1] = wheelSet.frame1.R.T[3,1];
//   wheelSet.body1.frame_a.R.T[3,1] = wheelSet.shape1.frame_a.R.T[3,1];
//   wheelSet.body1.frame_a.R.T[3,1] = wheelSet.wheelSetJoint.frame1.R.T[3,1];
//   wheelSet.body1.frame_a.R.T[3,2] = wheelSet.frame1.R.T[3,2];
//   wheelSet.body1.frame_a.R.T[3,2] = wheelSet.shape1.frame_a.R.T[3,2];
//   wheelSet.body1.frame_a.R.T[3,2] = wheelSet.wheelSetJoint.frame1.R.T[3,2];
//   wheelSet.body1.frame_a.R.T[3,3] = wheelSet.frame1.R.T[3,3];
//   wheelSet.body1.frame_a.R.T[3,3] = wheelSet.shape1.frame_a.R.T[3,3];
//   wheelSet.body1.frame_a.R.T[3,3] = wheelSet.wheelSetJoint.frame1.R.T[3,3];
//   wheelSet.body1.frame_a.r_0[1] = wheelSet.frame1.r_0[1];
//   wheelSet.body1.frame_a.r_0[1] = wheelSet.shape1.frame_a.r_0[1];
//   wheelSet.body1.frame_a.r_0[1] = wheelSet.wheelSetJoint.frame1.r_0[1];
//   wheelSet.body1.frame_a.r_0[2] = wheelSet.frame1.r_0[2];
//   wheelSet.body1.frame_a.r_0[2] = wheelSet.shape1.frame_a.r_0[2];
//   wheelSet.body1.frame_a.r_0[2] = wheelSet.wheelSetJoint.frame1.r_0[2];
//   wheelSet.body1.frame_a.r_0[3] = wheelSet.frame1.r_0[3];
//   wheelSet.body1.frame_a.r_0[3] = wheelSet.shape1.frame_a.r_0[3];
//   wheelSet.body1.frame_a.r_0[3] = wheelSet.wheelSetJoint.frame1.r_0[3];
//   wheelSet.wheelSetJoint.frame2.t[1] + (wheelSet.shape2.frame_a.t[1] + (wheelSet.body2.frame_a.t[1] + (-wheelSet.frame2.t[1]))) = 0.0;
//   wheelSet.wheelSetJoint.frame2.t[2] + (wheelSet.shape2.frame_a.t[2] + (wheelSet.body2.frame_a.t[2] + (-wheelSet.frame2.t[2]))) = 0.0;
//   wheelSet.wheelSetJoint.frame2.t[3] + (wheelSet.shape2.frame_a.t[3] + (wheelSet.body2.frame_a.t[3] + (-wheelSet.frame2.t[3]))) = 0.0;
//   wheelSet.wheelSetJoint.frame2.f[1] + (wheelSet.shape2.frame_a.f[1] + (wheelSet.body2.frame_a.f[1] + (-wheelSet.frame2.f[1]))) = 0.0;
//   wheelSet.wheelSetJoint.frame2.f[2] + (wheelSet.shape2.frame_a.f[2] + (wheelSet.body2.frame_a.f[2] + (-wheelSet.frame2.f[2]))) = 0.0;
//   wheelSet.wheelSetJoint.frame2.f[3] + (wheelSet.shape2.frame_a.f[3] + (wheelSet.body2.frame_a.f[3] + (-wheelSet.frame2.f[3]))) = 0.0;
//   wheelSet.body2.frame_a.R.w[1] = wheelSet.frame2.R.w[1];
//   wheelSet.body2.frame_a.R.w[1] = wheelSet.shape2.frame_a.R.w[1];
//   wheelSet.body2.frame_a.R.w[1] = wheelSet.wheelSetJoint.frame2.R.w[1];
//   wheelSet.body2.frame_a.R.w[2] = wheelSet.frame2.R.w[2];
//   wheelSet.body2.frame_a.R.w[2] = wheelSet.shape2.frame_a.R.w[2];
//   wheelSet.body2.frame_a.R.w[2] = wheelSet.wheelSetJoint.frame2.R.w[2];
//   wheelSet.body2.frame_a.R.w[3] = wheelSet.frame2.R.w[3];
//   wheelSet.body2.frame_a.R.w[3] = wheelSet.shape2.frame_a.R.w[3];
//   wheelSet.body2.frame_a.R.w[3] = wheelSet.wheelSetJoint.frame2.R.w[3];
//   wheelSet.body2.frame_a.R.T[1,1] = wheelSet.frame2.R.T[1,1];
//   wheelSet.body2.frame_a.R.T[1,1] = wheelSet.shape2.frame_a.R.T[1,1];
//   wheelSet.body2.frame_a.R.T[1,1] = wheelSet.wheelSetJoint.frame2.R.T[1,1];
//   wheelSet.body2.frame_a.R.T[1,2] = wheelSet.frame2.R.T[1,2];
//   wheelSet.body2.frame_a.R.T[1,2] = wheelSet.shape2.frame_a.R.T[1,2];
//   wheelSet.body2.frame_a.R.T[1,2] = wheelSet.wheelSetJoint.frame2.R.T[1,2];
//   wheelSet.body2.frame_a.R.T[1,3] = wheelSet.frame2.R.T[1,3];
//   wheelSet.body2.frame_a.R.T[1,3] = wheelSet.shape2.frame_a.R.T[1,3];
//   wheelSet.body2.frame_a.R.T[1,3] = wheelSet.wheelSetJoint.frame2.R.T[1,3];
//   wheelSet.body2.frame_a.R.T[2,1] = wheelSet.frame2.R.T[2,1];
//   wheelSet.body2.frame_a.R.T[2,1] = wheelSet.shape2.frame_a.R.T[2,1];
//   wheelSet.body2.frame_a.R.T[2,1] = wheelSet.wheelSetJoint.frame2.R.T[2,1];
//   wheelSet.body2.frame_a.R.T[2,2] = wheelSet.frame2.R.T[2,2];
//   wheelSet.body2.frame_a.R.T[2,2] = wheelSet.shape2.frame_a.R.T[2,2];
//   wheelSet.body2.frame_a.R.T[2,2] = wheelSet.wheelSetJoint.frame2.R.T[2,2];
//   wheelSet.body2.frame_a.R.T[2,3] = wheelSet.frame2.R.T[2,3];
//   wheelSet.body2.frame_a.R.T[2,3] = wheelSet.shape2.frame_a.R.T[2,3];
//   wheelSet.body2.frame_a.R.T[2,3] = wheelSet.wheelSetJoint.frame2.R.T[2,3];
//   wheelSet.body2.frame_a.R.T[3,1] = wheelSet.frame2.R.T[3,1];
//   wheelSet.body2.frame_a.R.T[3,1] = wheelSet.shape2.frame_a.R.T[3,1];
//   wheelSet.body2.frame_a.R.T[3,1] = wheelSet.wheelSetJoint.frame2.R.T[3,1];
//   wheelSet.body2.frame_a.R.T[3,2] = wheelSet.frame2.R.T[3,2];
//   wheelSet.body2.frame_a.R.T[3,2] = wheelSet.shape2.frame_a.R.T[3,2];
//   wheelSet.body2.frame_a.R.T[3,2] = wheelSet.wheelSetJoint.frame2.R.T[3,2];
//   wheelSet.body2.frame_a.R.T[3,3] = wheelSet.frame2.R.T[3,3];
//   wheelSet.body2.frame_a.R.T[3,3] = wheelSet.shape2.frame_a.R.T[3,3];
//   wheelSet.body2.frame_a.R.T[3,3] = wheelSet.wheelSetJoint.frame2.R.T[3,3];
//   wheelSet.body2.frame_a.r_0[1] = wheelSet.frame2.r_0[1];
//   wheelSet.body2.frame_a.r_0[1] = wheelSet.shape2.frame_a.r_0[1];
//   wheelSet.body2.frame_a.r_0[1] = wheelSet.wheelSetJoint.frame2.r_0[1];
//   wheelSet.body2.frame_a.r_0[2] = wheelSet.frame2.r_0[2];
//   wheelSet.body2.frame_a.r_0[2] = wheelSet.shape2.frame_a.r_0[2];
//   wheelSet.body2.frame_a.r_0[2] = wheelSet.wheelSetJoint.frame2.r_0[2];
//   wheelSet.body2.frame_a.r_0[3] = wheelSet.frame2.r_0[3];
//   wheelSet.body2.frame_a.r_0[3] = wheelSet.shape2.frame_a.r_0[3];
//   wheelSet.body2.frame_a.r_0[3] = wheelSet.wheelSetJoint.frame2.r_0[3];
//   wheelSet.wheelSetJoint.mounting1D.flange_b.tau + (-wheelSet.wheelSetJoint.support.tau) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.flange_b.phi = wheelSet.wheelSetJoint.support.phi;
//   wheelSet.wheelSetJoint.rod2.frame_a.t[1] + (wheelSet.wheelSetJoint.rod1.frame_a.t[1] + (wheelSet.wheelSetJoint.revolute.frame_b.t[1] + ((-wheelSet.wheelSetJoint.frameMiddle.t[1]) + wheelSet.wheelSetJoint.mounting1D.frame_a.t[1]))) = 0.0;
//   wheelSet.wheelSetJoint.rod2.frame_a.t[2] + (wheelSet.wheelSetJoint.rod1.frame_a.t[2] + (wheelSet.wheelSetJoint.revolute.frame_b.t[2] + ((-wheelSet.wheelSetJoint.frameMiddle.t[2]) + wheelSet.wheelSetJoint.mounting1D.frame_a.t[2]))) = 0.0;
//   wheelSet.wheelSetJoint.rod2.frame_a.t[3] + (wheelSet.wheelSetJoint.rod1.frame_a.t[3] + (wheelSet.wheelSetJoint.revolute.frame_b.t[3] + ((-wheelSet.wheelSetJoint.frameMiddle.t[3]) + wheelSet.wheelSetJoint.mounting1D.frame_a.t[3]))) = 0.0;
//   wheelSet.wheelSetJoint.rod2.frame_a.f[1] + (wheelSet.wheelSetJoint.rod1.frame_a.f[1] + (wheelSet.wheelSetJoint.revolute.frame_b.f[1] + ((-wheelSet.wheelSetJoint.frameMiddle.f[1]) + wheelSet.wheelSetJoint.mounting1D.frame_a.f[1]))) = 0.0;
//   wheelSet.wheelSetJoint.rod2.frame_a.f[2] + (wheelSet.wheelSetJoint.rod1.frame_a.f[2] + (wheelSet.wheelSetJoint.revolute.frame_b.f[2] + ((-wheelSet.wheelSetJoint.frameMiddle.f[2]) + wheelSet.wheelSetJoint.mounting1D.frame_a.f[2]))) = 0.0;
//   wheelSet.wheelSetJoint.rod2.frame_a.f[3] + (wheelSet.wheelSetJoint.rod1.frame_a.f[3] + (wheelSet.wheelSetJoint.revolute.frame_b.f[3] + ((-wheelSet.wheelSetJoint.frameMiddle.f[3]) + wheelSet.wheelSetJoint.mounting1D.frame_a.f[3]))) = 0.0;
//   wheelSet.wheelSetJoint.frameMiddle.R.w[1] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[1] = wheelSet.wheelSetJoint.revolute.frame_b.R.w[1];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[1] = wheelSet.wheelSetJoint.rod1.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[1] = wheelSet.wheelSetJoint.rod2.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[2] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[2] = wheelSet.wheelSetJoint.revolute.frame_b.R.w[2];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[2] = wheelSet.wheelSetJoint.rod1.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[2] = wheelSet.wheelSetJoint.rod2.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[3] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[3] = wheelSet.wheelSetJoint.revolute.frame_b.R.w[3];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[3] = wheelSet.wheelSetJoint.rod1.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.frameMiddle.R.w[3] = wheelSet.wheelSetJoint.rod2.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,1] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,1] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[1,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,1] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,1] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,2] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,2] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[1,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,2] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,2] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,3] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,3] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[1,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,3] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[1,3] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,1] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,1] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[2,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,1] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,1] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,2] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,2] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[2,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,2] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,2] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,3] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,3] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[2,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,3] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[2,3] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,1] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,1] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[3,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,1] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,1] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,2] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,2] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[3,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,2] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,2] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,3] = wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,3] = wheelSet.wheelSetJoint.revolute.frame_b.R.T[3,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,3] = wheelSet.wheelSetJoint.rod1.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.frameMiddle.R.T[3,3] = wheelSet.wheelSetJoint.rod2.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[1] = wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[1] = wheelSet.wheelSetJoint.revolute.frame_b.r_0[1];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[1] = wheelSet.wheelSetJoint.rod1.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[1] = wheelSet.wheelSetJoint.rod2.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[2] = wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[2] = wheelSet.wheelSetJoint.revolute.frame_b.r_0[2];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[2] = wheelSet.wheelSetJoint.rod1.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[2] = wheelSet.wheelSetJoint.rod2.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[3] = wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[3] = wheelSet.wheelSetJoint.revolute.frame_b.r_0[3];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[3] = wheelSet.wheelSetJoint.rod1.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.frameMiddle.r_0[3] = wheelSet.wheelSetJoint.rod2.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.revolute2.axis.tau + (-wheelSet.wheelSetJoint.axis2.tau) = 0.0;
//   wheelSet.wheelSetJoint.axis2.phi = wheelSet.wheelSetJoint.revolute2.axis.phi;
//   wheelSet.wheelSetJoint.revolute1.axis.tau + (-wheelSet.wheelSetJoint.axis1.tau) = 0.0;
//   wheelSet.wheelSetJoint.axis1.phi = wheelSet.wheelSetJoint.revolute1.axis.phi;
//   wheelSet.wheelSetJoint.rolling2.frame_a.t[1] + (wheelSet.wheelSetJoint.revolute2.frame_b.t[1] + (-wheelSet.wheelSetJoint.frame2.t[1])) = 0.0;
//   wheelSet.wheelSetJoint.rolling2.frame_a.t[2] + (wheelSet.wheelSetJoint.revolute2.frame_b.t[2] + (-wheelSet.wheelSetJoint.frame2.t[2])) = 0.0;
//   wheelSet.wheelSetJoint.rolling2.frame_a.t[3] + (wheelSet.wheelSetJoint.revolute2.frame_b.t[3] + (-wheelSet.wheelSetJoint.frame2.t[3])) = 0.0;
//   wheelSet.wheelSetJoint.rolling2.frame_a.f[1] + (wheelSet.wheelSetJoint.revolute2.frame_b.f[1] + (-wheelSet.wheelSetJoint.frame2.f[1])) = 0.0;
//   wheelSet.wheelSetJoint.rolling2.frame_a.f[2] + (wheelSet.wheelSetJoint.revolute2.frame_b.f[2] + (-wheelSet.wheelSetJoint.frame2.f[2])) = 0.0;
//   wheelSet.wheelSetJoint.rolling2.frame_a.f[3] + (wheelSet.wheelSetJoint.revolute2.frame_b.f[3] + (-wheelSet.wheelSetJoint.frame2.f[3])) = 0.0;
//   wheelSet.wheelSetJoint.frame2.R.w[1] = wheelSet.wheelSetJoint.revolute2.frame_b.R.w[1];
//   wheelSet.wheelSetJoint.frame2.R.w[1] = wheelSet.wheelSetJoint.rolling2.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.frame2.R.w[2] = wheelSet.wheelSetJoint.revolute2.frame_b.R.w[2];
//   wheelSet.wheelSetJoint.frame2.R.w[2] = wheelSet.wheelSetJoint.rolling2.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.frame2.R.w[3] = wheelSet.wheelSetJoint.revolute2.frame_b.R.w[3];
//   wheelSet.wheelSetJoint.frame2.R.w[3] = wheelSet.wheelSetJoint.rolling2.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.frame2.R.T[1,1] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[1,1];
//   wheelSet.wheelSetJoint.frame2.R.T[1,1] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.frame2.R.T[1,2] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[1,2];
//   wheelSet.wheelSetJoint.frame2.R.T[1,2] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.frame2.R.T[1,3] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[1,3];
//   wheelSet.wheelSetJoint.frame2.R.T[1,3] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.frame2.R.T[2,1] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[2,1];
//   wheelSet.wheelSetJoint.frame2.R.T[2,1] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.frame2.R.T[2,2] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[2,2];
//   wheelSet.wheelSetJoint.frame2.R.T[2,2] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.frame2.R.T[2,3] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[2,3];
//   wheelSet.wheelSetJoint.frame2.R.T[2,3] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.frame2.R.T[3,1] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[3,1];
//   wheelSet.wheelSetJoint.frame2.R.T[3,1] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.frame2.R.T[3,2] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[3,2];
//   wheelSet.wheelSetJoint.frame2.R.T[3,2] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.frame2.R.T[3,3] = wheelSet.wheelSetJoint.revolute2.frame_b.R.T[3,3];
//   wheelSet.wheelSetJoint.frame2.R.T[3,3] = wheelSet.wheelSetJoint.rolling2.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.frame2.r_0[1] = wheelSet.wheelSetJoint.revolute2.frame_b.r_0[1];
//   wheelSet.wheelSetJoint.frame2.r_0[1] = wheelSet.wheelSetJoint.rolling2.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.frame2.r_0[2] = wheelSet.wheelSetJoint.revolute2.frame_b.r_0[2];
//   wheelSet.wheelSetJoint.frame2.r_0[2] = wheelSet.wheelSetJoint.rolling2.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.frame2.r_0[3] = wheelSet.wheelSetJoint.revolute2.frame_b.r_0[3];
//   wheelSet.wheelSetJoint.frame2.r_0[3] = wheelSet.wheelSetJoint.rolling2.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.rolling1.frame_a.t[1] + (wheelSet.wheelSetJoint.revolute1.frame_b.t[1] + (-wheelSet.wheelSetJoint.frame1.t[1])) = 0.0;
//   wheelSet.wheelSetJoint.rolling1.frame_a.t[2] + (wheelSet.wheelSetJoint.revolute1.frame_b.t[2] + (-wheelSet.wheelSetJoint.frame1.t[2])) = 0.0;
//   wheelSet.wheelSetJoint.rolling1.frame_a.t[3] + (wheelSet.wheelSetJoint.revolute1.frame_b.t[3] + (-wheelSet.wheelSetJoint.frame1.t[3])) = 0.0;
//   wheelSet.wheelSetJoint.rolling1.frame_a.f[1] + (wheelSet.wheelSetJoint.revolute1.frame_b.f[1] + (-wheelSet.wheelSetJoint.frame1.f[1])) = 0.0;
//   wheelSet.wheelSetJoint.rolling1.frame_a.f[2] + (wheelSet.wheelSetJoint.revolute1.frame_b.f[2] + (-wheelSet.wheelSetJoint.frame1.f[2])) = 0.0;
//   wheelSet.wheelSetJoint.rolling1.frame_a.f[3] + (wheelSet.wheelSetJoint.revolute1.frame_b.f[3] + (-wheelSet.wheelSetJoint.frame1.f[3])) = 0.0;
//   wheelSet.wheelSetJoint.frame1.R.w[1] = wheelSet.wheelSetJoint.revolute1.frame_b.R.w[1];
//   wheelSet.wheelSetJoint.frame1.R.w[1] = wheelSet.wheelSetJoint.rolling1.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.frame1.R.w[2] = wheelSet.wheelSetJoint.revolute1.frame_b.R.w[2];
//   wheelSet.wheelSetJoint.frame1.R.w[2] = wheelSet.wheelSetJoint.rolling1.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.frame1.R.w[3] = wheelSet.wheelSetJoint.revolute1.frame_b.R.w[3];
//   wheelSet.wheelSetJoint.frame1.R.w[3] = wheelSet.wheelSetJoint.rolling1.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.frame1.R.T[1,1] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[1,1];
//   wheelSet.wheelSetJoint.frame1.R.T[1,1] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.frame1.R.T[1,2] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[1,2];
//   wheelSet.wheelSetJoint.frame1.R.T[1,2] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.frame1.R.T[1,3] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[1,3];
//   wheelSet.wheelSetJoint.frame1.R.T[1,3] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.frame1.R.T[2,1] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[2,1];
//   wheelSet.wheelSetJoint.frame1.R.T[2,1] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.frame1.R.T[2,2] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[2,2];
//   wheelSet.wheelSetJoint.frame1.R.T[2,2] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.frame1.R.T[2,3] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[2,3];
//   wheelSet.wheelSetJoint.frame1.R.T[2,3] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.frame1.R.T[3,1] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[3,1];
//   wheelSet.wheelSetJoint.frame1.R.T[3,1] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.frame1.R.T[3,2] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[3,2];
//   wheelSet.wheelSetJoint.frame1.R.T[3,2] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.frame1.R.T[3,3] = wheelSet.wheelSetJoint.revolute1.frame_b.R.T[3,3];
//   wheelSet.wheelSetJoint.frame1.R.T[3,3] = wheelSet.wheelSetJoint.rolling1.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.frame1.r_0[1] = wheelSet.wheelSetJoint.revolute1.frame_b.r_0[1];
//   wheelSet.wheelSetJoint.frame1.r_0[1] = wheelSet.wheelSetJoint.rolling1.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.frame1.r_0[2] = wheelSet.wheelSetJoint.revolute1.frame_b.r_0[2];
//   wheelSet.wheelSetJoint.frame1.r_0[2] = wheelSet.wheelSetJoint.rolling1.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.frame1.r_0[3] = wheelSet.wheelSetJoint.revolute1.frame_b.r_0[3];
//   wheelSet.wheelSetJoint.frame1.r_0[3] = wheelSet.wheelSetJoint.rolling1.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.t[1] + wheelSet.wheelSetJoint.revolute.frame_a.t[1] = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.frame_b.t[2] + wheelSet.wheelSetJoint.revolute.frame_a.t[2] = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.frame_b.t[3] + wheelSet.wheelSetJoint.revolute.frame_a.t[3] = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.frame_b.f[1] + wheelSet.wheelSetJoint.revolute.frame_a.f[1] = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.frame_b.f[2] + wheelSet.wheelSetJoint.revolute.frame_a.f[2] = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.frame_b.f[3] + wheelSet.wheelSetJoint.revolute.frame_a.f[3] = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[1] = wheelSet.wheelSetJoint.revolute.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[2] = wheelSet.wheelSetJoint.revolute.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.w[3] = wheelSet.wheelSetJoint.revolute.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.revolute.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.r_0[1] = wheelSet.wheelSetJoint.revolute.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.r_0[2] = wheelSet.wheelSetJoint.revolute.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.prismatic2.frame_b.r_0[3] = wheelSet.wheelSetJoint.revolute.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.t[1] + wheelSet.wheelSetJoint.prismatic2.frame_a.t[1] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_b.t[2] + wheelSet.wheelSetJoint.prismatic2.frame_a.t[2] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_b.t[3] + wheelSet.wheelSetJoint.prismatic2.frame_a.t[3] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_b.f[1] + wheelSet.wheelSetJoint.prismatic2.frame_a.f[1] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_b.f[2] + wheelSet.wheelSetJoint.prismatic2.frame_a.f[2] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_b.f[3] + wheelSet.wheelSetJoint.prismatic2.frame_a.f[3] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.w[3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.prismatic2.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.r_0[1] = wheelSet.wheelSetJoint.prismatic2.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.r_0[2] = wheelSet.wheelSetJoint.prismatic2.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.prismatic1.frame_b.r_0[3] = wheelSet.wheelSetJoint.prismatic2.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.prismatic1.frame_a.t[1] + wheelSet.wheelSetJoint.fixed.frame_b.t[1] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_a.t[2] + wheelSet.wheelSetJoint.fixed.frame_b.t[2] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_a.t[3] + wheelSet.wheelSetJoint.fixed.frame_b.t[3] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_a.f[1] + wheelSet.wheelSetJoint.fixed.frame_b.f[1] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_a.f[2] + wheelSet.wheelSetJoint.fixed.frame_b.f[2] = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.frame_a.f[3] + wheelSet.wheelSetJoint.fixed.frame_b.f[3] = 0.0;
//   wheelSet.wheelSetJoint.fixed.frame_b.R.w[1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.w[2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.w[3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[1,3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[2,3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,1] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,2] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.fixed.frame_b.R.T[3,3] = wheelSet.wheelSetJoint.prismatic1.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.fixed.frame_b.r_0[1] = wheelSet.wheelSetJoint.prismatic1.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.fixed.frame_b.r_0[2] = wheelSet.wheelSetJoint.prismatic1.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.fixed.frame_b.r_0[3] = wheelSet.wheelSetJoint.prismatic1.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.revolute2.frame_a.t[1] + wheelSet.wheelSetJoint.rod2.frame_b.t[1] = 0.0;
//   wheelSet.wheelSetJoint.revolute2.frame_a.t[2] + wheelSet.wheelSetJoint.rod2.frame_b.t[2] = 0.0;
//   wheelSet.wheelSetJoint.revolute2.frame_a.t[3] + wheelSet.wheelSetJoint.rod2.frame_b.t[3] = 0.0;
//   wheelSet.wheelSetJoint.revolute2.frame_a.f[1] + wheelSet.wheelSetJoint.rod2.frame_b.f[1] = 0.0;
//   wheelSet.wheelSetJoint.revolute2.frame_a.f[2] + wheelSet.wheelSetJoint.rod2.frame_b.f[2] = 0.0;
//   wheelSet.wheelSetJoint.revolute2.frame_a.f[3] + wheelSet.wheelSetJoint.rod2.frame_b.f[3] = 0.0;
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.w[1] = wheelSet.wheelSetJoint.rod2.frame_b.R.w[1];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.w[2] = wheelSet.wheelSetJoint.rod2.frame_b.R.w[2];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.w[3] = wheelSet.wheelSetJoint.rod2.frame_b.R.w[3];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[1,1] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,1];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[1,2] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,2];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[1,3] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[1,3];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[2,1] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,1];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[2,2] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,2];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[2,3] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[2,3];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[3,1] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,1];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[3,2] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,2];
//   wheelSet.wheelSetJoint.revolute2.frame_a.R.T[3,3] = wheelSet.wheelSetJoint.rod2.frame_b.R.T[3,3];
//   wheelSet.wheelSetJoint.revolute2.frame_a.r_0[1] = wheelSet.wheelSetJoint.rod2.frame_b.r_0[1];
//   wheelSet.wheelSetJoint.revolute2.frame_a.r_0[2] = wheelSet.wheelSetJoint.rod2.frame_b.r_0[2];
//   wheelSet.wheelSetJoint.revolute2.frame_a.r_0[3] = wheelSet.wheelSetJoint.rod2.frame_b.r_0[3];
//   wheelSet.wheelSetJoint.rod1.frame_b.t[1] + wheelSet.wheelSetJoint.revolute1.frame_a.t[1] = 0.0;
//   wheelSet.wheelSetJoint.rod1.frame_b.t[2] + wheelSet.wheelSetJoint.revolute1.frame_a.t[2] = 0.0;
//   wheelSet.wheelSetJoint.rod1.frame_b.t[3] + wheelSet.wheelSetJoint.revolute1.frame_a.t[3] = 0.0;
//   wheelSet.wheelSetJoint.rod1.frame_b.f[1] + wheelSet.wheelSetJoint.revolute1.frame_a.f[1] = 0.0;
//   wheelSet.wheelSetJoint.rod1.frame_b.f[2] + wheelSet.wheelSetJoint.revolute1.frame_a.f[2] = 0.0;
//   wheelSet.wheelSetJoint.rod1.frame_b.f[3] + wheelSet.wheelSetJoint.revolute1.frame_a.f[3] = 0.0;
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.w[1] = wheelSet.wheelSetJoint.rod1.frame_b.R.w[1];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.w[2] = wheelSet.wheelSetJoint.rod1.frame_b.R.w[2];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.w[3] = wheelSet.wheelSetJoint.rod1.frame_b.R.w[3];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[1,1] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,1];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[1,2] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,2];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[1,3] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[1,3];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[2,1] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,1];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[2,2] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,2];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[2,3] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[2,3];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[3,1] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,1];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[3,2] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,2];
//   wheelSet.wheelSetJoint.revolute1.frame_a.R.T[3,3] = wheelSet.wheelSetJoint.rod1.frame_b.R.T[3,3];
//   wheelSet.wheelSetJoint.revolute1.frame_a.r_0[1] = wheelSet.wheelSetJoint.rod1.frame_b.r_0[1];
//   wheelSet.wheelSetJoint.revolute1.frame_a.r_0[2] = wheelSet.wheelSetJoint.rod1.frame_b.r_0[2];
//   wheelSet.wheelSetJoint.revolute1.frame_a.r_0[3] = wheelSet.wheelSetJoint.rod1.frame_b.r_0[3];
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[1] + (-wheelSet.wheelSetJoint.mounting1D.frame_a.t[1]) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[2] + (-wheelSet.wheelSetJoint.mounting1D.frame_a.t[2]) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.t[3] + (-wheelSet.wheelSetJoint.mounting1D.frame_a.t[3]) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[1] + (-wheelSet.wheelSetJoint.mounting1D.frame_a.f[1]) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[2] + (-wheelSet.wheelSetJoint.mounting1D.frame_a.f[2]) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.housing.frame_a.f[3] + (-wheelSet.wheelSetJoint.mounting1D.frame_a.f[3]) = 0.0;
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[1] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.w[1];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[2] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.w[2];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.w[3] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.w[3];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,1] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[1,1];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,2] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[1,2];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[1,3] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[1,3];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,1] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[2,1];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,2] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[2,2];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[2,3] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[2,3];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,1] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[3,1];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,2] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[3,2];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.R.T[3,3] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.R.T[3,3];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[1] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.r_0[1];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[2] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.r_0[2];
//   wheelSet.wheelSetJoint.mounting1D.frame_a.r_0[3] = wheelSet.wheelSetJoint.mounting1D.housing.frame_a.r_0[3];
//   wheelSet.wheelSetJoint.revolute2.internalAxis.flange.tau + (-wheelSet.wheelSetJoint.revolute2.axis.tau) = 0.0;
//   wheelSet.wheelSetJoint.revolute2.axis.phi = wheelSet.wheelSetJoint.revolute2.internalAxis.flange.phi;
//   wheelSet.wheelSetJoint.revolute2.fixed.flange.tau + (-wheelSet.wheelSetJoint.revolute2.support.tau) = 0.0;
//   wheelSet.wheelSetJoint.revolute2.fixed.flange.phi = wheelSet.wheelSetJoint.revolute2.support.phi;
//   wheelSet.wheelSetJoint.revolute2.support.tau = 0.0;
//   wheelSet.wheelSetJoint.revolute1.internalAxis.flange.tau + (-wheelSet.wheelSetJoint.revolute1.axis.tau) = 0.0;
//   wheelSet.wheelSetJoint.revolute1.axis.phi = wheelSet.wheelSetJoint.revolute1.internalAxis.flange.phi;
//   wheelSet.wheelSetJoint.revolute1.fixed.flange.tau + (-wheelSet.wheelSetJoint.revolute1.support.tau) = 0.0;
//   wheelSet.wheelSetJoint.revolute1.fixed.flange.phi = wheelSet.wheelSetJoint.revolute1.support.phi;
//   wheelSet.wheelSetJoint.revolute1.support.tau = 0.0;
//   wheelSet.wheelSetJoint.revolute.constantTorque.flange.tau + wheelSet.wheelSetJoint.revolute.internalAxis.flange.tau = 0.0;
//   wheelSet.wheelSetJoint.revolute.constantTorque.flange.phi = wheelSet.wheelSetJoint.revolute.internalAxis.flange.phi;
//   wheelSet.wheelSetJoint.revolute.fixed.flange.tau = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.constantForce.flange.f + wheelSet.wheelSetJoint.prismatic2.internalAxis.flange.f = 0.0;
//   wheelSet.wheelSetJoint.prismatic2.constantForce.flange.s = wheelSet.wheelSetJoint.prismatic2.internalAxis.flange.s;
//   wheelSet.wheelSetJoint.prismatic2.fixed.flange.f = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.constantForce.flange.f + wheelSet.wheelSetJoint.prismatic1.internalAxis.flange.f = 0.0;
//   wheelSet.wheelSetJoint.prismatic1.constantForce.flange.s = wheelSet.wheelSetJoint.prismatic1.internalAxis.flange.s;
//   wheelSet.wheelSetJoint.prismatic1.fixed.flange.f = 0.0;
//   wheelSet.frame2.t[3] = 0.0;
//   wheelSet.frame2.t[2] = 0.0;
//   wheelSet.frame2.t[1] = 0.0;
//   wheelSet.frame2.f[3] = 0.0;
//   wheelSet.frame2.f[2] = 0.0;
//   wheelSet.frame2.f[1] = 0.0;
//   wheelSet.frame1.t[3] = 0.0;
//   wheelSet.frame1.t[2] = 0.0;
//   wheelSet.frame1.t[1] = 0.0;
//   wheelSet.frame1.f[3] = 0.0;
//   wheelSet.frame1.f[2] = 0.0;
//   wheelSet.frame1.f[1] = 0.0;
//   ground.fixed.frame_b.t[1] + ground.ground.frame_a.t[1] = 0.0;
//   ground.fixed.frame_b.t[2] + ground.ground.frame_a.t[2] = 0.0;
//   ground.fixed.frame_b.t[3] + ground.ground.frame_a.t[3] = 0.0;
//   ground.fixed.frame_b.f[1] + ground.ground.frame_a.f[1] = 0.0;
//   ground.fixed.frame_b.f[2] + ground.ground.frame_a.f[2] = 0.0;
//   ground.fixed.frame_b.f[3] + ground.ground.frame_a.f[3] = 0.0;
//   ground.fixed.frame_b.R.w[1] = ground.ground.frame_a.R.w[1];
//   ground.fixed.frame_b.R.w[2] = ground.ground.frame_a.R.w[2];
//   ground.fixed.frame_b.R.w[3] = ground.ground.frame_a.R.w[3];
//   ground.fixed.frame_b.R.T[1,1] = ground.ground.frame_a.R.T[1,1];
//   ground.fixed.frame_b.R.T[1,2] = ground.ground.frame_a.R.T[1,2];
//   ground.fixed.frame_b.R.T[1,3] = ground.ground.frame_a.R.T[1,3];
//   ground.fixed.frame_b.R.T[2,1] = ground.ground.frame_a.R.T[2,1];
//   ground.fixed.frame_b.R.T[2,2] = ground.ground.frame_a.R.T[2,2];
//   ground.fixed.frame_b.R.T[2,3] = ground.ground.frame_a.R.T[2,3];
//   ground.fixed.frame_b.R.T[3,1] = ground.ground.frame_a.R.T[3,1];
//   ground.fixed.frame_b.R.T[3,2] = ground.ground.frame_a.R.T[3,2];
//   ground.fixed.frame_b.R.T[3,3] = ground.ground.frame_a.R.T[3,3];
//   ground.fixed.frame_b.r_0[1] = ground.ground.frame_a.r_0[1];
//   ground.fixed.frame_b.r_0[2] = ground.ground.frame_a.r_0[2];
//   ground.fixed.frame_b.r_0[3] = ground.ground.frame_a.r_0[3];
//   world.frame_b.t[3] = 0.0;
//   world.frame_b.t[2] = 0.0;
//   world.frame_b.t[1] = 0.0;
//   world.frame_b.f[3] = 0.0;
//   world.frame_b.f[2] = 0.0;
//   world.frame_b.f[1] = 0.0;
// end Modelica.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.Examples.Elementary.RollingWheelSetDriving has 2587 equation(s) and 2587 variable(s).
// 1673 of these are trivial equation(s).
// "
// ""
// 0
// endResult
