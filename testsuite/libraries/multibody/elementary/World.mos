// name:     Modelica3.x.Mechanics.MultiBody.World
// keywords: multibody, balancing, instantiation
// status:   correct
// teardown_command: rm -f *.so *.dll *.log *.c* *.makefile *.libs
// 
//  Modelica MultiBody 3.x: instantiation and balance checking of the World object 
//

loadFile("_ElementaryTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.World);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.World);
getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length "Inline before index reduction"
//   input Real[:] v "Vector";
//   output Real result "Length of vector v";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize "Inline before index reduction"
//   input Real[:] v "Vector";
//   input Real eps = 1e-13 "if |v| < eps then result = v/eps";
//   output Real[size(v,1)] result "Input vector v normalized to length=1";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation "Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation"
// input Real[3, 3] T;
// input Real(quantity="AngularVelocity", unit="rad/s")[3] w;
// output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation "Inline before index reduction"
//   input Real[3, 3] T1 "Orientation object to rotate frame 0 into frame 1";
//   input Real[3, 3] T_rel "Orientation object to rotate frame 1 into frame 2";
//   output Real[3, 3] T2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy
//   input Real[3] n_x(unit = "1") "Vector in direction of x-axis of frame 2, resolved in frame 1";
//   input Real[3] n_y(unit = "1") "Vector in direction of y-axis of frame 2, resolved in frame 1";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = "1") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = "1") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = "1") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
//   protected Real[3] e_z_aux(unit = "1") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = "1") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1 "Inline before index reduction"
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation "Inline before index reduction"
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object such that frame 1 and frame 2 are identical";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial "Inline before index reduction"
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape "Inline before index reduction"
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// class Modelica.Mechanics.MultiBody.World
//   Real frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean enableAnimation = true "= true, if animation of all components is enabled";
//   parameter Boolean animateWorld = true "= true, if world coordinate system shall be visualized";
//   parameter Boolean animateGravity = true "= true, if gravity field shall be visualized (acceleration vector or field center)";
//   parameter String label1 = "x" "Label of horizontal axis in icon";
//   parameter String label2 = "y" "Label of vertical axis in icon";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity "Type of gravity field";
//   parameter Real g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Constant gravity acceleration";
//   parameter Real n[1](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real n[2](unit = "1") = -1.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real n[3](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real mue(unit = "m3/s2", min = 0.0) = 398600000000000.0 "Gravity field constant (default = field constant of earth)";
//   parameter Boolean driveTrainMechanics3D = true "= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account";
//   parameter Real axisLength(quantity = "Length", unit = "m", min = 0.0) = nominalLength / 2.0 "Length of world axes arrows";
//   parameter Real axisDiameter(quantity = "Length", unit = "m", min = 0.0) = axisLength / defaultFrameDiameterFraction "Diameter of world axes arrows";
//   parameter Boolean axisShowLabels = true "= true, if labels shall be shown";
//   input Integer axisColor_x[1](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer axisColor_x[2](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer axisColor_x[3](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer axisColor_y[1](min = 0, max = 255) = axisColor_x[1];
//   input Integer axisColor_y[2](min = 0, max = 255) = axisColor_x[2];
//   input Integer axisColor_y[3](min = 0, max = 255) = axisColor_x[3];
//   input Integer axisColor_z[1](min = 0, max = 255) = axisColor_x[1] "Color of z-arrow";
//   input Integer axisColor_z[2](min = 0, max = 255) = axisColor_x[2] "Color of z-arrow";
//   input Integer axisColor_z[3](min = 0, max = 255) = axisColor_x[3] "Color of z-arrow";
//   parameter Real gravityArrowTail[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real gravityArrowTail[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real gravityArrowTail[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real gravityArrowLength(quantity = "Length", unit = "m") = axisLength / 2.0 "Length of gravity arrow";
//   parameter Real gravityArrowDiameter(quantity = "Length", unit = "m", min = 0.0) = gravityArrowLength / defaultWidthFraction "Diameter of gravity arrow";
//   input Integer gravityArrowColor[1](min = 0, max = 255) = 0 "Color of gravity arrow";
//   input Integer gravityArrowColor[2](min = 0, max = 255) = 230 "Color of gravity arrow";
//   input Integer gravityArrowColor[3](min = 0, max = 255) = 0 "Color of gravity arrow";
//   parameter Real gravitySphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 12742000.0 "Diameter of sphere representing gravity center (default = mean diameter of earth)";
//   input Integer gravitySphereColor[1](min = 0, max = 255) = 0 "Color of gravity sphere";
//   input Integer gravitySphereColor[2](min = 0, max = 255) = 230 "Color of gravity sphere";
//   input Integer gravitySphereColor[3](min = 0, max = 255) = 0 "Color of gravity sphere";
//   parameter Real nominalLength(quantity = "Length", unit = "m") = 1.0 "\"Nominal\" length of multi-body system";
//   parameter Real defaultAxisLength(quantity = "Length", unit = "m") = nominalLength / 5.0 "Default for length of a frame axis (but not world frame)";
//   parameter Real defaultJointLength(quantity = "Length", unit = "m") = nominalLength / 10.0 "Default for the fixed length of a shape representing a joint";
//   parameter Real defaultJointWidth(quantity = "Length", unit = "m") = nominalLength / 20.0 "Default for the fixed width of a shape representing a joint";
//   parameter Real defaultForceLength(quantity = "Length", unit = "m") = nominalLength / 10.0 "Default for the fixed length of a shape representing a force (e.g. damper)";
//   parameter Real defaultForceWidth(quantity = "Length", unit = "m") = nominalLength / 20.0 "Default for the fixed width of a shape represening a force (e.g. spring, bushing)";
//   parameter Real defaultBodyDiameter(quantity = "Length", unit = "m") = nominalLength / 9.0 "Default for diameter of sphere representing the center of mass of a body";
//   parameter Real defaultWidthFraction = 20.0 "Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)";
//   parameter Real defaultArrowDiameter(quantity = "Length", unit = "m") = nominalLength / 40.0 "Default for arrow diameter (e.g., of forces, torques, sensors)";
//   parameter Real defaultFrameDiameterFraction = 40.0 "Default for arrow diameter of a coordinate system as a fraction of axis length";
//   parameter Real defaultSpecularCoefficient(min = 0.0) = 0.7 "Default reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real defaultN_to_m(unit = "N/m", min = 0.0) = 1000.0 "Default scaling of force arrows (length = force/defaultN_to_m)";
//   parameter Real defaultNm_to_m(unit = "N.m/m", min = 0.0) = 1000.0 "Default scaling of torque arrows (length = torque/defaultNm_to_m)";
//   protected parameter Integer ndim = if enableAnimation AND animateWorld then 1 else 0;
//   protected parameter Integer ndim2 = if enableAnimation AND animateWorld AND axisShowLabels then 1 else 0;
//   protected parameter Real headLength(quantity = "Length", unit = "m") = min(axisLength,5.0 * axisDiameter);
//   protected parameter Real headWidth(quantity = "Length", unit = "m") = 3.0 * axisDiameter;
//   protected parameter Real lineLength(quantity = "Length", unit = "m") = max(0.0,axisLength - headLength);
//   protected parameter Real lineWidth(quantity = "Length", unit = "m") = axisDiameter;
//   protected parameter Real scaledLabel(quantity = "Length", unit = "m") = 3.0 * axisDiameter;
//   protected parameter Real labelStart(quantity = "Length", unit = "m") = 1.05 * axisLength;
//   protected parameter Real gravityHeadLength(quantity = "Length", unit = "m") = min(gravityArrowLength,4.0 * gravityArrowDiameter);
//   protected parameter Real gravityHeadWidth(quantity = "Length", unit = "m") = 3.0 * gravityArrowDiameter;
//   protected parameter Real gravityLineLength(quantity = "Length", unit = "m") = max(0.0,gravityArrowLength - gravityHeadLength);
//   protected parameter Integer ndim_pointGravity = if enableAnimation AND animateGravity AND gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter String x_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real x_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_arrowLine.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real x_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real x_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real x_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real x_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_arrowLine.length(quantity = "Length", unit = "m") = lineLength "Length of visual object";
//   input Real x_arrowLine.width(quantity = "Length", unit = "m") = lineWidth "Width of visual object";
//   input Real x_arrowLine.height(quantity = "Length", unit = "m") = lineWidth "Height of visual object";
//   input Real x_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real x_arrowLine.color[1] = Real(axisColor_x[1]) "Color of shape";
//   input Real x_arrowLine.color[2] = Real(axisColor_x[2]) "Color of shape";
//   input Real x_arrowLine.color[3] = Real(axisColor_x[3]) "Color of shape";
//   input Real x_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real x_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({x_arrowLine.lengthDirection[1],x_arrowLine.lengthDirection[2],x_arrowLine.lengthDirection[3]});
//   protected Real x_arrowLine.e_x[1](unit = "1") = if noEvent(x_arrowLine.abs_n_x < 1e-10) then 1.0 else x_arrowLine.lengthDirection[1] / x_arrowLine.abs_n_x;
//   protected Real x_arrowLine.e_x[2](unit = "1") = if noEvent(x_arrowLine.abs_n_x < 1e-10) then 0.0 else x_arrowLine.lengthDirection[2] / x_arrowLine.abs_n_x;
//   protected Real x_arrowLine.e_x[3](unit = "1") = if noEvent(x_arrowLine.abs_n_x < 1e-10) then 0.0 else x_arrowLine.lengthDirection[3] / x_arrowLine.abs_n_x;
//   protected Real x_arrowLine.n_z_aux[1](unit = "1") = x_arrowLine.e_x[2] * x_arrowLine.widthDirection[3] - x_arrowLine.e_x[3] * x_arrowLine.widthDirection[2];
//   protected Real x_arrowLine.n_z_aux[2](unit = "1") = x_arrowLine.e_x[3] * x_arrowLine.widthDirection[1] - x_arrowLine.e_x[1] * x_arrowLine.widthDirection[3];
//   protected Real x_arrowLine.n_z_aux[3](unit = "1") = x_arrowLine.e_x[1] * x_arrowLine.widthDirection[2] - x_arrowLine.e_x[2] * x_arrowLine.widthDirection[1];
//   protected Real x_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_arrowLine.e_x[1],x_arrowLine.e_x[2],x_arrowLine.e_x[3]},if noEvent(x_arrowLine.n_z_aux[1] ^ 2.0 + (x_arrowLine.n_z_aux[2] ^ 2.0 + x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {x_arrowLine.widthDirection[1],x_arrowLine.widthDirection[2],x_arrowLine.widthDirection[3]} else if noEvent(abs(x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_arrowLine.e_x[1],x_arrowLine.e_x[2],x_arrowLine.e_x[3]})[1];
//   protected Real x_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_arrowLine.e_x[1],x_arrowLine.e_x[2],x_arrowLine.e_x[3]},if noEvent(x_arrowLine.n_z_aux[1] ^ 2.0 + (x_arrowLine.n_z_aux[2] ^ 2.0 + x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {x_arrowLine.widthDirection[1],x_arrowLine.widthDirection[2],x_arrowLine.widthDirection[3]} else if noEvent(abs(x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_arrowLine.e_x[1],x_arrowLine.e_x[2],x_arrowLine.e_x[3]})[2];
//   protected Real x_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_arrowLine.e_x[1],x_arrowLine.e_x[2],x_arrowLine.e_x[3]},if noEvent(x_arrowLine.n_z_aux[1] ^ 2.0 + (x_arrowLine.n_z_aux[2] ^ 2.0 + x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {x_arrowLine.widthDirection[1],x_arrowLine.widthDirection[2],x_arrowLine.widthDirection[3]} else if noEvent(abs(x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_arrowLine.e_x[1],x_arrowLine.e_x[2],x_arrowLine.e_x[3]})[3];
//   protected output Real x_arrowLine.Form;
//   output Real x_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real x_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_arrowLine.Material;
//   protected output Real x_arrowLine.Extra;
//   parameter String x_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real x_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_arrowHead.r[1](quantity = "Length", unit = "m") = lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_arrowHead.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real x_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real x_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real x_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real x_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_arrowHead.length(quantity = "Length", unit = "m") = headLength "Length of visual object";
//   input Real x_arrowHead.width(quantity = "Length", unit = "m") = headWidth "Width of visual object";
//   input Real x_arrowHead.height(quantity = "Length", unit = "m") = headWidth "Height of visual object";
//   input Real x_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real x_arrowHead.color[1] = Real(axisColor_x[1]) "Color of shape";
//   input Real x_arrowHead.color[2] = Real(axisColor_x[2]) "Color of shape";
//   input Real x_arrowHead.color[3] = Real(axisColor_x[3]) "Color of shape";
//   input Real x_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real x_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({x_arrowHead.lengthDirection[1],x_arrowHead.lengthDirection[2],x_arrowHead.lengthDirection[3]});
//   protected Real x_arrowHead.e_x[1](unit = "1") = if noEvent(x_arrowHead.abs_n_x < 1e-10) then 1.0 else x_arrowHead.lengthDirection[1] / x_arrowHead.abs_n_x;
//   protected Real x_arrowHead.e_x[2](unit = "1") = if noEvent(x_arrowHead.abs_n_x < 1e-10) then 0.0 else x_arrowHead.lengthDirection[2] / x_arrowHead.abs_n_x;
//   protected Real x_arrowHead.e_x[3](unit = "1") = if noEvent(x_arrowHead.abs_n_x < 1e-10) then 0.0 else x_arrowHead.lengthDirection[3] / x_arrowHead.abs_n_x;
//   protected Real x_arrowHead.n_z_aux[1](unit = "1") = x_arrowHead.e_x[2] * x_arrowHead.widthDirection[3] - x_arrowHead.e_x[3] * x_arrowHead.widthDirection[2];
//   protected Real x_arrowHead.n_z_aux[2](unit = "1") = x_arrowHead.e_x[3] * x_arrowHead.widthDirection[1] - x_arrowHead.e_x[1] * x_arrowHead.widthDirection[3];
//   protected Real x_arrowHead.n_z_aux[3](unit = "1") = x_arrowHead.e_x[1] * x_arrowHead.widthDirection[2] - x_arrowHead.e_x[2] * x_arrowHead.widthDirection[1];
//   protected Real x_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_arrowHead.e_x[1],x_arrowHead.e_x[2],x_arrowHead.e_x[3]},if noEvent(x_arrowHead.n_z_aux[1] ^ 2.0 + (x_arrowHead.n_z_aux[2] ^ 2.0 + x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {x_arrowHead.widthDirection[1],x_arrowHead.widthDirection[2],x_arrowHead.widthDirection[3]} else if noEvent(abs(x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_arrowHead.e_x[1],x_arrowHead.e_x[2],x_arrowHead.e_x[3]})[1];
//   protected Real x_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_arrowHead.e_x[1],x_arrowHead.e_x[2],x_arrowHead.e_x[3]},if noEvent(x_arrowHead.n_z_aux[1] ^ 2.0 + (x_arrowHead.n_z_aux[2] ^ 2.0 + x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {x_arrowHead.widthDirection[1],x_arrowHead.widthDirection[2],x_arrowHead.widthDirection[3]} else if noEvent(abs(x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_arrowHead.e_x[1],x_arrowHead.e_x[2],x_arrowHead.e_x[3]})[2];
//   protected Real x_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_arrowHead.e_x[1],x_arrowHead.e_x[2],x_arrowHead.e_x[3]},if noEvent(x_arrowHead.n_z_aux[1] ^ 2.0 + (x_arrowHead.n_z_aux[2] ^ 2.0 + x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {x_arrowHead.widthDirection[1],x_arrowHead.widthDirection[2],x_arrowHead.widthDirection[3]} else if noEvent(abs(x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_arrowHead.e_x[1],x_arrowHead.e_x[2],x_arrowHead.e_x[3]})[3];
//   protected output Real x_arrowHead.Form;
//   output Real x_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real x_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_arrowHead.Material;
//   protected output Real x_arrowHead.Extra;
//   input Real x_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real x_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.r_lines[1](quantity = "Length", unit = "m") = labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real x_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real x_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real x_label.n_x[1](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real x_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real x_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real x_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real x_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real x_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real x_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[1,2,1](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[1,2,2](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[2,1,2](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[2,2,1](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real x_label.diameter(quantity = "Length", unit = "m", min = 0.0) = axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer x_label.color[1](min = 0, max = 255) = axisColor_x[1] "Color of cylinders";
//   input Integer x_label.color[2](min = 0, max = 255) = axisColor_x[2] "Color of cylinders";
//   input Integer x_label.color[3](min = 0, max = 255) = axisColor_x[3] "Color of cylinders";
//   input Real x_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer x_label.n = 2 "Number of cylinders";
//   protected Real x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[1][1];
//   protected Real x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[1][2];
//   protected Real x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[1][3];
//   protected Real x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[2][1];
//   protected Real x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[2][2];
//   protected Real x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[2][3];
//   protected Real x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[3][1];
//   protected Real x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[3][2];
//   protected Real x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({x_label.n_x[1],x_label.n_x[2],x_label.n_x[3]},{x_label.n_y[1],x_label.n_y[2],x_label.n_y[3]})[3][3];
//   protected Real x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[1][1];
//   protected Real x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[1][2];
//   protected Real x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[1][3];
//   protected Real x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[2][1];
//   protected Real x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[2][2];
//   protected Real x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[2][3];
//   protected Real x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[3][1];
//   protected Real x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[3][2];
//   protected Real x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}})[3][3];
//   protected Real x_label.r_abs[1](quantity = "Length", unit = "m") = x_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{x_label.r_lines[1],x_label.r_lines[2],x_label.r_lines[3]})[1];
//   protected Real x_label.r_abs[2](quantity = "Length", unit = "m") = x_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{x_label.r_lines[1],x_label.r_lines[2],x_label.r_lines[3]})[2];
//   protected Real x_label.r_abs[3](quantity = "Length", unit = "m") = x_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R.T[1,1],x_label.R.T[1,2],x_label.R.T[1,3]},{x_label.R.T[2,1],x_label.R.T[2,2],x_label.R.T[2,3]},{x_label.R.T[3,1],x_label.R.T[3,2],x_label.R.T[3,3]}},{x_label.r_lines[1],x_label.r_lines[2],x_label.r_lines[3]})[3];
//   parameter String x_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real x_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.cylinders[1].r[1](quantity = "Length", unit = "m") = x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_lines[1,1],x_label.R_lines[1,2],x_label.R_lines[1,3]},{x_label.R_lines[2,1],x_label.R_lines[2,2],x_label.R_lines[2,3]},{x_label.R_lines[3,1],x_label.R_lines[3,2],x_label.R_lines[3,3]}},{x_label.lines[1,1,1],x_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.cylinders[1].r[2](quantity = "Length", unit = "m") = x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_lines[1,1],x_label.R_lines[1,2],x_label.R_lines[1,3]},{x_label.R_lines[2,1],x_label.R_lines[2,2],x_label.R_lines[2,3]},{x_label.R_lines[3,1],x_label.R_lines[3,2],x_label.R_lines[3,3]}},{x_label.lines[1,1,1],x_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.cylinders[1].r[3](quantity = "Length", unit = "m") = x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_lines[1,1],x_label.R_lines[1,2],x_label.R_lines[1,3]},{x_label.R_lines[2,1],x_label.R_lines[2,2],x_label.R_lines[2,3]},{x_label.R_lines[3,1],x_label.R_lines[3,2],x_label.R_lines[3,3]}},{x_label.lines[1,1,1],x_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}},{x_label.lines[1,2,1] - x_label.lines[1,1,1],x_label.lines[1,2,2] - x_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real x_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}},{x_label.lines[1,2,1] - x_label.lines[1,1,1],x_label.lines[1,2,2] - x_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real x_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}},{x_label.lines[1,2,1] - x_label.lines[1,1,1],x_label.lines[1,2,2] - x_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real x_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real x_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({x_label.lines[1,2,1] - x_label.lines[1,1,1],x_label.lines[1,2,2] - x_label.lines[1,1,2]}) "Length of visual object";
//   input Real x_label.cylinders[1].width(quantity = "Length", unit = "m") = x_label.diameter "Width of visual object";
//   input Real x_label.cylinders[1].height(quantity = "Length", unit = "m") = x_label.diameter "Height of visual object";
//   input Real x_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real x_label.cylinders[1].color[1] = Real(x_label.color[1]) "Color of shape";
//   input Real x_label.cylinders[1].color[2] = Real(x_label.color[2]) "Color of shape";
//   input Real x_label.cylinders[1].color[3] = Real(x_label.color[3]) "Color of shape";
//   input Real x_label.cylinders[1].specularCoefficient = x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real x_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({x_label.cylinders[1].lengthDirection[1],x_label.cylinders[1].lengthDirection[2],x_label.cylinders[1].lengthDirection[3]});
//   protected Real x_label.cylinders[1].e_x[1](unit = "1") = if noEvent(x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else x_label.cylinders[1].lengthDirection[1] / x_label.cylinders[1].abs_n_x;
//   protected Real x_label.cylinders[1].e_x[2](unit = "1") = if noEvent(x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else x_label.cylinders[1].lengthDirection[2] / x_label.cylinders[1].abs_n_x;
//   protected Real x_label.cylinders[1].e_x[3](unit = "1") = if noEvent(x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else x_label.cylinders[1].lengthDirection[3] / x_label.cylinders[1].abs_n_x;
//   protected Real x_label.cylinders[1].n_z_aux[1](unit = "1") = x_label.cylinders[1].e_x[2] * x_label.cylinders[1].widthDirection[3] - x_label.cylinders[1].e_x[3] * x_label.cylinders[1].widthDirection[2];
//   protected Real x_label.cylinders[1].n_z_aux[2](unit = "1") = x_label.cylinders[1].e_x[3] * x_label.cylinders[1].widthDirection[1] - x_label.cylinders[1].e_x[1] * x_label.cylinders[1].widthDirection[3];
//   protected Real x_label.cylinders[1].n_z_aux[3](unit = "1") = x_label.cylinders[1].e_x[1] * x_label.cylinders[1].widthDirection[2] - x_label.cylinders[1].e_x[2] * x_label.cylinders[1].widthDirection[1];
//   protected Real x_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_label.cylinders[1].e_x[1],x_label.cylinders[1].e_x[2],x_label.cylinders[1].e_x[3]},if noEvent(x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (x_label.cylinders[1].n_z_aux[2] ^ 2.0 + x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {x_label.cylinders[1].widthDirection[1],x_label.cylinders[1].widthDirection[2],x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_label.cylinders[1].e_x[1],x_label.cylinders[1].e_x[2],x_label.cylinders[1].e_x[3]})[1];
//   protected Real x_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_label.cylinders[1].e_x[1],x_label.cylinders[1].e_x[2],x_label.cylinders[1].e_x[3]},if noEvent(x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (x_label.cylinders[1].n_z_aux[2] ^ 2.0 + x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {x_label.cylinders[1].widthDirection[1],x_label.cylinders[1].widthDirection[2],x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_label.cylinders[1].e_x[1],x_label.cylinders[1].e_x[2],x_label.cylinders[1].e_x[3]})[2];
//   protected Real x_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_label.cylinders[1].e_x[1],x_label.cylinders[1].e_x[2],x_label.cylinders[1].e_x[3]},if noEvent(x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (x_label.cylinders[1].n_z_aux[2] ^ 2.0 + x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {x_label.cylinders[1].widthDirection[1],x_label.cylinders[1].widthDirection[2],x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_label.cylinders[1].e_x[1],x_label.cylinders[1].e_x[2],x_label.cylinders[1].e_x[3]})[3];
//   protected output Real x_label.cylinders[1].Form;
//   output Real x_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real x_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_label.cylinders[1].Material;
//   protected output Real x_label.cylinders[1].Extra;
//   parameter String x_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real x_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real x_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real x_label.cylinders[2].r[1](quantity = "Length", unit = "m") = x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_lines[1,1],x_label.R_lines[1,2],x_label.R_lines[1,3]},{x_label.R_lines[2,1],x_label.R_lines[2,2],x_label.R_lines[2,3]},{x_label.R_lines[3,1],x_label.R_lines[3,2],x_label.R_lines[3,3]}},{x_label.lines[2,1,1],x_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.cylinders[2].r[2](quantity = "Length", unit = "m") = x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_lines[1,1],x_label.R_lines[1,2],x_label.R_lines[1,3]},{x_label.R_lines[2,1],x_label.R_lines[2,2],x_label.R_lines[2,3]},{x_label.R_lines[3,1],x_label.R_lines[3,2],x_label.R_lines[3,3]}},{x_label.lines[2,1,1],x_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.cylinders[2].r[3](quantity = "Length", unit = "m") = x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_lines[1,1],x_label.R_lines[1,2],x_label.R_lines[1,3]},{x_label.R_lines[2,1],x_label.R_lines[2,2],x_label.R_lines[2,3]},{x_label.R_lines[3,1],x_label.R_lines[3,2],x_label.R_lines[3,3]}},{x_label.lines[2,1,1],x_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real x_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real x_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}},{x_label.lines[2,2,1] - x_label.lines[2,1,1],x_label.lines[2,2,2] - x_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real x_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}},{x_label.lines[2,2,1] - x_label.lines[2,1,1],x_label.lines[2,2,2] - x_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real x_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.R_rel[1,1],x_label.R_rel[1,2],x_label.R_rel[1,3]},{x_label.R_rel[2,1],x_label.R_rel[2,2],x_label.R_rel[2,3]},{x_label.R_rel[3,1],x_label.R_rel[3,2],x_label.R_rel[3,3]}},{x_label.lines[2,2,1] - x_label.lines[2,1,1],x_label.lines[2,2,2] - x_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real x_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real x_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real x_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({x_label.lines[2,2,1] - x_label.lines[2,1,1],x_label.lines[2,2,2] - x_label.lines[2,1,2]}) "Length of visual object";
//   input Real x_label.cylinders[2].width(quantity = "Length", unit = "m") = x_label.diameter "Width of visual object";
//   input Real x_label.cylinders[2].height(quantity = "Length", unit = "m") = x_label.diameter "Height of visual object";
//   input Real x_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real x_label.cylinders[2].color[1] = Real(x_label.color[1]) "Color of shape";
//   input Real x_label.cylinders[2].color[2] = Real(x_label.color[2]) "Color of shape";
//   input Real x_label.cylinders[2].color[3] = Real(x_label.color[3]) "Color of shape";
//   input Real x_label.cylinders[2].specularCoefficient = x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real x_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({x_label.cylinders[2].lengthDirection[1],x_label.cylinders[2].lengthDirection[2],x_label.cylinders[2].lengthDirection[3]});
//   protected Real x_label.cylinders[2].e_x[1](unit = "1") = if noEvent(x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else x_label.cylinders[2].lengthDirection[1] / x_label.cylinders[2].abs_n_x;
//   protected Real x_label.cylinders[2].e_x[2](unit = "1") = if noEvent(x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else x_label.cylinders[2].lengthDirection[2] / x_label.cylinders[2].abs_n_x;
//   protected Real x_label.cylinders[2].e_x[3](unit = "1") = if noEvent(x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else x_label.cylinders[2].lengthDirection[3] / x_label.cylinders[2].abs_n_x;
//   protected Real x_label.cylinders[2].n_z_aux[1](unit = "1") = x_label.cylinders[2].e_x[2] * x_label.cylinders[2].widthDirection[3] - x_label.cylinders[2].e_x[3] * x_label.cylinders[2].widthDirection[2];
//   protected Real x_label.cylinders[2].n_z_aux[2](unit = "1") = x_label.cylinders[2].e_x[3] * x_label.cylinders[2].widthDirection[1] - x_label.cylinders[2].e_x[1] * x_label.cylinders[2].widthDirection[3];
//   protected Real x_label.cylinders[2].n_z_aux[3](unit = "1") = x_label.cylinders[2].e_x[1] * x_label.cylinders[2].widthDirection[2] - x_label.cylinders[2].e_x[2] * x_label.cylinders[2].widthDirection[1];
//   protected Real x_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_label.cylinders[2].e_x[1],x_label.cylinders[2].e_x[2],x_label.cylinders[2].e_x[3]},if noEvent(x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (x_label.cylinders[2].n_z_aux[2] ^ 2.0 + x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {x_label.cylinders[2].widthDirection[1],x_label.cylinders[2].widthDirection[2],x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_label.cylinders[2].e_x[1],x_label.cylinders[2].e_x[2],x_label.cylinders[2].e_x[3]})[1];
//   protected Real x_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_label.cylinders[2].e_x[1],x_label.cylinders[2].e_x[2],x_label.cylinders[2].e_x[3]},if noEvent(x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (x_label.cylinders[2].n_z_aux[2] ^ 2.0 + x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {x_label.cylinders[2].widthDirection[1],x_label.cylinders[2].widthDirection[2],x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_label.cylinders[2].e_x[1],x_label.cylinders[2].e_x[2],x_label.cylinders[2].e_x[3]})[2];
//   protected Real x_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({x_label.cylinders[2].e_x[1],x_label.cylinders[2].e_x[2],x_label.cylinders[2].e_x[3]},if noEvent(x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (x_label.cylinders[2].n_z_aux[2] ^ 2.0 + x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {x_label.cylinders[2].widthDirection[1],x_label.cylinders[2].widthDirection[2],x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{x_label.cylinders[2].e_x[1],x_label.cylinders[2].e_x[2],x_label.cylinders[2].e_x[3]})[3];
//   protected output Real x_label.cylinders[2].Form;
//   output Real x_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real x_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real x_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real x_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real x_label.cylinders[2].Material;
//   protected output Real x_label.cylinders[2].Extra;
//   parameter String y_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real y_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real y_arrowLine.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real y_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real y_arrowLine.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real y_arrowLine.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_arrowLine.length(quantity = "Length", unit = "m") = lineLength "Length of visual object";
//   input Real y_arrowLine.width(quantity = "Length", unit = "m") = lineWidth "Width of visual object";
//   input Real y_arrowLine.height(quantity = "Length", unit = "m") = lineWidth "Height of visual object";
//   input Real y_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real y_arrowLine.color[1] = Real(axisColor_y[1]) "Color of shape";
//   input Real y_arrowLine.color[2] = Real(axisColor_y[2]) "Color of shape";
//   input Real y_arrowLine.color[3] = Real(axisColor_y[3]) "Color of shape";
//   input Real y_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real y_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({y_arrowLine.lengthDirection[1],y_arrowLine.lengthDirection[2],y_arrowLine.lengthDirection[3]});
//   protected Real y_arrowLine.e_x[1](unit = "1") = if noEvent(y_arrowLine.abs_n_x < 1e-10) then 1.0 else y_arrowLine.lengthDirection[1] / y_arrowLine.abs_n_x;
//   protected Real y_arrowLine.e_x[2](unit = "1") = if noEvent(y_arrowLine.abs_n_x < 1e-10) then 0.0 else y_arrowLine.lengthDirection[2] / y_arrowLine.abs_n_x;
//   protected Real y_arrowLine.e_x[3](unit = "1") = if noEvent(y_arrowLine.abs_n_x < 1e-10) then 0.0 else y_arrowLine.lengthDirection[3] / y_arrowLine.abs_n_x;
//   protected Real y_arrowLine.n_z_aux[1](unit = "1") = y_arrowLine.e_x[2] * y_arrowLine.widthDirection[3] - y_arrowLine.e_x[3] * y_arrowLine.widthDirection[2];
//   protected Real y_arrowLine.n_z_aux[2](unit = "1") = y_arrowLine.e_x[3] * y_arrowLine.widthDirection[1] - y_arrowLine.e_x[1] * y_arrowLine.widthDirection[3];
//   protected Real y_arrowLine.n_z_aux[3](unit = "1") = y_arrowLine.e_x[1] * y_arrowLine.widthDirection[2] - y_arrowLine.e_x[2] * y_arrowLine.widthDirection[1];
//   protected Real y_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_arrowLine.e_x[1],y_arrowLine.e_x[2],y_arrowLine.e_x[3]},if noEvent(y_arrowLine.n_z_aux[1] ^ 2.0 + (y_arrowLine.n_z_aux[2] ^ 2.0 + y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {y_arrowLine.widthDirection[1],y_arrowLine.widthDirection[2],y_arrowLine.widthDirection[3]} else if noEvent(abs(y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_arrowLine.e_x[1],y_arrowLine.e_x[2],y_arrowLine.e_x[3]})[1];
//   protected Real y_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_arrowLine.e_x[1],y_arrowLine.e_x[2],y_arrowLine.e_x[3]},if noEvent(y_arrowLine.n_z_aux[1] ^ 2.0 + (y_arrowLine.n_z_aux[2] ^ 2.0 + y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {y_arrowLine.widthDirection[1],y_arrowLine.widthDirection[2],y_arrowLine.widthDirection[3]} else if noEvent(abs(y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_arrowLine.e_x[1],y_arrowLine.e_x[2],y_arrowLine.e_x[3]})[2];
//   protected Real y_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_arrowLine.e_x[1],y_arrowLine.e_x[2],y_arrowLine.e_x[3]},if noEvent(y_arrowLine.n_z_aux[1] ^ 2.0 + (y_arrowLine.n_z_aux[2] ^ 2.0 + y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {y_arrowLine.widthDirection[1],y_arrowLine.widthDirection[2],y_arrowLine.widthDirection[3]} else if noEvent(abs(y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_arrowLine.e_x[1],y_arrowLine.e_x[2],y_arrowLine.e_x[3]})[3];
//   protected output Real y_arrowLine.Form;
//   output Real y_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real y_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_arrowLine.Material;
//   protected output Real y_arrowLine.Extra;
//   parameter String y_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real y_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_arrowHead.r[2](quantity = "Length", unit = "m") = lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real y_arrowHead.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real y_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real y_arrowHead.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real y_arrowHead.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_arrowHead.length(quantity = "Length", unit = "m") = headLength "Length of visual object";
//   input Real y_arrowHead.width(quantity = "Length", unit = "m") = headWidth "Width of visual object";
//   input Real y_arrowHead.height(quantity = "Length", unit = "m") = headWidth "Height of visual object";
//   input Real y_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real y_arrowHead.color[1] = Real(axisColor_y[1]) "Color of shape";
//   input Real y_arrowHead.color[2] = Real(axisColor_y[2]) "Color of shape";
//   input Real y_arrowHead.color[3] = Real(axisColor_y[3]) "Color of shape";
//   input Real y_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real y_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({y_arrowHead.lengthDirection[1],y_arrowHead.lengthDirection[2],y_arrowHead.lengthDirection[3]});
//   protected Real y_arrowHead.e_x[1](unit = "1") = if noEvent(y_arrowHead.abs_n_x < 1e-10) then 1.0 else y_arrowHead.lengthDirection[1] / y_arrowHead.abs_n_x;
//   protected Real y_arrowHead.e_x[2](unit = "1") = if noEvent(y_arrowHead.abs_n_x < 1e-10) then 0.0 else y_arrowHead.lengthDirection[2] / y_arrowHead.abs_n_x;
//   protected Real y_arrowHead.e_x[3](unit = "1") = if noEvent(y_arrowHead.abs_n_x < 1e-10) then 0.0 else y_arrowHead.lengthDirection[3] / y_arrowHead.abs_n_x;
//   protected Real y_arrowHead.n_z_aux[1](unit = "1") = y_arrowHead.e_x[2] * y_arrowHead.widthDirection[3] - y_arrowHead.e_x[3] * y_arrowHead.widthDirection[2];
//   protected Real y_arrowHead.n_z_aux[2](unit = "1") = y_arrowHead.e_x[3] * y_arrowHead.widthDirection[1] - y_arrowHead.e_x[1] * y_arrowHead.widthDirection[3];
//   protected Real y_arrowHead.n_z_aux[3](unit = "1") = y_arrowHead.e_x[1] * y_arrowHead.widthDirection[2] - y_arrowHead.e_x[2] * y_arrowHead.widthDirection[1];
//   protected Real y_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_arrowHead.e_x[1],y_arrowHead.e_x[2],y_arrowHead.e_x[3]},if noEvent(y_arrowHead.n_z_aux[1] ^ 2.0 + (y_arrowHead.n_z_aux[2] ^ 2.0 + y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {y_arrowHead.widthDirection[1],y_arrowHead.widthDirection[2],y_arrowHead.widthDirection[3]} else if noEvent(abs(y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_arrowHead.e_x[1],y_arrowHead.e_x[2],y_arrowHead.e_x[3]})[1];
//   protected Real y_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_arrowHead.e_x[1],y_arrowHead.e_x[2],y_arrowHead.e_x[3]},if noEvent(y_arrowHead.n_z_aux[1] ^ 2.0 + (y_arrowHead.n_z_aux[2] ^ 2.0 + y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {y_arrowHead.widthDirection[1],y_arrowHead.widthDirection[2],y_arrowHead.widthDirection[3]} else if noEvent(abs(y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_arrowHead.e_x[1],y_arrowHead.e_x[2],y_arrowHead.e_x[3]})[2];
//   protected Real y_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_arrowHead.e_x[1],y_arrowHead.e_x[2],y_arrowHead.e_x[3]},if noEvent(y_arrowHead.n_z_aux[1] ^ 2.0 + (y_arrowHead.n_z_aux[2] ^ 2.0 + y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {y_arrowHead.widthDirection[1],y_arrowHead.widthDirection[2],y_arrowHead.widthDirection[3]} else if noEvent(abs(y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_arrowHead.e_x[1],y_arrowHead.e_x[2],y_arrowHead.e_x[3]})[3];
//   protected output Real y_arrowHead.Form;
//   output Real y_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real y_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_arrowHead.Material;
//   protected output Real y_arrowHead.Extra;
//   input Real y_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real y_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real y_label.r_lines[2](quantity = "Length", unit = "m") = labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real y_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real y_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real y_label.n_x[2](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real y_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real y_label.n_y[1](unit = "1") = -1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real y_label.n_y[2](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real y_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real y_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[1,2,1](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[1,2,2](quantity = "Length", unit = "m") = 1.5 * scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[2,1,2](quantity = "Length", unit = "m") = 1.5 * scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[2,2,1](quantity = "Length", unit = "m") = 0.5 * scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.75 * scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real y_label.diameter(quantity = "Length", unit = "m", min = 0.0) = axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer y_label.color[1](min = 0, max = 255) = axisColor_y[1] "Color of cylinders";
//   input Integer y_label.color[2](min = 0, max = 255) = axisColor_y[2] "Color of cylinders";
//   input Integer y_label.color[3](min = 0, max = 255) = axisColor_y[3] "Color of cylinders";
//   input Real y_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer y_label.n = 2 "Number of cylinders";
//   protected Real y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[1][1];
//   protected Real y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[1][2];
//   protected Real y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[1][3];
//   protected Real y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[2][1];
//   protected Real y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[2][2];
//   protected Real y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[2][3];
//   protected Real y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[3][1];
//   protected Real y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[3][2];
//   protected Real y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({y_label.n_x[1],y_label.n_x[2],y_label.n_x[3]},{y_label.n_y[1],y_label.n_y[2],y_label.n_y[3]})[3][3];
//   protected Real y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[1][1];
//   protected Real y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[1][2];
//   protected Real y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[1][3];
//   protected Real y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[2][1];
//   protected Real y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[2][2];
//   protected Real y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[2][3];
//   protected Real y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[3][1];
//   protected Real y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[3][2];
//   protected Real y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}})[3][3];
//   protected Real y_label.r_abs[1](quantity = "Length", unit = "m") = y_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{y_label.r_lines[1],y_label.r_lines[2],y_label.r_lines[3]})[1];
//   protected Real y_label.r_abs[2](quantity = "Length", unit = "m") = y_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{y_label.r_lines[1],y_label.r_lines[2],y_label.r_lines[3]})[2];
//   protected Real y_label.r_abs[3](quantity = "Length", unit = "m") = y_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R.T[1,1],y_label.R.T[1,2],y_label.R.T[1,3]},{y_label.R.T[2,1],y_label.R.T[2,2],y_label.R.T[2,3]},{y_label.R.T[3,1],y_label.R.T[3,2],y_label.R.T[3,3]}},{y_label.r_lines[1],y_label.r_lines[2],y_label.r_lines[3]})[3];
//   parameter String y_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real y_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.cylinders[1].r[1](quantity = "Length", unit = "m") = y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_lines[1,1],y_label.R_lines[1,2],y_label.R_lines[1,3]},{y_label.R_lines[2,1],y_label.R_lines[2,2],y_label.R_lines[2,3]},{y_label.R_lines[3,1],y_label.R_lines[3,2],y_label.R_lines[3,3]}},{y_label.lines[1,1,1],y_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.cylinders[1].r[2](quantity = "Length", unit = "m") = y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_lines[1,1],y_label.R_lines[1,2],y_label.R_lines[1,3]},{y_label.R_lines[2,1],y_label.R_lines[2,2],y_label.R_lines[2,3]},{y_label.R_lines[3,1],y_label.R_lines[3,2],y_label.R_lines[3,3]}},{y_label.lines[1,1,1],y_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.cylinders[1].r[3](quantity = "Length", unit = "m") = y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_lines[1,1],y_label.R_lines[1,2],y_label.R_lines[1,3]},{y_label.R_lines[2,1],y_label.R_lines[2,2],y_label.R_lines[2,3]},{y_label.R_lines[3,1],y_label.R_lines[3,2],y_label.R_lines[3,3]}},{y_label.lines[1,1,1],y_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}},{y_label.lines[1,2,1] - y_label.lines[1,1,1],y_label.lines[1,2,2] - y_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real y_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}},{y_label.lines[1,2,1] - y_label.lines[1,1,1],y_label.lines[1,2,2] - y_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real y_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}},{y_label.lines[1,2,1] - y_label.lines[1,1,1],y_label.lines[1,2,2] - y_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real y_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real y_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({y_label.lines[1,2,1] - y_label.lines[1,1,1],y_label.lines[1,2,2] - y_label.lines[1,1,2]}) "Length of visual object";
//   input Real y_label.cylinders[1].width(quantity = "Length", unit = "m") = y_label.diameter "Width of visual object";
//   input Real y_label.cylinders[1].height(quantity = "Length", unit = "m") = y_label.diameter "Height of visual object";
//   input Real y_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real y_label.cylinders[1].color[1] = Real(y_label.color[1]) "Color of shape";
//   input Real y_label.cylinders[1].color[2] = Real(y_label.color[2]) "Color of shape";
//   input Real y_label.cylinders[1].color[3] = Real(y_label.color[3]) "Color of shape";
//   input Real y_label.cylinders[1].specularCoefficient = y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real y_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({y_label.cylinders[1].lengthDirection[1],y_label.cylinders[1].lengthDirection[2],y_label.cylinders[1].lengthDirection[3]});
//   protected Real y_label.cylinders[1].e_x[1](unit = "1") = if noEvent(y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else y_label.cylinders[1].lengthDirection[1] / y_label.cylinders[1].abs_n_x;
//   protected Real y_label.cylinders[1].e_x[2](unit = "1") = if noEvent(y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else y_label.cylinders[1].lengthDirection[2] / y_label.cylinders[1].abs_n_x;
//   protected Real y_label.cylinders[1].e_x[3](unit = "1") = if noEvent(y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else y_label.cylinders[1].lengthDirection[3] / y_label.cylinders[1].abs_n_x;
//   protected Real y_label.cylinders[1].n_z_aux[1](unit = "1") = y_label.cylinders[1].e_x[2] * y_label.cylinders[1].widthDirection[3] - y_label.cylinders[1].e_x[3] * y_label.cylinders[1].widthDirection[2];
//   protected Real y_label.cylinders[1].n_z_aux[2](unit = "1") = y_label.cylinders[1].e_x[3] * y_label.cylinders[1].widthDirection[1] - y_label.cylinders[1].e_x[1] * y_label.cylinders[1].widthDirection[3];
//   protected Real y_label.cylinders[1].n_z_aux[3](unit = "1") = y_label.cylinders[1].e_x[1] * y_label.cylinders[1].widthDirection[2] - y_label.cylinders[1].e_x[2] * y_label.cylinders[1].widthDirection[1];
//   protected Real y_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_label.cylinders[1].e_x[1],y_label.cylinders[1].e_x[2],y_label.cylinders[1].e_x[3]},if noEvent(y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (y_label.cylinders[1].n_z_aux[2] ^ 2.0 + y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {y_label.cylinders[1].widthDirection[1],y_label.cylinders[1].widthDirection[2],y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_label.cylinders[1].e_x[1],y_label.cylinders[1].e_x[2],y_label.cylinders[1].e_x[3]})[1];
//   protected Real y_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_label.cylinders[1].e_x[1],y_label.cylinders[1].e_x[2],y_label.cylinders[1].e_x[3]},if noEvent(y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (y_label.cylinders[1].n_z_aux[2] ^ 2.0 + y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {y_label.cylinders[1].widthDirection[1],y_label.cylinders[1].widthDirection[2],y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_label.cylinders[1].e_x[1],y_label.cylinders[1].e_x[2],y_label.cylinders[1].e_x[3]})[2];
//   protected Real y_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_label.cylinders[1].e_x[1],y_label.cylinders[1].e_x[2],y_label.cylinders[1].e_x[3]},if noEvent(y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (y_label.cylinders[1].n_z_aux[2] ^ 2.0 + y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {y_label.cylinders[1].widthDirection[1],y_label.cylinders[1].widthDirection[2],y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_label.cylinders[1].e_x[1],y_label.cylinders[1].e_x[2],y_label.cylinders[1].e_x[3]})[3];
//   protected output Real y_label.cylinders[1].Form;
//   output Real y_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real y_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_label.cylinders[1].Material;
//   protected output Real y_label.cylinders[1].Extra;
//   parameter String y_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real y_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real y_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real y_label.cylinders[2].r[1](quantity = "Length", unit = "m") = y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_lines[1,1],y_label.R_lines[1,2],y_label.R_lines[1,3]},{y_label.R_lines[2,1],y_label.R_lines[2,2],y_label.R_lines[2,3]},{y_label.R_lines[3,1],y_label.R_lines[3,2],y_label.R_lines[3,3]}},{y_label.lines[2,1,1],y_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.cylinders[2].r[2](quantity = "Length", unit = "m") = y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_lines[1,1],y_label.R_lines[1,2],y_label.R_lines[1,3]},{y_label.R_lines[2,1],y_label.R_lines[2,2],y_label.R_lines[2,3]},{y_label.R_lines[3,1],y_label.R_lines[3,2],y_label.R_lines[3,3]}},{y_label.lines[2,1,1],y_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.cylinders[2].r[3](quantity = "Length", unit = "m") = y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_lines[1,1],y_label.R_lines[1,2],y_label.R_lines[1,3]},{y_label.R_lines[2,1],y_label.R_lines[2,2],y_label.R_lines[2,3]},{y_label.R_lines[3,1],y_label.R_lines[3,2],y_label.R_lines[3,3]}},{y_label.lines[2,1,1],y_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real y_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real y_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}},{y_label.lines[2,2,1] - y_label.lines[2,1,1],y_label.lines[2,2,2] - y_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real y_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}},{y_label.lines[2,2,1] - y_label.lines[2,1,1],y_label.lines[2,2,2] - y_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real y_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.R_rel[1,1],y_label.R_rel[1,2],y_label.R_rel[1,3]},{y_label.R_rel[2,1],y_label.R_rel[2,2],y_label.R_rel[2,3]},{y_label.R_rel[3,1],y_label.R_rel[3,2],y_label.R_rel[3,3]}},{y_label.lines[2,2,1] - y_label.lines[2,1,1],y_label.lines[2,2,2] - y_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real y_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real y_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real y_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({y_label.lines[2,2,1] - y_label.lines[2,1,1],y_label.lines[2,2,2] - y_label.lines[2,1,2]}) "Length of visual object";
//   input Real y_label.cylinders[2].width(quantity = "Length", unit = "m") = y_label.diameter "Width of visual object";
//   input Real y_label.cylinders[2].height(quantity = "Length", unit = "m") = y_label.diameter "Height of visual object";
//   input Real y_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real y_label.cylinders[2].color[1] = Real(y_label.color[1]) "Color of shape";
//   input Real y_label.cylinders[2].color[2] = Real(y_label.color[2]) "Color of shape";
//   input Real y_label.cylinders[2].color[3] = Real(y_label.color[3]) "Color of shape";
//   input Real y_label.cylinders[2].specularCoefficient = y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real y_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({y_label.cylinders[2].lengthDirection[1],y_label.cylinders[2].lengthDirection[2],y_label.cylinders[2].lengthDirection[3]});
//   protected Real y_label.cylinders[2].e_x[1](unit = "1") = if noEvent(y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else y_label.cylinders[2].lengthDirection[1] / y_label.cylinders[2].abs_n_x;
//   protected Real y_label.cylinders[2].e_x[2](unit = "1") = if noEvent(y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else y_label.cylinders[2].lengthDirection[2] / y_label.cylinders[2].abs_n_x;
//   protected Real y_label.cylinders[2].e_x[3](unit = "1") = if noEvent(y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else y_label.cylinders[2].lengthDirection[3] / y_label.cylinders[2].abs_n_x;
//   protected Real y_label.cylinders[2].n_z_aux[1](unit = "1") = y_label.cylinders[2].e_x[2] * y_label.cylinders[2].widthDirection[3] - y_label.cylinders[2].e_x[3] * y_label.cylinders[2].widthDirection[2];
//   protected Real y_label.cylinders[2].n_z_aux[2](unit = "1") = y_label.cylinders[2].e_x[3] * y_label.cylinders[2].widthDirection[1] - y_label.cylinders[2].e_x[1] * y_label.cylinders[2].widthDirection[3];
//   protected Real y_label.cylinders[2].n_z_aux[3](unit = "1") = y_label.cylinders[2].e_x[1] * y_label.cylinders[2].widthDirection[2] - y_label.cylinders[2].e_x[2] * y_label.cylinders[2].widthDirection[1];
//   protected Real y_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_label.cylinders[2].e_x[1],y_label.cylinders[2].e_x[2],y_label.cylinders[2].e_x[3]},if noEvent(y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (y_label.cylinders[2].n_z_aux[2] ^ 2.0 + y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {y_label.cylinders[2].widthDirection[1],y_label.cylinders[2].widthDirection[2],y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_label.cylinders[2].e_x[1],y_label.cylinders[2].e_x[2],y_label.cylinders[2].e_x[3]})[1];
//   protected Real y_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_label.cylinders[2].e_x[1],y_label.cylinders[2].e_x[2],y_label.cylinders[2].e_x[3]},if noEvent(y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (y_label.cylinders[2].n_z_aux[2] ^ 2.0 + y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {y_label.cylinders[2].widthDirection[1],y_label.cylinders[2].widthDirection[2],y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_label.cylinders[2].e_x[1],y_label.cylinders[2].e_x[2],y_label.cylinders[2].e_x[3]})[2];
//   protected Real y_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({y_label.cylinders[2].e_x[1],y_label.cylinders[2].e_x[2],y_label.cylinders[2].e_x[3]},if noEvent(y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (y_label.cylinders[2].n_z_aux[2] ^ 2.0 + y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {y_label.cylinders[2].widthDirection[1],y_label.cylinders[2].widthDirection[2],y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{y_label.cylinders[2].e_x[1],y_label.cylinders[2].e_x[2],y_label.cylinders[2].e_x[3]})[3];
//   protected output Real y_label.cylinders[2].Form;
//   output Real y_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real y_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real y_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real y_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real y_label.cylinders[2].Material;
//   protected output Real y_label.cylinders[2].Extra;
//   parameter String z_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real z_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real z_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real z_arrowLine.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real z_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real z_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_arrowLine.length(quantity = "Length", unit = "m") = lineLength "Length of visual object";
//   input Real z_arrowLine.width(quantity = "Length", unit = "m") = lineWidth "Width of visual object";
//   input Real z_arrowLine.height(quantity = "Length", unit = "m") = lineWidth "Height of visual object";
//   input Real z_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real z_arrowLine.color[1] = Real(axisColor_z[1]) "Color of shape";
//   input Real z_arrowLine.color[2] = Real(axisColor_z[2]) "Color of shape";
//   input Real z_arrowLine.color[3] = Real(axisColor_z[3]) "Color of shape";
//   input Real z_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real z_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({z_arrowLine.lengthDirection[1],z_arrowLine.lengthDirection[2],z_arrowLine.lengthDirection[3]});
//   protected Real z_arrowLine.e_x[1](unit = "1") = if noEvent(z_arrowLine.abs_n_x < 1e-10) then 1.0 else z_arrowLine.lengthDirection[1] / z_arrowLine.abs_n_x;
//   protected Real z_arrowLine.e_x[2](unit = "1") = if noEvent(z_arrowLine.abs_n_x < 1e-10) then 0.0 else z_arrowLine.lengthDirection[2] / z_arrowLine.abs_n_x;
//   protected Real z_arrowLine.e_x[3](unit = "1") = if noEvent(z_arrowLine.abs_n_x < 1e-10) then 0.0 else z_arrowLine.lengthDirection[3] / z_arrowLine.abs_n_x;
//   protected Real z_arrowLine.n_z_aux[1](unit = "1") = z_arrowLine.e_x[2] * z_arrowLine.widthDirection[3] - z_arrowLine.e_x[3] * z_arrowLine.widthDirection[2];
//   protected Real z_arrowLine.n_z_aux[2](unit = "1") = z_arrowLine.e_x[3] * z_arrowLine.widthDirection[1] - z_arrowLine.e_x[1] * z_arrowLine.widthDirection[3];
//   protected Real z_arrowLine.n_z_aux[3](unit = "1") = z_arrowLine.e_x[1] * z_arrowLine.widthDirection[2] - z_arrowLine.e_x[2] * z_arrowLine.widthDirection[1];
//   protected Real z_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_arrowLine.e_x[1],z_arrowLine.e_x[2],z_arrowLine.e_x[3]},if noEvent(z_arrowLine.n_z_aux[1] ^ 2.0 + (z_arrowLine.n_z_aux[2] ^ 2.0 + z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {z_arrowLine.widthDirection[1],z_arrowLine.widthDirection[2],z_arrowLine.widthDirection[3]} else if noEvent(abs(z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_arrowLine.e_x[1],z_arrowLine.e_x[2],z_arrowLine.e_x[3]})[1];
//   protected Real z_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_arrowLine.e_x[1],z_arrowLine.e_x[2],z_arrowLine.e_x[3]},if noEvent(z_arrowLine.n_z_aux[1] ^ 2.0 + (z_arrowLine.n_z_aux[2] ^ 2.0 + z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {z_arrowLine.widthDirection[1],z_arrowLine.widthDirection[2],z_arrowLine.widthDirection[3]} else if noEvent(abs(z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_arrowLine.e_x[1],z_arrowLine.e_x[2],z_arrowLine.e_x[3]})[2];
//   protected Real z_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_arrowLine.e_x[1],z_arrowLine.e_x[2],z_arrowLine.e_x[3]},if noEvent(z_arrowLine.n_z_aux[1] ^ 2.0 + (z_arrowLine.n_z_aux[2] ^ 2.0 + z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {z_arrowLine.widthDirection[1],z_arrowLine.widthDirection[2],z_arrowLine.widthDirection[3]} else if noEvent(abs(z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_arrowLine.e_x[1],z_arrowLine.e_x[2],z_arrowLine.e_x[3]})[3];
//   protected output Real z_arrowLine.Form;
//   output Real z_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real z_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_arrowLine.Material;
//   protected output Real z_arrowLine.Extra;
//   parameter String z_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real z_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_arrowHead.r[3](quantity = "Length", unit = "m") = lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real z_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real z_arrowHead.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real z_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real z_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_arrowHead.length(quantity = "Length", unit = "m") = headLength "Length of visual object";
//   input Real z_arrowHead.width(quantity = "Length", unit = "m") = headWidth "Width of visual object";
//   input Real z_arrowHead.height(quantity = "Length", unit = "m") = headWidth "Height of visual object";
//   input Real z_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real z_arrowHead.color[1] = Real(axisColor_z[1]) "Color of shape";
//   input Real z_arrowHead.color[2] = Real(axisColor_z[2]) "Color of shape";
//   input Real z_arrowHead.color[3] = Real(axisColor_z[3]) "Color of shape";
//   input Real z_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real z_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({z_arrowHead.lengthDirection[1],z_arrowHead.lengthDirection[2],z_arrowHead.lengthDirection[3]});
//   protected Real z_arrowHead.e_x[1](unit = "1") = if noEvent(z_arrowHead.abs_n_x < 1e-10) then 1.0 else z_arrowHead.lengthDirection[1] / z_arrowHead.abs_n_x;
//   protected Real z_arrowHead.e_x[2](unit = "1") = if noEvent(z_arrowHead.abs_n_x < 1e-10) then 0.0 else z_arrowHead.lengthDirection[2] / z_arrowHead.abs_n_x;
//   protected Real z_arrowHead.e_x[3](unit = "1") = if noEvent(z_arrowHead.abs_n_x < 1e-10) then 0.0 else z_arrowHead.lengthDirection[3] / z_arrowHead.abs_n_x;
//   protected Real z_arrowHead.n_z_aux[1](unit = "1") = z_arrowHead.e_x[2] * z_arrowHead.widthDirection[3] - z_arrowHead.e_x[3] * z_arrowHead.widthDirection[2];
//   protected Real z_arrowHead.n_z_aux[2](unit = "1") = z_arrowHead.e_x[3] * z_arrowHead.widthDirection[1] - z_arrowHead.e_x[1] * z_arrowHead.widthDirection[3];
//   protected Real z_arrowHead.n_z_aux[3](unit = "1") = z_arrowHead.e_x[1] * z_arrowHead.widthDirection[2] - z_arrowHead.e_x[2] * z_arrowHead.widthDirection[1];
//   protected Real z_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_arrowHead.e_x[1],z_arrowHead.e_x[2],z_arrowHead.e_x[3]},if noEvent(z_arrowHead.n_z_aux[1] ^ 2.0 + (z_arrowHead.n_z_aux[2] ^ 2.0 + z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {z_arrowHead.widthDirection[1],z_arrowHead.widthDirection[2],z_arrowHead.widthDirection[3]} else if noEvent(abs(z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_arrowHead.e_x[1],z_arrowHead.e_x[2],z_arrowHead.e_x[3]})[1];
//   protected Real z_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_arrowHead.e_x[1],z_arrowHead.e_x[2],z_arrowHead.e_x[3]},if noEvent(z_arrowHead.n_z_aux[1] ^ 2.0 + (z_arrowHead.n_z_aux[2] ^ 2.0 + z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {z_arrowHead.widthDirection[1],z_arrowHead.widthDirection[2],z_arrowHead.widthDirection[3]} else if noEvent(abs(z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_arrowHead.e_x[1],z_arrowHead.e_x[2],z_arrowHead.e_x[3]})[2];
//   protected Real z_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_arrowHead.e_x[1],z_arrowHead.e_x[2],z_arrowHead.e_x[3]},if noEvent(z_arrowHead.n_z_aux[1] ^ 2.0 + (z_arrowHead.n_z_aux[2] ^ 2.0 + z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {z_arrowHead.widthDirection[1],z_arrowHead.widthDirection[2],z_arrowHead.widthDirection[3]} else if noEvent(abs(z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_arrowHead.e_x[1],z_arrowHead.e_x[2],z_arrowHead.e_x[3]})[3];
//   protected output Real z_arrowHead.Form;
//   output Real z_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real z_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_arrowHead.Material;
//   protected output Real z_arrowHead.Extra;
//   input Real z_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real z_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real z_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real z_label.r_lines[3](quantity = "Length", unit = "m") = labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real z_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real z_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real z_label.n_x[3](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real z_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real z_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real z_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real z_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[1,2,1](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[1,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[2,1,2](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[2,2,1](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[2,2,2](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[3,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[3,1,2](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[3,2,1](quantity = "Length", unit = "m") = scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.lines[3,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real z_label.diameter(quantity = "Length", unit = "m", min = 0.0) = axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer z_label.color[1](min = 0, max = 255) = axisColor_z[1] "Color of cylinders";
//   input Integer z_label.color[2](min = 0, max = 255) = axisColor_z[2] "Color of cylinders";
//   input Integer z_label.color[3](min = 0, max = 255) = axisColor_z[3] "Color of cylinders";
//   input Real z_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer z_label.n = 3 "Number of cylinders";
//   protected Real z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[1][1];
//   protected Real z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[1][2];
//   protected Real z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[1][3];
//   protected Real z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[2][1];
//   protected Real z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[2][2];
//   protected Real z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[2][3];
//   protected Real z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[3][1];
//   protected Real z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[3][2];
//   protected Real z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({z_label.n_x[1],z_label.n_x[2],z_label.n_x[3]},{z_label.n_y[1],z_label.n_y[2],z_label.n_y[3]})[3][3];
//   protected Real z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[1][1];
//   protected Real z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[1][2];
//   protected Real z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[1][3];
//   protected Real z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[2][1];
//   protected Real z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[2][2];
//   protected Real z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[2][3];
//   protected Real z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[3][1];
//   protected Real z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[3][2];
//   protected Real z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}})[3][3];
//   protected Real z_label.r_abs[1](quantity = "Length", unit = "m") = z_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{z_label.r_lines[1],z_label.r_lines[2],z_label.r_lines[3]})[1];
//   protected Real z_label.r_abs[2](quantity = "Length", unit = "m") = z_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{z_label.r_lines[1],z_label.r_lines[2],z_label.r_lines[3]})[2];
//   protected Real z_label.r_abs[3](quantity = "Length", unit = "m") = z_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R.T[1,1],z_label.R.T[1,2],z_label.R.T[1,3]},{z_label.R.T[2,1],z_label.R.T[2,2],z_label.R.T[2,3]},{z_label.R.T[3,1],z_label.R.T[3,2],z_label.R.T[3,3]}},{z_label.r_lines[1],z_label.r_lines[2],z_label.r_lines[3]})[3];
//   parameter String z_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real z_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[1].r[1](quantity = "Length", unit = "m") = z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[1,1,1],z_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[1].r[2](quantity = "Length", unit = "m") = z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[1,1,1],z_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[1].r[3](quantity = "Length", unit = "m") = z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[1,1,1],z_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[1,2,1] - z_label.lines[1,1,1],z_label.lines[1,2,2] - z_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[1,2,1] - z_label.lines[1,1,1],z_label.lines[1,2,2] - z_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[1,2,1] - z_label.lines[1,1,1],z_label.lines[1,2,2] - z_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({z_label.lines[1,2,1] - z_label.lines[1,1,1],z_label.lines[1,2,2] - z_label.lines[1,1,2]}) "Length of visual object";
//   input Real z_label.cylinders[1].width(quantity = "Length", unit = "m") = z_label.diameter "Width of visual object";
//   input Real z_label.cylinders[1].height(quantity = "Length", unit = "m") = z_label.diameter "Height of visual object";
//   input Real z_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real z_label.cylinders[1].color[1] = Real(z_label.color[1]) "Color of shape";
//   input Real z_label.cylinders[1].color[2] = Real(z_label.color[2]) "Color of shape";
//   input Real z_label.cylinders[1].color[3] = Real(z_label.color[3]) "Color of shape";
//   input Real z_label.cylinders[1].specularCoefficient = z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real z_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({z_label.cylinders[1].lengthDirection[1],z_label.cylinders[1].lengthDirection[2],z_label.cylinders[1].lengthDirection[3]});
//   protected Real z_label.cylinders[1].e_x[1](unit = "1") = if noEvent(z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else z_label.cylinders[1].lengthDirection[1] / z_label.cylinders[1].abs_n_x;
//   protected Real z_label.cylinders[1].e_x[2](unit = "1") = if noEvent(z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else z_label.cylinders[1].lengthDirection[2] / z_label.cylinders[1].abs_n_x;
//   protected Real z_label.cylinders[1].e_x[3](unit = "1") = if noEvent(z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else z_label.cylinders[1].lengthDirection[3] / z_label.cylinders[1].abs_n_x;
//   protected Real z_label.cylinders[1].n_z_aux[1](unit = "1") = z_label.cylinders[1].e_x[2] * z_label.cylinders[1].widthDirection[3] - z_label.cylinders[1].e_x[3] * z_label.cylinders[1].widthDirection[2];
//   protected Real z_label.cylinders[1].n_z_aux[2](unit = "1") = z_label.cylinders[1].e_x[3] * z_label.cylinders[1].widthDirection[1] - z_label.cylinders[1].e_x[1] * z_label.cylinders[1].widthDirection[3];
//   protected Real z_label.cylinders[1].n_z_aux[3](unit = "1") = z_label.cylinders[1].e_x[1] * z_label.cylinders[1].widthDirection[2] - z_label.cylinders[1].e_x[2] * z_label.cylinders[1].widthDirection[1];
//   protected Real z_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[1].e_x[1],z_label.cylinders[1].e_x[2],z_label.cylinders[1].e_x[3]},if noEvent(z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (z_label.cylinders[1].n_z_aux[2] ^ 2.0 + z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[1].widthDirection[1],z_label.cylinders[1].widthDirection[2],z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[1].e_x[1],z_label.cylinders[1].e_x[2],z_label.cylinders[1].e_x[3]})[1];
//   protected Real z_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[1].e_x[1],z_label.cylinders[1].e_x[2],z_label.cylinders[1].e_x[3]},if noEvent(z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (z_label.cylinders[1].n_z_aux[2] ^ 2.0 + z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[1].widthDirection[1],z_label.cylinders[1].widthDirection[2],z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[1].e_x[1],z_label.cylinders[1].e_x[2],z_label.cylinders[1].e_x[3]})[2];
//   protected Real z_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[1].e_x[1],z_label.cylinders[1].e_x[2],z_label.cylinders[1].e_x[3]},if noEvent(z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (z_label.cylinders[1].n_z_aux[2] ^ 2.0 + z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[1].widthDirection[1],z_label.cylinders[1].widthDirection[2],z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[1].e_x[1],z_label.cylinders[1].e_x[2],z_label.cylinders[1].e_x[3]})[3];
//   protected output Real z_label.cylinders[1].Form;
//   output Real z_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real z_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[1].Material;
//   protected output Real z_label.cylinders[1].Extra;
//   parameter String z_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real z_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[2].r[1](quantity = "Length", unit = "m") = z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[2,1,1],z_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[2].r[2](quantity = "Length", unit = "m") = z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[2,1,1],z_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[2].r[3](quantity = "Length", unit = "m") = z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[2,1,1],z_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[2,2,1] - z_label.lines[2,1,1],z_label.lines[2,2,2] - z_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[2,2,1] - z_label.lines[2,1,1],z_label.lines[2,2,2] - z_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[2,2,1] - z_label.lines[2,1,1],z_label.lines[2,2,2] - z_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({z_label.lines[2,2,1] - z_label.lines[2,1,1],z_label.lines[2,2,2] - z_label.lines[2,1,2]}) "Length of visual object";
//   input Real z_label.cylinders[2].width(quantity = "Length", unit = "m") = z_label.diameter "Width of visual object";
//   input Real z_label.cylinders[2].height(quantity = "Length", unit = "m") = z_label.diameter "Height of visual object";
//   input Real z_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real z_label.cylinders[2].color[1] = Real(z_label.color[1]) "Color of shape";
//   input Real z_label.cylinders[2].color[2] = Real(z_label.color[2]) "Color of shape";
//   input Real z_label.cylinders[2].color[3] = Real(z_label.color[3]) "Color of shape";
//   input Real z_label.cylinders[2].specularCoefficient = z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real z_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({z_label.cylinders[2].lengthDirection[1],z_label.cylinders[2].lengthDirection[2],z_label.cylinders[2].lengthDirection[3]});
//   protected Real z_label.cylinders[2].e_x[1](unit = "1") = if noEvent(z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else z_label.cylinders[2].lengthDirection[1] / z_label.cylinders[2].abs_n_x;
//   protected Real z_label.cylinders[2].e_x[2](unit = "1") = if noEvent(z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else z_label.cylinders[2].lengthDirection[2] / z_label.cylinders[2].abs_n_x;
//   protected Real z_label.cylinders[2].e_x[3](unit = "1") = if noEvent(z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else z_label.cylinders[2].lengthDirection[3] / z_label.cylinders[2].abs_n_x;
//   protected Real z_label.cylinders[2].n_z_aux[1](unit = "1") = z_label.cylinders[2].e_x[2] * z_label.cylinders[2].widthDirection[3] - z_label.cylinders[2].e_x[3] * z_label.cylinders[2].widthDirection[2];
//   protected Real z_label.cylinders[2].n_z_aux[2](unit = "1") = z_label.cylinders[2].e_x[3] * z_label.cylinders[2].widthDirection[1] - z_label.cylinders[2].e_x[1] * z_label.cylinders[2].widthDirection[3];
//   protected Real z_label.cylinders[2].n_z_aux[3](unit = "1") = z_label.cylinders[2].e_x[1] * z_label.cylinders[2].widthDirection[2] - z_label.cylinders[2].e_x[2] * z_label.cylinders[2].widthDirection[1];
//   protected Real z_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[2].e_x[1],z_label.cylinders[2].e_x[2],z_label.cylinders[2].e_x[3]},if noEvent(z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (z_label.cylinders[2].n_z_aux[2] ^ 2.0 + z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[2].widthDirection[1],z_label.cylinders[2].widthDirection[2],z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[2].e_x[1],z_label.cylinders[2].e_x[2],z_label.cylinders[2].e_x[3]})[1];
//   protected Real z_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[2].e_x[1],z_label.cylinders[2].e_x[2],z_label.cylinders[2].e_x[3]},if noEvent(z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (z_label.cylinders[2].n_z_aux[2] ^ 2.0 + z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[2].widthDirection[1],z_label.cylinders[2].widthDirection[2],z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[2].e_x[1],z_label.cylinders[2].e_x[2],z_label.cylinders[2].e_x[3]})[2];
//   protected Real z_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[2].e_x[1],z_label.cylinders[2].e_x[2],z_label.cylinders[2].e_x[3]},if noEvent(z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (z_label.cylinders[2].n_z_aux[2] ^ 2.0 + z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[2].widthDirection[1],z_label.cylinders[2].widthDirection[2],z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[2].e_x[1],z_label.cylinders[2].e_x[2],z_label.cylinders[2].e_x[3]})[3];
//   protected output Real z_label.cylinders[2].Form;
//   output Real z_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real z_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[2].Material;
//   protected output Real z_label.cylinders[2].Extra;
//   parameter String z_label.cylinders[3].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real z_label.cylinders[3].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real z_label.cylinders[3].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[3].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[3].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real z_label.cylinders[3].r[1](quantity = "Length", unit = "m") = z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[3,1,1],z_label.lines[3,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[3].r[2](quantity = "Length", unit = "m") = z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[3,1,1],z_label.lines[3,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[3].r[3](quantity = "Length", unit = "m") = z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_lines[1,1],z_label.R_lines[1,2],z_label.R_lines[1,3]},{z_label.R_lines[2,1],z_label.R_lines[2,2],z_label.R_lines[2,3]},{z_label.R_lines[3,1],z_label.R_lines[3,2],z_label.R_lines[3,3]}},{z_label.lines[3,1,1],z_label.lines[3,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real z_label.cylinders[3].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[3].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[3].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real z_label.cylinders[3].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[3,2,1] - z_label.lines[3,1,1],z_label.lines[3,2,2] - z_label.lines[3,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[3].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[3,2,1] - z_label.lines[3,1,1],z_label.lines[3,2,2] - z_label.lines[3,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[3].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.R_rel[1,1],z_label.R_rel[1,2],z_label.R_rel[1,3]},{z_label.R_rel[2,1],z_label.R_rel[2,2],z_label.R_rel[2,3]},{z_label.R_rel[3,1],z_label.R_rel[3,2],z_label.R_rel[3,3]}},{z_label.lines[3,2,1] - z_label.lines[3,1,1],z_label.lines[3,2,2] - z_label.lines[3,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real z_label.cylinders[3].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[3].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[3].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real z_label.cylinders[3].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({z_label.lines[3,2,1] - z_label.lines[3,1,1],z_label.lines[3,2,2] - z_label.lines[3,1,2]}) "Length of visual object";
//   input Real z_label.cylinders[3].width(quantity = "Length", unit = "m") = z_label.diameter "Width of visual object";
//   input Real z_label.cylinders[3].height(quantity = "Length", unit = "m") = z_label.diameter "Height of visual object";
//   input Real z_label.cylinders[3].extra = 0.0 "Additional size data for some of the shape types";
//   input Real z_label.cylinders[3].color[1] = Real(z_label.color[1]) "Color of shape";
//   input Real z_label.cylinders[3].color[2] = Real(z_label.color[2]) "Color of shape";
//   input Real z_label.cylinders[3].color[3] = Real(z_label.color[3]) "Color of shape";
//   input Real z_label.cylinders[3].specularCoefficient = z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real z_label.cylinders[3].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({z_label.cylinders[3].lengthDirection[1],z_label.cylinders[3].lengthDirection[2],z_label.cylinders[3].lengthDirection[3]});
//   protected Real z_label.cylinders[3].e_x[1](unit = "1") = if noEvent(z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else z_label.cylinders[3].lengthDirection[1] / z_label.cylinders[3].abs_n_x;
//   protected Real z_label.cylinders[3].e_x[2](unit = "1") = if noEvent(z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else z_label.cylinders[3].lengthDirection[2] / z_label.cylinders[3].abs_n_x;
//   protected Real z_label.cylinders[3].e_x[3](unit = "1") = if noEvent(z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else z_label.cylinders[3].lengthDirection[3] / z_label.cylinders[3].abs_n_x;
//   protected Real z_label.cylinders[3].n_z_aux[1](unit = "1") = z_label.cylinders[3].e_x[2] * z_label.cylinders[3].widthDirection[3] - z_label.cylinders[3].e_x[3] * z_label.cylinders[3].widthDirection[2];
//   protected Real z_label.cylinders[3].n_z_aux[2](unit = "1") = z_label.cylinders[3].e_x[3] * z_label.cylinders[3].widthDirection[1] - z_label.cylinders[3].e_x[1] * z_label.cylinders[3].widthDirection[3];
//   protected Real z_label.cylinders[3].n_z_aux[3](unit = "1") = z_label.cylinders[3].e_x[1] * z_label.cylinders[3].widthDirection[2] - z_label.cylinders[3].e_x[2] * z_label.cylinders[3].widthDirection[1];
//   protected Real z_label.cylinders[3].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[3].e_x[1],z_label.cylinders[3].e_x[2],z_label.cylinders[3].e_x[3]},if noEvent(z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (z_label.cylinders[3].n_z_aux[2] ^ 2.0 + z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[3].widthDirection[1],z_label.cylinders[3].widthDirection[2],z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[3].e_x[1],z_label.cylinders[3].e_x[2],z_label.cylinders[3].e_x[3]})[1];
//   protected Real z_label.cylinders[3].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[3].e_x[1],z_label.cylinders[3].e_x[2],z_label.cylinders[3].e_x[3]},if noEvent(z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (z_label.cylinders[3].n_z_aux[2] ^ 2.0 + z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[3].widthDirection[1],z_label.cylinders[3].widthDirection[2],z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[3].e_x[1],z_label.cylinders[3].e_x[2],z_label.cylinders[3].e_x[3]})[2];
//   protected Real z_label.cylinders[3].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({z_label.cylinders[3].e_x[1],z_label.cylinders[3].e_x[2],z_label.cylinders[3].e_x[3]},if noEvent(z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (z_label.cylinders[3].n_z_aux[2] ^ 2.0 + z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {z_label.cylinders[3].widthDirection[1],z_label.cylinders[3].widthDirection[2],z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{z_label.cylinders[3].e_x[1],z_label.cylinders[3].e_x[2],z_label.cylinders[3].e_x[3]})[3];
//   protected output Real z_label.cylinders[3].Form;
//   output Real z_label.cylinders[3].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[3].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[3].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[3].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[3].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[3].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real z_label.cylinders[3].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_label.cylinders[3].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real z_label.cylinders[3].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real z_label.cylinders[3].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[3].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[3].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real z_label.cylinders[3].Material;
//   protected output Real z_label.cylinders[3].Extra;
//   parameter String gravityArrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real gravityArrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real gravityArrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real gravityArrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real gravityArrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real gravityArrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real gravityArrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real gravityArrowLine.r_shape[1](quantity = "Length", unit = "m") = gravityArrowTail[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real gravityArrowLine.r_shape[2](quantity = "Length", unit = "m") = gravityArrowTail[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real gravityArrowLine.r_shape[3](quantity = "Length", unit = "m") = gravityArrowTail[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real gravityArrowLine.lengthDirection[1](unit = "1") = n[1] "Vector in length direction, resolved in object frame";
//   input Real gravityArrowLine.lengthDirection[2](unit = "1") = n[2] "Vector in length direction, resolved in object frame";
//   input Real gravityArrowLine.lengthDirection[3](unit = "1") = n[3] "Vector in length direction, resolved in object frame";
//   input Real gravityArrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real gravityArrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real gravityArrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real gravityArrowLine.length(quantity = "Length", unit = "m") = gravityLineLength "Length of visual object";
//   input Real gravityArrowLine.width(quantity = "Length", unit = "m") = gravityArrowDiameter "Width of visual object";
//   input Real gravityArrowLine.height(quantity = "Length", unit = "m") = gravityArrowDiameter "Height of visual object";
//   input Real gravityArrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real gravityArrowLine.color[1] = Real(gravityArrowColor[1]) "Color of shape";
//   input Real gravityArrowLine.color[2] = Real(gravityArrowColor[2]) "Color of shape";
//   input Real gravityArrowLine.color[3] = Real(gravityArrowColor[3]) "Color of shape";
//   input Real gravityArrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real gravityArrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({gravityArrowLine.lengthDirection[1],gravityArrowLine.lengthDirection[2],gravityArrowLine.lengthDirection[3]});
//   protected Real gravityArrowLine.e_x[1](unit = "1") = if noEvent(gravityArrowLine.abs_n_x < 1e-10) then 1.0 else gravityArrowLine.lengthDirection[1] / gravityArrowLine.abs_n_x;
//   protected Real gravityArrowLine.e_x[2](unit = "1") = if noEvent(gravityArrowLine.abs_n_x < 1e-10) then 0.0 else gravityArrowLine.lengthDirection[2] / gravityArrowLine.abs_n_x;
//   protected Real gravityArrowLine.e_x[3](unit = "1") = if noEvent(gravityArrowLine.abs_n_x < 1e-10) then 0.0 else gravityArrowLine.lengthDirection[3] / gravityArrowLine.abs_n_x;
//   protected Real gravityArrowLine.n_z_aux[1](unit = "1") = gravityArrowLine.e_x[2] * gravityArrowLine.widthDirection[3] - gravityArrowLine.e_x[3] * gravityArrowLine.widthDirection[2];
//   protected Real gravityArrowLine.n_z_aux[2](unit = "1") = gravityArrowLine.e_x[3] * gravityArrowLine.widthDirection[1] - gravityArrowLine.e_x[1] * gravityArrowLine.widthDirection[3];
//   protected Real gravityArrowLine.n_z_aux[3](unit = "1") = gravityArrowLine.e_x[1] * gravityArrowLine.widthDirection[2] - gravityArrowLine.e_x[2] * gravityArrowLine.widthDirection[1];
//   protected Real gravityArrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({gravityArrowLine.e_x[1],gravityArrowLine.e_x[2],gravityArrowLine.e_x[3]},if noEvent(gravityArrowLine.n_z_aux[1] ^ 2.0 + (gravityArrowLine.n_z_aux[2] ^ 2.0 + gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {gravityArrowLine.widthDirection[1],gravityArrowLine.widthDirection[2],gravityArrowLine.widthDirection[3]} else if noEvent(abs(gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{gravityArrowLine.e_x[1],gravityArrowLine.e_x[2],gravityArrowLine.e_x[3]})[1];
//   protected Real gravityArrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({gravityArrowLine.e_x[1],gravityArrowLine.e_x[2],gravityArrowLine.e_x[3]},if noEvent(gravityArrowLine.n_z_aux[1] ^ 2.0 + (gravityArrowLine.n_z_aux[2] ^ 2.0 + gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {gravityArrowLine.widthDirection[1],gravityArrowLine.widthDirection[2],gravityArrowLine.widthDirection[3]} else if noEvent(abs(gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{gravityArrowLine.e_x[1],gravityArrowLine.e_x[2],gravityArrowLine.e_x[3]})[2];
//   protected Real gravityArrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({gravityArrowLine.e_x[1],gravityArrowLine.e_x[2],gravityArrowLine.e_x[3]},if noEvent(gravityArrowLine.n_z_aux[1] ^ 2.0 + (gravityArrowLine.n_z_aux[2] ^ 2.0 + gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {gravityArrowLine.widthDirection[1],gravityArrowLine.widthDirection[2],gravityArrowLine.widthDirection[3]} else if noEvent(abs(gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{gravityArrowLine.e_x[1],gravityArrowLine.e_x[2],gravityArrowLine.e_x[3]})[3];
//   protected output Real gravityArrowLine.Form;
//   output Real gravityArrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real gravityArrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real gravityArrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real gravityArrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real gravityArrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real gravityArrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real gravityArrowLine.Material;
//   protected output Real gravityArrowLine.Extra;
//   parameter String gravityArrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real gravityArrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real gravityArrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real gravityArrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real gravityArrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real gravityArrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real gravityArrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real gravityArrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real gravityArrowHead.r_shape[1](quantity = "Length", unit = "m") = gravityArrowTail[1] + Modelica.Math.Vectors.normalize({n[1],n[2],n[3]},1e-13)[1] * gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real gravityArrowHead.r_shape[2](quantity = "Length", unit = "m") = gravityArrowTail[2] + Modelica.Math.Vectors.normalize({n[1],n[2],n[3]},1e-13)[2] * gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real gravityArrowHead.r_shape[3](quantity = "Length", unit = "m") = gravityArrowTail[3] + Modelica.Math.Vectors.normalize({n[1],n[2],n[3]},1e-13)[3] * gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real gravityArrowHead.lengthDirection[1](unit = "1") = n[1] "Vector in length direction, resolved in object frame";
//   input Real gravityArrowHead.lengthDirection[2](unit = "1") = n[2] "Vector in length direction, resolved in object frame";
//   input Real gravityArrowHead.lengthDirection[3](unit = "1") = n[3] "Vector in length direction, resolved in object frame";
//   input Real gravityArrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real gravityArrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real gravityArrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real gravityArrowHead.length(quantity = "Length", unit = "m") = gravityHeadLength "Length of visual object";
//   input Real gravityArrowHead.width(quantity = "Length", unit = "m") = gravityHeadWidth "Width of visual object";
//   input Real gravityArrowHead.height(quantity = "Length", unit = "m") = gravityHeadWidth "Height of visual object";
//   input Real gravityArrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real gravityArrowHead.color[1] = Real(gravityArrowColor[1]) "Color of shape";
//   input Real gravityArrowHead.color[2] = Real(gravityArrowColor[2]) "Color of shape";
//   input Real gravityArrowHead.color[3] = Real(gravityArrowColor[3]) "Color of shape";
//   input Real gravityArrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real gravityArrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({gravityArrowHead.lengthDirection[1],gravityArrowHead.lengthDirection[2],gravityArrowHead.lengthDirection[3]});
//   protected Real gravityArrowHead.e_x[1](unit = "1") = if noEvent(gravityArrowHead.abs_n_x < 1e-10) then 1.0 else gravityArrowHead.lengthDirection[1] / gravityArrowHead.abs_n_x;
//   protected Real gravityArrowHead.e_x[2](unit = "1") = if noEvent(gravityArrowHead.abs_n_x < 1e-10) then 0.0 else gravityArrowHead.lengthDirection[2] / gravityArrowHead.abs_n_x;
//   protected Real gravityArrowHead.e_x[3](unit = "1") = if noEvent(gravityArrowHead.abs_n_x < 1e-10) then 0.0 else gravityArrowHead.lengthDirection[3] / gravityArrowHead.abs_n_x;
//   protected Real gravityArrowHead.n_z_aux[1](unit = "1") = gravityArrowHead.e_x[2] * gravityArrowHead.widthDirection[3] - gravityArrowHead.e_x[3] * gravityArrowHead.widthDirection[2];
//   protected Real gravityArrowHead.n_z_aux[2](unit = "1") = gravityArrowHead.e_x[3] * gravityArrowHead.widthDirection[1] - gravityArrowHead.e_x[1] * gravityArrowHead.widthDirection[3];
//   protected Real gravityArrowHead.n_z_aux[3](unit = "1") = gravityArrowHead.e_x[1] * gravityArrowHead.widthDirection[2] - gravityArrowHead.e_x[2] * gravityArrowHead.widthDirection[1];
//   protected Real gravityArrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({gravityArrowHead.e_x[1],gravityArrowHead.e_x[2],gravityArrowHead.e_x[3]},if noEvent(gravityArrowHead.n_z_aux[1] ^ 2.0 + (gravityArrowHead.n_z_aux[2] ^ 2.0 + gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {gravityArrowHead.widthDirection[1],gravityArrowHead.widthDirection[2],gravityArrowHead.widthDirection[3]} else if noEvent(abs(gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{gravityArrowHead.e_x[1],gravityArrowHead.e_x[2],gravityArrowHead.e_x[3]})[1];
//   protected Real gravityArrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({gravityArrowHead.e_x[1],gravityArrowHead.e_x[2],gravityArrowHead.e_x[3]},if noEvent(gravityArrowHead.n_z_aux[1] ^ 2.0 + (gravityArrowHead.n_z_aux[2] ^ 2.0 + gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {gravityArrowHead.widthDirection[1],gravityArrowHead.widthDirection[2],gravityArrowHead.widthDirection[3]} else if noEvent(abs(gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{gravityArrowHead.e_x[1],gravityArrowHead.e_x[2],gravityArrowHead.e_x[3]})[2];
//   protected Real gravityArrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({gravityArrowHead.e_x[1],gravityArrowHead.e_x[2],gravityArrowHead.e_x[3]},if noEvent(gravityArrowHead.n_z_aux[1] ^ 2.0 + (gravityArrowHead.n_z_aux[2] ^ 2.0 + gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {gravityArrowHead.widthDirection[1],gravityArrowHead.widthDirection[2],gravityArrowHead.widthDirection[3]} else if noEvent(abs(gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{gravityArrowHead.e_x[1],gravityArrowHead.e_x[2],gravityArrowHead.e_x[3]})[3];
//   protected output Real gravityArrowHead.Form;
//   output Real gravityArrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real gravityArrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real gravityArrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real gravityArrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real gravityArrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real gravityArrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real gravityArrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real gravityArrowHead.Material;
//   protected output Real gravityArrowHead.Extra;
// equation
//   x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(x_arrowLine.shapeType);
//   x_arrowLine.rxvisobj[1] = x_arrowLine.R.T[1,1] * x_arrowLine.e_x[1] + (x_arrowLine.R.T[2,1] * x_arrowLine.e_x[2] + x_arrowLine.R.T[3,1] * x_arrowLine.e_x[3]);
//   x_arrowLine.rxvisobj[2] = x_arrowLine.R.T[1,2] * x_arrowLine.e_x[1] + (x_arrowLine.R.T[2,2] * x_arrowLine.e_x[2] + x_arrowLine.R.T[3,2] * x_arrowLine.e_x[3]);
//   x_arrowLine.rxvisobj[3] = x_arrowLine.R.T[1,3] * x_arrowLine.e_x[1] + (x_arrowLine.R.T[2,3] * x_arrowLine.e_x[2] + x_arrowLine.R.T[3,3] * x_arrowLine.e_x[3]);
//   x_arrowLine.ryvisobj[1] = x_arrowLine.R.T[1,1] * x_arrowLine.e_y[1] + (x_arrowLine.R.T[2,1] * x_arrowLine.e_y[2] + x_arrowLine.R.T[3,1] * x_arrowLine.e_y[3]);
//   x_arrowLine.ryvisobj[2] = x_arrowLine.R.T[1,2] * x_arrowLine.e_y[1] + (x_arrowLine.R.T[2,2] * x_arrowLine.e_y[2] + x_arrowLine.R.T[3,2] * x_arrowLine.e_y[3]);
//   x_arrowLine.ryvisobj[3] = x_arrowLine.R.T[1,3] * x_arrowLine.e_y[1] + (x_arrowLine.R.T[2,3] * x_arrowLine.e_y[2] + x_arrowLine.R.T[3,3] * x_arrowLine.e_y[3]);
//   x_arrowLine.rvisobj = x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_arrowLine.R.T[1,1],x_arrowLine.R.T[1,2],x_arrowLine.R.T[1,3]},{x_arrowLine.R.T[2,1],x_arrowLine.R.T[2,2],x_arrowLine.R.T[2,3]},{x_arrowLine.R.T[3,1],x_arrowLine.R.T[3,2],x_arrowLine.R.T[3,3]}},{x_arrowLine.r_shape[1],x_arrowLine.r_shape[2],x_arrowLine.r_shape[3]});
//   x_arrowLine.size[1] = x_arrowLine.length;
//   x_arrowLine.size[2] = x_arrowLine.width;
//   x_arrowLine.size[3] = x_arrowLine.height;
//   x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(x_arrowLine.color[1] / 255.0,x_arrowLine.color[2] / 255.0,x_arrowLine.color[3] / 255.0,x_arrowLine.specularCoefficient);
//   x_arrowLine.Extra = x_arrowLine.extra;
//   x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(x_arrowHead.shapeType);
//   x_arrowHead.rxvisobj[1] = x_arrowHead.R.T[1,1] * x_arrowHead.e_x[1] + (x_arrowHead.R.T[2,1] * x_arrowHead.e_x[2] + x_arrowHead.R.T[3,1] * x_arrowHead.e_x[3]);
//   x_arrowHead.rxvisobj[2] = x_arrowHead.R.T[1,2] * x_arrowHead.e_x[1] + (x_arrowHead.R.T[2,2] * x_arrowHead.e_x[2] + x_arrowHead.R.T[3,2] * x_arrowHead.e_x[3]);
//   x_arrowHead.rxvisobj[3] = x_arrowHead.R.T[1,3] * x_arrowHead.e_x[1] + (x_arrowHead.R.T[2,3] * x_arrowHead.e_x[2] + x_arrowHead.R.T[3,3] * x_arrowHead.e_x[3]);
//   x_arrowHead.ryvisobj[1] = x_arrowHead.R.T[1,1] * x_arrowHead.e_y[1] + (x_arrowHead.R.T[2,1] * x_arrowHead.e_y[2] + x_arrowHead.R.T[3,1] * x_arrowHead.e_y[3]);
//   x_arrowHead.ryvisobj[2] = x_arrowHead.R.T[1,2] * x_arrowHead.e_y[1] + (x_arrowHead.R.T[2,2] * x_arrowHead.e_y[2] + x_arrowHead.R.T[3,2] * x_arrowHead.e_y[3]);
//   x_arrowHead.ryvisobj[3] = x_arrowHead.R.T[1,3] * x_arrowHead.e_y[1] + (x_arrowHead.R.T[2,3] * x_arrowHead.e_y[2] + x_arrowHead.R.T[3,3] * x_arrowHead.e_y[3]);
//   x_arrowHead.rvisobj = x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_arrowHead.R.T[1,1],x_arrowHead.R.T[1,2],x_arrowHead.R.T[1,3]},{x_arrowHead.R.T[2,1],x_arrowHead.R.T[2,2],x_arrowHead.R.T[2,3]},{x_arrowHead.R.T[3,1],x_arrowHead.R.T[3,2],x_arrowHead.R.T[3,3]}},{x_arrowHead.r_shape[1],x_arrowHead.r_shape[2],x_arrowHead.r_shape[3]});
//   x_arrowHead.size[1] = x_arrowHead.length;
//   x_arrowHead.size[2] = x_arrowHead.width;
//   x_arrowHead.size[3] = x_arrowHead.height;
//   x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(x_arrowHead.color[1] / 255.0,x_arrowHead.color[2] / 255.0,x_arrowHead.color[3] / 255.0,x_arrowHead.specularCoefficient);
//   x_arrowHead.Extra = x_arrowHead.extra;
//   x_label.cylinders[1].R.T[1,1] = x_label.R.T[1,1];
//   x_label.cylinders[1].R.T[1,2] = x_label.R.T[1,2];
//   x_label.cylinders[1].R.T[1,3] = x_label.R.T[1,3];
//   x_label.cylinders[1].R.T[2,1] = x_label.R.T[2,1];
//   x_label.cylinders[1].R.T[2,2] = x_label.R.T[2,2];
//   x_label.cylinders[1].R.T[2,3] = x_label.R.T[2,3];
//   x_label.cylinders[1].R.T[3,1] = x_label.R.T[3,1];
//   x_label.cylinders[1].R.T[3,2] = x_label.R.T[3,2];
//   x_label.cylinders[1].R.T[3,3] = x_label.R.T[3,3];
//   x_label.cylinders[1].R.w[1] = x_label.R.w[1];
//   x_label.cylinders[1].R.w[2] = x_label.R.w[2];
//   x_label.cylinders[1].R.w[3] = x_label.R.w[3];
//   x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(x_label.cylinders[1].shapeType);
//   x_label.cylinders[1].rxvisobj[1] = x_label.cylinders[1].R.T[1,1] * x_label.cylinders[1].e_x[1] + (x_label.cylinders[1].R.T[2,1] * x_label.cylinders[1].e_x[2] + x_label.cylinders[1].R.T[3,1] * x_label.cylinders[1].e_x[3]);
//   x_label.cylinders[1].rxvisobj[2] = x_label.cylinders[1].R.T[1,2] * x_label.cylinders[1].e_x[1] + (x_label.cylinders[1].R.T[2,2] * x_label.cylinders[1].e_x[2] + x_label.cylinders[1].R.T[3,2] * x_label.cylinders[1].e_x[3]);
//   x_label.cylinders[1].rxvisobj[3] = x_label.cylinders[1].R.T[1,3] * x_label.cylinders[1].e_x[1] + (x_label.cylinders[1].R.T[2,3] * x_label.cylinders[1].e_x[2] + x_label.cylinders[1].R.T[3,3] * x_label.cylinders[1].e_x[3]);
//   x_label.cylinders[1].ryvisobj[1] = x_label.cylinders[1].R.T[1,1] * x_label.cylinders[1].e_y[1] + (x_label.cylinders[1].R.T[2,1] * x_label.cylinders[1].e_y[2] + x_label.cylinders[1].R.T[3,1] * x_label.cylinders[1].e_y[3]);
//   x_label.cylinders[1].ryvisobj[2] = x_label.cylinders[1].R.T[1,2] * x_label.cylinders[1].e_y[1] + (x_label.cylinders[1].R.T[2,2] * x_label.cylinders[1].e_y[2] + x_label.cylinders[1].R.T[3,2] * x_label.cylinders[1].e_y[3]);
//   x_label.cylinders[1].ryvisobj[3] = x_label.cylinders[1].R.T[1,3] * x_label.cylinders[1].e_y[1] + (x_label.cylinders[1].R.T[2,3] * x_label.cylinders[1].e_y[2] + x_label.cylinders[1].R.T[3,3] * x_label.cylinders[1].e_y[3]);
//   x_label.cylinders[1].rvisobj = x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.cylinders[1].R.T[1,1],x_label.cylinders[1].R.T[1,2],x_label.cylinders[1].R.T[1,3]},{x_label.cylinders[1].R.T[2,1],x_label.cylinders[1].R.T[2,2],x_label.cylinders[1].R.T[2,3]},{x_label.cylinders[1].R.T[3,1],x_label.cylinders[1].R.T[3,2],x_label.cylinders[1].R.T[3,3]}},{x_label.cylinders[1].r_shape[1],x_label.cylinders[1].r_shape[2],x_label.cylinders[1].r_shape[3]});
//   x_label.cylinders[1].size[1] = x_label.cylinders[1].length;
//   x_label.cylinders[1].size[2] = x_label.cylinders[1].width;
//   x_label.cylinders[1].size[3] = x_label.cylinders[1].height;
//   x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(x_label.cylinders[1].color[1] / 255.0,x_label.cylinders[1].color[2] / 255.0,x_label.cylinders[1].color[3] / 255.0,x_label.cylinders[1].specularCoefficient);
//   x_label.cylinders[1].Extra = x_label.cylinders[1].extra;
//   x_label.cylinders[2].R.T[1,1] = x_label.R.T[1,1];
//   x_label.cylinders[2].R.T[1,2] = x_label.R.T[1,2];
//   x_label.cylinders[2].R.T[1,3] = x_label.R.T[1,3];
//   x_label.cylinders[2].R.T[2,1] = x_label.R.T[2,1];
//   x_label.cylinders[2].R.T[2,2] = x_label.R.T[2,2];
//   x_label.cylinders[2].R.T[2,3] = x_label.R.T[2,3];
//   x_label.cylinders[2].R.T[3,1] = x_label.R.T[3,1];
//   x_label.cylinders[2].R.T[3,2] = x_label.R.T[3,2];
//   x_label.cylinders[2].R.T[3,3] = x_label.R.T[3,3];
//   x_label.cylinders[2].R.w[1] = x_label.R.w[1];
//   x_label.cylinders[2].R.w[2] = x_label.R.w[2];
//   x_label.cylinders[2].R.w[3] = x_label.R.w[3];
//   x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(x_label.cylinders[2].shapeType);
//   x_label.cylinders[2].rxvisobj[1] = x_label.cylinders[2].R.T[1,1] * x_label.cylinders[2].e_x[1] + (x_label.cylinders[2].R.T[2,1] * x_label.cylinders[2].e_x[2] + x_label.cylinders[2].R.T[3,1] * x_label.cylinders[2].e_x[3]);
//   x_label.cylinders[2].rxvisobj[2] = x_label.cylinders[2].R.T[1,2] * x_label.cylinders[2].e_x[1] + (x_label.cylinders[2].R.T[2,2] * x_label.cylinders[2].e_x[2] + x_label.cylinders[2].R.T[3,2] * x_label.cylinders[2].e_x[3]);
//   x_label.cylinders[2].rxvisobj[3] = x_label.cylinders[2].R.T[1,3] * x_label.cylinders[2].e_x[1] + (x_label.cylinders[2].R.T[2,3] * x_label.cylinders[2].e_x[2] + x_label.cylinders[2].R.T[3,3] * x_label.cylinders[2].e_x[3]);
//   x_label.cylinders[2].ryvisobj[1] = x_label.cylinders[2].R.T[1,1] * x_label.cylinders[2].e_y[1] + (x_label.cylinders[2].R.T[2,1] * x_label.cylinders[2].e_y[2] + x_label.cylinders[2].R.T[3,1] * x_label.cylinders[2].e_y[3]);
//   x_label.cylinders[2].ryvisobj[2] = x_label.cylinders[2].R.T[1,2] * x_label.cylinders[2].e_y[1] + (x_label.cylinders[2].R.T[2,2] * x_label.cylinders[2].e_y[2] + x_label.cylinders[2].R.T[3,2] * x_label.cylinders[2].e_y[3]);
//   x_label.cylinders[2].ryvisobj[3] = x_label.cylinders[2].R.T[1,3] * x_label.cylinders[2].e_y[1] + (x_label.cylinders[2].R.T[2,3] * x_label.cylinders[2].e_y[2] + x_label.cylinders[2].R.T[3,3] * x_label.cylinders[2].e_y[3]);
//   x_label.cylinders[2].rvisobj = x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{x_label.cylinders[2].R.T[1,1],x_label.cylinders[2].R.T[1,2],x_label.cylinders[2].R.T[1,3]},{x_label.cylinders[2].R.T[2,1],x_label.cylinders[2].R.T[2,2],x_label.cylinders[2].R.T[2,3]},{x_label.cylinders[2].R.T[3,1],x_label.cylinders[2].R.T[3,2],x_label.cylinders[2].R.T[3,3]}},{x_label.cylinders[2].r_shape[1],x_label.cylinders[2].r_shape[2],x_label.cylinders[2].r_shape[3]});
//   x_label.cylinders[2].size[1] = x_label.cylinders[2].length;
//   x_label.cylinders[2].size[2] = x_label.cylinders[2].width;
//   x_label.cylinders[2].size[3] = x_label.cylinders[2].height;
//   x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(x_label.cylinders[2].color[1] / 255.0,x_label.cylinders[2].color[2] / 255.0,x_label.cylinders[2].color[3] / 255.0,x_label.cylinders[2].specularCoefficient);
//   x_label.cylinders[2].Extra = x_label.cylinders[2].extra;
//   y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(y_arrowLine.shapeType);
//   y_arrowLine.rxvisobj[1] = y_arrowLine.R.T[1,1] * y_arrowLine.e_x[1] + (y_arrowLine.R.T[2,1] * y_arrowLine.e_x[2] + y_arrowLine.R.T[3,1] * y_arrowLine.e_x[3]);
//   y_arrowLine.rxvisobj[2] = y_arrowLine.R.T[1,2] * y_arrowLine.e_x[1] + (y_arrowLine.R.T[2,2] * y_arrowLine.e_x[2] + y_arrowLine.R.T[3,2] * y_arrowLine.e_x[3]);
//   y_arrowLine.rxvisobj[3] = y_arrowLine.R.T[1,3] * y_arrowLine.e_x[1] + (y_arrowLine.R.T[2,3] * y_arrowLine.e_x[2] + y_arrowLine.R.T[3,3] * y_arrowLine.e_x[3]);
//   y_arrowLine.ryvisobj[1] = y_arrowLine.R.T[1,1] * y_arrowLine.e_y[1] + (y_arrowLine.R.T[2,1] * y_arrowLine.e_y[2] + y_arrowLine.R.T[3,1] * y_arrowLine.e_y[3]);
//   y_arrowLine.ryvisobj[2] = y_arrowLine.R.T[1,2] * y_arrowLine.e_y[1] + (y_arrowLine.R.T[2,2] * y_arrowLine.e_y[2] + y_arrowLine.R.T[3,2] * y_arrowLine.e_y[3]);
//   y_arrowLine.ryvisobj[3] = y_arrowLine.R.T[1,3] * y_arrowLine.e_y[1] + (y_arrowLine.R.T[2,3] * y_arrowLine.e_y[2] + y_arrowLine.R.T[3,3] * y_arrowLine.e_y[3]);
//   y_arrowLine.rvisobj = y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_arrowLine.R.T[1,1],y_arrowLine.R.T[1,2],y_arrowLine.R.T[1,3]},{y_arrowLine.R.T[2,1],y_arrowLine.R.T[2,2],y_arrowLine.R.T[2,3]},{y_arrowLine.R.T[3,1],y_arrowLine.R.T[3,2],y_arrowLine.R.T[3,3]}},{y_arrowLine.r_shape[1],y_arrowLine.r_shape[2],y_arrowLine.r_shape[3]});
//   y_arrowLine.size[1] = y_arrowLine.length;
//   y_arrowLine.size[2] = y_arrowLine.width;
//   y_arrowLine.size[3] = y_arrowLine.height;
//   y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(y_arrowLine.color[1] / 255.0,y_arrowLine.color[2] / 255.0,y_arrowLine.color[3] / 255.0,y_arrowLine.specularCoefficient);
//   y_arrowLine.Extra = y_arrowLine.extra;
//   y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(y_arrowHead.shapeType);
//   y_arrowHead.rxvisobj[1] = y_arrowHead.R.T[1,1] * y_arrowHead.e_x[1] + (y_arrowHead.R.T[2,1] * y_arrowHead.e_x[2] + y_arrowHead.R.T[3,1] * y_arrowHead.e_x[3]);
//   y_arrowHead.rxvisobj[2] = y_arrowHead.R.T[1,2] * y_arrowHead.e_x[1] + (y_arrowHead.R.T[2,2] * y_arrowHead.e_x[2] + y_arrowHead.R.T[3,2] * y_arrowHead.e_x[3]);
//   y_arrowHead.rxvisobj[3] = y_arrowHead.R.T[1,3] * y_arrowHead.e_x[1] + (y_arrowHead.R.T[2,3] * y_arrowHead.e_x[2] + y_arrowHead.R.T[3,3] * y_arrowHead.e_x[3]);
//   y_arrowHead.ryvisobj[1] = y_arrowHead.R.T[1,1] * y_arrowHead.e_y[1] + (y_arrowHead.R.T[2,1] * y_arrowHead.e_y[2] + y_arrowHead.R.T[3,1] * y_arrowHead.e_y[3]);
//   y_arrowHead.ryvisobj[2] = y_arrowHead.R.T[1,2] * y_arrowHead.e_y[1] + (y_arrowHead.R.T[2,2] * y_arrowHead.e_y[2] + y_arrowHead.R.T[3,2] * y_arrowHead.e_y[3]);
//   y_arrowHead.ryvisobj[3] = y_arrowHead.R.T[1,3] * y_arrowHead.e_y[1] + (y_arrowHead.R.T[2,3] * y_arrowHead.e_y[2] + y_arrowHead.R.T[3,3] * y_arrowHead.e_y[3]);
//   y_arrowHead.rvisobj = y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_arrowHead.R.T[1,1],y_arrowHead.R.T[1,2],y_arrowHead.R.T[1,3]},{y_arrowHead.R.T[2,1],y_arrowHead.R.T[2,2],y_arrowHead.R.T[2,3]},{y_arrowHead.R.T[3,1],y_arrowHead.R.T[3,2],y_arrowHead.R.T[3,3]}},{y_arrowHead.r_shape[1],y_arrowHead.r_shape[2],y_arrowHead.r_shape[3]});
//   y_arrowHead.size[1] = y_arrowHead.length;
//   y_arrowHead.size[2] = y_arrowHead.width;
//   y_arrowHead.size[3] = y_arrowHead.height;
//   y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(y_arrowHead.color[1] / 255.0,y_arrowHead.color[2] / 255.0,y_arrowHead.color[3] / 255.0,y_arrowHead.specularCoefficient);
//   y_arrowHead.Extra = y_arrowHead.extra;
//   y_label.cylinders[1].R.T[1,1] = y_label.R.T[1,1];
//   y_label.cylinders[1].R.T[1,2] = y_label.R.T[1,2];
//   y_label.cylinders[1].R.T[1,3] = y_label.R.T[1,3];
//   y_label.cylinders[1].R.T[2,1] = y_label.R.T[2,1];
//   y_label.cylinders[1].R.T[2,2] = y_label.R.T[2,2];
//   y_label.cylinders[1].R.T[2,3] = y_label.R.T[2,3];
//   y_label.cylinders[1].R.T[3,1] = y_label.R.T[3,1];
//   y_label.cylinders[1].R.T[3,2] = y_label.R.T[3,2];
//   y_label.cylinders[1].R.T[3,3] = y_label.R.T[3,3];
//   y_label.cylinders[1].R.w[1] = y_label.R.w[1];
//   y_label.cylinders[1].R.w[2] = y_label.R.w[2];
//   y_label.cylinders[1].R.w[3] = y_label.R.w[3];
//   y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(y_label.cylinders[1].shapeType);
//   y_label.cylinders[1].rxvisobj[1] = y_label.cylinders[1].R.T[1,1] * y_label.cylinders[1].e_x[1] + (y_label.cylinders[1].R.T[2,1] * y_label.cylinders[1].e_x[2] + y_label.cylinders[1].R.T[3,1] * y_label.cylinders[1].e_x[3]);
//   y_label.cylinders[1].rxvisobj[2] = y_label.cylinders[1].R.T[1,2] * y_label.cylinders[1].e_x[1] + (y_label.cylinders[1].R.T[2,2] * y_label.cylinders[1].e_x[2] + y_label.cylinders[1].R.T[3,2] * y_label.cylinders[1].e_x[3]);
//   y_label.cylinders[1].rxvisobj[3] = y_label.cylinders[1].R.T[1,3] * y_label.cylinders[1].e_x[1] + (y_label.cylinders[1].R.T[2,3] * y_label.cylinders[1].e_x[2] + y_label.cylinders[1].R.T[3,3] * y_label.cylinders[1].e_x[3]);
//   y_label.cylinders[1].ryvisobj[1] = y_label.cylinders[1].R.T[1,1] * y_label.cylinders[1].e_y[1] + (y_label.cylinders[1].R.T[2,1] * y_label.cylinders[1].e_y[2] + y_label.cylinders[1].R.T[3,1] * y_label.cylinders[1].e_y[3]);
//   y_label.cylinders[1].ryvisobj[2] = y_label.cylinders[1].R.T[1,2] * y_label.cylinders[1].e_y[1] + (y_label.cylinders[1].R.T[2,2] * y_label.cylinders[1].e_y[2] + y_label.cylinders[1].R.T[3,2] * y_label.cylinders[1].e_y[3]);
//   y_label.cylinders[1].ryvisobj[3] = y_label.cylinders[1].R.T[1,3] * y_label.cylinders[1].e_y[1] + (y_label.cylinders[1].R.T[2,3] * y_label.cylinders[1].e_y[2] + y_label.cylinders[1].R.T[3,3] * y_label.cylinders[1].e_y[3]);
//   y_label.cylinders[1].rvisobj = y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.cylinders[1].R.T[1,1],y_label.cylinders[1].R.T[1,2],y_label.cylinders[1].R.T[1,3]},{y_label.cylinders[1].R.T[2,1],y_label.cylinders[1].R.T[2,2],y_label.cylinders[1].R.T[2,3]},{y_label.cylinders[1].R.T[3,1],y_label.cylinders[1].R.T[3,2],y_label.cylinders[1].R.T[3,3]}},{y_label.cylinders[1].r_shape[1],y_label.cylinders[1].r_shape[2],y_label.cylinders[1].r_shape[3]});
//   y_label.cylinders[1].size[1] = y_label.cylinders[1].length;
//   y_label.cylinders[1].size[2] = y_label.cylinders[1].width;
//   y_label.cylinders[1].size[3] = y_label.cylinders[1].height;
//   y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(y_label.cylinders[1].color[1] / 255.0,y_label.cylinders[1].color[2] / 255.0,y_label.cylinders[1].color[3] / 255.0,y_label.cylinders[1].specularCoefficient);
//   y_label.cylinders[1].Extra = y_label.cylinders[1].extra;
//   y_label.cylinders[2].R.T[1,1] = y_label.R.T[1,1];
//   y_label.cylinders[2].R.T[1,2] = y_label.R.T[1,2];
//   y_label.cylinders[2].R.T[1,3] = y_label.R.T[1,3];
//   y_label.cylinders[2].R.T[2,1] = y_label.R.T[2,1];
//   y_label.cylinders[2].R.T[2,2] = y_label.R.T[2,2];
//   y_label.cylinders[2].R.T[2,3] = y_label.R.T[2,3];
//   y_label.cylinders[2].R.T[3,1] = y_label.R.T[3,1];
//   y_label.cylinders[2].R.T[3,2] = y_label.R.T[3,2];
//   y_label.cylinders[2].R.T[3,3] = y_label.R.T[3,3];
//   y_label.cylinders[2].R.w[1] = y_label.R.w[1];
//   y_label.cylinders[2].R.w[2] = y_label.R.w[2];
//   y_label.cylinders[2].R.w[3] = y_label.R.w[3];
//   y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(y_label.cylinders[2].shapeType);
//   y_label.cylinders[2].rxvisobj[1] = y_label.cylinders[2].R.T[1,1] * y_label.cylinders[2].e_x[1] + (y_label.cylinders[2].R.T[2,1] * y_label.cylinders[2].e_x[2] + y_label.cylinders[2].R.T[3,1] * y_label.cylinders[2].e_x[3]);
//   y_label.cylinders[2].rxvisobj[2] = y_label.cylinders[2].R.T[1,2] * y_label.cylinders[2].e_x[1] + (y_label.cylinders[2].R.T[2,2] * y_label.cylinders[2].e_x[2] + y_label.cylinders[2].R.T[3,2] * y_label.cylinders[2].e_x[3]);
//   y_label.cylinders[2].rxvisobj[3] = y_label.cylinders[2].R.T[1,3] * y_label.cylinders[2].e_x[1] + (y_label.cylinders[2].R.T[2,3] * y_label.cylinders[2].e_x[2] + y_label.cylinders[2].R.T[3,3] * y_label.cylinders[2].e_x[3]);
//   y_label.cylinders[2].ryvisobj[1] = y_label.cylinders[2].R.T[1,1] * y_label.cylinders[2].e_y[1] + (y_label.cylinders[2].R.T[2,1] * y_label.cylinders[2].e_y[2] + y_label.cylinders[2].R.T[3,1] * y_label.cylinders[2].e_y[3]);
//   y_label.cylinders[2].ryvisobj[2] = y_label.cylinders[2].R.T[1,2] * y_label.cylinders[2].e_y[1] + (y_label.cylinders[2].R.T[2,2] * y_label.cylinders[2].e_y[2] + y_label.cylinders[2].R.T[3,2] * y_label.cylinders[2].e_y[3]);
//   y_label.cylinders[2].ryvisobj[3] = y_label.cylinders[2].R.T[1,3] * y_label.cylinders[2].e_y[1] + (y_label.cylinders[2].R.T[2,3] * y_label.cylinders[2].e_y[2] + y_label.cylinders[2].R.T[3,3] * y_label.cylinders[2].e_y[3]);
//   y_label.cylinders[2].rvisobj = y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{y_label.cylinders[2].R.T[1,1],y_label.cylinders[2].R.T[1,2],y_label.cylinders[2].R.T[1,3]},{y_label.cylinders[2].R.T[2,1],y_label.cylinders[2].R.T[2,2],y_label.cylinders[2].R.T[2,3]},{y_label.cylinders[2].R.T[3,1],y_label.cylinders[2].R.T[3,2],y_label.cylinders[2].R.T[3,3]}},{y_label.cylinders[2].r_shape[1],y_label.cylinders[2].r_shape[2],y_label.cylinders[2].r_shape[3]});
//   y_label.cylinders[2].size[1] = y_label.cylinders[2].length;
//   y_label.cylinders[2].size[2] = y_label.cylinders[2].width;
//   y_label.cylinders[2].size[3] = y_label.cylinders[2].height;
//   y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(y_label.cylinders[2].color[1] / 255.0,y_label.cylinders[2].color[2] / 255.0,y_label.cylinders[2].color[3] / 255.0,y_label.cylinders[2].specularCoefficient);
//   y_label.cylinders[2].Extra = y_label.cylinders[2].extra;
//   z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(z_arrowLine.shapeType);
//   z_arrowLine.rxvisobj[1] = z_arrowLine.R.T[1,1] * z_arrowLine.e_x[1] + (z_arrowLine.R.T[2,1] * z_arrowLine.e_x[2] + z_arrowLine.R.T[3,1] * z_arrowLine.e_x[3]);
//   z_arrowLine.rxvisobj[2] = z_arrowLine.R.T[1,2] * z_arrowLine.e_x[1] + (z_arrowLine.R.T[2,2] * z_arrowLine.e_x[2] + z_arrowLine.R.T[3,2] * z_arrowLine.e_x[3]);
//   z_arrowLine.rxvisobj[3] = z_arrowLine.R.T[1,3] * z_arrowLine.e_x[1] + (z_arrowLine.R.T[2,3] * z_arrowLine.e_x[2] + z_arrowLine.R.T[3,3] * z_arrowLine.e_x[3]);
//   z_arrowLine.ryvisobj[1] = z_arrowLine.R.T[1,1] * z_arrowLine.e_y[1] + (z_arrowLine.R.T[2,1] * z_arrowLine.e_y[2] + z_arrowLine.R.T[3,1] * z_arrowLine.e_y[3]);
//   z_arrowLine.ryvisobj[2] = z_arrowLine.R.T[1,2] * z_arrowLine.e_y[1] + (z_arrowLine.R.T[2,2] * z_arrowLine.e_y[2] + z_arrowLine.R.T[3,2] * z_arrowLine.e_y[3]);
//   z_arrowLine.ryvisobj[3] = z_arrowLine.R.T[1,3] * z_arrowLine.e_y[1] + (z_arrowLine.R.T[2,3] * z_arrowLine.e_y[2] + z_arrowLine.R.T[3,3] * z_arrowLine.e_y[3]);
//   z_arrowLine.rvisobj = z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_arrowLine.R.T[1,1],z_arrowLine.R.T[1,2],z_arrowLine.R.T[1,3]},{z_arrowLine.R.T[2,1],z_arrowLine.R.T[2,2],z_arrowLine.R.T[2,3]},{z_arrowLine.R.T[3,1],z_arrowLine.R.T[3,2],z_arrowLine.R.T[3,3]}},{z_arrowLine.r_shape[1],z_arrowLine.r_shape[2],z_arrowLine.r_shape[3]});
//   z_arrowLine.size[1] = z_arrowLine.length;
//   z_arrowLine.size[2] = z_arrowLine.width;
//   z_arrowLine.size[3] = z_arrowLine.height;
//   z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(z_arrowLine.color[1] / 255.0,z_arrowLine.color[2] / 255.0,z_arrowLine.color[3] / 255.0,z_arrowLine.specularCoefficient);
//   z_arrowLine.Extra = z_arrowLine.extra;
//   z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(z_arrowHead.shapeType);
//   z_arrowHead.rxvisobj[1] = z_arrowHead.R.T[1,1] * z_arrowHead.e_x[1] + (z_arrowHead.R.T[2,1] * z_arrowHead.e_x[2] + z_arrowHead.R.T[3,1] * z_arrowHead.e_x[3]);
//   z_arrowHead.rxvisobj[2] = z_arrowHead.R.T[1,2] * z_arrowHead.e_x[1] + (z_arrowHead.R.T[2,2] * z_arrowHead.e_x[2] + z_arrowHead.R.T[3,2] * z_arrowHead.e_x[3]);
//   z_arrowHead.rxvisobj[3] = z_arrowHead.R.T[1,3] * z_arrowHead.e_x[1] + (z_arrowHead.R.T[2,3] * z_arrowHead.e_x[2] + z_arrowHead.R.T[3,3] * z_arrowHead.e_x[3]);
//   z_arrowHead.ryvisobj[1] = z_arrowHead.R.T[1,1] * z_arrowHead.e_y[1] + (z_arrowHead.R.T[2,1] * z_arrowHead.e_y[2] + z_arrowHead.R.T[3,1] * z_arrowHead.e_y[3]);
//   z_arrowHead.ryvisobj[2] = z_arrowHead.R.T[1,2] * z_arrowHead.e_y[1] + (z_arrowHead.R.T[2,2] * z_arrowHead.e_y[2] + z_arrowHead.R.T[3,2] * z_arrowHead.e_y[3]);
//   z_arrowHead.ryvisobj[3] = z_arrowHead.R.T[1,3] * z_arrowHead.e_y[1] + (z_arrowHead.R.T[2,3] * z_arrowHead.e_y[2] + z_arrowHead.R.T[3,3] * z_arrowHead.e_y[3]);
//   z_arrowHead.rvisobj = z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_arrowHead.R.T[1,1],z_arrowHead.R.T[1,2],z_arrowHead.R.T[1,3]},{z_arrowHead.R.T[2,1],z_arrowHead.R.T[2,2],z_arrowHead.R.T[2,3]},{z_arrowHead.R.T[3,1],z_arrowHead.R.T[3,2],z_arrowHead.R.T[3,3]}},{z_arrowHead.r_shape[1],z_arrowHead.r_shape[2],z_arrowHead.r_shape[3]});
//   z_arrowHead.size[1] = z_arrowHead.length;
//   z_arrowHead.size[2] = z_arrowHead.width;
//   z_arrowHead.size[3] = z_arrowHead.height;
//   z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(z_arrowHead.color[1] / 255.0,z_arrowHead.color[2] / 255.0,z_arrowHead.color[3] / 255.0,z_arrowHead.specularCoefficient);
//   z_arrowHead.Extra = z_arrowHead.extra;
//   z_label.cylinders[1].R.T[1,1] = z_label.R.T[1,1];
//   z_label.cylinders[1].R.T[1,2] = z_label.R.T[1,2];
//   z_label.cylinders[1].R.T[1,3] = z_label.R.T[1,3];
//   z_label.cylinders[1].R.T[2,1] = z_label.R.T[2,1];
//   z_label.cylinders[1].R.T[2,2] = z_label.R.T[2,2];
//   z_label.cylinders[1].R.T[2,3] = z_label.R.T[2,3];
//   z_label.cylinders[1].R.T[3,1] = z_label.R.T[3,1];
//   z_label.cylinders[1].R.T[3,2] = z_label.R.T[3,2];
//   z_label.cylinders[1].R.T[3,3] = z_label.R.T[3,3];
//   z_label.cylinders[1].R.w[1] = z_label.R.w[1];
//   z_label.cylinders[1].R.w[2] = z_label.R.w[2];
//   z_label.cylinders[1].R.w[3] = z_label.R.w[3];
//   z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(z_label.cylinders[1].shapeType);
//   z_label.cylinders[1].rxvisobj[1] = z_label.cylinders[1].R.T[1,1] * z_label.cylinders[1].e_x[1] + (z_label.cylinders[1].R.T[2,1] * z_label.cylinders[1].e_x[2] + z_label.cylinders[1].R.T[3,1] * z_label.cylinders[1].e_x[3]);
//   z_label.cylinders[1].rxvisobj[2] = z_label.cylinders[1].R.T[1,2] * z_label.cylinders[1].e_x[1] + (z_label.cylinders[1].R.T[2,2] * z_label.cylinders[1].e_x[2] + z_label.cylinders[1].R.T[3,2] * z_label.cylinders[1].e_x[3]);
//   z_label.cylinders[1].rxvisobj[3] = z_label.cylinders[1].R.T[1,3] * z_label.cylinders[1].e_x[1] + (z_label.cylinders[1].R.T[2,3] * z_label.cylinders[1].e_x[2] + z_label.cylinders[1].R.T[3,3] * z_label.cylinders[1].e_x[3]);
//   z_label.cylinders[1].ryvisobj[1] = z_label.cylinders[1].R.T[1,1] * z_label.cylinders[1].e_y[1] + (z_label.cylinders[1].R.T[2,1] * z_label.cylinders[1].e_y[2] + z_label.cylinders[1].R.T[3,1] * z_label.cylinders[1].e_y[3]);
//   z_label.cylinders[1].ryvisobj[2] = z_label.cylinders[1].R.T[1,2] * z_label.cylinders[1].e_y[1] + (z_label.cylinders[1].R.T[2,2] * z_label.cylinders[1].e_y[2] + z_label.cylinders[1].R.T[3,2] * z_label.cylinders[1].e_y[3]);
//   z_label.cylinders[1].ryvisobj[3] = z_label.cylinders[1].R.T[1,3] * z_label.cylinders[1].e_y[1] + (z_label.cylinders[1].R.T[2,3] * z_label.cylinders[1].e_y[2] + z_label.cylinders[1].R.T[3,3] * z_label.cylinders[1].e_y[3]);
//   z_label.cylinders[1].rvisobj = z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.cylinders[1].R.T[1,1],z_label.cylinders[1].R.T[1,2],z_label.cylinders[1].R.T[1,3]},{z_label.cylinders[1].R.T[2,1],z_label.cylinders[1].R.T[2,2],z_label.cylinders[1].R.T[2,3]},{z_label.cylinders[1].R.T[3,1],z_label.cylinders[1].R.T[3,2],z_label.cylinders[1].R.T[3,3]}},{z_label.cylinders[1].r_shape[1],z_label.cylinders[1].r_shape[2],z_label.cylinders[1].r_shape[3]});
//   z_label.cylinders[1].size[1] = z_label.cylinders[1].length;
//   z_label.cylinders[1].size[2] = z_label.cylinders[1].width;
//   z_label.cylinders[1].size[3] = z_label.cylinders[1].height;
//   z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(z_label.cylinders[1].color[1] / 255.0,z_label.cylinders[1].color[2] / 255.0,z_label.cylinders[1].color[3] / 255.0,z_label.cylinders[1].specularCoefficient);
//   z_label.cylinders[1].Extra = z_label.cylinders[1].extra;
//   z_label.cylinders[2].R.T[1,1] = z_label.R.T[1,1];
//   z_label.cylinders[2].R.T[1,2] = z_label.R.T[1,2];
//   z_label.cylinders[2].R.T[1,3] = z_label.R.T[1,3];
//   z_label.cylinders[2].R.T[2,1] = z_label.R.T[2,1];
//   z_label.cylinders[2].R.T[2,2] = z_label.R.T[2,2];
//   z_label.cylinders[2].R.T[2,3] = z_label.R.T[2,3];
//   z_label.cylinders[2].R.T[3,1] = z_label.R.T[3,1];
//   z_label.cylinders[2].R.T[3,2] = z_label.R.T[3,2];
//   z_label.cylinders[2].R.T[3,3] = z_label.R.T[3,3];
//   z_label.cylinders[2].R.w[1] = z_label.R.w[1];
//   z_label.cylinders[2].R.w[2] = z_label.R.w[2];
//   z_label.cylinders[2].R.w[3] = z_label.R.w[3];
//   z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(z_label.cylinders[2].shapeType);
//   z_label.cylinders[2].rxvisobj[1] = z_label.cylinders[2].R.T[1,1] * z_label.cylinders[2].e_x[1] + (z_label.cylinders[2].R.T[2,1] * z_label.cylinders[2].e_x[2] + z_label.cylinders[2].R.T[3,1] * z_label.cylinders[2].e_x[3]);
//   z_label.cylinders[2].rxvisobj[2] = z_label.cylinders[2].R.T[1,2] * z_label.cylinders[2].e_x[1] + (z_label.cylinders[2].R.T[2,2] * z_label.cylinders[2].e_x[2] + z_label.cylinders[2].R.T[3,2] * z_label.cylinders[2].e_x[3]);
//   z_label.cylinders[2].rxvisobj[3] = z_label.cylinders[2].R.T[1,3] * z_label.cylinders[2].e_x[1] + (z_label.cylinders[2].R.T[2,3] * z_label.cylinders[2].e_x[2] + z_label.cylinders[2].R.T[3,3] * z_label.cylinders[2].e_x[3]);
//   z_label.cylinders[2].ryvisobj[1] = z_label.cylinders[2].R.T[1,1] * z_label.cylinders[2].e_y[1] + (z_label.cylinders[2].R.T[2,1] * z_label.cylinders[2].e_y[2] + z_label.cylinders[2].R.T[3,1] * z_label.cylinders[2].e_y[3]);
//   z_label.cylinders[2].ryvisobj[2] = z_label.cylinders[2].R.T[1,2] * z_label.cylinders[2].e_y[1] + (z_label.cylinders[2].R.T[2,2] * z_label.cylinders[2].e_y[2] + z_label.cylinders[2].R.T[3,2] * z_label.cylinders[2].e_y[3]);
//   z_label.cylinders[2].ryvisobj[3] = z_label.cylinders[2].R.T[1,3] * z_label.cylinders[2].e_y[1] + (z_label.cylinders[2].R.T[2,3] * z_label.cylinders[2].e_y[2] + z_label.cylinders[2].R.T[3,3] * z_label.cylinders[2].e_y[3]);
//   z_label.cylinders[2].rvisobj = z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.cylinders[2].R.T[1,1],z_label.cylinders[2].R.T[1,2],z_label.cylinders[2].R.T[1,3]},{z_label.cylinders[2].R.T[2,1],z_label.cylinders[2].R.T[2,2],z_label.cylinders[2].R.T[2,3]},{z_label.cylinders[2].R.T[3,1],z_label.cylinders[2].R.T[3,2],z_label.cylinders[2].R.T[3,3]}},{z_label.cylinders[2].r_shape[1],z_label.cylinders[2].r_shape[2],z_label.cylinders[2].r_shape[3]});
//   z_label.cylinders[2].size[1] = z_label.cylinders[2].length;
//   z_label.cylinders[2].size[2] = z_label.cylinders[2].width;
//   z_label.cylinders[2].size[3] = z_label.cylinders[2].height;
//   z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(z_label.cylinders[2].color[1] / 255.0,z_label.cylinders[2].color[2] / 255.0,z_label.cylinders[2].color[3] / 255.0,z_label.cylinders[2].specularCoefficient);
//   z_label.cylinders[2].Extra = z_label.cylinders[2].extra;
//   z_label.cylinders[3].R.T[1,1] = z_label.R.T[1,1];
//   z_label.cylinders[3].R.T[1,2] = z_label.R.T[1,2];
//   z_label.cylinders[3].R.T[1,3] = z_label.R.T[1,3];
//   z_label.cylinders[3].R.T[2,1] = z_label.R.T[2,1];
//   z_label.cylinders[3].R.T[2,2] = z_label.R.T[2,2];
//   z_label.cylinders[3].R.T[2,3] = z_label.R.T[2,3];
//   z_label.cylinders[3].R.T[3,1] = z_label.R.T[3,1];
//   z_label.cylinders[3].R.T[3,2] = z_label.R.T[3,2];
//   z_label.cylinders[3].R.T[3,3] = z_label.R.T[3,3];
//   z_label.cylinders[3].R.w[1] = z_label.R.w[1];
//   z_label.cylinders[3].R.w[2] = z_label.R.w[2];
//   z_label.cylinders[3].R.w[3] = z_label.R.w[3];
//   z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(z_label.cylinders[3].shapeType);
//   z_label.cylinders[3].rxvisobj[1] = z_label.cylinders[3].R.T[1,1] * z_label.cylinders[3].e_x[1] + (z_label.cylinders[3].R.T[2,1] * z_label.cylinders[3].e_x[2] + z_label.cylinders[3].R.T[3,1] * z_label.cylinders[3].e_x[3]);
//   z_label.cylinders[3].rxvisobj[2] = z_label.cylinders[3].R.T[1,2] * z_label.cylinders[3].e_x[1] + (z_label.cylinders[3].R.T[2,2] * z_label.cylinders[3].e_x[2] + z_label.cylinders[3].R.T[3,2] * z_label.cylinders[3].e_x[3]);
//   z_label.cylinders[3].rxvisobj[3] = z_label.cylinders[3].R.T[1,3] * z_label.cylinders[3].e_x[1] + (z_label.cylinders[3].R.T[2,3] * z_label.cylinders[3].e_x[2] + z_label.cylinders[3].R.T[3,3] * z_label.cylinders[3].e_x[3]);
//   z_label.cylinders[3].ryvisobj[1] = z_label.cylinders[3].R.T[1,1] * z_label.cylinders[3].e_y[1] + (z_label.cylinders[3].R.T[2,1] * z_label.cylinders[3].e_y[2] + z_label.cylinders[3].R.T[3,1] * z_label.cylinders[3].e_y[3]);
//   z_label.cylinders[3].ryvisobj[2] = z_label.cylinders[3].R.T[1,2] * z_label.cylinders[3].e_y[1] + (z_label.cylinders[3].R.T[2,2] * z_label.cylinders[3].e_y[2] + z_label.cylinders[3].R.T[3,2] * z_label.cylinders[3].e_y[3]);
//   z_label.cylinders[3].ryvisobj[3] = z_label.cylinders[3].R.T[1,3] * z_label.cylinders[3].e_y[1] + (z_label.cylinders[3].R.T[2,3] * z_label.cylinders[3].e_y[2] + z_label.cylinders[3].R.T[3,3] * z_label.cylinders[3].e_y[3]);
//   z_label.cylinders[3].rvisobj = z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{z_label.cylinders[3].R.T[1,1],z_label.cylinders[3].R.T[1,2],z_label.cylinders[3].R.T[1,3]},{z_label.cylinders[3].R.T[2,1],z_label.cylinders[3].R.T[2,2],z_label.cylinders[3].R.T[2,3]},{z_label.cylinders[3].R.T[3,1],z_label.cylinders[3].R.T[3,2],z_label.cylinders[3].R.T[3,3]}},{z_label.cylinders[3].r_shape[1],z_label.cylinders[3].r_shape[2],z_label.cylinders[3].r_shape[3]});
//   z_label.cylinders[3].size[1] = z_label.cylinders[3].length;
//   z_label.cylinders[3].size[2] = z_label.cylinders[3].width;
//   z_label.cylinders[3].size[3] = z_label.cylinders[3].height;
//   z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(z_label.cylinders[3].color[1] / 255.0,z_label.cylinders[3].color[2] / 255.0,z_label.cylinders[3].color[3] / 255.0,z_label.cylinders[3].specularCoefficient);
//   z_label.cylinders[3].Extra = z_label.cylinders[3].extra;
//   gravityArrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(gravityArrowLine.shapeType);
//   gravityArrowLine.rxvisobj[1] = gravityArrowLine.R.T[1,1] * gravityArrowLine.e_x[1] + (gravityArrowLine.R.T[2,1] * gravityArrowLine.e_x[2] + gravityArrowLine.R.T[3,1] * gravityArrowLine.e_x[3]);
//   gravityArrowLine.rxvisobj[2] = gravityArrowLine.R.T[1,2] * gravityArrowLine.e_x[1] + (gravityArrowLine.R.T[2,2] * gravityArrowLine.e_x[2] + gravityArrowLine.R.T[3,2] * gravityArrowLine.e_x[3]);
//   gravityArrowLine.rxvisobj[3] = gravityArrowLine.R.T[1,3] * gravityArrowLine.e_x[1] + (gravityArrowLine.R.T[2,3] * gravityArrowLine.e_x[2] + gravityArrowLine.R.T[3,3] * gravityArrowLine.e_x[3]);
//   gravityArrowLine.ryvisobj[1] = gravityArrowLine.R.T[1,1] * gravityArrowLine.e_y[1] + (gravityArrowLine.R.T[2,1] * gravityArrowLine.e_y[2] + gravityArrowLine.R.T[3,1] * gravityArrowLine.e_y[3]);
//   gravityArrowLine.ryvisobj[2] = gravityArrowLine.R.T[1,2] * gravityArrowLine.e_y[1] + (gravityArrowLine.R.T[2,2] * gravityArrowLine.e_y[2] + gravityArrowLine.R.T[3,2] * gravityArrowLine.e_y[3]);
//   gravityArrowLine.ryvisobj[3] = gravityArrowLine.R.T[1,3] * gravityArrowLine.e_y[1] + (gravityArrowLine.R.T[2,3] * gravityArrowLine.e_y[2] + gravityArrowLine.R.T[3,3] * gravityArrowLine.e_y[3]);
//   gravityArrowLine.rvisobj = gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{gravityArrowLine.R.T[1,1],gravityArrowLine.R.T[1,2],gravityArrowLine.R.T[1,3]},{gravityArrowLine.R.T[2,1],gravityArrowLine.R.T[2,2],gravityArrowLine.R.T[2,3]},{gravityArrowLine.R.T[3,1],gravityArrowLine.R.T[3,2],gravityArrowLine.R.T[3,3]}},{gravityArrowLine.r_shape[1],gravityArrowLine.r_shape[2],gravityArrowLine.r_shape[3]});
//   gravityArrowLine.size[1] = gravityArrowLine.length;
//   gravityArrowLine.size[2] = gravityArrowLine.width;
//   gravityArrowLine.size[3] = gravityArrowLine.height;
//   gravityArrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(gravityArrowLine.color[1] / 255.0,gravityArrowLine.color[2] / 255.0,gravityArrowLine.color[3] / 255.0,gravityArrowLine.specularCoefficient);
//   gravityArrowLine.Extra = gravityArrowLine.extra;
//   gravityArrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(gravityArrowHead.shapeType);
//   gravityArrowHead.rxvisobj[1] = gravityArrowHead.R.T[1,1] * gravityArrowHead.e_x[1] + (gravityArrowHead.R.T[2,1] * gravityArrowHead.e_x[2] + gravityArrowHead.R.T[3,1] * gravityArrowHead.e_x[3]);
//   gravityArrowHead.rxvisobj[2] = gravityArrowHead.R.T[1,2] * gravityArrowHead.e_x[1] + (gravityArrowHead.R.T[2,2] * gravityArrowHead.e_x[2] + gravityArrowHead.R.T[3,2] * gravityArrowHead.e_x[3]);
//   gravityArrowHead.rxvisobj[3] = gravityArrowHead.R.T[1,3] * gravityArrowHead.e_x[1] + (gravityArrowHead.R.T[2,3] * gravityArrowHead.e_x[2] + gravityArrowHead.R.T[3,3] * gravityArrowHead.e_x[3]);
//   gravityArrowHead.ryvisobj[1] = gravityArrowHead.R.T[1,1] * gravityArrowHead.e_y[1] + (gravityArrowHead.R.T[2,1] * gravityArrowHead.e_y[2] + gravityArrowHead.R.T[3,1] * gravityArrowHead.e_y[3]);
//   gravityArrowHead.ryvisobj[2] = gravityArrowHead.R.T[1,2] * gravityArrowHead.e_y[1] + (gravityArrowHead.R.T[2,2] * gravityArrowHead.e_y[2] + gravityArrowHead.R.T[3,2] * gravityArrowHead.e_y[3]);
//   gravityArrowHead.ryvisobj[3] = gravityArrowHead.R.T[1,3] * gravityArrowHead.e_y[1] + (gravityArrowHead.R.T[2,3] * gravityArrowHead.e_y[2] + gravityArrowHead.R.T[3,3] * gravityArrowHead.e_y[3]);
//   gravityArrowHead.rvisobj = gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{gravityArrowHead.R.T[1,1],gravityArrowHead.R.T[1,2],gravityArrowHead.R.T[1,3]},{gravityArrowHead.R.T[2,1],gravityArrowHead.R.T[2,2],gravityArrowHead.R.T[2,3]},{gravityArrowHead.R.T[3,1],gravityArrowHead.R.T[3,2],gravityArrowHead.R.T[3,3]}},{gravityArrowHead.r_shape[1],gravityArrowHead.r_shape[2],gravityArrowHead.r_shape[3]});
//   gravityArrowHead.size[1] = gravityArrowHead.length;
//   gravityArrowHead.size[2] = gravityArrowHead.width;
//   gravityArrowHead.size[3] = gravityArrowHead.height;
//   gravityArrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(gravityArrowHead.color[1] / 255.0,gravityArrowHead.color[2] / 255.0,gravityArrowHead.color[3] / 255.0,gravityArrowHead.specularCoefficient);
//   gravityArrowHead.Extra = gravityArrowHead.extra;
//   assert(Modelica.Math.Vectors.length({n[1],n[2],n[3]}) > 1e-10,"Parameter n of World object is wrong (lenght(n) > 0 required)");
//   frame_b.r_0[1] = 0.0;
//   frame_b.r_0[2] = 0.0;
//   frame_b.r_0[3] = 0.0;
//   frame_b.R.w[3] = 0.0;
//   frame_b.R.w[2] = 0.0;
//   frame_b.R.w[1] = 0.0;
//   frame_b.R.T[3,3] = 1.0;
//   frame_b.R.T[3,2] = 0.0;
//   frame_b.R.T[3,1] = 0.0;
//   frame_b.R.T[2,3] = 0.0;
//   frame_b.R.T[2,2] = 1.0;
//   frame_b.R.T[2,1] = 0.0;
//   frame_b.R.T[1,3] = 0.0;
//   frame_b.R.T[1,2] = 0.0;
//   frame_b.R.T[1,1] = 1.0;
//   frame_b.t[3] = 0.0;
//   frame_b.t[2] = 0.0;
//   frame_b.t[1] = 0.0;
//   frame_b.f[3] = 0.0;
//   frame_b.f[2] = 0.0;
//   frame_b.f[1] = 0.0;
// end Modelica.Mechanics.MultiBody.World;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.World completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.World has 1054 equation(s) and 1054 variable(s).
// 592 of these are trivial equation(s).
// "
// ""
// endResult
