// name:     Modelica3.x.Mechanics.MultiBody.Examples.Loops.Fourbar2
// keywords: multibody, balancing, instantiation
// status:   correct
// 
//  Modelica MultiBody 3.x: instantiation and balance checking
//

loadFile("_LoopsTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2);
getErrorString();
system("rm -f *.so *.dll *.log *.c* *.makefile *.libs");

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length
//   input Real[:] v "Vector";
//   output Real result "Length of vector v";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize
//   input Real[:] v "Vector";
//   input Real eps = 1e-13 "if |v| < eps then result = v/eps";
//   output Real[size(v,1)] result "Input vector v normalized to length=1";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = "Angle", unit = "rad", displayUnit = "deg");
// 
// external "C";
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation "Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation"
// input Real[3, 3] T;
// input Real(quantity="AngularVelocity", unit="rad/s")[3] w;
// output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
//   output Real[3] residue "The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)";
// algorithm
//   residue := {Modelica.Math.atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),Modelica.Math.atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),Modelica.Math.atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   input Real[4] der_Q(unit = "1/s") "Derivative of Q";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 2";
// algorithm
//   w := {2.0 * (Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]),2.0 * (-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]),2.0 * (Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4])};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T
//   input Real[3, 3] T "Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} "Guess value for Q (there are 2 solutions; the one close to Q_guess is used";
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04;
// algorithm
//   c1 := (1.0 + T[1,1]) - T[2,2] - T[3,3];
//   c2 := (1.0 + T[2,2]) - T[1,1] - T[3,3];
//   c3 := (1.0 + T[3,3]) - T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04 OR c4 > c1 AND c4 > c2 AND c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 AND c1 > c3 AND c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 AND c2 > c3 AND c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint "Inline before index reduction"
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   output Real[1] residue "Residue constraint (shall be zero)";
// algorithm
//   residue := {(Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation
//   input Real[3, 3] T1 "Orientation object to rotate frame 0 into frame 1";
//   input Real[3, 3] T_rel "Orientation object to rotate frame 1 into frame 2";
//   output Real[3, 3] T2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation
//   input Integer axis(min = 1, max = 3) "Rotate around 'axis' of frame 1";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,Modelica.Math.cos(angle),Modelica.Math.sin(angle);0.0,-Modelica.Math.sin(angle),Modelica.Math.cos(angle)] else if axis == 2 then <matrix>[Modelica.Math.cos(angle),0.0,-Modelica.Math.sin(angle);0.0,1.0,0.0;Modelica.Math.sin(angle),0.0,Modelica.Math.cos(angle)] else <matrix>[Modelica.Math.cos(angle),Modelica.Math.sin(angle),0.0;-Modelica.Math.sin(angle),Modelica.Math.cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy
//   input Real[3] n_x(unit = "1") "Vector in direction of x-axis of frame 2, resolved in frame 1";
//   input Real[3] n_y(unit = "1") "Vector in direction of y-axis of frame 2, resolved in frame 1";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = "1") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = "1") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = "1") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
//   protected Real[3] e_z_aux(unit = "1") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = "1") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation
//   input Real[3] e(unit = "1") "Normalized axis of rotation (must have length=1)";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   T := <matrix>[e[1] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + Modelica.Math.cos(angle) * -e[1] * e[2]) - -Modelica.Math.sin(angle) * e[3],(e[1] * e[3] + Modelica.Math.cos(angle) * -e[1] * e[3]) - Modelica.Math.sin(angle) * e[2];(e[2] * e[1] + Modelica.Math.cos(angle) * -e[2] * e[1]) - Modelica.Math.sin(angle) * e[3],e[2] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + Modelica.Math.cos(angle) * -e[2] * e[3]) - -Modelica.Math.sin(angle) * e[1];(e[3] * e[1] + Modelica.Math.cos(angle) * -e[3] * e[1]) - -Modelica.Math.sin(angle) * e[2],(e[3] * e[2] + Modelica.Math.cos(angle) * -e[3] * e[2]) - Modelica.Math.sin(angle) * e[1],e[3] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[3] ^ 2.0)];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector in frame 1";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.absoluteRotation
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R_rel "Orientation object to rotate frame 1 into frame 2";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   R2 := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[R_rel.T[1,1] * R1.T[1,1] + R_rel.T[1,2] * R1.T[2,1] + R_rel.T[1,3] * R1.T[3,1],R_rel.T[1,1] * R1.T[1,2] + R_rel.T[1,2] * R1.T[2,2] + R_rel.T[1,3] * R1.T[3,2],R_rel.T[1,1] * R1.T[1,3] + R_rel.T[1,2] * R1.T[2,3] + R_rel.T[1,3] * R1.T[3,3];R_rel.T[2,1] * R1.T[1,1] + R_rel.T[2,2] * R1.T[2,1] + R_rel.T[2,3] * R1.T[3,1],R_rel.T[2,1] * R1.T[1,2] + R_rel.T[2,2] * R1.T[2,2] + R_rel.T[2,3] * R1.T[3,2],R_rel.T[2,1] * R1.T[1,3] + R_rel.T[2,2] * R1.T[2,3] + R_rel.T[2,3] * R1.T[3,3];R_rel.T[3,1] * R1.T[1,1] + R_rel.T[3,2] * R1.T[2,1] + R_rel.T[3,3] * R1.T[3,1],R_rel.T[3,1] * R1.T[1,2] + R_rel.T[3,2] * R1.T[2,2] + R_rel.T[3,3] * R1.T[3,2],R_rel.T[3,1] * R1.T[1,3] + R_rel.T[3,2] * R1.T[2,3] + R_rel.T[3,3] * R1.T[3,3]],Modelica.Mechanics.MultiBody.Frames.resolve2(R_rel,{R1.w[1],R1.w[2],R1.w[3]}) + {R_rel.w[1],R_rel.w[2],R_rel.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2 "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 2";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations
//   input Integer[3] sequence = {1,2,3} "Sequence of rotations from frame 1 to frame 2 along axis sequence[i]";
//   input Real[3] angles(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angles around the axes defined in 'sequence'";
//   input Real[3] der_angles(quantity = "AngularVelocity", unit = "rad/s") "= der(angles)";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Integer[3] sequence = {1,2,3} "Sequence of rotations from frame 1 to frame 2 along axis sequence[i]";
//   input Real guessAngle1(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Select angles[1] such that |angles[1] - guessAngle1| is a minimum";
//   output Real[3] angles(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi";
//   protected Real[3] e1_1(unit = "1") "First rotation axis, resolved in frame 1";
//   protected Real[3] e2_1a(unit = "1") "Second rotation axis, resolved in frame 1a";
//   protected Real[3] e3_1(unit = "1") "Third rotation axis, resolved in frame 1";
//   protected Real[3] e3_2(unit = "1") "Third rotation axis, resolved in frame 2";
//   protected Real A "Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0";
//   protected Real B "Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0";
//   protected Real angle_1a(quantity = "Angle", unit = "rad", displayUnit = "deg") "Solution 1 for angles[1]";
//   protected Real angle_1b(quantity = "Angle", unit = "rad", displayUnit = "deg") "Solution 2 for angles[1]";
//   protected Real[3, 3] T_1a "Orientation object to rotate frame 1 into frame 1a";
// algorithm
//   assert( sequence[1] <> sequence[2] AND sequence[2] <> sequence[3], "input argument 'sequence[1:3]' is not valid");
//   e1_1 := /*/tp:REAL[3]/*/(if sequence[1] == 1 then {1,0,0} else if sequence[1] == 2 then {0,1,0} else {0,0,1});
//   e2_1a := /*/tp:REAL[3]/*/(if sequence[2] == 1 then {1,0,0} else if sequence[2] == 2 then {0,1,0} else {0,0,1});
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := /*/tp:REAL[3]/*/(if sequence[3] == 1 then {1,0,0} else if sequence[3] == 2 then {0,1,0} else {0,0,1});
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 1e-12 AND abs(B) <= 1e-12 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := Modelica.Math.atan2(A,-B);
//     angle_1b := Modelica.Math.atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis
//   input Integer axis(min = 1, max = 3) "Axis vector to be returned";
//   output Real[3] e(unit = "1") "Unit axis vector";
// algorithm
//   e := /*/tp:REAL[3]/*/(if axis == 1 then {1,0,0} else if axis == 2 then {0,1,0} else {0,0,1});
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   input Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity from frame 2 with respect to frame 1, resolved in frame 2";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_T
//   input Real[3, 3] T "Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)";
//   input Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity from frame 2 with respect to frame 1, resolved in frame 2 (skew(w)=T*der(transpose(T)))";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[T[1,1],T[1,2],T[1,3];T[2,1],T[2,2],T[2,3];T[3,1],T[3,2],T[3,3]],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_nxy
//   input Real[3] n_x(unit = "1") "Vector in direction of x-axis of frame 2, resolved in frame 1";
//   input Real[3] n_y(unit = "1") "Vector in direction of y-axis of frame 2, resolved in frame 1";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = "1") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = "1") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = "1") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
//   protected Real[3] e_z_aux(unit = "1") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = "1") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object such that frame 1 and frame 2 are identical";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotation
//   input Real[3] e(unit = "1") "Normalized axis of rotation (must have length=1)";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e";
//   input Real der_angle(quantity = "AngularVelocity", unit = "rad/s") "= der(angle)";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e[1] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + Modelica.Math.cos(angle) * -e[1] * e[2]) - -Modelica.Math.sin(angle) * e[3],(e[1] * e[3] + Modelica.Math.cos(angle) * -e[1] * e[3]) - Modelica.Math.sin(angle) * e[2];(e[2] * e[1] + Modelica.Math.cos(angle) * -e[2] * e[1]) - Modelica.Math.sin(angle) * e[3],e[2] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + Modelica.Math.cos(angle) * -e[2] * e[3]) - -Modelica.Math.sin(angle) * e[1];(e[3] * e[1] + Modelica.Math.cos(angle) * -e[3] * e[1]) - -Modelica.Math.sin(angle) * e[2],(e[3] * e[2] + Modelica.Math.cos(angle) * -e[3] * e[2]) - Modelica.Math.sin(angle) * e[1],e[3] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[3] ^ 2.0)],{der_angle * e[1],der_angle * e[2],der_angle * e[3]});
// end Modelica.Mechanics.MultiBody.Frames.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle
//   input Real[3] e(unit = "1") "Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)";
//   input Real[3] v1 "A vector v resolved in frame 1 (shall not be parallel to e)";
//   input Real[3] v2 "Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)";
//   output Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi";
// algorithm
//   angle := Modelica.Math.atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],(v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3]) - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector in frame 1";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveDyade1
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3, 3] D2 "Second order tensor resolved in frame 2";
//   output Real[3, 3] D1 "Second order tensor resolved in frame 1";
// algorithm
//   D1 := <matrix>[(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,1] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,1] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,1],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,2] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,2] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,2],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,3] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,3] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,3];(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,1] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,1] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,1],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,2] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,2] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,2],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,3] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,3] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,3];(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,1] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,1] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,1],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,2] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,2] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,2],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,3] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,3] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.resolveDyade1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveRelative
//   input Real[3] v1 "Vector in frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := Modelica.Mechanics.MultiBody.Frames.resolve2(R2,Modelica.Mechanics.MultiBody.Frames.resolve1(R1,{v1[1],v1[2],v1[3]}));
// end Modelica.Mechanics.MultiBody.Frames.resolveRelative;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} "Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used";
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration
//   input Real[3] r(quantity = "Length", unit = "m") "Position vector from world frame to actual point, resolved in world frame";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType "Type of gravity field";
//   input Real[3] g(quantity = "Acceleration", unit = "m/s2") "Constant gravity acceleration, resolved in world frame, if gravityType=1";
//   input Real mue(unit = "m3/s2") "Field constant of point gravity field, if gravityType=2";
//   output Real[3] gravity(quantity = "Acceleration", unit = "m/s2") "Gravity acceleration at point r, resolved in world frame";
// algorithm
//   gravity := if gravityType == GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// class Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2
//   Real world.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real world.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real world.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean world.enableAnimation = true "= true, if animation of all components is enabled";
//   parameter Boolean world.animateWorld = true "= true, if world coordinate system shall be visualized";
//   parameter Boolean world.animateGravity = true "= true, if gravity field shall be visualized (acceleration vector or field center)";
//   parameter String world.label1 = "x" "Label of horizontal axis in icon";
//   parameter String world.label2 = "y" "Label of vertical axis in icon";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = GravityTypes.UniformGravity "Type of gravity field";
//   parameter Real world.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Constant gravity acceleration";
//   parameter Real world.n[1](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.n[2](unit = "1") = -1.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.n[3](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.mue(unit = "m3/s2", min = 0.0) = 398600000000000.0 "Gravity field constant (default = field constant of earth)";
//   parameter Boolean world.driveTrainMechanics3D = true "= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account";
//   parameter Real world.axisLength(quantity = "Length", unit = "m", min = 0.0) = world.nominalLength / 2.0 "Length of world axes arrows";
//   parameter Real world.axisDiameter(quantity = "Length", unit = "m", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction "Diameter of world axes arrows";
//   parameter Boolean world.axisShowLabels = true "= true, if labels shall be shown";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] "Color of z-arrow";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] "Color of z-arrow";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] "Color of z-arrow";
//   parameter Real world.gravityArrowTail[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowTail[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowTail[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowLength(quantity = "Length", unit = "m") = world.axisLength / 2.0 "Length of gravity arrow";
//   parameter Real world.gravityArrowDiameter(quantity = "Length", unit = "m", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction "Diameter of gravity arrow";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 "Color of gravity arrow";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 "Color of gravity arrow";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 "Color of gravity arrow";
//   parameter Real world.gravitySphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 12742000.0 "Diameter of sphere representing gravity center (default = mean diameter of earth)";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 "Color of gravity sphere";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 "Color of gravity sphere";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 "Color of gravity sphere";
//   parameter Real world.nominalLength(quantity = "Length", unit = "m") = 1.0 "\"Nominal\" length of multi-body system";
//   parameter Real world.defaultAxisLength(quantity = "Length", unit = "m") = world.nominalLength / 5.0 "Default for length of a frame axis (but not world frame)";
//   parameter Real world.defaultJointLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a joint";
//   parameter Real world.defaultJointWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape representing a joint";
//   parameter Real world.defaultForceLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a force (e.g. damper)";
//   parameter Real world.defaultForceWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape represening a force (e.g. spring, bushing)";
//   parameter Real world.defaultBodyDiameter(quantity = "Length", unit = "m") = world.nominalLength / 9.0 "Default for diameter of sphere representing the center of mass of a body";
//   parameter Real world.defaultWidthFraction = 20.0 "Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)";
//   parameter Real world.defaultArrowDiameter(quantity = "Length", unit = "m") = world.nominalLength / 40.0 "Default for arrow diameter (e.g., of forces, torques, sensors)";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 "Default for arrow diameter of a coordinate system as a fraction of axis length";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 "Default reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real world.defaultN_to_m(unit = "N/m", min = 0.0) = 1000.0 "Default scaling of force arrows (length = force/defaultN_to_m)";
//   parameter Real world.defaultNm_to_m(unit = "N.m/m", min = 0.0) = 1000.0 "Default scaling of torque arrows (length = torque/defaultNm_to_m)";
//   protected parameter Integer world.ndim = if world.enableAnimation AND world.animateWorld then 1 else 0;
//   protected parameter Integer world.ndim2 = if world.enableAnimation AND world.animateWorld AND world.axisShowLabels then 1 else 0;
//   protected parameter Real world.headLength(quantity = "Length", unit = "m") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineLength(quantity = "Length", unit = "m") = max(0.0,world.axisLength - world.headLength);
//   protected parameter Real world.lineWidth(quantity = "Length", unit = "m") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
//   protected parameter Real world.labelStart(quantity = "Length", unit = "m") = 1.05 * world.axisLength;
//   parameter String world.x_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowLine.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
//   input Real world.x_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
//   input Real world.x_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
//   input Real world.x_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) "Color of shape";
//   input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) "Color of shape";
//   input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) "Color of shape";
//   input Real world.x_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
//   protected Real world.x_arrowLine.e_x[1](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[2](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[3](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.n_z_aux[1](unit = "1") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
//   protected Real world.x_arrowLine.n_z_aux[2](unit = "1") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
//   protected Real world.x_arrowLine.n_z_aux[3](unit = "1") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
//   protected Real world.x_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
//   protected Real world.x_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
//   protected Real world.x_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
//   protected output Real world.x_arrowLine.Form;
//   output Real world.x_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowLine.Material;
//   protected output Real world.x_arrowLine.Extra;
//   parameter String world.x_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_arrowHead.r[1](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_arrowHead.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.x_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
//   input Real world.x_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
//   input Real world.x_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
//   input Real world.x_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) "Color of shape";
//   input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) "Color of shape";
//   input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) "Color of shape";
//   input Real world.x_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
//   protected Real world.x_arrowHead.e_x[1](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[2](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[3](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.n_z_aux[1](unit = "1") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
//   protected Real world.x_arrowHead.n_z_aux[2](unit = "1") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
//   protected Real world.x_arrowHead.n_z_aux[3](unit = "1") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
//   protected Real world.x_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
//   protected Real world.x_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
//   protected Real world.x_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
//   protected output Real world.x_arrowHead.Form;
//   output Real world.x_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_arrowHead.Material;
//   protected output Real world.x_arrowHead.Extra;
//   input Real world.x_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.x_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.r_lines[1](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.x_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.x_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_x[1](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.x_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[1,2,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.x_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] "Color of cylinders";
//   input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] "Color of cylinders";
//   input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] "Color of cylinders";
//   input Real world.x_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer world.x_label.n = 2 "Number of cylinders";
//   protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][1];
//   protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][2];
//   protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][3];
//   protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][1];
//   protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][2];
//   protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][3];
//   protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][1];
//   protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][2];
//   protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][3];
//   protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][1];
//   protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][2];
//   protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][3];
//   protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][1];
//   protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][2];
//   protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][3];
//   protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][1];
//   protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][2];
//   protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][3];
//   protected Real world.x_label.r_abs[1](quantity = "Length", unit = "m") = world.x_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[1];
//   protected Real world.x_label.r_abs[2](quantity = "Length", unit = "m") = world.x_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[2];
//   protected Real world.x_label.r_abs[3](quantity = "Length", unit = "m") = world.x_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[3];
//   parameter String world.x_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[1].r[1](quantity = "Length", unit = "m") = world.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[1].r[2](quantity = "Length", unit = "m") = world.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[1].r[3](quantity = "Length", unit = "m") = world.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) "Length of visual object";
//   input Real world.x_label.cylinders[1].width(quantity = "Length", unit = "m") = world.x_label.diameter "Width of visual object";
//   input Real world.x_label.cylinders[1].height(quantity = "Length", unit = "m") = world.x_label.diameter "Height of visual object";
//   input Real world.x_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) "Color of shape";
//   input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) "Color of shape";
//   input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) "Color of shape";
//   input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real world.x_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].n_z_aux[1](unit = "1") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
//   protected Real world.x_label.cylinders[1].n_z_aux[2](unit = "1") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
//   protected Real world.x_label.cylinders[1].n_z_aux[3](unit = "1") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
//   protected Real world.x_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real world.x_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real world.x_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[1].Form;
//   output Real world.x_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[1].Material;
//   protected output Real world.x_label.cylinders[1].Extra;
//   parameter String world.x_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.x_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.x_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.x_label.cylinders[2].r[1](quantity = "Length", unit = "m") = world.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[2].r[2](quantity = "Length", unit = "m") = world.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[2].r[3](quantity = "Length", unit = "m") = world.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.x_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.x_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.x_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) "Length of visual object";
//   input Real world.x_label.cylinders[2].width(quantity = "Length", unit = "m") = world.x_label.diameter "Width of visual object";
//   input Real world.x_label.cylinders[2].height(quantity = "Length", unit = "m") = world.x_label.diameter "Height of visual object";
//   input Real world.x_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) "Color of shape";
//   input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) "Color of shape";
//   input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) "Color of shape";
//   input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.x_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real world.x_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].n_z_aux[1](unit = "1") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
//   protected Real world.x_label.cylinders[2].n_z_aux[2](unit = "1") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
//   protected Real world.x_label.cylinders[2].n_z_aux[3](unit = "1") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
//   protected Real world.x_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real world.x_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real world.x_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[2].Form;
//   output Real world.x_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.x_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.x_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.x_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.x_label.cylinders[2].Material;
//   protected output Real world.x_label.cylinders[2].Extra;
//   parameter String world.y_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowLine.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowLine.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowLine.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
//   input Real world.y_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
//   input Real world.y_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
//   input Real world.y_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) "Color of shape";
//   input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) "Color of shape";
//   input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) "Color of shape";
//   input Real world.y_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
//   protected Real world.y_arrowLine.e_x[1](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[2](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[3](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.n_z_aux[1](unit = "1") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
//   protected Real world.y_arrowLine.n_z_aux[2](unit = "1") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
//   protected Real world.y_arrowLine.n_z_aux[3](unit = "1") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
//   protected Real world.y_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
//   protected Real world.y_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
//   protected Real world.y_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
//   protected output Real world.y_arrowLine.Form;
//   output Real world.y_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowLine.Material;
//   protected output Real world.y_arrowLine.Extra;
//   parameter String world.y_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowHead.r[2](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowHead.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.y_arrowHead.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowHead.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
//   input Real world.y_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
//   input Real world.y_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
//   input Real world.y_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) "Color of shape";
//   input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) "Color of shape";
//   input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) "Color of shape";
//   input Real world.y_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
//   protected Real world.y_arrowHead.e_x[1](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[2](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[3](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.n_z_aux[1](unit = "1") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
//   protected Real world.y_arrowHead.n_z_aux[2](unit = "1") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
//   protected Real world.y_arrowHead.n_z_aux[3](unit = "1") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
//   protected Real world.y_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
//   protected Real world.y_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
//   protected Real world.y_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
//   protected output Real world.y_arrowHead.Form;
//   output Real world.y_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_arrowHead.Material;
//   protected output Real world.y_arrowHead.Extra;
//   input Real world.y_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.y_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.y_label.r_lines[2](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.y_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_x[2](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_y[1](unit = "1") = -1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_y[2](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.y_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[1,2,2](quantity = "Length", unit = "m") = 1.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,1,2](quantity = "Length", unit = "m") = 1.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,2,1](quantity = "Length", unit = "m") = 0.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.75 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.y_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] "Color of cylinders";
//   input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] "Color of cylinders";
//   input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] "Color of cylinders";
//   input Real world.y_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer world.y_label.n = 2 "Number of cylinders";
//   protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][1];
//   protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][2];
//   protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][3];
//   protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][1];
//   protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][2];
//   protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][3];
//   protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][1];
//   protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][2];
//   protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][3];
//   protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][1];
//   protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][2];
//   protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][3];
//   protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][1];
//   protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][2];
//   protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][3];
//   protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][1];
//   protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][2];
//   protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][3];
//   protected Real world.y_label.r_abs[1](quantity = "Length", unit = "m") = world.y_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[1];
//   protected Real world.y_label.r_abs[2](quantity = "Length", unit = "m") = world.y_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[2];
//   protected Real world.y_label.r_abs[3](quantity = "Length", unit = "m") = world.y_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[3];
//   parameter String world.y_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[1].r[1](quantity = "Length", unit = "m") = world.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[1].r[2](quantity = "Length", unit = "m") = world.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[1].r[3](quantity = "Length", unit = "m") = world.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) "Length of visual object";
//   input Real world.y_label.cylinders[1].width(quantity = "Length", unit = "m") = world.y_label.diameter "Width of visual object";
//   input Real world.y_label.cylinders[1].height(quantity = "Length", unit = "m") = world.y_label.diameter "Height of visual object";
//   input Real world.y_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) "Color of shape";
//   input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) "Color of shape";
//   input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) "Color of shape";
//   input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real world.y_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].n_z_aux[1](unit = "1") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
//   protected Real world.y_label.cylinders[1].n_z_aux[2](unit = "1") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
//   protected Real world.y_label.cylinders[1].n_z_aux[3](unit = "1") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
//   protected Real world.y_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real world.y_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real world.y_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[1].Form;
//   output Real world.y_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[1].Material;
//   protected output Real world.y_label.cylinders[1].Extra;
//   parameter String world.y_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.y_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.y_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.y_label.cylinders[2].r[1](quantity = "Length", unit = "m") = world.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[2].r[2](quantity = "Length", unit = "m") = world.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[2].r[3](quantity = "Length", unit = "m") = world.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.y_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.y_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.y_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) "Length of visual object";
//   input Real world.y_label.cylinders[2].width(quantity = "Length", unit = "m") = world.y_label.diameter "Width of visual object";
//   input Real world.y_label.cylinders[2].height(quantity = "Length", unit = "m") = world.y_label.diameter "Height of visual object";
//   input Real world.y_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) "Color of shape";
//   input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) "Color of shape";
//   input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) "Color of shape";
//   input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.y_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real world.y_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].n_z_aux[1](unit = "1") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
//   protected Real world.y_label.cylinders[2].n_z_aux[2](unit = "1") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
//   protected Real world.y_label.cylinders[2].n_z_aux[3](unit = "1") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
//   protected Real world.y_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real world.y_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real world.y_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[2].Form;
//   output Real world.y_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.y_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.y_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.y_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.y_label.cylinders[2].Material;
//   protected output Real world.y_label.cylinders[2].Extra;
//   parameter String world.z_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowLine.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
//   input Real world.z_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
//   input Real world.z_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
//   input Real world.z_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) "Color of shape";
//   input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) "Color of shape";
//   input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) "Color of shape";
//   input Real world.z_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
//   protected Real world.z_arrowLine.e_x[1](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[2](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[3](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.n_z_aux[1](unit = "1") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
//   protected Real world.z_arrowLine.n_z_aux[2](unit = "1") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
//   protected Real world.z_arrowLine.n_z_aux[3](unit = "1") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
//   protected Real world.z_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
//   protected Real world.z_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
//   protected Real world.z_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
//   protected output Real world.z_arrowLine.Form;
//   output Real world.z_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowLine.Material;
//   protected output Real world.z_arrowLine.Extra;
//   parameter String world.z_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowHead.r[3](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowHead.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real world.z_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
//   input Real world.z_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
//   input Real world.z_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
//   input Real world.z_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) "Color of shape";
//   input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) "Color of shape";
//   input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) "Color of shape";
//   input Real world.z_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
//   protected Real world.z_arrowHead.e_x[1](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[2](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[3](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.n_z_aux[1](unit = "1") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
//   protected Real world.z_arrowHead.n_z_aux[2](unit = "1") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
//   protected Real world.z_arrowHead.n_z_aux[3](unit = "1") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
//   protected Real world.z_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
//   protected Real world.z_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
//   protected Real world.z_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
//   protected output Real world.z_arrowHead.Form;
//   output Real world.z_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_arrowHead.Material;
//   protected output Real world.z_arrowHead.Extra;
//   input Real world.z_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.z_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.z_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.z_label.r_lines[3](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_x[3](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real world.z_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[1,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[2,2,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.lines[3,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real world.z_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
//   input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] "Color of cylinders";
//   input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] "Color of cylinders";
//   input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] "Color of cylinders";
//   input Real world.z_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer world.z_label.n = 3 "Number of cylinders";
//   protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][1];
//   protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][2];
//   protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][3];
//   protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][1];
//   protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][2];
//   protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][3];
//   protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][1];
//   protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][2];
//   protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][3];
//   protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][1];
//   protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][2];
//   protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][3];
//   protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][1];
//   protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][2];
//   protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][3];
//   protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][1];
//   protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][2];
//   protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][3];
//   protected Real world.z_label.r_abs[1](quantity = "Length", unit = "m") = world.z_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[1];
//   protected Real world.z_label.r_abs[2](quantity = "Length", unit = "m") = world.z_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[2];
//   protected Real world.z_label.r_abs[3](quantity = "Length", unit = "m") = world.z_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[3];
//   parameter String world.z_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[1].r[1](quantity = "Length", unit = "m") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[1].r[2](quantity = "Length", unit = "m") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[1].r[3](quantity = "Length", unit = "m") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) "Length of visual object";
//   input Real world.z_label.cylinders[1].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
//   input Real world.z_label.cylinders[1].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
//   input Real world.z_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) "Color of shape";
//   input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) "Color of shape";
//   input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) "Color of shape";
//   input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real world.z_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].n_z_aux[1](unit = "1") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
//   protected Real world.z_label.cylinders[1].n_z_aux[2](unit = "1") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
//   protected Real world.z_label.cylinders[1].n_z_aux[3](unit = "1") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
//   protected Real world.z_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real world.z_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real world.z_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[1].Form;
//   output Real world.z_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[1].Material;
//   protected output Real world.z_label.cylinders[1].Extra;
//   parameter String world.z_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[2].r[1](quantity = "Length", unit = "m") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[2].r[2](quantity = "Length", unit = "m") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[2].r[3](quantity = "Length", unit = "m") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) "Length of visual object";
//   input Real world.z_label.cylinders[2].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
//   input Real world.z_label.cylinders[2].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
//   input Real world.z_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) "Color of shape";
//   input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) "Color of shape";
//   input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) "Color of shape";
//   input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real world.z_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].n_z_aux[1](unit = "1") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
//   protected Real world.z_label.cylinders[2].n_z_aux[2](unit = "1") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
//   protected Real world.z_label.cylinders[2].n_z_aux[3](unit = "1") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
//   protected Real world.z_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real world.z_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real world.z_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[2].Form;
//   output Real world.z_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[2].Material;
//   protected output Real world.z_label.cylinders[2].Extra;
//   parameter String world.z_label.cylinders[3].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.z_label.cylinders[3].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real world.z_label.cylinders[3].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[3].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[3].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.z_label.cylinders[3].r[1](quantity = "Length", unit = "m") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[3].r[2](quantity = "Length", unit = "m") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[3].r[3](quantity = "Length", unit = "m") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.z_label.cylinders[3].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[3].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[3].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.z_label.cylinders[3].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.z_label.cylinders[3].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) "Length of visual object";
//   input Real world.z_label.cylinders[3].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
//   input Real world.z_label.cylinders[3].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
//   input Real world.z_label.cylinders[3].extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) "Color of shape";
//   input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) "Color of shape";
//   input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) "Color of shape";
//   input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.z_label.cylinders[3].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real world.z_label.cylinders[3].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].n_z_aux[1](unit = "1") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
//   protected Real world.z_label.cylinders[3].n_z_aux[2](unit = "1") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
//   protected Real world.z_label.cylinders[3].n_z_aux[3](unit = "1") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
//   protected Real world.z_label.cylinders[3].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real world.z_label.cylinders[3].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real world.z_label.cylinders[3].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[3].Form;
//   output Real world.z_label.cylinders[3].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.z_label.cylinders[3].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[3].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.z_label.cylinders[3].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.z_label.cylinders[3].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[3].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[3].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.z_label.cylinders[3].Material;
//   protected output Real world.z_label.cylinders[3].Extra;
//   protected parameter Real world.gravityHeadLength(quantity = "Length", unit = "m") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = "Length", unit = "m") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = "Length", unit = "m") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   parameter String world.gravityArrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.gravityArrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowLine.r_shape[1](quantity = "Length", unit = "m") = world.gravityArrowTail[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowLine.r_shape[2](quantity = "Length", unit = "m") = world.gravityArrowTail[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowLine.r_shape[3](quantity = "Length", unit = "m") = world.gravityArrowTail[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowLine.lengthDirection[1](unit = "1") = world.n[1] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowLine.lengthDirection[2](unit = "1") = world.n[2] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowLine.lengthDirection[3](unit = "1") = world.n[3] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowLine.length(quantity = "Length", unit = "m") = world.gravityLineLength "Length of visual object";
//   input Real world.gravityArrowLine.width(quantity = "Length", unit = "m") = world.gravityArrowDiameter "Width of visual object";
//   input Real world.gravityArrowLine.height(quantity = "Length", unit = "m") = world.gravityArrowDiameter "Height of visual object";
//   input Real world.gravityArrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.gravityArrowLine.color[1] = Real(world.gravityArrowColor[1]) "Color of shape";
//   input Real world.gravityArrowLine.color[2] = Real(world.gravityArrowColor[2]) "Color of shape";
//   input Real world.gravityArrowLine.color[3] = Real(world.gravityArrowColor[3]) "Color of shape";
//   input Real world.gravityArrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.gravityArrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.gravityArrowLine.lengthDirection[1],world.gravityArrowLine.lengthDirection[2],world.gravityArrowLine.lengthDirection[3]});
//   protected Real world.gravityArrowLine.e_x[1](unit = "1") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 1.0 else world.gravityArrowLine.lengthDirection[1] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[2](unit = "1") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[2] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[3](unit = "1") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[3] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.n_z_aux[1](unit = "1") = world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[3] - world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[2];
//   protected Real world.gravityArrowLine.n_z_aux[2](unit = "1") = world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[1] - world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[3];
//   protected Real world.gravityArrowLine.n_z_aux[3](unit = "1") = world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[2] - world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[1];
//   protected Real world.gravityArrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[1];
//   protected Real world.gravityArrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[2];
//   protected Real world.gravityArrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[3];
//   protected output Real world.gravityArrowLine.Form;
//   output Real world.gravityArrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.gravityArrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowLine.Material;
//   protected output Real world.gravityArrowLine.Extra;
//   parameter String world.gravityArrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real world.gravityArrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   input Real world.gravityArrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   input Real world.gravityArrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real world.gravityArrowHead.r_shape[1](quantity = "Length", unit = "m") = world.gravityArrowTail[1] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[1] * world.gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowHead.r_shape[2](quantity = "Length", unit = "m") = world.gravityArrowTail[2] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[2] * world.gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowHead.r_shape[3](quantity = "Length", unit = "m") = world.gravityArrowTail[3] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[3] * world.gravityLineLength "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real world.gravityArrowHead.lengthDirection[1](unit = "1") = world.n[1] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowHead.lengthDirection[2](unit = "1") = world.n[2] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowHead.lengthDirection[3](unit = "1") = world.n[3] "Vector in length direction, resolved in object frame";
//   input Real world.gravityArrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real world.gravityArrowHead.length(quantity = "Length", unit = "m") = world.gravityHeadLength "Length of visual object";
//   input Real world.gravityArrowHead.width(quantity = "Length", unit = "m") = world.gravityHeadWidth "Width of visual object";
//   input Real world.gravityArrowHead.height(quantity = "Length", unit = "m") = world.gravityHeadWidth "Height of visual object";
//   input Real world.gravityArrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real world.gravityArrowHead.color[1] = Real(world.gravityArrowColor[1]) "Color of shape";
//   input Real world.gravityArrowHead.color[2] = Real(world.gravityArrowColor[2]) "Color of shape";
//   input Real world.gravityArrowHead.color[3] = Real(world.gravityArrowColor[3]) "Color of shape";
//   input Real world.gravityArrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real world.gravityArrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.gravityArrowHead.lengthDirection[1],world.gravityArrowHead.lengthDirection[2],world.gravityArrowHead.lengthDirection[3]});
//   protected Real world.gravityArrowHead.e_x[1](unit = "1") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 1.0 else world.gravityArrowHead.lengthDirection[1] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[2](unit = "1") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[2] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[3](unit = "1") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[3] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.n_z_aux[1](unit = "1") = world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[3] - world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[2];
//   protected Real world.gravityArrowHead.n_z_aux[2](unit = "1") = world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[1] - world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[3];
//   protected Real world.gravityArrowHead.n_z_aux[3](unit = "1") = world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[2] - world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[1];
//   protected Real world.gravityArrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[1];
//   protected Real world.gravityArrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[2];
//   protected Real world.gravityArrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[3];
//   protected output Real world.gravityArrowHead.Form;
//   output Real world.gravityArrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real world.gravityArrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real world.gravityArrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real world.gravityArrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real world.gravityArrowHead.Material;
//   protected output Real world.gravityArrowHead.Extra;
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation AND world.animateGravity AND world.gravityType == 2 then 1 else 0;
//   output Real j1_phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "angle of revolute joint j1";
//   output Real j2_s(quantity = "Length", unit = "m") "distance of prismatic joint j2";
//   output Real j1_w(quantity = "AngularVelocity", unit = "rad/s") "axis speed of revolute joint j1";
//   output Real j2_v(quantity = "Velocity", unit = "m/s") "axis velocity of prismatic joint j2";
//   Real j1.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j1.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real j1.support.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j1.support.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real j1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real j1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real j1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean j1.useAxisFlange = true "= true, if axis flange is enabled";
//   parameter Boolean j1.animation = true "= true, if animation shall be enabled (show axis as cylinder)";
//   parameter Real j1.n[1](unit = "1") = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j1.n[2](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j1.n[3](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   constant Real j1.phi_offset(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Relative angle offset (angle = phi_offset + phi)";
//   parameter Real j1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinder representing the joint axis";
//   parameter Real j1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinder representing the joint axis";
//   input Integer j1.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinder representing the joint axis";
//   input Integer j1.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Integer j1.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Real j1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) j1.stateSelect = StateSelect.always "Priority to use joint angle phi and w=der(phi) as states";
//   Real j1.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Relative rotation angle from frame_a to frame_b";
//   Real j1.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "deg/s", start = 5.23598775598299, fixed = true, StateSelect = StateSelect.always) "First derivative of angle phi (relative angular velocity)";
//   Real j1.a(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Second derivative of angle phi (relative angular acceleration)";
//   Real j1.tau(quantity = "Torque", unit = "N.m") "Driving torque in direction of axis of rotation";
//   Real j1.angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "= phi_offset + phi";
//   protected parameter Real j1.e[1](unit = "1") = Modelica.Math.Vectors.normalize({j1.n[1],j1.n[2],j1.n[3]},1e-13)[1] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real j1.e[2](unit = "1") = Modelica.Math.Vectors.normalize({j1.n[1],j1.n[2],j1.n[3]},1e-13)[2] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real j1.e[3](unit = "1") = Modelica.Math.Vectors.normalize({j1.n[1],j1.n[2],j1.n[3]},1e-13)[3] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   Real j1.R_rel.T[1,1] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[1,2] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[1,3] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[2,1] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[2,2] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[2,3] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[3,1] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[3,2] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.T[3,3] "Transformation matrix from world frame to local frame";
//   Real j1.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j1.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   parameter String j1.cylinder.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real j1.cylinder.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real j1.cylinder.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real j1.cylinder.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real j1.cylinder.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real j1.cylinder.r[1](quantity = "Length", unit = "m") = j1.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real j1.cylinder.r[2](quantity = "Length", unit = "m") = j1.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real j1.cylinder.r[3](quantity = "Length", unit = "m") = j1.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real j1.cylinder.r_shape[1](quantity = "Length", unit = "m") = (-j1.cylinderLength) * j1.e[1] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real j1.cylinder.r_shape[2](quantity = "Length", unit = "m") = (-j1.cylinderLength) * j1.e[2] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real j1.cylinder.r_shape[3](quantity = "Length", unit = "m") = (-j1.cylinderLength) * j1.e[3] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real j1.cylinder.lengthDirection[1](unit = "1") = j1.e[1] "Vector in length direction, resolved in object frame";
//   input Real j1.cylinder.lengthDirection[2](unit = "1") = j1.e[2] "Vector in length direction, resolved in object frame";
//   input Real j1.cylinder.lengthDirection[3](unit = "1") = j1.e[3] "Vector in length direction, resolved in object frame";
//   input Real j1.cylinder.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real j1.cylinder.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real j1.cylinder.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real j1.cylinder.length(quantity = "Length", unit = "m") = j1.cylinderLength "Length of visual object";
//   input Real j1.cylinder.width(quantity = "Length", unit = "m") = j1.cylinderDiameter "Width of visual object";
//   input Real j1.cylinder.height(quantity = "Length", unit = "m") = j1.cylinderDiameter "Height of visual object";
//   input Real j1.cylinder.extra = 0.0 "Additional size data for some of the shape types";
//   input Real j1.cylinder.color[1] = Real(j1.cylinderColor[1]) "Color of shape";
//   input Real j1.cylinder.color[2] = Real(j1.cylinderColor[2]) "Color of shape";
//   input Real j1.cylinder.color[3] = Real(j1.cylinderColor[3]) "Color of shape";
//   input Real j1.cylinder.specularCoefficient = j1.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real j1.cylinder.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({j1.cylinder.lengthDirection[1],j1.cylinder.lengthDirection[2],j1.cylinder.lengthDirection[3]});
//   protected Real j1.cylinder.e_x[1](unit = "1") = if noEvent(j1.cylinder.abs_n_x < 1e-10) then 1.0 else j1.cylinder.lengthDirection[1] / j1.cylinder.abs_n_x;
//   protected Real j1.cylinder.e_x[2](unit = "1") = if noEvent(j1.cylinder.abs_n_x < 1e-10) then 0.0 else j1.cylinder.lengthDirection[2] / j1.cylinder.abs_n_x;
//   protected Real j1.cylinder.e_x[3](unit = "1") = if noEvent(j1.cylinder.abs_n_x < 1e-10) then 0.0 else j1.cylinder.lengthDirection[3] / j1.cylinder.abs_n_x;
//   protected Real j1.cylinder.n_z_aux[1](unit = "1") = j1.cylinder.e_x[2] * j1.cylinder.widthDirection[3] - j1.cylinder.e_x[3] * j1.cylinder.widthDirection[2];
//   protected Real j1.cylinder.n_z_aux[2](unit = "1") = j1.cylinder.e_x[3] * j1.cylinder.widthDirection[1] - j1.cylinder.e_x[1] * j1.cylinder.widthDirection[3];
//   protected Real j1.cylinder.n_z_aux[3](unit = "1") = j1.cylinder.e_x[1] * j1.cylinder.widthDirection[2] - j1.cylinder.e_x[2] * j1.cylinder.widthDirection[1];
//   protected Real j1.cylinder.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]},if noEvent(j1.cylinder.n_z_aux[1] ^ 2.0 + (j1.cylinder.n_z_aux[2] ^ 2.0 + j1.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {j1.cylinder.widthDirection[1],j1.cylinder.widthDirection[2],j1.cylinder.widthDirection[3]} else if noEvent(abs(j1.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]})[1];
//   protected Real j1.cylinder.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]},if noEvent(j1.cylinder.n_z_aux[1] ^ 2.0 + (j1.cylinder.n_z_aux[2] ^ 2.0 + j1.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {j1.cylinder.widthDirection[1],j1.cylinder.widthDirection[2],j1.cylinder.widthDirection[3]} else if noEvent(abs(j1.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]})[2];
//   protected Real j1.cylinder.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]},if noEvent(j1.cylinder.n_z_aux[1] ^ 2.0 + (j1.cylinder.n_z_aux[2] ^ 2.0 + j1.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {j1.cylinder.widthDirection[1],j1.cylinder.widthDirection[2],j1.cylinder.widthDirection[3]} else if noEvent(abs(j1.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]})[3];
//   protected output Real j1.cylinder.Form;
//   output Real j1.cylinder.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real j1.cylinder.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real j1.cylinder.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real j1.cylinder.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real j1.cylinder.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real j1.cylinder.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real j1.cylinder.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real j1.cylinder.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real j1.cylinder.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real j1.cylinder.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real j1.cylinder.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real j1.cylinder.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real j1.cylinder.Material;
//   protected output Real j1.cylinder.Extra;
//   parameter Real j1.fixed.phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
//   Real j1.fixed.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j1.fixed.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real j1.internalAxis.tau(quantity = "Torque", unit = "N.m") = j1.tau "External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)";
//   Real j1.internalAxis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "External support angle (= flange.phi)";
//   Real j1.internalAxis.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j1.internalAxis.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real j2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real j2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real j2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real j2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real j2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real j2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real j2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean j2.useAxisFlange = false "= true, if axis flange is enabled";
//   parameter Boolean j2.animation = true "= true, if animation shall be enabled";
//   parameter Real j2.n[1](unit = "1") = 1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j2.n[2](unit = "1") = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j2.n[3](unit = "1") = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   constant Real j2.s_offset(quantity = "Length", unit = "m") = 0.0 "Relative distance offset (distance between frame_a and frame_b = s_offset + s)";
//   parameter Real j2.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real j2.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real j2.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of box, resolved in frame_a";
//   parameter Real j2.boxWidth(quantity = "Length", unit = "m", min = 0.0) = 0.05 "Width of prismatic joint box";
//   parameter Real j2.boxHeight(quantity = "Length", unit = "m", min = 0.0) = j2.boxWidth "Height of prismatic joint box";
//   input Integer j2.boxColor[1](min = 0, max = 255) = 255 "Color of prismatic joint box";
//   input Integer j2.boxColor[2](min = 0, max = 255) = 0 "Color of prismatic joint box";
//   input Integer j2.boxColor[3](min = 0, max = 255) = 0 "Color of prismatic joint box";
//   input Real j2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) j2.stateSelect = StateSelect.prefer "Priority to use distance s and v=der(s) as states";
//   parameter Real j2.e[1](unit = "1") = Modelica.Math.Vectors.normalize({j2.n[1],j2.n[2],j2.n[3]},1e-13)[1] "Unit vector in direction of prismatic axis n";
//   parameter Real j2.e[2](unit = "1") = Modelica.Math.Vectors.normalize({j2.n[1],j2.n[2],j2.n[3]},1e-13)[2] "Unit vector in direction of prismatic axis n";
//   parameter Real j2.e[3](unit = "1") = Modelica.Math.Vectors.normalize({j2.n[1],j2.n[2],j2.n[3]},1e-13)[3] "Unit vector in direction of prismatic axis n";
//   Real j2.s(quantity = "Length", unit = "m", start = -0.2, fixed = true, StateSelect = StateSelect.prefer) "Relative distance between frame_a and frame_b";
//   Real j2.v(quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of s (relative velocity)";
//   Real j2.a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Second derivative of s (relative acceleration)";
//   Real j2.f(quantity = "Force", unit = "N") "Actuation force in direction of joint axis";
//   parameter String j2.box.shapeType = "box" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real j2.box.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real j2.box.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real j2.box.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real j2.box.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real j2.box.r[1](quantity = "Length", unit = "m") = j2.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real j2.box.r[2](quantity = "Length", unit = "m") = j2.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real j2.box.r[3](quantity = "Length", unit = "m") = j2.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real j2.box.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real j2.box.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real j2.box.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real j2.box.lengthDirection[1](unit = "1") = j2.e[1] "Vector in length direction, resolved in object frame";
//   input Real j2.box.lengthDirection[2](unit = "1") = j2.e[2] "Vector in length direction, resolved in object frame";
//   input Real j2.box.lengthDirection[3](unit = "1") = j2.e[3] "Vector in length direction, resolved in object frame";
//   input Real j2.box.widthDirection[1](unit = "1") = j2.boxWidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real j2.box.widthDirection[2](unit = "1") = j2.boxWidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real j2.box.widthDirection[3](unit = "1") = j2.boxWidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real j2.box.length(quantity = "Length", unit = "m") = if noEvent(abs(j2.s) > 1e-06) then j2.s else 1e-06 "Length of visual object";
//   input Real j2.box.width(quantity = "Length", unit = "m") = j2.boxWidth "Width of visual object";
//   input Real j2.box.height(quantity = "Length", unit = "m") = j2.boxHeight "Height of visual object";
//   input Real j2.box.extra = 0.0 "Additional size data for some of the shape types";
//   input Real j2.box.color[1] = Real(j2.boxColor[1]) "Color of shape";
//   input Real j2.box.color[2] = Real(j2.boxColor[2]) "Color of shape";
//   input Real j2.box.color[3] = Real(j2.boxColor[3]) "Color of shape";
//   input Real j2.box.specularCoefficient = j2.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real j2.box.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({j2.box.lengthDirection[1],j2.box.lengthDirection[2],j2.box.lengthDirection[3]});
//   protected Real j2.box.e_x[1](unit = "1") = if noEvent(j2.box.abs_n_x < 1e-10) then 1.0 else j2.box.lengthDirection[1] / j2.box.abs_n_x;
//   protected Real j2.box.e_x[2](unit = "1") = if noEvent(j2.box.abs_n_x < 1e-10) then 0.0 else j2.box.lengthDirection[2] / j2.box.abs_n_x;
//   protected Real j2.box.e_x[3](unit = "1") = if noEvent(j2.box.abs_n_x < 1e-10) then 0.0 else j2.box.lengthDirection[3] / j2.box.abs_n_x;
//   protected Real j2.box.n_z_aux[1](unit = "1") = j2.box.e_x[2] * j2.box.widthDirection[3] - j2.box.e_x[3] * j2.box.widthDirection[2];
//   protected Real j2.box.n_z_aux[2](unit = "1") = j2.box.e_x[3] * j2.box.widthDirection[1] - j2.box.e_x[1] * j2.box.widthDirection[3];
//   protected Real j2.box.n_z_aux[3](unit = "1") = j2.box.e_x[1] * j2.box.widthDirection[2] - j2.box.e_x[2] * j2.box.widthDirection[1];
//   protected Real j2.box.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({j2.box.e_x[1],j2.box.e_x[2],j2.box.e_x[3]},if noEvent(j2.box.n_z_aux[1] ^ 2.0 + (j2.box.n_z_aux[2] ^ 2.0 + j2.box.n_z_aux[3] ^ 2.0) > 1e-06) then {j2.box.widthDirection[1],j2.box.widthDirection[2],j2.box.widthDirection[3]} else if noEvent(abs(j2.box.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{j2.box.e_x[1],j2.box.e_x[2],j2.box.e_x[3]})[1];
//   protected Real j2.box.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({j2.box.e_x[1],j2.box.e_x[2],j2.box.e_x[3]},if noEvent(j2.box.n_z_aux[1] ^ 2.0 + (j2.box.n_z_aux[2] ^ 2.0 + j2.box.n_z_aux[3] ^ 2.0) > 1e-06) then {j2.box.widthDirection[1],j2.box.widthDirection[2],j2.box.widthDirection[3]} else if noEvent(abs(j2.box.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{j2.box.e_x[1],j2.box.e_x[2],j2.box.e_x[3]})[2];
//   protected Real j2.box.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({j2.box.e_x[1],j2.box.e_x[2],j2.box.e_x[3]},if noEvent(j2.box.n_z_aux[1] ^ 2.0 + (j2.box.n_z_aux[2] ^ 2.0 + j2.box.n_z_aux[3] ^ 2.0) > 1e-06) then {j2.box.widthDirection[1],j2.box.widthDirection[2],j2.box.widthDirection[3]} else if noEvent(abs(j2.box.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{j2.box.e_x[1],j2.box.e_x[2],j2.box.e_x[3]})[3];
//   protected output Real j2.box.Form;
//   output Real j2.box.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real j2.box.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real j2.box.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real j2.box.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real j2.box.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real j2.box.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real j2.box.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real j2.box.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real j2.box.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real j2.box.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real j2.box.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real j2.box.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real j2.box.Material;
//   protected output Real j2.box.Extra;
//   parameter Real j2.fixed.s0(quantity = "Length", unit = "m") = 0.0 "fixed offset position of housing";
//   Real j2.fixed.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j2.fixed.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real j2.internalAxis.f(quantity = "Force", unit = "N") = j2.f "External support force (must be computed via force balance in model where InternalSupport is used; = flange.f)";
//   Real j2.internalAxis.s(quantity = "Length", unit = "m") "External support position (= flange.s)";
//   Real j2.internalAxis.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j2.internalAxis.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean j2.constantForce.useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
//   Real j2.constantForce.s(quantity = "Length", unit = "m") = j2.constantForce.flange.s - j2.constantForce.s_support "distance between flange and support (= flange.s - support.s)";
//   Real j2.constantForce.flange.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j2.constantForce.flange.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   protected Real j2.constantForce.s_support(quantity = "Length", unit = "m") "Absolute position of support flange";
//   Real j2.constantForce.f(quantity = "Force", unit = "N") = j2.constantForce.flange.f "Accelerating force acting at flange (= flange.f)";
//   parameter Real j2.constantForce.f_constant(quantity = "Force", unit = "N") = 0.0 "Nominal force (if negative, force is acting as load)";
//   Real b1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b1.animation = true "= true, if animation shall be enabled (show cylinder between frame_a and frame_b)";
//   parameter Real b1.r[1](quantity = "Length", unit = "m", start = 0.1) = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b1.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.5 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b1.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.1 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b1.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to cylinder origin, resolved in frame_a";
//   parameter Real b1.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to cylinder origin, resolved in frame_a";
//   parameter Real b1.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to cylinder origin, resolved in frame_a";
//   parameter Real b1.lengthDirection[1](unit = "1") = b1.r[1] - b1.r_shape[1] "Vector in length direction of cylinder, resolved in frame_a";
//   parameter Real b1.lengthDirection[2](unit = "1") = b1.r[2] - b1.r_shape[2] "Vector in length direction of cylinder, resolved in frame_a";
//   parameter Real b1.lengthDirection[3](unit = "1") = b1.r[3] - b1.r_shape[3] "Vector in length direction of cylinder, resolved in frame_a";
//   parameter Real b1.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({b1.r[1] - b1.r_shape[1],b1.r[2] - b1.r_shape[2],b1.r[3] - b1.r_shape[3]}) "Length of cylinder";
//   parameter Real b1.diameter(quantity = "Length", unit = "m", min = 0.0) = 0.05 "Diameter of cylinder";
//   parameter Real b1.innerDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Inner diameter of cylinder (0 <= innerDiameter <= Diameter)";
//   parameter Real b1.density(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 7700.0 "Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)";
//   input Integer b1.color[1](min = 0, max = 255) = 0 "Color of cylinder";
//   input Integer b1.color[2](min = 0, max = 255) = 128 "Color of cylinder";
//   input Integer b1.color[3](min = 0, max = 255) = 255 "Color of cylinder";
//   input Real b1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real b1.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b1.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b1.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b1.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b1.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b1.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b1.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b1.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b1.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean b1.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real b1.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b1.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b1.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer b1.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b1.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b1.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean b1.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real b1.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b1.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b1.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean b1.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real b1.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b1.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b1.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Boolean b1.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean b1.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer b1.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b1.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b1.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   constant Real b1.pi = 3.14159265358979;
//   parameter Real b1.radius(quantity = "Length", unit = "m", min = 0.0) = b1.diameter / 2.0 "Radius of cylinder";
//   parameter Real b1.innerRadius(quantity = "Length", unit = "m", min = 0.0) = b1.innerDiameter / 2.0 "Inner-Radius of cylinder";
//   parameter Real b1.mo(quantity = "Mass", unit = "kg", min = 0.0) = 3.14159265358979 * (b1.density * (b1.length * b1.radius ^ 2.0)) "Mass of cylinder without hole";
//   parameter Real b1.mi(quantity = "Mass", unit = "kg", min = 0.0) = 3.14159265358979 * (b1.density * (b1.length * b1.innerRadius ^ 2.0)) "Mass of hole of cylinder";
//   parameter Real b1.I22(quantity = "MomentOfInertia", unit = "kg.m2") = b1.mo * (b1.length ^ 2.0 + 3.0 * b1.radius ^ 2.0) / 12.0 - b1.mi * (b1.length ^ 2.0 + 3.0 * b1.innerRadius ^ 2.0) / 12.0 "Inertia with respect to axis through center of mass, perpendicular to cylinder axis";
//   parameter Real b1.m(quantity = "Mass", unit = "kg", min = 0.0) = b1.mo - b1.mi "Mass of cylinder";
//   parameter Real b1.R.T[1,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[1,2] = 0.98058067569092 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[1,3] = 0.196116135138184 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[2,2] = 0.196116135138184 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[2,3] = -0.98058067569092 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[3,1] = -1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.T[3,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b1.r_CM[1](quantity = "Length", unit = "m") = Modelica.Math.Vectors.normalize({b1.r[1],b1.r[2],b1.r[3]},1e-13)[1] * b1.length / 2.0 "Position vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b1.r_CM[2](quantity = "Length", unit = "m") = Modelica.Math.Vectors.normalize({b1.r[1],b1.r[2],b1.r[3]},1e-13)[2] * b1.length / 2.0 "Position vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b1.r_CM[3](quantity = "Length", unit = "m") = Modelica.Math.Vectors.normalize({b1.r[1],b1.r[2],b1.r[3]},1e-13)[3] * b1.length / 2.0 "Position vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b1.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[1][1] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[1][2] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[1][3] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[2][1] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[2][2] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[2][3] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[3][1] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[3][2] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b1.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{b1.mo * b1.radius ^ 2.0 / 2.0 - b1.mi * b1.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[3][3] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   Real b1.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b1.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b1.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real b1.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = b1.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b1.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = b1.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b1.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = b1.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b1.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = b1.m "Mass of rigid body";
//   parameter Real b1.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = b1.I[1,1] " (1,1) element of inertia tensor";
//   parameter Real b1.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = b1.I[2,2] " (2,2) element of inertia tensor";
//   parameter Real b1.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = b1.I[3,3] " (3,3) element of inertia tensor";
//   parameter Real b1.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = b1.I[2,1] " (2,1) element of inertia tensor";
//   parameter Real b1.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = b1.I[3,1] " (3,1) element of inertia tensor";
//   parameter Real b1.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = b1.I[3,2] " (3,2) element of inertia tensor";
//   Real b1.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b1.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b1.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b1.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b1.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b1.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b1.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b1.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b1.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean b1.body.angles_fixed = b1.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real b1.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = b1.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b1.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = b1.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b1.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = b1.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer b1.body.sequence_start[1](min = 1, max = 3) = b1.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b1.body.sequence_start[2](min = 1, max = 3) = b1.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b1.body.sequence_start[3](min = 1, max = 3) = b1.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean b1.body.w_0_fixed = b1.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real b1.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = b1.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b1.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = b1.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b1.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = b1.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean b1.body.z_0_fixed = b1.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real b1.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = b1.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b1.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = b1.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b1.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = b1.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b1.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer b1.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer b1.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer b1.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real b1.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = b1.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer b1.body.cylinderColor[1](min = 0, max = 255) = b1.body.sphereColor[1] "Color of cylinder";
//   input Integer b1.body.cylinderColor[2](min = 0, max = 255) = b1.body.sphereColor[2] "Color of cylinder";
//   input Integer b1.body.cylinderColor[3](min = 0, max = 255) = b1.body.sphereColor[3] "Color of cylinder";
//   input Real b1.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean b1.body.enforceStates = b1.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean b1.body.useQuaternions = b1.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer b1.body.sequence_angleStates[1](min = 1, max = 3) = b1.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b1.body.sequence_angleStates[2](min = 1, max = 3) = b1.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b1.body.sequence_angleStates[3](min = 1, max = 3) = b1.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real b1.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_11 "inertia tensor";
//   parameter Real b1.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_21 "inertia tensor";
//   parameter Real b1.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_31 "inertia tensor";
//   parameter Real b1.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_21 "inertia tensor";
//   parameter Real b1.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_22 "inertia tensor";
//   parameter Real b1.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_32 "inertia tensor";
//   parameter Real b1.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_31 "inertia tensor";
//   parameter Real b1.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_32 "inertia tensor";
//   parameter Real b1.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = b1.body.I_33 "inertia tensor";
//   parameter Real b1.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b1.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b1.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b1.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b1.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real b1.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real b1.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real b1.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.w_0_start[1],b1.body.w_0_start[2],b1.body.w_0_start[3]})[1], fixed = b1.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real b1.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.w_0_start[1],b1.body.w_0_start[2],b1.body.w_0_start[3]})[2], fixed = b1.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real b1.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.w_0_start[1],b1.body.w_0_start[2],b1.body.w_0_start[3]})[3], fixed = b1.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real b1.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[1], fixed = b1.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real b1.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[2], fixed = b1.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real b1.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[3], fixed = b1.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real b1.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real b1.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real b1.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real b1.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real b1.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real b1.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real b1.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real b1.body.Q[1](start = b1.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real b1.body.Q[2](start = b1.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real b1.body.Q[3](start = b1.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real b1.body.Q[4](start = b1.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real b1.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if b1.body.sequence_start[1] == b1.body.sequence_angleStates[1] AND b1.body.sequence_start[2] == b1.body.sequence_angleStates[2] AND b1.body.sequence_start[3] == b1.body.sequence_angleStates[3] then b1.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b1.body.R_start,{b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real b1.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if b1.body.sequence_start[1] == b1.body.sequence_angleStates[1] AND b1.body.sequence_start[2] == b1.body.sequence_angleStates[2] AND b1.body.sequence_start[3] == b1.body.sequence_angleStates[3] then b1.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b1.body.R_start,{b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real b1.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if b1.body.sequence_start[1] == b1.body.sequence_angleStates[1] AND b1.body.sequence_start[2] == b1.body.sequence_angleStates[2] AND b1.body.sequence_start[3] == b1.body.sequence_angleStates[3] then b1.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b1.body.R_start,{b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real b1.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = b1.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real b1.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = b1.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real b1.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = b1.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real b1.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real b1.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real b1.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real b1.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real b1.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real b1.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   Real b1.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b1.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b1.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b1.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b1.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b1.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b1.frameTranslation.animation = b1.animation "= true, if animation shall be enabled";
//   parameter Real b1.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = b1.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b1.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = b1.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b1.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = b1.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String b1.frameTranslation.shapeType = "pipecylinder" " Type of shape";
//   parameter Real b1.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = b1.r_shape[1] " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b1.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = b1.r_shape[2] " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b1.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = b1.r_shape[3] " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b1.frameTranslation.lengthDirection[1](unit = "1") = b1.lengthDirection[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b1.frameTranslation.lengthDirection[2](unit = "1") = b1.lengthDirection[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b1.frameTranslation.lengthDirection[3](unit = "1") = b1.lengthDirection[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b1.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b1.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b1.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b1.frameTranslation.length(quantity = "Length", unit = "m") = b1.length " Length of shape";
//   parameter Real b1.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = b1.diameter " Width of shape";
//   parameter Real b1.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = b1.diameter " Height of shape.";
//   parameter Real b1.frameTranslation.extra = b1.innerDiameter / b1.diameter " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer b1.frameTranslation.color[1](min = 0, max = 255) = b1.color[1] " Color of shape";
//   input Integer b1.frameTranslation.color[2](min = 0, max = 255) = b1.color[2] " Color of shape";
//   input Integer b1.frameTranslation.color[3](min = 0, max = 255) = b1.color[3] " Color of shape";
//   input Real b1.frameTranslation.specularCoefficient = b1.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String b1.frameTranslation.shape.shapeType = b1.frameTranslation.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b1.frameTranslation.shape.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real b1.frameTranslation.shape.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real b1.frameTranslation.shape.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real b1.frameTranslation.shape.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real b1.frameTranslation.shape.r[1](quantity = "Length", unit = "m") = b1.frameTranslation.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b1.frameTranslation.shape.r[2](quantity = "Length", unit = "m") = b1.frameTranslation.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b1.frameTranslation.shape.r[3](quantity = "Length", unit = "m") = b1.frameTranslation.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b1.frameTranslation.shape.r_shape[1](quantity = "Length", unit = "m") = b1.frameTranslation.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b1.frameTranslation.shape.r_shape[2](quantity = "Length", unit = "m") = b1.frameTranslation.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b1.frameTranslation.shape.r_shape[3](quantity = "Length", unit = "m") = b1.frameTranslation.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b1.frameTranslation.shape.lengthDirection[1](unit = "1") = b1.frameTranslation.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b1.frameTranslation.shape.lengthDirection[2](unit = "1") = b1.frameTranslation.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b1.frameTranslation.shape.lengthDirection[3](unit = "1") = b1.frameTranslation.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b1.frameTranslation.shape.widthDirection[1](unit = "1") = b1.frameTranslation.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b1.frameTranslation.shape.widthDirection[2](unit = "1") = b1.frameTranslation.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b1.frameTranslation.shape.widthDirection[3](unit = "1") = b1.frameTranslation.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b1.frameTranslation.shape.length(quantity = "Length", unit = "m") = b1.frameTranslation.length "Length of visual object";
//   input Real b1.frameTranslation.shape.width(quantity = "Length", unit = "m") = b1.frameTranslation.width "Width of visual object";
//   input Real b1.frameTranslation.shape.height(quantity = "Length", unit = "m") = b1.frameTranslation.height "Height of visual object";
//   input Real b1.frameTranslation.shape.extra = b1.frameTranslation.extra "Additional size data for some of the shape types";
//   input Real b1.frameTranslation.shape.color[1] = Real(b1.frameTranslation.color[1]) "Color of shape";
//   input Real b1.frameTranslation.shape.color[2] = Real(b1.frameTranslation.color[2]) "Color of shape";
//   input Real b1.frameTranslation.shape.color[3] = Real(b1.frameTranslation.color[3]) "Color of shape";
//   input Real b1.frameTranslation.shape.specularCoefficient = b1.frameTranslation.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real b1.frameTranslation.shape.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({b1.frameTranslation.shape.lengthDirection[1],b1.frameTranslation.shape.lengthDirection[2],b1.frameTranslation.shape.lengthDirection[3]});
//   protected Real b1.frameTranslation.shape.e_x[1](unit = "1") = if noEvent(b1.frameTranslation.shape.abs_n_x < 1e-10) then 1.0 else b1.frameTranslation.shape.lengthDirection[1] / b1.frameTranslation.shape.abs_n_x;
//   protected Real b1.frameTranslation.shape.e_x[2](unit = "1") = if noEvent(b1.frameTranslation.shape.abs_n_x < 1e-10) then 0.0 else b1.frameTranslation.shape.lengthDirection[2] / b1.frameTranslation.shape.abs_n_x;
//   protected Real b1.frameTranslation.shape.e_x[3](unit = "1") = if noEvent(b1.frameTranslation.shape.abs_n_x < 1e-10) then 0.0 else b1.frameTranslation.shape.lengthDirection[3] / b1.frameTranslation.shape.abs_n_x;
//   protected Real b1.frameTranslation.shape.n_z_aux[1](unit = "1") = b1.frameTranslation.shape.e_x[2] * b1.frameTranslation.shape.widthDirection[3] - b1.frameTranslation.shape.e_x[3] * b1.frameTranslation.shape.widthDirection[2];
//   protected Real b1.frameTranslation.shape.n_z_aux[2](unit = "1") = b1.frameTranslation.shape.e_x[3] * b1.frameTranslation.shape.widthDirection[1] - b1.frameTranslation.shape.e_x[1] * b1.frameTranslation.shape.widthDirection[3];
//   protected Real b1.frameTranslation.shape.n_z_aux[3](unit = "1") = b1.frameTranslation.shape.e_x[1] * b1.frameTranslation.shape.widthDirection[2] - b1.frameTranslation.shape.e_x[2] * b1.frameTranslation.shape.widthDirection[1];
//   protected Real b1.frameTranslation.shape.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]},if noEvent(b1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.frameTranslation.shape.widthDirection[1],b1.frameTranslation.shape.widthDirection[2],b1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b1.frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]})[1];
//   protected Real b1.frameTranslation.shape.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]},if noEvent(b1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.frameTranslation.shape.widthDirection[1],b1.frameTranslation.shape.widthDirection[2],b1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b1.frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]})[2];
//   protected Real b1.frameTranslation.shape.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]},if noEvent(b1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.frameTranslation.shape.widthDirection[1],b1.frameTranslation.shape.widthDirection[2],b1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b1.frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]})[3];
//   protected output Real b1.frameTranslation.shape.Form;
//   output Real b1.frameTranslation.shape.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real b1.frameTranslation.shape.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real b1.frameTranslation.shape.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real b1.frameTranslation.shape.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real b1.frameTranslation.shape.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real b1.frameTranslation.shape.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real b1.frameTranslation.shape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b1.frameTranslation.shape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b1.frameTranslation.shape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real b1.frameTranslation.shape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b1.frameTranslation.shape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b1.frameTranslation.shape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b1.frameTranslation.shape.Material;
//   protected output Real b1.frameTranslation.shape.Extra;
//   Real b2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b2.animation = true "= true, if animation shall be enabled (show cylinder between frame_a and frame_b)";
//   parameter Real b2.r[1](quantity = "Length", unit = "m", start = 0.1) = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b2.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.2 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b2.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b2.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to cylinder origin, resolved in frame_a";
//   parameter Real b2.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to cylinder origin, resolved in frame_a";
//   parameter Real b2.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to cylinder origin, resolved in frame_a";
//   parameter Real b2.lengthDirection[1](unit = "1") = b2.r[1] - b2.r_shape[1] "Vector in length direction of cylinder, resolved in frame_a";
//   parameter Real b2.lengthDirection[2](unit = "1") = b2.r[2] - b2.r_shape[2] "Vector in length direction of cylinder, resolved in frame_a";
//   parameter Real b2.lengthDirection[3](unit = "1") = b2.r[3] - b2.r_shape[3] "Vector in length direction of cylinder, resolved in frame_a";
//   parameter Real b2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({b2.r[1] - b2.r_shape[1],b2.r[2] - b2.r_shape[2],b2.r[3] - b2.r_shape[3]}) "Length of cylinder";
//   parameter Real b2.diameter(quantity = "Length", unit = "m", min = 0.0) = 0.05 "Diameter of cylinder";
//   parameter Real b2.innerDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Inner diameter of cylinder (0 <= innerDiameter <= Diameter)";
//   parameter Real b2.density(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 7700.0 "Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)";
//   input Integer b2.color[1](min = 0, max = 255) = 0 "Color of cylinder";
//   input Integer b2.color[2](min = 0, max = 255) = 128 "Color of cylinder";
//   input Integer b2.color[3](min = 0, max = 255) = 255 "Color of cylinder";
//   input Real b2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real b2.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b2.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b2.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b2.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b2.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b2.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b2.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b2.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b2.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean b2.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real b2.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b2.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b2.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer b2.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b2.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b2.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean b2.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real b2.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b2.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b2.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean b2.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real b2.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b2.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b2.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Boolean b2.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean b2.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer b2.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b2.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b2.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   constant Real b2.pi = 3.14159265358979;
//   parameter Real b2.radius(quantity = "Length", unit = "m", min = 0.0) = b2.diameter / 2.0 "Radius of cylinder";
//   parameter Real b2.innerRadius(quantity = "Length", unit = "m", min = 0.0) = b2.innerDiameter / 2.0 "Inner-Radius of cylinder";
//   parameter Real b2.mo(quantity = "Mass", unit = "kg", min = 0.0) = 3.14159265358979 * (b2.density * (b2.length * b2.radius ^ 2.0)) "Mass of cylinder without hole";
//   parameter Real b2.mi(quantity = "Mass", unit = "kg", min = 0.0) = 3.14159265358979 * (b2.density * (b2.length * b2.innerRadius ^ 2.0)) "Mass of hole of cylinder";
//   parameter Real b2.I22(quantity = "MomentOfInertia", unit = "kg.m2") = b2.mo * (b2.length ^ 2.0 + 3.0 * b2.radius ^ 2.0) / 12.0 - b2.mi * (b2.length ^ 2.0 + 3.0 * b2.innerRadius ^ 2.0) / 12.0 "Inertia with respect to axis through center of mass, perpendicular to cylinder axis";
//   parameter Real b2.m(quantity = "Mass", unit = "kg", min = 0.0) = b2.mo - b2.mi "Mass of cylinder";
//   parameter Real b2.R.T[1,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[1,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[2,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[2,2] = -0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.T[3,3] = -1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b2.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b2.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b2.r_CM[1](quantity = "Length", unit = "m") = Modelica.Math.Vectors.normalize({b2.r[1],b2.r[2],b2.r[3]},1e-13)[1] * b2.length / 2.0 "Position vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b2.r_CM[2](quantity = "Length", unit = "m") = Modelica.Math.Vectors.normalize({b2.r[1],b2.r[2],b2.r[3]},1e-13)[2] * b2.length / 2.0 "Position vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b2.r_CM[3](quantity = "Length", unit = "m") = Modelica.Math.Vectors.normalize({b2.r[1],b2.r[2],b2.r[3]},1e-13)[3] * b2.length / 2.0 "Position vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b2.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[1][1] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[1][2] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[1][3] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[2][1] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[2][2] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[2][3] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[3][1] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[3][2] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   parameter Real b2.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{b2.mo * b2.radius ^ 2.0 / 2.0 - b2.mi * b2.innerRadius ^ 2.0 / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[3][3] "Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a";
//   Real b2.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b2.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b2.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real b2.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = b2.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b2.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = b2.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b2.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = b2.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b2.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = b2.m "Mass of rigid body";
//   parameter Real b2.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = b2.I[1,1] " (1,1) element of inertia tensor";
//   parameter Real b2.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = b2.I[2,2] " (2,2) element of inertia tensor";
//   parameter Real b2.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = b2.I[3,3] " (3,3) element of inertia tensor";
//   parameter Real b2.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = b2.I[2,1] " (2,1) element of inertia tensor";
//   parameter Real b2.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = b2.I[3,1] " (3,1) element of inertia tensor";
//   parameter Real b2.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = b2.I[3,2] " (3,2) element of inertia tensor";
//   Real b2.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b2.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b2.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real b2.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b2.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b2.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real b2.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b2.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real b2.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean b2.body.angles_fixed = b2.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real b2.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = b2.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b2.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = b2.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real b2.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = b2.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer b2.body.sequence_start[1](min = 1, max = 3) = b2.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b2.body.sequence_start[2](min = 1, max = 3) = b2.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer b2.body.sequence_start[3](min = 1, max = 3) = b2.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean b2.body.w_0_fixed = b2.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real b2.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = b2.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b2.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = b2.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real b2.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = b2.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean b2.body.z_0_fixed = b2.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real b2.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = b2.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b2.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = b2.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b2.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = b2.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real b2.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer b2.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer b2.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer b2.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real b2.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = b2.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer b2.body.cylinderColor[1](min = 0, max = 255) = b2.body.sphereColor[1] "Color of cylinder";
//   input Integer b2.body.cylinderColor[2](min = 0, max = 255) = b2.body.sphereColor[2] "Color of cylinder";
//   input Integer b2.body.cylinderColor[3](min = 0, max = 255) = b2.body.sphereColor[3] "Color of cylinder";
//   input Real b2.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean b2.body.enforceStates = b2.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean b2.body.useQuaternions = b2.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer b2.body.sequence_angleStates[1](min = 1, max = 3) = b2.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b2.body.sequence_angleStates[2](min = 1, max = 3) = b2.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer b2.body.sequence_angleStates[3](min = 1, max = 3) = b2.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real b2.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_11 "inertia tensor";
//   parameter Real b2.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_21 "inertia tensor";
//   parameter Real b2.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_31 "inertia tensor";
//   parameter Real b2.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_21 "inertia tensor";
//   parameter Real b2.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_22 "inertia tensor";
//   parameter Real b2.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_32 "inertia tensor";
//   parameter Real b2.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_31 "inertia tensor";
//   parameter Real b2.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_32 "inertia tensor";
//   parameter Real b2.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = b2.body.I_33 "inertia tensor";
//   parameter Real b2.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real b2.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b2.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b2.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real b2.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real b2.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real b2.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real b2.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.w_0_start[1],b2.body.w_0_start[2],b2.body.w_0_start[3]})[1], fixed = b2.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real b2.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.w_0_start[1],b2.body.w_0_start[2],b2.body.w_0_start[3]})[2], fixed = b2.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real b2.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.w_0_start[1],b2.body.w_0_start[2],b2.body.w_0_start[3]})[3], fixed = b2.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real b2.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[1], fixed = b2.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real b2.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[2], fixed = b2.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real b2.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[3], fixed = b2.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real b2.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real b2.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real b2.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real b2.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real b2.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real b2.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real b2.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real b2.body.Q[1](start = b2.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real b2.body.Q[2](start = b2.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real b2.body.Q[3](start = b2.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real b2.body.Q[4](start = b2.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real b2.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if b2.body.sequence_start[1] == b2.body.sequence_angleStates[1] AND b2.body.sequence_start[2] == b2.body.sequence_angleStates[2] AND b2.body.sequence_start[3] == b2.body.sequence_angleStates[3] then b2.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b2.body.R_start,{b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real b2.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if b2.body.sequence_start[1] == b2.body.sequence_angleStates[1] AND b2.body.sequence_start[2] == b2.body.sequence_angleStates[2] AND b2.body.sequence_start[3] == b2.body.sequence_angleStates[3] then b2.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b2.body.R_start,{b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real b2.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if b2.body.sequence_start[1] == b2.body.sequence_angleStates[1] AND b2.body.sequence_start[2] == b2.body.sequence_angleStates[2] AND b2.body.sequence_start[3] == b2.body.sequence_angleStates[3] then b2.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b2.body.R_start,{b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real b2.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = b2.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real b2.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = b2.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real b2.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = b2.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real b2.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real b2.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real b2.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real b2.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real b2.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real b2.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   Real b2.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b2.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b2.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b2.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b2.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b2.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b2.frameTranslation.animation = b2.animation "= true, if animation shall be enabled";
//   parameter Real b2.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = b2.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b2.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = b2.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b2.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = b2.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String b2.frameTranslation.shapeType = "pipecylinder" " Type of shape";
//   parameter Real b2.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = b2.r_shape[1] " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b2.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = b2.r_shape[2] " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b2.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = b2.r_shape[3] " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b2.frameTranslation.lengthDirection[1](unit = "1") = b2.lengthDirection[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b2.frameTranslation.lengthDirection[2](unit = "1") = b2.lengthDirection[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b2.frameTranslation.lengthDirection[3](unit = "1") = b2.lengthDirection[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b2.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b2.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b2.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b2.frameTranslation.length(quantity = "Length", unit = "m") = b2.length " Length of shape";
//   parameter Real b2.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = b2.diameter " Width of shape";
//   parameter Real b2.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = b2.diameter " Height of shape.";
//   parameter Real b2.frameTranslation.extra = b2.innerDiameter / b2.diameter " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer b2.frameTranslation.color[1](min = 0, max = 255) = b2.color[1] " Color of shape";
//   input Integer b2.frameTranslation.color[2](min = 0, max = 255) = b2.color[2] " Color of shape";
//   input Integer b2.frameTranslation.color[3](min = 0, max = 255) = b2.color[3] " Color of shape";
//   input Real b2.frameTranslation.specularCoefficient = b2.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String b2.frameTranslation.shape.shapeType = b2.frameTranslation.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b2.frameTranslation.shape.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real b2.frameTranslation.shape.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real b2.frameTranslation.shape.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real b2.frameTranslation.shape.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real b2.frameTranslation.shape.r[1](quantity = "Length", unit = "m") = b2.frameTranslation.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b2.frameTranslation.shape.r[2](quantity = "Length", unit = "m") = b2.frameTranslation.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b2.frameTranslation.shape.r[3](quantity = "Length", unit = "m") = b2.frameTranslation.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b2.frameTranslation.shape.r_shape[1](quantity = "Length", unit = "m") = b2.frameTranslation.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b2.frameTranslation.shape.r_shape[2](quantity = "Length", unit = "m") = b2.frameTranslation.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b2.frameTranslation.shape.r_shape[3](quantity = "Length", unit = "m") = b2.frameTranslation.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b2.frameTranslation.shape.lengthDirection[1](unit = "1") = b2.frameTranslation.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b2.frameTranslation.shape.lengthDirection[2](unit = "1") = b2.frameTranslation.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b2.frameTranslation.shape.lengthDirection[3](unit = "1") = b2.frameTranslation.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b2.frameTranslation.shape.widthDirection[1](unit = "1") = b2.frameTranslation.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b2.frameTranslation.shape.widthDirection[2](unit = "1") = b2.frameTranslation.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b2.frameTranslation.shape.widthDirection[3](unit = "1") = b2.frameTranslation.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b2.frameTranslation.shape.length(quantity = "Length", unit = "m") = b2.frameTranslation.length "Length of visual object";
//   input Real b2.frameTranslation.shape.width(quantity = "Length", unit = "m") = b2.frameTranslation.width "Width of visual object";
//   input Real b2.frameTranslation.shape.height(quantity = "Length", unit = "m") = b2.frameTranslation.height "Height of visual object";
//   input Real b2.frameTranslation.shape.extra = b2.frameTranslation.extra "Additional size data for some of the shape types";
//   input Real b2.frameTranslation.shape.color[1] = Real(b2.frameTranslation.color[1]) "Color of shape";
//   input Real b2.frameTranslation.shape.color[2] = Real(b2.frameTranslation.color[2]) "Color of shape";
//   input Real b2.frameTranslation.shape.color[3] = Real(b2.frameTranslation.color[3]) "Color of shape";
//   input Real b2.frameTranslation.shape.specularCoefficient = b2.frameTranslation.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real b2.frameTranslation.shape.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({b2.frameTranslation.shape.lengthDirection[1],b2.frameTranslation.shape.lengthDirection[2],b2.frameTranslation.shape.lengthDirection[3]});
//   protected Real b2.frameTranslation.shape.e_x[1](unit = "1") = if noEvent(b2.frameTranslation.shape.abs_n_x < 1e-10) then 1.0 else b2.frameTranslation.shape.lengthDirection[1] / b2.frameTranslation.shape.abs_n_x;
//   protected Real b2.frameTranslation.shape.e_x[2](unit = "1") = if noEvent(b2.frameTranslation.shape.abs_n_x < 1e-10) then 0.0 else b2.frameTranslation.shape.lengthDirection[2] / b2.frameTranslation.shape.abs_n_x;
//   protected Real b2.frameTranslation.shape.e_x[3](unit = "1") = if noEvent(b2.frameTranslation.shape.abs_n_x < 1e-10) then 0.0 else b2.frameTranslation.shape.lengthDirection[3] / b2.frameTranslation.shape.abs_n_x;
//   protected Real b2.frameTranslation.shape.n_z_aux[1](unit = "1") = b2.frameTranslation.shape.e_x[2] * b2.frameTranslation.shape.widthDirection[3] - b2.frameTranslation.shape.e_x[3] * b2.frameTranslation.shape.widthDirection[2];
//   protected Real b2.frameTranslation.shape.n_z_aux[2](unit = "1") = b2.frameTranslation.shape.e_x[3] * b2.frameTranslation.shape.widthDirection[1] - b2.frameTranslation.shape.e_x[1] * b2.frameTranslation.shape.widthDirection[3];
//   protected Real b2.frameTranslation.shape.n_z_aux[3](unit = "1") = b2.frameTranslation.shape.e_x[1] * b2.frameTranslation.shape.widthDirection[2] - b2.frameTranslation.shape.e_x[2] * b2.frameTranslation.shape.widthDirection[1];
//   protected Real b2.frameTranslation.shape.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({b2.frameTranslation.shape.e_x[1],b2.frameTranslation.shape.e_x[2],b2.frameTranslation.shape.e_x[3]},if noEvent(b2.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b2.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b2.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.frameTranslation.shape.widthDirection[1],b2.frameTranslation.shape.widthDirection[2],b2.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b2.frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{b2.frameTranslation.shape.e_x[1],b2.frameTranslation.shape.e_x[2],b2.frameTranslation.shape.e_x[3]})[1];
//   protected Real b2.frameTranslation.shape.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({b2.frameTranslation.shape.e_x[1],b2.frameTranslation.shape.e_x[2],b2.frameTranslation.shape.e_x[3]},if noEvent(b2.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b2.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b2.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.frameTranslation.shape.widthDirection[1],b2.frameTranslation.shape.widthDirection[2],b2.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b2.frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{b2.frameTranslation.shape.e_x[1],b2.frameTranslation.shape.e_x[2],b2.frameTranslation.shape.e_x[3]})[2];
//   protected Real b2.frameTranslation.shape.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({b2.frameTranslation.shape.e_x[1],b2.frameTranslation.shape.e_x[2],b2.frameTranslation.shape.e_x[3]},if noEvent(b2.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b2.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b2.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.frameTranslation.shape.widthDirection[1],b2.frameTranslation.shape.widthDirection[2],b2.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b2.frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{b2.frameTranslation.shape.e_x[1],b2.frameTranslation.shape.e_x[2],b2.frameTranslation.shape.e_x[3]})[3];
//   protected output Real b2.frameTranslation.shape.Form;
//   output Real b2.frameTranslation.shape.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real b2.frameTranslation.shape.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real b2.frameTranslation.shape.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real b2.frameTranslation.shape.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real b2.frameTranslation.shape.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real b2.frameTranslation.shape.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real b2.frameTranslation.shape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b2.frameTranslation.shape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b2.frameTranslation.shape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real b2.frameTranslation.shape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b2.frameTranslation.shape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b2.frameTranslation.shape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b2.frameTranslation.shape.Material;
//   protected output Real b2.frameTranslation.shape.Extra;
//   Real universalSpherical.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real universalSpherical.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real universalSpherical.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real universalSpherical.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean universalSpherical.animation = true "= true, if animation shall be enabled";
//   parameter Boolean universalSpherical.showUniversalAxes = true " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean universalSpherical.computeRodLength = true "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real universalSpherical.n1_a[1](unit = "1") = 0.0 "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real universalSpherical.n1_a[2](unit = "1") = 1.0 "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real universalSpherical.n1_a[3](unit = "1") = 0.0 "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real universalSpherical.rRod_ia[1](quantity = "Length", unit = "m") = -1.0 "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real universalSpherical.rRod_ia[2](quantity = "Length", unit = "m") = 0.3 "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real universalSpherical.rRod_ia[3](quantity = "Length", unit = "m") = 0.1 "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real universalSpherical.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of spheres representing the universal and the spherical joint";
//   input Integer universalSpherical.sphereColor[1](min = 0, max = 255) = 255 "Color of spheres representing the universal and the spherical joint";
//   input Integer universalSpherical.sphereColor[2](min = 0, max = 255) = 0 "Color of spheres representing the universal and the spherical joint";
//   input Integer universalSpherical.sphereColor[3](min = 0, max = 255) = 0 "Color of spheres representing the universal and the spherical joint";
//   parameter String universalSpherical.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real universalSpherical.rodWidth(quantity = "Length", unit = "m", min = 0.0) = universalSpherical.sphereDiameter / 2.0 "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real universalSpherical.rodHeight(quantity = "Length", unit = "m", min = 0.0) = universalSpherical.rodWidth "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real universalSpherical.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer universalSpherical.rodColor[1](min = 0, max = 255) = 155 "Color of rod shape connecting the universal and the spherical joints";
//   input Integer universalSpherical.rodColor[2](min = 0, max = 255) = 155 "Color of rod shape connecting the universal and the spherical joints";
//   input Integer universalSpherical.rodColor[3](min = 0, max = 255) = 155 "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real universalSpherical.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real universalSpherical.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer universalSpherical.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer universalSpherical.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer universalSpherical.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Real universalSpherical.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean universalSpherical.kinematicConstraint = true "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real universalSpherical.constraintResidue = universalSpherical.rRod_0[1] ^ 2.0 + (universalSpherical.rRod_0[2] ^ 2.0 + universalSpherical.rRod_0[3] ^ 2.0) - universalSpherical.rodLength ^ 2.0 "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean universalSpherical.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real universalSpherical.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real universalSpherical.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT universalSpherical.computeRodLength) = Modelica.Math.Vectors.length({universalSpherical.rRod_ia[1],universalSpherical.rRod_ia[2],universalSpherical.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real universalSpherical.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({universalSpherical.rRod_ia[1],universalSpherical.rRod_ia[2],universalSpherical.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real universalSpherical.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({universalSpherical.rRod_ia[1],universalSpherical.rRod_ia[2],universalSpherical.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real universalSpherical.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({universalSpherical.rRod_ia[1],universalSpherical.rRod_ia[2],universalSpherical.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real universalSpherical.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({universalSpherical.n1_a[2] * universalSpherical.eRod_ia[3] - universalSpherical.n1_a[3] * universalSpherical.eRod_ia[2],universalSpherical.n1_a[3] * universalSpherical.eRod_ia[1] - universalSpherical.n1_a[1] * universalSpherical.eRod_ia[3],universalSpherical.n1_a[1] * universalSpherical.eRod_ia[2] - universalSpherical.n1_a[2] * universalSpherical.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real universalSpherical.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({universalSpherical.n1_a[2] * universalSpherical.eRod_ia[3] - universalSpherical.n1_a[3] * universalSpherical.eRod_ia[2],universalSpherical.n1_a[3] * universalSpherical.eRod_ia[1] - universalSpherical.n1_a[1] * universalSpherical.eRod_ia[3],universalSpherical.n1_a[1] * universalSpherical.eRod_ia[2] - universalSpherical.n1_a[2] * universalSpherical.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real universalSpherical.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({universalSpherical.n1_a[2] * universalSpherical.eRod_ia[3] - universalSpherical.n1_a[3] * universalSpherical.eRod_ia[2],universalSpherical.n1_a[3] * universalSpherical.eRod_ia[1] - universalSpherical.n1_a[1] * universalSpherical.eRod_ia[3],universalSpherical.n1_a[1] * universalSpherical.eRod_ia[2] - universalSpherical.n1_a[2] * universalSpherical.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real universalSpherical.e3_ia[1](unit = "1") = universalSpherical.eRod_ia[2] * universalSpherical.e2_ia[3] - universalSpherical.eRod_ia[3] * universalSpherical.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real universalSpherical.e3_ia[2](unit = "1") = universalSpherical.eRod_ia[3] * universalSpherical.e2_ia[1] - universalSpherical.eRod_ia[1] * universalSpherical.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real universalSpherical.e3_ia[3](unit = "1") = universalSpherical.eRod_ia[1] * universalSpherical.e2_ia[2] - universalSpherical.eRod_ia[2] * universalSpherical.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real universalSpherical.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real universalSpherical.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real universalSpherical.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real universalSpherical.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real universalSpherical.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real universalSpherical.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real universalSpherical.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real universalSpherical.rRod_0[1](quantity = "Length", unit = "m", start = universalSpherical.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real universalSpherical.rRod_0[2](quantity = "Length", unit = "m", start = universalSpherical.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real universalSpherical.rRod_0[3](quantity = "Length", unit = "m", start = universalSpherical.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real universalSpherical.rRod_a[1](quantity = "Length", unit = "m", start = universalSpherical.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real universalSpherical.rRod_a[2](quantity = "Length", unit = "m", start = universalSpherical.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real universalSpherical.rRod_a[3](quantity = "Length", unit = "m", start = universalSpherical.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real universalSpherical.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real universalSpherical.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real universalSpherical.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real universalSpherical.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real universalSpherical.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real universalSpherical.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real universalSpherical.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real universalSpherical.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real universalSpherical.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real universalSpherical.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real universalSpherical.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real universalSpherical.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real universalSpherical.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real universalSpherical.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real universalSpherical.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real universalSpherical.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real universalSpherical.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real universalSpherical.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real universalSpherical.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real universalSpherical.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real universalSpherical.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real universalSpherical.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real universalSpherical.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real universalSpherical.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real universalSpherical.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real universalSpherical.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real universalSpherical.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real universalSpherical.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real universalSpherical.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   parameter String universalSpherical.rodShape.shapeType = universalSpherical.rodShapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real universalSpherical.rodShape.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.rodShape.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.rodShape.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.rodShape.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.rodShape.r[1](quantity = "Length", unit = "m") = universalSpherical.frame_ia.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.rodShape.r[2](quantity = "Length", unit = "m") = universalSpherical.frame_ia.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.rodShape.r[3](quantity = "Length", unit = "m") = universalSpherical.frame_ia.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.rodShape.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.rodShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.rodShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.rodShape.lengthDirection[1](unit = "1") = universalSpherical.eRod_ia[1] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.rodShape.lengthDirection[2](unit = "1") = universalSpherical.eRod_ia[2] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.rodShape.lengthDirection[3](unit = "1") = universalSpherical.eRod_ia[3] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.rodShape.widthDirection[1](unit = "1") = universalSpherical.e2_ia[1] "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.rodShape.widthDirection[2](unit = "1") = universalSpherical.e2_ia[2] "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.rodShape.widthDirection[3](unit = "1") = universalSpherical.e2_ia[3] "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.rodShape.length(quantity = "Length", unit = "m") = universalSpherical.rodLength "Length of visual object";
//   input Real universalSpherical.rodShape.width(quantity = "Length", unit = "m") = universalSpherical.rodWidth "Width of visual object";
//   input Real universalSpherical.rodShape.height(quantity = "Length", unit = "m") = universalSpherical.rodHeight "Height of visual object";
//   input Real universalSpherical.rodShape.extra = 0.0 "Additional size data for some of the shape types";
//   input Real universalSpherical.rodShape.color[1] = Real(universalSpherical.rodColor[1]) "Color of shape";
//   input Real universalSpherical.rodShape.color[2] = Real(universalSpherical.rodColor[2]) "Color of shape";
//   input Real universalSpherical.rodShape.color[3] = Real(universalSpherical.rodColor[3]) "Color of shape";
//   input Real universalSpherical.rodShape.specularCoefficient = universalSpherical.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real universalSpherical.rodShape.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({universalSpherical.rodShape.lengthDirection[1],universalSpherical.rodShape.lengthDirection[2],universalSpherical.rodShape.lengthDirection[3]});
//   protected Real universalSpherical.rodShape.e_x[1](unit = "1") = if noEvent(universalSpherical.rodShape.abs_n_x < 1e-10) then 1.0 else universalSpherical.rodShape.lengthDirection[1] / universalSpherical.rodShape.abs_n_x;
//   protected Real universalSpherical.rodShape.e_x[2](unit = "1") = if noEvent(universalSpherical.rodShape.abs_n_x < 1e-10) then 0.0 else universalSpherical.rodShape.lengthDirection[2] / universalSpherical.rodShape.abs_n_x;
//   protected Real universalSpherical.rodShape.e_x[3](unit = "1") = if noEvent(universalSpherical.rodShape.abs_n_x < 1e-10) then 0.0 else universalSpherical.rodShape.lengthDirection[3] / universalSpherical.rodShape.abs_n_x;
//   protected Real universalSpherical.rodShape.n_z_aux[1](unit = "1") = universalSpherical.rodShape.e_x[2] * universalSpherical.rodShape.widthDirection[3] - universalSpherical.rodShape.e_x[3] * universalSpherical.rodShape.widthDirection[2];
//   protected Real universalSpherical.rodShape.n_z_aux[2](unit = "1") = universalSpherical.rodShape.e_x[3] * universalSpherical.rodShape.widthDirection[1] - universalSpherical.rodShape.e_x[1] * universalSpherical.rodShape.widthDirection[3];
//   protected Real universalSpherical.rodShape.n_z_aux[3](unit = "1") = universalSpherical.rodShape.e_x[1] * universalSpherical.rodShape.widthDirection[2] - universalSpherical.rodShape.e_x[2] * universalSpherical.rodShape.widthDirection[1];
//   protected Real universalSpherical.rodShape.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.rodShape.e_x[1],universalSpherical.rodShape.e_x[2],universalSpherical.rodShape.e_x[3]},if noEvent(universalSpherical.rodShape.n_z_aux[1] ^ 2.0 + (universalSpherical.rodShape.n_z_aux[2] ^ 2.0 + universalSpherical.rodShape.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.rodShape.widthDirection[1],universalSpherical.rodShape.widthDirection[2],universalSpherical.rodShape.widthDirection[3]} else if noEvent(abs(universalSpherical.rodShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.rodShape.e_x[1],universalSpherical.rodShape.e_x[2],universalSpherical.rodShape.e_x[3]})[1];
//   protected Real universalSpherical.rodShape.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.rodShape.e_x[1],universalSpherical.rodShape.e_x[2],universalSpherical.rodShape.e_x[3]},if noEvent(universalSpherical.rodShape.n_z_aux[1] ^ 2.0 + (universalSpherical.rodShape.n_z_aux[2] ^ 2.0 + universalSpherical.rodShape.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.rodShape.widthDirection[1],universalSpherical.rodShape.widthDirection[2],universalSpherical.rodShape.widthDirection[3]} else if noEvent(abs(universalSpherical.rodShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.rodShape.e_x[1],universalSpherical.rodShape.e_x[2],universalSpherical.rodShape.e_x[3]})[2];
//   protected Real universalSpherical.rodShape.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.rodShape.e_x[1],universalSpherical.rodShape.e_x[2],universalSpherical.rodShape.e_x[3]},if noEvent(universalSpherical.rodShape.n_z_aux[1] ^ 2.0 + (universalSpherical.rodShape.n_z_aux[2] ^ 2.0 + universalSpherical.rodShape.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.rodShape.widthDirection[1],universalSpherical.rodShape.widthDirection[2],universalSpherical.rodShape.widthDirection[3]} else if noEvent(abs(universalSpherical.rodShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.rodShape.e_x[1],universalSpherical.rodShape.e_x[2],universalSpherical.rodShape.e_x[3]})[3];
//   protected output Real universalSpherical.rodShape.Form;
//   output Real universalSpherical.rodShape.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.rodShape.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.rodShape.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.rodShape.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.rodShape.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.rodShape.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.rodShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.rodShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.rodShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real universalSpherical.rodShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.rodShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.rodShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.rodShape.Material;
//   protected output Real universalSpherical.rodShape.Extra;
//   parameter String universalSpherical.sphericalShape_b.shapeType = "sphere" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real universalSpherical.sphericalShape_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.sphericalShape_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.sphericalShape_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.sphericalShape_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.sphericalShape_b.r[1](quantity = "Length", unit = "m") = universalSpherical.frame_b.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.sphericalShape_b.r[2](quantity = "Length", unit = "m") = universalSpherical.frame_b.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.sphericalShape_b.r[3](quantity = "Length", unit = "m") = universalSpherical.frame_b.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.sphericalShape_b.r_shape[1](quantity = "Length", unit = "m") = -0.5 * universalSpherical.sphereDiameter "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.sphericalShape_b.length(quantity = "Length", unit = "m") = universalSpherical.sphereDiameter "Length of visual object";
//   input Real universalSpherical.sphericalShape_b.width(quantity = "Length", unit = "m") = universalSpherical.sphereDiameter "Width of visual object";
//   input Real universalSpherical.sphericalShape_b.height(quantity = "Length", unit = "m") = universalSpherical.sphereDiameter "Height of visual object";
//   input Real universalSpherical.sphericalShape_b.extra = 0.0 "Additional size data for some of the shape types";
//   input Real universalSpherical.sphericalShape_b.color[1] = Real(universalSpherical.sphereColor[1]) "Color of shape";
//   input Real universalSpherical.sphericalShape_b.color[2] = Real(universalSpherical.sphereColor[2]) "Color of shape";
//   input Real universalSpherical.sphericalShape_b.color[3] = Real(universalSpherical.sphereColor[3]) "Color of shape";
//   input Real universalSpherical.sphericalShape_b.specularCoefficient = universalSpherical.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real universalSpherical.sphericalShape_b.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({universalSpherical.sphericalShape_b.lengthDirection[1],universalSpherical.sphericalShape_b.lengthDirection[2],universalSpherical.sphericalShape_b.lengthDirection[3]});
//   protected Real universalSpherical.sphericalShape_b.e_x[1](unit = "1") = if noEvent(universalSpherical.sphericalShape_b.abs_n_x < 1e-10) then 1.0 else universalSpherical.sphericalShape_b.lengthDirection[1] / universalSpherical.sphericalShape_b.abs_n_x;
//   protected Real universalSpherical.sphericalShape_b.e_x[2](unit = "1") = if noEvent(universalSpherical.sphericalShape_b.abs_n_x < 1e-10) then 0.0 else universalSpherical.sphericalShape_b.lengthDirection[2] / universalSpherical.sphericalShape_b.abs_n_x;
//   protected Real universalSpherical.sphericalShape_b.e_x[3](unit = "1") = if noEvent(universalSpherical.sphericalShape_b.abs_n_x < 1e-10) then 0.0 else universalSpherical.sphericalShape_b.lengthDirection[3] / universalSpherical.sphericalShape_b.abs_n_x;
//   protected Real universalSpherical.sphericalShape_b.n_z_aux[1](unit = "1") = universalSpherical.sphericalShape_b.e_x[2] * universalSpherical.sphericalShape_b.widthDirection[3] - universalSpherical.sphericalShape_b.e_x[3] * universalSpherical.sphericalShape_b.widthDirection[2];
//   protected Real universalSpherical.sphericalShape_b.n_z_aux[2](unit = "1") = universalSpherical.sphericalShape_b.e_x[3] * universalSpherical.sphericalShape_b.widthDirection[1] - universalSpherical.sphericalShape_b.e_x[1] * universalSpherical.sphericalShape_b.widthDirection[3];
//   protected Real universalSpherical.sphericalShape_b.n_z_aux[3](unit = "1") = universalSpherical.sphericalShape_b.e_x[1] * universalSpherical.sphericalShape_b.widthDirection[2] - universalSpherical.sphericalShape_b.e_x[2] * universalSpherical.sphericalShape_b.widthDirection[1];
//   protected Real universalSpherical.sphericalShape_b.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.sphericalShape_b.e_x[1],universalSpherical.sphericalShape_b.e_x[2],universalSpherical.sphericalShape_b.e_x[3]},if noEvent(universalSpherical.sphericalShape_b.n_z_aux[1] ^ 2.0 + (universalSpherical.sphericalShape_b.n_z_aux[2] ^ 2.0 + universalSpherical.sphericalShape_b.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.sphericalShape_b.widthDirection[1],universalSpherical.sphericalShape_b.widthDirection[2],universalSpherical.sphericalShape_b.widthDirection[3]} else if noEvent(abs(universalSpherical.sphericalShape_b.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.sphericalShape_b.e_x[1],universalSpherical.sphericalShape_b.e_x[2],universalSpherical.sphericalShape_b.e_x[3]})[1];
//   protected Real universalSpherical.sphericalShape_b.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.sphericalShape_b.e_x[1],universalSpherical.sphericalShape_b.e_x[2],universalSpherical.sphericalShape_b.e_x[3]},if noEvent(universalSpherical.sphericalShape_b.n_z_aux[1] ^ 2.0 + (universalSpherical.sphericalShape_b.n_z_aux[2] ^ 2.0 + universalSpherical.sphericalShape_b.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.sphericalShape_b.widthDirection[1],universalSpherical.sphericalShape_b.widthDirection[2],universalSpherical.sphericalShape_b.widthDirection[3]} else if noEvent(abs(universalSpherical.sphericalShape_b.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.sphericalShape_b.e_x[1],universalSpherical.sphericalShape_b.e_x[2],universalSpherical.sphericalShape_b.e_x[3]})[2];
//   protected Real universalSpherical.sphericalShape_b.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.sphericalShape_b.e_x[1],universalSpherical.sphericalShape_b.e_x[2],universalSpherical.sphericalShape_b.e_x[3]},if noEvent(universalSpherical.sphericalShape_b.n_z_aux[1] ^ 2.0 + (universalSpherical.sphericalShape_b.n_z_aux[2] ^ 2.0 + universalSpherical.sphericalShape_b.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.sphericalShape_b.widthDirection[1],universalSpherical.sphericalShape_b.widthDirection[2],universalSpherical.sphericalShape_b.widthDirection[3]} else if noEvent(abs(universalSpherical.sphericalShape_b.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.sphericalShape_b.e_x[1],universalSpherical.sphericalShape_b.e_x[2],universalSpherical.sphericalShape_b.e_x[3]})[3];
//   protected output Real universalSpherical.sphericalShape_b.Form;
//   output Real universalSpherical.sphericalShape_b.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.sphericalShape_b.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real universalSpherical.sphericalShape_b.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.sphericalShape_b.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.sphericalShape_b.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.sphericalShape_b.Material;
//   protected output Real universalSpherical.sphericalShape_b.Extra;
//   parameter String universalSpherical.universalShape1.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real universalSpherical.universalShape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.universalShape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.universalShape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.universalShape1.r[1](quantity = "Length", unit = "m") = universalSpherical.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.universalShape1.r[2](quantity = "Length", unit = "m") = universalSpherical.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.universalShape1.r[3](quantity = "Length", unit = "m") = universalSpherical.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.universalShape1.r_shape[1](quantity = "Length", unit = "m") = (-universalSpherical.cylinderLength) * universalSpherical.n1_a[1] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.universalShape1.r_shape[2](quantity = "Length", unit = "m") = (-universalSpherical.cylinderLength) * universalSpherical.n1_a[2] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.universalShape1.r_shape[3](quantity = "Length", unit = "m") = (-universalSpherical.cylinderLength) * universalSpherical.n1_a[3] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.universalShape1.lengthDirection[1](unit = "1") = universalSpherical.n1_a[1] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.universalShape1.lengthDirection[2](unit = "1") = universalSpherical.n1_a[2] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.universalShape1.lengthDirection[3](unit = "1") = universalSpherical.n1_a[3] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.universalShape1.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.universalShape1.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.universalShape1.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.universalShape1.length(quantity = "Length", unit = "m") = universalSpherical.cylinderLength "Length of visual object";
//   input Real universalSpherical.universalShape1.width(quantity = "Length", unit = "m") = universalSpherical.cylinderDiameter "Width of visual object";
//   input Real universalSpherical.universalShape1.height(quantity = "Length", unit = "m") = universalSpherical.cylinderDiameter "Height of visual object";
//   input Real universalSpherical.universalShape1.extra = 0.0 "Additional size data for some of the shape types";
//   input Real universalSpherical.universalShape1.color[1] = Real(universalSpherical.cylinderColor[1]) "Color of shape";
//   input Real universalSpherical.universalShape1.color[2] = Real(universalSpherical.cylinderColor[2]) "Color of shape";
//   input Real universalSpherical.universalShape1.color[3] = Real(universalSpherical.cylinderColor[3]) "Color of shape";
//   input Real universalSpherical.universalShape1.specularCoefficient = universalSpherical.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real universalSpherical.universalShape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({universalSpherical.universalShape1.lengthDirection[1],universalSpherical.universalShape1.lengthDirection[2],universalSpherical.universalShape1.lengthDirection[3]});
//   protected Real universalSpherical.universalShape1.e_x[1](unit = "1") = if noEvent(universalSpherical.universalShape1.abs_n_x < 1e-10) then 1.0 else universalSpherical.universalShape1.lengthDirection[1] / universalSpherical.universalShape1.abs_n_x;
//   protected Real universalSpherical.universalShape1.e_x[2](unit = "1") = if noEvent(universalSpherical.universalShape1.abs_n_x < 1e-10) then 0.0 else universalSpherical.universalShape1.lengthDirection[2] / universalSpherical.universalShape1.abs_n_x;
//   protected Real universalSpherical.universalShape1.e_x[3](unit = "1") = if noEvent(universalSpherical.universalShape1.abs_n_x < 1e-10) then 0.0 else universalSpherical.universalShape1.lengthDirection[3] / universalSpherical.universalShape1.abs_n_x;
//   protected Real universalSpherical.universalShape1.n_z_aux[1](unit = "1") = universalSpherical.universalShape1.e_x[2] * universalSpherical.universalShape1.widthDirection[3] - universalSpherical.universalShape1.e_x[3] * universalSpherical.universalShape1.widthDirection[2];
//   protected Real universalSpherical.universalShape1.n_z_aux[2](unit = "1") = universalSpherical.universalShape1.e_x[3] * universalSpherical.universalShape1.widthDirection[1] - universalSpherical.universalShape1.e_x[1] * universalSpherical.universalShape1.widthDirection[3];
//   protected Real universalSpherical.universalShape1.n_z_aux[3](unit = "1") = universalSpherical.universalShape1.e_x[1] * universalSpherical.universalShape1.widthDirection[2] - universalSpherical.universalShape1.e_x[2] * universalSpherical.universalShape1.widthDirection[1];
//   protected Real universalSpherical.universalShape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.universalShape1.e_x[1],universalSpherical.universalShape1.e_x[2],universalSpherical.universalShape1.e_x[3]},if noEvent(universalSpherical.universalShape1.n_z_aux[1] ^ 2.0 + (universalSpherical.universalShape1.n_z_aux[2] ^ 2.0 + universalSpherical.universalShape1.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.universalShape1.widthDirection[1],universalSpherical.universalShape1.widthDirection[2],universalSpherical.universalShape1.widthDirection[3]} else if noEvent(abs(universalSpherical.universalShape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.universalShape1.e_x[1],universalSpherical.universalShape1.e_x[2],universalSpherical.universalShape1.e_x[3]})[1];
//   protected Real universalSpherical.universalShape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.universalShape1.e_x[1],universalSpherical.universalShape1.e_x[2],universalSpherical.universalShape1.e_x[3]},if noEvent(universalSpherical.universalShape1.n_z_aux[1] ^ 2.0 + (universalSpherical.universalShape1.n_z_aux[2] ^ 2.0 + universalSpherical.universalShape1.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.universalShape1.widthDirection[1],universalSpherical.universalShape1.widthDirection[2],universalSpherical.universalShape1.widthDirection[3]} else if noEvent(abs(universalSpherical.universalShape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.universalShape1.e_x[1],universalSpherical.universalShape1.e_x[2],universalSpherical.universalShape1.e_x[3]})[2];
//   protected Real universalSpherical.universalShape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.universalShape1.e_x[1],universalSpherical.universalShape1.e_x[2],universalSpherical.universalShape1.e_x[3]},if noEvent(universalSpherical.universalShape1.n_z_aux[1] ^ 2.0 + (universalSpherical.universalShape1.n_z_aux[2] ^ 2.0 + universalSpherical.universalShape1.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.universalShape1.widthDirection[1],universalSpherical.universalShape1.widthDirection[2],universalSpherical.universalShape1.widthDirection[3]} else if noEvent(abs(universalSpherical.universalShape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.universalShape1.e_x[1],universalSpherical.universalShape1.e_x[2],universalSpherical.universalShape1.e_x[3]})[3];
//   protected output Real universalSpherical.universalShape1.Form;
//   output Real universalSpherical.universalShape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.universalShape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.universalShape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real universalSpherical.universalShape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.universalShape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.universalShape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.universalShape1.Material;
//   protected output Real universalSpherical.universalShape1.Extra;
//   parameter String universalSpherical.universalShape2.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real universalSpherical.universalShape2.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real universalSpherical.universalShape2.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.universalShape2.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.universalShape2.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real universalSpherical.universalShape2.r[1](quantity = "Length", unit = "m") = universalSpherical.frame_ia.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.universalShape2.r[2](quantity = "Length", unit = "m") = universalSpherical.frame_ia.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.universalShape2.r[3](quantity = "Length", unit = "m") = universalSpherical.frame_ia.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real universalSpherical.universalShape2.r_shape[1](quantity = "Length", unit = "m") = (-universalSpherical.cylinderLength) * universalSpherical.e2_ia[1] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.universalShape2.r_shape[2](quantity = "Length", unit = "m") = (-universalSpherical.cylinderLength) * universalSpherical.e2_ia[2] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.universalShape2.r_shape[3](quantity = "Length", unit = "m") = (-universalSpherical.cylinderLength) * universalSpherical.e2_ia[3] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real universalSpherical.universalShape2.lengthDirection[1](unit = "1") = universalSpherical.e2_ia[1] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.universalShape2.lengthDirection[2](unit = "1") = universalSpherical.e2_ia[2] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.universalShape2.lengthDirection[3](unit = "1") = universalSpherical.e2_ia[3] "Vector in length direction, resolved in object frame";
//   input Real universalSpherical.universalShape2.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.universalShape2.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.universalShape2.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real universalSpherical.universalShape2.length(quantity = "Length", unit = "m") = universalSpherical.cylinderLength "Length of visual object";
//   input Real universalSpherical.universalShape2.width(quantity = "Length", unit = "m") = universalSpherical.cylinderDiameter "Width of visual object";
//   input Real universalSpherical.universalShape2.height(quantity = "Length", unit = "m") = universalSpherical.cylinderDiameter "Height of visual object";
//   input Real universalSpherical.universalShape2.extra = 0.0 "Additional size data for some of the shape types";
//   input Real universalSpherical.universalShape2.color[1] = Real(universalSpherical.cylinderColor[1]) "Color of shape";
//   input Real universalSpherical.universalShape2.color[2] = Real(universalSpherical.cylinderColor[2]) "Color of shape";
//   input Real universalSpherical.universalShape2.color[3] = Real(universalSpherical.cylinderColor[3]) "Color of shape";
//   input Real universalSpherical.universalShape2.specularCoefficient = universalSpherical.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real universalSpherical.universalShape2.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({universalSpherical.universalShape2.lengthDirection[1],universalSpherical.universalShape2.lengthDirection[2],universalSpherical.universalShape2.lengthDirection[3]});
//   protected Real universalSpherical.universalShape2.e_x[1](unit = "1") = if noEvent(universalSpherical.universalShape2.abs_n_x < 1e-10) then 1.0 else universalSpherical.universalShape2.lengthDirection[1] / universalSpherical.universalShape2.abs_n_x;
//   protected Real universalSpherical.universalShape2.e_x[2](unit = "1") = if noEvent(universalSpherical.universalShape2.abs_n_x < 1e-10) then 0.0 else universalSpherical.universalShape2.lengthDirection[2] / universalSpherical.universalShape2.abs_n_x;
//   protected Real universalSpherical.universalShape2.e_x[3](unit = "1") = if noEvent(universalSpherical.universalShape2.abs_n_x < 1e-10) then 0.0 else universalSpherical.universalShape2.lengthDirection[3] / universalSpherical.universalShape2.abs_n_x;
//   protected Real universalSpherical.universalShape2.n_z_aux[1](unit = "1") = universalSpherical.universalShape2.e_x[2] * universalSpherical.universalShape2.widthDirection[3] - universalSpherical.universalShape2.e_x[3] * universalSpherical.universalShape2.widthDirection[2];
//   protected Real universalSpherical.universalShape2.n_z_aux[2](unit = "1") = universalSpherical.universalShape2.e_x[3] * universalSpherical.universalShape2.widthDirection[1] - universalSpherical.universalShape2.e_x[1] * universalSpherical.universalShape2.widthDirection[3];
//   protected Real universalSpherical.universalShape2.n_z_aux[3](unit = "1") = universalSpherical.universalShape2.e_x[1] * universalSpherical.universalShape2.widthDirection[2] - universalSpherical.universalShape2.e_x[2] * universalSpherical.universalShape2.widthDirection[1];
//   protected Real universalSpherical.universalShape2.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.universalShape2.e_x[1],universalSpherical.universalShape2.e_x[2],universalSpherical.universalShape2.e_x[3]},if noEvent(universalSpherical.universalShape2.n_z_aux[1] ^ 2.0 + (universalSpherical.universalShape2.n_z_aux[2] ^ 2.0 + universalSpherical.universalShape2.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.universalShape2.widthDirection[1],universalSpherical.universalShape2.widthDirection[2],universalSpherical.universalShape2.widthDirection[3]} else if noEvent(abs(universalSpherical.universalShape2.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.universalShape2.e_x[1],universalSpherical.universalShape2.e_x[2],universalSpherical.universalShape2.e_x[3]})[1];
//   protected Real universalSpherical.universalShape2.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.universalShape2.e_x[1],universalSpherical.universalShape2.e_x[2],universalSpherical.universalShape2.e_x[3]},if noEvent(universalSpherical.universalShape2.n_z_aux[1] ^ 2.0 + (universalSpherical.universalShape2.n_z_aux[2] ^ 2.0 + universalSpherical.universalShape2.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.universalShape2.widthDirection[1],universalSpherical.universalShape2.widthDirection[2],universalSpherical.universalShape2.widthDirection[3]} else if noEvent(abs(universalSpherical.universalShape2.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.universalShape2.e_x[1],universalSpherical.universalShape2.e_x[2],universalSpherical.universalShape2.e_x[3]})[2];
//   protected Real universalSpherical.universalShape2.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({universalSpherical.universalShape2.e_x[1],universalSpherical.universalShape2.e_x[2],universalSpherical.universalShape2.e_x[3]},if noEvent(universalSpherical.universalShape2.n_z_aux[1] ^ 2.0 + (universalSpherical.universalShape2.n_z_aux[2] ^ 2.0 + universalSpherical.universalShape2.n_z_aux[3] ^ 2.0) > 1e-06) then {universalSpherical.universalShape2.widthDirection[1],universalSpherical.universalShape2.widthDirection[2],universalSpherical.universalShape2.widthDirection[3]} else if noEvent(abs(universalSpherical.universalShape2.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{universalSpherical.universalShape2.e_x[1],universalSpherical.universalShape2.e_x[2],universalSpherical.universalShape2.e_x[3]})[3];
//   protected output Real universalSpherical.universalShape2.Form;
//   output Real universalSpherical.universalShape2.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape2.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape2.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape2.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape2.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape2.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real universalSpherical.universalShape2.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.universalShape2.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real universalSpherical.universalShape2.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real universalSpherical.universalShape2.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.universalShape2.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.universalShape2.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real universalSpherical.universalShape2.Material;
//   protected output Real universalSpherical.universalShape2.Extra;
//   Real b3.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b3.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b3.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b3.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b3.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b3.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b3.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b3.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b3.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b3.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b3.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b3.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b3.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b3.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b3.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b3.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real b3.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real b3.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b3.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b3.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real b3.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b3.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b3.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real b3.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b3.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real b3.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean b3.animation = false "= true, if animation shall be enabled";
//   parameter Real b3.r[1](quantity = "Length", unit = "m", start = 0.0) = 1.2 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b3.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b3.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String b3.shapeType = "cylinder" " Type of shape";
//   parameter Real b3.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b3.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b3.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real b3.lengthDirection[1](unit = "1") = b3.r[1] - b3.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b3.lengthDirection[2](unit = "1") = b3.r[2] - b3.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b3.lengthDirection[3](unit = "1") = b3.r[3] - b3.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real b3.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b3.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b3.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real b3.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({b3.r[1] - b3.r_shape[1],b3.r[2] - b3.r_shape[2],b3.r[3] - b3.r_shape[3]}) " Length of shape";
//   parameter Real b3.width(quantity = "Length", unit = "m", min = 0.0) = b3.length / world.defaultWidthFraction " Width of shape";
//   parameter Real b3.height(quantity = "Length", unit = "m", min = 0.0) = b3.width " Height of shape.";
//   parameter Real b3.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer b3.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer b3.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer b3.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real b3.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real fixedFrame.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedFrame.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedFrame.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real fixedFrame.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real fixedFrame.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedFrame.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedFrame.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real fixedFrame.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedFrame.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedFrame.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real fixedFrame.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedFrame.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real fixedFrame.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean fixedFrame.animation = true "= true, if animation shall be enabled";
//   parameter Boolean fixedFrame.showLabels = true "= true, if labels shall be shown";
//   input Real fixedFrame.length(quantity = "Length", unit = "m", min = 0.0) = 0.5 "Length of axes arrows";
//   input Real fixedFrame.diameter(quantity = "Length", unit = "m", min = 0.0) = fixedFrame.length / world.defaultFrameDiameterFraction "Diameter of axes arrows";
//   input Integer fixedFrame.color_x[1](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer fixedFrame.color_x[2](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer fixedFrame.color_x[3](min = 0, max = 255) = 255 "Color of x-arrow";
//   input Integer fixedFrame.color_y[1](min = 0, max = 255) = fixedFrame.color_x[1] "Color of y-arrow";
//   input Integer fixedFrame.color_y[2](min = 0, max = 255) = fixedFrame.color_x[2] "Color of y-arrow";
//   input Integer fixedFrame.color_y[3](min = 0, max = 255) = fixedFrame.color_x[3] "Color of y-arrow";
//   input Integer fixedFrame.color_z[1](min = 0, max = 255) = fixedFrame.color_x[1] "Color of z-arrow";
//   input Integer fixedFrame.color_z[2](min = 0, max = 255) = fixedFrame.color_x[2] "Color of z-arrow";
//   input Integer fixedFrame.color_z[3](min = 0, max = 255) = fixedFrame.color_x[3] "Color of z-arrow";
//   input Real fixedFrame.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Boolean fixedFrame.animation2 = world.enableAnimation AND fixedFrame.animation;
//   protected parameter Boolean fixedFrame.showLabels2 = world.enableAnimation AND fixedFrame.animation AND fixedFrame.showLabels;
//   protected Real fixedFrame.headLength(quantity = "Length", unit = "m") = min(fixedFrame.length,5.0 * fixedFrame.diameter);
//   protected Real fixedFrame.headWidth(quantity = "Length", unit = "m") = 3.0 * fixedFrame.diameter;
//   protected Real fixedFrame.lineLength(quantity = "Length", unit = "m") = max(0.0,fixedFrame.length - fixedFrame.headLength);
//   protected Real fixedFrame.lineWidth(quantity = "Length", unit = "m") = fixedFrame.diameter;
//   protected Real fixedFrame.scaledLabel(quantity = "Length", unit = "m") = 3.0 * fixedFrame.diameter;
//   protected Real fixedFrame.labelStart(quantity = "Length", unit = "m") = 1.05 * fixedFrame.length;
//   parameter String fixedFrame.x_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.x_arrowLine.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_arrowLine.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_arrowLine.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_arrowLine.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_arrowLine.length(quantity = "Length", unit = "m") = fixedFrame.lineLength "Length of visual object";
//   input Real fixedFrame.x_arrowLine.width(quantity = "Length", unit = "m") = fixedFrame.lineWidth "Width of visual object";
//   input Real fixedFrame.x_arrowLine.height(quantity = "Length", unit = "m") = fixedFrame.lineWidth "Height of visual object";
//   input Real fixedFrame.x_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.x_arrowLine.color[1] = Real(fixedFrame.color_x[1]) "Color of shape";
//   input Real fixedFrame.x_arrowLine.color[2] = Real(fixedFrame.color_x[2]) "Color of shape";
//   input Real fixedFrame.x_arrowLine.color[3] = Real(fixedFrame.color_x[3]) "Color of shape";
//   input Real fixedFrame.x_arrowLine.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.x_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.x_arrowLine.lengthDirection[1],fixedFrame.x_arrowLine.lengthDirection[2],fixedFrame.x_arrowLine.lengthDirection[3]});
//   protected Real fixedFrame.x_arrowLine.e_x[1](unit = "1") = if noEvent(fixedFrame.x_arrowLine.abs_n_x < 1e-10) then 1.0 else fixedFrame.x_arrowLine.lengthDirection[1] / fixedFrame.x_arrowLine.abs_n_x;
//   protected Real fixedFrame.x_arrowLine.e_x[2](unit = "1") = if noEvent(fixedFrame.x_arrowLine.abs_n_x < 1e-10) then 0.0 else fixedFrame.x_arrowLine.lengthDirection[2] / fixedFrame.x_arrowLine.abs_n_x;
//   protected Real fixedFrame.x_arrowLine.e_x[3](unit = "1") = if noEvent(fixedFrame.x_arrowLine.abs_n_x < 1e-10) then 0.0 else fixedFrame.x_arrowLine.lengthDirection[3] / fixedFrame.x_arrowLine.abs_n_x;
//   protected Real fixedFrame.x_arrowLine.n_z_aux[1](unit = "1") = fixedFrame.x_arrowLine.e_x[2] * fixedFrame.x_arrowLine.widthDirection[3] - fixedFrame.x_arrowLine.e_x[3] * fixedFrame.x_arrowLine.widthDirection[2];
//   protected Real fixedFrame.x_arrowLine.n_z_aux[2](unit = "1") = fixedFrame.x_arrowLine.e_x[3] * fixedFrame.x_arrowLine.widthDirection[1] - fixedFrame.x_arrowLine.e_x[1] * fixedFrame.x_arrowLine.widthDirection[3];
//   protected Real fixedFrame.x_arrowLine.n_z_aux[3](unit = "1") = fixedFrame.x_arrowLine.e_x[1] * fixedFrame.x_arrowLine.widthDirection[2] - fixedFrame.x_arrowLine.e_x[2] * fixedFrame.x_arrowLine.widthDirection[1];
//   protected Real fixedFrame.x_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_arrowLine.e_x[1],fixedFrame.x_arrowLine.e_x[2],fixedFrame.x_arrowLine.e_x[3]},if noEvent(fixedFrame.x_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.x_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_arrowLine.widthDirection[1],fixedFrame.x_arrowLine.widthDirection[2],fixedFrame.x_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_arrowLine.e_x[1],fixedFrame.x_arrowLine.e_x[2],fixedFrame.x_arrowLine.e_x[3]})[1];
//   protected Real fixedFrame.x_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_arrowLine.e_x[1],fixedFrame.x_arrowLine.e_x[2],fixedFrame.x_arrowLine.e_x[3]},if noEvent(fixedFrame.x_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.x_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_arrowLine.widthDirection[1],fixedFrame.x_arrowLine.widthDirection[2],fixedFrame.x_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_arrowLine.e_x[1],fixedFrame.x_arrowLine.e_x[2],fixedFrame.x_arrowLine.e_x[3]})[2];
//   protected Real fixedFrame.x_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_arrowLine.e_x[1],fixedFrame.x_arrowLine.e_x[2],fixedFrame.x_arrowLine.e_x[3]},if noEvent(fixedFrame.x_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.x_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_arrowLine.widthDirection[1],fixedFrame.x_arrowLine.widthDirection[2],fixedFrame.x_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_arrowLine.e_x[1],fixedFrame.x_arrowLine.e_x[2],fixedFrame.x_arrowLine.e_x[3]})[3];
//   protected output Real fixedFrame.x_arrowLine.Form;
//   output Real fixedFrame.x_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.x_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_arrowLine.Material;
//   protected output Real fixedFrame.x_arrowLine.Extra;
//   parameter String fixedFrame.x_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.x_arrowHead.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_arrowHead.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{fixedFrame.lineLength,0.0,0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_arrowHead.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{fixedFrame.lineLength,0.0,0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_arrowHead.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{fixedFrame.lineLength,0.0,0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_arrowHead.length(quantity = "Length", unit = "m") = fixedFrame.headLength "Length of visual object";
//   input Real fixedFrame.x_arrowHead.width(quantity = "Length", unit = "m") = fixedFrame.headWidth "Width of visual object";
//   input Real fixedFrame.x_arrowHead.height(quantity = "Length", unit = "m") = fixedFrame.headWidth "Height of visual object";
//   input Real fixedFrame.x_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.x_arrowHead.color[1] = Real(fixedFrame.color_x[1]) "Color of shape";
//   input Real fixedFrame.x_arrowHead.color[2] = Real(fixedFrame.color_x[2]) "Color of shape";
//   input Real fixedFrame.x_arrowHead.color[3] = Real(fixedFrame.color_x[3]) "Color of shape";
//   input Real fixedFrame.x_arrowHead.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.x_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.x_arrowHead.lengthDirection[1],fixedFrame.x_arrowHead.lengthDirection[2],fixedFrame.x_arrowHead.lengthDirection[3]});
//   protected Real fixedFrame.x_arrowHead.e_x[1](unit = "1") = if noEvent(fixedFrame.x_arrowHead.abs_n_x < 1e-10) then 1.0 else fixedFrame.x_arrowHead.lengthDirection[1] / fixedFrame.x_arrowHead.abs_n_x;
//   protected Real fixedFrame.x_arrowHead.e_x[2](unit = "1") = if noEvent(fixedFrame.x_arrowHead.abs_n_x < 1e-10) then 0.0 else fixedFrame.x_arrowHead.lengthDirection[2] / fixedFrame.x_arrowHead.abs_n_x;
//   protected Real fixedFrame.x_arrowHead.e_x[3](unit = "1") = if noEvent(fixedFrame.x_arrowHead.abs_n_x < 1e-10) then 0.0 else fixedFrame.x_arrowHead.lengthDirection[3] / fixedFrame.x_arrowHead.abs_n_x;
//   protected Real fixedFrame.x_arrowHead.n_z_aux[1](unit = "1") = fixedFrame.x_arrowHead.e_x[2] * fixedFrame.x_arrowHead.widthDirection[3] - fixedFrame.x_arrowHead.e_x[3] * fixedFrame.x_arrowHead.widthDirection[2];
//   protected Real fixedFrame.x_arrowHead.n_z_aux[2](unit = "1") = fixedFrame.x_arrowHead.e_x[3] * fixedFrame.x_arrowHead.widthDirection[1] - fixedFrame.x_arrowHead.e_x[1] * fixedFrame.x_arrowHead.widthDirection[3];
//   protected Real fixedFrame.x_arrowHead.n_z_aux[3](unit = "1") = fixedFrame.x_arrowHead.e_x[1] * fixedFrame.x_arrowHead.widthDirection[2] - fixedFrame.x_arrowHead.e_x[2] * fixedFrame.x_arrowHead.widthDirection[1];
//   protected Real fixedFrame.x_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_arrowHead.e_x[1],fixedFrame.x_arrowHead.e_x[2],fixedFrame.x_arrowHead.e_x[3]},if noEvent(fixedFrame.x_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.x_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_arrowHead.widthDirection[1],fixedFrame.x_arrowHead.widthDirection[2],fixedFrame.x_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_arrowHead.e_x[1],fixedFrame.x_arrowHead.e_x[2],fixedFrame.x_arrowHead.e_x[3]})[1];
//   protected Real fixedFrame.x_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_arrowHead.e_x[1],fixedFrame.x_arrowHead.e_x[2],fixedFrame.x_arrowHead.e_x[3]},if noEvent(fixedFrame.x_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.x_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_arrowHead.widthDirection[1],fixedFrame.x_arrowHead.widthDirection[2],fixedFrame.x_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_arrowHead.e_x[1],fixedFrame.x_arrowHead.e_x[2],fixedFrame.x_arrowHead.e_x[3]})[2];
//   protected Real fixedFrame.x_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_arrowHead.e_x[1],fixedFrame.x_arrowHead.e_x[2],fixedFrame.x_arrowHead.e_x[3]},if noEvent(fixedFrame.x_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.x_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_arrowHead.widthDirection[1],fixedFrame.x_arrowHead.widthDirection[2],fixedFrame.x_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_arrowHead.e_x[1],fixedFrame.x_arrowHead.e_x[2],fixedFrame.x_arrowHead.e_x[3]})[3];
//   protected output Real fixedFrame.x_arrowHead.Form;
//   output Real fixedFrame.x_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.x_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_arrowHead.Material;
//   protected output Real fixedFrame.x_arrowHead.Extra;
//   input Real fixedFrame.x_label.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.r_lines[1](quantity = "Length", unit = "m") = fixedFrame.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.n_x[1](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.x_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[1,2,1](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[1,2,2](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[2,1,2](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[2,2,1](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.x_label.diameter(quantity = "Length", unit = "m", min = 0.0) = fixedFrame.diameter "Diameter of the cylinders defined by lines";
//   input Integer fixedFrame.x_label.color[1](min = 0, max = 255) = fixedFrame.color_x[1] "Color of cylinders";
//   input Integer fixedFrame.x_label.color[2](min = 0, max = 255) = fixedFrame.color_x[2] "Color of cylinders";
//   input Integer fixedFrame.x_label.color[3](min = 0, max = 255) = fixedFrame.color_x[3] "Color of cylinders";
//   input Real fixedFrame.x_label.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer fixedFrame.x_label.n = 2 "Number of cylinders";
//   protected Real fixedFrame.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[1][1];
//   protected Real fixedFrame.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[1][2];
//   protected Real fixedFrame.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[1][3];
//   protected Real fixedFrame.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[2][1];
//   protected Real fixedFrame.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[2][2];
//   protected Real fixedFrame.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[2][3];
//   protected Real fixedFrame.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[3][1];
//   protected Real fixedFrame.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[3][2];
//   protected Real fixedFrame.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.x_label.n_x[1],fixedFrame.x_label.n_x[2],fixedFrame.x_label.n_x[3]},{fixedFrame.x_label.n_y[1],fixedFrame.x_label.n_y[2],fixedFrame.x_label.n_y[3]})[3][3];
//   protected Real fixedFrame.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[1][1];
//   protected Real fixedFrame.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[1][2];
//   protected Real fixedFrame.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[1][3];
//   protected Real fixedFrame.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[2][1];
//   protected Real fixedFrame.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[2][2];
//   protected Real fixedFrame.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[2][3];
//   protected Real fixedFrame.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[3][1];
//   protected Real fixedFrame.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[3][2];
//   protected Real fixedFrame.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}})[3][3];
//   protected Real fixedFrame.x_label.r_abs[1](quantity = "Length", unit = "m") = fixedFrame.x_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{fixedFrame.x_label.r_lines[1],fixedFrame.x_label.r_lines[2],fixedFrame.x_label.r_lines[3]})[1];
//   protected Real fixedFrame.x_label.r_abs[2](quantity = "Length", unit = "m") = fixedFrame.x_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{fixedFrame.x_label.r_lines[1],fixedFrame.x_label.r_lines[2],fixedFrame.x_label.r_lines[3]})[2];
//   protected Real fixedFrame.x_label.r_abs[3](quantity = "Length", unit = "m") = fixedFrame.x_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R.T[1,1],fixedFrame.x_label.R.T[1,2],fixedFrame.x_label.R.T[1,3]},{fixedFrame.x_label.R.T[2,1],fixedFrame.x_label.R.T[2,2],fixedFrame.x_label.R.T[2,3]},{fixedFrame.x_label.R.T[3,1],fixedFrame.x_label.R.T[3,2],fixedFrame.x_label.R.T[3,3]}},{fixedFrame.x_label.r_lines[1],fixedFrame.x_label.r_lines[2],fixedFrame.x_label.r_lines[3]})[3];
//   parameter String fixedFrame.x_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.x_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.cylinders[1].r[1](quantity = "Length", unit = "m") = fixedFrame.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_lines[1,1],fixedFrame.x_label.R_lines[1,2],fixedFrame.x_label.R_lines[1,3]},{fixedFrame.x_label.R_lines[2,1],fixedFrame.x_label.R_lines[2,2],fixedFrame.x_label.R_lines[2,3]},{fixedFrame.x_label.R_lines[3,1],fixedFrame.x_label.R_lines[3,2],fixedFrame.x_label.R_lines[3,3]}},{fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.cylinders[1].r[2](quantity = "Length", unit = "m") = fixedFrame.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_lines[1,1],fixedFrame.x_label.R_lines[1,2],fixedFrame.x_label.R_lines[1,3]},{fixedFrame.x_label.R_lines[2,1],fixedFrame.x_label.R_lines[2,2],fixedFrame.x_label.R_lines[2,3]},{fixedFrame.x_label.R_lines[3,1],fixedFrame.x_label.R_lines[3,2],fixedFrame.x_label.R_lines[3,3]}},{fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.cylinders[1].r[3](quantity = "Length", unit = "m") = fixedFrame.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_lines[1,1],fixedFrame.x_label.R_lines[1,2],fixedFrame.x_label.R_lines[1,3]},{fixedFrame.x_label.R_lines[2,1],fixedFrame.x_label.R_lines[2,2],fixedFrame.x_label.R_lines[2,3]},{fixedFrame.x_label.R_lines[3,1],fixedFrame.x_label.R_lines[3,2],fixedFrame.x_label.R_lines[3,3]}},{fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}},{fixedFrame.x_label.lines[1,2,1] - fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,2,2] - fixedFrame.x_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}},{fixedFrame.x_label.lines[1,2,1] - fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,2,2] - fixedFrame.x_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}},{fixedFrame.x_label.lines[1,2,1] - fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,2,2] - fixedFrame.x_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.x_label.lines[1,2,1] - fixedFrame.x_label.lines[1,1,1],fixedFrame.x_label.lines[1,2,2] - fixedFrame.x_label.lines[1,1,2]}) "Length of visual object";
//   input Real fixedFrame.x_label.cylinders[1].width(quantity = "Length", unit = "m") = fixedFrame.x_label.diameter "Width of visual object";
//   input Real fixedFrame.x_label.cylinders[1].height(quantity = "Length", unit = "m") = fixedFrame.x_label.diameter "Height of visual object";
//   input Real fixedFrame.x_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.x_label.cylinders[1].color[1] = Real(fixedFrame.x_label.color[1]) "Color of shape";
//   input Real fixedFrame.x_label.cylinders[1].color[2] = Real(fixedFrame.x_label.color[2]) "Color of shape";
//   input Real fixedFrame.x_label.cylinders[1].color[3] = Real(fixedFrame.x_label.color[3]) "Color of shape";
//   input Real fixedFrame.x_label.cylinders[1].specularCoefficient = fixedFrame.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.x_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.x_label.cylinders[1].lengthDirection[1],fixedFrame.x_label.cylinders[1].lengthDirection[2],fixedFrame.x_label.cylinders[1].lengthDirection[3]});
//   protected Real fixedFrame.x_label.cylinders[1].e_x[1](unit = "1") = if noEvent(fixedFrame.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else fixedFrame.x_label.cylinders[1].lengthDirection[1] / fixedFrame.x_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.x_label.cylinders[1].e_x[2](unit = "1") = if noEvent(fixedFrame.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else fixedFrame.x_label.cylinders[1].lengthDirection[2] / fixedFrame.x_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.x_label.cylinders[1].e_x[3](unit = "1") = if noEvent(fixedFrame.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else fixedFrame.x_label.cylinders[1].lengthDirection[3] / fixedFrame.x_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.x_label.cylinders[1].n_z_aux[1](unit = "1") = fixedFrame.x_label.cylinders[1].e_x[2] * fixedFrame.x_label.cylinders[1].widthDirection[3] - fixedFrame.x_label.cylinders[1].e_x[3] * fixedFrame.x_label.cylinders[1].widthDirection[2];
//   protected Real fixedFrame.x_label.cylinders[1].n_z_aux[2](unit = "1") = fixedFrame.x_label.cylinders[1].e_x[3] * fixedFrame.x_label.cylinders[1].widthDirection[1] - fixedFrame.x_label.cylinders[1].e_x[1] * fixedFrame.x_label.cylinders[1].widthDirection[3];
//   protected Real fixedFrame.x_label.cylinders[1].n_z_aux[3](unit = "1") = fixedFrame.x_label.cylinders[1].e_x[1] * fixedFrame.x_label.cylinders[1].widthDirection[2] - fixedFrame.x_label.cylinders[1].e_x[2] * fixedFrame.x_label.cylinders[1].widthDirection[1];
//   protected Real fixedFrame.x_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_label.cylinders[1].e_x[1],fixedFrame.x_label.cylinders[1].e_x[2],fixedFrame.x_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_label.cylinders[1].widthDirection[1],fixedFrame.x_label.cylinders[1].widthDirection[2],fixedFrame.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_label.cylinders[1].e_x[1],fixedFrame.x_label.cylinders[1].e_x[2],fixedFrame.x_label.cylinders[1].e_x[3]})[1];
//   protected Real fixedFrame.x_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_label.cylinders[1].e_x[1],fixedFrame.x_label.cylinders[1].e_x[2],fixedFrame.x_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_label.cylinders[1].widthDirection[1],fixedFrame.x_label.cylinders[1].widthDirection[2],fixedFrame.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_label.cylinders[1].e_x[1],fixedFrame.x_label.cylinders[1].e_x[2],fixedFrame.x_label.cylinders[1].e_x[3]})[2];
//   protected Real fixedFrame.x_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_label.cylinders[1].e_x[1],fixedFrame.x_label.cylinders[1].e_x[2],fixedFrame.x_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_label.cylinders[1].widthDirection[1],fixedFrame.x_label.cylinders[1].widthDirection[2],fixedFrame.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_label.cylinders[1].e_x[1],fixedFrame.x_label.cylinders[1].e_x[2],fixedFrame.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real fixedFrame.x_label.cylinders[1].Form;
//   output Real fixedFrame.x_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.x_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_label.cylinders[1].Material;
//   protected output Real fixedFrame.x_label.cylinders[1].Extra;
//   parameter String fixedFrame.x_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.x_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.x_label.cylinders[2].r[1](quantity = "Length", unit = "m") = fixedFrame.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_lines[1,1],fixedFrame.x_label.R_lines[1,2],fixedFrame.x_label.R_lines[1,3]},{fixedFrame.x_label.R_lines[2,1],fixedFrame.x_label.R_lines[2,2],fixedFrame.x_label.R_lines[2,3]},{fixedFrame.x_label.R_lines[3,1],fixedFrame.x_label.R_lines[3,2],fixedFrame.x_label.R_lines[3,3]}},{fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.cylinders[2].r[2](quantity = "Length", unit = "m") = fixedFrame.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_lines[1,1],fixedFrame.x_label.R_lines[1,2],fixedFrame.x_label.R_lines[1,3]},{fixedFrame.x_label.R_lines[2,1],fixedFrame.x_label.R_lines[2,2],fixedFrame.x_label.R_lines[2,3]},{fixedFrame.x_label.R_lines[3,1],fixedFrame.x_label.R_lines[3,2],fixedFrame.x_label.R_lines[3,3]}},{fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.cylinders[2].r[3](quantity = "Length", unit = "m") = fixedFrame.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_lines[1,1],fixedFrame.x_label.R_lines[1,2],fixedFrame.x_label.R_lines[1,3]},{fixedFrame.x_label.R_lines[2,1],fixedFrame.x_label.R_lines[2,2],fixedFrame.x_label.R_lines[2,3]},{fixedFrame.x_label.R_lines[3,1],fixedFrame.x_label.R_lines[3,2],fixedFrame.x_label.R_lines[3,3]}},{fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.x_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}},{fixedFrame.x_label.lines[2,2,1] - fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,2,2] - fixedFrame.x_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}},{fixedFrame.x_label.lines[2,2,1] - fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,2,2] - fixedFrame.x_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.R_rel[1,1],fixedFrame.x_label.R_rel[1,2],fixedFrame.x_label.R_rel[1,3]},{fixedFrame.x_label.R_rel[2,1],fixedFrame.x_label.R_rel[2,2],fixedFrame.x_label.R_rel[2,3]},{fixedFrame.x_label.R_rel[3,1],fixedFrame.x_label.R_rel[3,2],fixedFrame.x_label.R_rel[3,3]}},{fixedFrame.x_label.lines[2,2,1] - fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,2,2] - fixedFrame.x_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.x_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.x_label.lines[2,2,1] - fixedFrame.x_label.lines[2,1,1],fixedFrame.x_label.lines[2,2,2] - fixedFrame.x_label.lines[2,1,2]}) "Length of visual object";
//   input Real fixedFrame.x_label.cylinders[2].width(quantity = "Length", unit = "m") = fixedFrame.x_label.diameter "Width of visual object";
//   input Real fixedFrame.x_label.cylinders[2].height(quantity = "Length", unit = "m") = fixedFrame.x_label.diameter "Height of visual object";
//   input Real fixedFrame.x_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.x_label.cylinders[2].color[1] = Real(fixedFrame.x_label.color[1]) "Color of shape";
//   input Real fixedFrame.x_label.cylinders[2].color[2] = Real(fixedFrame.x_label.color[2]) "Color of shape";
//   input Real fixedFrame.x_label.cylinders[2].color[3] = Real(fixedFrame.x_label.color[3]) "Color of shape";
//   input Real fixedFrame.x_label.cylinders[2].specularCoefficient = fixedFrame.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.x_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.x_label.cylinders[2].lengthDirection[1],fixedFrame.x_label.cylinders[2].lengthDirection[2],fixedFrame.x_label.cylinders[2].lengthDirection[3]});
//   protected Real fixedFrame.x_label.cylinders[2].e_x[1](unit = "1") = if noEvent(fixedFrame.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else fixedFrame.x_label.cylinders[2].lengthDirection[1] / fixedFrame.x_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.x_label.cylinders[2].e_x[2](unit = "1") = if noEvent(fixedFrame.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else fixedFrame.x_label.cylinders[2].lengthDirection[2] / fixedFrame.x_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.x_label.cylinders[2].e_x[3](unit = "1") = if noEvent(fixedFrame.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else fixedFrame.x_label.cylinders[2].lengthDirection[3] / fixedFrame.x_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.x_label.cylinders[2].n_z_aux[1](unit = "1") = fixedFrame.x_label.cylinders[2].e_x[2] * fixedFrame.x_label.cylinders[2].widthDirection[3] - fixedFrame.x_label.cylinders[2].e_x[3] * fixedFrame.x_label.cylinders[2].widthDirection[2];
//   protected Real fixedFrame.x_label.cylinders[2].n_z_aux[2](unit = "1") = fixedFrame.x_label.cylinders[2].e_x[3] * fixedFrame.x_label.cylinders[2].widthDirection[1] - fixedFrame.x_label.cylinders[2].e_x[1] * fixedFrame.x_label.cylinders[2].widthDirection[3];
//   protected Real fixedFrame.x_label.cylinders[2].n_z_aux[3](unit = "1") = fixedFrame.x_label.cylinders[2].e_x[1] * fixedFrame.x_label.cylinders[2].widthDirection[2] - fixedFrame.x_label.cylinders[2].e_x[2] * fixedFrame.x_label.cylinders[2].widthDirection[1];
//   protected Real fixedFrame.x_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_label.cylinders[2].e_x[1],fixedFrame.x_label.cylinders[2].e_x[2],fixedFrame.x_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_label.cylinders[2].widthDirection[1],fixedFrame.x_label.cylinders[2].widthDirection[2],fixedFrame.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_label.cylinders[2].e_x[1],fixedFrame.x_label.cylinders[2].e_x[2],fixedFrame.x_label.cylinders[2].e_x[3]})[1];
//   protected Real fixedFrame.x_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_label.cylinders[2].e_x[1],fixedFrame.x_label.cylinders[2].e_x[2],fixedFrame.x_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_label.cylinders[2].widthDirection[1],fixedFrame.x_label.cylinders[2].widthDirection[2],fixedFrame.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_label.cylinders[2].e_x[1],fixedFrame.x_label.cylinders[2].e_x[2],fixedFrame.x_label.cylinders[2].e_x[3]})[2];
//   protected Real fixedFrame.x_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.x_label.cylinders[2].e_x[1],fixedFrame.x_label.cylinders[2].e_x[2],fixedFrame.x_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.x_label.cylinders[2].widthDirection[1],fixedFrame.x_label.cylinders[2].widthDirection[2],fixedFrame.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.x_label.cylinders[2].e_x[1],fixedFrame.x_label.cylinders[2].e_x[2],fixedFrame.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real fixedFrame.x_label.cylinders[2].Form;
//   output Real fixedFrame.x_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.x_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.x_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.x_label.cylinders[2].Material;
//   protected output Real fixedFrame.x_label.cylinders[2].Extra;
//   parameter String fixedFrame.y_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.y_arrowLine.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_arrowLine.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_arrowLine.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_arrowLine.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_arrowLine.length(quantity = "Length", unit = "m") = fixedFrame.lineLength "Length of visual object";
//   input Real fixedFrame.y_arrowLine.width(quantity = "Length", unit = "m") = fixedFrame.lineWidth "Width of visual object";
//   input Real fixedFrame.y_arrowLine.height(quantity = "Length", unit = "m") = fixedFrame.lineWidth "Height of visual object";
//   input Real fixedFrame.y_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.y_arrowLine.color[1] = Real(fixedFrame.color_y[1]) "Color of shape";
//   input Real fixedFrame.y_arrowLine.color[2] = Real(fixedFrame.color_y[2]) "Color of shape";
//   input Real fixedFrame.y_arrowLine.color[3] = Real(fixedFrame.color_y[3]) "Color of shape";
//   input Real fixedFrame.y_arrowLine.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.y_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.y_arrowLine.lengthDirection[1],fixedFrame.y_arrowLine.lengthDirection[2],fixedFrame.y_arrowLine.lengthDirection[3]});
//   protected Real fixedFrame.y_arrowLine.e_x[1](unit = "1") = if noEvent(fixedFrame.y_arrowLine.abs_n_x < 1e-10) then 1.0 else fixedFrame.y_arrowLine.lengthDirection[1] / fixedFrame.y_arrowLine.abs_n_x;
//   protected Real fixedFrame.y_arrowLine.e_x[2](unit = "1") = if noEvent(fixedFrame.y_arrowLine.abs_n_x < 1e-10) then 0.0 else fixedFrame.y_arrowLine.lengthDirection[2] / fixedFrame.y_arrowLine.abs_n_x;
//   protected Real fixedFrame.y_arrowLine.e_x[3](unit = "1") = if noEvent(fixedFrame.y_arrowLine.abs_n_x < 1e-10) then 0.0 else fixedFrame.y_arrowLine.lengthDirection[3] / fixedFrame.y_arrowLine.abs_n_x;
//   protected Real fixedFrame.y_arrowLine.n_z_aux[1](unit = "1") = fixedFrame.y_arrowLine.e_x[2] * fixedFrame.y_arrowLine.widthDirection[3] - fixedFrame.y_arrowLine.e_x[3] * fixedFrame.y_arrowLine.widthDirection[2];
//   protected Real fixedFrame.y_arrowLine.n_z_aux[2](unit = "1") = fixedFrame.y_arrowLine.e_x[3] * fixedFrame.y_arrowLine.widthDirection[1] - fixedFrame.y_arrowLine.e_x[1] * fixedFrame.y_arrowLine.widthDirection[3];
//   protected Real fixedFrame.y_arrowLine.n_z_aux[3](unit = "1") = fixedFrame.y_arrowLine.e_x[1] * fixedFrame.y_arrowLine.widthDirection[2] - fixedFrame.y_arrowLine.e_x[2] * fixedFrame.y_arrowLine.widthDirection[1];
//   protected Real fixedFrame.y_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_arrowLine.e_x[1],fixedFrame.y_arrowLine.e_x[2],fixedFrame.y_arrowLine.e_x[3]},if noEvent(fixedFrame.y_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.y_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_arrowLine.widthDirection[1],fixedFrame.y_arrowLine.widthDirection[2],fixedFrame.y_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_arrowLine.e_x[1],fixedFrame.y_arrowLine.e_x[2],fixedFrame.y_arrowLine.e_x[3]})[1];
//   protected Real fixedFrame.y_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_arrowLine.e_x[1],fixedFrame.y_arrowLine.e_x[2],fixedFrame.y_arrowLine.e_x[3]},if noEvent(fixedFrame.y_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.y_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_arrowLine.widthDirection[1],fixedFrame.y_arrowLine.widthDirection[2],fixedFrame.y_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_arrowLine.e_x[1],fixedFrame.y_arrowLine.e_x[2],fixedFrame.y_arrowLine.e_x[3]})[2];
//   protected Real fixedFrame.y_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_arrowLine.e_x[1],fixedFrame.y_arrowLine.e_x[2],fixedFrame.y_arrowLine.e_x[3]},if noEvent(fixedFrame.y_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.y_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_arrowLine.widthDirection[1],fixedFrame.y_arrowLine.widthDirection[2],fixedFrame.y_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_arrowLine.e_x[1],fixedFrame.y_arrowLine.e_x[2],fixedFrame.y_arrowLine.e_x[3]})[3];
//   protected output Real fixedFrame.y_arrowLine.Form;
//   output Real fixedFrame.y_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.y_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_arrowLine.Material;
//   protected output Real fixedFrame.y_arrowLine.Extra;
//   parameter String fixedFrame.y_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.y_arrowHead.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_arrowHead.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{0.0,fixedFrame.lineLength,0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_arrowHead.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{0.0,fixedFrame.lineLength,0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_arrowHead.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{0.0,fixedFrame.lineLength,0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_arrowHead.length(quantity = "Length", unit = "m") = fixedFrame.headLength "Length of visual object";
//   input Real fixedFrame.y_arrowHead.width(quantity = "Length", unit = "m") = fixedFrame.headWidth "Width of visual object";
//   input Real fixedFrame.y_arrowHead.height(quantity = "Length", unit = "m") = fixedFrame.headWidth "Height of visual object";
//   input Real fixedFrame.y_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.y_arrowHead.color[1] = Real(fixedFrame.color_y[1]) "Color of shape";
//   input Real fixedFrame.y_arrowHead.color[2] = Real(fixedFrame.color_y[2]) "Color of shape";
//   input Real fixedFrame.y_arrowHead.color[3] = Real(fixedFrame.color_y[3]) "Color of shape";
//   input Real fixedFrame.y_arrowHead.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.y_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.y_arrowHead.lengthDirection[1],fixedFrame.y_arrowHead.lengthDirection[2],fixedFrame.y_arrowHead.lengthDirection[3]});
//   protected Real fixedFrame.y_arrowHead.e_x[1](unit = "1") = if noEvent(fixedFrame.y_arrowHead.abs_n_x < 1e-10) then 1.0 else fixedFrame.y_arrowHead.lengthDirection[1] / fixedFrame.y_arrowHead.abs_n_x;
//   protected Real fixedFrame.y_arrowHead.e_x[2](unit = "1") = if noEvent(fixedFrame.y_arrowHead.abs_n_x < 1e-10) then 0.0 else fixedFrame.y_arrowHead.lengthDirection[2] / fixedFrame.y_arrowHead.abs_n_x;
//   protected Real fixedFrame.y_arrowHead.e_x[3](unit = "1") = if noEvent(fixedFrame.y_arrowHead.abs_n_x < 1e-10) then 0.0 else fixedFrame.y_arrowHead.lengthDirection[3] / fixedFrame.y_arrowHead.abs_n_x;
//   protected Real fixedFrame.y_arrowHead.n_z_aux[1](unit = "1") = fixedFrame.y_arrowHead.e_x[2] * fixedFrame.y_arrowHead.widthDirection[3] - fixedFrame.y_arrowHead.e_x[3] * fixedFrame.y_arrowHead.widthDirection[2];
//   protected Real fixedFrame.y_arrowHead.n_z_aux[2](unit = "1") = fixedFrame.y_arrowHead.e_x[3] * fixedFrame.y_arrowHead.widthDirection[1] - fixedFrame.y_arrowHead.e_x[1] * fixedFrame.y_arrowHead.widthDirection[3];
//   protected Real fixedFrame.y_arrowHead.n_z_aux[3](unit = "1") = fixedFrame.y_arrowHead.e_x[1] * fixedFrame.y_arrowHead.widthDirection[2] - fixedFrame.y_arrowHead.e_x[2] * fixedFrame.y_arrowHead.widthDirection[1];
//   protected Real fixedFrame.y_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_arrowHead.e_x[1],fixedFrame.y_arrowHead.e_x[2],fixedFrame.y_arrowHead.e_x[3]},if noEvent(fixedFrame.y_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.y_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_arrowHead.widthDirection[1],fixedFrame.y_arrowHead.widthDirection[2],fixedFrame.y_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_arrowHead.e_x[1],fixedFrame.y_arrowHead.e_x[2],fixedFrame.y_arrowHead.e_x[3]})[1];
//   protected Real fixedFrame.y_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_arrowHead.e_x[1],fixedFrame.y_arrowHead.e_x[2],fixedFrame.y_arrowHead.e_x[3]},if noEvent(fixedFrame.y_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.y_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_arrowHead.widthDirection[1],fixedFrame.y_arrowHead.widthDirection[2],fixedFrame.y_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_arrowHead.e_x[1],fixedFrame.y_arrowHead.e_x[2],fixedFrame.y_arrowHead.e_x[3]})[2];
//   protected Real fixedFrame.y_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_arrowHead.e_x[1],fixedFrame.y_arrowHead.e_x[2],fixedFrame.y_arrowHead.e_x[3]},if noEvent(fixedFrame.y_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.y_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_arrowHead.widthDirection[1],fixedFrame.y_arrowHead.widthDirection[2],fixedFrame.y_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_arrowHead.e_x[1],fixedFrame.y_arrowHead.e_x[2],fixedFrame.y_arrowHead.e_x[3]})[3];
//   protected output Real fixedFrame.y_arrowHead.Form;
//   output Real fixedFrame.y_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.y_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_arrowHead.Material;
//   protected output Real fixedFrame.y_arrowHead.Extra;
//   input Real fixedFrame.y_label.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.r_lines[2](quantity = "Length", unit = "m") = fixedFrame.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.n_x[2](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.n_y[1](unit = "1") = -1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.n_y[2](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.y_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[1,2,1](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[1,2,2](quantity = "Length", unit = "m") = 1.5 * fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[2,1,2](quantity = "Length", unit = "m") = 1.5 * fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[2,2,1](quantity = "Length", unit = "m") = 0.5 * fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.75 * fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.y_label.diameter(quantity = "Length", unit = "m", min = 0.0) = fixedFrame.diameter "Diameter of the cylinders defined by lines";
//   input Integer fixedFrame.y_label.color[1](min = 0, max = 255) = fixedFrame.color_y[1] "Color of cylinders";
//   input Integer fixedFrame.y_label.color[2](min = 0, max = 255) = fixedFrame.color_y[2] "Color of cylinders";
//   input Integer fixedFrame.y_label.color[3](min = 0, max = 255) = fixedFrame.color_y[3] "Color of cylinders";
//   input Real fixedFrame.y_label.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer fixedFrame.y_label.n = 2 "Number of cylinders";
//   protected Real fixedFrame.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[1][1];
//   protected Real fixedFrame.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[1][2];
//   protected Real fixedFrame.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[1][3];
//   protected Real fixedFrame.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[2][1];
//   protected Real fixedFrame.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[2][2];
//   protected Real fixedFrame.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[2][3];
//   protected Real fixedFrame.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[3][1];
//   protected Real fixedFrame.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[3][2];
//   protected Real fixedFrame.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.y_label.n_x[1],fixedFrame.y_label.n_x[2],fixedFrame.y_label.n_x[3]},{fixedFrame.y_label.n_y[1],fixedFrame.y_label.n_y[2],fixedFrame.y_label.n_y[3]})[3][3];
//   protected Real fixedFrame.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[1][1];
//   protected Real fixedFrame.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[1][2];
//   protected Real fixedFrame.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[1][3];
//   protected Real fixedFrame.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[2][1];
//   protected Real fixedFrame.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[2][2];
//   protected Real fixedFrame.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[2][3];
//   protected Real fixedFrame.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[3][1];
//   protected Real fixedFrame.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[3][2];
//   protected Real fixedFrame.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}})[3][3];
//   protected Real fixedFrame.y_label.r_abs[1](quantity = "Length", unit = "m") = fixedFrame.y_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{fixedFrame.y_label.r_lines[1],fixedFrame.y_label.r_lines[2],fixedFrame.y_label.r_lines[3]})[1];
//   protected Real fixedFrame.y_label.r_abs[2](quantity = "Length", unit = "m") = fixedFrame.y_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{fixedFrame.y_label.r_lines[1],fixedFrame.y_label.r_lines[2],fixedFrame.y_label.r_lines[3]})[2];
//   protected Real fixedFrame.y_label.r_abs[3](quantity = "Length", unit = "m") = fixedFrame.y_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R.T[1,1],fixedFrame.y_label.R.T[1,2],fixedFrame.y_label.R.T[1,3]},{fixedFrame.y_label.R.T[2,1],fixedFrame.y_label.R.T[2,2],fixedFrame.y_label.R.T[2,3]},{fixedFrame.y_label.R.T[3,1],fixedFrame.y_label.R.T[3,2],fixedFrame.y_label.R.T[3,3]}},{fixedFrame.y_label.r_lines[1],fixedFrame.y_label.r_lines[2],fixedFrame.y_label.r_lines[3]})[3];
//   parameter String fixedFrame.y_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.y_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.cylinders[1].r[1](quantity = "Length", unit = "m") = fixedFrame.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_lines[1,1],fixedFrame.y_label.R_lines[1,2],fixedFrame.y_label.R_lines[1,3]},{fixedFrame.y_label.R_lines[2,1],fixedFrame.y_label.R_lines[2,2],fixedFrame.y_label.R_lines[2,3]},{fixedFrame.y_label.R_lines[3,1],fixedFrame.y_label.R_lines[3,2],fixedFrame.y_label.R_lines[3,3]}},{fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.cylinders[1].r[2](quantity = "Length", unit = "m") = fixedFrame.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_lines[1,1],fixedFrame.y_label.R_lines[1,2],fixedFrame.y_label.R_lines[1,3]},{fixedFrame.y_label.R_lines[2,1],fixedFrame.y_label.R_lines[2,2],fixedFrame.y_label.R_lines[2,3]},{fixedFrame.y_label.R_lines[3,1],fixedFrame.y_label.R_lines[3,2],fixedFrame.y_label.R_lines[3,3]}},{fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.cylinders[1].r[3](quantity = "Length", unit = "m") = fixedFrame.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_lines[1,1],fixedFrame.y_label.R_lines[1,2],fixedFrame.y_label.R_lines[1,3]},{fixedFrame.y_label.R_lines[2,1],fixedFrame.y_label.R_lines[2,2],fixedFrame.y_label.R_lines[2,3]},{fixedFrame.y_label.R_lines[3,1],fixedFrame.y_label.R_lines[3,2],fixedFrame.y_label.R_lines[3,3]}},{fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}},{fixedFrame.y_label.lines[1,2,1] - fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,2,2] - fixedFrame.y_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}},{fixedFrame.y_label.lines[1,2,1] - fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,2,2] - fixedFrame.y_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}},{fixedFrame.y_label.lines[1,2,1] - fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,2,2] - fixedFrame.y_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.y_label.lines[1,2,1] - fixedFrame.y_label.lines[1,1,1],fixedFrame.y_label.lines[1,2,2] - fixedFrame.y_label.lines[1,1,2]}) "Length of visual object";
//   input Real fixedFrame.y_label.cylinders[1].width(quantity = "Length", unit = "m") = fixedFrame.y_label.diameter "Width of visual object";
//   input Real fixedFrame.y_label.cylinders[1].height(quantity = "Length", unit = "m") = fixedFrame.y_label.diameter "Height of visual object";
//   input Real fixedFrame.y_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.y_label.cylinders[1].color[1] = Real(fixedFrame.y_label.color[1]) "Color of shape";
//   input Real fixedFrame.y_label.cylinders[1].color[2] = Real(fixedFrame.y_label.color[2]) "Color of shape";
//   input Real fixedFrame.y_label.cylinders[1].color[3] = Real(fixedFrame.y_label.color[3]) "Color of shape";
//   input Real fixedFrame.y_label.cylinders[1].specularCoefficient = fixedFrame.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.y_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.y_label.cylinders[1].lengthDirection[1],fixedFrame.y_label.cylinders[1].lengthDirection[2],fixedFrame.y_label.cylinders[1].lengthDirection[3]});
//   protected Real fixedFrame.y_label.cylinders[1].e_x[1](unit = "1") = if noEvent(fixedFrame.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else fixedFrame.y_label.cylinders[1].lengthDirection[1] / fixedFrame.y_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.y_label.cylinders[1].e_x[2](unit = "1") = if noEvent(fixedFrame.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else fixedFrame.y_label.cylinders[1].lengthDirection[2] / fixedFrame.y_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.y_label.cylinders[1].e_x[3](unit = "1") = if noEvent(fixedFrame.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else fixedFrame.y_label.cylinders[1].lengthDirection[3] / fixedFrame.y_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.y_label.cylinders[1].n_z_aux[1](unit = "1") = fixedFrame.y_label.cylinders[1].e_x[2] * fixedFrame.y_label.cylinders[1].widthDirection[3] - fixedFrame.y_label.cylinders[1].e_x[3] * fixedFrame.y_label.cylinders[1].widthDirection[2];
//   protected Real fixedFrame.y_label.cylinders[1].n_z_aux[2](unit = "1") = fixedFrame.y_label.cylinders[1].e_x[3] * fixedFrame.y_label.cylinders[1].widthDirection[1] - fixedFrame.y_label.cylinders[1].e_x[1] * fixedFrame.y_label.cylinders[1].widthDirection[3];
//   protected Real fixedFrame.y_label.cylinders[1].n_z_aux[3](unit = "1") = fixedFrame.y_label.cylinders[1].e_x[1] * fixedFrame.y_label.cylinders[1].widthDirection[2] - fixedFrame.y_label.cylinders[1].e_x[2] * fixedFrame.y_label.cylinders[1].widthDirection[1];
//   protected Real fixedFrame.y_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_label.cylinders[1].e_x[1],fixedFrame.y_label.cylinders[1].e_x[2],fixedFrame.y_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_label.cylinders[1].widthDirection[1],fixedFrame.y_label.cylinders[1].widthDirection[2],fixedFrame.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_label.cylinders[1].e_x[1],fixedFrame.y_label.cylinders[1].e_x[2],fixedFrame.y_label.cylinders[1].e_x[3]})[1];
//   protected Real fixedFrame.y_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_label.cylinders[1].e_x[1],fixedFrame.y_label.cylinders[1].e_x[2],fixedFrame.y_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_label.cylinders[1].widthDirection[1],fixedFrame.y_label.cylinders[1].widthDirection[2],fixedFrame.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_label.cylinders[1].e_x[1],fixedFrame.y_label.cylinders[1].e_x[2],fixedFrame.y_label.cylinders[1].e_x[3]})[2];
//   protected Real fixedFrame.y_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_label.cylinders[1].e_x[1],fixedFrame.y_label.cylinders[1].e_x[2],fixedFrame.y_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_label.cylinders[1].widthDirection[1],fixedFrame.y_label.cylinders[1].widthDirection[2],fixedFrame.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_label.cylinders[1].e_x[1],fixedFrame.y_label.cylinders[1].e_x[2],fixedFrame.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real fixedFrame.y_label.cylinders[1].Form;
//   output Real fixedFrame.y_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.y_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_label.cylinders[1].Material;
//   protected output Real fixedFrame.y_label.cylinders[1].Extra;
//   parameter String fixedFrame.y_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.y_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.y_label.cylinders[2].r[1](quantity = "Length", unit = "m") = fixedFrame.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_lines[1,1],fixedFrame.y_label.R_lines[1,2],fixedFrame.y_label.R_lines[1,3]},{fixedFrame.y_label.R_lines[2,1],fixedFrame.y_label.R_lines[2,2],fixedFrame.y_label.R_lines[2,3]},{fixedFrame.y_label.R_lines[3,1],fixedFrame.y_label.R_lines[3,2],fixedFrame.y_label.R_lines[3,3]}},{fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.cylinders[2].r[2](quantity = "Length", unit = "m") = fixedFrame.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_lines[1,1],fixedFrame.y_label.R_lines[1,2],fixedFrame.y_label.R_lines[1,3]},{fixedFrame.y_label.R_lines[2,1],fixedFrame.y_label.R_lines[2,2],fixedFrame.y_label.R_lines[2,3]},{fixedFrame.y_label.R_lines[3,1],fixedFrame.y_label.R_lines[3,2],fixedFrame.y_label.R_lines[3,3]}},{fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.cylinders[2].r[3](quantity = "Length", unit = "m") = fixedFrame.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_lines[1,1],fixedFrame.y_label.R_lines[1,2],fixedFrame.y_label.R_lines[1,3]},{fixedFrame.y_label.R_lines[2,1],fixedFrame.y_label.R_lines[2,2],fixedFrame.y_label.R_lines[2,3]},{fixedFrame.y_label.R_lines[3,1],fixedFrame.y_label.R_lines[3,2],fixedFrame.y_label.R_lines[3,3]}},{fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.y_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}},{fixedFrame.y_label.lines[2,2,1] - fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,2,2] - fixedFrame.y_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}},{fixedFrame.y_label.lines[2,2,1] - fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,2,2] - fixedFrame.y_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.R_rel[1,1],fixedFrame.y_label.R_rel[1,2],fixedFrame.y_label.R_rel[1,3]},{fixedFrame.y_label.R_rel[2,1],fixedFrame.y_label.R_rel[2,2],fixedFrame.y_label.R_rel[2,3]},{fixedFrame.y_label.R_rel[3,1],fixedFrame.y_label.R_rel[3,2],fixedFrame.y_label.R_rel[3,3]}},{fixedFrame.y_label.lines[2,2,1] - fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,2,2] - fixedFrame.y_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.y_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.y_label.lines[2,2,1] - fixedFrame.y_label.lines[2,1,1],fixedFrame.y_label.lines[2,2,2] - fixedFrame.y_label.lines[2,1,2]}) "Length of visual object";
//   input Real fixedFrame.y_label.cylinders[2].width(quantity = "Length", unit = "m") = fixedFrame.y_label.diameter "Width of visual object";
//   input Real fixedFrame.y_label.cylinders[2].height(quantity = "Length", unit = "m") = fixedFrame.y_label.diameter "Height of visual object";
//   input Real fixedFrame.y_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.y_label.cylinders[2].color[1] = Real(fixedFrame.y_label.color[1]) "Color of shape";
//   input Real fixedFrame.y_label.cylinders[2].color[2] = Real(fixedFrame.y_label.color[2]) "Color of shape";
//   input Real fixedFrame.y_label.cylinders[2].color[3] = Real(fixedFrame.y_label.color[3]) "Color of shape";
//   input Real fixedFrame.y_label.cylinders[2].specularCoefficient = fixedFrame.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.y_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.y_label.cylinders[2].lengthDirection[1],fixedFrame.y_label.cylinders[2].lengthDirection[2],fixedFrame.y_label.cylinders[2].lengthDirection[3]});
//   protected Real fixedFrame.y_label.cylinders[2].e_x[1](unit = "1") = if noEvent(fixedFrame.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else fixedFrame.y_label.cylinders[2].lengthDirection[1] / fixedFrame.y_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.y_label.cylinders[2].e_x[2](unit = "1") = if noEvent(fixedFrame.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else fixedFrame.y_label.cylinders[2].lengthDirection[2] / fixedFrame.y_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.y_label.cylinders[2].e_x[3](unit = "1") = if noEvent(fixedFrame.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else fixedFrame.y_label.cylinders[2].lengthDirection[3] / fixedFrame.y_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.y_label.cylinders[2].n_z_aux[1](unit = "1") = fixedFrame.y_label.cylinders[2].e_x[2] * fixedFrame.y_label.cylinders[2].widthDirection[3] - fixedFrame.y_label.cylinders[2].e_x[3] * fixedFrame.y_label.cylinders[2].widthDirection[2];
//   protected Real fixedFrame.y_label.cylinders[2].n_z_aux[2](unit = "1") = fixedFrame.y_label.cylinders[2].e_x[3] * fixedFrame.y_label.cylinders[2].widthDirection[1] - fixedFrame.y_label.cylinders[2].e_x[1] * fixedFrame.y_label.cylinders[2].widthDirection[3];
//   protected Real fixedFrame.y_label.cylinders[2].n_z_aux[3](unit = "1") = fixedFrame.y_label.cylinders[2].e_x[1] * fixedFrame.y_label.cylinders[2].widthDirection[2] - fixedFrame.y_label.cylinders[2].e_x[2] * fixedFrame.y_label.cylinders[2].widthDirection[1];
//   protected Real fixedFrame.y_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_label.cylinders[2].e_x[1],fixedFrame.y_label.cylinders[2].e_x[2],fixedFrame.y_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_label.cylinders[2].widthDirection[1],fixedFrame.y_label.cylinders[2].widthDirection[2],fixedFrame.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_label.cylinders[2].e_x[1],fixedFrame.y_label.cylinders[2].e_x[2],fixedFrame.y_label.cylinders[2].e_x[3]})[1];
//   protected Real fixedFrame.y_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_label.cylinders[2].e_x[1],fixedFrame.y_label.cylinders[2].e_x[2],fixedFrame.y_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_label.cylinders[2].widthDirection[1],fixedFrame.y_label.cylinders[2].widthDirection[2],fixedFrame.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_label.cylinders[2].e_x[1],fixedFrame.y_label.cylinders[2].e_x[2],fixedFrame.y_label.cylinders[2].e_x[3]})[2];
//   protected Real fixedFrame.y_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.y_label.cylinders[2].e_x[1],fixedFrame.y_label.cylinders[2].e_x[2],fixedFrame.y_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.y_label.cylinders[2].widthDirection[1],fixedFrame.y_label.cylinders[2].widthDirection[2],fixedFrame.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.y_label.cylinders[2].e_x[1],fixedFrame.y_label.cylinders[2].e_x[2],fixedFrame.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real fixedFrame.y_label.cylinders[2].Form;
//   output Real fixedFrame.y_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.y_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.y_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.y_label.cylinders[2].Material;
//   protected output Real fixedFrame.y_label.cylinders[2].Extra;
//   parameter String fixedFrame.z_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.z_arrowLine.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_arrowLine.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_arrowLine.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_arrowLine.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_arrowLine.length(quantity = "Length", unit = "m") = fixedFrame.lineLength "Length of visual object";
//   input Real fixedFrame.z_arrowLine.width(quantity = "Length", unit = "m") = fixedFrame.lineWidth "Width of visual object";
//   input Real fixedFrame.z_arrowLine.height(quantity = "Length", unit = "m") = fixedFrame.lineWidth "Height of visual object";
//   input Real fixedFrame.z_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.z_arrowLine.color[1] = Real(fixedFrame.color_z[1]) "Color of shape";
//   input Real fixedFrame.z_arrowLine.color[2] = Real(fixedFrame.color_z[2]) "Color of shape";
//   input Real fixedFrame.z_arrowLine.color[3] = Real(fixedFrame.color_z[3]) "Color of shape";
//   input Real fixedFrame.z_arrowLine.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.z_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.z_arrowLine.lengthDirection[1],fixedFrame.z_arrowLine.lengthDirection[2],fixedFrame.z_arrowLine.lengthDirection[3]});
//   protected Real fixedFrame.z_arrowLine.e_x[1](unit = "1") = if noEvent(fixedFrame.z_arrowLine.abs_n_x < 1e-10) then 1.0 else fixedFrame.z_arrowLine.lengthDirection[1] / fixedFrame.z_arrowLine.abs_n_x;
//   protected Real fixedFrame.z_arrowLine.e_x[2](unit = "1") = if noEvent(fixedFrame.z_arrowLine.abs_n_x < 1e-10) then 0.0 else fixedFrame.z_arrowLine.lengthDirection[2] / fixedFrame.z_arrowLine.abs_n_x;
//   protected Real fixedFrame.z_arrowLine.e_x[3](unit = "1") = if noEvent(fixedFrame.z_arrowLine.abs_n_x < 1e-10) then 0.0 else fixedFrame.z_arrowLine.lengthDirection[3] / fixedFrame.z_arrowLine.abs_n_x;
//   protected Real fixedFrame.z_arrowLine.n_z_aux[1](unit = "1") = fixedFrame.z_arrowLine.e_x[2] * fixedFrame.z_arrowLine.widthDirection[3] - fixedFrame.z_arrowLine.e_x[3] * fixedFrame.z_arrowLine.widthDirection[2];
//   protected Real fixedFrame.z_arrowLine.n_z_aux[2](unit = "1") = fixedFrame.z_arrowLine.e_x[3] * fixedFrame.z_arrowLine.widthDirection[1] - fixedFrame.z_arrowLine.e_x[1] * fixedFrame.z_arrowLine.widthDirection[3];
//   protected Real fixedFrame.z_arrowLine.n_z_aux[3](unit = "1") = fixedFrame.z_arrowLine.e_x[1] * fixedFrame.z_arrowLine.widthDirection[2] - fixedFrame.z_arrowLine.e_x[2] * fixedFrame.z_arrowLine.widthDirection[1];
//   protected Real fixedFrame.z_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_arrowLine.e_x[1],fixedFrame.z_arrowLine.e_x[2],fixedFrame.z_arrowLine.e_x[3]},if noEvent(fixedFrame.z_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.z_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_arrowLine.widthDirection[1],fixedFrame.z_arrowLine.widthDirection[2],fixedFrame.z_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_arrowLine.e_x[1],fixedFrame.z_arrowLine.e_x[2],fixedFrame.z_arrowLine.e_x[3]})[1];
//   protected Real fixedFrame.z_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_arrowLine.e_x[1],fixedFrame.z_arrowLine.e_x[2],fixedFrame.z_arrowLine.e_x[3]},if noEvent(fixedFrame.z_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.z_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_arrowLine.widthDirection[1],fixedFrame.z_arrowLine.widthDirection[2],fixedFrame.z_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_arrowLine.e_x[1],fixedFrame.z_arrowLine.e_x[2],fixedFrame.z_arrowLine.e_x[3]})[2];
//   protected Real fixedFrame.z_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_arrowLine.e_x[1],fixedFrame.z_arrowLine.e_x[2],fixedFrame.z_arrowLine.e_x[3]},if noEvent(fixedFrame.z_arrowLine.n_z_aux[1] ^ 2.0 + (fixedFrame.z_arrowLine.n_z_aux[2] ^ 2.0 + fixedFrame.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_arrowLine.widthDirection[1],fixedFrame.z_arrowLine.widthDirection[2],fixedFrame.z_arrowLine.widthDirection[3]} else if noEvent(abs(fixedFrame.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_arrowLine.e_x[1],fixedFrame.z_arrowLine.e_x[2],fixedFrame.z_arrowLine.e_x[3]})[3];
//   protected output Real fixedFrame.z_arrowLine.Form;
//   output Real fixedFrame.z_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.z_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_arrowLine.Material;
//   protected output Real fixedFrame.z_arrowLine.Extra;
//   parameter String fixedFrame.z_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.z_arrowHead.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_arrowHead.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{0.0,0.0,fixedFrame.lineLength})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_arrowHead.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{0.0,0.0,fixedFrame.lineLength})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_arrowHead.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] + Modelica.Mechanics.MultiBody.Frames.resolve1(fixedFrame.frame_a.R,{0.0,0.0,fixedFrame.lineLength})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_arrowHead.length(quantity = "Length", unit = "m") = fixedFrame.headLength "Length of visual object";
//   input Real fixedFrame.z_arrowHead.width(quantity = "Length", unit = "m") = fixedFrame.headWidth "Width of visual object";
//   input Real fixedFrame.z_arrowHead.height(quantity = "Length", unit = "m") = fixedFrame.headWidth "Height of visual object";
//   input Real fixedFrame.z_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.z_arrowHead.color[1] = Real(fixedFrame.color_z[1]) "Color of shape";
//   input Real fixedFrame.z_arrowHead.color[2] = Real(fixedFrame.color_z[2]) "Color of shape";
//   input Real fixedFrame.z_arrowHead.color[3] = Real(fixedFrame.color_z[3]) "Color of shape";
//   input Real fixedFrame.z_arrowHead.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.z_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.z_arrowHead.lengthDirection[1],fixedFrame.z_arrowHead.lengthDirection[2],fixedFrame.z_arrowHead.lengthDirection[3]});
//   protected Real fixedFrame.z_arrowHead.e_x[1](unit = "1") = if noEvent(fixedFrame.z_arrowHead.abs_n_x < 1e-10) then 1.0 else fixedFrame.z_arrowHead.lengthDirection[1] / fixedFrame.z_arrowHead.abs_n_x;
//   protected Real fixedFrame.z_arrowHead.e_x[2](unit = "1") = if noEvent(fixedFrame.z_arrowHead.abs_n_x < 1e-10) then 0.0 else fixedFrame.z_arrowHead.lengthDirection[2] / fixedFrame.z_arrowHead.abs_n_x;
//   protected Real fixedFrame.z_arrowHead.e_x[3](unit = "1") = if noEvent(fixedFrame.z_arrowHead.abs_n_x < 1e-10) then 0.0 else fixedFrame.z_arrowHead.lengthDirection[3] / fixedFrame.z_arrowHead.abs_n_x;
//   protected Real fixedFrame.z_arrowHead.n_z_aux[1](unit = "1") = fixedFrame.z_arrowHead.e_x[2] * fixedFrame.z_arrowHead.widthDirection[3] - fixedFrame.z_arrowHead.e_x[3] * fixedFrame.z_arrowHead.widthDirection[2];
//   protected Real fixedFrame.z_arrowHead.n_z_aux[2](unit = "1") = fixedFrame.z_arrowHead.e_x[3] * fixedFrame.z_arrowHead.widthDirection[1] - fixedFrame.z_arrowHead.e_x[1] * fixedFrame.z_arrowHead.widthDirection[3];
//   protected Real fixedFrame.z_arrowHead.n_z_aux[3](unit = "1") = fixedFrame.z_arrowHead.e_x[1] * fixedFrame.z_arrowHead.widthDirection[2] - fixedFrame.z_arrowHead.e_x[2] * fixedFrame.z_arrowHead.widthDirection[1];
//   protected Real fixedFrame.z_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_arrowHead.e_x[1],fixedFrame.z_arrowHead.e_x[2],fixedFrame.z_arrowHead.e_x[3]},if noEvent(fixedFrame.z_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.z_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_arrowHead.widthDirection[1],fixedFrame.z_arrowHead.widthDirection[2],fixedFrame.z_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_arrowHead.e_x[1],fixedFrame.z_arrowHead.e_x[2],fixedFrame.z_arrowHead.e_x[3]})[1];
//   protected Real fixedFrame.z_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_arrowHead.e_x[1],fixedFrame.z_arrowHead.e_x[2],fixedFrame.z_arrowHead.e_x[3]},if noEvent(fixedFrame.z_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.z_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_arrowHead.widthDirection[1],fixedFrame.z_arrowHead.widthDirection[2],fixedFrame.z_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_arrowHead.e_x[1],fixedFrame.z_arrowHead.e_x[2],fixedFrame.z_arrowHead.e_x[3]})[2];
//   protected Real fixedFrame.z_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_arrowHead.e_x[1],fixedFrame.z_arrowHead.e_x[2],fixedFrame.z_arrowHead.e_x[3]},if noEvent(fixedFrame.z_arrowHead.n_z_aux[1] ^ 2.0 + (fixedFrame.z_arrowHead.n_z_aux[2] ^ 2.0 + fixedFrame.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_arrowHead.widthDirection[1],fixedFrame.z_arrowHead.widthDirection[2],fixedFrame.z_arrowHead.widthDirection[3]} else if noEvent(abs(fixedFrame.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_arrowHead.e_x[1],fixedFrame.z_arrowHead.e_x[2],fixedFrame.z_arrowHead.e_x[3]})[3];
//   protected output Real fixedFrame.z_arrowHead.Form;
//   output Real fixedFrame.z_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.z_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_arrowHead.Material;
//   protected output Real fixedFrame.z_arrowHead.Extra;
//   input Real fixedFrame.z_label.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.r[1](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.r[2](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.r[3](quantity = "Length", unit = "m") = fixedFrame.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.r_lines[3](quantity = "Length", unit = "m") = fixedFrame.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.n_x[3](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
//   input Real fixedFrame.z_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[1,2,1](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[1,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[2,1,2](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[2,2,1](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[2,2,2](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[3,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[3,1,2](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[3,2,1](quantity = "Length", unit = "m") = fixedFrame.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.lines[3,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
//   input Real fixedFrame.z_label.diameter(quantity = "Length", unit = "m", min = 0.0) = fixedFrame.diameter "Diameter of the cylinders defined by lines";
//   input Integer fixedFrame.z_label.color[1](min = 0, max = 255) = fixedFrame.color_z[1] "Color of cylinders";
//   input Integer fixedFrame.z_label.color[2](min = 0, max = 255) = fixedFrame.color_z[2] "Color of cylinders";
//   input Integer fixedFrame.z_label.color[3](min = 0, max = 255) = fixedFrame.color_z[3] "Color of cylinders";
//   input Real fixedFrame.z_label.specularCoefficient = fixedFrame.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected parameter Integer fixedFrame.z_label.n = 3 "Number of cylinders";
//   protected Real fixedFrame.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[1][1];
//   protected Real fixedFrame.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[1][2];
//   protected Real fixedFrame.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[1][3];
//   protected Real fixedFrame.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[2][1];
//   protected Real fixedFrame.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[2][2];
//   protected Real fixedFrame.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[2][3];
//   protected Real fixedFrame.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[3][1];
//   protected Real fixedFrame.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[3][2];
//   protected Real fixedFrame.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({fixedFrame.z_label.n_x[1],fixedFrame.z_label.n_x[2],fixedFrame.z_label.n_x[3]},{fixedFrame.z_label.n_y[1],fixedFrame.z_label.n_y[2],fixedFrame.z_label.n_y[3]})[3][3];
//   protected Real fixedFrame.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[1][1];
//   protected Real fixedFrame.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[1][2];
//   protected Real fixedFrame.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[1][3];
//   protected Real fixedFrame.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[2][1];
//   protected Real fixedFrame.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[2][2];
//   protected Real fixedFrame.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[2][3];
//   protected Real fixedFrame.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[3][1];
//   protected Real fixedFrame.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[3][2];
//   protected Real fixedFrame.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}})[3][3];
//   protected Real fixedFrame.z_label.r_abs[1](quantity = "Length", unit = "m") = fixedFrame.z_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{fixedFrame.z_label.r_lines[1],fixedFrame.z_label.r_lines[2],fixedFrame.z_label.r_lines[3]})[1];
//   protected Real fixedFrame.z_label.r_abs[2](quantity = "Length", unit = "m") = fixedFrame.z_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{fixedFrame.z_label.r_lines[1],fixedFrame.z_label.r_lines[2],fixedFrame.z_label.r_lines[3]})[2];
//   protected Real fixedFrame.z_label.r_abs[3](quantity = "Length", unit = "m") = fixedFrame.z_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R.T[1,1],fixedFrame.z_label.R.T[1,2],fixedFrame.z_label.R.T[1,3]},{fixedFrame.z_label.R.T[2,1],fixedFrame.z_label.R.T[2,2],fixedFrame.z_label.R.T[2,3]},{fixedFrame.z_label.R.T[3,1],fixedFrame.z_label.R.T[3,2],fixedFrame.z_label.R.T[3,3]}},{fixedFrame.z_label.r_lines[1],fixedFrame.z_label.r_lines[2],fixedFrame.z_label.r_lines[3]})[3];
//   parameter String fixedFrame.z_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.z_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[1].r[1](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[1].r[2](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[1].r[3](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[1,2,1] - fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,2,2] - fixedFrame.z_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[1,2,1] - fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,2,2] - fixedFrame.z_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[1,2,1] - fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,2,2] - fixedFrame.z_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.z_label.lines[1,2,1] - fixedFrame.z_label.lines[1,1,1],fixedFrame.z_label.lines[1,2,2] - fixedFrame.z_label.lines[1,1,2]}) "Length of visual object";
//   input Real fixedFrame.z_label.cylinders[1].width(quantity = "Length", unit = "m") = fixedFrame.z_label.diameter "Width of visual object";
//   input Real fixedFrame.z_label.cylinders[1].height(quantity = "Length", unit = "m") = fixedFrame.z_label.diameter "Height of visual object";
//   input Real fixedFrame.z_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.z_label.cylinders[1].color[1] = Real(fixedFrame.z_label.color[1]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[1].color[2] = Real(fixedFrame.z_label.color[2]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[1].color[3] = Real(fixedFrame.z_label.color[3]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[1].specularCoefficient = fixedFrame.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.z_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.z_label.cylinders[1].lengthDirection[1],fixedFrame.z_label.cylinders[1].lengthDirection[2],fixedFrame.z_label.cylinders[1].lengthDirection[3]});
//   protected Real fixedFrame.z_label.cylinders[1].e_x[1](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else fixedFrame.z_label.cylinders[1].lengthDirection[1] / fixedFrame.z_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[1].e_x[2](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else fixedFrame.z_label.cylinders[1].lengthDirection[2] / fixedFrame.z_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[1].e_x[3](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else fixedFrame.z_label.cylinders[1].lengthDirection[3] / fixedFrame.z_label.cylinders[1].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[1].n_z_aux[1](unit = "1") = fixedFrame.z_label.cylinders[1].e_x[2] * fixedFrame.z_label.cylinders[1].widthDirection[3] - fixedFrame.z_label.cylinders[1].e_x[3] * fixedFrame.z_label.cylinders[1].widthDirection[2];
//   protected Real fixedFrame.z_label.cylinders[1].n_z_aux[2](unit = "1") = fixedFrame.z_label.cylinders[1].e_x[3] * fixedFrame.z_label.cylinders[1].widthDirection[1] - fixedFrame.z_label.cylinders[1].e_x[1] * fixedFrame.z_label.cylinders[1].widthDirection[3];
//   protected Real fixedFrame.z_label.cylinders[1].n_z_aux[3](unit = "1") = fixedFrame.z_label.cylinders[1].e_x[1] * fixedFrame.z_label.cylinders[1].widthDirection[2] - fixedFrame.z_label.cylinders[1].e_x[2] * fixedFrame.z_label.cylinders[1].widthDirection[1];
//   protected Real fixedFrame.z_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[1].e_x[1],fixedFrame.z_label.cylinders[1].e_x[2],fixedFrame.z_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[1].widthDirection[1],fixedFrame.z_label.cylinders[1].widthDirection[2],fixedFrame.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[1].e_x[1],fixedFrame.z_label.cylinders[1].e_x[2],fixedFrame.z_label.cylinders[1].e_x[3]})[1];
//   protected Real fixedFrame.z_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[1].e_x[1],fixedFrame.z_label.cylinders[1].e_x[2],fixedFrame.z_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[1].widthDirection[1],fixedFrame.z_label.cylinders[1].widthDirection[2],fixedFrame.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[1].e_x[1],fixedFrame.z_label.cylinders[1].e_x[2],fixedFrame.z_label.cylinders[1].e_x[3]})[2];
//   protected Real fixedFrame.z_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[1].e_x[1],fixedFrame.z_label.cylinders[1].e_x[2],fixedFrame.z_label.cylinders[1].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[1].widthDirection[1],fixedFrame.z_label.cylinders[1].widthDirection[2],fixedFrame.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[1].e_x[1],fixedFrame.z_label.cylinders[1].e_x[2],fixedFrame.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real fixedFrame.z_label.cylinders[1].Form;
//   output Real fixedFrame.z_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.z_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[1].Material;
//   protected output Real fixedFrame.z_label.cylinders[1].Extra;
//   parameter String fixedFrame.z_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.z_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[2].r[1](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[2].r[2](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[2].r[3](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[2,2,1] - fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,2,2] - fixedFrame.z_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[2,2,1] - fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,2,2] - fixedFrame.z_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[2,2,1] - fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,2,2] - fixedFrame.z_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.z_label.lines[2,2,1] - fixedFrame.z_label.lines[2,1,1],fixedFrame.z_label.lines[2,2,2] - fixedFrame.z_label.lines[2,1,2]}) "Length of visual object";
//   input Real fixedFrame.z_label.cylinders[2].width(quantity = "Length", unit = "m") = fixedFrame.z_label.diameter "Width of visual object";
//   input Real fixedFrame.z_label.cylinders[2].height(quantity = "Length", unit = "m") = fixedFrame.z_label.diameter "Height of visual object";
//   input Real fixedFrame.z_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.z_label.cylinders[2].color[1] = Real(fixedFrame.z_label.color[1]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[2].color[2] = Real(fixedFrame.z_label.color[2]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[2].color[3] = Real(fixedFrame.z_label.color[3]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[2].specularCoefficient = fixedFrame.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.z_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.z_label.cylinders[2].lengthDirection[1],fixedFrame.z_label.cylinders[2].lengthDirection[2],fixedFrame.z_label.cylinders[2].lengthDirection[3]});
//   protected Real fixedFrame.z_label.cylinders[2].e_x[1](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else fixedFrame.z_label.cylinders[2].lengthDirection[1] / fixedFrame.z_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[2].e_x[2](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else fixedFrame.z_label.cylinders[2].lengthDirection[2] / fixedFrame.z_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[2].e_x[3](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else fixedFrame.z_label.cylinders[2].lengthDirection[3] / fixedFrame.z_label.cylinders[2].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[2].n_z_aux[1](unit = "1") = fixedFrame.z_label.cylinders[2].e_x[2] * fixedFrame.z_label.cylinders[2].widthDirection[3] - fixedFrame.z_label.cylinders[2].e_x[3] * fixedFrame.z_label.cylinders[2].widthDirection[2];
//   protected Real fixedFrame.z_label.cylinders[2].n_z_aux[2](unit = "1") = fixedFrame.z_label.cylinders[2].e_x[3] * fixedFrame.z_label.cylinders[2].widthDirection[1] - fixedFrame.z_label.cylinders[2].e_x[1] * fixedFrame.z_label.cylinders[2].widthDirection[3];
//   protected Real fixedFrame.z_label.cylinders[2].n_z_aux[3](unit = "1") = fixedFrame.z_label.cylinders[2].e_x[1] * fixedFrame.z_label.cylinders[2].widthDirection[2] - fixedFrame.z_label.cylinders[2].e_x[2] * fixedFrame.z_label.cylinders[2].widthDirection[1];
//   protected Real fixedFrame.z_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[2].e_x[1],fixedFrame.z_label.cylinders[2].e_x[2],fixedFrame.z_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[2].widthDirection[1],fixedFrame.z_label.cylinders[2].widthDirection[2],fixedFrame.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[2].e_x[1],fixedFrame.z_label.cylinders[2].e_x[2],fixedFrame.z_label.cylinders[2].e_x[3]})[1];
//   protected Real fixedFrame.z_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[2].e_x[1],fixedFrame.z_label.cylinders[2].e_x[2],fixedFrame.z_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[2].widthDirection[1],fixedFrame.z_label.cylinders[2].widthDirection[2],fixedFrame.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[2].e_x[1],fixedFrame.z_label.cylinders[2].e_x[2],fixedFrame.z_label.cylinders[2].e_x[3]})[2];
//   protected Real fixedFrame.z_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[2].e_x[1],fixedFrame.z_label.cylinders[2].e_x[2],fixedFrame.z_label.cylinders[2].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[2].widthDirection[1],fixedFrame.z_label.cylinders[2].widthDirection[2],fixedFrame.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[2].e_x[1],fixedFrame.z_label.cylinders[2].e_x[2],fixedFrame.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real fixedFrame.z_label.cylinders[2].Form;
//   output Real fixedFrame.z_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.z_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[2].Material;
//   protected output Real fixedFrame.z_label.cylinders[2].Extra;
//   parameter String fixedFrame.z_label.cylinders[3].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real fixedFrame.z_label.cylinders[3].R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[3].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real fixedFrame.z_label.cylinders[3].r[1](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,1,2],0.0})[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[3].r[2](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,1,2],0.0})[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[3].r[3](quantity = "Length", unit = "m") = fixedFrame.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_lines[1,1],fixedFrame.z_label.R_lines[1,2],fixedFrame.z_label.R_lines[1,3]},{fixedFrame.z_label.R_lines[2,1],fixedFrame.z_label.R_lines[2,2],fixedFrame.z_label.R_lines[2,3]},{fixedFrame.z_label.R_lines[3,1],fixedFrame.z_label.R_lines[3,2],fixedFrame.z_label.R_lines[3,3]}},{fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,1,2],0.0})[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real fixedFrame.z_label.cylinders[3].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[3,2,1] - fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,2,2] - fixedFrame.z_label.lines[3,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[3,2,1] - fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,2,2] - fixedFrame.z_label.lines[3,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.R_rel[1,1],fixedFrame.z_label.R_rel[1,2],fixedFrame.z_label.R_rel[1,3]},{fixedFrame.z_label.R_rel[2,1],fixedFrame.z_label.R_rel[2,2],fixedFrame.z_label.R_rel[2,3]},{fixedFrame.z_label.R_rel[3,1],fixedFrame.z_label.R_rel[3,2],fixedFrame.z_label.R_rel[3,3]}},{fixedFrame.z_label.lines[3,2,1] - fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,2,2] - fixedFrame.z_label.lines[3,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real fixedFrame.z_label.cylinders[3].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({fixedFrame.z_label.lines[3,2,1] - fixedFrame.z_label.lines[3,1,1],fixedFrame.z_label.lines[3,2,2] - fixedFrame.z_label.lines[3,1,2]}) "Length of visual object";
//   input Real fixedFrame.z_label.cylinders[3].width(quantity = "Length", unit = "m") = fixedFrame.z_label.diameter "Width of visual object";
//   input Real fixedFrame.z_label.cylinders[3].height(quantity = "Length", unit = "m") = fixedFrame.z_label.diameter "Height of visual object";
//   input Real fixedFrame.z_label.cylinders[3].extra = 0.0 "Additional size data for some of the shape types";
//   input Real fixedFrame.z_label.cylinders[3].color[1] = Real(fixedFrame.z_label.color[1]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[3].color[2] = Real(fixedFrame.z_label.color[2]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[3].color[3] = Real(fixedFrame.z_label.color[3]) "Color of shape";
//   input Real fixedFrame.z_label.cylinders[3].specularCoefficient = fixedFrame.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real fixedFrame.z_label.cylinders[3].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({fixedFrame.z_label.cylinders[3].lengthDirection[1],fixedFrame.z_label.cylinders[3].lengthDirection[2],fixedFrame.z_label.cylinders[3].lengthDirection[3]});
//   protected Real fixedFrame.z_label.cylinders[3].e_x[1](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else fixedFrame.z_label.cylinders[3].lengthDirection[1] / fixedFrame.z_label.cylinders[3].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[3].e_x[2](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else fixedFrame.z_label.cylinders[3].lengthDirection[2] / fixedFrame.z_label.cylinders[3].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[3].e_x[3](unit = "1") = if noEvent(fixedFrame.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else fixedFrame.z_label.cylinders[3].lengthDirection[3] / fixedFrame.z_label.cylinders[3].abs_n_x;
//   protected Real fixedFrame.z_label.cylinders[3].n_z_aux[1](unit = "1") = fixedFrame.z_label.cylinders[3].e_x[2] * fixedFrame.z_label.cylinders[3].widthDirection[3] - fixedFrame.z_label.cylinders[3].e_x[3] * fixedFrame.z_label.cylinders[3].widthDirection[2];
//   protected Real fixedFrame.z_label.cylinders[3].n_z_aux[2](unit = "1") = fixedFrame.z_label.cylinders[3].e_x[3] * fixedFrame.z_label.cylinders[3].widthDirection[1] - fixedFrame.z_label.cylinders[3].e_x[1] * fixedFrame.z_label.cylinders[3].widthDirection[3];
//   protected Real fixedFrame.z_label.cylinders[3].n_z_aux[3](unit = "1") = fixedFrame.z_label.cylinders[3].e_x[1] * fixedFrame.z_label.cylinders[3].widthDirection[2] - fixedFrame.z_label.cylinders[3].e_x[2] * fixedFrame.z_label.cylinders[3].widthDirection[1];
//   protected Real fixedFrame.z_label.cylinders[3].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[3].e_x[1],fixedFrame.z_label.cylinders[3].e_x[2],fixedFrame.z_label.cylinders[3].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[3].widthDirection[1],fixedFrame.z_label.cylinders[3].widthDirection[2],fixedFrame.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[3].e_x[1],fixedFrame.z_label.cylinders[3].e_x[2],fixedFrame.z_label.cylinders[3].e_x[3]})[1];
//   protected Real fixedFrame.z_label.cylinders[3].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[3].e_x[1],fixedFrame.z_label.cylinders[3].e_x[2],fixedFrame.z_label.cylinders[3].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[3].widthDirection[1],fixedFrame.z_label.cylinders[3].widthDirection[2],fixedFrame.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[3].e_x[1],fixedFrame.z_label.cylinders[3].e_x[2],fixedFrame.z_label.cylinders[3].e_x[3]})[2];
//   protected Real fixedFrame.z_label.cylinders[3].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({fixedFrame.z_label.cylinders[3].e_x[1],fixedFrame.z_label.cylinders[3].e_x[2],fixedFrame.z_label.cylinders[3].e_x[3]},if noEvent(fixedFrame.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (fixedFrame.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + fixedFrame.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {fixedFrame.z_label.cylinders[3].widthDirection[1],fixedFrame.z_label.cylinders[3].widthDirection[2],fixedFrame.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(fixedFrame.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixedFrame.z_label.cylinders[3].e_x[1],fixedFrame.z_label.cylinders[3].e_x[2],fixedFrame.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real fixedFrame.z_label.cylinders[3].Form;
//   output Real fixedFrame.z_label.cylinders[3].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real fixedFrame.z_label.cylinders[3].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real fixedFrame.z_label.cylinders[3].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[3].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[3].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real fixedFrame.z_label.cylinders[3].Material;
//   protected output Real fixedFrame.z_label.cylinders[3].Extra;
// equation
//   world.x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[1].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[1].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[1].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[2].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[2].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[2].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[1].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[1].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[1].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[2].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[2].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[2].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[1].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[1].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[1].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[2].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[2].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[2].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[3].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[3].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[3].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   world.gravityArrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowLine.shapeType);
//   world.gravityArrowLine.rxvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.rxvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.rxvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.ryvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.ryvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.ryvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.rvisobj = world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowLine.R.T[1,1],world.gravityArrowLine.R.T[1,2],world.gravityArrowLine.R.T[1,3]},{world.gravityArrowLine.R.T[2,1],world.gravityArrowLine.R.T[2,2],world.gravityArrowLine.R.T[2,3]},{world.gravityArrowLine.R.T[3,1],world.gravityArrowLine.R.T[3,2],world.gravityArrowLine.R.T[3,3]}},{world.gravityArrowLine.r_shape[1],world.gravityArrowLine.r_shape[2],world.gravityArrowLine.r_shape[3]});
//   world.gravityArrowLine.size[1] = world.gravityArrowLine.length;
//   world.gravityArrowLine.size[2] = world.gravityArrowLine.width;
//   world.gravityArrowLine.size[3] = world.gravityArrowLine.height;
//   world.gravityArrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowLine.color[1] / 255.0,world.gravityArrowLine.color[2] / 255.0,world.gravityArrowLine.color[3] / 255.0,world.gravityArrowLine.specularCoefficient);
//   world.gravityArrowLine.Extra = world.gravityArrowLine.extra;
//   world.gravityArrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowHead.shapeType);
//   world.gravityArrowHead.rxvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.rxvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.rxvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.ryvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.ryvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.ryvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.rvisobj = world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowHead.R.T[1,1],world.gravityArrowHead.R.T[1,2],world.gravityArrowHead.R.T[1,3]},{world.gravityArrowHead.R.T[2,1],world.gravityArrowHead.R.T[2,2],world.gravityArrowHead.R.T[2,3]},{world.gravityArrowHead.R.T[3,1],world.gravityArrowHead.R.T[3,2],world.gravityArrowHead.R.T[3,3]}},{world.gravityArrowHead.r_shape[1],world.gravityArrowHead.r_shape[2],world.gravityArrowHead.r_shape[3]});
//   world.gravityArrowHead.size[1] = world.gravityArrowHead.length;
//   world.gravityArrowHead.size[2] = world.gravityArrowHead.width;
//   world.gravityArrowHead.size[3] = world.gravityArrowHead.height;
//   world.gravityArrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowHead.color[1] / 255.0,world.gravityArrowHead.color[2] / 255.0,world.gravityArrowHead.color[3] / 255.0,world.gravityArrowHead.specularCoefficient);
//   world.gravityArrowHead.Extra = world.gravityArrowHead.extra;
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-10,"Parameter n of World object is wrong (lenght(n) > 0 required)");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   j1.cylinder.R.T[1,1] = j1.frame_a.R.T[1,1];
//   j1.cylinder.R.T[1,2] = j1.frame_a.R.T[1,2];
//   j1.cylinder.R.T[1,3] = j1.frame_a.R.T[1,3];
//   j1.cylinder.R.T[2,1] = j1.frame_a.R.T[2,1];
//   j1.cylinder.R.T[2,2] = j1.frame_a.R.T[2,2];
//   j1.cylinder.R.T[2,3] = j1.frame_a.R.T[2,3];
//   j1.cylinder.R.T[3,1] = j1.frame_a.R.T[3,1];
//   j1.cylinder.R.T[3,2] = j1.frame_a.R.T[3,2];
//   j1.cylinder.R.T[3,3] = j1.frame_a.R.T[3,3];
//   j1.cylinder.R.w[1] = j1.frame_a.R.w[1];
//   j1.cylinder.R.w[2] = j1.frame_a.R.w[2];
//   j1.cylinder.R.w[3] = j1.frame_a.R.w[3];
//   j1.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(j1.cylinder.shapeType);
//   j1.cylinder.rxvisobj[1] = j1.cylinder.R.T[1,1] * j1.cylinder.e_x[1] + (j1.cylinder.R.T[2,1] * j1.cylinder.e_x[2] + j1.cylinder.R.T[3,1] * j1.cylinder.e_x[3]);
//   j1.cylinder.rxvisobj[2] = j1.cylinder.R.T[1,2] * j1.cylinder.e_x[1] + (j1.cylinder.R.T[2,2] * j1.cylinder.e_x[2] + j1.cylinder.R.T[3,2] * j1.cylinder.e_x[3]);
//   j1.cylinder.rxvisobj[3] = j1.cylinder.R.T[1,3] * j1.cylinder.e_x[1] + (j1.cylinder.R.T[2,3] * j1.cylinder.e_x[2] + j1.cylinder.R.T[3,3] * j1.cylinder.e_x[3]);
//   j1.cylinder.ryvisobj[1] = j1.cylinder.R.T[1,1] * j1.cylinder.e_y[1] + (j1.cylinder.R.T[2,1] * j1.cylinder.e_y[2] + j1.cylinder.R.T[3,1] * j1.cylinder.e_y[3]);
//   j1.cylinder.ryvisobj[2] = j1.cylinder.R.T[1,2] * j1.cylinder.e_y[1] + (j1.cylinder.R.T[2,2] * j1.cylinder.e_y[2] + j1.cylinder.R.T[3,2] * j1.cylinder.e_y[3]);
//   j1.cylinder.ryvisobj[3] = j1.cylinder.R.T[1,3] * j1.cylinder.e_y[1] + (j1.cylinder.R.T[2,3] * j1.cylinder.e_y[2] + j1.cylinder.R.T[3,3] * j1.cylinder.e_y[3]);
//   j1.cylinder.rvisobj = j1.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{j1.cylinder.R.T[1,1],j1.cylinder.R.T[1,2],j1.cylinder.R.T[1,3]},{j1.cylinder.R.T[2,1],j1.cylinder.R.T[2,2],j1.cylinder.R.T[2,3]},{j1.cylinder.R.T[3,1],j1.cylinder.R.T[3,2],j1.cylinder.R.T[3,3]}},{j1.cylinder.r_shape[1],j1.cylinder.r_shape[2],j1.cylinder.r_shape[3]});
//   j1.cylinder.size[1] = j1.cylinder.length;
//   j1.cylinder.size[2] = j1.cylinder.width;
//   j1.cylinder.size[3] = j1.cylinder.height;
//   j1.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(j1.cylinder.color[1] / 255.0,j1.cylinder.color[2] / 255.0,j1.cylinder.color[3] / 255.0,j1.cylinder.specularCoefficient);
//   j1.cylinder.Extra = j1.cylinder.extra;
//   j1.fixed.flange.phi = j1.fixed.phi0;
//   j1.internalAxis.flange.tau = j1.internalAxis.tau;
//   j1.internalAxis.flange.phi = j1.internalAxis.phi;
//   assert(true,"Connector frame_a of revolute joint is not connected");
//   assert(true,"Connector frame_b of revolute joint is not connected");
//   j1.angle = j1.phi;
//   j1.w = der(j1.phi);
//   j1.a = der(j1.w);
//   j1.frame_b.r_0[1] = j1.frame_a.r_0[1];
//   j1.frame_b.r_0[2] = j1.frame_a.r_0[2];
//   j1.frame_b.r_0[3] = j1.frame_a.r_0[3];
//   j1.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({j1.e[1],j1.e[2],j1.e[3]},j1.phi,j1.w);
//   j1.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(j1.frame_a.R,j1.R_rel);
//   j1.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(j1.R_rel,{j1.frame_b.f[1],j1.frame_b.f[2],j1.frame_b.f[3]});
//   j1.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(j1.R_rel,{j1.frame_b.t[1],j1.frame_b.t[2],j1.frame_b.t[3]});
//   j1.tau = (-j1.frame_b.t[1]) * j1.e[1] + ((-j1.frame_b.t[2]) * j1.e[2] + (-j1.frame_b.t[3]) * j1.e[3]);
//   j1.phi = j1.internalAxis.phi;
//   j1.internalAxis.flange.tau + (-j1.axis.tau) = 0.0;
//   j1.internalAxis.flange.phi = j1.axis.phi;
//   j1.fixed.flange.tau + (-j1.support.tau) = 0.0;
//   j1.fixed.flange.phi = j1.support.phi;
//   j2.box.R.T[1,1] = j2.frame_a.R.T[1,1];
//   j2.box.R.T[1,2] = j2.frame_a.R.T[1,2];
//   j2.box.R.T[1,3] = j2.frame_a.R.T[1,3];
//   j2.box.R.T[2,1] = j2.frame_a.R.T[2,1];
//   j2.box.R.T[2,2] = j2.frame_a.R.T[2,2];
//   j2.box.R.T[2,3] = j2.frame_a.R.T[2,3];
//   j2.box.R.T[3,1] = j2.frame_a.R.T[3,1];
//   j2.box.R.T[3,2] = j2.frame_a.R.T[3,2];
//   j2.box.R.T[3,3] = j2.frame_a.R.T[3,3];
//   j2.box.R.w[1] = j2.frame_a.R.w[1];
//   j2.box.R.w[2] = j2.frame_a.R.w[2];
//   j2.box.R.w[3] = j2.frame_a.R.w[3];
//   j2.box.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(j2.box.shapeType);
//   j2.box.rxvisobj[1] = j2.box.R.T[1,1] * j2.box.e_x[1] + (j2.box.R.T[2,1] * j2.box.e_x[2] + j2.box.R.T[3,1] * j2.box.e_x[3]);
//   j2.box.rxvisobj[2] = j2.box.R.T[1,2] * j2.box.e_x[1] + (j2.box.R.T[2,2] * j2.box.e_x[2] + j2.box.R.T[3,2] * j2.box.e_x[3]);
//   j2.box.rxvisobj[3] = j2.box.R.T[1,3] * j2.box.e_x[1] + (j2.box.R.T[2,3] * j2.box.e_x[2] + j2.box.R.T[3,3] * j2.box.e_x[3]);
//   j2.box.ryvisobj[1] = j2.box.R.T[1,1] * j2.box.e_y[1] + (j2.box.R.T[2,1] * j2.box.e_y[2] + j2.box.R.T[3,1] * j2.box.e_y[3]);
//   j2.box.ryvisobj[2] = j2.box.R.T[1,2] * j2.box.e_y[1] + (j2.box.R.T[2,2] * j2.box.e_y[2] + j2.box.R.T[3,2] * j2.box.e_y[3]);
//   j2.box.ryvisobj[3] = j2.box.R.T[1,3] * j2.box.e_y[1] + (j2.box.R.T[2,3] * j2.box.e_y[2] + j2.box.R.T[3,3] * j2.box.e_y[3]);
//   j2.box.rvisobj = j2.box.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{j2.box.R.T[1,1],j2.box.R.T[1,2],j2.box.R.T[1,3]},{j2.box.R.T[2,1],j2.box.R.T[2,2],j2.box.R.T[2,3]},{j2.box.R.T[3,1],j2.box.R.T[3,2],j2.box.R.T[3,3]}},{j2.box.r_shape[1],j2.box.r_shape[2],j2.box.r_shape[3]});
//   j2.box.size[1] = j2.box.length;
//   j2.box.size[2] = j2.box.width;
//   j2.box.size[3] = j2.box.height;
//   j2.box.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(j2.box.color[1] / 255.0,j2.box.color[2] / 255.0,j2.box.color[3] / 255.0,j2.box.specularCoefficient);
//   j2.box.Extra = j2.box.extra;
//   j2.fixed.flange.s = j2.fixed.s0;
//   j2.internalAxis.flange.f = j2.internalAxis.f;
//   j2.internalAxis.flange.s = j2.internalAxis.s;
//   j2.constantForce.f = -j2.constantForce.f_constant;
//   j2.constantForce.s_support = 0.0;
//   j2.v = der(j2.s);
//   j2.a = der(j2.v);
//   j2.frame_b.r_0 = j2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(j2.frame_a.R,{j2.s * j2.e[1],j2.s * j2.e[2],j2.s * j2.e[3]});
//   j2.frame_b.R.T[1,1] = j2.frame_a.R.T[1,1];
//   j2.frame_b.R.T[1,2] = j2.frame_a.R.T[1,2];
//   j2.frame_b.R.T[1,3] = j2.frame_a.R.T[1,3];
//   j2.frame_b.R.T[2,1] = j2.frame_a.R.T[2,1];
//   j2.frame_b.R.T[2,2] = j2.frame_a.R.T[2,2];
//   j2.frame_b.R.T[2,3] = j2.frame_a.R.T[2,3];
//   j2.frame_b.R.T[3,1] = j2.frame_a.R.T[3,1];
//   j2.frame_b.R.T[3,2] = j2.frame_a.R.T[3,2];
//   j2.frame_b.R.T[3,3] = j2.frame_a.R.T[3,3];
//   j2.frame_b.R.w[1] = j2.frame_a.R.w[1];
//   j2.frame_b.R.w[2] = j2.frame_a.R.w[2];
//   j2.frame_b.R.w[3] = j2.frame_a.R.w[3];
//   0.0 = j2.frame_a.f[1] + j2.frame_b.f[1];
//   0.0 = j2.frame_a.f[2] + j2.frame_b.f[2];
//   0.0 = j2.frame_a.f[3] + j2.frame_b.f[3];
//   0.0 = j2.frame_a.t[1] + (j2.frame_b.t[1] + (j2.s * (j2.e[2] * j2.frame_b.f[3]) + (-j2.s * (j2.e[3] * j2.frame_b.f[2]))));
//   0.0 = j2.frame_a.t[2] + (j2.frame_b.t[2] + (j2.s * (j2.e[3] * j2.frame_b.f[1]) + (-j2.s * (j2.e[1] * j2.frame_b.f[3]))));
//   0.0 = j2.frame_a.t[3] + (j2.frame_b.t[3] + (j2.s * (j2.e[1] * j2.frame_b.f[2]) + (-j2.s * (j2.e[2] * j2.frame_b.f[1]))));
//   j2.f = (-j2.e[1]) * j2.frame_b.f[1] + ((-j2.e[2]) * j2.frame_b.f[2] + (-j2.e[3]) * j2.frame_b.f[3]);
//   j2.s = j2.internalAxis.s;
//   assert(true,"Connector frame_a of joint object is not connected");
//   assert(true,"Connector frame_b of joint object is not connected");
//   j2.constantForce.flange.f + j2.internalAxis.flange.f = 0.0;
//   j2.constantForce.flange.s = j2.internalAxis.flange.s;
//   j2.fixed.flange.f = 0.0;
//   b1.body.r_0[1] = b1.body.frame_a.r_0[1];
//   b1.body.r_0[2] = b1.body.frame_a.r_0[2];
//   b1.body.r_0[3] = b1.body.frame_a.r_0[3];
//   if true then
//   b1.body.Q[1] = 0.0;
//   b1.body.Q[2] = 0.0;
//   b1.body.Q[3] = 0.0;
//   b1.body.Q[4] = 1.0;
//   b1.body.phi[1] = 0.0;
//   b1.body.phi[2] = 0.0;
//   b1.body.phi[3] = 0.0;
//   b1.body.phi_d[1] = 0.0;
//   b1.body.phi_d[2] = 0.0;
//   b1.body.phi_d[3] = 0.0;
//   b1.body.phi_dd[1] = 0.0;
//   b1.body.phi_dd[2] = 0.0;
//   b1.body.phi_dd[3] = 0.0;
//   elseif b1.body.useQuaternions then
//   b1.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({b1.body.Q[1],b1.body.Q[2],b1.body.Q[3],b1.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({b1.body.Q[1],b1.body.Q[2],b1.body.Q[3],b1.body.Q[4]},{der(b1.body.Q[1]),der(b1.body.Q[2]),der(b1.body.Q[3]),der(b1.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({b1.body.Q[1],b1.body.Q[2],b1.body.Q[3],b1.body.Q[4]});
//   b1.body.phi[1] = 0.0;
//   b1.body.phi[2] = 0.0;
//   b1.body.phi[3] = 0.0;
//   b1.body.phi_d[1] = 0.0;
//   b1.body.phi_d[2] = 0.0;
//   b1.body.phi_d[3] = 0.0;
//   b1.body.phi_dd[1] = 0.0;
//   b1.body.phi_dd[2] = 0.0;
//   b1.body.phi_dd[3] = 0.0;
//   else
//   b1.body.phi_d[1] = der(b1.body.phi[1]);
//   b1.body.phi_d[2] = der(b1.body.phi[2]);
//   b1.body.phi_d[3] = der(b1.body.phi[3]);
//   b1.body.phi_dd[1] = der(b1.body.phi_d[1]);
//   b1.body.phi_dd[2] = der(b1.body.phi_d[2]);
//   b1.body.phi_dd[3] = der(b1.body.phi_d[3]);
//   b1.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},{b1.body.phi[1],b1.body.phi[2],b1.body.phi[3]},{b1.body.phi_d[1],b1.body.phi_d[2],b1.body.phi_d[3]});
//   b1.body.Q[1] = 0.0;
//   b1.body.Q[2] = 0.0;
//   b1.body.Q[3] = 0.0;
//   b1.body.Q[4] = 1.0;
//   end if;
//   b1.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({b1.body.frame_a.r_0[1],b1.body.frame_a.r_0[2],b1.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(b1.body.frame_a.R,{b1.body.r_CM[1],b1.body.r_CM[2],b1.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   b1.body.v_0[1] = der(b1.body.frame_a.r_0[1]);
//   b1.body.v_0[2] = der(b1.body.frame_a.r_0[2]);
//   b1.body.v_0[3] = der(b1.body.frame_a.r_0[3]);
//   b1.body.a_0[1] = der(b1.body.v_0[1]);
//   b1.body.a_0[2] = der(b1.body.v_0[2]);
//   b1.body.a_0[3] = der(b1.body.v_0[3]);
//   b1.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(b1.body.frame_a.R);
//   b1.body.z_a[1] = der(b1.body.w_a[1]);
//   b1.body.z_a[2] = der(b1.body.w_a[2]);
//   b1.body.z_a[3] = der(b1.body.w_a[3]);
//   b1.body.frame_a.f = b1.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.frame_a.R,{b1.body.a_0[1] - b1.body.g_0[1],b1.body.a_0[2] - b1.body.g_0[2],b1.body.a_0[3] - b1.body.g_0[3]}) + {b1.body.z_a[2] * b1.body.r_CM[3] - b1.body.z_a[3] * b1.body.r_CM[2],b1.body.z_a[3] * b1.body.r_CM[1] - b1.body.z_a[1] * b1.body.r_CM[3],b1.body.z_a[1] * b1.body.r_CM[2] - b1.body.z_a[2] * b1.body.r_CM[1]} + {b1.body.w_a[2] * (b1.body.w_a[1] * b1.body.r_CM[2] - b1.body.w_a[2] * b1.body.r_CM[1]) - b1.body.w_a[3] * (b1.body.w_a[3] * b1.body.r_CM[1] - b1.body.w_a[1] * b1.body.r_CM[3]),b1.body.w_a[3] * (b1.body.w_a[2] * b1.body.r_CM[3] - b1.body.w_a[3] * b1.body.r_CM[2]) - b1.body.w_a[1] * (b1.body.w_a[1] * b1.body.r_CM[2] - b1.body.w_a[2] * b1.body.r_CM[1]),b1.body.w_a[1] * (b1.body.w_a[3] * b1.body.r_CM[1] - b1.body.w_a[1] * b1.body.r_CM[3]) - b1.body.w_a[2] * (b1.body.w_a[2] * b1.body.r_CM[3] - b1.body.w_a[3] * b1.body.r_CM[2])});
//   b1.body.frame_a.t[1] = b1.body.I[1,1] * b1.body.z_a[1] + (b1.body.I[1,2] * b1.body.z_a[2] + (b1.body.I[1,3] * b1.body.z_a[3] + (b1.body.w_a[2] * (b1.body.I[3,1] * b1.body.w_a[1] + (b1.body.I[3,2] * b1.body.w_a[2] + b1.body.I[3,3] * b1.body.w_a[3])) + ((-b1.body.w_a[3] * (b1.body.I[2,1] * b1.body.w_a[1] + (b1.body.I[2,2] * b1.body.w_a[2] + b1.body.I[2,3] * b1.body.w_a[3]))) + (b1.body.r_CM[2] * b1.body.frame_a.f[3] + (-b1.body.r_CM[3] * b1.body.frame_a.f[2]))))));
//   b1.body.frame_a.t[2] = b1.body.I[2,1] * b1.body.z_a[1] + (b1.body.I[2,2] * b1.body.z_a[2] + (b1.body.I[2,3] * b1.body.z_a[3] + (b1.body.w_a[3] * (b1.body.I[1,1] * b1.body.w_a[1] + (b1.body.I[1,2] * b1.body.w_a[2] + b1.body.I[1,3] * b1.body.w_a[3])) + ((-b1.body.w_a[1] * (b1.body.I[3,1] * b1.body.w_a[1] + (b1.body.I[3,2] * b1.body.w_a[2] + b1.body.I[3,3] * b1.body.w_a[3]))) + (b1.body.r_CM[3] * b1.body.frame_a.f[1] + (-b1.body.r_CM[1] * b1.body.frame_a.f[3]))))));
//   b1.body.frame_a.t[3] = b1.body.I[3,1] * b1.body.z_a[1] + (b1.body.I[3,2] * b1.body.z_a[2] + (b1.body.I[3,3] * b1.body.z_a[3] + (b1.body.w_a[1] * (b1.body.I[2,1] * b1.body.w_a[1] + (b1.body.I[2,2] * b1.body.w_a[2] + b1.body.I[2,3] * b1.body.w_a[3])) + ((-b1.body.w_a[2] * (b1.body.I[1,1] * b1.body.w_a[1] + (b1.body.I[1,2] * b1.body.w_a[2] + b1.body.I[1,3] * b1.body.w_a[3]))) + (b1.body.r_CM[1] * b1.body.frame_a.f[2] + (-b1.body.r_CM[2] * b1.body.frame_a.f[1]))))));
//   b1.frameTranslation.shape.R.T[1,1] = b1.frameTranslation.frame_a.R.T[1,1];
//   b1.frameTranslation.shape.R.T[1,2] = b1.frameTranslation.frame_a.R.T[1,2];
//   b1.frameTranslation.shape.R.T[1,3] = b1.frameTranslation.frame_a.R.T[1,3];
//   b1.frameTranslation.shape.R.T[2,1] = b1.frameTranslation.frame_a.R.T[2,1];
//   b1.frameTranslation.shape.R.T[2,2] = b1.frameTranslation.frame_a.R.T[2,2];
//   b1.frameTranslation.shape.R.T[2,3] = b1.frameTranslation.frame_a.R.T[2,3];
//   b1.frameTranslation.shape.R.T[3,1] = b1.frameTranslation.frame_a.R.T[3,1];
//   b1.frameTranslation.shape.R.T[3,2] = b1.frameTranslation.frame_a.R.T[3,2];
//   b1.frameTranslation.shape.R.T[3,3] = b1.frameTranslation.frame_a.R.T[3,3];
//   b1.frameTranslation.shape.R.w[1] = b1.frameTranslation.frame_a.R.w[1];
//   b1.frameTranslation.shape.R.w[2] = b1.frameTranslation.frame_a.R.w[2];
//   b1.frameTranslation.shape.R.w[3] = b1.frameTranslation.frame_a.R.w[3];
//   b1.frameTranslation.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(b1.frameTranslation.shape.shapeType);
//   b1.frameTranslation.shape.rxvisobj[1] = b1.frameTranslation.shape.R.T[1,1] * b1.frameTranslation.shape.e_x[1] + (b1.frameTranslation.shape.R.T[2,1] * b1.frameTranslation.shape.e_x[2] + b1.frameTranslation.shape.R.T[3,1] * b1.frameTranslation.shape.e_x[3]);
//   b1.frameTranslation.shape.rxvisobj[2] = b1.frameTranslation.shape.R.T[1,2] * b1.frameTranslation.shape.e_x[1] + (b1.frameTranslation.shape.R.T[2,2] * b1.frameTranslation.shape.e_x[2] + b1.frameTranslation.shape.R.T[3,2] * b1.frameTranslation.shape.e_x[3]);
//   b1.frameTranslation.shape.rxvisobj[3] = b1.frameTranslation.shape.R.T[1,3] * b1.frameTranslation.shape.e_x[1] + (b1.frameTranslation.shape.R.T[2,3] * b1.frameTranslation.shape.e_x[2] + b1.frameTranslation.shape.R.T[3,3] * b1.frameTranslation.shape.e_x[3]);
//   b1.frameTranslation.shape.ryvisobj[1] = b1.frameTranslation.shape.R.T[1,1] * b1.frameTranslation.shape.e_y[1] + (b1.frameTranslation.shape.R.T[2,1] * b1.frameTranslation.shape.e_y[2] + b1.frameTranslation.shape.R.T[3,1] * b1.frameTranslation.shape.e_y[3]);
//   b1.frameTranslation.shape.ryvisobj[2] = b1.frameTranslation.shape.R.T[1,2] * b1.frameTranslation.shape.e_y[1] + (b1.frameTranslation.shape.R.T[2,2] * b1.frameTranslation.shape.e_y[2] + b1.frameTranslation.shape.R.T[3,2] * b1.frameTranslation.shape.e_y[3]);
//   b1.frameTranslation.shape.ryvisobj[3] = b1.frameTranslation.shape.R.T[1,3] * b1.frameTranslation.shape.e_y[1] + (b1.frameTranslation.shape.R.T[2,3] * b1.frameTranslation.shape.e_y[2] + b1.frameTranslation.shape.R.T[3,3] * b1.frameTranslation.shape.e_y[3]);
//   b1.frameTranslation.shape.rvisobj = b1.frameTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{b1.frameTranslation.shape.R.T[1,1],b1.frameTranslation.shape.R.T[1,2],b1.frameTranslation.shape.R.T[1,3]},{b1.frameTranslation.shape.R.T[2,1],b1.frameTranslation.shape.R.T[2,2],b1.frameTranslation.shape.R.T[2,3]},{b1.frameTranslation.shape.R.T[3,1],b1.frameTranslation.shape.R.T[3,2],b1.frameTranslation.shape.R.T[3,3]}},{b1.frameTranslation.shape.r_shape[1],b1.frameTranslation.shape.r_shape[2],b1.frameTranslation.shape.r_shape[3]});
//   b1.frameTranslation.shape.size[1] = b1.frameTranslation.shape.length;
//   b1.frameTranslation.shape.size[2] = b1.frameTranslation.shape.width;
//   b1.frameTranslation.shape.size[3] = b1.frameTranslation.shape.height;
//   b1.frameTranslation.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(b1.frameTranslation.shape.color[1] / 255.0,b1.frameTranslation.shape.color[2] / 255.0,b1.frameTranslation.shape.color[3] / 255.0,b1.frameTranslation.shape.specularCoefficient);
//   b1.frameTranslation.shape.Extra = b1.frameTranslation.shape.extra;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   b1.frameTranslation.frame_b.r_0 = b1.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(b1.frameTranslation.frame_a.R,{b1.frameTranslation.r[1],b1.frameTranslation.r[2],b1.frameTranslation.r[3]});
//   b1.frameTranslation.frame_b.R.T[1,1] = b1.frameTranslation.frame_a.R.T[1,1];
//   b1.frameTranslation.frame_b.R.T[1,2] = b1.frameTranslation.frame_a.R.T[1,2];
//   b1.frameTranslation.frame_b.R.T[1,3] = b1.frameTranslation.frame_a.R.T[1,3];
//   b1.frameTranslation.frame_b.R.T[2,1] = b1.frameTranslation.frame_a.R.T[2,1];
//   b1.frameTranslation.frame_b.R.T[2,2] = b1.frameTranslation.frame_a.R.T[2,2];
//   b1.frameTranslation.frame_b.R.T[2,3] = b1.frameTranslation.frame_a.R.T[2,3];
//   b1.frameTranslation.frame_b.R.T[3,1] = b1.frameTranslation.frame_a.R.T[3,1];
//   b1.frameTranslation.frame_b.R.T[3,2] = b1.frameTranslation.frame_a.R.T[3,2];
//   b1.frameTranslation.frame_b.R.T[3,3] = b1.frameTranslation.frame_a.R.T[3,3];
//   b1.frameTranslation.frame_b.R.w[1] = b1.frameTranslation.frame_a.R.w[1];
//   b1.frameTranslation.frame_b.R.w[2] = b1.frameTranslation.frame_a.R.w[2];
//   b1.frameTranslation.frame_b.R.w[3] = b1.frameTranslation.frame_a.R.w[3];
//   0.0 = b1.frameTranslation.frame_a.f[1] + b1.frameTranslation.frame_b.f[1];
//   0.0 = b1.frameTranslation.frame_a.f[2] + b1.frameTranslation.frame_b.f[2];
//   0.0 = b1.frameTranslation.frame_a.f[3] + b1.frameTranslation.frame_b.f[3];
//   0.0 = b1.frameTranslation.frame_a.t[1] + (b1.frameTranslation.frame_b.t[1] + (b1.frameTranslation.r[2] * b1.frameTranslation.frame_b.f[3] + (-b1.frameTranslation.r[3] * b1.frameTranslation.frame_b.f[2])));
//   0.0 = b1.frameTranslation.frame_a.t[2] + (b1.frameTranslation.frame_b.t[2] + (b1.frameTranslation.r[3] * b1.frameTranslation.frame_b.f[1] + (-b1.frameTranslation.r[1] * b1.frameTranslation.frame_b.f[3])));
//   0.0 = b1.frameTranslation.frame_a.t[3] + (b1.frameTranslation.frame_b.t[3] + (b1.frameTranslation.r[1] * b1.frameTranslation.frame_b.f[2] + (-b1.frameTranslation.r[2] * b1.frameTranslation.frame_b.f[1])));
//   b1.r_0[1] = b1.frame_a.r_0[1];
//   b1.r_0[2] = b1.frame_a.r_0[2];
//   b1.r_0[3] = b1.frame_a.r_0[3];
//   b1.v_0[1] = der(b1.r_0[1]);
//   b1.v_0[2] = der(b1.r_0[2]);
//   b1.v_0[3] = der(b1.r_0[3]);
//   b1.a_0[1] = der(b1.v_0[1]);
//   b1.a_0[2] = der(b1.v_0[2]);
//   b1.a_0[3] = der(b1.v_0[3]);
//   assert(b1.innerDiameter < b1.diameter,"parameter innerDiameter is greater as parameter diameter.");
//   b1.frameTranslation.frame_a.t[1] + ((-b1.frame_a.t[1]) + b1.body.frame_a.t[1]) = 0.0;
//   b1.frameTranslation.frame_a.t[2] + ((-b1.frame_a.t[2]) + b1.body.frame_a.t[2]) = 0.0;
//   b1.frameTranslation.frame_a.t[3] + ((-b1.frame_a.t[3]) + b1.body.frame_a.t[3]) = 0.0;
//   b1.frameTranslation.frame_a.f[1] + ((-b1.frame_a.f[1]) + b1.body.frame_a.f[1]) = 0.0;
//   b1.frameTranslation.frame_a.f[2] + ((-b1.frame_a.f[2]) + b1.body.frame_a.f[2]) = 0.0;
//   b1.frameTranslation.frame_a.f[3] + ((-b1.frame_a.f[3]) + b1.body.frame_a.f[3]) = 0.0;
//   b1.frameTranslation.frame_a.R.w[1] = b1.frame_a.R.w[1];
//   b1.frame_a.R.w[1] = b1.body.frame_a.R.w[1];
//   b1.frameTranslation.frame_a.R.w[2] = b1.frame_a.R.w[2];
//   b1.frame_a.R.w[2] = b1.body.frame_a.R.w[2];
//   b1.frameTranslation.frame_a.R.w[3] = b1.frame_a.R.w[3];
//   b1.frame_a.R.w[3] = b1.body.frame_a.R.w[3];
//   b1.frameTranslation.frame_a.R.T[1,1] = b1.frame_a.R.T[1,1];
//   b1.frame_a.R.T[1,1] = b1.body.frame_a.R.T[1,1];
//   b1.frameTranslation.frame_a.R.T[1,2] = b1.frame_a.R.T[1,2];
//   b1.frame_a.R.T[1,2] = b1.body.frame_a.R.T[1,2];
//   b1.frameTranslation.frame_a.R.T[1,3] = b1.frame_a.R.T[1,3];
//   b1.frame_a.R.T[1,3] = b1.body.frame_a.R.T[1,3];
//   b1.frameTranslation.frame_a.R.T[2,1] = b1.frame_a.R.T[2,1];
//   b1.frame_a.R.T[2,1] = b1.body.frame_a.R.T[2,1];
//   b1.frameTranslation.frame_a.R.T[2,2] = b1.frame_a.R.T[2,2];
//   b1.frame_a.R.T[2,2] = b1.body.frame_a.R.T[2,2];
//   b1.frameTranslation.frame_a.R.T[2,3] = b1.frame_a.R.T[2,3];
//   b1.frame_a.R.T[2,3] = b1.body.frame_a.R.T[2,3];
//   b1.frameTranslation.frame_a.R.T[3,1] = b1.frame_a.R.T[3,1];
//   b1.frame_a.R.T[3,1] = b1.body.frame_a.R.T[3,1];
//   b1.frameTranslation.frame_a.R.T[3,2] = b1.frame_a.R.T[3,2];
//   b1.frame_a.R.T[3,2] = b1.body.frame_a.R.T[3,2];
//   b1.frameTranslation.frame_a.R.T[3,3] = b1.frame_a.R.T[3,3];
//   b1.frame_a.R.T[3,3] = b1.body.frame_a.R.T[3,3];
//   b1.frameTranslation.frame_a.r_0[1] = b1.frame_a.r_0[1];
//   b1.frame_a.r_0[1] = b1.body.frame_a.r_0[1];
//   b1.frameTranslation.frame_a.r_0[2] = b1.frame_a.r_0[2];
//   b1.frame_a.r_0[2] = b1.body.frame_a.r_0[2];
//   b1.frameTranslation.frame_a.r_0[3] = b1.frame_a.r_0[3];
//   b1.frame_a.r_0[3] = b1.body.frame_a.r_0[3];
//   b1.frameTranslation.frame_b.t[1] + (-b1.frame_b.t[1]) = 0.0;
//   b1.frameTranslation.frame_b.t[2] + (-b1.frame_b.t[2]) = 0.0;
//   b1.frameTranslation.frame_b.t[3] + (-b1.frame_b.t[3]) = 0.0;
//   b1.frameTranslation.frame_b.f[1] + (-b1.frame_b.f[1]) = 0.0;
//   b1.frameTranslation.frame_b.f[2] + (-b1.frame_b.f[2]) = 0.0;
//   b1.frameTranslation.frame_b.f[3] + (-b1.frame_b.f[3]) = 0.0;
//   b1.frameTranslation.frame_b.R.w[1] = b1.frame_b.R.w[1];
//   b1.frameTranslation.frame_b.R.w[2] = b1.frame_b.R.w[2];
//   b1.frameTranslation.frame_b.R.w[3] = b1.frame_b.R.w[3];
//   b1.frameTranslation.frame_b.R.T[1,1] = b1.frame_b.R.T[1,1];
//   b1.frameTranslation.frame_b.R.T[1,2] = b1.frame_b.R.T[1,2];
//   b1.frameTranslation.frame_b.R.T[1,3] = b1.frame_b.R.T[1,3];
//   b1.frameTranslation.frame_b.R.T[2,1] = b1.frame_b.R.T[2,1];
//   b1.frameTranslation.frame_b.R.T[2,2] = b1.frame_b.R.T[2,2];
//   b1.frameTranslation.frame_b.R.T[2,3] = b1.frame_b.R.T[2,3];
//   b1.frameTranslation.frame_b.R.T[3,1] = b1.frame_b.R.T[3,1];
//   b1.frameTranslation.frame_b.R.T[3,2] = b1.frame_b.R.T[3,2];
//   b1.frameTranslation.frame_b.R.T[3,3] = b1.frame_b.R.T[3,3];
//   b1.frameTranslation.frame_b.r_0[1] = b1.frame_b.r_0[1];
//   b1.frameTranslation.frame_b.r_0[2] = b1.frame_b.r_0[2];
//   b1.frameTranslation.frame_b.r_0[3] = b1.frame_b.r_0[3];
//   b2.body.r_0[1] = b2.body.frame_a.r_0[1];
//   b2.body.r_0[2] = b2.body.frame_a.r_0[2];
//   b2.body.r_0[3] = b2.body.frame_a.r_0[3];
//   if true then
//   b2.body.Q[1] = 0.0;
//   b2.body.Q[2] = 0.0;
//   b2.body.Q[3] = 0.0;
//   b2.body.Q[4] = 1.0;
//   b2.body.phi[1] = 0.0;
//   b2.body.phi[2] = 0.0;
//   b2.body.phi[3] = 0.0;
//   b2.body.phi_d[1] = 0.0;
//   b2.body.phi_d[2] = 0.0;
//   b2.body.phi_d[3] = 0.0;
//   b2.body.phi_dd[1] = 0.0;
//   b2.body.phi_dd[2] = 0.0;
//   b2.body.phi_dd[3] = 0.0;
//   elseif b2.body.useQuaternions then
//   b2.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({b2.body.Q[1],b2.body.Q[2],b2.body.Q[3],b2.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({b2.body.Q[1],b2.body.Q[2],b2.body.Q[3],b2.body.Q[4]},{der(b2.body.Q[1]),der(b2.body.Q[2]),der(b2.body.Q[3]),der(b2.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({b2.body.Q[1],b2.body.Q[2],b2.body.Q[3],b2.body.Q[4]});
//   b2.body.phi[1] = 0.0;
//   b2.body.phi[2] = 0.0;
//   b2.body.phi[3] = 0.0;
//   b2.body.phi_d[1] = 0.0;
//   b2.body.phi_d[2] = 0.0;
//   b2.body.phi_d[3] = 0.0;
//   b2.body.phi_dd[1] = 0.0;
//   b2.body.phi_dd[2] = 0.0;
//   b2.body.phi_dd[3] = 0.0;
//   else
//   b2.body.phi_d[1] = der(b2.body.phi[1]);
//   b2.body.phi_d[2] = der(b2.body.phi[2]);
//   b2.body.phi_d[3] = der(b2.body.phi[3]);
//   b2.body.phi_dd[1] = der(b2.body.phi_d[1]);
//   b2.body.phi_dd[2] = der(b2.body.phi_d[2]);
//   b2.body.phi_dd[3] = der(b2.body.phi_d[3]);
//   b2.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},{b2.body.phi[1],b2.body.phi[2],b2.body.phi[3]},{b2.body.phi_d[1],b2.body.phi_d[2],b2.body.phi_d[3]});
//   b2.body.Q[1] = 0.0;
//   b2.body.Q[2] = 0.0;
//   b2.body.Q[3] = 0.0;
//   b2.body.Q[4] = 1.0;
//   end if;
//   b2.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({b2.body.frame_a.r_0[1],b2.body.frame_a.r_0[2],b2.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(b2.body.frame_a.R,{b2.body.r_CM[1],b2.body.r_CM[2],b2.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   b2.body.v_0[1] = der(b2.body.frame_a.r_0[1]);
//   b2.body.v_0[2] = der(b2.body.frame_a.r_0[2]);
//   b2.body.v_0[3] = der(b2.body.frame_a.r_0[3]);
//   b2.body.a_0[1] = der(b2.body.v_0[1]);
//   b2.body.a_0[2] = der(b2.body.v_0[2]);
//   b2.body.a_0[3] = der(b2.body.v_0[3]);
//   b2.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(b2.body.frame_a.R);
//   b2.body.z_a[1] = der(b2.body.w_a[1]);
//   b2.body.z_a[2] = der(b2.body.w_a[2]);
//   b2.body.z_a[3] = der(b2.body.w_a[3]);
//   b2.body.frame_a.f = b2.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.frame_a.R,{b2.body.a_0[1] - b2.body.g_0[1],b2.body.a_0[2] - b2.body.g_0[2],b2.body.a_0[3] - b2.body.g_0[3]}) + {b2.body.z_a[2] * b2.body.r_CM[3] - b2.body.z_a[3] * b2.body.r_CM[2],b2.body.z_a[3] * b2.body.r_CM[1] - b2.body.z_a[1] * b2.body.r_CM[3],b2.body.z_a[1] * b2.body.r_CM[2] - b2.body.z_a[2] * b2.body.r_CM[1]} + {b2.body.w_a[2] * (b2.body.w_a[1] * b2.body.r_CM[2] - b2.body.w_a[2] * b2.body.r_CM[1]) - b2.body.w_a[3] * (b2.body.w_a[3] * b2.body.r_CM[1] - b2.body.w_a[1] * b2.body.r_CM[3]),b2.body.w_a[3] * (b2.body.w_a[2] * b2.body.r_CM[3] - b2.body.w_a[3] * b2.body.r_CM[2]) - b2.body.w_a[1] * (b2.body.w_a[1] * b2.body.r_CM[2] - b2.body.w_a[2] * b2.body.r_CM[1]),b2.body.w_a[1] * (b2.body.w_a[3] * b2.body.r_CM[1] - b2.body.w_a[1] * b2.body.r_CM[3]) - b2.body.w_a[2] * (b2.body.w_a[2] * b2.body.r_CM[3] - b2.body.w_a[3] * b2.body.r_CM[2])});
//   b2.body.frame_a.t[1] = b2.body.I[1,1] * b2.body.z_a[1] + (b2.body.I[1,2] * b2.body.z_a[2] + (b2.body.I[1,3] * b2.body.z_a[3] + (b2.body.w_a[2] * (b2.body.I[3,1] * b2.body.w_a[1] + (b2.body.I[3,2] * b2.body.w_a[2] + b2.body.I[3,3] * b2.body.w_a[3])) + ((-b2.body.w_a[3] * (b2.body.I[2,1] * b2.body.w_a[1] + (b2.body.I[2,2] * b2.body.w_a[2] + b2.body.I[2,3] * b2.body.w_a[3]))) + (b2.body.r_CM[2] * b2.body.frame_a.f[3] + (-b2.body.r_CM[3] * b2.body.frame_a.f[2]))))));
//   b2.body.frame_a.t[2] = b2.body.I[2,1] * b2.body.z_a[1] + (b2.body.I[2,2] * b2.body.z_a[2] + (b2.body.I[2,3] * b2.body.z_a[3] + (b2.body.w_a[3] * (b2.body.I[1,1] * b2.body.w_a[1] + (b2.body.I[1,2] * b2.body.w_a[2] + b2.body.I[1,3] * b2.body.w_a[3])) + ((-b2.body.w_a[1] * (b2.body.I[3,1] * b2.body.w_a[1] + (b2.body.I[3,2] * b2.body.w_a[2] + b2.body.I[3,3] * b2.body.w_a[3]))) + (b2.body.r_CM[3] * b2.body.frame_a.f[1] + (-b2.body.r_CM[1] * b2.body.frame_a.f[3]))))));
//   b2.body.frame_a.t[3] = b2.body.I[3,1] * b2.body.z_a[1] + (b2.body.I[3,2] * b2.body.z_a[2] + (b2.body.I[3,3] * b2.body.z_a[3] + (b2.body.w_a[1] * (b2.body.I[2,1] * b2.body.w_a[1] + (b2.body.I[2,2] * b2.body.w_a[2] + b2.body.I[2,3] * b2.body.w_a[3])) + ((-b2.body.w_a[2] * (b2.body.I[1,1] * b2.body.w_a[1] + (b2.body.I[1,2] * b2.body.w_a[2] + b2.body.I[1,3] * b2.body.w_a[3]))) + (b2.body.r_CM[1] * b2.body.frame_a.f[2] + (-b2.body.r_CM[2] * b2.body.frame_a.f[1]))))));
//   b2.frameTranslation.shape.R.T[1,1] = b2.frameTranslation.frame_a.R.T[1,1];
//   b2.frameTranslation.shape.R.T[1,2] = b2.frameTranslation.frame_a.R.T[1,2];
//   b2.frameTranslation.shape.R.T[1,3] = b2.frameTranslation.frame_a.R.T[1,3];
//   b2.frameTranslation.shape.R.T[2,1] = b2.frameTranslation.frame_a.R.T[2,1];
//   b2.frameTranslation.shape.R.T[2,2] = b2.frameTranslation.frame_a.R.T[2,2];
//   b2.frameTranslation.shape.R.T[2,3] = b2.frameTranslation.frame_a.R.T[2,3];
//   b2.frameTranslation.shape.R.T[3,1] = b2.frameTranslation.frame_a.R.T[3,1];
//   b2.frameTranslation.shape.R.T[3,2] = b2.frameTranslation.frame_a.R.T[3,2];
//   b2.frameTranslation.shape.R.T[3,3] = b2.frameTranslation.frame_a.R.T[3,3];
//   b2.frameTranslation.shape.R.w[1] = b2.frameTranslation.frame_a.R.w[1];
//   b2.frameTranslation.shape.R.w[2] = b2.frameTranslation.frame_a.R.w[2];
//   b2.frameTranslation.shape.R.w[3] = b2.frameTranslation.frame_a.R.w[3];
//   b2.frameTranslation.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(b2.frameTranslation.shape.shapeType);
//   b2.frameTranslation.shape.rxvisobj[1] = b2.frameTranslation.shape.R.T[1,1] * b2.frameTranslation.shape.e_x[1] + (b2.frameTranslation.shape.R.T[2,1] * b2.frameTranslation.shape.e_x[2] + b2.frameTranslation.shape.R.T[3,1] * b2.frameTranslation.shape.e_x[3]);
//   b2.frameTranslation.shape.rxvisobj[2] = b2.frameTranslation.shape.R.T[1,2] * b2.frameTranslation.shape.e_x[1] + (b2.frameTranslation.shape.R.T[2,2] * b2.frameTranslation.shape.e_x[2] + b2.frameTranslation.shape.R.T[3,2] * b2.frameTranslation.shape.e_x[3]);
//   b2.frameTranslation.shape.rxvisobj[3] = b2.frameTranslation.shape.R.T[1,3] * b2.frameTranslation.shape.e_x[1] + (b2.frameTranslation.shape.R.T[2,3] * b2.frameTranslation.shape.e_x[2] + b2.frameTranslation.shape.R.T[3,3] * b2.frameTranslation.shape.e_x[3]);
//   b2.frameTranslation.shape.ryvisobj[1] = b2.frameTranslation.shape.R.T[1,1] * b2.frameTranslation.shape.e_y[1] + (b2.frameTranslation.shape.R.T[2,1] * b2.frameTranslation.shape.e_y[2] + b2.frameTranslation.shape.R.T[3,1] * b2.frameTranslation.shape.e_y[3]);
//   b2.frameTranslation.shape.ryvisobj[2] = b2.frameTranslation.shape.R.T[1,2] * b2.frameTranslation.shape.e_y[1] + (b2.frameTranslation.shape.R.T[2,2] * b2.frameTranslation.shape.e_y[2] + b2.frameTranslation.shape.R.T[3,2] * b2.frameTranslation.shape.e_y[3]);
//   b2.frameTranslation.shape.ryvisobj[3] = b2.frameTranslation.shape.R.T[1,3] * b2.frameTranslation.shape.e_y[1] + (b2.frameTranslation.shape.R.T[2,3] * b2.frameTranslation.shape.e_y[2] + b2.frameTranslation.shape.R.T[3,3] * b2.frameTranslation.shape.e_y[3]);
//   b2.frameTranslation.shape.rvisobj = b2.frameTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{b2.frameTranslation.shape.R.T[1,1],b2.frameTranslation.shape.R.T[1,2],b2.frameTranslation.shape.R.T[1,3]},{b2.frameTranslation.shape.R.T[2,1],b2.frameTranslation.shape.R.T[2,2],b2.frameTranslation.shape.R.T[2,3]},{b2.frameTranslation.shape.R.T[3,1],b2.frameTranslation.shape.R.T[3,2],b2.frameTranslation.shape.R.T[3,3]}},{b2.frameTranslation.shape.r_shape[1],b2.frameTranslation.shape.r_shape[2],b2.frameTranslation.shape.r_shape[3]});
//   b2.frameTranslation.shape.size[1] = b2.frameTranslation.shape.length;
//   b2.frameTranslation.shape.size[2] = b2.frameTranslation.shape.width;
//   b2.frameTranslation.shape.size[3] = b2.frameTranslation.shape.height;
//   b2.frameTranslation.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(b2.frameTranslation.shape.color[1] / 255.0,b2.frameTranslation.shape.color[2] / 255.0,b2.frameTranslation.shape.color[3] / 255.0,b2.frameTranslation.shape.specularCoefficient);
//   b2.frameTranslation.shape.Extra = b2.frameTranslation.shape.extra;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   b2.frameTranslation.frame_b.r_0 = b2.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(b2.frameTranslation.frame_a.R,{b2.frameTranslation.r[1],b2.frameTranslation.r[2],b2.frameTranslation.r[3]});
//   b2.frameTranslation.frame_b.R.T[1,1] = b2.frameTranslation.frame_a.R.T[1,1];
//   b2.frameTranslation.frame_b.R.T[1,2] = b2.frameTranslation.frame_a.R.T[1,2];
//   b2.frameTranslation.frame_b.R.T[1,3] = b2.frameTranslation.frame_a.R.T[1,3];
//   b2.frameTranslation.frame_b.R.T[2,1] = b2.frameTranslation.frame_a.R.T[2,1];
//   b2.frameTranslation.frame_b.R.T[2,2] = b2.frameTranslation.frame_a.R.T[2,2];
//   b2.frameTranslation.frame_b.R.T[2,3] = b2.frameTranslation.frame_a.R.T[2,3];
//   b2.frameTranslation.frame_b.R.T[3,1] = b2.frameTranslation.frame_a.R.T[3,1];
//   b2.frameTranslation.frame_b.R.T[3,2] = b2.frameTranslation.frame_a.R.T[3,2];
//   b2.frameTranslation.frame_b.R.T[3,3] = b2.frameTranslation.frame_a.R.T[3,3];
//   b2.frameTranslation.frame_b.R.w[1] = b2.frameTranslation.frame_a.R.w[1];
//   b2.frameTranslation.frame_b.R.w[2] = b2.frameTranslation.frame_a.R.w[2];
//   b2.frameTranslation.frame_b.R.w[3] = b2.frameTranslation.frame_a.R.w[3];
//   0.0 = b2.frameTranslation.frame_a.f[1] + b2.frameTranslation.frame_b.f[1];
//   0.0 = b2.frameTranslation.frame_a.f[2] + b2.frameTranslation.frame_b.f[2];
//   0.0 = b2.frameTranslation.frame_a.f[3] + b2.frameTranslation.frame_b.f[3];
//   0.0 = b2.frameTranslation.frame_a.t[1] + (b2.frameTranslation.frame_b.t[1] + (b2.frameTranslation.r[2] * b2.frameTranslation.frame_b.f[3] + (-b2.frameTranslation.r[3] * b2.frameTranslation.frame_b.f[2])));
//   0.0 = b2.frameTranslation.frame_a.t[2] + (b2.frameTranslation.frame_b.t[2] + (b2.frameTranslation.r[3] * b2.frameTranslation.frame_b.f[1] + (-b2.frameTranslation.r[1] * b2.frameTranslation.frame_b.f[3])));
//   0.0 = b2.frameTranslation.frame_a.t[3] + (b2.frameTranslation.frame_b.t[3] + (b2.frameTranslation.r[1] * b2.frameTranslation.frame_b.f[2] + (-b2.frameTranslation.r[2] * b2.frameTranslation.frame_b.f[1])));
//   b2.r_0[1] = b2.frame_a.r_0[1];
//   b2.r_0[2] = b2.frame_a.r_0[2];
//   b2.r_0[3] = b2.frame_a.r_0[3];
//   b2.v_0[1] = der(b2.r_0[1]);
//   b2.v_0[2] = der(b2.r_0[2]);
//   b2.v_0[3] = der(b2.r_0[3]);
//   b2.a_0[1] = der(b2.v_0[1]);
//   b2.a_0[2] = der(b2.v_0[2]);
//   b2.a_0[3] = der(b2.v_0[3]);
//   assert(b2.innerDiameter < b2.diameter,"parameter innerDiameter is greater as parameter diameter.");
//   b2.frameTranslation.frame_a.t[1] + ((-b2.frame_a.t[1]) + b2.body.frame_a.t[1]) = 0.0;
//   b2.frameTranslation.frame_a.t[2] + ((-b2.frame_a.t[2]) + b2.body.frame_a.t[2]) = 0.0;
//   b2.frameTranslation.frame_a.t[3] + ((-b2.frame_a.t[3]) + b2.body.frame_a.t[3]) = 0.0;
//   b2.frameTranslation.frame_a.f[1] + ((-b2.frame_a.f[1]) + b2.body.frame_a.f[1]) = 0.0;
//   b2.frameTranslation.frame_a.f[2] + ((-b2.frame_a.f[2]) + b2.body.frame_a.f[2]) = 0.0;
//   b2.frameTranslation.frame_a.f[3] + ((-b2.frame_a.f[3]) + b2.body.frame_a.f[3]) = 0.0;
//   b2.frameTranslation.frame_a.R.w[1] = b2.frame_a.R.w[1];
//   b2.frame_a.R.w[1] = b2.body.frame_a.R.w[1];
//   b2.frameTranslation.frame_a.R.w[2] = b2.frame_a.R.w[2];
//   b2.frame_a.R.w[2] = b2.body.frame_a.R.w[2];
//   b2.frameTranslation.frame_a.R.w[3] = b2.frame_a.R.w[3];
//   b2.frame_a.R.w[3] = b2.body.frame_a.R.w[3];
//   b2.frameTranslation.frame_a.R.T[1,1] = b2.frame_a.R.T[1,1];
//   b2.frame_a.R.T[1,1] = b2.body.frame_a.R.T[1,1];
//   b2.frameTranslation.frame_a.R.T[1,2] = b2.frame_a.R.T[1,2];
//   b2.frame_a.R.T[1,2] = b2.body.frame_a.R.T[1,2];
//   b2.frameTranslation.frame_a.R.T[1,3] = b2.frame_a.R.T[1,3];
//   b2.frame_a.R.T[1,3] = b2.body.frame_a.R.T[1,3];
//   b2.frameTranslation.frame_a.R.T[2,1] = b2.frame_a.R.T[2,1];
//   b2.frame_a.R.T[2,1] = b2.body.frame_a.R.T[2,1];
//   b2.frameTranslation.frame_a.R.T[2,2] = b2.frame_a.R.T[2,2];
//   b2.frame_a.R.T[2,2] = b2.body.frame_a.R.T[2,2];
//   b2.frameTranslation.frame_a.R.T[2,3] = b2.frame_a.R.T[2,3];
//   b2.frame_a.R.T[2,3] = b2.body.frame_a.R.T[2,3];
//   b2.frameTranslation.frame_a.R.T[3,1] = b2.frame_a.R.T[3,1];
//   b2.frame_a.R.T[3,1] = b2.body.frame_a.R.T[3,1];
//   b2.frameTranslation.frame_a.R.T[3,2] = b2.frame_a.R.T[3,2];
//   b2.frame_a.R.T[3,2] = b2.body.frame_a.R.T[3,2];
//   b2.frameTranslation.frame_a.R.T[3,3] = b2.frame_a.R.T[3,3];
//   b2.frame_a.R.T[3,3] = b2.body.frame_a.R.T[3,3];
//   b2.frameTranslation.frame_a.r_0[1] = b2.frame_a.r_0[1];
//   b2.frame_a.r_0[1] = b2.body.frame_a.r_0[1];
//   b2.frameTranslation.frame_a.r_0[2] = b2.frame_a.r_0[2];
//   b2.frame_a.r_0[2] = b2.body.frame_a.r_0[2];
//   b2.frameTranslation.frame_a.r_0[3] = b2.frame_a.r_0[3];
//   b2.frame_a.r_0[3] = b2.body.frame_a.r_0[3];
//   b2.frameTranslation.frame_b.t[1] + (-b2.frame_b.t[1]) = 0.0;
//   b2.frameTranslation.frame_b.t[2] + (-b2.frame_b.t[2]) = 0.0;
//   b2.frameTranslation.frame_b.t[3] + (-b2.frame_b.t[3]) = 0.0;
//   b2.frameTranslation.frame_b.f[1] + (-b2.frame_b.f[1]) = 0.0;
//   b2.frameTranslation.frame_b.f[2] + (-b2.frame_b.f[2]) = 0.0;
//   b2.frameTranslation.frame_b.f[3] + (-b2.frame_b.f[3]) = 0.0;
//   b2.frameTranslation.frame_b.R.w[1] = b2.frame_b.R.w[1];
//   b2.frameTranslation.frame_b.R.w[2] = b2.frame_b.R.w[2];
//   b2.frameTranslation.frame_b.R.w[3] = b2.frame_b.R.w[3];
//   b2.frameTranslation.frame_b.R.T[1,1] = b2.frame_b.R.T[1,1];
//   b2.frameTranslation.frame_b.R.T[1,2] = b2.frame_b.R.T[1,2];
//   b2.frameTranslation.frame_b.R.T[1,3] = b2.frame_b.R.T[1,3];
//   b2.frameTranslation.frame_b.R.T[2,1] = b2.frame_b.R.T[2,1];
//   b2.frameTranslation.frame_b.R.T[2,2] = b2.frame_b.R.T[2,2];
//   b2.frameTranslation.frame_b.R.T[2,3] = b2.frame_b.R.T[2,3];
//   b2.frameTranslation.frame_b.R.T[3,1] = b2.frame_b.R.T[3,1];
//   b2.frameTranslation.frame_b.R.T[3,2] = b2.frame_b.R.T[3,2];
//   b2.frameTranslation.frame_b.R.T[3,3] = b2.frame_b.R.T[3,3];
//   b2.frameTranslation.frame_b.r_0[1] = b2.frame_b.r_0[1];
//   b2.frameTranslation.frame_b.r_0[2] = b2.frame_b.r_0[2];
//   b2.frameTranslation.frame_b.r_0[3] = b2.frame_b.r_0[3];
//   universalSpherical.rodShape.R.T[1,1] = universalSpherical.frame_ia.R.T[1,1];
//   universalSpherical.rodShape.R.T[1,2] = universalSpherical.frame_ia.R.T[1,2];
//   universalSpherical.rodShape.R.T[1,3] = universalSpherical.frame_ia.R.T[1,3];
//   universalSpherical.rodShape.R.T[2,1] = universalSpherical.frame_ia.R.T[2,1];
//   universalSpherical.rodShape.R.T[2,2] = universalSpherical.frame_ia.R.T[2,2];
//   universalSpherical.rodShape.R.T[2,3] = universalSpherical.frame_ia.R.T[2,3];
//   universalSpherical.rodShape.R.T[3,1] = universalSpherical.frame_ia.R.T[3,1];
//   universalSpherical.rodShape.R.T[3,2] = universalSpherical.frame_ia.R.T[3,2];
//   universalSpherical.rodShape.R.T[3,3] = universalSpherical.frame_ia.R.T[3,3];
//   universalSpherical.rodShape.R.w[1] = universalSpherical.frame_ia.R.w[1];
//   universalSpherical.rodShape.R.w[2] = universalSpherical.frame_ia.R.w[2];
//   universalSpherical.rodShape.R.w[3] = universalSpherical.frame_ia.R.w[3];
//   universalSpherical.rodShape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(universalSpherical.rodShape.shapeType);
//   universalSpherical.rodShape.rxvisobj[1] = universalSpherical.rodShape.R.T[1,1] * universalSpherical.rodShape.e_x[1] + (universalSpherical.rodShape.R.T[2,1] * universalSpherical.rodShape.e_x[2] + universalSpherical.rodShape.R.T[3,1] * universalSpherical.rodShape.e_x[3]);
//   universalSpherical.rodShape.rxvisobj[2] = universalSpherical.rodShape.R.T[1,2] * universalSpherical.rodShape.e_x[1] + (universalSpherical.rodShape.R.T[2,2] * universalSpherical.rodShape.e_x[2] + universalSpherical.rodShape.R.T[3,2] * universalSpherical.rodShape.e_x[3]);
//   universalSpherical.rodShape.rxvisobj[3] = universalSpherical.rodShape.R.T[1,3] * universalSpherical.rodShape.e_x[1] + (universalSpherical.rodShape.R.T[2,3] * universalSpherical.rodShape.e_x[2] + universalSpherical.rodShape.R.T[3,3] * universalSpherical.rodShape.e_x[3]);
//   universalSpherical.rodShape.ryvisobj[1] = universalSpherical.rodShape.R.T[1,1] * universalSpherical.rodShape.e_y[1] + (universalSpherical.rodShape.R.T[2,1] * universalSpherical.rodShape.e_y[2] + universalSpherical.rodShape.R.T[3,1] * universalSpherical.rodShape.e_y[3]);
//   universalSpherical.rodShape.ryvisobj[2] = universalSpherical.rodShape.R.T[1,2] * universalSpherical.rodShape.e_y[1] + (universalSpherical.rodShape.R.T[2,2] * universalSpherical.rodShape.e_y[2] + universalSpherical.rodShape.R.T[3,2] * universalSpherical.rodShape.e_y[3]);
//   universalSpherical.rodShape.ryvisobj[3] = universalSpherical.rodShape.R.T[1,3] * universalSpherical.rodShape.e_y[1] + (universalSpherical.rodShape.R.T[2,3] * universalSpherical.rodShape.e_y[2] + universalSpherical.rodShape.R.T[3,3] * universalSpherical.rodShape.e_y[3]);
//   universalSpherical.rodShape.rvisobj = universalSpherical.rodShape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{universalSpherical.rodShape.R.T[1,1],universalSpherical.rodShape.R.T[1,2],universalSpherical.rodShape.R.T[1,3]},{universalSpherical.rodShape.R.T[2,1],universalSpherical.rodShape.R.T[2,2],universalSpherical.rodShape.R.T[2,3]},{universalSpherical.rodShape.R.T[3,1],universalSpherical.rodShape.R.T[3,2],universalSpherical.rodShape.R.T[3,3]}},{universalSpherical.rodShape.r_shape[1],universalSpherical.rodShape.r_shape[2],universalSpherical.rodShape.r_shape[3]});
//   universalSpherical.rodShape.size[1] = universalSpherical.rodShape.length;
//   universalSpherical.rodShape.size[2] = universalSpherical.rodShape.width;
//   universalSpherical.rodShape.size[3] = universalSpherical.rodShape.height;
//   universalSpherical.rodShape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(universalSpherical.rodShape.color[1] / 255.0,universalSpherical.rodShape.color[2] / 255.0,universalSpherical.rodShape.color[3] / 255.0,universalSpherical.rodShape.specularCoefficient);
//   universalSpherical.rodShape.Extra = universalSpherical.rodShape.extra;
//   universalSpherical.sphericalShape_b.R.T[1,1] = universalSpherical.frame_b.R.T[1,1];
//   universalSpherical.sphericalShape_b.R.T[1,2] = universalSpherical.frame_b.R.T[1,2];
//   universalSpherical.sphericalShape_b.R.T[1,3] = universalSpherical.frame_b.R.T[1,3];
//   universalSpherical.sphericalShape_b.R.T[2,1] = universalSpherical.frame_b.R.T[2,1];
//   universalSpherical.sphericalShape_b.R.T[2,2] = universalSpherical.frame_b.R.T[2,2];
//   universalSpherical.sphericalShape_b.R.T[2,3] = universalSpherical.frame_b.R.T[2,3];
//   universalSpherical.sphericalShape_b.R.T[3,1] = universalSpherical.frame_b.R.T[3,1];
//   universalSpherical.sphericalShape_b.R.T[3,2] = universalSpherical.frame_b.R.T[3,2];
//   universalSpherical.sphericalShape_b.R.T[3,3] = universalSpherical.frame_b.R.T[3,3];
//   universalSpherical.sphericalShape_b.R.w[1] = universalSpherical.frame_b.R.w[1];
//   universalSpherical.sphericalShape_b.R.w[2] = universalSpherical.frame_b.R.w[2];
//   universalSpherical.sphericalShape_b.R.w[3] = universalSpherical.frame_b.R.w[3];
//   universalSpherical.sphericalShape_b.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(universalSpherical.sphericalShape_b.shapeType);
//   universalSpherical.sphericalShape_b.rxvisobj[1] = universalSpherical.sphericalShape_b.R.T[1,1] * universalSpherical.sphericalShape_b.e_x[1] + (universalSpherical.sphericalShape_b.R.T[2,1] * universalSpherical.sphericalShape_b.e_x[2] + universalSpherical.sphericalShape_b.R.T[3,1] * universalSpherical.sphericalShape_b.e_x[3]);
//   universalSpherical.sphericalShape_b.rxvisobj[2] = universalSpherical.sphericalShape_b.R.T[1,2] * universalSpherical.sphericalShape_b.e_x[1] + (universalSpherical.sphericalShape_b.R.T[2,2] * universalSpherical.sphericalShape_b.e_x[2] + universalSpherical.sphericalShape_b.R.T[3,2] * universalSpherical.sphericalShape_b.e_x[3]);
//   universalSpherical.sphericalShape_b.rxvisobj[3] = universalSpherical.sphericalShape_b.R.T[1,3] * universalSpherical.sphericalShape_b.e_x[1] + (universalSpherical.sphericalShape_b.R.T[2,3] * universalSpherical.sphericalShape_b.e_x[2] + universalSpherical.sphericalShape_b.R.T[3,3] * universalSpherical.sphericalShape_b.e_x[3]);
//   universalSpherical.sphericalShape_b.ryvisobj[1] = universalSpherical.sphericalShape_b.R.T[1,1] * universalSpherical.sphericalShape_b.e_y[1] + (universalSpherical.sphericalShape_b.R.T[2,1] * universalSpherical.sphericalShape_b.e_y[2] + universalSpherical.sphericalShape_b.R.T[3,1] * universalSpherical.sphericalShape_b.e_y[3]);
//   universalSpherical.sphericalShape_b.ryvisobj[2] = universalSpherical.sphericalShape_b.R.T[1,2] * universalSpherical.sphericalShape_b.e_y[1] + (universalSpherical.sphericalShape_b.R.T[2,2] * universalSpherical.sphericalShape_b.e_y[2] + universalSpherical.sphericalShape_b.R.T[3,2] * universalSpherical.sphericalShape_b.e_y[3]);
//   universalSpherical.sphericalShape_b.ryvisobj[3] = universalSpherical.sphericalShape_b.R.T[1,3] * universalSpherical.sphericalShape_b.e_y[1] + (universalSpherical.sphericalShape_b.R.T[2,3] * universalSpherical.sphericalShape_b.e_y[2] + universalSpherical.sphericalShape_b.R.T[3,3] * universalSpherical.sphericalShape_b.e_y[3]);
//   universalSpherical.sphericalShape_b.rvisobj = universalSpherical.sphericalShape_b.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{universalSpherical.sphericalShape_b.R.T[1,1],universalSpherical.sphericalShape_b.R.T[1,2],universalSpherical.sphericalShape_b.R.T[1,3]},{universalSpherical.sphericalShape_b.R.T[2,1],universalSpherical.sphericalShape_b.R.T[2,2],universalSpherical.sphericalShape_b.R.T[2,3]},{universalSpherical.sphericalShape_b.R.T[3,1],universalSpherical.sphericalShape_b.R.T[3,2],universalSpherical.sphericalShape_b.R.T[3,3]}},{universalSpherical.sphericalShape_b.r_shape[1],universalSpherical.sphericalShape_b.r_shape[2],universalSpherical.sphericalShape_b.r_shape[3]});
//   universalSpherical.sphericalShape_b.size[1] = universalSpherical.sphericalShape_b.length;
//   universalSpherical.sphericalShape_b.size[2] = universalSpherical.sphericalShape_b.width;
//   universalSpherical.sphericalShape_b.size[3] = universalSpherical.sphericalShape_b.height;
//   universalSpherical.sphericalShape_b.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(universalSpherical.sphericalShape_b.color[1] / 255.0,universalSpherical.sphericalShape_b.color[2] / 255.0,universalSpherical.sphericalShape_b.color[3] / 255.0,universalSpherical.sphericalShape_b.specularCoefficient);
//   universalSpherical.sphericalShape_b.Extra = universalSpherical.sphericalShape_b.extra;
//   universalSpherical.universalShape1.R.T[1,1] = universalSpherical.frame_a.R.T[1,1];
//   universalSpherical.universalShape1.R.T[1,2] = universalSpherical.frame_a.R.T[1,2];
//   universalSpherical.universalShape1.R.T[1,3] = universalSpherical.frame_a.R.T[1,3];
//   universalSpherical.universalShape1.R.T[2,1] = universalSpherical.frame_a.R.T[2,1];
//   universalSpherical.universalShape1.R.T[2,2] = universalSpherical.frame_a.R.T[2,2];
//   universalSpherical.universalShape1.R.T[2,3] = universalSpherical.frame_a.R.T[2,3];
//   universalSpherical.universalShape1.R.T[3,1] = universalSpherical.frame_a.R.T[3,1];
//   universalSpherical.universalShape1.R.T[3,2] = universalSpherical.frame_a.R.T[3,2];
//   universalSpherical.universalShape1.R.T[3,3] = universalSpherical.frame_a.R.T[3,3];
//   universalSpherical.universalShape1.R.w[1] = universalSpherical.frame_a.R.w[1];
//   universalSpherical.universalShape1.R.w[2] = universalSpherical.frame_a.R.w[2];
//   universalSpherical.universalShape1.R.w[3] = universalSpherical.frame_a.R.w[3];
//   universalSpherical.universalShape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(universalSpherical.universalShape1.shapeType);
//   universalSpherical.universalShape1.rxvisobj[1] = universalSpherical.universalShape1.R.T[1,1] * universalSpherical.universalShape1.e_x[1] + (universalSpherical.universalShape1.R.T[2,1] * universalSpherical.universalShape1.e_x[2] + universalSpherical.universalShape1.R.T[3,1] * universalSpherical.universalShape1.e_x[3]);
//   universalSpherical.universalShape1.rxvisobj[2] = universalSpherical.universalShape1.R.T[1,2] * universalSpherical.universalShape1.e_x[1] + (universalSpherical.universalShape1.R.T[2,2] * universalSpherical.universalShape1.e_x[2] + universalSpherical.universalShape1.R.T[3,2] * universalSpherical.universalShape1.e_x[3]);
//   universalSpherical.universalShape1.rxvisobj[3] = universalSpherical.universalShape1.R.T[1,3] * universalSpherical.universalShape1.e_x[1] + (universalSpherical.universalShape1.R.T[2,3] * universalSpherical.universalShape1.e_x[2] + universalSpherical.universalShape1.R.T[3,3] * universalSpherical.universalShape1.e_x[3]);
//   universalSpherical.universalShape1.ryvisobj[1] = universalSpherical.universalShape1.R.T[1,1] * universalSpherical.universalShape1.e_y[1] + (universalSpherical.universalShape1.R.T[2,1] * universalSpherical.universalShape1.e_y[2] + universalSpherical.universalShape1.R.T[3,1] * universalSpherical.universalShape1.e_y[3]);
//   universalSpherical.universalShape1.ryvisobj[2] = universalSpherical.universalShape1.R.T[1,2] * universalSpherical.universalShape1.e_y[1] + (universalSpherical.universalShape1.R.T[2,2] * universalSpherical.universalShape1.e_y[2] + universalSpherical.universalShape1.R.T[3,2] * universalSpherical.universalShape1.e_y[3]);
//   universalSpherical.universalShape1.ryvisobj[3] = universalSpherical.universalShape1.R.T[1,3] * universalSpherical.universalShape1.e_y[1] + (universalSpherical.universalShape1.R.T[2,3] * universalSpherical.universalShape1.e_y[2] + universalSpherical.universalShape1.R.T[3,3] * universalSpherical.universalShape1.e_y[3]);
//   universalSpherical.universalShape1.rvisobj = universalSpherical.universalShape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{universalSpherical.universalShape1.R.T[1,1],universalSpherical.universalShape1.R.T[1,2],universalSpherical.universalShape1.R.T[1,3]},{universalSpherical.universalShape1.R.T[2,1],universalSpherical.universalShape1.R.T[2,2],universalSpherical.universalShape1.R.T[2,3]},{universalSpherical.universalShape1.R.T[3,1],universalSpherical.universalShape1.R.T[3,2],universalSpherical.universalShape1.R.T[3,3]}},{universalSpherical.universalShape1.r_shape[1],universalSpherical.universalShape1.r_shape[2],universalSpherical.universalShape1.r_shape[3]});
//   universalSpherical.universalShape1.size[1] = universalSpherical.universalShape1.length;
//   universalSpherical.universalShape1.size[2] = universalSpherical.universalShape1.width;
//   universalSpherical.universalShape1.size[3] = universalSpherical.universalShape1.height;
//   universalSpherical.universalShape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(universalSpherical.universalShape1.color[1] / 255.0,universalSpherical.universalShape1.color[2] / 255.0,universalSpherical.universalShape1.color[3] / 255.0,universalSpherical.universalShape1.specularCoefficient);
//   universalSpherical.universalShape1.Extra = universalSpherical.universalShape1.extra;
//   universalSpherical.universalShape2.R.T[1,1] = universalSpherical.frame_ia.R.T[1,1];
//   universalSpherical.universalShape2.R.T[1,2] = universalSpherical.frame_ia.R.T[1,2];
//   universalSpherical.universalShape2.R.T[1,3] = universalSpherical.frame_ia.R.T[1,3];
//   universalSpherical.universalShape2.R.T[2,1] = universalSpherical.frame_ia.R.T[2,1];
//   universalSpherical.universalShape2.R.T[2,2] = universalSpherical.frame_ia.R.T[2,2];
//   universalSpherical.universalShape2.R.T[2,3] = universalSpherical.frame_ia.R.T[2,3];
//   universalSpherical.universalShape2.R.T[3,1] = universalSpherical.frame_ia.R.T[3,1];
//   universalSpherical.universalShape2.R.T[3,2] = universalSpherical.frame_ia.R.T[3,2];
//   universalSpherical.universalShape2.R.T[3,3] = universalSpherical.frame_ia.R.T[3,3];
//   universalSpherical.universalShape2.R.w[1] = universalSpherical.frame_ia.R.w[1];
//   universalSpherical.universalShape2.R.w[2] = universalSpherical.frame_ia.R.w[2];
//   universalSpherical.universalShape2.R.w[3] = universalSpherical.frame_ia.R.w[3];
//   universalSpherical.universalShape2.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(universalSpherical.universalShape2.shapeType);
//   universalSpherical.universalShape2.rxvisobj[1] = universalSpherical.universalShape2.R.T[1,1] * universalSpherical.universalShape2.e_x[1] + (universalSpherical.universalShape2.R.T[2,1] * universalSpherical.universalShape2.e_x[2] + universalSpherical.universalShape2.R.T[3,1] * universalSpherical.universalShape2.e_x[3]);
//   universalSpherical.universalShape2.rxvisobj[2] = universalSpherical.universalShape2.R.T[1,2] * universalSpherical.universalShape2.e_x[1] + (universalSpherical.universalShape2.R.T[2,2] * universalSpherical.universalShape2.e_x[2] + universalSpherical.universalShape2.R.T[3,2] * universalSpherical.universalShape2.e_x[3]);
//   universalSpherical.universalShape2.rxvisobj[3] = universalSpherical.universalShape2.R.T[1,3] * universalSpherical.universalShape2.e_x[1] + (universalSpherical.universalShape2.R.T[2,3] * universalSpherical.universalShape2.e_x[2] + universalSpherical.universalShape2.R.T[3,3] * universalSpherical.universalShape2.e_x[3]);
//   universalSpherical.universalShape2.ryvisobj[1] = universalSpherical.universalShape2.R.T[1,1] * universalSpherical.universalShape2.e_y[1] + (universalSpherical.universalShape2.R.T[2,1] * universalSpherical.universalShape2.e_y[2] + universalSpherical.universalShape2.R.T[3,1] * universalSpherical.universalShape2.e_y[3]);
//   universalSpherical.universalShape2.ryvisobj[2] = universalSpherical.universalShape2.R.T[1,2] * universalSpherical.universalShape2.e_y[1] + (universalSpherical.universalShape2.R.T[2,2] * universalSpherical.universalShape2.e_y[2] + universalSpherical.universalShape2.R.T[3,2] * universalSpherical.universalShape2.e_y[3]);
//   universalSpherical.universalShape2.ryvisobj[3] = universalSpherical.universalShape2.R.T[1,3] * universalSpherical.universalShape2.e_y[1] + (universalSpherical.universalShape2.R.T[2,3] * universalSpherical.universalShape2.e_y[2] + universalSpherical.universalShape2.R.T[3,3] * universalSpherical.universalShape2.e_y[3]);
//   universalSpherical.universalShape2.rvisobj = universalSpherical.universalShape2.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{universalSpherical.universalShape2.R.T[1,1],universalSpherical.universalShape2.R.T[1,2],universalSpherical.universalShape2.R.T[1,3]},{universalSpherical.universalShape2.R.T[2,1],universalSpherical.universalShape2.R.T[2,2],universalSpherical.universalShape2.R.T[2,3]},{universalSpherical.universalShape2.R.T[3,1],universalSpherical.universalShape2.R.T[3,2],universalSpherical.universalShape2.R.T[3,3]}},{universalSpherical.universalShape2.r_shape[1],universalSpherical.universalShape2.r_shape[2],universalSpherical.universalShape2.r_shape[3]});
//   universalSpherical.universalShape2.size[1] = universalSpherical.universalShape2.length;
//   universalSpherical.universalShape2.size[2] = universalSpherical.universalShape2.width;
//   universalSpherical.universalShape2.size[3] = universalSpherical.universalShape2.height;
//   universalSpherical.universalShape2.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(universalSpherical.universalShape2.color[1] / 255.0,universalSpherical.universalShape2.color[2] / 255.0,universalSpherical.universalShape2.color[3] / 255.0,universalSpherical.universalShape2.specularCoefficient);
//   universalSpherical.universalShape2.Extra = universalSpherical.universalShape2.extra;
//   universalSpherical.rRod_0[1] = universalSpherical.frame_b.R.T[1,1] * (universalSpherical.frame_b.R.T[1,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[1,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[1,3] * universalSpherical.frame_b.r_0[3])) + (universalSpherical.frame_b.R.T[2,1] * (universalSpherical.frame_b.R.T[2,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[2,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[2,3] * universalSpherical.frame_b.r_0[3])) + universalSpherical.frame_b.R.T[3,1] * (universalSpherical.frame_b.R.T[3,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[3,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[3,3] * universalSpherical.frame_b.r_0[3]))) - (universalSpherical.frame_a.R.T[1,1] * (universalSpherical.frame_a.R.T[1,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[1,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[1,3] * universalSpherical.frame_a.r_0[3])) + (universalSpherical.frame_a.R.T[2,1] * (universalSpherical.frame_a.R.T[2,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[2,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[2,3] * universalSpherical.frame_a.r_0[3])) + universalSpherical.frame_a.R.T[3,1] * (universalSpherical.frame_a.R.T[3,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[3,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[3,3] * universalSpherical.frame_a.r_0[3]))));
//   universalSpherical.rRod_0[2] = universalSpherical.frame_b.R.T[1,2] * (universalSpherical.frame_b.R.T[1,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[1,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[1,3] * universalSpherical.frame_b.r_0[3])) + (universalSpherical.frame_b.R.T[2,2] * (universalSpherical.frame_b.R.T[2,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[2,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[2,3] * universalSpherical.frame_b.r_0[3])) + universalSpherical.frame_b.R.T[3,2] * (universalSpherical.frame_b.R.T[3,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[3,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[3,3] * universalSpherical.frame_b.r_0[3]))) - (universalSpherical.frame_a.R.T[1,2] * (universalSpherical.frame_a.R.T[1,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[1,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[1,3] * universalSpherical.frame_a.r_0[3])) + (universalSpherical.frame_a.R.T[2,2] * (universalSpherical.frame_a.R.T[2,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[2,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[2,3] * universalSpherical.frame_a.r_0[3])) + universalSpherical.frame_a.R.T[3,2] * (universalSpherical.frame_a.R.T[3,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[3,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[3,3] * universalSpherical.frame_a.r_0[3]))));
//   universalSpherical.rRod_0[3] = universalSpherical.frame_b.R.T[1,3] * (universalSpherical.frame_b.R.T[1,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[1,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[1,3] * universalSpherical.frame_b.r_0[3])) + (universalSpherical.frame_b.R.T[2,3] * (universalSpherical.frame_b.R.T[2,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[2,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[2,3] * universalSpherical.frame_b.r_0[3])) + universalSpherical.frame_b.R.T[3,3] * (universalSpherical.frame_b.R.T[3,1] * universalSpherical.frame_b.r_0[1] + (universalSpherical.frame_b.R.T[3,2] * universalSpherical.frame_b.r_0[2] + universalSpherical.frame_b.R.T[3,3] * universalSpherical.frame_b.r_0[3]))) - (universalSpherical.frame_a.R.T[1,3] * (universalSpherical.frame_a.R.T[1,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[1,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[1,3] * universalSpherical.frame_a.r_0[3])) + (universalSpherical.frame_a.R.T[2,3] * (universalSpherical.frame_a.R.T[2,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[2,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[2,3] * universalSpherical.frame_a.r_0[3])) + universalSpherical.frame_a.R.T[3,3] * (universalSpherical.frame_a.R.T[3,1] * universalSpherical.frame_a.r_0[1] + (universalSpherical.frame_a.R.T[3,2] * universalSpherical.frame_a.r_0[2] + universalSpherical.frame_a.R.T[3,3] * universalSpherical.frame_a.r_0[3]))));
//   universalSpherical.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(universalSpherical.frame_a.R,{universalSpherical.rRod_0[1],universalSpherical.rRod_0[2],universalSpherical.rRod_0[3]});
//   universalSpherical.constraintResidue = 0.0;
//   universalSpherical.eRod_a[1] = universalSpherical.rRod_a[1] / universalSpherical.rodLength;
//   universalSpherical.eRod_a[2] = universalSpherical.rRod_a[2] / universalSpherical.rodLength;
//   universalSpherical.eRod_a[3] = universalSpherical.rRod_a[3] / universalSpherical.rodLength;
//   universalSpherical.n2_a[1] = universalSpherical.n1_a[2] * universalSpherical.eRod_a[3] - universalSpherical.n1_a[3] * universalSpherical.eRod_a[2];
//   universalSpherical.n2_a[2] = universalSpherical.n1_a[3] * universalSpherical.eRod_a[1] - universalSpherical.n1_a[1] * universalSpherical.eRod_a[3];
//   universalSpherical.n2_a[3] = universalSpherical.n1_a[1] * universalSpherical.eRod_a[2] - universalSpherical.n1_a[2] * universalSpherical.eRod_a[1];
//   universalSpherical.length2_n2_a = universalSpherical.n2_a[1] ^ 2.0 + (universalSpherical.n2_a[2] ^ 2.0 + universalSpherical.n2_a[3] ^ 2.0);
//   assert(universalSpherical.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   universalSpherical.length_n2_a = sqrt(universalSpherical.length2_n2_a);
//   universalSpherical.e2_a[1] = universalSpherical.n2_a[1] / universalSpherical.length_n2_a;
//   universalSpherical.e2_a[2] = universalSpherical.n2_a[2] / universalSpherical.length_n2_a;
//   universalSpherical.e2_a[3] = universalSpherical.n2_a[3] / universalSpherical.length_n2_a;
//   universalSpherical.e3_a[1] = universalSpherical.eRod_a[2] * universalSpherical.e2_a[3] - universalSpherical.eRod_a[3] * universalSpherical.e2_a[2];
//   universalSpherical.e3_a[2] = universalSpherical.eRod_a[3] * universalSpherical.e2_a[1] - universalSpherical.eRod_a[1] * universalSpherical.e2_a[3];
//   universalSpherical.e3_a[3] = universalSpherical.eRod_a[1] * universalSpherical.e2_a[2] - universalSpherical.eRod_a[2] * universalSpherical.e2_a[1];
//   universalSpherical.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(universalSpherical.frame_a.R,{der(universalSpherical.rRod_0[1]),der(universalSpherical.rRod_0[2]),der(universalSpherical.rRod_0[3])}) - {universalSpherical.frame_a.R.w[2] * universalSpherical.rRod_a[3] - universalSpherical.frame_a.R.w[3] * universalSpherical.rRod_a[2],universalSpherical.frame_a.R.w[3] * universalSpherical.rRod_a[1] - universalSpherical.frame_a.R.w[1] * universalSpherical.rRod_a[3],universalSpherical.frame_a.R.w[1] * universalSpherical.rRod_a[2] - universalSpherical.frame_a.R.w[2] * universalSpherical.rRod_a[1]}) / universalSpherical.rodLength;
//   universalSpherical.w_rel_ia1[1] = (universalSpherical.e3_a[1] * (universalSpherical.n1_a[2] * universalSpherical.der_rRod_a_L[3] - universalSpherical.n1_a[3] * universalSpherical.der_rRod_a_L[2]) + (universalSpherical.e3_a[2] * (universalSpherical.n1_a[3] * universalSpherical.der_rRod_a_L[1] - universalSpherical.n1_a[1] * universalSpherical.der_rRod_a_L[3]) + universalSpherical.e3_a[3] * (universalSpherical.n1_a[1] * universalSpherical.der_rRod_a_L[2] - universalSpherical.n1_a[2] * universalSpherical.der_rRod_a_L[1]))) / universalSpherical.length_n2_a;
//   universalSpherical.w_rel_ia1[2] = (-universalSpherical.e3_a[1]) * universalSpherical.der_rRod_a_L[1] + ((-universalSpherical.e3_a[2]) * universalSpherical.der_rRod_a_L[2] + (-universalSpherical.e3_a[3]) * universalSpherical.der_rRod_a_L[3]);
//   universalSpherical.w_rel_ia1[3] = universalSpherical.e2_a[1] * universalSpherical.der_rRod_a_L[1] + (universalSpherical.e2_a[2] * universalSpherical.der_rRod_a_L[2] + universalSpherical.e2_a[3] * universalSpherical.der_rRod_a_L[3]);
//   universalSpherical.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{universalSpherical.eRod_a[1],universalSpherical.eRod_a[2],universalSpherical.eRod_a[3]},{universalSpherical.e2_a[1],universalSpherical.e2_a[2],universalSpherical.e2_a[3]},{universalSpherical.e3_a[1],universalSpherical.e3_a[2],universalSpherical.e3_a[3]}},{universalSpherical.w_rel_ia1[1],universalSpherical.w_rel_ia1[2],universalSpherical.w_rel_ia1[3]});
//   universalSpherical.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{universalSpherical.eRod_ia[1],universalSpherical.e2_ia[1],universalSpherical.e3_ia[1]},{universalSpherical.eRod_ia[2],universalSpherical.e2_ia[2],universalSpherical.e3_ia[2]},{universalSpherical.eRod_ia[3],universalSpherical.e2_ia[3],universalSpherical.e3_ia[3]}},{0.0,0.0,0.0});
//   universalSpherical.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(universalSpherical.R_rel_ia1,universalSpherical.R_rel_ia2);
//   universalSpherical.frame_ia.r_0[1] = universalSpherical.frame_a.r_0[1];
//   universalSpherical.frame_ia.r_0[2] = universalSpherical.frame_a.r_0[2];
//   universalSpherical.frame_ia.r_0[3] = universalSpherical.frame_a.r_0[3];
//   universalSpherical.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(universalSpherical.frame_a.R,universalSpherical.R_rel_ia);
//   universalSpherical.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(universalSpherical.R_rel_ia,{universalSpherical.frame_ia.f[1],universalSpherical.frame_ia.f[2],universalSpherical.frame_ia.f[3]});
//   universalSpherical.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(universalSpherical.R_rel_ia,{universalSpherical.frame_ia.t[1],universalSpherical.frame_ia.t[2],universalSpherical.frame_ia.t[3]});
//   universalSpherical.f_b_a1[1] = ((-universalSpherical.n1_a[1]) * universalSpherical.t_ia_a[1] + ((-universalSpherical.n1_a[2]) * universalSpherical.t_ia_a[2] + (-universalSpherical.n1_a[3]) * universalSpherical.t_ia_a[3])) * (universalSpherical.e2_a[1] * 1.0 / universalSpherical.rodLength / (universalSpherical.n1_a[1] * universalSpherical.e3_a[1] + (universalSpherical.n1_a[2] * universalSpherical.e3_a[2] + universalSpherical.n1_a[3] * universalSpherical.e3_a[3]))) + (universalSpherical.e2_a[1] * universalSpherical.t_ia_a[1] + (universalSpherical.e2_a[2] * universalSpherical.t_ia_a[2] + universalSpherical.e2_a[3] * universalSpherical.t_ia_a[3])) * universalSpherical.e3_a[1] / universalSpherical.rodLength;
//   universalSpherical.f_b_a1[2] = ((-universalSpherical.n1_a[1]) * universalSpherical.t_ia_a[1] + ((-universalSpherical.n1_a[2]) * universalSpherical.t_ia_a[2] + (-universalSpherical.n1_a[3]) * universalSpherical.t_ia_a[3])) * (universalSpherical.e2_a[2] * 1.0 / universalSpherical.rodLength / (universalSpherical.n1_a[1] * universalSpherical.e3_a[1] + (universalSpherical.n1_a[2] * universalSpherical.e3_a[2] + universalSpherical.n1_a[3] * universalSpherical.e3_a[3]))) + (universalSpherical.e2_a[1] * universalSpherical.t_ia_a[1] + (universalSpherical.e2_a[2] * universalSpherical.t_ia_a[2] + universalSpherical.e2_a[3] * universalSpherical.t_ia_a[3])) * universalSpherical.e3_a[2] / universalSpherical.rodLength;
//   universalSpherical.f_b_a1[3] = ((-universalSpherical.n1_a[1]) * universalSpherical.t_ia_a[1] + ((-universalSpherical.n1_a[2]) * universalSpherical.t_ia_a[2] + (-universalSpherical.n1_a[3]) * universalSpherical.t_ia_a[3])) * (universalSpherical.e2_a[3] * 1.0 / universalSpherical.rodLength / (universalSpherical.n1_a[1] * universalSpherical.e3_a[1] + (universalSpherical.n1_a[2] * universalSpherical.e3_a[2] + universalSpherical.n1_a[3] * universalSpherical.e3_a[3]))) + (universalSpherical.e2_a[1] * universalSpherical.t_ia_a[1] + (universalSpherical.e2_a[2] * universalSpherical.t_ia_a[2] + universalSpherical.e2_a[3] * universalSpherical.t_ia_a[3])) * universalSpherical.e3_a[3] / universalSpherical.rodLength;
//   universalSpherical.f_b_a[1] = (-universalSpherical.f_rod) * universalSpherical.eRod_a[1] + universalSpherical.f_b_a1[1];
//   universalSpherical.f_b_a[2] = (-universalSpherical.f_rod) * universalSpherical.eRod_a[2] + universalSpherical.f_b_a1[2];
//   universalSpherical.f_b_a[3] = (-universalSpherical.f_rod) * universalSpherical.eRod_a[3] + universalSpherical.f_b_a1[3];
//   universalSpherical.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({universalSpherical.f_b_a[1],universalSpherical.f_b_a[2],universalSpherical.f_b_a[3]},universalSpherical.frame_a.R,universalSpherical.frame_b.R);
//   universalSpherical.frame_b.t[1] = 0.0;
//   universalSpherical.frame_b.t[2] = 0.0;
//   universalSpherical.frame_b.t[3] = 0.0;
//   0.0 = universalSpherical.frame_a.f[1] + (universalSpherical.f_b_a[1] + universalSpherical.f_ia_a[1]);
//   0.0 = universalSpherical.frame_a.f[2] + (universalSpherical.f_b_a[2] + universalSpherical.f_ia_a[2]);
//   0.0 = universalSpherical.frame_a.f[3] + (universalSpherical.f_b_a[3] + universalSpherical.f_ia_a[3]);
//   0.0 = universalSpherical.frame_a.t[1] + (universalSpherical.t_ia_a[1] + (universalSpherical.rRod_a[2] * universalSpherical.f_b_a[3] + (-universalSpherical.rRod_a[3] * universalSpherical.f_b_a[2])));
//   0.0 = universalSpherical.frame_a.t[2] + (universalSpherical.t_ia_a[2] + (universalSpherical.rRod_a[3] * universalSpherical.f_b_a[1] + (-universalSpherical.rRod_a[1] * universalSpherical.f_b_a[3])));
//   0.0 = universalSpherical.frame_a.t[3] + (universalSpherical.t_ia_a[3] + (universalSpherical.rRod_a[1] * universalSpherical.f_b_a[2] + (-universalSpherical.rRod_a[2] * universalSpherical.f_b_a[1])));
//   universalSpherical.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   b3.frame_b.r_0 = b3.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(b3.frame_a.R,{b3.r[1],b3.r[2],b3.r[3]});
//   b3.frame_b.R.T[1,1] = b3.frame_a.R.T[1,1];
//   b3.frame_b.R.T[1,2] = b3.frame_a.R.T[1,2];
//   b3.frame_b.R.T[1,3] = b3.frame_a.R.T[1,3];
//   b3.frame_b.R.T[2,1] = b3.frame_a.R.T[2,1];
//   b3.frame_b.R.T[2,2] = b3.frame_a.R.T[2,2];
//   b3.frame_b.R.T[2,3] = b3.frame_a.R.T[2,3];
//   b3.frame_b.R.T[3,1] = b3.frame_a.R.T[3,1];
//   b3.frame_b.R.T[3,2] = b3.frame_a.R.T[3,2];
//   b3.frame_b.R.T[3,3] = b3.frame_a.R.T[3,3];
//   b3.frame_b.R.w[1] = b3.frame_a.R.w[1];
//   b3.frame_b.R.w[2] = b3.frame_a.R.w[2];
//   b3.frame_b.R.w[3] = b3.frame_a.R.w[3];
//   0.0 = b3.frame_a.f[1] + b3.frame_b.f[1];
//   0.0 = b3.frame_a.f[2] + b3.frame_b.f[2];
//   0.0 = b3.frame_a.f[3] + b3.frame_b.f[3];
//   0.0 = b3.frame_a.t[1] + (b3.frame_b.t[1] + (b3.r[2] * b3.frame_b.f[3] + (-b3.r[3] * b3.frame_b.f[2])));
//   0.0 = b3.frame_a.t[2] + (b3.frame_b.t[2] + (b3.r[3] * b3.frame_b.f[1] + (-b3.r[1] * b3.frame_b.f[3])));
//   0.0 = b3.frame_a.t[3] + (b3.frame_b.t[3] + (b3.r[1] * b3.frame_b.f[2] + (-b3.r[2] * b3.frame_b.f[1])));
//   fixedFrame.x_arrowLine.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.x_arrowLine.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.x_arrowLine.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.x_arrowLine.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.x_arrowLine.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.x_arrowLine.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.x_arrowLine.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.x_arrowLine.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.x_arrowLine.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.x_arrowLine.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.x_arrowLine.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.x_arrowLine.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.x_arrowLine.shapeType);
//   fixedFrame.x_arrowLine.rxvisobj[1] = fixedFrame.x_arrowLine.R.T[1,1] * fixedFrame.x_arrowLine.e_x[1] + (fixedFrame.x_arrowLine.R.T[2,1] * fixedFrame.x_arrowLine.e_x[2] + fixedFrame.x_arrowLine.R.T[3,1] * fixedFrame.x_arrowLine.e_x[3]);
//   fixedFrame.x_arrowLine.rxvisobj[2] = fixedFrame.x_arrowLine.R.T[1,2] * fixedFrame.x_arrowLine.e_x[1] + (fixedFrame.x_arrowLine.R.T[2,2] * fixedFrame.x_arrowLine.e_x[2] + fixedFrame.x_arrowLine.R.T[3,2] * fixedFrame.x_arrowLine.e_x[3]);
//   fixedFrame.x_arrowLine.rxvisobj[3] = fixedFrame.x_arrowLine.R.T[1,3] * fixedFrame.x_arrowLine.e_x[1] + (fixedFrame.x_arrowLine.R.T[2,3] * fixedFrame.x_arrowLine.e_x[2] + fixedFrame.x_arrowLine.R.T[3,3] * fixedFrame.x_arrowLine.e_x[3]);
//   fixedFrame.x_arrowLine.ryvisobj[1] = fixedFrame.x_arrowLine.R.T[1,1] * fixedFrame.x_arrowLine.e_y[1] + (fixedFrame.x_arrowLine.R.T[2,1] * fixedFrame.x_arrowLine.e_y[2] + fixedFrame.x_arrowLine.R.T[3,1] * fixedFrame.x_arrowLine.e_y[3]);
//   fixedFrame.x_arrowLine.ryvisobj[2] = fixedFrame.x_arrowLine.R.T[1,2] * fixedFrame.x_arrowLine.e_y[1] + (fixedFrame.x_arrowLine.R.T[2,2] * fixedFrame.x_arrowLine.e_y[2] + fixedFrame.x_arrowLine.R.T[3,2] * fixedFrame.x_arrowLine.e_y[3]);
//   fixedFrame.x_arrowLine.ryvisobj[3] = fixedFrame.x_arrowLine.R.T[1,3] * fixedFrame.x_arrowLine.e_y[1] + (fixedFrame.x_arrowLine.R.T[2,3] * fixedFrame.x_arrowLine.e_y[2] + fixedFrame.x_arrowLine.R.T[3,3] * fixedFrame.x_arrowLine.e_y[3]);
//   fixedFrame.x_arrowLine.rvisobj = fixedFrame.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_arrowLine.R.T[1,1],fixedFrame.x_arrowLine.R.T[1,2],fixedFrame.x_arrowLine.R.T[1,3]},{fixedFrame.x_arrowLine.R.T[2,1],fixedFrame.x_arrowLine.R.T[2,2],fixedFrame.x_arrowLine.R.T[2,3]},{fixedFrame.x_arrowLine.R.T[3,1],fixedFrame.x_arrowLine.R.T[3,2],fixedFrame.x_arrowLine.R.T[3,3]}},{fixedFrame.x_arrowLine.r_shape[1],fixedFrame.x_arrowLine.r_shape[2],fixedFrame.x_arrowLine.r_shape[3]});
//   fixedFrame.x_arrowLine.size[1] = fixedFrame.x_arrowLine.length;
//   fixedFrame.x_arrowLine.size[2] = fixedFrame.x_arrowLine.width;
//   fixedFrame.x_arrowLine.size[3] = fixedFrame.x_arrowLine.height;
//   fixedFrame.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.x_arrowLine.color[1] / 255.0,fixedFrame.x_arrowLine.color[2] / 255.0,fixedFrame.x_arrowLine.color[3] / 255.0,fixedFrame.x_arrowLine.specularCoefficient);
//   fixedFrame.x_arrowLine.Extra = fixedFrame.x_arrowLine.extra;
//   fixedFrame.x_arrowHead.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.x_arrowHead.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.x_arrowHead.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.x_arrowHead.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.x_arrowHead.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.x_arrowHead.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.x_arrowHead.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.x_arrowHead.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.x_arrowHead.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.x_arrowHead.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.x_arrowHead.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.x_arrowHead.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.x_arrowHead.shapeType);
//   fixedFrame.x_arrowHead.rxvisobj[1] = fixedFrame.x_arrowHead.R.T[1,1] * fixedFrame.x_arrowHead.e_x[1] + (fixedFrame.x_arrowHead.R.T[2,1] * fixedFrame.x_arrowHead.e_x[2] + fixedFrame.x_arrowHead.R.T[3,1] * fixedFrame.x_arrowHead.e_x[3]);
//   fixedFrame.x_arrowHead.rxvisobj[2] = fixedFrame.x_arrowHead.R.T[1,2] * fixedFrame.x_arrowHead.e_x[1] + (fixedFrame.x_arrowHead.R.T[2,2] * fixedFrame.x_arrowHead.e_x[2] + fixedFrame.x_arrowHead.R.T[3,2] * fixedFrame.x_arrowHead.e_x[3]);
//   fixedFrame.x_arrowHead.rxvisobj[3] = fixedFrame.x_arrowHead.R.T[1,3] * fixedFrame.x_arrowHead.e_x[1] + (fixedFrame.x_arrowHead.R.T[2,3] * fixedFrame.x_arrowHead.e_x[2] + fixedFrame.x_arrowHead.R.T[3,3] * fixedFrame.x_arrowHead.e_x[3]);
//   fixedFrame.x_arrowHead.ryvisobj[1] = fixedFrame.x_arrowHead.R.T[1,1] * fixedFrame.x_arrowHead.e_y[1] + (fixedFrame.x_arrowHead.R.T[2,1] * fixedFrame.x_arrowHead.e_y[2] + fixedFrame.x_arrowHead.R.T[3,1] * fixedFrame.x_arrowHead.e_y[3]);
//   fixedFrame.x_arrowHead.ryvisobj[2] = fixedFrame.x_arrowHead.R.T[1,2] * fixedFrame.x_arrowHead.e_y[1] + (fixedFrame.x_arrowHead.R.T[2,2] * fixedFrame.x_arrowHead.e_y[2] + fixedFrame.x_arrowHead.R.T[3,2] * fixedFrame.x_arrowHead.e_y[3]);
//   fixedFrame.x_arrowHead.ryvisobj[3] = fixedFrame.x_arrowHead.R.T[1,3] * fixedFrame.x_arrowHead.e_y[1] + (fixedFrame.x_arrowHead.R.T[2,3] * fixedFrame.x_arrowHead.e_y[2] + fixedFrame.x_arrowHead.R.T[3,3] * fixedFrame.x_arrowHead.e_y[3]);
//   fixedFrame.x_arrowHead.rvisobj = fixedFrame.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_arrowHead.R.T[1,1],fixedFrame.x_arrowHead.R.T[1,2],fixedFrame.x_arrowHead.R.T[1,3]},{fixedFrame.x_arrowHead.R.T[2,1],fixedFrame.x_arrowHead.R.T[2,2],fixedFrame.x_arrowHead.R.T[2,3]},{fixedFrame.x_arrowHead.R.T[3,1],fixedFrame.x_arrowHead.R.T[3,2],fixedFrame.x_arrowHead.R.T[3,3]}},{fixedFrame.x_arrowHead.r_shape[1],fixedFrame.x_arrowHead.r_shape[2],fixedFrame.x_arrowHead.r_shape[3]});
//   fixedFrame.x_arrowHead.size[1] = fixedFrame.x_arrowHead.length;
//   fixedFrame.x_arrowHead.size[2] = fixedFrame.x_arrowHead.width;
//   fixedFrame.x_arrowHead.size[3] = fixedFrame.x_arrowHead.height;
//   fixedFrame.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.x_arrowHead.color[1] / 255.0,fixedFrame.x_arrowHead.color[2] / 255.0,fixedFrame.x_arrowHead.color[3] / 255.0,fixedFrame.x_arrowHead.specularCoefficient);
//   fixedFrame.x_arrowHead.Extra = fixedFrame.x_arrowHead.extra;
//   fixedFrame.x_label.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.x_label.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.x_label.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.x_label.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.x_label.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.x_label.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.x_label.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.x_label.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.x_label.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.x_label.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.x_label.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.x_label.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.x_label.cylinders[1].R.T[1,1] = fixedFrame.x_label.R.T[1,1];
//   fixedFrame.x_label.cylinders[1].R.T[1,2] = fixedFrame.x_label.R.T[1,2];
//   fixedFrame.x_label.cylinders[1].R.T[1,3] = fixedFrame.x_label.R.T[1,3];
//   fixedFrame.x_label.cylinders[1].R.T[2,1] = fixedFrame.x_label.R.T[2,1];
//   fixedFrame.x_label.cylinders[1].R.T[2,2] = fixedFrame.x_label.R.T[2,2];
//   fixedFrame.x_label.cylinders[1].R.T[2,3] = fixedFrame.x_label.R.T[2,3];
//   fixedFrame.x_label.cylinders[1].R.T[3,1] = fixedFrame.x_label.R.T[3,1];
//   fixedFrame.x_label.cylinders[1].R.T[3,2] = fixedFrame.x_label.R.T[3,2];
//   fixedFrame.x_label.cylinders[1].R.T[3,3] = fixedFrame.x_label.R.T[3,3];
//   fixedFrame.x_label.cylinders[1].R.w[1] = fixedFrame.x_label.R.w[1];
//   fixedFrame.x_label.cylinders[1].R.w[2] = fixedFrame.x_label.R.w[2];
//   fixedFrame.x_label.cylinders[1].R.w[3] = fixedFrame.x_label.R.w[3];
//   fixedFrame.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.x_label.cylinders[1].shapeType);
//   fixedFrame.x_label.cylinders[1].rxvisobj[1] = fixedFrame.x_label.cylinders[1].R.T[1,1] * fixedFrame.x_label.cylinders[1].e_x[1] + (fixedFrame.x_label.cylinders[1].R.T[2,1] * fixedFrame.x_label.cylinders[1].e_x[2] + fixedFrame.x_label.cylinders[1].R.T[3,1] * fixedFrame.x_label.cylinders[1].e_x[3]);
//   fixedFrame.x_label.cylinders[1].rxvisobj[2] = fixedFrame.x_label.cylinders[1].R.T[1,2] * fixedFrame.x_label.cylinders[1].e_x[1] + (fixedFrame.x_label.cylinders[1].R.T[2,2] * fixedFrame.x_label.cylinders[1].e_x[2] + fixedFrame.x_label.cylinders[1].R.T[3,2] * fixedFrame.x_label.cylinders[1].e_x[3]);
//   fixedFrame.x_label.cylinders[1].rxvisobj[3] = fixedFrame.x_label.cylinders[1].R.T[1,3] * fixedFrame.x_label.cylinders[1].e_x[1] + (fixedFrame.x_label.cylinders[1].R.T[2,3] * fixedFrame.x_label.cylinders[1].e_x[2] + fixedFrame.x_label.cylinders[1].R.T[3,3] * fixedFrame.x_label.cylinders[1].e_x[3]);
//   fixedFrame.x_label.cylinders[1].ryvisobj[1] = fixedFrame.x_label.cylinders[1].R.T[1,1] * fixedFrame.x_label.cylinders[1].e_y[1] + (fixedFrame.x_label.cylinders[1].R.T[2,1] * fixedFrame.x_label.cylinders[1].e_y[2] + fixedFrame.x_label.cylinders[1].R.T[3,1] * fixedFrame.x_label.cylinders[1].e_y[3]);
//   fixedFrame.x_label.cylinders[1].ryvisobj[2] = fixedFrame.x_label.cylinders[1].R.T[1,2] * fixedFrame.x_label.cylinders[1].e_y[1] + (fixedFrame.x_label.cylinders[1].R.T[2,2] * fixedFrame.x_label.cylinders[1].e_y[2] + fixedFrame.x_label.cylinders[1].R.T[3,2] * fixedFrame.x_label.cylinders[1].e_y[3]);
//   fixedFrame.x_label.cylinders[1].ryvisobj[3] = fixedFrame.x_label.cylinders[1].R.T[1,3] * fixedFrame.x_label.cylinders[1].e_y[1] + (fixedFrame.x_label.cylinders[1].R.T[2,3] * fixedFrame.x_label.cylinders[1].e_y[2] + fixedFrame.x_label.cylinders[1].R.T[3,3] * fixedFrame.x_label.cylinders[1].e_y[3]);
//   fixedFrame.x_label.cylinders[1].rvisobj = fixedFrame.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.cylinders[1].R.T[1,1],fixedFrame.x_label.cylinders[1].R.T[1,2],fixedFrame.x_label.cylinders[1].R.T[1,3]},{fixedFrame.x_label.cylinders[1].R.T[2,1],fixedFrame.x_label.cylinders[1].R.T[2,2],fixedFrame.x_label.cylinders[1].R.T[2,3]},{fixedFrame.x_label.cylinders[1].R.T[3,1],fixedFrame.x_label.cylinders[1].R.T[3,2],fixedFrame.x_label.cylinders[1].R.T[3,3]}},{fixedFrame.x_label.cylinders[1].r_shape[1],fixedFrame.x_label.cylinders[1].r_shape[2],fixedFrame.x_label.cylinders[1].r_shape[3]});
//   fixedFrame.x_label.cylinders[1].size[1] = fixedFrame.x_label.cylinders[1].length;
//   fixedFrame.x_label.cylinders[1].size[2] = fixedFrame.x_label.cylinders[1].width;
//   fixedFrame.x_label.cylinders[1].size[3] = fixedFrame.x_label.cylinders[1].height;
//   fixedFrame.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.x_label.cylinders[1].color[1] / 255.0,fixedFrame.x_label.cylinders[1].color[2] / 255.0,fixedFrame.x_label.cylinders[1].color[3] / 255.0,fixedFrame.x_label.cylinders[1].specularCoefficient);
//   fixedFrame.x_label.cylinders[1].Extra = fixedFrame.x_label.cylinders[1].extra;
//   fixedFrame.x_label.cylinders[2].R.T[1,1] = fixedFrame.x_label.R.T[1,1];
//   fixedFrame.x_label.cylinders[2].R.T[1,2] = fixedFrame.x_label.R.T[1,2];
//   fixedFrame.x_label.cylinders[2].R.T[1,3] = fixedFrame.x_label.R.T[1,3];
//   fixedFrame.x_label.cylinders[2].R.T[2,1] = fixedFrame.x_label.R.T[2,1];
//   fixedFrame.x_label.cylinders[2].R.T[2,2] = fixedFrame.x_label.R.T[2,2];
//   fixedFrame.x_label.cylinders[2].R.T[2,3] = fixedFrame.x_label.R.T[2,3];
//   fixedFrame.x_label.cylinders[2].R.T[3,1] = fixedFrame.x_label.R.T[3,1];
//   fixedFrame.x_label.cylinders[2].R.T[3,2] = fixedFrame.x_label.R.T[3,2];
//   fixedFrame.x_label.cylinders[2].R.T[3,3] = fixedFrame.x_label.R.T[3,3];
//   fixedFrame.x_label.cylinders[2].R.w[1] = fixedFrame.x_label.R.w[1];
//   fixedFrame.x_label.cylinders[2].R.w[2] = fixedFrame.x_label.R.w[2];
//   fixedFrame.x_label.cylinders[2].R.w[3] = fixedFrame.x_label.R.w[3];
//   fixedFrame.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.x_label.cylinders[2].shapeType);
//   fixedFrame.x_label.cylinders[2].rxvisobj[1] = fixedFrame.x_label.cylinders[2].R.T[1,1] * fixedFrame.x_label.cylinders[2].e_x[1] + (fixedFrame.x_label.cylinders[2].R.T[2,1] * fixedFrame.x_label.cylinders[2].e_x[2] + fixedFrame.x_label.cylinders[2].R.T[3,1] * fixedFrame.x_label.cylinders[2].e_x[3]);
//   fixedFrame.x_label.cylinders[2].rxvisobj[2] = fixedFrame.x_label.cylinders[2].R.T[1,2] * fixedFrame.x_label.cylinders[2].e_x[1] + (fixedFrame.x_label.cylinders[2].R.T[2,2] * fixedFrame.x_label.cylinders[2].e_x[2] + fixedFrame.x_label.cylinders[2].R.T[3,2] * fixedFrame.x_label.cylinders[2].e_x[3]);
//   fixedFrame.x_label.cylinders[2].rxvisobj[3] = fixedFrame.x_label.cylinders[2].R.T[1,3] * fixedFrame.x_label.cylinders[2].e_x[1] + (fixedFrame.x_label.cylinders[2].R.T[2,3] * fixedFrame.x_label.cylinders[2].e_x[2] + fixedFrame.x_label.cylinders[2].R.T[3,3] * fixedFrame.x_label.cylinders[2].e_x[3]);
//   fixedFrame.x_label.cylinders[2].ryvisobj[1] = fixedFrame.x_label.cylinders[2].R.T[1,1] * fixedFrame.x_label.cylinders[2].e_y[1] + (fixedFrame.x_label.cylinders[2].R.T[2,1] * fixedFrame.x_label.cylinders[2].e_y[2] + fixedFrame.x_label.cylinders[2].R.T[3,1] * fixedFrame.x_label.cylinders[2].e_y[3]);
//   fixedFrame.x_label.cylinders[2].ryvisobj[2] = fixedFrame.x_label.cylinders[2].R.T[1,2] * fixedFrame.x_label.cylinders[2].e_y[1] + (fixedFrame.x_label.cylinders[2].R.T[2,2] * fixedFrame.x_label.cylinders[2].e_y[2] + fixedFrame.x_label.cylinders[2].R.T[3,2] * fixedFrame.x_label.cylinders[2].e_y[3]);
//   fixedFrame.x_label.cylinders[2].ryvisobj[3] = fixedFrame.x_label.cylinders[2].R.T[1,3] * fixedFrame.x_label.cylinders[2].e_y[1] + (fixedFrame.x_label.cylinders[2].R.T[2,3] * fixedFrame.x_label.cylinders[2].e_y[2] + fixedFrame.x_label.cylinders[2].R.T[3,3] * fixedFrame.x_label.cylinders[2].e_y[3]);
//   fixedFrame.x_label.cylinders[2].rvisobj = fixedFrame.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.x_label.cylinders[2].R.T[1,1],fixedFrame.x_label.cylinders[2].R.T[1,2],fixedFrame.x_label.cylinders[2].R.T[1,3]},{fixedFrame.x_label.cylinders[2].R.T[2,1],fixedFrame.x_label.cylinders[2].R.T[2,2],fixedFrame.x_label.cylinders[2].R.T[2,3]},{fixedFrame.x_label.cylinders[2].R.T[3,1],fixedFrame.x_label.cylinders[2].R.T[3,2],fixedFrame.x_label.cylinders[2].R.T[3,3]}},{fixedFrame.x_label.cylinders[2].r_shape[1],fixedFrame.x_label.cylinders[2].r_shape[2],fixedFrame.x_label.cylinders[2].r_shape[3]});
//   fixedFrame.x_label.cylinders[2].size[1] = fixedFrame.x_label.cylinders[2].length;
//   fixedFrame.x_label.cylinders[2].size[2] = fixedFrame.x_label.cylinders[2].width;
//   fixedFrame.x_label.cylinders[2].size[3] = fixedFrame.x_label.cylinders[2].height;
//   fixedFrame.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.x_label.cylinders[2].color[1] / 255.0,fixedFrame.x_label.cylinders[2].color[2] / 255.0,fixedFrame.x_label.cylinders[2].color[3] / 255.0,fixedFrame.x_label.cylinders[2].specularCoefficient);
//   fixedFrame.x_label.cylinders[2].Extra = fixedFrame.x_label.cylinders[2].extra;
//   fixedFrame.y_arrowLine.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.y_arrowLine.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.y_arrowLine.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.y_arrowLine.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.y_arrowLine.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.y_arrowLine.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.y_arrowLine.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.y_arrowLine.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.y_arrowLine.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.y_arrowLine.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.y_arrowLine.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.y_arrowLine.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.y_arrowLine.shapeType);
//   fixedFrame.y_arrowLine.rxvisobj[1] = fixedFrame.y_arrowLine.R.T[1,1] * fixedFrame.y_arrowLine.e_x[1] + (fixedFrame.y_arrowLine.R.T[2,1] * fixedFrame.y_arrowLine.e_x[2] + fixedFrame.y_arrowLine.R.T[3,1] * fixedFrame.y_arrowLine.e_x[3]);
//   fixedFrame.y_arrowLine.rxvisobj[2] = fixedFrame.y_arrowLine.R.T[1,2] * fixedFrame.y_arrowLine.e_x[1] + (fixedFrame.y_arrowLine.R.T[2,2] * fixedFrame.y_arrowLine.e_x[2] + fixedFrame.y_arrowLine.R.T[3,2] * fixedFrame.y_arrowLine.e_x[3]);
//   fixedFrame.y_arrowLine.rxvisobj[3] = fixedFrame.y_arrowLine.R.T[1,3] * fixedFrame.y_arrowLine.e_x[1] + (fixedFrame.y_arrowLine.R.T[2,3] * fixedFrame.y_arrowLine.e_x[2] + fixedFrame.y_arrowLine.R.T[3,3] * fixedFrame.y_arrowLine.e_x[3]);
//   fixedFrame.y_arrowLine.ryvisobj[1] = fixedFrame.y_arrowLine.R.T[1,1] * fixedFrame.y_arrowLine.e_y[1] + (fixedFrame.y_arrowLine.R.T[2,1] * fixedFrame.y_arrowLine.e_y[2] + fixedFrame.y_arrowLine.R.T[3,1] * fixedFrame.y_arrowLine.e_y[3]);
//   fixedFrame.y_arrowLine.ryvisobj[2] = fixedFrame.y_arrowLine.R.T[1,2] * fixedFrame.y_arrowLine.e_y[1] + (fixedFrame.y_arrowLine.R.T[2,2] * fixedFrame.y_arrowLine.e_y[2] + fixedFrame.y_arrowLine.R.T[3,2] * fixedFrame.y_arrowLine.e_y[3]);
//   fixedFrame.y_arrowLine.ryvisobj[3] = fixedFrame.y_arrowLine.R.T[1,3] * fixedFrame.y_arrowLine.e_y[1] + (fixedFrame.y_arrowLine.R.T[2,3] * fixedFrame.y_arrowLine.e_y[2] + fixedFrame.y_arrowLine.R.T[3,3] * fixedFrame.y_arrowLine.e_y[3]);
//   fixedFrame.y_arrowLine.rvisobj = fixedFrame.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_arrowLine.R.T[1,1],fixedFrame.y_arrowLine.R.T[1,2],fixedFrame.y_arrowLine.R.T[1,3]},{fixedFrame.y_arrowLine.R.T[2,1],fixedFrame.y_arrowLine.R.T[2,2],fixedFrame.y_arrowLine.R.T[2,3]},{fixedFrame.y_arrowLine.R.T[3,1],fixedFrame.y_arrowLine.R.T[3,2],fixedFrame.y_arrowLine.R.T[3,3]}},{fixedFrame.y_arrowLine.r_shape[1],fixedFrame.y_arrowLine.r_shape[2],fixedFrame.y_arrowLine.r_shape[3]});
//   fixedFrame.y_arrowLine.size[1] = fixedFrame.y_arrowLine.length;
//   fixedFrame.y_arrowLine.size[2] = fixedFrame.y_arrowLine.width;
//   fixedFrame.y_arrowLine.size[3] = fixedFrame.y_arrowLine.height;
//   fixedFrame.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.y_arrowLine.color[1] / 255.0,fixedFrame.y_arrowLine.color[2] / 255.0,fixedFrame.y_arrowLine.color[3] / 255.0,fixedFrame.y_arrowLine.specularCoefficient);
//   fixedFrame.y_arrowLine.Extra = fixedFrame.y_arrowLine.extra;
//   fixedFrame.y_arrowHead.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.y_arrowHead.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.y_arrowHead.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.y_arrowHead.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.y_arrowHead.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.y_arrowHead.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.y_arrowHead.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.y_arrowHead.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.y_arrowHead.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.y_arrowHead.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.y_arrowHead.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.y_arrowHead.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.y_arrowHead.shapeType);
//   fixedFrame.y_arrowHead.rxvisobj[1] = fixedFrame.y_arrowHead.R.T[1,1] * fixedFrame.y_arrowHead.e_x[1] + (fixedFrame.y_arrowHead.R.T[2,1] * fixedFrame.y_arrowHead.e_x[2] + fixedFrame.y_arrowHead.R.T[3,1] * fixedFrame.y_arrowHead.e_x[3]);
//   fixedFrame.y_arrowHead.rxvisobj[2] = fixedFrame.y_arrowHead.R.T[1,2] * fixedFrame.y_arrowHead.e_x[1] + (fixedFrame.y_arrowHead.R.T[2,2] * fixedFrame.y_arrowHead.e_x[2] + fixedFrame.y_arrowHead.R.T[3,2] * fixedFrame.y_arrowHead.e_x[3]);
//   fixedFrame.y_arrowHead.rxvisobj[3] = fixedFrame.y_arrowHead.R.T[1,3] * fixedFrame.y_arrowHead.e_x[1] + (fixedFrame.y_arrowHead.R.T[2,3] * fixedFrame.y_arrowHead.e_x[2] + fixedFrame.y_arrowHead.R.T[3,3] * fixedFrame.y_arrowHead.e_x[3]);
//   fixedFrame.y_arrowHead.ryvisobj[1] = fixedFrame.y_arrowHead.R.T[1,1] * fixedFrame.y_arrowHead.e_y[1] + (fixedFrame.y_arrowHead.R.T[2,1] * fixedFrame.y_arrowHead.e_y[2] + fixedFrame.y_arrowHead.R.T[3,1] * fixedFrame.y_arrowHead.e_y[3]);
//   fixedFrame.y_arrowHead.ryvisobj[2] = fixedFrame.y_arrowHead.R.T[1,2] * fixedFrame.y_arrowHead.e_y[1] + (fixedFrame.y_arrowHead.R.T[2,2] * fixedFrame.y_arrowHead.e_y[2] + fixedFrame.y_arrowHead.R.T[3,2] * fixedFrame.y_arrowHead.e_y[3]);
//   fixedFrame.y_arrowHead.ryvisobj[3] = fixedFrame.y_arrowHead.R.T[1,3] * fixedFrame.y_arrowHead.e_y[1] + (fixedFrame.y_arrowHead.R.T[2,3] * fixedFrame.y_arrowHead.e_y[2] + fixedFrame.y_arrowHead.R.T[3,3] * fixedFrame.y_arrowHead.e_y[3]);
//   fixedFrame.y_arrowHead.rvisobj = fixedFrame.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_arrowHead.R.T[1,1],fixedFrame.y_arrowHead.R.T[1,2],fixedFrame.y_arrowHead.R.T[1,3]},{fixedFrame.y_arrowHead.R.T[2,1],fixedFrame.y_arrowHead.R.T[2,2],fixedFrame.y_arrowHead.R.T[2,3]},{fixedFrame.y_arrowHead.R.T[3,1],fixedFrame.y_arrowHead.R.T[3,2],fixedFrame.y_arrowHead.R.T[3,3]}},{fixedFrame.y_arrowHead.r_shape[1],fixedFrame.y_arrowHead.r_shape[2],fixedFrame.y_arrowHead.r_shape[3]});
//   fixedFrame.y_arrowHead.size[1] = fixedFrame.y_arrowHead.length;
//   fixedFrame.y_arrowHead.size[2] = fixedFrame.y_arrowHead.width;
//   fixedFrame.y_arrowHead.size[3] = fixedFrame.y_arrowHead.height;
//   fixedFrame.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.y_arrowHead.color[1] / 255.0,fixedFrame.y_arrowHead.color[2] / 255.0,fixedFrame.y_arrowHead.color[3] / 255.0,fixedFrame.y_arrowHead.specularCoefficient);
//   fixedFrame.y_arrowHead.Extra = fixedFrame.y_arrowHead.extra;
//   fixedFrame.y_label.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.y_label.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.y_label.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.y_label.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.y_label.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.y_label.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.y_label.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.y_label.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.y_label.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.y_label.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.y_label.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.y_label.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.y_label.cylinders[1].R.T[1,1] = fixedFrame.y_label.R.T[1,1];
//   fixedFrame.y_label.cylinders[1].R.T[1,2] = fixedFrame.y_label.R.T[1,2];
//   fixedFrame.y_label.cylinders[1].R.T[1,3] = fixedFrame.y_label.R.T[1,3];
//   fixedFrame.y_label.cylinders[1].R.T[2,1] = fixedFrame.y_label.R.T[2,1];
//   fixedFrame.y_label.cylinders[1].R.T[2,2] = fixedFrame.y_label.R.T[2,2];
//   fixedFrame.y_label.cylinders[1].R.T[2,3] = fixedFrame.y_label.R.T[2,3];
//   fixedFrame.y_label.cylinders[1].R.T[3,1] = fixedFrame.y_label.R.T[3,1];
//   fixedFrame.y_label.cylinders[1].R.T[3,2] = fixedFrame.y_label.R.T[3,2];
//   fixedFrame.y_label.cylinders[1].R.T[3,3] = fixedFrame.y_label.R.T[3,3];
//   fixedFrame.y_label.cylinders[1].R.w[1] = fixedFrame.y_label.R.w[1];
//   fixedFrame.y_label.cylinders[1].R.w[2] = fixedFrame.y_label.R.w[2];
//   fixedFrame.y_label.cylinders[1].R.w[3] = fixedFrame.y_label.R.w[3];
//   fixedFrame.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.y_label.cylinders[1].shapeType);
//   fixedFrame.y_label.cylinders[1].rxvisobj[1] = fixedFrame.y_label.cylinders[1].R.T[1,1] * fixedFrame.y_label.cylinders[1].e_x[1] + (fixedFrame.y_label.cylinders[1].R.T[2,1] * fixedFrame.y_label.cylinders[1].e_x[2] + fixedFrame.y_label.cylinders[1].R.T[3,1] * fixedFrame.y_label.cylinders[1].e_x[3]);
//   fixedFrame.y_label.cylinders[1].rxvisobj[2] = fixedFrame.y_label.cylinders[1].R.T[1,2] * fixedFrame.y_label.cylinders[1].e_x[1] + (fixedFrame.y_label.cylinders[1].R.T[2,2] * fixedFrame.y_label.cylinders[1].e_x[2] + fixedFrame.y_label.cylinders[1].R.T[3,2] * fixedFrame.y_label.cylinders[1].e_x[3]);
//   fixedFrame.y_label.cylinders[1].rxvisobj[3] = fixedFrame.y_label.cylinders[1].R.T[1,3] * fixedFrame.y_label.cylinders[1].e_x[1] + (fixedFrame.y_label.cylinders[1].R.T[2,3] * fixedFrame.y_label.cylinders[1].e_x[2] + fixedFrame.y_label.cylinders[1].R.T[3,3] * fixedFrame.y_label.cylinders[1].e_x[3]);
//   fixedFrame.y_label.cylinders[1].ryvisobj[1] = fixedFrame.y_label.cylinders[1].R.T[1,1] * fixedFrame.y_label.cylinders[1].e_y[1] + (fixedFrame.y_label.cylinders[1].R.T[2,1] * fixedFrame.y_label.cylinders[1].e_y[2] + fixedFrame.y_label.cylinders[1].R.T[3,1] * fixedFrame.y_label.cylinders[1].e_y[3]);
//   fixedFrame.y_label.cylinders[1].ryvisobj[2] = fixedFrame.y_label.cylinders[1].R.T[1,2] * fixedFrame.y_label.cylinders[1].e_y[1] + (fixedFrame.y_label.cylinders[1].R.T[2,2] * fixedFrame.y_label.cylinders[1].e_y[2] + fixedFrame.y_label.cylinders[1].R.T[3,2] * fixedFrame.y_label.cylinders[1].e_y[3]);
//   fixedFrame.y_label.cylinders[1].ryvisobj[3] = fixedFrame.y_label.cylinders[1].R.T[1,3] * fixedFrame.y_label.cylinders[1].e_y[1] + (fixedFrame.y_label.cylinders[1].R.T[2,3] * fixedFrame.y_label.cylinders[1].e_y[2] + fixedFrame.y_label.cylinders[1].R.T[3,3] * fixedFrame.y_label.cylinders[1].e_y[3]);
//   fixedFrame.y_label.cylinders[1].rvisobj = fixedFrame.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.cylinders[1].R.T[1,1],fixedFrame.y_label.cylinders[1].R.T[1,2],fixedFrame.y_label.cylinders[1].R.T[1,3]},{fixedFrame.y_label.cylinders[1].R.T[2,1],fixedFrame.y_label.cylinders[1].R.T[2,2],fixedFrame.y_label.cylinders[1].R.T[2,3]},{fixedFrame.y_label.cylinders[1].R.T[3,1],fixedFrame.y_label.cylinders[1].R.T[3,2],fixedFrame.y_label.cylinders[1].R.T[3,3]}},{fixedFrame.y_label.cylinders[1].r_shape[1],fixedFrame.y_label.cylinders[1].r_shape[2],fixedFrame.y_label.cylinders[1].r_shape[3]});
//   fixedFrame.y_label.cylinders[1].size[1] = fixedFrame.y_label.cylinders[1].length;
//   fixedFrame.y_label.cylinders[1].size[2] = fixedFrame.y_label.cylinders[1].width;
//   fixedFrame.y_label.cylinders[1].size[3] = fixedFrame.y_label.cylinders[1].height;
//   fixedFrame.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.y_label.cylinders[1].color[1] / 255.0,fixedFrame.y_label.cylinders[1].color[2] / 255.0,fixedFrame.y_label.cylinders[1].color[3] / 255.0,fixedFrame.y_label.cylinders[1].specularCoefficient);
//   fixedFrame.y_label.cylinders[1].Extra = fixedFrame.y_label.cylinders[1].extra;
//   fixedFrame.y_label.cylinders[2].R.T[1,1] = fixedFrame.y_label.R.T[1,1];
//   fixedFrame.y_label.cylinders[2].R.T[1,2] = fixedFrame.y_label.R.T[1,2];
//   fixedFrame.y_label.cylinders[2].R.T[1,3] = fixedFrame.y_label.R.T[1,3];
//   fixedFrame.y_label.cylinders[2].R.T[2,1] = fixedFrame.y_label.R.T[2,1];
//   fixedFrame.y_label.cylinders[2].R.T[2,2] = fixedFrame.y_label.R.T[2,2];
//   fixedFrame.y_label.cylinders[2].R.T[2,3] = fixedFrame.y_label.R.T[2,3];
//   fixedFrame.y_label.cylinders[2].R.T[3,1] = fixedFrame.y_label.R.T[3,1];
//   fixedFrame.y_label.cylinders[2].R.T[3,2] = fixedFrame.y_label.R.T[3,2];
//   fixedFrame.y_label.cylinders[2].R.T[3,3] = fixedFrame.y_label.R.T[3,3];
//   fixedFrame.y_label.cylinders[2].R.w[1] = fixedFrame.y_label.R.w[1];
//   fixedFrame.y_label.cylinders[2].R.w[2] = fixedFrame.y_label.R.w[2];
//   fixedFrame.y_label.cylinders[2].R.w[3] = fixedFrame.y_label.R.w[3];
//   fixedFrame.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.y_label.cylinders[2].shapeType);
//   fixedFrame.y_label.cylinders[2].rxvisobj[1] = fixedFrame.y_label.cylinders[2].R.T[1,1] * fixedFrame.y_label.cylinders[2].e_x[1] + (fixedFrame.y_label.cylinders[2].R.T[2,1] * fixedFrame.y_label.cylinders[2].e_x[2] + fixedFrame.y_label.cylinders[2].R.T[3,1] * fixedFrame.y_label.cylinders[2].e_x[3]);
//   fixedFrame.y_label.cylinders[2].rxvisobj[2] = fixedFrame.y_label.cylinders[2].R.T[1,2] * fixedFrame.y_label.cylinders[2].e_x[1] + (fixedFrame.y_label.cylinders[2].R.T[2,2] * fixedFrame.y_label.cylinders[2].e_x[2] + fixedFrame.y_label.cylinders[2].R.T[3,2] * fixedFrame.y_label.cylinders[2].e_x[3]);
//   fixedFrame.y_label.cylinders[2].rxvisobj[3] = fixedFrame.y_label.cylinders[2].R.T[1,3] * fixedFrame.y_label.cylinders[2].e_x[1] + (fixedFrame.y_label.cylinders[2].R.T[2,3] * fixedFrame.y_label.cylinders[2].e_x[2] + fixedFrame.y_label.cylinders[2].R.T[3,3] * fixedFrame.y_label.cylinders[2].e_x[3]);
//   fixedFrame.y_label.cylinders[2].ryvisobj[1] = fixedFrame.y_label.cylinders[2].R.T[1,1] * fixedFrame.y_label.cylinders[2].e_y[1] + (fixedFrame.y_label.cylinders[2].R.T[2,1] * fixedFrame.y_label.cylinders[2].e_y[2] + fixedFrame.y_label.cylinders[2].R.T[3,1] * fixedFrame.y_label.cylinders[2].e_y[3]);
//   fixedFrame.y_label.cylinders[2].ryvisobj[2] = fixedFrame.y_label.cylinders[2].R.T[1,2] * fixedFrame.y_label.cylinders[2].e_y[1] + (fixedFrame.y_label.cylinders[2].R.T[2,2] * fixedFrame.y_label.cylinders[2].e_y[2] + fixedFrame.y_label.cylinders[2].R.T[3,2] * fixedFrame.y_label.cylinders[2].e_y[3]);
//   fixedFrame.y_label.cylinders[2].ryvisobj[3] = fixedFrame.y_label.cylinders[2].R.T[1,3] * fixedFrame.y_label.cylinders[2].e_y[1] + (fixedFrame.y_label.cylinders[2].R.T[2,3] * fixedFrame.y_label.cylinders[2].e_y[2] + fixedFrame.y_label.cylinders[2].R.T[3,3] * fixedFrame.y_label.cylinders[2].e_y[3]);
//   fixedFrame.y_label.cylinders[2].rvisobj = fixedFrame.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.y_label.cylinders[2].R.T[1,1],fixedFrame.y_label.cylinders[2].R.T[1,2],fixedFrame.y_label.cylinders[2].R.T[1,3]},{fixedFrame.y_label.cylinders[2].R.T[2,1],fixedFrame.y_label.cylinders[2].R.T[2,2],fixedFrame.y_label.cylinders[2].R.T[2,3]},{fixedFrame.y_label.cylinders[2].R.T[3,1],fixedFrame.y_label.cylinders[2].R.T[3,2],fixedFrame.y_label.cylinders[2].R.T[3,3]}},{fixedFrame.y_label.cylinders[2].r_shape[1],fixedFrame.y_label.cylinders[2].r_shape[2],fixedFrame.y_label.cylinders[2].r_shape[3]});
//   fixedFrame.y_label.cylinders[2].size[1] = fixedFrame.y_label.cylinders[2].length;
//   fixedFrame.y_label.cylinders[2].size[2] = fixedFrame.y_label.cylinders[2].width;
//   fixedFrame.y_label.cylinders[2].size[3] = fixedFrame.y_label.cylinders[2].height;
//   fixedFrame.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.y_label.cylinders[2].color[1] / 255.0,fixedFrame.y_label.cylinders[2].color[2] / 255.0,fixedFrame.y_label.cylinders[2].color[3] / 255.0,fixedFrame.y_label.cylinders[2].specularCoefficient);
//   fixedFrame.y_label.cylinders[2].Extra = fixedFrame.y_label.cylinders[2].extra;
//   fixedFrame.z_arrowLine.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.z_arrowLine.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.z_arrowLine.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.z_arrowLine.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.z_arrowLine.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.z_arrowLine.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.z_arrowLine.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.z_arrowLine.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.z_arrowLine.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.z_arrowLine.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.z_arrowLine.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.z_arrowLine.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.z_arrowLine.shapeType);
//   fixedFrame.z_arrowLine.rxvisobj[1] = fixedFrame.z_arrowLine.R.T[1,1] * fixedFrame.z_arrowLine.e_x[1] + (fixedFrame.z_arrowLine.R.T[2,1] * fixedFrame.z_arrowLine.e_x[2] + fixedFrame.z_arrowLine.R.T[3,1] * fixedFrame.z_arrowLine.e_x[3]);
//   fixedFrame.z_arrowLine.rxvisobj[2] = fixedFrame.z_arrowLine.R.T[1,2] * fixedFrame.z_arrowLine.e_x[1] + (fixedFrame.z_arrowLine.R.T[2,2] * fixedFrame.z_arrowLine.e_x[2] + fixedFrame.z_arrowLine.R.T[3,2] * fixedFrame.z_arrowLine.e_x[3]);
//   fixedFrame.z_arrowLine.rxvisobj[3] = fixedFrame.z_arrowLine.R.T[1,3] * fixedFrame.z_arrowLine.e_x[1] + (fixedFrame.z_arrowLine.R.T[2,3] * fixedFrame.z_arrowLine.e_x[2] + fixedFrame.z_arrowLine.R.T[3,3] * fixedFrame.z_arrowLine.e_x[3]);
//   fixedFrame.z_arrowLine.ryvisobj[1] = fixedFrame.z_arrowLine.R.T[1,1] * fixedFrame.z_arrowLine.e_y[1] + (fixedFrame.z_arrowLine.R.T[2,1] * fixedFrame.z_arrowLine.e_y[2] + fixedFrame.z_arrowLine.R.T[3,1] * fixedFrame.z_arrowLine.e_y[3]);
//   fixedFrame.z_arrowLine.ryvisobj[2] = fixedFrame.z_arrowLine.R.T[1,2] * fixedFrame.z_arrowLine.e_y[1] + (fixedFrame.z_arrowLine.R.T[2,2] * fixedFrame.z_arrowLine.e_y[2] + fixedFrame.z_arrowLine.R.T[3,2] * fixedFrame.z_arrowLine.e_y[3]);
//   fixedFrame.z_arrowLine.ryvisobj[3] = fixedFrame.z_arrowLine.R.T[1,3] * fixedFrame.z_arrowLine.e_y[1] + (fixedFrame.z_arrowLine.R.T[2,3] * fixedFrame.z_arrowLine.e_y[2] + fixedFrame.z_arrowLine.R.T[3,3] * fixedFrame.z_arrowLine.e_y[3]);
//   fixedFrame.z_arrowLine.rvisobj = fixedFrame.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_arrowLine.R.T[1,1],fixedFrame.z_arrowLine.R.T[1,2],fixedFrame.z_arrowLine.R.T[1,3]},{fixedFrame.z_arrowLine.R.T[2,1],fixedFrame.z_arrowLine.R.T[2,2],fixedFrame.z_arrowLine.R.T[2,3]},{fixedFrame.z_arrowLine.R.T[3,1],fixedFrame.z_arrowLine.R.T[3,2],fixedFrame.z_arrowLine.R.T[3,3]}},{fixedFrame.z_arrowLine.r_shape[1],fixedFrame.z_arrowLine.r_shape[2],fixedFrame.z_arrowLine.r_shape[3]});
//   fixedFrame.z_arrowLine.size[1] = fixedFrame.z_arrowLine.length;
//   fixedFrame.z_arrowLine.size[2] = fixedFrame.z_arrowLine.width;
//   fixedFrame.z_arrowLine.size[3] = fixedFrame.z_arrowLine.height;
//   fixedFrame.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.z_arrowLine.color[1] / 255.0,fixedFrame.z_arrowLine.color[2] / 255.0,fixedFrame.z_arrowLine.color[3] / 255.0,fixedFrame.z_arrowLine.specularCoefficient);
//   fixedFrame.z_arrowLine.Extra = fixedFrame.z_arrowLine.extra;
//   fixedFrame.z_arrowHead.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.z_arrowHead.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.z_arrowHead.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.z_arrowHead.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.z_arrowHead.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.z_arrowHead.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.z_arrowHead.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.z_arrowHead.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.z_arrowHead.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.z_arrowHead.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.z_arrowHead.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.z_arrowHead.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.z_arrowHead.shapeType);
//   fixedFrame.z_arrowHead.rxvisobj[1] = fixedFrame.z_arrowHead.R.T[1,1] * fixedFrame.z_arrowHead.e_x[1] + (fixedFrame.z_arrowHead.R.T[2,1] * fixedFrame.z_arrowHead.e_x[2] + fixedFrame.z_arrowHead.R.T[3,1] * fixedFrame.z_arrowHead.e_x[3]);
//   fixedFrame.z_arrowHead.rxvisobj[2] = fixedFrame.z_arrowHead.R.T[1,2] * fixedFrame.z_arrowHead.e_x[1] + (fixedFrame.z_arrowHead.R.T[2,2] * fixedFrame.z_arrowHead.e_x[2] + fixedFrame.z_arrowHead.R.T[3,2] * fixedFrame.z_arrowHead.e_x[3]);
//   fixedFrame.z_arrowHead.rxvisobj[3] = fixedFrame.z_arrowHead.R.T[1,3] * fixedFrame.z_arrowHead.e_x[1] + (fixedFrame.z_arrowHead.R.T[2,3] * fixedFrame.z_arrowHead.e_x[2] + fixedFrame.z_arrowHead.R.T[3,3] * fixedFrame.z_arrowHead.e_x[3]);
//   fixedFrame.z_arrowHead.ryvisobj[1] = fixedFrame.z_arrowHead.R.T[1,1] * fixedFrame.z_arrowHead.e_y[1] + (fixedFrame.z_arrowHead.R.T[2,1] * fixedFrame.z_arrowHead.e_y[2] + fixedFrame.z_arrowHead.R.T[3,1] * fixedFrame.z_arrowHead.e_y[3]);
//   fixedFrame.z_arrowHead.ryvisobj[2] = fixedFrame.z_arrowHead.R.T[1,2] * fixedFrame.z_arrowHead.e_y[1] + (fixedFrame.z_arrowHead.R.T[2,2] * fixedFrame.z_arrowHead.e_y[2] + fixedFrame.z_arrowHead.R.T[3,2] * fixedFrame.z_arrowHead.e_y[3]);
//   fixedFrame.z_arrowHead.ryvisobj[3] = fixedFrame.z_arrowHead.R.T[1,3] * fixedFrame.z_arrowHead.e_y[1] + (fixedFrame.z_arrowHead.R.T[2,3] * fixedFrame.z_arrowHead.e_y[2] + fixedFrame.z_arrowHead.R.T[3,3] * fixedFrame.z_arrowHead.e_y[3]);
//   fixedFrame.z_arrowHead.rvisobj = fixedFrame.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_arrowHead.R.T[1,1],fixedFrame.z_arrowHead.R.T[1,2],fixedFrame.z_arrowHead.R.T[1,3]},{fixedFrame.z_arrowHead.R.T[2,1],fixedFrame.z_arrowHead.R.T[2,2],fixedFrame.z_arrowHead.R.T[2,3]},{fixedFrame.z_arrowHead.R.T[3,1],fixedFrame.z_arrowHead.R.T[3,2],fixedFrame.z_arrowHead.R.T[3,3]}},{fixedFrame.z_arrowHead.r_shape[1],fixedFrame.z_arrowHead.r_shape[2],fixedFrame.z_arrowHead.r_shape[3]});
//   fixedFrame.z_arrowHead.size[1] = fixedFrame.z_arrowHead.length;
//   fixedFrame.z_arrowHead.size[2] = fixedFrame.z_arrowHead.width;
//   fixedFrame.z_arrowHead.size[3] = fixedFrame.z_arrowHead.height;
//   fixedFrame.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.z_arrowHead.color[1] / 255.0,fixedFrame.z_arrowHead.color[2] / 255.0,fixedFrame.z_arrowHead.color[3] / 255.0,fixedFrame.z_arrowHead.specularCoefficient);
//   fixedFrame.z_arrowHead.Extra = fixedFrame.z_arrowHead.extra;
//   fixedFrame.z_label.R.T[1,1] = fixedFrame.frame_a.R.T[1,1];
//   fixedFrame.z_label.R.T[1,2] = fixedFrame.frame_a.R.T[1,2];
//   fixedFrame.z_label.R.T[1,3] = fixedFrame.frame_a.R.T[1,3];
//   fixedFrame.z_label.R.T[2,1] = fixedFrame.frame_a.R.T[2,1];
//   fixedFrame.z_label.R.T[2,2] = fixedFrame.frame_a.R.T[2,2];
//   fixedFrame.z_label.R.T[2,3] = fixedFrame.frame_a.R.T[2,3];
//   fixedFrame.z_label.R.T[3,1] = fixedFrame.frame_a.R.T[3,1];
//   fixedFrame.z_label.R.T[3,2] = fixedFrame.frame_a.R.T[3,2];
//   fixedFrame.z_label.R.T[3,3] = fixedFrame.frame_a.R.T[3,3];
//   fixedFrame.z_label.R.w[1] = fixedFrame.frame_a.R.w[1];
//   fixedFrame.z_label.R.w[2] = fixedFrame.frame_a.R.w[2];
//   fixedFrame.z_label.R.w[3] = fixedFrame.frame_a.R.w[3];
//   fixedFrame.z_label.cylinders[1].R.T[1,1] = fixedFrame.z_label.R.T[1,1];
//   fixedFrame.z_label.cylinders[1].R.T[1,2] = fixedFrame.z_label.R.T[1,2];
//   fixedFrame.z_label.cylinders[1].R.T[1,3] = fixedFrame.z_label.R.T[1,3];
//   fixedFrame.z_label.cylinders[1].R.T[2,1] = fixedFrame.z_label.R.T[2,1];
//   fixedFrame.z_label.cylinders[1].R.T[2,2] = fixedFrame.z_label.R.T[2,2];
//   fixedFrame.z_label.cylinders[1].R.T[2,3] = fixedFrame.z_label.R.T[2,3];
//   fixedFrame.z_label.cylinders[1].R.T[3,1] = fixedFrame.z_label.R.T[3,1];
//   fixedFrame.z_label.cylinders[1].R.T[3,2] = fixedFrame.z_label.R.T[3,2];
//   fixedFrame.z_label.cylinders[1].R.T[3,3] = fixedFrame.z_label.R.T[3,3];
//   fixedFrame.z_label.cylinders[1].R.w[1] = fixedFrame.z_label.R.w[1];
//   fixedFrame.z_label.cylinders[1].R.w[2] = fixedFrame.z_label.R.w[2];
//   fixedFrame.z_label.cylinders[1].R.w[3] = fixedFrame.z_label.R.w[3];
//   fixedFrame.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.z_label.cylinders[1].shapeType);
//   fixedFrame.z_label.cylinders[1].rxvisobj[1] = fixedFrame.z_label.cylinders[1].R.T[1,1] * fixedFrame.z_label.cylinders[1].e_x[1] + (fixedFrame.z_label.cylinders[1].R.T[2,1] * fixedFrame.z_label.cylinders[1].e_x[2] + fixedFrame.z_label.cylinders[1].R.T[3,1] * fixedFrame.z_label.cylinders[1].e_x[3]);
//   fixedFrame.z_label.cylinders[1].rxvisobj[2] = fixedFrame.z_label.cylinders[1].R.T[1,2] * fixedFrame.z_label.cylinders[1].e_x[1] + (fixedFrame.z_label.cylinders[1].R.T[2,2] * fixedFrame.z_label.cylinders[1].e_x[2] + fixedFrame.z_label.cylinders[1].R.T[3,2] * fixedFrame.z_label.cylinders[1].e_x[3]);
//   fixedFrame.z_label.cylinders[1].rxvisobj[3] = fixedFrame.z_label.cylinders[1].R.T[1,3] * fixedFrame.z_label.cylinders[1].e_x[1] + (fixedFrame.z_label.cylinders[1].R.T[2,3] * fixedFrame.z_label.cylinders[1].e_x[2] + fixedFrame.z_label.cylinders[1].R.T[3,3] * fixedFrame.z_label.cylinders[1].e_x[3]);
//   fixedFrame.z_label.cylinders[1].ryvisobj[1] = fixedFrame.z_label.cylinders[1].R.T[1,1] * fixedFrame.z_label.cylinders[1].e_y[1] + (fixedFrame.z_label.cylinders[1].R.T[2,1] * fixedFrame.z_label.cylinders[1].e_y[2] + fixedFrame.z_label.cylinders[1].R.T[3,1] * fixedFrame.z_label.cylinders[1].e_y[3]);
//   fixedFrame.z_label.cylinders[1].ryvisobj[2] = fixedFrame.z_label.cylinders[1].R.T[1,2] * fixedFrame.z_label.cylinders[1].e_y[1] + (fixedFrame.z_label.cylinders[1].R.T[2,2] * fixedFrame.z_label.cylinders[1].e_y[2] + fixedFrame.z_label.cylinders[1].R.T[3,2] * fixedFrame.z_label.cylinders[1].e_y[3]);
//   fixedFrame.z_label.cylinders[1].ryvisobj[3] = fixedFrame.z_label.cylinders[1].R.T[1,3] * fixedFrame.z_label.cylinders[1].e_y[1] + (fixedFrame.z_label.cylinders[1].R.T[2,3] * fixedFrame.z_label.cylinders[1].e_y[2] + fixedFrame.z_label.cylinders[1].R.T[3,3] * fixedFrame.z_label.cylinders[1].e_y[3]);
//   fixedFrame.z_label.cylinders[1].rvisobj = fixedFrame.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.cylinders[1].R.T[1,1],fixedFrame.z_label.cylinders[1].R.T[1,2],fixedFrame.z_label.cylinders[1].R.T[1,3]},{fixedFrame.z_label.cylinders[1].R.T[2,1],fixedFrame.z_label.cylinders[1].R.T[2,2],fixedFrame.z_label.cylinders[1].R.T[2,3]},{fixedFrame.z_label.cylinders[1].R.T[3,1],fixedFrame.z_label.cylinders[1].R.T[3,2],fixedFrame.z_label.cylinders[1].R.T[3,3]}},{fixedFrame.z_label.cylinders[1].r_shape[1],fixedFrame.z_label.cylinders[1].r_shape[2],fixedFrame.z_label.cylinders[1].r_shape[3]});
//   fixedFrame.z_label.cylinders[1].size[1] = fixedFrame.z_label.cylinders[1].length;
//   fixedFrame.z_label.cylinders[1].size[2] = fixedFrame.z_label.cylinders[1].width;
//   fixedFrame.z_label.cylinders[1].size[3] = fixedFrame.z_label.cylinders[1].height;
//   fixedFrame.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.z_label.cylinders[1].color[1] / 255.0,fixedFrame.z_label.cylinders[1].color[2] / 255.0,fixedFrame.z_label.cylinders[1].color[3] / 255.0,fixedFrame.z_label.cylinders[1].specularCoefficient);
//   fixedFrame.z_label.cylinders[1].Extra = fixedFrame.z_label.cylinders[1].extra;
//   fixedFrame.z_label.cylinders[2].R.T[1,1] = fixedFrame.z_label.R.T[1,1];
//   fixedFrame.z_label.cylinders[2].R.T[1,2] = fixedFrame.z_label.R.T[1,2];
//   fixedFrame.z_label.cylinders[2].R.T[1,3] = fixedFrame.z_label.R.T[1,3];
//   fixedFrame.z_label.cylinders[2].R.T[2,1] = fixedFrame.z_label.R.T[2,1];
//   fixedFrame.z_label.cylinders[2].R.T[2,2] = fixedFrame.z_label.R.T[2,2];
//   fixedFrame.z_label.cylinders[2].R.T[2,3] = fixedFrame.z_label.R.T[2,3];
//   fixedFrame.z_label.cylinders[2].R.T[3,1] = fixedFrame.z_label.R.T[3,1];
//   fixedFrame.z_label.cylinders[2].R.T[3,2] = fixedFrame.z_label.R.T[3,2];
//   fixedFrame.z_label.cylinders[2].R.T[3,3] = fixedFrame.z_label.R.T[3,3];
//   fixedFrame.z_label.cylinders[2].R.w[1] = fixedFrame.z_label.R.w[1];
//   fixedFrame.z_label.cylinders[2].R.w[2] = fixedFrame.z_label.R.w[2];
//   fixedFrame.z_label.cylinders[2].R.w[3] = fixedFrame.z_label.R.w[3];
//   fixedFrame.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.z_label.cylinders[2].shapeType);
//   fixedFrame.z_label.cylinders[2].rxvisobj[1] = fixedFrame.z_label.cylinders[2].R.T[1,1] * fixedFrame.z_label.cylinders[2].e_x[1] + (fixedFrame.z_label.cylinders[2].R.T[2,1] * fixedFrame.z_label.cylinders[2].e_x[2] + fixedFrame.z_label.cylinders[2].R.T[3,1] * fixedFrame.z_label.cylinders[2].e_x[3]);
//   fixedFrame.z_label.cylinders[2].rxvisobj[2] = fixedFrame.z_label.cylinders[2].R.T[1,2] * fixedFrame.z_label.cylinders[2].e_x[1] + (fixedFrame.z_label.cylinders[2].R.T[2,2] * fixedFrame.z_label.cylinders[2].e_x[2] + fixedFrame.z_label.cylinders[2].R.T[3,2] * fixedFrame.z_label.cylinders[2].e_x[3]);
//   fixedFrame.z_label.cylinders[2].rxvisobj[3] = fixedFrame.z_label.cylinders[2].R.T[1,3] * fixedFrame.z_label.cylinders[2].e_x[1] + (fixedFrame.z_label.cylinders[2].R.T[2,3] * fixedFrame.z_label.cylinders[2].e_x[2] + fixedFrame.z_label.cylinders[2].R.T[3,3] * fixedFrame.z_label.cylinders[2].e_x[3]);
//   fixedFrame.z_label.cylinders[2].ryvisobj[1] = fixedFrame.z_label.cylinders[2].R.T[1,1] * fixedFrame.z_label.cylinders[2].e_y[1] + (fixedFrame.z_label.cylinders[2].R.T[2,1] * fixedFrame.z_label.cylinders[2].e_y[2] + fixedFrame.z_label.cylinders[2].R.T[3,1] * fixedFrame.z_label.cylinders[2].e_y[3]);
//   fixedFrame.z_label.cylinders[2].ryvisobj[2] = fixedFrame.z_label.cylinders[2].R.T[1,2] * fixedFrame.z_label.cylinders[2].e_y[1] + (fixedFrame.z_label.cylinders[2].R.T[2,2] * fixedFrame.z_label.cylinders[2].e_y[2] + fixedFrame.z_label.cylinders[2].R.T[3,2] * fixedFrame.z_label.cylinders[2].e_y[3]);
//   fixedFrame.z_label.cylinders[2].ryvisobj[3] = fixedFrame.z_label.cylinders[2].R.T[1,3] * fixedFrame.z_label.cylinders[2].e_y[1] + (fixedFrame.z_label.cylinders[2].R.T[2,3] * fixedFrame.z_label.cylinders[2].e_y[2] + fixedFrame.z_label.cylinders[2].R.T[3,3] * fixedFrame.z_label.cylinders[2].e_y[3]);
//   fixedFrame.z_label.cylinders[2].rvisobj = fixedFrame.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.cylinders[2].R.T[1,1],fixedFrame.z_label.cylinders[2].R.T[1,2],fixedFrame.z_label.cylinders[2].R.T[1,3]},{fixedFrame.z_label.cylinders[2].R.T[2,1],fixedFrame.z_label.cylinders[2].R.T[2,2],fixedFrame.z_label.cylinders[2].R.T[2,3]},{fixedFrame.z_label.cylinders[2].R.T[3,1],fixedFrame.z_label.cylinders[2].R.T[3,2],fixedFrame.z_label.cylinders[2].R.T[3,3]}},{fixedFrame.z_label.cylinders[2].r_shape[1],fixedFrame.z_label.cylinders[2].r_shape[2],fixedFrame.z_label.cylinders[2].r_shape[3]});
//   fixedFrame.z_label.cylinders[2].size[1] = fixedFrame.z_label.cylinders[2].length;
//   fixedFrame.z_label.cylinders[2].size[2] = fixedFrame.z_label.cylinders[2].width;
//   fixedFrame.z_label.cylinders[2].size[3] = fixedFrame.z_label.cylinders[2].height;
//   fixedFrame.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.z_label.cylinders[2].color[1] / 255.0,fixedFrame.z_label.cylinders[2].color[2] / 255.0,fixedFrame.z_label.cylinders[2].color[3] / 255.0,fixedFrame.z_label.cylinders[2].specularCoefficient);
//   fixedFrame.z_label.cylinders[2].Extra = fixedFrame.z_label.cylinders[2].extra;
//   fixedFrame.z_label.cylinders[3].R.T[1,1] = fixedFrame.z_label.R.T[1,1];
//   fixedFrame.z_label.cylinders[3].R.T[1,2] = fixedFrame.z_label.R.T[1,2];
//   fixedFrame.z_label.cylinders[3].R.T[1,3] = fixedFrame.z_label.R.T[1,3];
//   fixedFrame.z_label.cylinders[3].R.T[2,1] = fixedFrame.z_label.R.T[2,1];
//   fixedFrame.z_label.cylinders[3].R.T[2,2] = fixedFrame.z_label.R.T[2,2];
//   fixedFrame.z_label.cylinders[3].R.T[2,3] = fixedFrame.z_label.R.T[2,3];
//   fixedFrame.z_label.cylinders[3].R.T[3,1] = fixedFrame.z_label.R.T[3,1];
//   fixedFrame.z_label.cylinders[3].R.T[3,2] = fixedFrame.z_label.R.T[3,2];
//   fixedFrame.z_label.cylinders[3].R.T[3,3] = fixedFrame.z_label.R.T[3,3];
//   fixedFrame.z_label.cylinders[3].R.w[1] = fixedFrame.z_label.R.w[1];
//   fixedFrame.z_label.cylinders[3].R.w[2] = fixedFrame.z_label.R.w[2];
//   fixedFrame.z_label.cylinders[3].R.w[3] = fixedFrame.z_label.R.w[3];
//   fixedFrame.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixedFrame.z_label.cylinders[3].shapeType);
//   fixedFrame.z_label.cylinders[3].rxvisobj[1] = fixedFrame.z_label.cylinders[3].R.T[1,1] * fixedFrame.z_label.cylinders[3].e_x[1] + (fixedFrame.z_label.cylinders[3].R.T[2,1] * fixedFrame.z_label.cylinders[3].e_x[2] + fixedFrame.z_label.cylinders[3].R.T[3,1] * fixedFrame.z_label.cylinders[3].e_x[3]);
//   fixedFrame.z_label.cylinders[3].rxvisobj[2] = fixedFrame.z_label.cylinders[3].R.T[1,2] * fixedFrame.z_label.cylinders[3].e_x[1] + (fixedFrame.z_label.cylinders[3].R.T[2,2] * fixedFrame.z_label.cylinders[3].e_x[2] + fixedFrame.z_label.cylinders[3].R.T[3,2] * fixedFrame.z_label.cylinders[3].e_x[3]);
//   fixedFrame.z_label.cylinders[3].rxvisobj[3] = fixedFrame.z_label.cylinders[3].R.T[1,3] * fixedFrame.z_label.cylinders[3].e_x[1] + (fixedFrame.z_label.cylinders[3].R.T[2,3] * fixedFrame.z_label.cylinders[3].e_x[2] + fixedFrame.z_label.cylinders[3].R.T[3,3] * fixedFrame.z_label.cylinders[3].e_x[3]);
//   fixedFrame.z_label.cylinders[3].ryvisobj[1] = fixedFrame.z_label.cylinders[3].R.T[1,1] * fixedFrame.z_label.cylinders[3].e_y[1] + (fixedFrame.z_label.cylinders[3].R.T[2,1] * fixedFrame.z_label.cylinders[3].e_y[2] + fixedFrame.z_label.cylinders[3].R.T[3,1] * fixedFrame.z_label.cylinders[3].e_y[3]);
//   fixedFrame.z_label.cylinders[3].ryvisobj[2] = fixedFrame.z_label.cylinders[3].R.T[1,2] * fixedFrame.z_label.cylinders[3].e_y[1] + (fixedFrame.z_label.cylinders[3].R.T[2,2] * fixedFrame.z_label.cylinders[3].e_y[2] + fixedFrame.z_label.cylinders[3].R.T[3,2] * fixedFrame.z_label.cylinders[3].e_y[3]);
//   fixedFrame.z_label.cylinders[3].ryvisobj[3] = fixedFrame.z_label.cylinders[3].R.T[1,3] * fixedFrame.z_label.cylinders[3].e_y[1] + (fixedFrame.z_label.cylinders[3].R.T[2,3] * fixedFrame.z_label.cylinders[3].e_y[2] + fixedFrame.z_label.cylinders[3].R.T[3,3] * fixedFrame.z_label.cylinders[3].e_y[3]);
//   fixedFrame.z_label.cylinders[3].rvisobj = fixedFrame.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixedFrame.z_label.cylinders[3].R.T[1,1],fixedFrame.z_label.cylinders[3].R.T[1,2],fixedFrame.z_label.cylinders[3].R.T[1,3]},{fixedFrame.z_label.cylinders[3].R.T[2,1],fixedFrame.z_label.cylinders[3].R.T[2,2],fixedFrame.z_label.cylinders[3].R.T[2,3]},{fixedFrame.z_label.cylinders[3].R.T[3,1],fixedFrame.z_label.cylinders[3].R.T[3,2],fixedFrame.z_label.cylinders[3].R.T[3,3]}},{fixedFrame.z_label.cylinders[3].r_shape[1],fixedFrame.z_label.cylinders[3].r_shape[2],fixedFrame.z_label.cylinders[3].r_shape[3]});
//   fixedFrame.z_label.cylinders[3].size[1] = fixedFrame.z_label.cylinders[3].length;
//   fixedFrame.z_label.cylinders[3].size[2] = fixedFrame.z_label.cylinders[3].width;
//   fixedFrame.z_label.cylinders[3].size[3] = fixedFrame.z_label.cylinders[3].height;
//   fixedFrame.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixedFrame.z_label.cylinders[3].color[1] / 255.0,fixedFrame.z_label.cylinders[3].color[2] / 255.0,fixedFrame.z_label.cylinders[3].color[3] / 255.0,fixedFrame.z_label.cylinders[3].specularCoefficient);
//   fixedFrame.z_label.cylinders[3].Extra = fixedFrame.z_label.cylinders[3].extra;
//   fixedFrame.frame_a.f[1] = 0.0;
//   fixedFrame.frame_a.f[2] = 0.0;
//   fixedFrame.frame_a.f[3] = 0.0;
//   fixedFrame.frame_a.t[1] = 0.0;
//   fixedFrame.frame_a.t[2] = 0.0;
//   fixedFrame.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   j1_phi = j1.phi;
//   j2_s = j2.s;
//   j1_w = j1.w;
//   j2_v = j2.v;
//   fixedFrame.frame_a.t[1] + universalSpherical.frame_ia.t[1] = 0.0;
//   fixedFrame.frame_a.t[2] + universalSpherical.frame_ia.t[2] = 0.0;
//   fixedFrame.frame_a.t[3] + universalSpherical.frame_ia.t[3] = 0.0;
//   fixedFrame.frame_a.f[1] + universalSpherical.frame_ia.f[1] = 0.0;
//   fixedFrame.frame_a.f[2] + universalSpherical.frame_ia.f[2] = 0.0;
//   fixedFrame.frame_a.f[3] + universalSpherical.frame_ia.f[3] = 0.0;
//   fixedFrame.frame_a.R.w[1] = universalSpherical.frame_ia.R.w[1];
//   fixedFrame.frame_a.R.w[2] = universalSpherical.frame_ia.R.w[2];
//   fixedFrame.frame_a.R.w[3] = universalSpherical.frame_ia.R.w[3];
//   fixedFrame.frame_a.R.T[1,1] = universalSpherical.frame_ia.R.T[1,1];
//   fixedFrame.frame_a.R.T[1,2] = universalSpherical.frame_ia.R.T[1,2];
//   fixedFrame.frame_a.R.T[1,3] = universalSpherical.frame_ia.R.T[1,3];
//   fixedFrame.frame_a.R.T[2,1] = universalSpherical.frame_ia.R.T[2,1];
//   fixedFrame.frame_a.R.T[2,2] = universalSpherical.frame_ia.R.T[2,2];
//   fixedFrame.frame_a.R.T[2,3] = universalSpherical.frame_ia.R.T[2,3];
//   fixedFrame.frame_a.R.T[3,1] = universalSpherical.frame_ia.R.T[3,1];
//   fixedFrame.frame_a.R.T[3,2] = universalSpherical.frame_ia.R.T[3,2];
//   fixedFrame.frame_a.R.T[3,3] = universalSpherical.frame_ia.R.T[3,3];
//   fixedFrame.frame_a.r_0[1] = universalSpherical.frame_ia.r_0[1];
//   fixedFrame.frame_a.r_0[2] = universalSpherical.frame_ia.r_0[2];
//   fixedFrame.frame_a.r_0[3] = universalSpherical.frame_ia.r_0[3];
//   b3.frame_b.t[1] + j2.frame_a.t[1] = 0.0;
//   b3.frame_b.t[2] + j2.frame_a.t[2] = 0.0;
//   b3.frame_b.t[3] + j2.frame_a.t[3] = 0.0;
//   b3.frame_b.f[1] + j2.frame_a.f[1] = 0.0;
//   b3.frame_b.f[2] + j2.frame_a.f[2] = 0.0;
//   b3.frame_b.f[3] + j2.frame_a.f[3] = 0.0;
//   b3.frame_b.R.w[1] = j2.frame_a.R.w[1];
//   b3.frame_b.R.w[2] = j2.frame_a.R.w[2];
//   b3.frame_b.R.w[3] = j2.frame_a.R.w[3];
//   b3.frame_b.R.T[1,1] = j2.frame_a.R.T[1,1];
//   b3.frame_b.R.T[1,2] = j2.frame_a.R.T[1,2];
//   b3.frame_b.R.T[1,3] = j2.frame_a.R.T[1,3];
//   b3.frame_b.R.T[2,1] = j2.frame_a.R.T[2,1];
//   b3.frame_b.R.T[2,2] = j2.frame_a.R.T[2,2];
//   b3.frame_b.R.T[2,3] = j2.frame_a.R.T[2,3];
//   b3.frame_b.R.T[3,1] = j2.frame_a.R.T[3,1];
//   b3.frame_b.R.T[3,2] = j2.frame_a.R.T[3,2];
//   b3.frame_b.R.T[3,3] = j2.frame_a.R.T[3,3];
//   b3.frame_b.r_0[1] = j2.frame_a.r_0[1];
//   b3.frame_b.r_0[2] = j2.frame_a.r_0[2];
//   b3.frame_b.r_0[3] = j2.frame_a.r_0[3];
//   b3.frame_a.t[1] + (j1.frame_a.t[1] + world.frame_b.t[1]) = 0.0;
//   b3.frame_a.t[2] + (j1.frame_a.t[2] + world.frame_b.t[2]) = 0.0;
//   b3.frame_a.t[3] + (j1.frame_a.t[3] + world.frame_b.t[3]) = 0.0;
//   b3.frame_a.f[1] + (j1.frame_a.f[1] + world.frame_b.f[1]) = 0.0;
//   b3.frame_a.f[2] + (j1.frame_a.f[2] + world.frame_b.f[2]) = 0.0;
//   b3.frame_a.f[3] + (j1.frame_a.f[3] + world.frame_b.f[3]) = 0.0;
//   b3.frame_a.R.w[1] = j1.frame_a.R.w[1];
//   j1.frame_a.R.w[1] = world.frame_b.R.w[1];
//   b3.frame_a.R.w[2] = j1.frame_a.R.w[2];
//   j1.frame_a.R.w[2] = world.frame_b.R.w[2];
//   b3.frame_a.R.w[3] = j1.frame_a.R.w[3];
//   j1.frame_a.R.w[3] = world.frame_b.R.w[3];
//   b3.frame_a.R.T[1,1] = j1.frame_a.R.T[1,1];
//   j1.frame_a.R.T[1,1] = world.frame_b.R.T[1,1];
//   b3.frame_a.R.T[1,2] = j1.frame_a.R.T[1,2];
//   j1.frame_a.R.T[1,2] = world.frame_b.R.T[1,2];
//   b3.frame_a.R.T[1,3] = j1.frame_a.R.T[1,3];
//   j1.frame_a.R.T[1,3] = world.frame_b.R.T[1,3];
//   b3.frame_a.R.T[2,1] = j1.frame_a.R.T[2,1];
//   j1.frame_a.R.T[2,1] = world.frame_b.R.T[2,1];
//   b3.frame_a.R.T[2,2] = j1.frame_a.R.T[2,2];
//   j1.frame_a.R.T[2,2] = world.frame_b.R.T[2,2];
//   b3.frame_a.R.T[2,3] = j1.frame_a.R.T[2,3];
//   j1.frame_a.R.T[2,3] = world.frame_b.R.T[2,3];
//   b3.frame_a.R.T[3,1] = j1.frame_a.R.T[3,1];
//   j1.frame_a.R.T[3,1] = world.frame_b.R.T[3,1];
//   b3.frame_a.R.T[3,2] = j1.frame_a.R.T[3,2];
//   j1.frame_a.R.T[3,2] = world.frame_b.R.T[3,2];
//   b3.frame_a.R.T[3,3] = j1.frame_a.R.T[3,3];
//   j1.frame_a.R.T[3,3] = world.frame_b.R.T[3,3];
//   b3.frame_a.r_0[1] = j1.frame_a.r_0[1];
//   j1.frame_a.r_0[1] = world.frame_b.r_0[1];
//   b3.frame_a.r_0[2] = j1.frame_a.r_0[2];
//   j1.frame_a.r_0[2] = world.frame_b.r_0[2];
//   b3.frame_a.r_0[3] = j1.frame_a.r_0[3];
//   j1.frame_a.r_0[3] = world.frame_b.r_0[3];
//   universalSpherical.frame_a.t[1] + b2.frame_b.t[1] = 0.0;
//   universalSpherical.frame_a.t[2] + b2.frame_b.t[2] = 0.0;
//   universalSpherical.frame_a.t[3] + b2.frame_b.t[3] = 0.0;
//   universalSpherical.frame_a.f[1] + b2.frame_b.f[1] = 0.0;
//   universalSpherical.frame_a.f[2] + b2.frame_b.f[2] = 0.0;
//   universalSpherical.frame_a.f[3] + b2.frame_b.f[3] = 0.0;
//   universalSpherical.frame_a.R.w[1] = b2.frame_b.R.w[1];
//   universalSpherical.frame_a.R.w[2] = b2.frame_b.R.w[2];
//   universalSpherical.frame_a.R.w[3] = b2.frame_b.R.w[3];
//   universalSpherical.frame_a.R.T[1,1] = b2.frame_b.R.T[1,1];
//   universalSpherical.frame_a.R.T[1,2] = b2.frame_b.R.T[1,2];
//   universalSpherical.frame_a.R.T[1,3] = b2.frame_b.R.T[1,3];
//   universalSpherical.frame_a.R.T[2,1] = b2.frame_b.R.T[2,1];
//   universalSpherical.frame_a.R.T[2,2] = b2.frame_b.R.T[2,2];
//   universalSpherical.frame_a.R.T[2,3] = b2.frame_b.R.T[2,3];
//   universalSpherical.frame_a.R.T[3,1] = b2.frame_b.R.T[3,1];
//   universalSpherical.frame_a.R.T[3,2] = b2.frame_b.R.T[3,2];
//   universalSpherical.frame_a.R.T[3,3] = b2.frame_b.R.T[3,3];
//   universalSpherical.frame_a.r_0[1] = b2.frame_b.r_0[1];
//   universalSpherical.frame_a.r_0[2] = b2.frame_b.r_0[2];
//   universalSpherical.frame_a.r_0[3] = b2.frame_b.r_0[3];
//   b1.frame_b.t[1] + universalSpherical.frame_b.t[1] = 0.0;
//   b1.frame_b.t[2] + universalSpherical.frame_b.t[2] = 0.0;
//   b1.frame_b.t[3] + universalSpherical.frame_b.t[3] = 0.0;
//   b1.frame_b.f[1] + universalSpherical.frame_b.f[1] = 0.0;
//   b1.frame_b.f[2] + universalSpherical.frame_b.f[2] = 0.0;
//   b1.frame_b.f[3] + universalSpherical.frame_b.f[3] = 0.0;
//   b1.frame_b.R.w[1] = universalSpherical.frame_b.R.w[1];
//   b1.frame_b.R.w[2] = universalSpherical.frame_b.R.w[2];
//   b1.frame_b.R.w[3] = universalSpherical.frame_b.R.w[3];
//   b1.frame_b.R.T[1,1] = universalSpherical.frame_b.R.T[1,1];
//   b1.frame_b.R.T[1,2] = universalSpherical.frame_b.R.T[1,2];
//   b1.frame_b.R.T[1,3] = universalSpherical.frame_b.R.T[1,3];
//   b1.frame_b.R.T[2,1] = universalSpherical.frame_b.R.T[2,1];
//   b1.frame_b.R.T[2,2] = universalSpherical.frame_b.R.T[2,2];
//   b1.frame_b.R.T[2,3] = universalSpherical.frame_b.R.T[2,3];
//   b1.frame_b.R.T[3,1] = universalSpherical.frame_b.R.T[3,1];
//   b1.frame_b.R.T[3,2] = universalSpherical.frame_b.R.T[3,2];
//   b1.frame_b.R.T[3,3] = universalSpherical.frame_b.R.T[3,3];
//   b1.frame_b.r_0[1] = universalSpherical.frame_b.r_0[1];
//   b1.frame_b.r_0[2] = universalSpherical.frame_b.r_0[2];
//   b1.frame_b.r_0[3] = universalSpherical.frame_b.r_0[3];
//   j1.frame_b.t[1] + b1.frame_a.t[1] = 0.0;
//   j1.frame_b.t[2] + b1.frame_a.t[2] = 0.0;
//   j1.frame_b.t[3] + b1.frame_a.t[3] = 0.0;
//   j1.frame_b.f[1] + b1.frame_a.f[1] = 0.0;
//   j1.frame_b.f[2] + b1.frame_a.f[2] = 0.0;
//   j1.frame_b.f[3] + b1.frame_a.f[3] = 0.0;
//   j1.frame_b.R.w[1] = b1.frame_a.R.w[1];
//   j1.frame_b.R.w[2] = b1.frame_a.R.w[2];
//   j1.frame_b.R.w[3] = b1.frame_a.R.w[3];
//   j1.frame_b.R.T[1,1] = b1.frame_a.R.T[1,1];
//   j1.frame_b.R.T[1,2] = b1.frame_a.R.T[1,2];
//   j1.frame_b.R.T[1,3] = b1.frame_a.R.T[1,3];
//   j1.frame_b.R.T[2,1] = b1.frame_a.R.T[2,1];
//   j1.frame_b.R.T[2,2] = b1.frame_a.R.T[2,2];
//   j1.frame_b.R.T[2,3] = b1.frame_a.R.T[2,3];
//   j1.frame_b.R.T[3,1] = b1.frame_a.R.T[3,1];
//   j1.frame_b.R.T[3,2] = b1.frame_a.R.T[3,2];
//   j1.frame_b.R.T[3,3] = b1.frame_a.R.T[3,3];
//   j1.frame_b.r_0[1] = b1.frame_a.r_0[1];
//   j1.frame_b.r_0[2] = b1.frame_a.r_0[2];
//   j1.frame_b.r_0[3] = b1.frame_a.r_0[3];
//   j2.frame_b.t[1] + b2.frame_a.t[1] = 0.0;
//   j2.frame_b.t[2] + b2.frame_a.t[2] = 0.0;
//   j2.frame_b.t[3] + b2.frame_a.t[3] = 0.0;
//   j2.frame_b.f[1] + b2.frame_a.f[1] = 0.0;
//   j2.frame_b.f[2] + b2.frame_a.f[2] = 0.0;
//   j2.frame_b.f[3] + b2.frame_a.f[3] = 0.0;
//   j2.frame_b.R.w[1] = b2.frame_a.R.w[1];
//   j2.frame_b.R.w[2] = b2.frame_a.R.w[2];
//   j2.frame_b.R.w[3] = b2.frame_a.R.w[3];
//   j2.frame_b.R.T[1,1] = b2.frame_a.R.T[1,1];
//   j2.frame_b.R.T[1,2] = b2.frame_a.R.T[1,2];
//   j2.frame_b.R.T[1,3] = b2.frame_a.R.T[1,3];
//   j2.frame_b.R.T[2,1] = b2.frame_a.R.T[2,1];
//   j2.frame_b.R.T[2,2] = b2.frame_a.R.T[2,2];
//   j2.frame_b.R.T[2,3] = b2.frame_a.R.T[2,3];
//   j2.frame_b.R.T[3,1] = b2.frame_a.R.T[3,1];
//   j2.frame_b.R.T[3,2] = b2.frame_a.R.T[3,2];
//   j2.frame_b.R.T[3,3] = b2.frame_a.R.T[3,3];
//   j2.frame_b.r_0[1] = b2.frame_a.r_0[1];
//   j2.frame_b.r_0[2] = b2.frame_a.r_0[2];
//   j2.frame_b.r_0[3] = b2.frame_a.r_0[3];
//   j1.support.tau = 0.0;
//   j1.axis.tau = 0.0;
// end Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2 completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2 has 3071 equation(s) and 3137 variable(s).
// 1789 of these are trivial equation(s).
// "
// ""
// 0
// endResult
