// name:     Modelica3.x.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic
// keywords: multibody, balancing, instantiation
// status:   correct
// teardown_command: rm -f *.so *.dll *.log *.c* *.makefile *.libs
// 
//  Modelica MultiBody 3.x: instantiation and balance checking
//

loadFile("_LoopsTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic);
getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length \"Return length of a vectorReturn length of a vector (better as norm(), if further symbolic processing is performed)\"
//   input Real[:] v \"Vector\";
//   output Real result \"Length of vector v\";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize \"Return normalized vector such that length = 1Return normalized vector such that length = 1 and prevent zero-division for zero vector\"
//   input Real[:] v \"Vector\";
//   input Real eps = 0.0000000000001 \"if |v| < eps then result = v/eps\";
//   output Real[size(v,1)] result \"Input vector v normalized to length=1\";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = atan2(u1, u2);
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = cos(u);
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent \"Maximum of the input arguments, without event and without warning message when differentiating\"
//   input Real u1;
//   input Real u2;
//   output Real y;
//   protected Integer dummy;
// algorithm
//   y := if u1 > u2 then u1 else u2;
//   dummy := 0;
// end Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation \"Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation\"
//   input Real[3, 3] T;
//   input Real(quantity=\"AngularVelocity\", unit=\"rad/s\")[3] w;
//   output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint \"Inline before index reduction\" \"Return the constraint residues to express that two frames have the same orientation\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
//   output Real[3] residue \"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\";
// algorithm
//   residue := {atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2 \"Compute angular velocity resolved in frame 2 from quaternions orientation object and its derivative\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[4] der_Q(unit = \"1/s\") \"Derivative of Q\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {(Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]) * 2.0,(-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]) * 2.0,(Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4]) * 2.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T \"Return quaternions orientation object Q from transformation matrix T\"
//   input Real[3, 3] T \"Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for Q (there are 2 solutions; the one close to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)\";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04000000000000001;
// algorithm
//   c1 := 1.0 + T[1,1] + -T[2,2] - T[3,3];
//   c2 := 1.0 + T[2,2] + -T[1,1] - T[3,3];
//   c3 := 1.0 + T[3,3] + -T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04000000000000001 or c4 > c1 and c4 > c2 and c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 and c1 > c3 and c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 and c2 > c3 and c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation \"Return quaternions orientation object that does not rotate a frame\"
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint \"Inline before index reduction\" \"Return residues of orientation constraints (shall be zero)\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   output Real[1] residue \"Residue constraint (shall be zero)\";
// algorithm
//   residue := {Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0 + -1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation \"Return absolute orientation object from another absolute and a relative orientation object\"
//   input Real[3, 3] T1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Real[3, 3] T_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3, 3] T2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation \"Return rotation object to rotate around one frame axis\"
//   input Integer axis(min = 1, max = 3) \"Rotate around 'axis' of frame 1\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,cos(angle),sin(angle);0.0,-sin(angle),cos(angle)] else if axis == 2 then <matrix>[cos(angle),0.0,-sin(angle);0.0,1.0,0.0;sin(angle),0.0,cos(angle)] else <matrix>[cos(angle),sin(angle),0.0;-sin(angle),cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy \"Return orientation object from n_x and n_y vectors\"
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 0.0000000001 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 0.000001 then {n_y[1],n_y[2],n_y[3]} else if abs(e_x[1]) > 0.000001 then {0.0,1.0,0.0} else {1.0,0.0,0.0};
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation \"Return orientation object of a planar rotation\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := <matrix>[e[1] * e[1] + (1.0 - e[1] * e[1]) * cos(angle),(e[1] * e[2] + -e[1] * e[2] * cos(angle)) - -e[3] * sin(angle),(e[1] * e[3] + -e[1] * e[3] * cos(angle)) - e[2] * sin(angle);(e[2] * e[1] + -e[2] * e[1] * cos(angle)) - e[3] * sin(angle),e[2] * e[2] + (1.0 - e[2] * e[2]) * cos(angle),(e[2] * e[3] + -e[2] * e[3] * cos(angle)) - -e[1] * sin(angle);(e[3] * e[1] + -e[3] * e[1] * cos(angle)) - -e[2] * sin(angle),(e[3] * e[2] + -e[3] * e[2] * cos(angle)) - e[1] * sin(angle),e[3] * e[3] + (1.0 - e[3] * e[3]) * cos(angle)];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1 \"Transform vector from frame 2 to frame 1\"
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2 \"Transform vector from frame 1 to frame 2\"
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.absoluteRotation \"Return absolute orientation object from another absolute and a relative orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   R2 := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[R_rel.T[1,1] * R1.T[1,1] + R_rel.T[1,2] * R1.T[2,1] + R_rel.T[1,3] * R1.T[3,1],R_rel.T[1,1] * R1.T[1,2] + R_rel.T[1,2] * R1.T[2,2] + R_rel.T[1,3] * R1.T[3,2],R_rel.T[1,1] * R1.T[1,3] + R_rel.T[1,2] * R1.T[2,3] + R_rel.T[1,3] * R1.T[3,3];R_rel.T[2,1] * R1.T[1,1] + R_rel.T[2,2] * R1.T[2,1] + R_rel.T[2,3] * R1.T[3,1],R_rel.T[2,1] * R1.T[1,2] + R_rel.T[2,2] * R1.T[2,2] + R_rel.T[2,3] * R1.T[3,2],R_rel.T[2,1] * R1.T[1,3] + R_rel.T[2,2] * R1.T[2,3] + R_rel.T[2,3] * R1.T[3,3];R_rel.T[3,1] * R1.T[1,1] + R_rel.T[3,2] * R1.T[2,1] + R_rel.T[3,3] * R1.T[3,1],R_rel.T[3,1] * R1.T[1,2] + R_rel.T[3,2] * R1.T[2,2] + R_rel.T[3,3] * R1.T[3,2],R_rel.T[3,1] * R1.T[1,3] + R_rel.T[3,2] * R1.T[2,3] + R_rel.T[3,3] * R1.T[3,3]],Modelica.Mechanics.MultiBody.Frames.resolve2(R_rel,{R1.w[1],R1.w[2],R1.w[3]}) + {R_rel.w[1],R_rel.w[2],R_rel.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2 \"Inline before index reduction\" \"Return angular velocity resolved in frame 2 from orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations \"Return fixed rotation object to rotate in sequence around fixed angles along 3 axes\"
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence'\";
//   input Real[3] der_angles(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angles)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles \"Return the 3 angles to rotate in sequence around 3 axes to construct the given orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real guessAngle1(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Select angles[1] such that |angles[1] - guessAngle1| is a minimum\";
//   output Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi\";
//   protected Real[3] e1_1(unit = \"1\") \"First rotation axis, resolved in frame 1\";
//   protected Real[3] e2_1a(unit = \"1\") \"Second rotation axis, resolved in frame 1a\";
//   protected Real[3] e3_1(unit = \"1\") \"Third rotation axis, resolved in frame 1\";
//   protected Real[3] e3_2(unit = \"1\") \"Third rotation axis, resolved in frame 2\";
//   protected Real A \"Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real B \"Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real angle_1a(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 1 for angles[1]\";
//   protected Real angle_1b(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 2 for angles[1]\";
//   protected Real[3, 3] T_1a \"Orientation object to rotate frame 1 into frame 1a\";
// algorithm
//   assert( sequence[1] <> sequence[2] and sequence[2] <> sequence[3], \"input argument 'sequence[1:3]' is not valid\");
//   e1_1 := if sequence[1] == 1 then {1.0,0.0,0.0} else if sequence[1] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   e2_1a := if sequence[2] == 1 then {1.0,0.0,0.0} else if sequence[2] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := if sequence[3] == 1 then {1.0,0.0,0.0} else if sequence[3] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 0.000000000001 and abs(B) <= 0.000000000001 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := atan2(A,-B);
//     angle_1b := atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis \"Return unit vector for x-, y-, or z-axis\"
//   input Integer axis(min = 1, max = 3) \"Axis vector to be returned\";
//   output Real[3] e(unit = \"1\") \"Unit axis vector\";
// algorithm
//   e := if axis == 1 then {1.0,0.0,0.0} else if axis == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q \"Return orientation object R from quaternion orientation object Q\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity from frame 2 with respect to frame 1, resolved in frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) + -1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) + -1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) + -1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_nxy \"Return fixed orientation object from n_x and n_y vectors\"
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 0.0000000001 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 0.000001 then {n_y[1],n_y[2],n_y[3]} else if abs(e_x[1]) > 0.000001 then {0.0,1.0,0.0} else {1.0,0.0,0.0};
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation \"Return orientation object that does not rotate a frame\"
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object such that frame 1 and frame 2 are identical\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotation \"Return orientation object of a planar rotation\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   input Real der_angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angle)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e[1] * e[1] + (1.0 - e[1] * e[1]) * cos(angle),(e[1] * e[2] + -e[1] * e[2] * cos(angle)) - -e[3] * sin(angle),(e[1] * e[3] + -e[1] * e[3] * cos(angle)) - e[2] * sin(angle);(e[2] * e[1] + -e[2] * e[1] * cos(angle)) - e[3] * sin(angle),e[2] * e[2] + (1.0 - e[2] * e[2]) * cos(angle),(e[2] * e[3] + -e[2] * e[3] * cos(angle)) - -e[1] * sin(angle);(e[3] * e[1] + -e[3] * e[1] * cos(angle)) - -e[2] * sin(angle),(e[3] * e[2] + -e[3] * e[2] * cos(angle)) - e[1] * sin(angle),e[3] * e[3] + (1.0 - e[3] * e[3]) * cos(angle)],{e[1] * der_angle,e[2] * der_angle,e[3] * der_angle});
// end Modelica.Mechanics.MultiBody.Frames.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle \"Return angle of a planar rotation, given the rotation axis and the representations of a vector in frame 1 and frame 2\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)\";
//   input Real[3] v1 \"A vector v resolved in frame 1 (shall not be parallel to e)\";
//   input Real[3] v2 \"Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)\";
//   output Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi\";
// algorithm
//   angle := atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3] - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1 \"Transform vector from frame 2 to frame 1\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2 \"Transform vector from frame 1 to frame 2\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveDyade1 \"Transform second order tensor from frame 2 to frame 1\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3, 3] D2 \"Second order tensor resolved in frame 2\";
//   output Real[3, 3] D1 \"Second order tensor resolved in frame 1\";
// algorithm
//   D1 := <matrix>[(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,1] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,1] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,1],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,2] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,2] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,2],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,3] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,3] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,3];(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,1] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,1] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,1],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,2] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,2] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,2],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,3] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,3] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,3];(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,1] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,1] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,1],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,2] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,2] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,2],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,3] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,3] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.resolveDyade1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveRelative \"Transform vector from frame 1 to frame 2 using absolute orientation objects of frame 1 and of frame 2\"
//   input Real[3] v1 \"Vector in frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := Modelica.Mechanics.MultiBody.Frames.resolve2(R2,Modelica.Mechanics.MultiBody.Frames.resolve1(R1,{v1[1],v1[2],v1[3]}));
// end Modelica.Mechanics.MultiBody.Frames.resolveRelative;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q \"Return quaternion orientation object Q from orientation object R\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Joints.Assemblies.JointSSP.world__gravityAcceleration \"Gravity field acceleration depending on field type and position\"
//   input Real[3] r(quantity = \"Length\", unit = \"m\") \"Position vector from world frame to actual point, resolved in world frame\";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType \"Type of gravity field\";
//   input Real[3] g(quantity = \"Acceleration\", unit = \"m/s2\") \"Constant gravity acceleration, resolved in world frame, if gravityType=1\";
//   input Real mue(unit = \"m3/s2\") \"Field constant of point gravity field, if gravityType=2\";
//   output Real[3] gravity(quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration at point r, resolved in world frame\";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Joints.Assemblies.JointSSP.world__gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch \"Determine branch which is closest to initial angle=0\"
//   input Real L(quantity = \"Length\", unit = \"m\") \"Length of length constraint\";
//   input Real[3] e(unit = \"1\") \"Unit vector along axis of translation, resolved in frame_a (= same in frame_b)\";
//   input Real d_guess(quantity = \"Length\", unit = \"m\") \"Select the configuration such that at initial time |d-d_guess|is minimal (d: distance between origin of frame_a and origin of frame_b)\";
//   input Real[3] r_a(quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of prismatic joint\";
//   input Real[3] r_b(quantity = \"Length\", unit = \"m\") \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of prismatic joint\";
//   output Boolean positiveBranch \"Branch of the initial solution\";
//   protected Real[3] rbra(quantity = \"Length\", unit = \"m\") \"= rb - ra\";
//   protected Real B \"Coefficient B of equation: d*d + B*d + C = 0\";
//   protected Real C \"Coefficient C of equation: d*d + B*d + C = 0\";
//   protected Real k1 \"Constant of quadratic equation solution\";
//   protected Real k2 \"Constant of quadratic equation solution\";
//   protected Real k1a;
//   protected Real k1b;
//   protected Real d1 \"solution 1 of quadratic equation\";
//   protected Real d2 \"solution 2 of quadratic equation\";
// algorithm
//   rbra := {r_b[1] - r_a[1],r_b[2] - r_a[2],r_b[3] - r_a[3]};
//   B := 2.0 * (e[1] * rbra[1] + e[2] * rbra[2] + e[3] * rbra[3]);
//   C := rbra[1] ^ 2.0 + rbra[2] ^ 2.0 + rbra[3] ^ 2.0 - L ^ 2.0;
//   k1 := B / 2.0;
//   k1a := k1 ^ 2.0 - C;
//   assert( noEvent(k1a > 0.0000000001), \"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// \");
//   k1b := max(k1a,0.000000000001);
//   k2 := sqrt(k1b);
//   d1 := k2 - k1;
//   d2 := -k1 - k2;
//   if abs(d1 - d_guess) <= abs(d2 - d_guess) then
//     positiveBranch := true;
//   else
//     positiveBranch := false;
//   end if;
// end Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration \"Gravity field acceleration depending on field type and position\"
//   input Real[3] r(quantity = \"Length\", unit = \"m\") \"Position vector from world frame to actual point, resolved in world frame\";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType \"Type of gravity field\";
//   input Real[3] g(quantity = \"Acceleration\", unit = \"m/s2\") \"Constant gravity acceleration, resolved in world frame, if gravityType=1\";
//   input Real mue(unit = \"m3/s2\") \"Field constant of point gravity field, if gravityType=2\";
//   output Real[3] gravity(quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration at point r, resolved in world frame\";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// class Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic
//   Real world.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean world.enableAnimation = true \"= true, if animation of all components is enabled\";
//   parameter Boolean world.animateWorld = true \"= true, if world coordinate system shall be visualized\";
//   parameter Boolean world.animateGravity = false \"= true, if gravity field shall be visualized (acceleration vector or field center)\";
//   parameter String world.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String world.label2 = \"y\" \"Label of vertical axis in icon\";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity \"Type of gravity field\";
//   parameter Real world.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.81 \"Constant gravity acceleration\";
//   parameter Real world.n[1](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[2](unit = \"1\") = -1.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[3](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.mue(unit = \"m3/s2\", min = 0.0) = 398600000000000.0 \"Gravity field constant (default = field constant of earth)\";
//   parameter Boolean world.driveTrainMechanics3D = true \"= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account\";
//   parameter Boolean world.axisShowLabels = true \"= true, if labels shall be shown\";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of z-arrow\";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of z-arrow\";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of z-arrow\";
//   parameter Real world.gravityArrowTail[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   parameter Real world.gravitySphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 12742000.0 \"Diameter of sphere representing gravity center (default = mean diameter of earth)\";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   parameter Real world.nominalLength(quantity = \"Length\", unit = \"m\") = 1.0 \"\\\"Nominal\\\" length of multi-body system\";
//   parameter Real world.defaultWidthFraction = 20.0 \"Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)\";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 \"Default for arrow diameter of a coordinate system as a fraction of axis length\";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 \"Default reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real world.defaultN_to_m(unit = \"N/m\", min = 0.0) = 1000.0 \"Default scaling of force arrows (length = force/defaultN_to_m)\";
//   parameter Real world.defaultNm_to_m(unit = \"N.m/m\", min = 0.0) = 1000.0 \"Default scaling of torque arrows (length = torque/defaultNm_to_m)\";
//   protected parameter Integer world.ndim = if world.enableAnimation and world.animateWorld then 1 else 0;
//   protected parameter Integer world.ndim2 = if world.enableAnimation and world.animateWorld and world.axisShowLabels then 1 else 0;
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation and world.animateGravity and world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter Real world.axisLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.nominalLength / 2.0 \"Length of world axes arrows\";
//   parameter Real world.defaultAxisLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 5.0 \"Default for length of a frame axis (but not world frame)\";
//   parameter Real world.defaultJointLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a joint\";
//   parameter Real world.defaultJointWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape representing a joint\";
//   parameter Real world.defaultForceLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a force (e.g. damper)\";
//   parameter Real world.defaultForceWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape represening a force (e.g. spring, bushing)\";
//   parameter Real world.defaultBodyDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 9.0 \"Default for diameter of sphere representing the center of mass of a body\";
//   parameter Real world.defaultArrowDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 40.0 \"Default for arrow diameter (e.g., of forces, torques, sensors)\";
//   parameter Real world.axisDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction \"Diameter of world axes arrows\";
//   parameter Real world.gravityArrowLength(quantity = \"Length\", unit = \"m\") = world.axisLength / 2.0 \"Length of gravity arrow\";
//   protected parameter Real world.labelStart(quantity = \"Length\", unit = \"m\") = 1.05 * world.axisLength;
//   protected parameter Real world.headLength(quantity = \"Length\", unit = \"m\") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineWidth(quantity = \"Length\", unit = \"m\") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   parameter Real world.gravityArrowDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction \"Diameter of gravity arrow\";
//   protected parameter Real world.lineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.axisLength - world.headLength);
//   input Real world.x_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r_lines[1](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[1](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of cylinders\";
//   input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of cylinders\";
//   input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of cylinders\";
//   input Real world.x_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1,1];
//   protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1,2];
//   protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1,3];
//   protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2,1];
//   protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2,2];
//   protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2,3];
//   protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3,1];
//   protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3,2];
//   protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3,3];
//   protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1,1];
//   protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1,2];
//   protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1,3];
//   protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2,1];
//   protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2,2];
//   protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2,3];
//   protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3,1];
//   protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3,2];
//   protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3,3];
//   protected Real world.x_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[1];
//   protected Real world.x_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[2];
//   protected Real world.x_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[3];
//   protected parameter Integer world.x_label.n = 2 \"Number of cylinders\";
//   parameter String world.x_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.x_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.x_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.x_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real world.x_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 0.0000000001) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 0.0000000001) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 0.0000000001) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
//   protected Real world.x_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
//   protected Real world.x_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
//   protected Real world.x_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real world.x_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real world.x_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[1].Form;
//   output Real world.x_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].Material;
//   protected output Real world.x_label.cylinders[1].Extra;
//   parameter String world.x_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.x_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.x_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.x_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real world.x_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 0.0000000001) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 0.0000000001) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 0.0000000001) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
//   protected Real world.x_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
//   protected Real world.x_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
//   protected Real world.x_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real world.x_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real world.x_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[2].Form;
//   output Real world.x_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].Material;
//   protected output Real world.x_label.cylinders[2].Extra;
//   input Real world.y_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[2](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[2](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[1](unit = \"1\") = -1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[2](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 1.5 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = 1.5 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = 0.5 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.75 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] \"Color of cylinders\";
//   input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] \"Color of cylinders\";
//   input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] \"Color of cylinders\";
//   input Real world.y_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1,1];
//   protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1,2];
//   protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1,3];
//   protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2,1];
//   protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2,2];
//   protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2,3];
//   protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3,1];
//   protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3,2];
//   protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3,3];
//   protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1,1];
//   protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1,2];
//   protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1,3];
//   protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2,1];
//   protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2,2];
//   protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2,3];
//   protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3,1];
//   protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3,2];
//   protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3,3];
//   protected Real world.y_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[1];
//   protected Real world.y_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[2];
//   protected Real world.y_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[3];
//   protected parameter Integer world.y_label.n = 2 \"Number of cylinders\";
//   parameter String world.y_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.y_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.y_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.y_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real world.y_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 0.0000000001) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 0.0000000001) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 0.0000000001) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
//   protected Real world.y_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
//   protected Real world.y_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
//   protected Real world.y_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real world.y_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real world.y_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[1].Form;
//   output Real world.y_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].Material;
//   protected output Real world.y_label.cylinders[1].Extra;
//   parameter String world.y_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.y_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.y_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.y_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real world.y_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 0.0000000001) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 0.0000000001) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 0.0000000001) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
//   protected Real world.y_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
//   protected Real world.y_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
//   protected Real world.y_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real world.y_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real world.y_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[2].Form;
//   output Real world.y_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].Material;
//   protected output Real world.y_label.cylinders[2].Extra;
//   input Real world.z_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[3](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[3](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] \"Color of cylinders\";
//   input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] \"Color of cylinders\";
//   input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] \"Color of cylinders\";
//   input Real world.z_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1,1];
//   protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1,2];
//   protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1,3];
//   protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2,1];
//   protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2,2];
//   protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2,3];
//   protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3,1];
//   protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3,2];
//   protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3,3];
//   protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1,1];
//   protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1,2];
//   protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1,3];
//   protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2,1];
//   protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2,2];
//   protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2,3];
//   protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3,1];
//   protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3,2];
//   protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3,3];
//   protected Real world.z_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[1];
//   protected Real world.z_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[2];
//   protected Real world.z_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[3];
//   protected parameter Integer world.z_label.n = 3 \"Number of cylinders\";
//   parameter String world.z_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real world.z_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 0.0000000001) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 0.0000000001) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 0.0000000001) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
//   protected Real world.z_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
//   protected Real world.z_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
//   protected Real world.z_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real world.z_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real world.z_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[1].Form;
//   output Real world.z_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].Material;
//   protected output Real world.z_label.cylinders[1].Extra;
//   parameter String world.z_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real world.z_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 0.0000000001) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 0.0000000001) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 0.0000000001) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
//   protected Real world.z_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
//   protected Real world.z_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
//   protected Real world.z_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real world.z_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real world.z_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[2].Form;
//   output Real world.z_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].Material;
//   protected output Real world.z_label.cylinders[2].Extra;
//   parameter String world.z_label.cylinders[3].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = world.z_label.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[3].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[3].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[3].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[3].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real world.z_label.cylinders[3].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 0.0000000001) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 0.0000000001) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 0.0000000001) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
//   protected Real world.z_label.cylinders[3].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
//   protected Real world.z_label.cylinders[3].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
//   protected Real world.z_label.cylinders[3].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real world.z_label.cylinders[3].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real world.z_label.cylinders[3].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[3].Form;
//   output Real world.z_label.cylinders[3].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[3].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].Material;
//   protected output Real world.z_label.cylinders[3].Extra;
//   protected parameter Real world.gravityHeadLength(quantity = \"Length\", unit = \"m\") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   parameter String world.x_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.x_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.x_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.x_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
//   protected Real world.x_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 0.0000000001) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 0.0000000001) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 0.0000000001) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.n_z_aux[1](unit = \"1\") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
//   protected Real world.x_arrowLine.n_z_aux[2](unit = \"1\") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
//   protected Real world.x_arrowLine.n_z_aux[3](unit = \"1\") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
//   protected Real world.x_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
//   protected Real world.x_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
//   protected Real world.x_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
//   protected output Real world.x_arrowLine.Form;
//   output Real world.x_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.Material;
//   protected output Real world.x_arrowLine.Extra;
//   parameter String world.x_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.x_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.x_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.x_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
//   protected Real world.x_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 0.0000000001) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 0.0000000001) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 0.0000000001) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.n_z_aux[1](unit = \"1\") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
//   protected Real world.x_arrowHead.n_z_aux[2](unit = \"1\") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
//   protected Real world.x_arrowHead.n_z_aux[3](unit = \"1\") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
//   protected Real world.x_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
//   protected Real world.x_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
//   protected Real world.x_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
//   protected output Real world.x_arrowHead.Form;
//   output Real world.x_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.Material;
//   protected output Real world.x_arrowHead.Extra;
//   parameter String world.y_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.y_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.y_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.y_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
//   protected Real world.y_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 0.0000000001) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 0.0000000001) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 0.0000000001) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.n_z_aux[1](unit = \"1\") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
//   protected Real world.y_arrowLine.n_z_aux[2](unit = \"1\") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
//   protected Real world.y_arrowLine.n_z_aux[3](unit = \"1\") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
//   protected Real world.y_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
//   protected Real world.y_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
//   protected Real world.y_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
//   protected output Real world.y_arrowLine.Form;
//   output Real world.y_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.Material;
//   protected output Real world.y_arrowLine.Extra;
//   parameter String world.y_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.y_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.y_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.y_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
//   protected Real world.y_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 0.0000000001) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 0.0000000001) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 0.0000000001) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.n_z_aux[1](unit = \"1\") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
//   protected Real world.y_arrowHead.n_z_aux[2](unit = \"1\") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
//   protected Real world.y_arrowHead.n_z_aux[3](unit = \"1\") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
//   protected Real world.y_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
//   protected Real world.y_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
//   protected Real world.y_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
//   protected output Real world.y_arrowHead.Form;
//   output Real world.y_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.Material;
//   protected output Real world.y_arrowHead.Extra;
//   parameter String world.z_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.z_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.z_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.z_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
//   protected Real world.z_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 0.0000000001) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 0.0000000001) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 0.0000000001) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.n_z_aux[1](unit = \"1\") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
//   protected Real world.z_arrowLine.n_z_aux[2](unit = \"1\") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
//   protected Real world.z_arrowLine.n_z_aux[3](unit = \"1\") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
//   protected Real world.z_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
//   protected Real world.z_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
//   protected Real world.z_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
//   protected output Real world.z_arrowLine.Form;
//   output Real world.z_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.Material;
//   protected output Real world.z_arrowLine.Extra;
//   parameter String world.z_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.z_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.z_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.z_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
//   protected Real world.z_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 0.0000000001) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 0.0000000001) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 0.0000000001) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.n_z_aux[1](unit = \"1\") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
//   protected Real world.z_arrowHead.n_z_aux[2](unit = \"1\") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
//   protected Real world.z_arrowHead.n_z_aux[3](unit = \"1\") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
//   protected Real world.z_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
//   protected Real world.z_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
//   protected Real world.z_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 0.000001) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
//   protected output Real world.z_arrowHead.Form;
//   output Real world.z_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.Material;
//   protected output Real world.z_arrowHead.Extra;
//   output Real j1_phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"angle of revolute joint j1\";
//   output Real j2_s(quantity = \"Length\", unit = \"m\") \"distance of prismatic joint j2\";
//   output Real j1_w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"axis speed of revolute joint j1\";
//   output Real j2_v(quantity = \"Velocity\", unit = \"m/s\") \"axis velocity of prismatic joint j2\";
//   Real j1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real j1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real j1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real j1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real j1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real j1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real j1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real j1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real j1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real j1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real j1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real j1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real j1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real j1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real j1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real j1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real j1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real j1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean j1.useAxisFlange = true \"= true, if axis flange is enabled\";
//   parameter Boolean j1.animation = true \"= true, if animation shall be enabled (show axis as cylinder)\";
//   parameter Real j1.n[1](unit = \"1\") = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j1.n[2](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j1.n[3](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   constant Real j1.phi_offset(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Relative angle offset (angle = phi_offset + phi)\";
//   parameter Real j1.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Length of cylinder representing the joint axis\";
//   parameter Real j1.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Diameter of cylinder representing the joint axis\";
//   input Integer j1.cylinderColor[1](min = 0, max = 255) = 255 \"Color of cylinder representing the joint axis\";
//   input Integer j1.cylinderColor[2](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Integer j1.cylinderColor[3](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Real j1.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) j1.stateSelect = StateSelect.always \"Priority to use joint angle phi and w=der(phi) as states\";
//   Real j1.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Second derivative of angle phi (relative angular acceleration)\";
//   Real j1.tau(quantity = \"Torque\", unit = \"N.m\") \"Driving torque in direction of axis of rotation\";
//   Real j1.angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"= phi_offset + phi\";
//   Real j1.R_rel.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real j1.R_rel.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.R_rel.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real j1.R_rel.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real j1.fixed.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real j1.fixed.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real j1.fixed.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real j1.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real j1.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real j1.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real j1.support.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected parameter Real j1.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({j1.n[1],j1.n[2],j1.n[3]},0.0000000000001)[1] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real j1.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({j1.n[1],j1.n[2],j1.n[3]},0.0000000000001)[2] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real j1.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({j1.n[1],j1.n[2],j1.n[3]},0.0000000000001)[3] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   Real j1.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, fixed = true, StateSelect = StateSelect.always) \"Relative rotation angle from frame_a to frame_b\";
//   Real j1.w(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"deg/s\", start = 5.235987755982989, fixed = true, StateSelect = StateSelect.always) \"First derivative of angle phi (relative angular velocity)\";
//   input Real j1.internalAxis.tau(quantity = \"Torque\", unit = \"N.m\") = j1.tau \"External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)\";
//   Real j1.internalAxis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"External support angle (= flange.phi)\";
//   Real j1.internalAxis.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real j1.internalAxis.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter String j1.cylinder.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real j1.cylinder.R.T[1,1] = j1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[1,2] = j1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[1,3] = j1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[2,1] = j1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[2,2] = j1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[2,3] = j1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[3,1] = j1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[3,2] = j1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.T[3,3] = j1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real j1.cylinder.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = j1.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real j1.cylinder.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = j1.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real j1.cylinder.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = j1.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real j1.cylinder.r[1](quantity = \"Length\", unit = \"m\") = j1.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real j1.cylinder.r[2](quantity = \"Length\", unit = \"m\") = j1.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real j1.cylinder.r[3](quantity = \"Length\", unit = \"m\") = j1.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real j1.cylinder.r_shape[1](quantity = \"Length\", unit = \"m\") = ((-j1.e[1]) * j1.cylinderLength) / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real j1.cylinder.r_shape[2](quantity = \"Length\", unit = \"m\") = ((-j1.e[2]) * j1.cylinderLength) / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real j1.cylinder.r_shape[3](quantity = \"Length\", unit = \"m\") = ((-j1.e[3]) * j1.cylinderLength) / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real j1.cylinder.lengthDirection[1](unit = \"1\") = j1.e[1] \"Vector in length direction, resolved in object frame\";
//   input Real j1.cylinder.lengthDirection[2](unit = \"1\") = j1.e[2] \"Vector in length direction, resolved in object frame\";
//   input Real j1.cylinder.lengthDirection[3](unit = \"1\") = j1.e[3] \"Vector in length direction, resolved in object frame\";
//   input Real j1.cylinder.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real j1.cylinder.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real j1.cylinder.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real j1.cylinder.length(quantity = \"Length\", unit = \"m\") = j1.cylinderLength \"Length of visual object\";
//   input Real j1.cylinder.width(quantity = \"Length\", unit = \"m\") = j1.cylinderDiameter \"Width of visual object\";
//   input Real j1.cylinder.height(quantity = \"Length\", unit = \"m\") = j1.cylinderDiameter \"Height of visual object\";
//   input Real j1.cylinder.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real j1.cylinder.color[1] = Real(j1.cylinderColor[1]) \"Color of shape\";
//   input Real j1.cylinder.color[2] = Real(j1.cylinderColor[2]) \"Color of shape\";
//   input Real j1.cylinder.color[3] = Real(j1.cylinderColor[3]) \"Color of shape\";
//   input Real j1.cylinder.specularCoefficient = j1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real j1.cylinder.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({j1.cylinder.lengthDirection[1],j1.cylinder.lengthDirection[2],j1.cylinder.lengthDirection[3]});
//   protected Real j1.cylinder.e_x[1](unit = \"1\") = if noEvent(j1.cylinder.abs_n_x < 0.0000000001) then 1.0 else j1.cylinder.lengthDirection[1] / j1.cylinder.abs_n_x;
//   protected Real j1.cylinder.e_x[2](unit = \"1\") = if noEvent(j1.cylinder.abs_n_x < 0.0000000001) then 0.0 else j1.cylinder.lengthDirection[2] / j1.cylinder.abs_n_x;
//   protected Real j1.cylinder.e_x[3](unit = \"1\") = if noEvent(j1.cylinder.abs_n_x < 0.0000000001) then 0.0 else j1.cylinder.lengthDirection[3] / j1.cylinder.abs_n_x;
//   protected Real j1.cylinder.n_z_aux[1](unit = \"1\") = j1.cylinder.e_x[2] * j1.cylinder.widthDirection[3] - j1.cylinder.e_x[3] * j1.cylinder.widthDirection[2];
//   protected Real j1.cylinder.n_z_aux[2](unit = \"1\") = j1.cylinder.e_x[3] * j1.cylinder.widthDirection[1] - j1.cylinder.e_x[1] * j1.cylinder.widthDirection[3];
//   protected Real j1.cylinder.n_z_aux[3](unit = \"1\") = j1.cylinder.e_x[1] * j1.cylinder.widthDirection[2] - j1.cylinder.e_x[2] * j1.cylinder.widthDirection[1];
//   protected Real j1.cylinder.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]},if noEvent(j1.cylinder.n_z_aux[1] ^ 2.0 + (j1.cylinder.n_z_aux[2] ^ 2.0 + j1.cylinder.n_z_aux[3] ^ 2.0) > 0.000001) then {j1.cylinder.widthDirection[1],j1.cylinder.widthDirection[2],j1.cylinder.widthDirection[3]} else if noEvent(abs(j1.cylinder.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]})[1];
//   protected Real j1.cylinder.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]},if noEvent(j1.cylinder.n_z_aux[1] ^ 2.0 + (j1.cylinder.n_z_aux[2] ^ 2.0 + j1.cylinder.n_z_aux[3] ^ 2.0) > 0.000001) then {j1.cylinder.widthDirection[1],j1.cylinder.widthDirection[2],j1.cylinder.widthDirection[3]} else if noEvent(abs(j1.cylinder.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]})[2];
//   protected Real j1.cylinder.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]},if noEvent(j1.cylinder.n_z_aux[1] ^ 2.0 + (j1.cylinder.n_z_aux[2] ^ 2.0 + j1.cylinder.n_z_aux[3] ^ 2.0) > 0.000001) then {j1.cylinder.widthDirection[1],j1.cylinder.widthDirection[2],j1.cylinder.widthDirection[3]} else if noEvent(abs(j1.cylinder.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{j1.cylinder.e_x[1],j1.cylinder.e_x[2],j1.cylinder.e_x[3]})[3];
//   protected output Real j1.cylinder.Form;
//   output Real j1.cylinder.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real j1.cylinder.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real j1.cylinder.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real j1.cylinder.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real j1.cylinder.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real j1.cylinder.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real j1.cylinder.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real j1.cylinder.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real j1.cylinder.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real j1.cylinder.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real j1.cylinder.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real j1.cylinder.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real j1.cylinder.Material;
//   protected output Real j1.cylinder.Extra;
//   Real b1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b1.animation = true \"= true, if animation shall be enabled (show cylinder between frame_a and frame_b)\";
//   parameter Real b1.r[1](quantity = \"Length\", unit = \"m\", start = 0.1) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b1.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.5 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b1.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.1 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b1.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real b1.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real b1.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real b1.innerDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0 \"Inner diameter of cylinder (0 <= innerDiameter <= Diameter)\";
//   parameter Real b1.density(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7700.0 \"Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)\";
//   input Integer b1.color[1](min = 0, max = 255) = 0 \"Color of cylinder\";
//   input Integer b1.color[2](min = 0, max = 255) = 128 \"Color of cylinder\";
//   input Integer b1.color[3](min = 0, max = 255) = 255 \"Color of cylinder\";
//   input Real b1.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   Real b1.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b1.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b1.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b1.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b1.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b1.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b1.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b1.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b1.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean b1.angles_fixed = false \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real b1.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b1.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b1.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer b1.sequence_start[1](min = 1, max = 3) = 1 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b1.sequence_start[2](min = 1, max = 3) = 2 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b1.sequence_start[3](min = 1, max = 3) = 3 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean b1.w_0_fixed = false \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real b1.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b1.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b1.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean b1.z_0_fixed = false \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real b1.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b1.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b1.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Boolean b1.enforceStates = false \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean b1.useQuaternions = true \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer b1.sequence_angleStates[1](min = 1, max = 3) = 1 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b1.sequence_angleStates[2](min = 1, max = 3) = 2 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b1.sequence_angleStates[3](min = 1, max = 3) = 3 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   constant Real b1.pi = 3.141592653589793;
//   final parameter Real b1.R.T[1,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[1,2] = 0.9805806756909201 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[1,3] = 0.19611613513818402 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[2,2] = 0.19611613513818402 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[2,3] = -0.9805806756909201 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[3,1] = -1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.T[3,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b1.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b1.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real b1.lengthDirection[1](unit = \"1\") = b1.r[1] - b1.r_shape[1] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real b1.lengthDirection[2](unit = \"1\") = b1.r[2] - b1.r_shape[2] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real b1.lengthDirection[3](unit = \"1\") = b1.r[3] - b1.r_shape[3] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real b1.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({b1.r[1] - b1.r_shape[1],b1.r[2] - b1.r_shape[2],b1.r[3] - b1.r_shape[3]}) \"Length of cylinder\";
//   final parameter Real b1.innerRadius(quantity = \"Length\", unit = \"m\", min = 0.0) = b1.innerDiameter / 2.0 \"Inner-Radius of cylinder\";
//   parameter Real b1.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.05 \"Diameter of cylinder\";
//   final parameter Real b1.r_CM[1](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({b1.r[1],b1.r[2],b1.r[3]},0.0000000000001) * b1.length) / 2.0)[1] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real b1.r_CM[2](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({b1.r[1],b1.r[2],b1.r[3]},0.0000000000001) * b1.length) / 2.0)[2] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real b1.r_CM[3](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({b1.r[1],b1.r[2],b1.r[3]},0.0000000000001) * b1.length) / 2.0)[3] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real b1.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.141592653589793 * (b1.density * (b1.length * b1.innerRadius ^ 2.0)) \"Mass of hole of cylinder\";
//   final parameter Real b1.radius(quantity = \"Length\", unit = \"m\", min = 0.0) = b1.diameter / 2.0 \"Radius of cylinder\";
//   final parameter Real b1.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.141592653589793 * (b1.density * (b1.length * b1.radius ^ 2.0)) \"Mass of cylinder without hole\";
//   final parameter Real b1.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.mo * (b1.length ^ 2.0 / 12.0 + 0.25 * b1.radius ^ 2.0) - b1.mi * (b1.length ^ 2.0 / 12.0 + 0.25 * b1.innerRadius ^ 2.0) \"Inertia with respect to axis through center of mass, perpendicular to cylinder axis\";
//   final parameter Real b1.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = b1.mo - b1.mi \"Mass of cylinder\";
//   final parameter Real b1.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[1,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[1,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[1,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[2,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[2,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[2,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[3,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[3,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b1.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b1.R,{{(b1.mo * b1.radius ^ 2.0) / 2.0 + ((-b1.mi) * b1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b1.I22,0.0},{0.0,0.0,b1.I22}})[3,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   Real b1.body.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.body.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.body.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.body.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.body.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.body.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.body.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b1.body.animation = false \"= true, if animation shall be enabled (show cylinder and sphere)\";
//   parameter Real b1.body.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = b1.r_CM[1] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real b1.body.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = b1.r_CM[2] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real b1.body.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = b1.r_CM[3] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real b1.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = b1.m \"Mass of rigid body\";
//   parameter Real b1.body.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = b1.I[1,1] \" (1,1) element of inertia tensor\";
//   parameter Real b1.body.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = b1.I[2,2] \" (2,2) element of inertia tensor\";
//   parameter Real b1.body.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = b1.I[3,3] \" (3,3) element of inertia tensor\";
//   parameter Real b1.body.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = b1.I[2,1] \" (2,1) element of inertia tensor\";
//   parameter Real b1.body.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = b1.I[3,1] \" (3,1) element of inertia tensor\";
//   parameter Real b1.body.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = b1.I[3,2] \" (3,2) element of inertia tensor\";
//   Real b1.body.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b1.body.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b1.body.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b1.body.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b1.body.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b1.body.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b1.body.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b1.body.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b1.body.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean b1.body.angles_fixed = b1.angles_fixed \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real b1.body.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = b1.angles_start[1] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b1.body.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = b1.angles_start[2] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b1.body.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = b1.angles_start[3] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer b1.body.sequence_start[1](min = 1, max = 3) = b1.sequence_start[1] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b1.body.sequence_start[2](min = 1, max = 3) = b1.sequence_start[2] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b1.body.sequence_start[3](min = 1, max = 3) = b1.sequence_start[3] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean b1.body.w_0_fixed = b1.w_0_fixed \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real b1.body.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = b1.w_0_start[1] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b1.body.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = b1.w_0_start[2] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b1.body.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = b1.w_0_start[3] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean b1.body.z_0_fixed = b1.z_0_fixed \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real b1.body.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.z_0_start[1] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b1.body.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.z_0_start[2] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b1.body.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.z_0_start[3] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b1.body.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultBodyDiameter \"Diameter of sphere\";
//   input Integer b1.body.sphereColor[1](min = 0, max = 255) = 0 \"Color of sphere\";
//   input Integer b1.body.sphereColor[2](min = 0, max = 255) = 128 \"Color of sphere\";
//   input Integer b1.body.sphereColor[3](min = 0, max = 255) = 255 \"Color of sphere\";
//   input Integer b1.body.cylinderColor[1](min = 0, max = 255) = b1.body.sphereColor[1] \"Color of cylinder\";
//   input Integer b1.body.cylinderColor[2](min = 0, max = 255) = b1.body.sphereColor[2] \"Color of cylinder\";
//   input Integer b1.body.cylinderColor[3](min = 0, max = 255) = b1.body.sphereColor[3] \"Color of cylinder\";
//   input Real b1.body.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean b1.body.enforceStates = b1.enforceStates \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean b1.body.useQuaternions = b1.useQuaternions \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer b1.body.sequence_angleStates[1](min = 1, max = 3) = b1.sequence_angleStates[1] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b1.body.sequence_angleStates[2](min = 1, max = 3) = b1.sequence_angleStates[2] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b1.body.sequence_angleStates[3](min = 1, max = 3) = b1.sequence_angleStates[3] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real b1.body.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.w_0_start[1],b1.body.w_0_start[2],b1.body.w_0_start[3]})[1], fixed = b1.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real b1.body.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.w_0_start[1],b1.body.w_0_start[2],b1.body.w_0_start[3]})[2], fixed = b1.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real b1.body.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.w_0_start[1],b1.body.w_0_start[2],b1.body.w_0_start[3]})[3], fixed = b1.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real b1.body.g_0[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real b1.body.g_0[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real b1.body.g_0[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   protected Real b1.body.Q[1](start = b1.body.Q_start[1], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real b1.body.Q[2](start = b1.body.Q_start[2], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real b1.body.Q[3](start = b1.body.Q_start[3], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real b1.body.Q[4](start = b1.body.Q_start[4], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected parameter Real b1.body.phi_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if b1.body.sequence_start[1] == b1.body.sequence_angleStates[1] and b1.body.sequence_start[2] == b1.body.sequence_angleStates[2] and b1.body.sequence_start[3] == b1.body.sequence_angleStates[3] then b1.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b1.body.R_start,{b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},0)[1] \"Potential angle states at initial time\";
//   protected parameter Real b1.body.phi_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if b1.body.sequence_start[1] == b1.body.sequence_angleStates[1] and b1.body.sequence_start[2] == b1.body.sequence_angleStates[2] and b1.body.sequence_start[3] == b1.body.sequence_angleStates[3] then b1.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b1.body.R_start,{b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},0)[2] \"Potential angle states at initial time\";
//   protected parameter Real b1.body.phi_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if b1.body.sequence_start[1] == b1.body.sequence_angleStates[1] and b1.body.sequence_start[2] == b1.body.sequence_angleStates[2] and b1.body.sequence_start[3] == b1.body.sequence_angleStates[3] then b1.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b1.body.R_start,{b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},0)[3] \"Potential angle states at initial time\";
//   protected Real b1.body.phi[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = b1.body.phi_start[1], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real b1.body.phi[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = b1.body.phi_start[2], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real b1.body.phi[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = b1.body.phi_start[3], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real b1.body.phi_d[1](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real b1.body.phi_d[2](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real b1.body.phi_d[3](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real b1.body.phi_dd[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real b1.body.phi_dd[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real b1.body.phi_dd[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   final parameter Real b1.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_11 \"inertia tensor\";
//   final parameter Real b1.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_21 \"inertia tensor\";
//   final parameter Real b1.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_31 \"inertia tensor\";
//   final parameter Real b1.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_21 \"inertia tensor\";
//   final parameter Real b1.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_22 \"inertia tensor\";
//   final parameter Real b1.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_32 \"inertia tensor\";
//   final parameter Real b1.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_31 \"inertia tensor\";
//   final parameter Real b1.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_32 \"inertia tensor\";
//   final parameter Real b1.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b1.body.I_33 \"inertia tensor\";
//   final parameter Real b1.body.R_start.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b1.body.R_start.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b1.body.R_start.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b1.body.R_start.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real b1.body.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = b1.body.sphereDiameter / 3.0 \"Diameter of cylinder\";
//   final parameter Real b1.body.z_a_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[1] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real b1.body.z_a_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[2] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real b1.body.z_a_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[3] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   Real b1.body.z_a[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[1], fixed = b1.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real b1.body.z_a[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[2], fixed = b1.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real b1.body.z_a[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.R_start,{b1.body.z_0_start[1],b1.body.z_0_start[2],b1.body.z_0_start[3]})[3], fixed = b1.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   protected parameter Real b1.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,{0.0,0.0,0.0,1.0})[1] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real b1.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,{0.0,0.0,0.0,1.0})[2] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real b1.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,{0.0,0.0,0.0,1.0})[3] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real b1.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(b1.body.R_start,{0.0,0.0,0.0,1.0})[4] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   Real b1.frameTranslation.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frameTranslation.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frameTranslation.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frameTranslation.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frameTranslation.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frameTranslation.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frameTranslation.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frameTranslation.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b1.frameTranslation.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b1.frameTranslation.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frameTranslation.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frameTranslation.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b1.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b1.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b1.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b1.frameTranslation.animation = b1.animation \"= true, if animation shall be enabled\";
//   parameter Real b1.frameTranslation.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = b1.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b1.frameTranslation.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = b1.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b1.frameTranslation.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = b1.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String b1.frameTranslation.shapeType = \"pipecylinder\" \" Type of shape\";
//   parameter Real b1.frameTranslation.r_shape[1](quantity = \"Length\", unit = \"m\") = b1.r_shape[1] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b1.frameTranslation.r_shape[2](quantity = \"Length\", unit = \"m\") = b1.r_shape[2] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b1.frameTranslation.r_shape[3](quantity = \"Length\", unit = \"m\") = b1.r_shape[3] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b1.frameTranslation.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b1.frameTranslation.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b1.frameTranslation.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b1.frameTranslation.extra = b1.innerDiameter / b1.diameter \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer b1.frameTranslation.color[1](min = 0, max = 255) = b1.color[1] \" Color of shape\";
//   input Integer b1.frameTranslation.color[2](min = 0, max = 255) = b1.color[2] \" Color of shape\";
//   input Integer b1.frameTranslation.color[3](min = 0, max = 255) = b1.color[3] \" Color of shape\";
//   input Real b1.frameTranslation.specularCoefficient = b1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real b1.frameTranslation.lengthDirection[1](unit = \"1\") = b1.lengthDirection[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b1.frameTranslation.lengthDirection[2](unit = \"1\") = b1.lengthDirection[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b1.frameTranslation.lengthDirection[3](unit = \"1\") = b1.lengthDirection[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b1.frameTranslation.length(quantity = \"Length\", unit = \"m\") = b1.length \" Length of shape\";
//   parameter Real b1.frameTranslation.width(quantity = \"Length\", unit = \"m\", min = 0.0) = b1.diameter \" Width of shape\";
//   parameter Real b1.frameTranslation.height(quantity = \"Length\", unit = \"m\", min = 0.0) = b1.diameter \" Height of shape.\";
//   parameter String b1.frameTranslation.shape.shapeType = b1.frameTranslation.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real b1.frameTranslation.shape.R.T[1,1] = b1.frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[1,2] = b1.frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[1,3] = b1.frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[2,1] = b1.frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[2,2] = b1.frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[2,3] = b1.frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[3,1] = b1.frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[3,2] = b1.frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.T[3,3] = b1.frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real b1.frameTranslation.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = b1.frameTranslation.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real b1.frameTranslation.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = b1.frameTranslation.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real b1.frameTranslation.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = b1.frameTranslation.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real b1.frameTranslation.shape.r[1](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b1.frameTranslation.shape.r[2](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b1.frameTranslation.shape.r[3](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b1.frameTranslation.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b1.frameTranslation.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b1.frameTranslation.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b1.frameTranslation.shape.lengthDirection[1](unit = \"1\") = b1.frameTranslation.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real b1.frameTranslation.shape.lengthDirection[2](unit = \"1\") = b1.frameTranslation.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real b1.frameTranslation.shape.lengthDirection[3](unit = \"1\") = b1.frameTranslation.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real b1.frameTranslation.shape.widthDirection[1](unit = \"1\") = b1.frameTranslation.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real b1.frameTranslation.shape.widthDirection[2](unit = \"1\") = b1.frameTranslation.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real b1.frameTranslation.shape.widthDirection[3](unit = \"1\") = b1.frameTranslation.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real b1.frameTranslation.shape.length(quantity = \"Length\", unit = \"m\") = b1.frameTranslation.length \"Length of visual object\";
//   input Real b1.frameTranslation.shape.width(quantity = \"Length\", unit = \"m\") = b1.frameTranslation.width \"Width of visual object\";
//   input Real b1.frameTranslation.shape.height(quantity = \"Length\", unit = \"m\") = b1.frameTranslation.height \"Height of visual object\";
//   input Real b1.frameTranslation.shape.extra = b1.frameTranslation.extra \"Additional size data for some of the shape types\";
//   input Real b1.frameTranslation.shape.color[1] = Real(b1.frameTranslation.color[1]) \"Color of shape\";
//   input Real b1.frameTranslation.shape.color[2] = Real(b1.frameTranslation.color[2]) \"Color of shape\";
//   input Real b1.frameTranslation.shape.color[3] = Real(b1.frameTranslation.color[3]) \"Color of shape\";
//   input Real b1.frameTranslation.shape.specularCoefficient = b1.frameTranslation.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real b1.frameTranslation.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({b1.frameTranslation.shape.lengthDirection[1],b1.frameTranslation.shape.lengthDirection[2],b1.frameTranslation.shape.lengthDirection[3]});
//   protected Real b1.frameTranslation.shape.e_x[1](unit = \"1\") = if noEvent(b1.frameTranslation.shape.abs_n_x < 0.0000000001) then 1.0 else b1.frameTranslation.shape.lengthDirection[1] / b1.frameTranslation.shape.abs_n_x;
//   protected Real b1.frameTranslation.shape.e_x[2](unit = \"1\") = if noEvent(b1.frameTranslation.shape.abs_n_x < 0.0000000001) then 0.0 else b1.frameTranslation.shape.lengthDirection[2] / b1.frameTranslation.shape.abs_n_x;
//   protected Real b1.frameTranslation.shape.e_x[3](unit = \"1\") = if noEvent(b1.frameTranslation.shape.abs_n_x < 0.0000000001) then 0.0 else b1.frameTranslation.shape.lengthDirection[3] / b1.frameTranslation.shape.abs_n_x;
//   protected Real b1.frameTranslation.shape.n_z_aux[1](unit = \"1\") = b1.frameTranslation.shape.e_x[2] * b1.frameTranslation.shape.widthDirection[3] - b1.frameTranslation.shape.e_x[3] * b1.frameTranslation.shape.widthDirection[2];
//   protected Real b1.frameTranslation.shape.n_z_aux[2](unit = \"1\") = b1.frameTranslation.shape.e_x[3] * b1.frameTranslation.shape.widthDirection[1] - b1.frameTranslation.shape.e_x[1] * b1.frameTranslation.shape.widthDirection[3];
//   protected Real b1.frameTranslation.shape.n_z_aux[3](unit = \"1\") = b1.frameTranslation.shape.e_x[1] * b1.frameTranslation.shape.widthDirection[2] - b1.frameTranslation.shape.e_x[2] * b1.frameTranslation.shape.widthDirection[1];
//   protected Real b1.frameTranslation.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]},if noEvent(b1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 0.000001) then {b1.frameTranslation.shape.widthDirection[1],b1.frameTranslation.shape.widthDirection[2],b1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b1.frameTranslation.shape.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]})[1];
//   protected Real b1.frameTranslation.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]},if noEvent(b1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 0.000001) then {b1.frameTranslation.shape.widthDirection[1],b1.frameTranslation.shape.widthDirection[2],b1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b1.frameTranslation.shape.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]})[2];
//   protected Real b1.frameTranslation.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]},if noEvent(b1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (b1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + b1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 0.000001) then {b1.frameTranslation.shape.widthDirection[1],b1.frameTranslation.shape.widthDirection[2],b1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(b1.frameTranslation.shape.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{b1.frameTranslation.shape.e_x[1],b1.frameTranslation.shape.e_x[2],b1.frameTranslation.shape.e_x[3]})[3];
//   protected output Real b1.frameTranslation.shape.Form;
//   output Real b1.frameTranslation.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b1.frameTranslation.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b1.frameTranslation.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b1.frameTranslation.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b1.frameTranslation.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b1.frameTranslation.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b1.frameTranslation.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b1.frameTranslation.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b1.frameTranslation.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real b1.frameTranslation.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b1.frameTranslation.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b1.frameTranslation.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b1.frameTranslation.shape.Material;
//   protected output Real b1.frameTranslation.shape.Extra;
//   Real b3.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b3.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b3.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b3.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b3.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b3.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b3.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b3.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b3.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b3.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b3.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b3.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b3.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b3.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b3.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b3.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b3.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b3.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b3.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b3.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b3.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b3.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b3.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b3.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b3.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b3.animation = false \"= true, if animation shall be enabled\";
//   parameter Real b3.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = 1.2 \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b3.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b3.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String b3.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real b3.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b3.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b3.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b3.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b3.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b3.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b3.extra = 0.0 \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer b3.color[1](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer b3.color[2](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer b3.color[3](min = 0, max = 255) = 155 \" Color of shape\";
//   input Real b3.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real b3.lengthDirection[1](unit = \"1\") = b3.r[1] - b3.r_shape[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b3.lengthDirection[2](unit = \"1\") = b3.r[2] - b3.r_shape[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b3.lengthDirection[3](unit = \"1\") = b3.r[3] - b3.r_shape[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b3.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({b3.r[1] - b3.r_shape[1],b3.r[2] - b3.r_shape[2],b3.r[3] - b3.r_shape[3]}) \" Length of shape\";
//   parameter Real b3.width(quantity = \"Length\", unit = \"m\", min = 0.0) = b3.length / world.defaultWidthFraction \" Width of shape\";
//   parameter Real b3.height(quantity = \"Length\", unit = \"m\", min = 0.0) = b3.width \" Height of shape.\";
//   Real jointSSP.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_ib.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_ib.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_ib.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_ib.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_ib.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_ib.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_ib.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_ib.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_ib.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_ib.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_ib.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_ib.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_ib.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_im.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_im.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_im.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.frame_im.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.frame_im.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_im.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_im.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.frame_im.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_im.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_im.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.frame_im.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_im.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.frame_im.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.axis.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real jointSSP.axis.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real jointSSP.bearing.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real jointSSP.bearing.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Boolean jointSSP.animation = true \"= true, if animation shall be enabled\";
//   parameter Boolean jointSSP.showMass = true \"= true, if point mass on rod 1 shall be shown (provided animation = true and rod1Mass > 0)\";
//   parameter Real jointSSP.rod1Length(quantity = \"Length\", unit = \"m\", min = 0.000000000000001, start = 1.0) = 1.0488088481701516 \"Distance between the origins of the two spherical joints \";
//   parameter Real jointSSP.rod1Mass(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.0 \"Mass of rod 1 (= point mass located in middle of rod connecting the two spherical joints)\";
//   parameter Real jointSSP.n_b[1](unit = \"1\") = 1.0 \"Axis of prismatic joint fixed and resolved in frame_b\";
//   parameter Real jointSSP.n_b[2](unit = \"1\") = 0.0 \"Axis of prismatic joint fixed and resolved in frame_b\";
//   parameter Real jointSSP.n_b[3](unit = \"1\") = 0.0 \"Axis of prismatic joint fixed and resolved in frame_b\";
//   parameter Real jointSSP.rRod2_ib[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from origin of frame_ib to spherical joint in the middle, resolved in frame_ib\";
//   parameter Real jointSSP.rRod2_ib[2](quantity = \"Length\", unit = \"m\") = 0.2 \"Vector from origin of frame_ib to spherical joint in the middle, resolved in frame_ib\";
//   parameter Real jointSSP.rRod2_ib[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from origin of frame_ib to spherical joint in the middle, resolved in frame_ib\";
//   parameter Real jointSSP.s_offset(quantity = \"Length\", unit = \"m\") = -0.2 \"Relative distance offset of prismatic joint (distance between frame_b and frame_ib = s(t) + s_offset)\";
//   parameter Real jointSSP.s_guess(quantity = \"Length\", unit = \"m\") = 0.0 \"Select the configuration such that at initial time |s(t0)-s_guess|is minimal\";
//   parameter Real jointSSP.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Diameter of the spheres representing the two spherical joints\";
//   input Integer jointSSP.sphereColor[1](min = 0, max = 255) = 255 \"Color of the spheres representing the two spherical joints\";
//   input Integer jointSSP.sphereColor[2](min = 0, max = 255) = 0 \"Color of the spheres representing the two spherical joints\";
//   input Integer jointSSP.sphereColor[3](min = 0, max = 255) = 0 \"Color of the spheres representing the two spherical joints\";
//   input Integer jointSSP.rod1Color[1](min = 0, max = 255) = 0 \"Color of rod 1 connecting the two spherical joint\";
//   input Integer jointSSP.rod1Color[2](min = 0, max = 255) = 128 \"Color of rod 1 connecting the two spherical joint\";
//   input Integer jointSSP.rod1Color[3](min = 0, max = 255) = 255 \"Color of rod 1 connecting the two spherical joint\";
//   input Integer jointSSP.rod2Color[1](min = 0, max = 255) = 0 \"Color of rod 2 connecting the revolute joint and spherical joint 2\";
//   input Integer jointSSP.rod2Color[2](min = 0, max = 255) = 128 \"Color of rod 2 connecting the revolute joint and spherical joint 2\";
//   input Integer jointSSP.rod2Color[3](min = 0, max = 255) = 255 \"Color of rod 2 connecting the revolute joint and spherical joint 2\";
//   parameter Real jointSSP.boxWidthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction of prismatic joint box, resolved in frame_b\";
//   parameter Real jointSSP.boxWidthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction of prismatic joint box, resolved in frame_b\";
//   parameter Real jointSSP.boxWidthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction of prismatic joint box, resolved in frame_b\";
//   parameter Real jointSSP.boxWidth(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Width of prismatic joint box\";
//   input Integer jointSSP.boxColor[1](min = 0, max = 255) = 255 \"Color of prismatic joint box\";
//   input Integer jointSSP.boxColor[2](min = 0, max = 255) = 0 \"Color of prismatic joint box\";
//   input Integer jointSSP.boxColor[3](min = 0, max = 255) = 0 \"Color of prismatic joint box\";
//   input Real jointSSP.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean jointSSP.checkTotalPower = true \"= true, if total power flowing into this component shall be determined (must be zero)\";
//   Real jointSSP.aux \"Denominator used to compute force in rod connecting universal and spherical joint\";
//   Real jointSSP.f_rod(quantity = \"Force\", unit = \"N\") \"Constraint force in direction of the rod (positive, if rod is pressed)\";
//   Real jointSSP.totalPower(quantity = \"Power\", unit = \"W\") \"Total power flowing into this element, if checkTotalPower=true (otherwise dummy)\";
//   Real jointSSP.relativePosition.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   output Real jointSSP.relativePosition.r_rel[1] \"Relative position vector resolved in frame defined by resolveInFrame\";
//   output Real jointSSP.relativePosition.r_rel[2] \"Relative position vector resolved in frame defined by resolveInFrame\";
//   output Real jointSSP.relativePosition.r_rel[3] \"Relative position vector resolved in frame defined by resolveInFrame\";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) jointSSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a \"Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   output Real jointSSP.relativePosition.relativePosition.r_rel[1](quantity = \"Position\", unit = \"m\") \"Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame\";
//   output Real jointSSP.relativePosition.relativePosition.r_rel[2](quantity = \"Position\", unit = \"m\") \"Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame\";
//   output Real jointSSP.relativePosition.relativePosition.r_rel[3](quantity = \"Position\", unit = \"m\") \"Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame\";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) jointSSP.relativePosition.relativePosition.resolveInFrame = jointSSP.relativePosition.resolveInFrame \"Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   output Real jointSSP.position_b[1].y \"Connector of Real output signal\";
//   parameter Real jointSSP.position_b[1].k(start = 1.0) = jointSSP.rRod2_ib[1] \"Constant output value\";
//   output Real jointSSP.position_b[2].y \"Connector of Real output signal\";
//   parameter Real jointSSP.position_b[2].k(start = 1.0) = jointSSP.rRod2_ib[2] \"Constant output value\";
//   output Real jointSSP.position_b[3].y \"Connector of Real output signal\";
//   parameter Real jointSSP.position_b[3].k(start = 1.0) = jointSSP.rRod2_ib[3] \"Constant output value\";
//   parameter Real jointSSP.rod1Diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.sphereDiameter / 2.0 \"Diameter of rod 1 connecting the two spherical joints\";
//   parameter Real jointSSP.boxHeight(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.boxWidth \"Height of prismatic joint box\";
//   parameter Real jointSSP.rod2Diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.rod1Diameter \"Diameter of rod 2 connecting the revolute joint and spherical joint 2\";
//   Real jointSSP.rod1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean jointSSP.rod1.animation = jointSSP.animation \"= true, if animation shall be enabled\";
//   parameter Boolean jointSSP.rod1.showMass = jointSSP.showMass \"= true, if mass shall be shown (provided animation = true and m > 0)\";
//   parameter Boolean jointSSP.rod1.computeRodLength = false \"= true, if rodLength shall be computed during initialization (see info)\";
//   parameter Real jointSSP.rod1.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = jointSSP.rod1Mass \"Mass of rod (= point mass located in middle of rod)\";
//   parameter Real jointSSP.rod1.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.sphereDiameter \"Diameter of spheres respresenting the spherical joints\";
//   input Integer jointSSP.rod1.sphereColor[1](min = 0, max = 255) = jointSSP.sphereColor[1] \"Color of spheres respresenting the spherical joints\";
//   input Integer jointSSP.rod1.sphereColor[2](min = 0, max = 255) = jointSSP.sphereColor[2] \"Color of spheres respresenting the spherical joints\";
//   input Integer jointSSP.rod1.sphereColor[3](min = 0, max = 255) = jointSSP.sphereColor[3] \"Color of spheres respresenting the spherical joints\";
//   input Integer jointSSP.rod1.rodColor[1](min = 0, max = 255) = jointSSP.rod1Color[1] \"Color of rod connecting the two spherical joints\";
//   input Integer jointSSP.rod1.rodColor[2](min = 0, max = 255) = jointSSP.rod1Color[2] \"Color of rod connecting the two spherical joints\";
//   input Integer jointSSP.rod1.rodColor[3](min = 0, max = 255) = jointSSP.rod1Color[3] \"Color of rod connecting the two spherical joints\";
//   input Integer jointSSP.rod1.massColor[1](min = 0, max = 255) = 0 \"Color of sphere representing the mass point\";
//   input Integer jointSSP.rod1.massColor[2](min = 0, max = 255) = 128 \"Color of sphere representing the mass point\";
//   input Integer jointSSP.rod1.massColor[3](min = 0, max = 255) = 255 \"Color of sphere representing the mass point\";
//   input Real jointSSP.rod1.specularCoefficient = jointSSP.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean jointSSP.rod1.kinematicConstraint = false \"= false, if no constraint shall be defined, due to analytically solving a kinematic loop (\\\"false\\\" should not be used by user, but only by MultiBody.Joints.Assemblies joints)\";
//   Real jointSSP.rod1.constraintResidue = jointSSP.rod1.f_rod - jointSSP.f_rod \"Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)\";
//   parameter Boolean jointSSP.rod1.checkTotalPower = false \"= true, if total power flowing into this component shall be determined (must be zero)\";
//   Real jointSSP.rod1.f_rod(quantity = \"Force\", unit = \"N\") \"Constraint force in direction of the rod (positive on frame_a, when directed from frame_a to frame_b)\";
//   Real jointSSP.rod1.rRod_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in world frame\";
//   Real jointSSP.rod1.rRod_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in world frame\";
//   Real jointSSP.rod1.rRod_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in world frame\";
//   Real jointSSP.rod1.rRod_a[1](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in frame_a\";
//   Real jointSSP.rod1.rRod_a[2](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in frame_a\";
//   Real jointSSP.rod1.rRod_a[3](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in frame_a\";
//   Real jointSSP.rod1.eRod_a[1](unit = \"1\") \"Unit vector in direction from frame_a to frame_b, resolved in frame_a\";
//   Real jointSSP.rod1.eRod_a[2](unit = \"1\") \"Unit vector in direction from frame_a to frame_b, resolved in frame_a\";
//   Real jointSSP.rod1.eRod_a[3](unit = \"1\") \"Unit vector in direction from frame_a to frame_b, resolved in frame_a\";
//   Real jointSSP.rod1.r_CM_0[1](quantity = \"Length\", unit = \"m\") \"Dummy if m==0, or position vector from world frame to mid-point of rod, resolved in world frame\";
//   Real jointSSP.rod1.r_CM_0[2](quantity = \"Length\", unit = \"m\") \"Dummy if m==0, or position vector from world frame to mid-point of rod, resolved in world frame\";
//   Real jointSSP.rod1.r_CM_0[3](quantity = \"Length\", unit = \"m\") \"Dummy if m==0, or position vector from world frame to mid-point of rod, resolved in world frame\";
//   Real jointSSP.rod1.v_CM_0[1](quantity = \"Velocity\", unit = \"m/s\") \"First derivative of r_CM_0\";
//   Real jointSSP.rod1.v_CM_0[2](quantity = \"Velocity\", unit = \"m/s\") \"First derivative of r_CM_0\";
//   Real jointSSP.rod1.v_CM_0[3](quantity = \"Velocity\", unit = \"m/s\") \"First derivative of r_CM_0\";
//   Real jointSSP.rod1.f_CM_a[1](quantity = \"Force\", unit = \"N\") \"Dummy if m==0, or inertial force acting at mid-point of rod due to mass oint acceleration, resolved in frame_a\";
//   Real jointSSP.rod1.f_CM_a[2](quantity = \"Force\", unit = \"N\") \"Dummy if m==0, or inertial force acting at mid-point of rod due to mass oint acceleration, resolved in frame_a\";
//   Real jointSSP.rod1.f_CM_a[3](quantity = \"Force\", unit = \"N\") \"Dummy if m==0, or inertial force acting at mid-point of rod due to mass oint acceleration, resolved in frame_a\";
//   Real jointSSP.rod1.f_CM_e[1](quantity = \"Force\", unit = \"N\") \"Dummy if m==0, or projection of f_CM_a onto eRod_a, resolved in frame_a\";
//   Real jointSSP.rod1.f_CM_e[2](quantity = \"Force\", unit = \"N\") \"Dummy if m==0, or projection of f_CM_a onto eRod_a, resolved in frame_a\";
//   Real jointSSP.rod1.f_CM_e[3](quantity = \"Force\", unit = \"N\") \"Dummy if m==0, or projection of f_CM_a onto eRod_a, resolved in frame_a\";
//   Real jointSSP.rod1.f_b_a1[1](quantity = \"Force\", unit = \"N\") \"Force acting at frame_b, but without force in rod, resolved in frame_a\";
//   Real jointSSP.rod1.f_b_a1[2](quantity = \"Force\", unit = \"N\") \"Force acting at frame_b, but without force in rod, resolved in frame_a\";
//   Real jointSSP.rod1.f_b_a1[3](quantity = \"Force\", unit = \"N\") \"Force acting at frame_b, but without force in rod, resolved in frame_a\";
//   Real jointSSP.rod1.totalPower(quantity = \"Power\", unit = \"W\") \"Total power flowing into this element, if checkTotalPower=true (otherwise dummy)\";
//   parameter Real jointSSP.rod1.rodLength(quantity = \"Length\", unit = \"m\", min = 0.000000000000001, start = 1.0, fixed = not jointSSP.rod1.computeRodLength) = jointSSP.rod1Length \"Distance between the origins of frame_a and frame_b (if computeRodLength=true, guess value)\";
//   parameter Real jointSSP.rod1.rodDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.rod1Diameter \"Diameter of rod connecting the two spherical joint\";
//   parameter Real jointSSP.rod1.massDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.rod1.sphereDiameter \"Diameter of sphere representing the mass point\";
//   parameter String jointSSP.rod1.shape_rod.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real jointSSP.rod1.shape_rod.R.T[1,1] = jointSSP.rod1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[1,2] = jointSSP.rod1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[1,3] = jointSSP.rod1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[2,1] = jointSSP.rod1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[2,2] = jointSSP.rod1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[2,3] = jointSSP.rod1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[3,1] = jointSSP.rod1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[3,2] = jointSSP.rod1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.T[3,3] = jointSSP.rod1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_rod.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_rod.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_rod.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_rod.r[1](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_rod.r[2](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_rod.r[3](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_rod.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.lengthDirection[1](unit = \"1\") = jointSSP.rod1.eRod_a[1] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.lengthDirection[2](unit = \"1\") = jointSSP.rod1.eRod_a[2] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.lengthDirection[3](unit = \"1\") = jointSSP.rod1.eRod_a[3] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_rod.length(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.rodLength \"Length of visual object\";
//   input Real jointSSP.rod1.shape_rod.width(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.rodDiameter \"Width of visual object\";
//   input Real jointSSP.rod1.shape_rod.height(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.rodDiameter \"Height of visual object\";
//   input Real jointSSP.rod1.shape_rod.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real jointSSP.rod1.shape_rod.color[1] = Real(jointSSP.rod1.rodColor[1]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_rod.color[2] = Real(jointSSP.rod1.rodColor[2]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_rod.color[3] = Real(jointSSP.rod1.rodColor[3]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_rod.specularCoefficient = jointSSP.rod1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real jointSSP.rod1.shape_rod.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({jointSSP.rod1.shape_rod.lengthDirection[1],jointSSP.rod1.shape_rod.lengthDirection[2],jointSSP.rod1.shape_rod.lengthDirection[3]});
//   protected Real jointSSP.rod1.shape_rod.e_x[1](unit = \"1\") = if noEvent(jointSSP.rod1.shape_rod.abs_n_x < 0.0000000001) then 1.0 else jointSSP.rod1.shape_rod.lengthDirection[1] / jointSSP.rod1.shape_rod.abs_n_x;
//   protected Real jointSSP.rod1.shape_rod.e_x[2](unit = \"1\") = if noEvent(jointSSP.rod1.shape_rod.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod1.shape_rod.lengthDirection[2] / jointSSP.rod1.shape_rod.abs_n_x;
//   protected Real jointSSP.rod1.shape_rod.e_x[3](unit = \"1\") = if noEvent(jointSSP.rod1.shape_rod.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod1.shape_rod.lengthDirection[3] / jointSSP.rod1.shape_rod.abs_n_x;
//   protected Real jointSSP.rod1.shape_rod.n_z_aux[1](unit = \"1\") = jointSSP.rod1.shape_rod.e_x[2] * jointSSP.rod1.shape_rod.widthDirection[3] - jointSSP.rod1.shape_rod.e_x[3] * jointSSP.rod1.shape_rod.widthDirection[2];
//   protected Real jointSSP.rod1.shape_rod.n_z_aux[2](unit = \"1\") = jointSSP.rod1.shape_rod.e_x[3] * jointSSP.rod1.shape_rod.widthDirection[1] - jointSSP.rod1.shape_rod.e_x[1] * jointSSP.rod1.shape_rod.widthDirection[3];
//   protected Real jointSSP.rod1.shape_rod.n_z_aux[3](unit = \"1\") = jointSSP.rod1.shape_rod.e_x[1] * jointSSP.rod1.shape_rod.widthDirection[2] - jointSSP.rod1.shape_rod.e_x[2] * jointSSP.rod1.shape_rod.widthDirection[1];
//   protected Real jointSSP.rod1.shape_rod.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_rod.e_x[1],jointSSP.rod1.shape_rod.e_x[2],jointSSP.rod1.shape_rod.e_x[3]},if noEvent(jointSSP.rod1.shape_rod.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_rod.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_rod.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_rod.widthDirection[1],jointSSP.rod1.shape_rod.widthDirection[2],jointSSP.rod1.shape_rod.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_rod.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_rod.e_x[1],jointSSP.rod1.shape_rod.e_x[2],jointSSP.rod1.shape_rod.e_x[3]})[1];
//   protected Real jointSSP.rod1.shape_rod.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_rod.e_x[1],jointSSP.rod1.shape_rod.e_x[2],jointSSP.rod1.shape_rod.e_x[3]},if noEvent(jointSSP.rod1.shape_rod.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_rod.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_rod.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_rod.widthDirection[1],jointSSP.rod1.shape_rod.widthDirection[2],jointSSP.rod1.shape_rod.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_rod.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_rod.e_x[1],jointSSP.rod1.shape_rod.e_x[2],jointSSP.rod1.shape_rod.e_x[3]})[2];
//   protected Real jointSSP.rod1.shape_rod.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_rod.e_x[1],jointSSP.rod1.shape_rod.e_x[2],jointSSP.rod1.shape_rod.e_x[3]},if noEvent(jointSSP.rod1.shape_rod.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_rod.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_rod.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_rod.widthDirection[1],jointSSP.rod1.shape_rod.widthDirection[2],jointSSP.rod1.shape_rod.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_rod.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_rod.e_x[1],jointSSP.rod1.shape_rod.e_x[2],jointSSP.rod1.shape_rod.e_x[3]})[3];
//   protected output Real jointSSP.rod1.shape_rod.Form;
//   output Real jointSSP.rod1.shape_rod.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod1.shape_rod.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real jointSSP.rod1.shape_rod.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_rod.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_rod.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_rod.Material;
//   protected output Real jointSSP.rod1.shape_rod.Extra;
//   parameter String jointSSP.rod1.shape_a.shapeType = \"sphere\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real jointSSP.rod1.shape_a.R.T[1,1] = jointSSP.rod1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[1,2] = jointSSP.rod1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[1,3] = jointSSP.rod1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[2,1] = jointSSP.rod1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[2,2] = jointSSP.rod1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[2,3] = jointSSP.rod1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[3,1] = jointSSP.rod1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[3,2] = jointSSP.rod1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.T[3,3] = jointSSP.rod1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_a.r[1](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_a.r[2](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_a.r[3](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_a.r_shape[1](quantity = \"Length\", unit = \"m\") = ((-jointSSP.rod1.eRod_a[1]) * jointSSP.rod1.sphereDiameter) / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.r_shape[2](quantity = \"Length\", unit = \"m\") = ((-jointSSP.rod1.eRod_a[2]) * jointSSP.rod1.sphereDiameter) / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.r_shape[3](quantity = \"Length\", unit = \"m\") = ((-jointSSP.rod1.eRod_a[3]) * jointSSP.rod1.sphereDiameter) / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.lengthDirection[1](unit = \"1\") = jointSSP.rod1.eRod_a[1] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.lengthDirection[2](unit = \"1\") = jointSSP.rod1.eRod_a[2] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.lengthDirection[3](unit = \"1\") = jointSSP.rod1.eRod_a[3] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_a.length(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.sphereDiameter \"Length of visual object\";
//   input Real jointSSP.rod1.shape_a.width(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.sphereDiameter \"Width of visual object\";
//   input Real jointSSP.rod1.shape_a.height(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.sphereDiameter \"Height of visual object\";
//   input Real jointSSP.rod1.shape_a.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real jointSSP.rod1.shape_a.color[1] = Real(jointSSP.rod1.sphereColor[1]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_a.color[2] = Real(jointSSP.rod1.sphereColor[2]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_a.color[3] = Real(jointSSP.rod1.sphereColor[3]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_a.specularCoefficient = jointSSP.rod1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real jointSSP.rod1.shape_a.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({jointSSP.rod1.shape_a.lengthDirection[1],jointSSP.rod1.shape_a.lengthDirection[2],jointSSP.rod1.shape_a.lengthDirection[3]});
//   protected Real jointSSP.rod1.shape_a.e_x[1](unit = \"1\") = if noEvent(jointSSP.rod1.shape_a.abs_n_x < 0.0000000001) then 1.0 else jointSSP.rod1.shape_a.lengthDirection[1] / jointSSP.rod1.shape_a.abs_n_x;
//   protected Real jointSSP.rod1.shape_a.e_x[2](unit = \"1\") = if noEvent(jointSSP.rod1.shape_a.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod1.shape_a.lengthDirection[2] / jointSSP.rod1.shape_a.abs_n_x;
//   protected Real jointSSP.rod1.shape_a.e_x[3](unit = \"1\") = if noEvent(jointSSP.rod1.shape_a.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod1.shape_a.lengthDirection[3] / jointSSP.rod1.shape_a.abs_n_x;
//   protected Real jointSSP.rod1.shape_a.n_z_aux[1](unit = \"1\") = jointSSP.rod1.shape_a.e_x[2] * jointSSP.rod1.shape_a.widthDirection[3] - jointSSP.rod1.shape_a.e_x[3] * jointSSP.rod1.shape_a.widthDirection[2];
//   protected Real jointSSP.rod1.shape_a.n_z_aux[2](unit = \"1\") = jointSSP.rod1.shape_a.e_x[3] * jointSSP.rod1.shape_a.widthDirection[1] - jointSSP.rod1.shape_a.e_x[1] * jointSSP.rod1.shape_a.widthDirection[3];
//   protected Real jointSSP.rod1.shape_a.n_z_aux[3](unit = \"1\") = jointSSP.rod1.shape_a.e_x[1] * jointSSP.rod1.shape_a.widthDirection[2] - jointSSP.rod1.shape_a.e_x[2] * jointSSP.rod1.shape_a.widthDirection[1];
//   protected Real jointSSP.rod1.shape_a.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_a.e_x[1],jointSSP.rod1.shape_a.e_x[2],jointSSP.rod1.shape_a.e_x[3]},if noEvent(jointSSP.rod1.shape_a.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_a.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_a.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_a.widthDirection[1],jointSSP.rod1.shape_a.widthDirection[2],jointSSP.rod1.shape_a.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_a.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_a.e_x[1],jointSSP.rod1.shape_a.e_x[2],jointSSP.rod1.shape_a.e_x[3]})[1];
//   protected Real jointSSP.rod1.shape_a.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_a.e_x[1],jointSSP.rod1.shape_a.e_x[2],jointSSP.rod1.shape_a.e_x[3]},if noEvent(jointSSP.rod1.shape_a.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_a.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_a.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_a.widthDirection[1],jointSSP.rod1.shape_a.widthDirection[2],jointSSP.rod1.shape_a.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_a.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_a.e_x[1],jointSSP.rod1.shape_a.e_x[2],jointSSP.rod1.shape_a.e_x[3]})[2];
//   protected Real jointSSP.rod1.shape_a.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_a.e_x[1],jointSSP.rod1.shape_a.e_x[2],jointSSP.rod1.shape_a.e_x[3]},if noEvent(jointSSP.rod1.shape_a.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_a.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_a.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_a.widthDirection[1],jointSSP.rod1.shape_a.widthDirection[2],jointSSP.rod1.shape_a.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_a.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_a.e_x[1],jointSSP.rod1.shape_a.e_x[2],jointSSP.rod1.shape_a.e_x[3]})[3];
//   protected output Real jointSSP.rod1.shape_a.Form;
//   output Real jointSSP.rod1.shape_a.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod1.shape_a.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real jointSSP.rod1.shape_a.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_a.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_a.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_a.Material;
//   protected output Real jointSSP.rod1.shape_a.Extra;
//   parameter String jointSSP.rod1.shape_b.shapeType = \"sphere\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real jointSSP.rod1.shape_b.R.T[1,1] = jointSSP.rod1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[1,2] = jointSSP.rod1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[1,3] = jointSSP.rod1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[2,1] = jointSSP.rod1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[2,2] = jointSSP.rod1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[2,3] = jointSSP.rod1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[3,1] = jointSSP.rod1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[3,2] = jointSSP.rod1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.T[3,3] = jointSSP.rod1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod1.shape_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod1.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod1.shape_b.r[1](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_b.r[2](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_b.r[3](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod1.shape_b.r_shape[1](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.eRod_a[1] * (jointSSP.rod1.rodLength + (-jointSSP.rod1.sphereDiameter) / 2.0) \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.r_shape[2](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.eRod_a[2] * (jointSSP.rod1.rodLength + (-jointSSP.rod1.sphereDiameter) / 2.0) \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.r_shape[3](quantity = \"Length\", unit = \"m\") = jointSSP.rod1.eRod_a[3] * (jointSSP.rod1.rodLength + (-jointSSP.rod1.sphereDiameter) / 2.0) \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.lengthDirection[1](unit = \"1\") = jointSSP.rod1.eRod_a[1] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.lengthDirection[2](unit = \"1\") = jointSSP.rod1.eRod_a[2] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.lengthDirection[3](unit = \"1\") = jointSSP.rod1.eRod_a[3] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod1.shape_b.length(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.sphereDiameter \"Length of visual object\";
//   input Real jointSSP.rod1.shape_b.width(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.sphereDiameter \"Width of visual object\";
//   input Real jointSSP.rod1.shape_b.height(quantity = \"Length\", unit = \"m\") = jointSSP.rod1.sphereDiameter \"Height of visual object\";
//   input Real jointSSP.rod1.shape_b.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real jointSSP.rod1.shape_b.color[1] = Real(jointSSP.rod1.sphereColor[1]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_b.color[2] = Real(jointSSP.rod1.sphereColor[2]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_b.color[3] = Real(jointSSP.rod1.sphereColor[3]) \"Color of shape\";
//   input Real jointSSP.rod1.shape_b.specularCoefficient = jointSSP.rod1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real jointSSP.rod1.shape_b.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({jointSSP.rod1.shape_b.lengthDirection[1],jointSSP.rod1.shape_b.lengthDirection[2],jointSSP.rod1.shape_b.lengthDirection[3]});
//   protected Real jointSSP.rod1.shape_b.e_x[1](unit = \"1\") = if noEvent(jointSSP.rod1.shape_b.abs_n_x < 0.0000000001) then 1.0 else jointSSP.rod1.shape_b.lengthDirection[1] / jointSSP.rod1.shape_b.abs_n_x;
//   protected Real jointSSP.rod1.shape_b.e_x[2](unit = \"1\") = if noEvent(jointSSP.rod1.shape_b.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod1.shape_b.lengthDirection[2] / jointSSP.rod1.shape_b.abs_n_x;
//   protected Real jointSSP.rod1.shape_b.e_x[3](unit = \"1\") = if noEvent(jointSSP.rod1.shape_b.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod1.shape_b.lengthDirection[3] / jointSSP.rod1.shape_b.abs_n_x;
//   protected Real jointSSP.rod1.shape_b.n_z_aux[1](unit = \"1\") = jointSSP.rod1.shape_b.e_x[2] * jointSSP.rod1.shape_b.widthDirection[3] - jointSSP.rod1.shape_b.e_x[3] * jointSSP.rod1.shape_b.widthDirection[2];
//   protected Real jointSSP.rod1.shape_b.n_z_aux[2](unit = \"1\") = jointSSP.rod1.shape_b.e_x[3] * jointSSP.rod1.shape_b.widthDirection[1] - jointSSP.rod1.shape_b.e_x[1] * jointSSP.rod1.shape_b.widthDirection[3];
//   protected Real jointSSP.rod1.shape_b.n_z_aux[3](unit = \"1\") = jointSSP.rod1.shape_b.e_x[1] * jointSSP.rod1.shape_b.widthDirection[2] - jointSSP.rod1.shape_b.e_x[2] * jointSSP.rod1.shape_b.widthDirection[1];
//   protected Real jointSSP.rod1.shape_b.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_b.e_x[1],jointSSP.rod1.shape_b.e_x[2],jointSSP.rod1.shape_b.e_x[3]},if noEvent(jointSSP.rod1.shape_b.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_b.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_b.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_b.widthDirection[1],jointSSP.rod1.shape_b.widthDirection[2],jointSSP.rod1.shape_b.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_b.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_b.e_x[1],jointSSP.rod1.shape_b.e_x[2],jointSSP.rod1.shape_b.e_x[3]})[1];
//   protected Real jointSSP.rod1.shape_b.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_b.e_x[1],jointSSP.rod1.shape_b.e_x[2],jointSSP.rod1.shape_b.e_x[3]},if noEvent(jointSSP.rod1.shape_b.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_b.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_b.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_b.widthDirection[1],jointSSP.rod1.shape_b.widthDirection[2],jointSSP.rod1.shape_b.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_b.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_b.e_x[1],jointSSP.rod1.shape_b.e_x[2],jointSSP.rod1.shape_b.e_x[3]})[2];
//   protected Real jointSSP.rod1.shape_b.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod1.shape_b.e_x[1],jointSSP.rod1.shape_b.e_x[2],jointSSP.rod1.shape_b.e_x[3]},if noEvent(jointSSP.rod1.shape_b.n_z_aux[1] ^ 2.0 + (jointSSP.rod1.shape_b.n_z_aux[2] ^ 2.0 + jointSSP.rod1.shape_b.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod1.shape_b.widthDirection[1],jointSSP.rod1.shape_b.widthDirection[2],jointSSP.rod1.shape_b.widthDirection[3]} else if noEvent(abs(jointSSP.rod1.shape_b.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod1.shape_b.e_x[1],jointSSP.rod1.shape_b.e_x[2],jointSSP.rod1.shape_b.e_x[3]})[3];
//   protected output Real jointSSP.rod1.shape_b.Form;
//   output Real jointSSP.rod1.shape_b.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod1.shape_b.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real jointSSP.rod1.shape_b.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_b.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_b.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod1.shape_b.Material;
//   protected output Real jointSSP.rod1.shape_b.Extra;
//   Real jointSSP.prismatic.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.prismatic.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.prismatic.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.prismatic.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.prismatic.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.prismatic.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.prismatic.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.prismatic.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.prismatic.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.prismatic.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.prismatic.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.prismatic.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.prismatic.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.prismatic.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.prismatic.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.prismatic.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.prismatic.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.prismatic.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.prismatic.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.prismatic.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.prismatic.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.prismatic.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.prismatic.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.prismatic.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.prismatic.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.prismatic.axis.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real jointSSP.prismatic.axis.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real jointSSP.prismatic.bearing.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real jointSSP.prismatic.bearing.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   input Real jointSSP.prismatic.position_a[1] \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint\";
//   input Real jointSSP.prismatic.position_a[2] \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint\";
//   input Real jointSSP.prismatic.position_a[3] \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint\";
//   input Real jointSSP.prismatic.position_b[1] \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint\";
//   input Real jointSSP.prismatic.position_b[2] \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint\";
//   input Real jointSSP.prismatic.position_b[3] \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint\";
//   parameter Boolean jointSSP.prismatic.animation = jointSSP.animation \"= true, if animation shall be enabled\";
//   parameter Real jointSSP.prismatic.length(quantity = \"Length\", unit = \"m\", start = 1.0) = jointSSP.rod1Length \"Fixed length of length constraint\";
//   parameter Real jointSSP.prismatic.n[1](unit = \"1\") = jointSSP.n_b[1] \"Axis of translation resolved in frame_a (= same as in frame_b)\";
//   parameter Real jointSSP.prismatic.n[2](unit = \"1\") = jointSSP.n_b[2] \"Axis of translation resolved in frame_a (= same as in frame_b)\";
//   parameter Real jointSSP.prismatic.n[3](unit = \"1\") = jointSSP.n_b[3] \"Axis of translation resolved in frame_a (= same as in frame_b)\";
//   parameter Real jointSSP.prismatic.s_offset(quantity = \"Length\", unit = \"m\") = jointSSP.s_offset \"Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)\";
//   parameter Real jointSSP.prismatic.s_guess(quantity = \"Length\", unit = \"m\") = jointSSP.s_guess \"Select the configuration such that at initial time |s(t0)-s_guess|is minimal\";
//   parameter Real jointSSP.prismatic.boxWidthDirection[1](unit = \"1\") = jointSSP.boxWidthDirection[1] \"Vector in width direction of box, resolved in frame_a\";
//   parameter Real jointSSP.prismatic.boxWidthDirection[2](unit = \"1\") = jointSSP.boxWidthDirection[2] \"Vector in width direction of box, resolved in frame_a\";
//   parameter Real jointSSP.prismatic.boxWidthDirection[3](unit = \"1\") = jointSSP.boxWidthDirection[3] \"Vector in width direction of box, resolved in frame_a\";
//   parameter Real jointSSP.prismatic.boxWidth(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.boxWidth \"Width of prismatic joint box\";
//   input Integer jointSSP.prismatic.boxColor[1](min = 0, max = 255) = jointSSP.boxColor[1] \"Color of prismatic joint box\";
//   input Integer jointSSP.prismatic.boxColor[2](min = 0, max = 255) = jointSSP.boxColor[2] \"Color of prismatic joint box\";
//   input Integer jointSSP.prismatic.boxColor[3](min = 0, max = 255) = jointSSP.boxColor[3] \"Color of prismatic joint box\";
//   input Real jointSSP.prismatic.specularCoefficient = jointSSP.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   final parameter Boolean jointSSP.prismatic.positiveBranch(fixed = false) \"Selection of one of the two solutions of the non-linear constraint equation\";
//   Real jointSSP.prismatic.s(quantity = \"Length\", unit = \"m\") \"Relative distance between frame_a and frame_b along axis n = s + s_offset)\";
//   Real jointSSP.prismatic.distance(quantity = \"Length\", unit = \"m\") \"Relative distance between frame_a and frame_b along axis n\";
//   Real jointSSP.prismatic.r_rel_a[1](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in frame_a\";
//   Real jointSSP.prismatic.r_rel_a[2](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in frame_a\";
//   Real jointSSP.prismatic.r_rel_a[3](quantity = \"Length\", unit = \"m\") \"Position vector from frame_a to frame_b resolved in frame_a\";
//   Real jointSSP.prismatic.f(quantity = \"Force\", unit = \"N\") \"= axis.f (driving force in the axis)\";
//   protected Real jointSSP.prismatic.r_a[1](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.position_a[1] \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint\";
//   protected Real jointSSP.prismatic.r_a[2](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.position_a[2] \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint\";
//   protected Real jointSSP.prismatic.r_a[3](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.position_a[3] \"Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint\";
//   protected Real jointSSP.prismatic.r_b[1](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.position_b[1] \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint\";
//   protected Real jointSSP.prismatic.r_b[2](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.position_b[2] \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint\";
//   protected Real jointSSP.prismatic.r_b[3](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.position_b[3] \"Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint\";
//   protected Real jointSSP.prismatic.rbra[1](quantity = \"Length\", unit = \"m\") \"= rb - ra\";
//   protected Real jointSSP.prismatic.rbra[2](quantity = \"Length\", unit = \"m\") \"= rb - ra\";
//   protected Real jointSSP.prismatic.rbra[3](quantity = \"Length\", unit = \"m\") \"= rb - ra\";
//   protected Real jointSSP.prismatic.B \"Coefficient B of equation: s*s + B*s + C = 0\";
//   protected Real jointSSP.prismatic.C \"Coefficient C of equation: s*s + B*s + C = 0\";
//   protected Real jointSSP.prismatic.k1 \"Constant of quadratic equation solution\";
//   protected Real jointSSP.prismatic.k2 \"Constant of quadratic equation solution\";
//   protected Real jointSSP.prismatic.k1a(start = 1.0);
//   protected Real jointSSP.prismatic.k1b;
//   final parameter Real jointSSP.prismatic.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({jointSSP.prismatic.n[1],jointSSP.prismatic.n[2],jointSSP.prismatic.n[3]},0.0000000000001)[1] \"Unit vector in direction of translation axis, resolved in frame_a\";
//   final parameter Real jointSSP.prismatic.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({jointSSP.prismatic.n[1],jointSSP.prismatic.n[2],jointSSP.prismatic.n[3]},0.0000000000001)[2] \"Unit vector in direction of translation axis, resolved in frame_a\";
//   final parameter Real jointSSP.prismatic.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({jointSSP.prismatic.n[1],jointSSP.prismatic.n[2],jointSSP.prismatic.n[3]},0.0000000000001)[3] \"Unit vector in direction of translation axis, resolved in frame_a\";
//   parameter Real jointSSP.prismatic.boxHeight(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.boxHeight \"Height of prismatic joint box\";
//   parameter String jointSSP.prismatic.box.shapeType = \"box\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real jointSSP.prismatic.box.R.T[1,1] = jointSSP.prismatic.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[1,2] = jointSSP.prismatic.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[1,3] = jointSSP.prismatic.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[2,1] = jointSSP.prismatic.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[2,2] = jointSSP.prismatic.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[2,3] = jointSSP.prismatic.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[3,1] = jointSSP.prismatic.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[3,2] = jointSSP.prismatic.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.T[3,3] = jointSSP.prismatic.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.prismatic.box.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.prismatic.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.prismatic.box.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.prismatic.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.prismatic.box.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.prismatic.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.prismatic.box.r[1](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.prismatic.box.r[2](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.prismatic.box.r[3](quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.prismatic.box.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.prismatic.box.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.prismatic.box.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.prismatic.box.lengthDirection[1](unit = \"1\") = jointSSP.prismatic.e[1] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.prismatic.box.lengthDirection[2](unit = \"1\") = jointSSP.prismatic.e[2] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.prismatic.box.lengthDirection[3](unit = \"1\") = jointSSP.prismatic.e[3] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.prismatic.box.widthDirection[1](unit = \"1\") = jointSSP.prismatic.boxWidthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.prismatic.box.widthDirection[2](unit = \"1\") = jointSSP.prismatic.boxWidthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.prismatic.box.widthDirection[3](unit = \"1\") = jointSSP.prismatic.boxWidthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.prismatic.box.length(quantity = \"Length\", unit = \"m\") = if noEvent(abs(jointSSP.prismatic.s + jointSSP.prismatic.s_offset) > 0.000001) then jointSSP.prismatic.s + jointSSP.prismatic.s_offset else 0.000001 \"Length of visual object\";
//   input Real jointSSP.prismatic.box.width(quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.boxWidth \"Width of visual object\";
//   input Real jointSSP.prismatic.box.height(quantity = \"Length\", unit = \"m\") = jointSSP.prismatic.boxHeight \"Height of visual object\";
//   input Real jointSSP.prismatic.box.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real jointSSP.prismatic.box.color[1] = Real(jointSSP.prismatic.boxColor[1]) \"Color of shape\";
//   input Real jointSSP.prismatic.box.color[2] = Real(jointSSP.prismatic.boxColor[2]) \"Color of shape\";
//   input Real jointSSP.prismatic.box.color[3] = Real(jointSSP.prismatic.boxColor[3]) \"Color of shape\";
//   input Real jointSSP.prismatic.box.specularCoefficient = jointSSP.prismatic.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real jointSSP.prismatic.box.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({jointSSP.prismatic.box.lengthDirection[1],jointSSP.prismatic.box.lengthDirection[2],jointSSP.prismatic.box.lengthDirection[3]});
//   protected Real jointSSP.prismatic.box.e_x[1](unit = \"1\") = if noEvent(jointSSP.prismatic.box.abs_n_x < 0.0000000001) then 1.0 else jointSSP.prismatic.box.lengthDirection[1] / jointSSP.prismatic.box.abs_n_x;
//   protected Real jointSSP.prismatic.box.e_x[2](unit = \"1\") = if noEvent(jointSSP.prismatic.box.abs_n_x < 0.0000000001) then 0.0 else jointSSP.prismatic.box.lengthDirection[2] / jointSSP.prismatic.box.abs_n_x;
//   protected Real jointSSP.prismatic.box.e_x[3](unit = \"1\") = if noEvent(jointSSP.prismatic.box.abs_n_x < 0.0000000001) then 0.0 else jointSSP.prismatic.box.lengthDirection[3] / jointSSP.prismatic.box.abs_n_x;
//   protected Real jointSSP.prismatic.box.n_z_aux[1](unit = \"1\") = jointSSP.prismatic.box.e_x[2] * jointSSP.prismatic.box.widthDirection[3] - jointSSP.prismatic.box.e_x[3] * jointSSP.prismatic.box.widthDirection[2];
//   protected Real jointSSP.prismatic.box.n_z_aux[2](unit = \"1\") = jointSSP.prismatic.box.e_x[3] * jointSSP.prismatic.box.widthDirection[1] - jointSSP.prismatic.box.e_x[1] * jointSSP.prismatic.box.widthDirection[3];
//   protected Real jointSSP.prismatic.box.n_z_aux[3](unit = \"1\") = jointSSP.prismatic.box.e_x[1] * jointSSP.prismatic.box.widthDirection[2] - jointSSP.prismatic.box.e_x[2] * jointSSP.prismatic.box.widthDirection[1];
//   protected Real jointSSP.prismatic.box.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.prismatic.box.e_x[1],jointSSP.prismatic.box.e_x[2],jointSSP.prismatic.box.e_x[3]},if noEvent(jointSSP.prismatic.box.n_z_aux[1] ^ 2.0 + (jointSSP.prismatic.box.n_z_aux[2] ^ 2.0 + jointSSP.prismatic.box.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.prismatic.box.widthDirection[1],jointSSP.prismatic.box.widthDirection[2],jointSSP.prismatic.box.widthDirection[3]} else if noEvent(abs(jointSSP.prismatic.box.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.prismatic.box.e_x[1],jointSSP.prismatic.box.e_x[2],jointSSP.prismatic.box.e_x[3]})[1];
//   protected Real jointSSP.prismatic.box.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.prismatic.box.e_x[1],jointSSP.prismatic.box.e_x[2],jointSSP.prismatic.box.e_x[3]},if noEvent(jointSSP.prismatic.box.n_z_aux[1] ^ 2.0 + (jointSSP.prismatic.box.n_z_aux[2] ^ 2.0 + jointSSP.prismatic.box.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.prismatic.box.widthDirection[1],jointSSP.prismatic.box.widthDirection[2],jointSSP.prismatic.box.widthDirection[3]} else if noEvent(abs(jointSSP.prismatic.box.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.prismatic.box.e_x[1],jointSSP.prismatic.box.e_x[2],jointSSP.prismatic.box.e_x[3]})[2];
//   protected Real jointSSP.prismatic.box.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.prismatic.box.e_x[1],jointSSP.prismatic.box.e_x[2],jointSSP.prismatic.box.e_x[3]},if noEvent(jointSSP.prismatic.box.n_z_aux[1] ^ 2.0 + (jointSSP.prismatic.box.n_z_aux[2] ^ 2.0 + jointSSP.prismatic.box.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.prismatic.box.widthDirection[1],jointSSP.prismatic.box.widthDirection[2],jointSSP.prismatic.box.widthDirection[3]} else if noEvent(abs(jointSSP.prismatic.box.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.prismatic.box.e_x[1],jointSSP.prismatic.box.e_x[2],jointSSP.prismatic.box.e_x[3]})[3];
//   protected output Real jointSSP.prismatic.box.Form;
//   output Real jointSSP.prismatic.box.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.prismatic.box.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.prismatic.box.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.prismatic.box.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.prismatic.box.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.prismatic.box.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.prismatic.box.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.prismatic.box.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.prismatic.box.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real jointSSP.prismatic.box.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.prismatic.box.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.prismatic.box.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.prismatic.box.Material;
//   protected output Real jointSSP.prismatic.box.Extra;
//   Real jointSSP.rod2.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod2.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod2.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod2.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod2.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod2.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod2.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod2.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod2.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod2.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod2.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real jointSSP.rod2.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real jointSSP.rod2.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod2.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod2.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real jointSSP.rod2.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod2.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod2.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real jointSSP.rod2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real jointSSP.rod2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean jointSSP.rod2.animation = jointSSP.animation \"= true, if animation shall be enabled\";
//   parameter Real jointSSP.rod2.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = jointSSP.rRod2_ib[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real jointSSP.rod2.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = jointSSP.rRod2_ib[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real jointSSP.rod2.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = jointSSP.rRod2_ib[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String jointSSP.rod2.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real jointSSP.rod2.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real jointSSP.rod2.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real jointSSP.rod2.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real jointSSP.rod2.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real jointSSP.rod2.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real jointSSP.rod2.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real jointSSP.rod2.extra = 0.0 \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer jointSSP.rod2.color[1](min = 0, max = 255) = jointSSP.rod2Color[1] \" Color of shape\";
//   input Integer jointSSP.rod2.color[2](min = 0, max = 255) = jointSSP.rod2Color[2] \" Color of shape\";
//   input Integer jointSSP.rod2.color[3](min = 0, max = 255) = jointSSP.rod2Color[3] \" Color of shape\";
//   input Real jointSSP.rod2.specularCoefficient = jointSSP.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real jointSSP.rod2.lengthDirection[1](unit = \"1\") = jointSSP.rod2.r[1] - jointSSP.rod2.r_shape[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real jointSSP.rod2.lengthDirection[2](unit = \"1\") = jointSSP.rod2.r[2] - jointSSP.rod2.r_shape[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real jointSSP.rod2.lengthDirection[3](unit = \"1\") = jointSSP.rod2.r[3] - jointSSP.rod2.r_shape[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real jointSSP.rod2.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({jointSSP.rod2.r[1] - jointSSP.rod2.r_shape[1],jointSSP.rod2.r[2] - jointSSP.rod2.r_shape[2],jointSSP.rod2.r[3] - jointSSP.rod2.r_shape[3]}) \" Length of shape\";
//   parameter Real jointSSP.rod2.width(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.rod2Diameter \" Width of shape\";
//   parameter Real jointSSP.rod2.height(quantity = \"Length\", unit = \"m\", min = 0.0) = jointSSP.rod2Diameter \" Height of shape.\";
//   parameter String jointSSP.rod2.shape.shapeType = jointSSP.rod2.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real jointSSP.rod2.shape.R.T[1,1] = jointSSP.rod2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[1,2] = jointSSP.rod2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[1,3] = jointSSP.rod2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[2,1] = jointSSP.rod2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[2,2] = jointSSP.rod2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[2,3] = jointSSP.rod2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[3,1] = jointSSP.rod2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[3,2] = jointSSP.rod2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.T[3,3] = jointSSP.rod2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real jointSSP.rod2.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod2.frame_a.R.w[1] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod2.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod2.frame_a.R.w[2] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod2.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = jointSSP.rod2.frame_a.R.w[3] \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real jointSSP.rod2.shape.r[1](quantity = \"Length\", unit = \"m\") = jointSSP.rod2.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod2.shape.r[2](quantity = \"Length\", unit = \"m\") = jointSSP.rod2.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod2.shape.r[3](quantity = \"Length\", unit = \"m\") = jointSSP.rod2.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real jointSSP.rod2.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = jointSSP.rod2.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod2.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = jointSSP.rod2.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod2.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = jointSSP.rod2.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real jointSSP.rod2.shape.lengthDirection[1](unit = \"1\") = jointSSP.rod2.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod2.shape.lengthDirection[2](unit = \"1\") = jointSSP.rod2.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod2.shape.lengthDirection[3](unit = \"1\") = jointSSP.rod2.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real jointSSP.rod2.shape.widthDirection[1](unit = \"1\") = jointSSP.rod2.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod2.shape.widthDirection[2](unit = \"1\") = jointSSP.rod2.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod2.shape.widthDirection[3](unit = \"1\") = jointSSP.rod2.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real jointSSP.rod2.shape.length(quantity = \"Length\", unit = \"m\") = jointSSP.rod2.length \"Length of visual object\";
//   input Real jointSSP.rod2.shape.width(quantity = \"Length\", unit = \"m\") = jointSSP.rod2.width \"Width of visual object\";
//   input Real jointSSP.rod2.shape.height(quantity = \"Length\", unit = \"m\") = jointSSP.rod2.height \"Height of visual object\";
//   input Real jointSSP.rod2.shape.extra = jointSSP.rod2.extra \"Additional size data for some of the shape types\";
//   input Real jointSSP.rod2.shape.color[1] = Real(jointSSP.rod2.color[1]) \"Color of shape\";
//   input Real jointSSP.rod2.shape.color[2] = Real(jointSSP.rod2.color[2]) \"Color of shape\";
//   input Real jointSSP.rod2.shape.color[3] = Real(jointSSP.rod2.color[3]) \"Color of shape\";
//   input Real jointSSP.rod2.shape.specularCoefficient = jointSSP.rod2.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real jointSSP.rod2.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({jointSSP.rod2.shape.lengthDirection[1],jointSSP.rod2.shape.lengthDirection[2],jointSSP.rod2.shape.lengthDirection[3]});
//   protected Real jointSSP.rod2.shape.e_x[1](unit = \"1\") = if noEvent(jointSSP.rod2.shape.abs_n_x < 0.0000000001) then 1.0 else jointSSP.rod2.shape.lengthDirection[1] / jointSSP.rod2.shape.abs_n_x;
//   protected Real jointSSP.rod2.shape.e_x[2](unit = \"1\") = if noEvent(jointSSP.rod2.shape.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod2.shape.lengthDirection[2] / jointSSP.rod2.shape.abs_n_x;
//   protected Real jointSSP.rod2.shape.e_x[3](unit = \"1\") = if noEvent(jointSSP.rod2.shape.abs_n_x < 0.0000000001) then 0.0 else jointSSP.rod2.shape.lengthDirection[3] / jointSSP.rod2.shape.abs_n_x;
//   protected Real jointSSP.rod2.shape.n_z_aux[1](unit = \"1\") = jointSSP.rod2.shape.e_x[2] * jointSSP.rod2.shape.widthDirection[3] - jointSSP.rod2.shape.e_x[3] * jointSSP.rod2.shape.widthDirection[2];
//   protected Real jointSSP.rod2.shape.n_z_aux[2](unit = \"1\") = jointSSP.rod2.shape.e_x[3] * jointSSP.rod2.shape.widthDirection[1] - jointSSP.rod2.shape.e_x[1] * jointSSP.rod2.shape.widthDirection[3];
//   protected Real jointSSP.rod2.shape.n_z_aux[3](unit = \"1\") = jointSSP.rod2.shape.e_x[1] * jointSSP.rod2.shape.widthDirection[2] - jointSSP.rod2.shape.e_x[2] * jointSSP.rod2.shape.widthDirection[1];
//   protected Real jointSSP.rod2.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod2.shape.e_x[1],jointSSP.rod2.shape.e_x[2],jointSSP.rod2.shape.e_x[3]},if noEvent(jointSSP.rod2.shape.n_z_aux[1] ^ 2.0 + (jointSSP.rod2.shape.n_z_aux[2] ^ 2.0 + jointSSP.rod2.shape.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod2.shape.widthDirection[1],jointSSP.rod2.shape.widthDirection[2],jointSSP.rod2.shape.widthDirection[3]} else if noEvent(abs(jointSSP.rod2.shape.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod2.shape.e_x[1],jointSSP.rod2.shape.e_x[2],jointSSP.rod2.shape.e_x[3]})[1];
//   protected Real jointSSP.rod2.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod2.shape.e_x[1],jointSSP.rod2.shape.e_x[2],jointSSP.rod2.shape.e_x[3]},if noEvent(jointSSP.rod2.shape.n_z_aux[1] ^ 2.0 + (jointSSP.rod2.shape.n_z_aux[2] ^ 2.0 + jointSSP.rod2.shape.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod2.shape.widthDirection[1],jointSSP.rod2.shape.widthDirection[2],jointSSP.rod2.shape.widthDirection[3]} else if noEvent(abs(jointSSP.rod2.shape.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod2.shape.e_x[1],jointSSP.rod2.shape.e_x[2],jointSSP.rod2.shape.e_x[3]})[2];
//   protected Real jointSSP.rod2.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({jointSSP.rod2.shape.e_x[1],jointSSP.rod2.shape.e_x[2],jointSSP.rod2.shape.e_x[3]},if noEvent(jointSSP.rod2.shape.n_z_aux[1] ^ 2.0 + (jointSSP.rod2.shape.n_z_aux[2] ^ 2.0 + jointSSP.rod2.shape.n_z_aux[3] ^ 2.0) > 0.000001) then {jointSSP.rod2.shape.widthDirection[1],jointSSP.rod2.shape.widthDirection[2],jointSSP.rod2.shape.widthDirection[3]} else if noEvent(abs(jointSSP.rod2.shape.e_x[1]) > 0.000001) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),0.0000000000001),{jointSSP.rod2.shape.e_x[1],jointSSP.rod2.shape.e_x[2],jointSSP.rod2.shape.e_x[3]})[3];
//   protected output Real jointSSP.rod2.shape.Form;
//   output Real jointSSP.rod2.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod2.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod2.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod2.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod2.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod2.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real jointSSP.rod2.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod2.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real jointSSP.rod2.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real jointSSP.rod2.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod2.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod2.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real jointSSP.rod2.shape.Material;
//   protected output Real jointSSP.rod2.shape.Extra;
//   Real b2.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b2.animation = false \"= true, if animation shall be enabled (show cylinder between frame_a and frame_b)\";
//   parameter Real b2.r[1](quantity = \"Length\", unit = \"m\", start = 0.1) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b2.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.2 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b2.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b2.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real b2.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real b2.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real b2.innerDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0 \"Inner diameter of cylinder (0 <= innerDiameter <= Diameter)\";
//   parameter Real b2.density(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7700.0 \"Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)\";
//   input Integer b2.color[1](min = 0, max = 255) = 0 \"Color of cylinder\";
//   input Integer b2.color[2](min = 0, max = 255) = 128 \"Color of cylinder\";
//   input Integer b2.color[3](min = 0, max = 255) = 255 \"Color of cylinder\";
//   input Real b2.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   Real b2.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b2.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b2.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b2.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b2.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b2.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b2.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b2.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b2.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean b2.angles_fixed = false \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real b2.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b2.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b2.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer b2.sequence_start[1](min = 1, max = 3) = 1 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b2.sequence_start[2](min = 1, max = 3) = 2 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b2.sequence_start[3](min = 1, max = 3) = 3 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean b2.w_0_fixed = false \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real b2.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b2.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b2.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean b2.z_0_fixed = false \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real b2.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b2.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b2.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Boolean b2.enforceStates = false \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean b2.useQuaternions = true \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer b2.sequence_angleStates[1](min = 1, max = 3) = 1 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b2.sequence_angleStates[2](min = 1, max = 3) = 2 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b2.sequence_angleStates[3](min = 1, max = 3) = 3 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   constant Real b2.pi = 3.141592653589793;
//   final parameter Real b2.R.T[1,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[1,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[2,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[2,2] = -0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.T[3,3] = -1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b2.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b2.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real b2.lengthDirection[1](unit = \"1\") = b2.r[1] - b2.r_shape[1] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real b2.lengthDirection[2](unit = \"1\") = b2.r[2] - b2.r_shape[2] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real b2.lengthDirection[3](unit = \"1\") = b2.r[3] - b2.r_shape[3] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real b2.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({b2.r[1] - b2.r_shape[1],b2.r[2] - b2.r_shape[2],b2.r[3] - b2.r_shape[3]}) \"Length of cylinder\";
//   final parameter Real b2.innerRadius(quantity = \"Length\", unit = \"m\", min = 0.0) = b2.innerDiameter / 2.0 \"Inner-Radius of cylinder\";
//   parameter Real b2.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.05 \"Diameter of cylinder\";
//   final parameter Real b2.r_CM[1](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({b2.r[1],b2.r[2],b2.r[3]},0.0000000000001) * b2.length) / 2.0)[1] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real b2.r_CM[2](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({b2.r[1],b2.r[2],b2.r[3]},0.0000000000001) * b2.length) / 2.0)[2] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real b2.r_CM[3](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({b2.r[1],b2.r[2],b2.r[3]},0.0000000000001) * b2.length) / 2.0)[3] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real b2.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.141592653589793 * (b2.density * (b2.length * b2.innerRadius ^ 2.0)) \"Mass of hole of cylinder\";
//   final parameter Real b2.radius(quantity = \"Length\", unit = \"m\", min = 0.0) = b2.diameter / 2.0 \"Radius of cylinder\";
//   final parameter Real b2.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.141592653589793 * (b2.density * (b2.length * b2.radius ^ 2.0)) \"Mass of cylinder without hole\";
//   final parameter Real b2.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.mo * (b2.length ^ 2.0 / 12.0 + 0.25 * b2.radius ^ 2.0) - b2.mi * (b2.length ^ 2.0 / 12.0 + 0.25 * b2.innerRadius ^ 2.0) \"Inertia with respect to axis through center of mass, perpendicular to cylinder axis\";
//   final parameter Real b2.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = b2.mo - b2.mi \"Mass of cylinder\";
//   final parameter Real b2.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[1,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[1,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[1,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[2,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[2,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[2,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[3,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[3,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real b2.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(b2.R,{{(b2.mo * b2.radius ^ 2.0) / 2.0 + ((-b2.mi) * b2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,b2.I22,0.0},{0.0,0.0,b2.I22}})[3,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   Real b2.body.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.body.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.body.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.body.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.body.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.body.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.body.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b2.body.animation = false \"= true, if animation shall be enabled (show cylinder and sphere)\";
//   parameter Real b2.body.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = b2.r_CM[1] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real b2.body.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = b2.r_CM[2] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real b2.body.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = b2.r_CM[3] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real b2.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = b2.m \"Mass of rigid body\";
//   parameter Real b2.body.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = b2.I[1,1] \" (1,1) element of inertia tensor\";
//   parameter Real b2.body.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = b2.I[2,2] \" (2,2) element of inertia tensor\";
//   parameter Real b2.body.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = b2.I[3,3] \" (3,3) element of inertia tensor\";
//   parameter Real b2.body.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = b2.I[2,1] \" (2,1) element of inertia tensor\";
//   parameter Real b2.body.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = b2.I[3,1] \" (3,1) element of inertia tensor\";
//   parameter Real b2.body.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = b2.I[3,2] \" (3,2) element of inertia tensor\";
//   Real b2.body.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b2.body.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b2.body.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real b2.body.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b2.body.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b2.body.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real b2.body.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b2.body.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real b2.body.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean b2.body.angles_fixed = b2.angles_fixed \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real b2.body.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = b2.angles_start[1] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b2.body.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = b2.angles_start[2] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real b2.body.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = b2.angles_start[3] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer b2.body.sequence_start[1](min = 1, max = 3) = b2.sequence_start[1] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b2.body.sequence_start[2](min = 1, max = 3) = b2.sequence_start[2] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer b2.body.sequence_start[3](min = 1, max = 3) = b2.sequence_start[3] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean b2.body.w_0_fixed = b2.w_0_fixed \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real b2.body.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = b2.w_0_start[1] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b2.body.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = b2.w_0_start[2] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real b2.body.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = b2.w_0_start[3] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean b2.body.z_0_fixed = b2.z_0_fixed \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real b2.body.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.z_0_start[1] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b2.body.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.z_0_start[2] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b2.body.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.z_0_start[3] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real b2.body.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultBodyDiameter \"Diameter of sphere\";
//   input Integer b2.body.sphereColor[1](min = 0, max = 255) = 0 \"Color of sphere\";
//   input Integer b2.body.sphereColor[2](min = 0, max = 255) = 128 \"Color of sphere\";
//   input Integer b2.body.sphereColor[3](min = 0, max = 255) = 255 \"Color of sphere\";
//   input Integer b2.body.cylinderColor[1](min = 0, max = 255) = b2.body.sphereColor[1] \"Color of cylinder\";
//   input Integer b2.body.cylinderColor[2](min = 0, max = 255) = b2.body.sphereColor[2] \"Color of cylinder\";
//   input Integer b2.body.cylinderColor[3](min = 0, max = 255) = b2.body.sphereColor[3] \"Color of cylinder\";
//   input Real b2.body.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean b2.body.enforceStates = b2.enforceStates \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean b2.body.useQuaternions = b2.useQuaternions \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer b2.body.sequence_angleStates[1](min = 1, max = 3) = b2.sequence_angleStates[1] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b2.body.sequence_angleStates[2](min = 1, max = 3) = b2.sequence_angleStates[2] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer b2.body.sequence_angleStates[3](min = 1, max = 3) = b2.sequence_angleStates[3] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real b2.body.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.w_0_start[1],b2.body.w_0_start[2],b2.body.w_0_start[3]})[1], fixed = b2.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real b2.body.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.w_0_start[1],b2.body.w_0_start[2],b2.body.w_0_start[3]})[2], fixed = b2.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real b2.body.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.w_0_start[1],b2.body.w_0_start[2],b2.body.w_0_start[3]})[3], fixed = b2.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real b2.body.g_0[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real b2.body.g_0[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real b2.body.g_0[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   protected Real b2.body.Q[1](start = b2.body.Q_start[1], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real b2.body.Q[2](start = b2.body.Q_start[2], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real b2.body.Q[3](start = b2.body.Q_start[3], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real b2.body.Q[4](start = b2.body.Q_start[4], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected parameter Real b2.body.phi_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if b2.body.sequence_start[1] == b2.body.sequence_angleStates[1] and b2.body.sequence_start[2] == b2.body.sequence_angleStates[2] and b2.body.sequence_start[3] == b2.body.sequence_angleStates[3] then b2.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b2.body.R_start,{b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},0)[1] \"Potential angle states at initial time\";
//   protected parameter Real b2.body.phi_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if b2.body.sequence_start[1] == b2.body.sequence_angleStates[1] and b2.body.sequence_start[2] == b2.body.sequence_angleStates[2] and b2.body.sequence_start[3] == b2.body.sequence_angleStates[3] then b2.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b2.body.R_start,{b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},0)[2] \"Potential angle states at initial time\";
//   protected parameter Real b2.body.phi_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if b2.body.sequence_start[1] == b2.body.sequence_angleStates[1] and b2.body.sequence_start[2] == b2.body.sequence_angleStates[2] and b2.body.sequence_start[3] == b2.body.sequence_angleStates[3] then b2.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(b2.body.R_start,{b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},0)[3] \"Potential angle states at initial time\";
//   protected Real b2.body.phi[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = b2.body.phi_start[1], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real b2.body.phi[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = b2.body.phi_start[2], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real b2.body.phi[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = b2.body.phi_start[3], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real b2.body.phi_d[1](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real b2.body.phi_d[2](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real b2.body.phi_d[3](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real b2.body.phi_dd[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real b2.body.phi_dd[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real b2.body.phi_dd[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   final parameter Real b2.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_11 \"inertia tensor\";
//   final parameter Real b2.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_21 \"inertia tensor\";
//   final parameter Real b2.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_31 \"inertia tensor\";
//   final parameter Real b2.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_21 \"inertia tensor\";
//   final parameter Real b2.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_22 \"inertia tensor\";
//   final parameter Real b2.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_32 \"inertia tensor\";
//   final parameter Real b2.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_31 \"inertia tensor\";
//   final parameter Real b2.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_32 \"inertia tensor\";
//   final parameter Real b2.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = b2.body.I_33 \"inertia tensor\";
//   final parameter Real b2.body.R_start.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real b2.body.R_start.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b2.body.R_start.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real b2.body.R_start.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real b2.body.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = b2.body.sphereDiameter / 3.0 \"Diameter of cylinder\";
//   final parameter Real b2.body.z_a_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[1] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real b2.body.z_a_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[2] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real b2.body.z_a_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[3] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   Real b2.body.z_a[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[1], fixed = b2.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real b2.body.z_a[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[2], fixed = b2.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real b2.body.z_a[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.R_start,{b2.body.z_0_start[1],b2.body.z_0_start[2],b2.body.z_0_start[3]})[3], fixed = b2.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   protected parameter Real b2.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,{0.0,0.0,0.0,1.0})[1] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real b2.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,{0.0,0.0,0.0,1.0})[2] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real b2.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,{0.0,0.0,0.0,1.0})[3] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real b2.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(b2.body.R_start,{0.0,0.0,0.0,1.0})[4] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   Real b2.frameTranslation.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frameTranslation.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frameTranslation.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frameTranslation.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frameTranslation.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frameTranslation.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frameTranslation.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frameTranslation.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real b2.frameTranslation.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real b2.frameTranslation.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frameTranslation.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frameTranslation.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real b2.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real b2.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real b2.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean b2.frameTranslation.animation = b2.animation \"= true, if animation shall be enabled\";
//   parameter Real b2.frameTranslation.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = b2.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b2.frameTranslation.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = b2.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b2.frameTranslation.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = b2.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String b2.frameTranslation.shapeType = \"pipecylinder\" \" Type of shape\";
//   parameter Real b2.frameTranslation.r_shape[1](quantity = \"Length\", unit = \"m\") = b2.r_shape[1] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b2.frameTranslation.r_shape[2](quantity = \"Length\", unit = \"m\") = b2.r_shape[2] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b2.frameTranslation.r_shape[3](quantity = \"Length\", unit = \"m\") = b2.r_shape[3] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real b2.frameTranslation.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b2.frameTranslation.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b2.frameTranslation.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real b2.frameTranslation.extra = b2.innerDiameter / b2.diameter \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer b2.frameTranslation.color[1](min = 0, max = 255) = b2.color[1] \" Color of shape\";
//   input Integer b2.frameTranslation.color[2](min = 0, max = 255) = b2.color[2] \" Color of shape\";
//   input Integer b2.frameTranslation.color[3](min = 0, max = 255) = b2.color[3] \" Color of shape\";
//   input Real b2.frameTranslation.specularCoefficient = b2.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real b2.frameTranslation.lengthDirection[1](unit = \"1\") = b2.lengthDirection[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b2.frameTranslation.lengthDirection[2](unit = \"1\") = b2.lengthDirection[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b2.frameTranslation.lengthDirection[3](unit = \"1\") = b2.lengthDirection[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real b2.frameTranslation.length(quantity = \"Length\", unit = \"m\") = b2.length \" Length of shape\";
//   parameter Real b2.frameTranslation.width(quantity = \"Length\", unit = \"m\", min = 0.0) = b2.diameter \" Width of shape\";
//   parameter Real b2.frameTranslation.height(quantity = \"Length\", unit = \"m\", min = 0.0) = b2.diameter \" Height of shape.\";
// initial equation
//   jointSSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(jointSSP.prismatic.length,{jointSSP.prismatic.e[1],jointSSP.prismatic.e[2],jointSSP.prismatic.e[3]},jointSSP.prismatic.s_offset + jointSSP.prismatic.s_guess,{jointSSP.prismatic.r_a[1],jointSSP.prismatic.r_a[2],jointSSP.prismatic.r_a[3]},{jointSSP.prismatic.r_b[1],jointSSP.prismatic.r_b[2],jointSSP.prismatic.r_b[3]});
// equation
//   world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   world.x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 0.0000000001,\"Parameter n of World object is wrong (lenght(n) > 0 required)\");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   j1.fixed.flange.phi = j1.fixed.phi0;
//   j1.internalAxis.flange.tau = j1.internalAxis.tau;
//   j1.internalAxis.flange.phi = j1.internalAxis.phi;
//   j1.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(j1.cylinder.shapeType);
//   j1.cylinder.rxvisobj[1] = j1.cylinder.R.T[1,1] * j1.cylinder.e_x[1] + j1.cylinder.R.T[2,1] * j1.cylinder.e_x[2] + j1.cylinder.R.T[3,1] * j1.cylinder.e_x[3];
//   j1.cylinder.rxvisobj[2] = j1.cylinder.R.T[1,2] * j1.cylinder.e_x[1] + j1.cylinder.R.T[2,2] * j1.cylinder.e_x[2] + j1.cylinder.R.T[3,2] * j1.cylinder.e_x[3];
//   j1.cylinder.rxvisobj[3] = j1.cylinder.R.T[1,3] * j1.cylinder.e_x[1] + j1.cylinder.R.T[2,3] * j1.cylinder.e_x[2] + j1.cylinder.R.T[3,3] * j1.cylinder.e_x[3];
//   j1.cylinder.ryvisobj[1] = j1.cylinder.R.T[1,1] * j1.cylinder.e_y[1] + j1.cylinder.R.T[2,1] * j1.cylinder.e_y[2] + j1.cylinder.R.T[3,1] * j1.cylinder.e_y[3];
//   j1.cylinder.ryvisobj[2] = j1.cylinder.R.T[1,2] * j1.cylinder.e_y[1] + j1.cylinder.R.T[2,2] * j1.cylinder.e_y[2] + j1.cylinder.R.T[3,2] * j1.cylinder.e_y[3];
//   j1.cylinder.ryvisobj[3] = j1.cylinder.R.T[1,3] * j1.cylinder.e_y[1] + j1.cylinder.R.T[2,3] * j1.cylinder.e_y[2] + j1.cylinder.R.T[3,3] * j1.cylinder.e_y[3];
//   j1.cylinder.rvisobj = j1.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{j1.cylinder.R.T[1,1],j1.cylinder.R.T[1,2],j1.cylinder.R.T[1,3]},{j1.cylinder.R.T[2,1],j1.cylinder.R.T[2,2],j1.cylinder.R.T[2,3]},{j1.cylinder.R.T[3,1],j1.cylinder.R.T[3,2],j1.cylinder.R.T[3,3]}},{j1.cylinder.r_shape[1],j1.cylinder.r_shape[2],j1.cylinder.r_shape[3]});
//   j1.cylinder.size[1] = j1.cylinder.length;
//   j1.cylinder.size[2] = j1.cylinder.width;
//   j1.cylinder.size[3] = j1.cylinder.height;
//   j1.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(j1.cylinder.color[1] / 255.0,j1.cylinder.color[2] / 255.0,j1.cylinder.color[3] / 255.0,j1.cylinder.specularCoefficient);
//   j1.cylinder.Extra = j1.cylinder.extra;
//   assert(true,\"Connector frame_a of revolute joint is not connected\");
//   assert(true,\"Connector frame_b of revolute joint is not connected\");
//   j1.angle = j1.phi;
//   j1.w = der(j1.phi);
//   j1.a = der(j1.w);
//   j1.frame_b.r_0[1] = j1.frame_a.r_0[1];
//   j1.frame_b.r_0[2] = j1.frame_a.r_0[2];
//   j1.frame_b.r_0[3] = j1.frame_a.r_0[3];
//   j1.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({j1.e[1],j1.e[2],j1.e[3]},j1.phi,j1.w);
//   j1.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(j1.frame_a.R,j1.R_rel);
//   j1.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(j1.R_rel,{j1.frame_b.f[1],j1.frame_b.f[2],j1.frame_b.f[3]});
//   j1.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(j1.R_rel,{j1.frame_b.t[1],j1.frame_b.t[2],j1.frame_b.t[3]});
//   j1.tau = (-j1.frame_b.t[1]) * j1.e[1] + ((-j1.frame_b.t[2]) * j1.e[2] + (-j1.frame_b.t[3]) * j1.e[3]);
//   j1.phi = j1.internalAxis.phi;
//   b1.body.r_0[1] = b1.body.frame_a.r_0[1];
//   b1.body.r_0[2] = b1.body.frame_a.r_0[2];
//   b1.body.r_0[3] = b1.body.frame_a.r_0[3];
//   if true then
//   b1.body.Q[1] = 0.0;
//   b1.body.Q[2] = 0.0;
//   b1.body.Q[3] = 0.0;
//   b1.body.Q[4] = 1.0;
//   b1.body.phi[1] = 0.0;
//   b1.body.phi[2] = 0.0;
//   b1.body.phi[3] = 0.0;
//   b1.body.phi_d[1] = 0.0;
//   b1.body.phi_d[2] = 0.0;
//   b1.body.phi_d[3] = 0.0;
//   b1.body.phi_dd[1] = 0.0;
//   b1.body.phi_dd[2] = 0.0;
//   b1.body.phi_dd[3] = 0.0;
//   elseif b1.body.useQuaternions then
//   b1.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({b1.body.Q[1],b1.body.Q[2],b1.body.Q[3],b1.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({b1.body.Q[1],b1.body.Q[2],b1.body.Q[3],b1.body.Q[4]},{der(b1.body.Q[1]),der(b1.body.Q[2]),der(b1.body.Q[3]),der(b1.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({b1.body.Q[1],b1.body.Q[2],b1.body.Q[3],b1.body.Q[4]});
//   b1.body.phi[1] = 0.0;
//   b1.body.phi[2] = 0.0;
//   b1.body.phi[3] = 0.0;
//   b1.body.phi_d[1] = 0.0;
//   b1.body.phi_d[2] = 0.0;
//   b1.body.phi_d[3] = 0.0;
//   b1.body.phi_dd[1] = 0.0;
//   b1.body.phi_dd[2] = 0.0;
//   b1.body.phi_dd[3] = 0.0;
//   else
//   b1.body.phi_d[1] = der(b1.body.phi[1]);
//   b1.body.phi_d[2] = der(b1.body.phi[2]);
//   b1.body.phi_d[3] = der(b1.body.phi[3]);
//   b1.body.phi_dd[1] = der(b1.body.phi_d[1]);
//   b1.body.phi_dd[2] = der(b1.body.phi_d[2]);
//   b1.body.phi_dd[3] = der(b1.body.phi_d[3]);
//   b1.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({b1.body.sequence_angleStates[1],b1.body.sequence_angleStates[2],b1.body.sequence_angleStates[3]},{b1.body.phi[1],b1.body.phi[2],b1.body.phi[3]},{b1.body.phi_d[1],b1.body.phi_d[2],b1.body.phi_d[3]});
//   b1.body.Q[1] = 0.0;
//   b1.body.Q[2] = 0.0;
//   b1.body.Q[3] = 0.0;
//   b1.body.Q[4] = 1.0;
//   end if;
//   b1.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration({b1.body.frame_a.r_0[1],b1.body.frame_a.r_0[2],b1.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(b1.body.frame_a.R,{b1.body.r_CM[1],b1.body.r_CM[2],b1.body.r_CM[3]}),world.gravityType,Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},0.0000000000001) * world.g,world.mue);
//   b1.body.v_0[1] = der(b1.body.frame_a.r_0[1]);
//   b1.body.v_0[2] = der(b1.body.frame_a.r_0[2]);
//   b1.body.v_0[3] = der(b1.body.frame_a.r_0[3]);
//   b1.body.a_0[1] = der(b1.body.v_0[1]);
//   b1.body.a_0[2] = der(b1.body.v_0[2]);
//   b1.body.a_0[3] = der(b1.body.v_0[3]);
//   b1.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(b1.body.frame_a.R);
//   b1.body.z_a[1] = der(b1.body.w_a[1]);
//   b1.body.z_a[2] = der(b1.body.w_a[2]);
//   b1.body.z_a[3] = der(b1.body.w_a[3]);
//   b1.body.frame_a.f = (Modelica.Mechanics.MultiBody.Frames.resolve2(b1.body.frame_a.R,{b1.body.a_0[1] - b1.body.g_0[1],b1.body.a_0[2] - b1.body.g_0[2],b1.body.a_0[3] - b1.body.g_0[3]}) + {b1.body.z_a[2] * b1.body.r_CM[3] - b1.body.z_a[3] * b1.body.r_CM[2],b1.body.z_a[3] * b1.body.r_CM[1] - b1.body.z_a[1] * b1.body.r_CM[3],b1.body.z_a[1] * b1.body.r_CM[2] - b1.body.z_a[2] * b1.body.r_CM[1]} + {b1.body.w_a[2] * (b1.body.w_a[1] * b1.body.r_CM[2] - b1.body.w_a[2] * b1.body.r_CM[1]) - b1.body.w_a[3] * (b1.body.w_a[3] * b1.body.r_CM[1] - b1.body.w_a[1] * b1.body.r_CM[3]),b1.body.w_a[3] * (b1.body.w_a[2] * b1.body.r_CM[3] - b1.body.w_a[3] * b1.body.r_CM[2]) - b1.body.w_a[1] * (b1.body.w_a[1] * b1.body.r_CM[2] - b1.body.w_a[2] * b1.body.r_CM[1]),b1.body.w_a[1] * (b1.body.w_a[3] * b1.body.r_CM[1] - b1.body.w_a[1] * b1.body.r_CM[3]) - b1.body.w_a[2] * (b1.body.w_a[2] * b1.body.r_CM[3] - b1.body.w_a[3] * b1.body.r_CM[2])}) * b1.body.m;
//   b1.body.frame_a.t[1] = b1.body.I[1,1] * b1.body.z_a[1] + b1.body.I[1,2] * b1.body.z_a[2] + b1.body.I[1,3] * b1.body.z_a[3] + (b1.body.w_a[2] * (b1.body.I[3,1] * b1.body.w_a[1] + b1.body.I[3,2] * b1.body.w_a[2] + b1.body.I[3,3] * b1.body.w_a[3]) - b1.body.w_a[3] * (b1.body.I[2,1] * b1.body.w_a[1] + b1.body.I[2,2] * b1.body.w_a[2] + b1.body.I[2,3] * b1.body.w_a[3])) + (b1.body.r_CM[2] * b1.body.frame_a.f[3] - b1.body.r_CM[3] * b1.body.frame_a.f[2]);
//   b1.body.frame_a.t[2] = b1.body.I[2,1] * b1.body.z_a[1] + b1.body.I[2,2] * b1.body.z_a[2] + b1.body.I[2,3] * b1.body.z_a[3] + (b1.body.w_a[3] * (b1.body.I[1,1] * b1.body.w_a[1] + b1.body.I[1,2] * b1.body.w_a[2] + b1.body.I[1,3] * b1.body.w_a[3]) - b1.body.w_a[1] * (b1.body.I[3,1] * b1.body.w_a[1] + b1.body.I[3,2] * b1.body.w_a[2] + b1.body.I[3,3] * b1.body.w_a[3])) + (b1.body.r_CM[3] * b1.body.frame_a.f[1] - b1.body.r_CM[1] * b1.body.frame_a.f[3]);
//   b1.body.frame_a.t[3] = b1.body.I[3,1] * b1.body.z_a[1] + b1.body.I[3,2] * b1.body.z_a[2] + b1.body.I[3,3] * b1.body.z_a[3] + (b1.body.w_a[1] * (b1.body.I[2,1] * b1.body.w_a[1] + b1.body.I[2,2] * b1.body.w_a[2] + b1.body.I[2,3] * b1.body.w_a[3]) - b1.body.w_a[2] * (b1.body.I[1,1] * b1.body.w_a[1] + b1.body.I[1,2] * b1.body.w_a[2] + b1.body.I[1,3] * b1.body.w_a[3])) + (b1.body.r_CM[1] * b1.body.frame_a.f[2] - b1.body.r_CM[2] * b1.body.frame_a.f[1]);
//   b1.frameTranslation.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(b1.frameTranslation.shape.shapeType);
//   b1.frameTranslation.shape.rxvisobj[1] = b1.frameTranslation.shape.R.T[1,1] * b1.frameTranslation.shape.e_x[1] + b1.frameTranslation.shape.R.T[2,1] * b1.frameTranslation.shape.e_x[2] + b1.frameTranslation.shape.R.T[3,1] * b1.frameTranslation.shape.e_x[3];
//   b1.frameTranslation.shape.rxvisobj[2] = b1.frameTranslation.shape.R.T[1,2] * b1.frameTranslation.shape.e_x[1] + b1.frameTranslation.shape.R.T[2,2] * b1.frameTranslation.shape.e_x[2] + b1.frameTranslation.shape.R.T[3,2] * b1.frameTranslation.shape.e_x[3];
//   b1.frameTranslation.shape.rxvisobj[3] = b1.frameTranslation.shape.R.T[1,3] * b1.frameTranslation.shape.e_x[1] + b1.frameTranslation.shape.R.T[2,3] * b1.frameTranslation.shape.e_x[2] + b1.frameTranslation.shape.R.T[3,3] * b1.frameTranslation.shape.e_x[3];
//   b1.frameTranslation.shape.ryvisobj[1] = b1.frameTranslation.shape.R.T[1,1] * b1.frameTranslation.shape.e_y[1] + b1.frameTranslation.shape.R.T[2,1] * b1.frameTranslation.shape.e_y[2] + b1.frameTranslation.shape.R.T[3,1] * b1.frameTranslation.shape.e_y[3];
//   b1.frameTranslation.shape.ryvisobj[2] = b1.frameTranslation.shape.R.T[1,2] * b1.frameTranslation.shape.e_y[1] + b1.frameTranslation.shape.R.T[2,2] * b1.frameTranslation.shape.e_y[2] + b1.frameTranslation.shape.R.T[3,2] * b1.frameTranslation.shape.e_y[3];
//   b1.frameTranslation.shape.ryvisobj[3] = b1.frameTranslation.shape.R.T[1,3] * b1.frameTranslation.shape.e_y[1] + b1.frameTranslation.shape.R.T[2,3] * b1.frameTranslation.shape.e_y[2] + b1.frameTranslation.shape.R.T[3,3] * b1.frameTranslation.shape.e_y[3];
//   b1.frameTranslation.shape.rvisobj = b1.frameTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{b1.frameTranslation.shape.R.T[1,1],b1.frameTranslation.shape.R.T[1,2],b1.frameTranslation.shape.R.T[1,3]},{b1.frameTranslation.shape.R.T[2,1],b1.frameTranslation.shape.R.T[2,2],b1.frameTranslation.shape.R.T[2,3]},{b1.frameTranslation.shape.R.T[3,1],b1.frameTranslation.shape.R.T[3,2],b1.frameTranslation.shape.R.T[3,3]}},{b1.frameTranslation.shape.r_shape[1],b1.frameTranslation.shape.r_shape[2],b1.frameTranslation.shape.r_shape[3]});
//   b1.frameTranslation.shape.size[1] = b1.frameTranslation.shape.length;
//   b1.frameTranslation.shape.size[2] = b1.frameTranslation.shape.width;
//   b1.frameTranslation.shape.size[3] = b1.frameTranslation.shape.height;
//   b1.frameTranslation.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(b1.frameTranslation.shape.color[1] / 255.0,b1.frameTranslation.shape.color[2] / 255.0,b1.frameTranslation.shape.color[3] / 255.0,b1.frameTranslation.shape.specularCoefficient);
//   b1.frameTranslation.shape.Extra = b1.frameTranslation.shape.extra;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   b1.frameTranslation.frame_b.r_0 = b1.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(b1.frameTranslation.frame_a.R,{b1.frameTranslation.r[1],b1.frameTranslation.r[2],b1.frameTranslation.r[3]});
//   b1.frameTranslation.frame_b.R.T[1,1] = b1.frameTranslation.frame_a.R.T[1,1];
//   b1.frameTranslation.frame_b.R.T[1,2] = b1.frameTranslation.frame_a.R.T[1,2];
//   b1.frameTranslation.frame_b.R.T[1,3] = b1.frameTranslation.frame_a.R.T[1,3];
//   b1.frameTranslation.frame_b.R.T[2,1] = b1.frameTranslation.frame_a.R.T[2,1];
//   b1.frameTranslation.frame_b.R.T[2,2] = b1.frameTranslation.frame_a.R.T[2,2];
//   b1.frameTranslation.frame_b.R.T[2,3] = b1.frameTranslation.frame_a.R.T[2,3];
//   b1.frameTranslation.frame_b.R.T[3,1] = b1.frameTranslation.frame_a.R.T[3,1];
//   b1.frameTranslation.frame_b.R.T[3,2] = b1.frameTranslation.frame_a.R.T[3,2];
//   b1.frameTranslation.frame_b.R.T[3,3] = b1.frameTranslation.frame_a.R.T[3,3];
//   b1.frameTranslation.frame_b.R.w[1] = b1.frameTranslation.frame_a.R.w[1];
//   b1.frameTranslation.frame_b.R.w[2] = b1.frameTranslation.frame_a.R.w[2];
//   b1.frameTranslation.frame_b.R.w[3] = b1.frameTranslation.frame_a.R.w[3];
//   0.0 = b1.frameTranslation.frame_a.f[1] + b1.frameTranslation.frame_b.f[1];
//   0.0 = b1.frameTranslation.frame_a.f[2] + b1.frameTranslation.frame_b.f[2];
//   0.0 = b1.frameTranslation.frame_a.f[3] + b1.frameTranslation.frame_b.f[3];
//   0.0 = b1.frameTranslation.frame_a.t[1] + b1.frameTranslation.frame_b.t[1] + (b1.frameTranslation.r[2] * b1.frameTranslation.frame_b.f[3] - b1.frameTranslation.r[3] * b1.frameTranslation.frame_b.f[2]);
//   0.0 = b1.frameTranslation.frame_a.t[2] + b1.frameTranslation.frame_b.t[2] + (b1.frameTranslation.r[3] * b1.frameTranslation.frame_b.f[1] - b1.frameTranslation.r[1] * b1.frameTranslation.frame_b.f[3]);
//   0.0 = b1.frameTranslation.frame_a.t[3] + b1.frameTranslation.frame_b.t[3] + (b1.frameTranslation.r[1] * b1.frameTranslation.frame_b.f[2] - b1.frameTranslation.r[2] * b1.frameTranslation.frame_b.f[1]);
//   b1.r_0[1] = b1.frame_a.r_0[1];
//   b1.r_0[2] = b1.frame_a.r_0[2];
//   b1.r_0[3] = b1.frame_a.r_0[3];
//   b1.v_0[1] = der(b1.r_0[1]);
//   b1.v_0[2] = der(b1.r_0[2]);
//   b1.v_0[3] = der(b1.r_0[3]);
//   b1.a_0[1] = der(b1.v_0[1]);
//   b1.a_0[2] = der(b1.v_0[2]);
//   b1.a_0[3] = der(b1.v_0[3]);
//   assert(b1.innerDiameter < b1.diameter,\"parameter innerDiameter is greater as parameter diameter.\");
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   b3.frame_b.r_0 = b3.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(b3.frame_a.R,{b3.r[1],b3.r[2],b3.r[3]});
//   b3.frame_b.R.T[1,1] = b3.frame_a.R.T[1,1];
//   b3.frame_b.R.T[1,2] = b3.frame_a.R.T[1,2];
//   b3.frame_b.R.T[1,3] = b3.frame_a.R.T[1,3];
//   b3.frame_b.R.T[2,1] = b3.frame_a.R.T[2,1];
//   b3.frame_b.R.T[2,2] = b3.frame_a.R.T[2,2];
//   b3.frame_b.R.T[2,3] = b3.frame_a.R.T[2,3];
//   b3.frame_b.R.T[3,1] = b3.frame_a.R.T[3,1];
//   b3.frame_b.R.T[3,2] = b3.frame_a.R.T[3,2];
//   b3.frame_b.R.T[3,3] = b3.frame_a.R.T[3,3];
//   b3.frame_b.R.w[1] = b3.frame_a.R.w[1];
//   b3.frame_b.R.w[2] = b3.frame_a.R.w[2];
//   b3.frame_b.R.w[3] = b3.frame_a.R.w[3];
//   0.0 = b3.frame_a.f[1] + b3.frame_b.f[1];
//   0.0 = b3.frame_a.f[2] + b3.frame_b.f[2];
//   0.0 = b3.frame_a.f[3] + b3.frame_b.f[3];
//   0.0 = b3.frame_a.t[1] + b3.frame_b.t[1] + (b3.r[2] * b3.frame_b.f[3] - b3.r[3] * b3.frame_b.f[2]);
//   0.0 = b3.frame_a.t[2] + b3.frame_b.t[2] + (b3.r[3] * b3.frame_b.f[1] - b3.r[1] * b3.frame_b.f[3]);
//   0.0 = b3.frame_a.t[3] + b3.frame_b.t[3] + (b3.r[1] * b3.frame_b.f[2] - b3.r[2] * b3.frame_b.f[1]);
//   jointSSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(jointSSP.relativePosition.relativePosition.frame_a.R,{jointSSP.relativePosition.relativePosition.frame_b.r_0[1] - jointSSP.relativePosition.relativePosition.frame_a.r_0[1],jointSSP.relativePosition.relativePosition.frame_b.r_0[2] - jointSSP.relativePosition.relativePosition.frame_a.r_0[2],jointSSP.relativePosition.relativePosition.frame_b.r_0[3] - jointSSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,\"Connector frame_a must be connected at least once\");
//   assert(true,\"Connector frame_b must be connected at least once\");
//   assert(true,\"Connector frame_resolve must be connected exactly once\");
//   jointSSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,\"Connector frame_a must be connected at least once\");
//   assert(true,\"Connector frame_b must be connected at least once\");
//   jointSSP.position_b[1].y = jointSSP.position_b[1].k;
//   jointSSP.position_b[2].y = jointSSP.position_b[2].k;
//   jointSSP.position_b[3].y = jointSSP.position_b[3].k;
//   jointSSP.rod1.shape_rod.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(jointSSP.rod1.shape_rod.shapeType);
//   jointSSP.rod1.shape_rod.rxvisobj[1] = jointSSP.rod1.shape_rod.R.T[1,1] * jointSSP.rod1.shape_rod.e_x[1] + jointSSP.rod1.shape_rod.R.T[2,1] * jointSSP.rod1.shape_rod.e_x[2] + jointSSP.rod1.shape_rod.R.T[3,1] * jointSSP.rod1.shape_rod.e_x[3];
//   jointSSP.rod1.shape_rod.rxvisobj[2] = jointSSP.rod1.shape_rod.R.T[1,2] * jointSSP.rod1.shape_rod.e_x[1] + jointSSP.rod1.shape_rod.R.T[2,2] * jointSSP.rod1.shape_rod.e_x[2] + jointSSP.rod1.shape_rod.R.T[3,2] * jointSSP.rod1.shape_rod.e_x[3];
//   jointSSP.rod1.shape_rod.rxvisobj[3] = jointSSP.rod1.shape_rod.R.T[1,3] * jointSSP.rod1.shape_rod.e_x[1] + jointSSP.rod1.shape_rod.R.T[2,3] * jointSSP.rod1.shape_rod.e_x[2] + jointSSP.rod1.shape_rod.R.T[3,3] * jointSSP.rod1.shape_rod.e_x[3];
//   jointSSP.rod1.shape_rod.ryvisobj[1] = jointSSP.rod1.shape_rod.R.T[1,1] * jointSSP.rod1.shape_rod.e_y[1] + jointSSP.rod1.shape_rod.R.T[2,1] * jointSSP.rod1.shape_rod.e_y[2] + jointSSP.rod1.shape_rod.R.T[3,1] * jointSSP.rod1.shape_rod.e_y[3];
//   jointSSP.rod1.shape_rod.ryvisobj[2] = jointSSP.rod1.shape_rod.R.T[1,2] * jointSSP.rod1.shape_rod.e_y[1] + jointSSP.rod1.shape_rod.R.T[2,2] * jointSSP.rod1.shape_rod.e_y[2] + jointSSP.rod1.shape_rod.R.T[3,2] * jointSSP.rod1.shape_rod.e_y[3];
//   jointSSP.rod1.shape_rod.ryvisobj[3] = jointSSP.rod1.shape_rod.R.T[1,3] * jointSSP.rod1.shape_rod.e_y[1] + jointSSP.rod1.shape_rod.R.T[2,3] * jointSSP.rod1.shape_rod.e_y[2] + jointSSP.rod1.shape_rod.R.T[3,3] * jointSSP.rod1.shape_rod.e_y[3];
//   jointSSP.rod1.shape_rod.rvisobj = jointSSP.rod1.shape_rod.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{jointSSP.rod1.shape_rod.R.T[1,1],jointSSP.rod1.shape_rod.R.T[1,2],jointSSP.rod1.shape_rod.R.T[1,3]},{jointSSP.rod1.shape_rod.R.T[2,1],jointSSP.rod1.shape_rod.R.T[2,2],jointSSP.rod1.shape_rod.R.T[2,3]},{jointSSP.rod1.shape_rod.R.T[3,1],jointSSP.rod1.shape_rod.R.T[3,2],jointSSP.rod1.shape_rod.R.T[3,3]}},{jointSSP.rod1.shape_rod.r_shape[1],jointSSP.rod1.shape_rod.r_shape[2],jointSSP.rod1.shape_rod.r_shape[3]});
//   jointSSP.rod1.shape_rod.size[1] = jointSSP.rod1.shape_rod.length;
//   jointSSP.rod1.shape_rod.size[2] = jointSSP.rod1.shape_rod.width;
//   jointSSP.rod1.shape_rod.size[3] = jointSSP.rod1.shape_rod.height;
//   jointSSP.rod1.shape_rod.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(jointSSP.rod1.shape_rod.color[1] / 255.0,jointSSP.rod1.shape_rod.color[2] / 255.0,jointSSP.rod1.shape_rod.color[3] / 255.0,jointSSP.rod1.shape_rod.specularCoefficient);
//   jointSSP.rod1.shape_rod.Extra = jointSSP.rod1.shape_rod.extra;
//   jointSSP.rod1.shape_a.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(jointSSP.rod1.shape_a.shapeType);
//   jointSSP.rod1.shape_a.rxvisobj[1] = jointSSP.rod1.shape_a.R.T[1,1] * jointSSP.rod1.shape_a.e_x[1] + jointSSP.rod1.shape_a.R.T[2,1] * jointSSP.rod1.shape_a.e_x[2] + jointSSP.rod1.shape_a.R.T[3,1] * jointSSP.rod1.shape_a.e_x[3];
//   jointSSP.rod1.shape_a.rxvisobj[2] = jointSSP.rod1.shape_a.R.T[1,2] * jointSSP.rod1.shape_a.e_x[1] + jointSSP.rod1.shape_a.R.T[2,2] * jointSSP.rod1.shape_a.e_x[2] + jointSSP.rod1.shape_a.R.T[3,2] * jointSSP.rod1.shape_a.e_x[3];
//   jointSSP.rod1.shape_a.rxvisobj[3] = jointSSP.rod1.shape_a.R.T[1,3] * jointSSP.rod1.shape_a.e_x[1] + jointSSP.rod1.shape_a.R.T[2,3] * jointSSP.rod1.shape_a.e_x[2] + jointSSP.rod1.shape_a.R.T[3,3] * jointSSP.rod1.shape_a.e_x[3];
//   jointSSP.rod1.shape_a.ryvisobj[1] = jointSSP.rod1.shape_a.R.T[1,1] * jointSSP.rod1.shape_a.e_y[1] + jointSSP.rod1.shape_a.R.T[2,1] * jointSSP.rod1.shape_a.e_y[2] + jointSSP.rod1.shape_a.R.T[3,1] * jointSSP.rod1.shape_a.e_y[3];
//   jointSSP.rod1.shape_a.ryvisobj[2] = jointSSP.rod1.shape_a.R.T[1,2] * jointSSP.rod1.shape_a.e_y[1] + jointSSP.rod1.shape_a.R.T[2,2] * jointSSP.rod1.shape_a.e_y[2] + jointSSP.rod1.shape_a.R.T[3,2] * jointSSP.rod1.shape_a.e_y[3];
//   jointSSP.rod1.shape_a.ryvisobj[3] = jointSSP.rod1.shape_a.R.T[1,3] * jointSSP.rod1.shape_a.e_y[1] + jointSSP.rod1.shape_a.R.T[2,3] * jointSSP.rod1.shape_a.e_y[2] + jointSSP.rod1.shape_a.R.T[3,3] * jointSSP.rod1.shape_a.e_y[3];
//   jointSSP.rod1.shape_a.rvisobj = jointSSP.rod1.shape_a.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{jointSSP.rod1.shape_a.R.T[1,1],jointSSP.rod1.shape_a.R.T[1,2],jointSSP.rod1.shape_a.R.T[1,3]},{jointSSP.rod1.shape_a.R.T[2,1],jointSSP.rod1.shape_a.R.T[2,2],jointSSP.rod1.shape_a.R.T[2,3]},{jointSSP.rod1.shape_a.R.T[3,1],jointSSP.rod1.shape_a.R.T[3,2],jointSSP.rod1.shape_a.R.T[3,3]}},{jointSSP.rod1.shape_a.r_shape[1],jointSSP.rod1.shape_a.r_shape[2],jointSSP.rod1.shape_a.r_shape[3]});
//   jointSSP.rod1.shape_a.size[1] = jointSSP.rod1.shape_a.length;
//   jointSSP.rod1.shape_a.size[2] = jointSSP.rod1.shape_a.width;
//   jointSSP.rod1.shape_a.size[3] = jointSSP.rod1.shape_a.height;
//   jointSSP.rod1.shape_a.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(jointSSP.rod1.shape_a.color[1] / 255.0,jointSSP.rod1.shape_a.color[2] / 255.0,jointSSP.rod1.shape_a.color[3] / 255.0,jointSSP.rod1.shape_a.specularCoefficient);
//   jointSSP.rod1.shape_a.Extra = jointSSP.rod1.shape_a.extra;
//   jointSSP.rod1.shape_b.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(jointSSP.rod1.shape_b.shapeType);
//   jointSSP.rod1.shape_b.rxvisobj[1] = jointSSP.rod1.shape_b.R.T[1,1] * jointSSP.rod1.shape_b.e_x[1] + jointSSP.rod1.shape_b.R.T[2,1] * jointSSP.rod1.shape_b.e_x[2] + jointSSP.rod1.shape_b.R.T[3,1] * jointSSP.rod1.shape_b.e_x[3];
//   jointSSP.rod1.shape_b.rxvisobj[2] = jointSSP.rod1.shape_b.R.T[1,2] * jointSSP.rod1.shape_b.e_x[1] + jointSSP.rod1.shape_b.R.T[2,2] * jointSSP.rod1.shape_b.e_x[2] + jointSSP.rod1.shape_b.R.T[3,2] * jointSSP.rod1.shape_b.e_x[3];
//   jointSSP.rod1.shape_b.rxvisobj[3] = jointSSP.rod1.shape_b.R.T[1,3] * jointSSP.rod1.shape_b.e_x[1] + jointSSP.rod1.shape_b.R.T[2,3] * jointSSP.rod1.shape_b.e_x[2] + jointSSP.rod1.shape_b.R.T[3,3] * jointSSP.rod1.shape_b.e_x[3];
//   jointSSP.rod1.shape_b.ryvisobj[1] = jointSSP.rod1.shape_b.R.T[1,1] * jointSSP.rod1.shape_b.e_y[1] + jointSSP.rod1.shape_b.R.T[2,1] * jointSSP.rod1.shape_b.e_y[2] + jointSSP.rod1.shape_b.R.T[3,1] * jointSSP.rod1.shape_b.e_y[3];
//   jointSSP.rod1.shape_b.ryvisobj[2] = jointSSP.rod1.shape_b.R.T[1,2] * jointSSP.rod1.shape_b.e_y[1] + jointSSP.rod1.shape_b.R.T[2,2] * jointSSP.rod1.shape_b.e_y[2] + jointSSP.rod1.shape_b.R.T[3,2] * jointSSP.rod1.shape_b.e_y[3];
//   jointSSP.rod1.shape_b.ryvisobj[3] = jointSSP.rod1.shape_b.R.T[1,3] * jointSSP.rod1.shape_b.e_y[1] + jointSSP.rod1.shape_b.R.T[2,3] * jointSSP.rod1.shape_b.e_y[2] + jointSSP.rod1.shape_b.R.T[3,3] * jointSSP.rod1.shape_b.e_y[3];
//   jointSSP.rod1.shape_b.rvisobj = jointSSP.rod1.shape_b.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{jointSSP.rod1.shape_b.R.T[1,1],jointSSP.rod1.shape_b.R.T[1,2],jointSSP.rod1.shape_b.R.T[1,3]},{jointSSP.rod1.shape_b.R.T[2,1],jointSSP.rod1.shape_b.R.T[2,2],jointSSP.rod1.shape_b.R.T[2,3]},{jointSSP.rod1.shape_b.R.T[3,1],jointSSP.rod1.shape_b.R.T[3,2],jointSSP.rod1.shape_b.R.T[3,3]}},{jointSSP.rod1.shape_b.r_shape[1],jointSSP.rod1.shape_b.r_shape[2],jointSSP.rod1.shape_b.r_shape[3]});
//   jointSSP.rod1.shape_b.size[1] = jointSSP.rod1.shape_b.length;
//   jointSSP.rod1.shape_b.size[2] = jointSSP.rod1.shape_b.width;
//   jointSSP.rod1.shape_b.size[3] = jointSSP.rod1.shape_b.height;
//   jointSSP.rod1.shape_b.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(jointSSP.rod1.shape_b.color[1] / 255.0,jointSSP.rod1.shape_b.color[2] / 255.0,jointSSP.rod1.shape_b.color[3] / 255.0,jointSSP.rod1.shape_b.specularCoefficient);
//   jointSSP.rod1.shape_b.Extra = jointSSP.rod1.shape_b.extra;
//   jointSSP.rod1.rRod_0[1] = jointSSP.rod1.frame_b.r_0[1] - jointSSP.rod1.frame_a.r_0[1];
//   jointSSP.rod1.rRod_0[2] = jointSSP.rod1.frame_b.r_0[2] - jointSSP.rod1.frame_a.r_0[2];
//   jointSSP.rod1.rRod_0[3] = jointSSP.rod1.frame_b.r_0[3] - jointSSP.rod1.frame_a.r_0[3];
//   jointSSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(jointSSP.rod1.frame_a.R,{jointSSP.rod1.rRod_0[1],jointSSP.rod1.rRod_0[2],jointSSP.rod1.rRod_0[3]});
//   jointSSP.rod1.eRod_a[1] = jointSSP.rod1.rRod_a[1] / jointSSP.rod1.rodLength;
//   jointSSP.rod1.eRod_a[2] = jointSSP.rod1.rRod_a[2] / jointSSP.rod1.rodLength;
//   jointSSP.rod1.eRod_a[3] = jointSSP.rod1.rRod_a[3] / jointSSP.rod1.rodLength;
//   jointSSP.rod1.constraintResidue = 0.0;
//   jointSSP.rod1.frame_a.t[1] = 0.0;
//   jointSSP.rod1.frame_a.t[2] = 0.0;
//   jointSSP.rod1.frame_a.t[3] = 0.0;
//   jointSSP.rod1.frame_b.t[1] = 0.0;
//   jointSSP.rod1.frame_b.t[2] = 0.0;
//   jointSSP.rod1.frame_b.t[3] = 0.0;
//   jointSSP.rod1.r_CM_0[1] = 0.0;
//   jointSSP.rod1.r_CM_0[2] = 0.0;
//   jointSSP.rod1.r_CM_0[3] = 0.0;
//   jointSSP.rod1.v_CM_0[1] = 0.0;
//   jointSSP.rod1.v_CM_0[2] = 0.0;
//   jointSSP.rod1.v_CM_0[3] = 0.0;
//   jointSSP.rod1.f_CM_a[1] = 0.0;
//   jointSSP.rod1.f_CM_a[2] = 0.0;
//   jointSSP.rod1.f_CM_a[3] = 0.0;
//   jointSSP.rod1.f_CM_e[1] = 0.0;
//   jointSSP.rod1.f_CM_e[2] = 0.0;
//   jointSSP.rod1.f_CM_e[3] = 0.0;
//   jointSSP.rod1.f_b_a1[1] = 0.0;
//   jointSSP.rod1.f_b_a1[2] = 0.0;
//   jointSSP.rod1.f_b_a1[3] = 0.0;
//   jointSSP.rod1.frame_a.f[1] = jointSSP.rod1.eRod_a[1] * jointSSP.rod1.f_rod;
//   jointSSP.rod1.frame_a.f[2] = jointSSP.rod1.eRod_a[2] * jointSSP.rod1.f_rod;
//   jointSSP.rod1.frame_a.f[3] = jointSSP.rod1.eRod_a[3] * jointSSP.rod1.f_rod;
//   jointSSP.rod1.frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolveRelative({jointSSP.rod1.frame_a.f[1],jointSSP.rod1.frame_a.f[2],jointSSP.rod1.frame_a.f[3]},jointSSP.rod1.frame_a.R,jointSSP.rod1.frame_b.R);
//   jointSSP.rod1.totalPower = 0.0;
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   jointSSP.prismatic.box.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(jointSSP.prismatic.box.shapeType);
//   jointSSP.prismatic.box.rxvisobj[1] = jointSSP.prismatic.box.R.T[1,1] * jointSSP.prismatic.box.e_x[1] + jointSSP.prismatic.box.R.T[2,1] * jointSSP.prismatic.box.e_x[2] + jointSSP.prismatic.box.R.T[3,1] * jointSSP.prismatic.box.e_x[3];
//   jointSSP.prismatic.box.rxvisobj[2] = jointSSP.prismatic.box.R.T[1,2] * jointSSP.prismatic.box.e_x[1] + jointSSP.prismatic.box.R.T[2,2] * jointSSP.prismatic.box.e_x[2] + jointSSP.prismatic.box.R.T[3,2] * jointSSP.prismatic.box.e_x[3];
//   jointSSP.prismatic.box.rxvisobj[3] = jointSSP.prismatic.box.R.T[1,3] * jointSSP.prismatic.box.e_x[1] + jointSSP.prismatic.box.R.T[2,3] * jointSSP.prismatic.box.e_x[2] + jointSSP.prismatic.box.R.T[3,3] * jointSSP.prismatic.box.e_x[3];
//   jointSSP.prismatic.box.ryvisobj[1] = jointSSP.prismatic.box.R.T[1,1] * jointSSP.prismatic.box.e_y[1] + jointSSP.prismatic.box.R.T[2,1] * jointSSP.prismatic.box.e_y[2] + jointSSP.prismatic.box.R.T[3,1] * jointSSP.prismatic.box.e_y[3];
//   jointSSP.prismatic.box.ryvisobj[2] = jointSSP.prismatic.box.R.T[1,2] * jointSSP.prismatic.box.e_y[1] + jointSSP.prismatic.box.R.T[2,2] * jointSSP.prismatic.box.e_y[2] + jointSSP.prismatic.box.R.T[3,2] * jointSSP.prismatic.box.e_y[3];
//   jointSSP.prismatic.box.ryvisobj[3] = jointSSP.prismatic.box.R.T[1,3] * jointSSP.prismatic.box.e_y[1] + jointSSP.prismatic.box.R.T[2,3] * jointSSP.prismatic.box.e_y[2] + jointSSP.prismatic.box.R.T[3,3] * jointSSP.prismatic.box.e_y[3];
//   jointSSP.prismatic.box.rvisobj = jointSSP.prismatic.box.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{jointSSP.prismatic.box.R.T[1,1],jointSSP.prismatic.box.R.T[1,2],jointSSP.prismatic.box.R.T[1,3]},{jointSSP.prismatic.box.R.T[2,1],jointSSP.prismatic.box.R.T[2,2],jointSSP.prismatic.box.R.T[2,3]},{jointSSP.prismatic.box.R.T[3,1],jointSSP.prismatic.box.R.T[3,2],jointSSP.prismatic.box.R.T[3,3]}},{jointSSP.prismatic.box.r_shape[1],jointSSP.prismatic.box.r_shape[2],jointSSP.prismatic.box.r_shape[3]});
//   jointSSP.prismatic.box.size[1] = jointSSP.prismatic.box.length;
//   jointSSP.prismatic.box.size[2] = jointSSP.prismatic.box.width;
//   jointSSP.prismatic.box.size[3] = jointSSP.prismatic.box.height;
//   jointSSP.prismatic.box.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(jointSSP.prismatic.box.color[1] / 255.0,jointSSP.prismatic.box.color[2] / 255.0,jointSSP.prismatic.box.color[3] / 255.0,jointSSP.prismatic.box.specularCoefficient);
//   jointSSP.prismatic.box.Extra = jointSSP.prismatic.box.extra;
//   jointSSP.prismatic.axis.f = jointSSP.prismatic.f;
//   jointSSP.prismatic.axis.s = jointSSP.prismatic.s;
//   jointSSP.prismatic.bearing.s = 0.0;
//   jointSSP.prismatic.distance = jointSSP.prismatic.s_offset + jointSSP.prismatic.s;
//   jointSSP.prismatic.r_rel_a[1] = jointSSP.prismatic.e[1] * jointSSP.prismatic.distance;
//   jointSSP.prismatic.r_rel_a[2] = jointSSP.prismatic.e[2] * jointSSP.prismatic.distance;
//   jointSSP.prismatic.r_rel_a[3] = jointSSP.prismatic.e[3] * jointSSP.prismatic.distance;
//   jointSSP.prismatic.frame_b.r_0 = jointSSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(jointSSP.prismatic.frame_a.R,{jointSSP.prismatic.r_rel_a[1],jointSSP.prismatic.r_rel_a[2],jointSSP.prismatic.r_rel_a[3]});
//   jointSSP.prismatic.frame_b.R.T[1,1] = jointSSP.prismatic.frame_a.R.T[1,1];
//   jointSSP.prismatic.frame_b.R.T[1,2] = jointSSP.prismatic.frame_a.R.T[1,2];
//   jointSSP.prismatic.frame_b.R.T[1,3] = jointSSP.prismatic.frame_a.R.T[1,3];
//   jointSSP.prismatic.frame_b.R.T[2,1] = jointSSP.prismatic.frame_a.R.T[2,1];
//   jointSSP.prismatic.frame_b.R.T[2,2] = jointSSP.prismatic.frame_a.R.T[2,2];
//   jointSSP.prismatic.frame_b.R.T[2,3] = jointSSP.prismatic.frame_a.R.T[2,3];
//   jointSSP.prismatic.frame_b.R.T[3,1] = jointSSP.prismatic.frame_a.R.T[3,1];
//   jointSSP.prismatic.frame_b.R.T[3,2] = jointSSP.prismatic.frame_a.R.T[3,2];
//   jointSSP.prismatic.frame_b.R.T[3,3] = jointSSP.prismatic.frame_a.R.T[3,3];
//   jointSSP.prismatic.frame_b.R.w[1] = jointSSP.prismatic.frame_a.R.w[1];
//   jointSSP.prismatic.frame_b.R.w[2] = jointSSP.prismatic.frame_a.R.w[2];
//   jointSSP.prismatic.frame_b.R.w[3] = jointSSP.prismatic.frame_a.R.w[3];
//   0.0 = jointSSP.prismatic.frame_a.f[1] + jointSSP.prismatic.frame_b.f[1];
//   0.0 = jointSSP.prismatic.frame_a.f[2] + jointSSP.prismatic.frame_b.f[2];
//   0.0 = jointSSP.prismatic.frame_a.f[3] + jointSSP.prismatic.frame_b.f[3];
//   0.0 = jointSSP.prismatic.frame_a.t[1] + jointSSP.prismatic.frame_b.t[1] + (jointSSP.prismatic.r_rel_a[2] * jointSSP.prismatic.frame_b.f[3] - jointSSP.prismatic.r_rel_a[3] * jointSSP.prismatic.frame_b.f[2]);
//   0.0 = jointSSP.prismatic.frame_a.t[2] + jointSSP.prismatic.frame_b.t[2] + (jointSSP.prismatic.r_rel_a[3] * jointSSP.prismatic.frame_b.f[1] - jointSSP.prismatic.r_rel_a[1] * jointSSP.prismatic.frame_b.f[3]);
//   0.0 = jointSSP.prismatic.frame_a.t[3] + jointSSP.prismatic.frame_b.t[3] + (jointSSP.prismatic.r_rel_a[1] * jointSSP.prismatic.frame_b.f[2] - jointSSP.prismatic.r_rel_a[2] * jointSSP.prismatic.frame_b.f[1]);
//   jointSSP.prismatic.rbra[1] = jointSSP.prismatic.r_b[1] - jointSSP.prismatic.r_a[1];
//   jointSSP.prismatic.rbra[2] = jointSSP.prismatic.r_b[2] - jointSSP.prismatic.r_a[2];
//   jointSSP.prismatic.rbra[3] = jointSSP.prismatic.r_b[3] - jointSSP.prismatic.r_a[3];
//   jointSSP.prismatic.B = 2.0 * (jointSSP.prismatic.e[1] * jointSSP.prismatic.rbra[1] + (jointSSP.prismatic.e[2] * jointSSP.prismatic.rbra[2] + jointSSP.prismatic.e[3] * jointSSP.prismatic.rbra[3]));
//   jointSSP.prismatic.C = jointSSP.prismatic.rbra[1] ^ 2.0 + (jointSSP.prismatic.rbra[2] ^ 2.0 + (jointSSP.prismatic.rbra[3] ^ 2.0 - jointSSP.prismatic.length ^ 2.0));
//   jointSSP.prismatic.k1 = jointSSP.prismatic.B / 2.0;
//   jointSSP.prismatic.k1a = jointSSP.prismatic.k1 ^ 2.0 - jointSSP.prismatic.C;
//   assert(noEvent(jointSSP.prismatic.k1a > 0.0000000001),\"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// \");
//   jointSSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(jointSSP.prismatic.k1a,0.000000000001);
//   jointSSP.prismatic.k2 = sqrt(jointSSP.prismatic.k1b);
//   jointSSP.prismatic.distance = (if jointSSP.prismatic.positiveBranch then jointSSP.prismatic.k2 else -jointSSP.prismatic.k2) - jointSSP.prismatic.k1;
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   jointSSP.rod2.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(jointSSP.rod2.shape.shapeType);
//   jointSSP.rod2.shape.rxvisobj[1] = jointSSP.rod2.shape.R.T[1,1] * jointSSP.rod2.shape.e_x[1] + jointSSP.rod2.shape.R.T[2,1] * jointSSP.rod2.shape.e_x[2] + jointSSP.rod2.shape.R.T[3,1] * jointSSP.rod2.shape.e_x[3];
//   jointSSP.rod2.shape.rxvisobj[2] = jointSSP.rod2.shape.R.T[1,2] * jointSSP.rod2.shape.e_x[1] + jointSSP.rod2.shape.R.T[2,2] * jointSSP.rod2.shape.e_x[2] + jointSSP.rod2.shape.R.T[3,2] * jointSSP.rod2.shape.e_x[3];
//   jointSSP.rod2.shape.rxvisobj[3] = jointSSP.rod2.shape.R.T[1,3] * jointSSP.rod2.shape.e_x[1] + jointSSP.rod2.shape.R.T[2,3] * jointSSP.rod2.shape.e_x[2] + jointSSP.rod2.shape.R.T[3,3] * jointSSP.rod2.shape.e_x[3];
//   jointSSP.rod2.shape.ryvisobj[1] = jointSSP.rod2.shape.R.T[1,1] * jointSSP.rod2.shape.e_y[1] + jointSSP.rod2.shape.R.T[2,1] * jointSSP.rod2.shape.e_y[2] + jointSSP.rod2.shape.R.T[3,1] * jointSSP.rod2.shape.e_y[3];
//   jointSSP.rod2.shape.ryvisobj[2] = jointSSP.rod2.shape.R.T[1,2] * jointSSP.rod2.shape.e_y[1] + jointSSP.rod2.shape.R.T[2,2] * jointSSP.rod2.shape.e_y[2] + jointSSP.rod2.shape.R.T[3,2] * jointSSP.rod2.shape.e_y[3];
//   jointSSP.rod2.shape.ryvisobj[3] = jointSSP.rod2.shape.R.T[1,3] * jointSSP.rod2.shape.e_y[1] + jointSSP.rod2.shape.R.T[2,3] * jointSSP.rod2.shape.e_y[2] + jointSSP.rod2.shape.R.T[3,3] * jointSSP.rod2.shape.e_y[3];
//   jointSSP.rod2.shape.rvisobj = jointSSP.rod2.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{jointSSP.rod2.shape.R.T[1,1],jointSSP.rod2.shape.R.T[1,2],jointSSP.rod2.shape.R.T[1,3]},{jointSSP.rod2.shape.R.T[2,1],jointSSP.rod2.shape.R.T[2,2],jointSSP.rod2.shape.R.T[2,3]},{jointSSP.rod2.shape.R.T[3,1],jointSSP.rod2.shape.R.T[3,2],jointSSP.rod2.shape.R.T[3,3]}},{jointSSP.rod2.shape.r_shape[1],jointSSP.rod2.shape.r_shape[2],jointSSP.rod2.shape.r_shape[3]});
//   jointSSP.rod2.shape.size[1] = jointSSP.rod2.shape.length;
//   jointSSP.rod2.shape.size[2] = jointSSP.rod2.shape.width;
//   jointSSP.rod2.shape.size[3] = jointSSP.rod2.shape.height;
//   jointSSP.rod2.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(jointSSP.rod2.shape.color[1] / 255.0,jointSSP.rod2.shape.color[2] / 255.0,jointSSP.rod2.shape.color[3] / 255.0,jointSSP.rod2.shape.specularCoefficient);
//   jointSSP.rod2.shape.Extra = jointSSP.rod2.shape.extra;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   jointSSP.rod2.frame_b.r_0 = jointSSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(jointSSP.rod2.frame_a.R,{jointSSP.rod2.r[1],jointSSP.rod2.r[2],jointSSP.rod2.r[3]});
//   jointSSP.rod2.frame_b.R.T[1,1] = jointSSP.rod2.frame_a.R.T[1,1];
//   jointSSP.rod2.frame_b.R.T[1,2] = jointSSP.rod2.frame_a.R.T[1,2];
//   jointSSP.rod2.frame_b.R.T[1,3] = jointSSP.rod2.frame_a.R.T[1,3];
//   jointSSP.rod2.frame_b.R.T[2,1] = jointSSP.rod2.frame_a.R.T[2,1];
//   jointSSP.rod2.frame_b.R.T[2,2] = jointSSP.rod2.frame_a.R.T[2,2];
//   jointSSP.rod2.frame_b.R.T[2,3] = jointSSP.rod2.frame_a.R.T[2,3];
//   jointSSP.rod2.frame_b.R.T[3,1] = jointSSP.rod2.frame_a.R.T[3,1];
//   jointSSP.rod2.frame_b.R.T[3,2] = jointSSP.rod2.frame_a.R.T[3,2];
//   jointSSP.rod2.frame_b.R.T[3,3] = jointSSP.rod2.frame_a.R.T[3,3];
//   jointSSP.rod2.frame_b.R.w[1] = jointSSP.rod2.frame_a.R.w[1];
//   jointSSP.rod2.frame_b.R.w[2] = jointSSP.rod2.frame_a.R.w[2];
//   jointSSP.rod2.frame_b.R.w[3] = jointSSP.rod2.frame_a.R.w[3];
//   0.0 = jointSSP.rod2.frame_a.f[1] + jointSSP.rod2.frame_b.f[1];
//   0.0 = jointSSP.rod2.frame_a.f[2] + jointSSP.rod2.frame_b.f[2];
//   0.0 = jointSSP.rod2.frame_a.f[3] + jointSSP.rod2.frame_b.f[3];
//   0.0 = jointSSP.rod2.frame_a.t[1] + jointSSP.rod2.frame_b.t[1] + (jointSSP.rod2.r[2] * jointSSP.rod2.frame_b.f[3] - jointSSP.rod2.r[3] * jointSSP.rod2.frame_b.f[2]);
//   0.0 = jointSSP.rod2.frame_a.t[2] + jointSSP.rod2.frame_b.t[2] + (jointSSP.rod2.r[3] * jointSSP.rod2.frame_b.f[1] - jointSSP.rod2.r[1] * jointSSP.rod2.frame_b.f[3]);
//   0.0 = jointSSP.rod2.frame_a.t[3] + jointSSP.rod2.frame_b.t[3] + (jointSSP.rod2.r[1] * jointSSP.rod2.frame_b.f[2] - jointSSP.rod2.r[2] * jointSSP.rod2.frame_b.f[1]);
//   jointSSP.aux = {jointSSP.prismatic.e[1],jointSSP.prismatic.e[2],jointSSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({jointSSP.rod1.eRod_a[1],jointSSP.rod1.eRod_a[2],jointSSP.rod1.eRod_a[3]},jointSSP.rod1.frame_a.R,jointSSP.rod1.frame_b.R);
//   jointSSP.f_rod = ((-jointSSP.prismatic.e[2]) * (jointSSP.frame_ib.f[2] + jointSSP.frame_im.f[2]) + ((-jointSSP.prismatic.e[1]) * (jointSSP.frame_ib.f[1] + jointSSP.frame_im.f[1]) - jointSSP.prismatic.f - jointSSP.prismatic.e[3] * (jointSSP.frame_ib.f[3] + jointSSP.frame_im.f[3]))) / (if noEvent(abs(jointSSP.aux) < 0.0000000001) then 0.0000000001 else jointSSP.aux);
//   jointSSP.totalPower = {jointSSP.frame_a.f[1],jointSSP.frame_a.f[2],jointSSP.frame_a.f[3]} * Modelica.Mechanics.MultiBody.Frames.resolve2(jointSSP.frame_a.R,{der(jointSSP.frame_a.r_0[1]),der(jointSSP.frame_a.r_0[2]),der(jointSSP.frame_a.r_0[3])}) + ({jointSSP.frame_b.f[1],jointSSP.frame_b.f[2],jointSSP.frame_b.f[3]} * Modelica.Mechanics.MultiBody.Frames.resolve2(jointSSP.frame_b.R,{der(jointSSP.frame_b.r_0[1]),der(jointSSP.frame_b.r_0[2]),der(jointSSP.frame_b.r_0[3])}) + ({jointSSP.frame_ib.f[1],jointSSP.frame_ib.f[2],jointSSP.frame_ib.f[3]} * Modelica.Mechanics.MultiBody.Frames.resolve2(jointSSP.frame_ib.R,{der(jointSSP.frame_ib.r_0[1]),der(jointSSP.frame_ib.r_0[2]),der(jointSSP.frame_ib.r_0[3])}) + ({jointSSP.frame_im.f[1],jointSSP.frame_im.f[2],jointSSP.frame_im.f[3]} * Modelica.Mechanics.MultiBody.Frames.resolve2(jointSSP.frame_im.R,{der(jointSSP.frame_im.r_0[1]),der(jointSSP.frame_im.r_0[2]),der(jointSSP.frame_im.r_0[3])}) + ({jointSSP.frame_a.t[1],jointSSP.frame_a.t[2],jointSSP.frame_a.t[3]} * Modelica.Mechanics.MultiBody.Frames.angularVelocity2(jointSSP.frame_a.R) + ({jointSSP.frame_b.t[1],jointSSP.frame_b.t[2],jointSSP.frame_b.t[3]} * Modelica.Mechanics.MultiBody.Frames.angularVelocity2(jointSSP.frame_b.R) + ({jointSSP.frame_ib.t[1],jointSSP.frame_ib.t[2],jointSSP.frame_ib.t[3]} * Modelica.Mechanics.MultiBody.Frames.angularVelocity2(jointSSP.frame_ib.R) + ({jointSSP.frame_im.t[1],jointSSP.frame_im.t[2],jointSSP.frame_im.t[3]} * Modelica.Mechanics.MultiBody.Frames.angularVelocity2(jointSSP.frame_im.R) + (jointSSP.axis.f * der(jointSSP.axis.s) + (jointSSP.bearing.f * der(jointSSP.bearing.s) + ({der(jointSSP.rod1.v_CM_0[1]),der(jointSSP.rod1.v_CM_0[2]),der(jointSSP.rod1.v_CM_0[3])} - Modelica.Mechanics.MultiBody.Joints.Assemblies.JointSSP.world__gravityAcceleration({jointSSP.rod1.r_CM_0[1],jointSSP.rod1.r_CM_0[2],jointSSP.rod1.r_CM_0[3]},world.gravityType,Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},0.0000000000001) * world.g,world.mue)) * (-jointSSP.rod1Mass) * {jointSSP.rod1.v_CM_0[1],jointSSP.rod1.v_CM_0[2],jointSSP.rod1.v_CM_0[3]})))))))));
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   b2.body.r_0[1] = b2.body.frame_a.r_0[1];
//   b2.body.r_0[2] = b2.body.frame_a.r_0[2];
//   b2.body.r_0[3] = b2.body.frame_a.r_0[3];
//   if true then
//   b2.body.Q[1] = 0.0;
//   b2.body.Q[2] = 0.0;
//   b2.body.Q[3] = 0.0;
//   b2.body.Q[4] = 1.0;
//   b2.body.phi[1] = 0.0;
//   b2.body.phi[2] = 0.0;
//   b2.body.phi[3] = 0.0;
//   b2.body.phi_d[1] = 0.0;
//   b2.body.phi_d[2] = 0.0;
//   b2.body.phi_d[3] = 0.0;
//   b2.body.phi_dd[1] = 0.0;
//   b2.body.phi_dd[2] = 0.0;
//   b2.body.phi_dd[3] = 0.0;
//   elseif b2.body.useQuaternions then
//   b2.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({b2.body.Q[1],b2.body.Q[2],b2.body.Q[3],b2.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({b2.body.Q[1],b2.body.Q[2],b2.body.Q[3],b2.body.Q[4]},{der(b2.body.Q[1]),der(b2.body.Q[2]),der(b2.body.Q[3]),der(b2.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({b2.body.Q[1],b2.body.Q[2],b2.body.Q[3],b2.body.Q[4]});
//   b2.body.phi[1] = 0.0;
//   b2.body.phi[2] = 0.0;
//   b2.body.phi[3] = 0.0;
//   b2.body.phi_d[1] = 0.0;
//   b2.body.phi_d[2] = 0.0;
//   b2.body.phi_d[3] = 0.0;
//   b2.body.phi_dd[1] = 0.0;
//   b2.body.phi_dd[2] = 0.0;
//   b2.body.phi_dd[3] = 0.0;
//   else
//   b2.body.phi_d[1] = der(b2.body.phi[1]);
//   b2.body.phi_d[2] = der(b2.body.phi[2]);
//   b2.body.phi_d[3] = der(b2.body.phi[3]);
//   b2.body.phi_dd[1] = der(b2.body.phi_d[1]);
//   b2.body.phi_dd[2] = der(b2.body.phi_d[2]);
//   b2.body.phi_dd[3] = der(b2.body.phi_d[3]);
//   b2.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({b2.body.sequence_angleStates[1],b2.body.sequence_angleStates[2],b2.body.sequence_angleStates[3]},{b2.body.phi[1],b2.body.phi[2],b2.body.phi[3]},{b2.body.phi_d[1],b2.body.phi_d[2],b2.body.phi_d[3]});
//   b2.body.Q[1] = 0.0;
//   b2.body.Q[2] = 0.0;
//   b2.body.Q[3] = 0.0;
//   b2.body.Q[4] = 1.0;
//   end if;
//   b2.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration({b2.body.frame_a.r_0[1],b2.body.frame_a.r_0[2],b2.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(b2.body.frame_a.R,{b2.body.r_CM[1],b2.body.r_CM[2],b2.body.r_CM[3]}),world.gravityType,Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},0.0000000000001) * world.g,world.mue);
//   b2.body.v_0[1] = der(b2.body.frame_a.r_0[1]);
//   b2.body.v_0[2] = der(b2.body.frame_a.r_0[2]);
//   b2.body.v_0[3] = der(b2.body.frame_a.r_0[3]);
//   b2.body.a_0[1] = der(b2.body.v_0[1]);
//   b2.body.a_0[2] = der(b2.body.v_0[2]);
//   b2.body.a_0[3] = der(b2.body.v_0[3]);
//   b2.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(b2.body.frame_a.R);
//   b2.body.z_a[1] = der(b2.body.w_a[1]);
//   b2.body.z_a[2] = der(b2.body.w_a[2]);
//   b2.body.z_a[3] = der(b2.body.w_a[3]);
//   b2.body.frame_a.f = (Modelica.Mechanics.MultiBody.Frames.resolve2(b2.body.frame_a.R,{b2.body.a_0[1] - b2.body.g_0[1],b2.body.a_0[2] - b2.body.g_0[2],b2.body.a_0[3] - b2.body.g_0[3]}) + {b2.body.z_a[2] * b2.body.r_CM[3] - b2.body.z_a[3] * b2.body.r_CM[2],b2.body.z_a[3] * b2.body.r_CM[1] - b2.body.z_a[1] * b2.body.r_CM[3],b2.body.z_a[1] * b2.body.r_CM[2] - b2.body.z_a[2] * b2.body.r_CM[1]} + {b2.body.w_a[2] * (b2.body.w_a[1] * b2.body.r_CM[2] - b2.body.w_a[2] * b2.body.r_CM[1]) - b2.body.w_a[3] * (b2.body.w_a[3] * b2.body.r_CM[1] - b2.body.w_a[1] * b2.body.r_CM[3]),b2.body.w_a[3] * (b2.body.w_a[2] * b2.body.r_CM[3] - b2.body.w_a[3] * b2.body.r_CM[2]) - b2.body.w_a[1] * (b2.body.w_a[1] * b2.body.r_CM[2] - b2.body.w_a[2] * b2.body.r_CM[1]),b2.body.w_a[1] * (b2.body.w_a[3] * b2.body.r_CM[1] - b2.body.w_a[1] * b2.body.r_CM[3]) - b2.body.w_a[2] * (b2.body.w_a[2] * b2.body.r_CM[3] - b2.body.w_a[3] * b2.body.r_CM[2])}) * b2.body.m;
//   b2.body.frame_a.t[1] = b2.body.I[1,1] * b2.body.z_a[1] + b2.body.I[1,2] * b2.body.z_a[2] + b2.body.I[1,3] * b2.body.z_a[3] + (b2.body.w_a[2] * (b2.body.I[3,1] * b2.body.w_a[1] + b2.body.I[3,2] * b2.body.w_a[2] + b2.body.I[3,3] * b2.body.w_a[3]) - b2.body.w_a[3] * (b2.body.I[2,1] * b2.body.w_a[1] + b2.body.I[2,2] * b2.body.w_a[2] + b2.body.I[2,3] * b2.body.w_a[3])) + (b2.body.r_CM[2] * b2.body.frame_a.f[3] - b2.body.r_CM[3] * b2.body.frame_a.f[2]);
//   b2.body.frame_a.t[2] = b2.body.I[2,1] * b2.body.z_a[1] + b2.body.I[2,2] * b2.body.z_a[2] + b2.body.I[2,3] * b2.body.z_a[3] + (b2.body.w_a[3] * (b2.body.I[1,1] * b2.body.w_a[1] + b2.body.I[1,2] * b2.body.w_a[2] + b2.body.I[1,3] * b2.body.w_a[3]) - b2.body.w_a[1] * (b2.body.I[3,1] * b2.body.w_a[1] + b2.body.I[3,2] * b2.body.w_a[2] + b2.body.I[3,3] * b2.body.w_a[3])) + (b2.body.r_CM[3] * b2.body.frame_a.f[1] - b2.body.r_CM[1] * b2.body.frame_a.f[3]);
//   b2.body.frame_a.t[3] = b2.body.I[3,1] * b2.body.z_a[1] + b2.body.I[3,2] * b2.body.z_a[2] + b2.body.I[3,3] * b2.body.z_a[3] + (b2.body.w_a[1] * (b2.body.I[2,1] * b2.body.w_a[1] + b2.body.I[2,2] * b2.body.w_a[2] + b2.body.I[2,3] * b2.body.w_a[3]) - b2.body.w_a[2] * (b2.body.I[1,1] * b2.body.w_a[1] + b2.body.I[1,2] * b2.body.w_a[2] + b2.body.I[1,3] * b2.body.w_a[3])) + (b2.body.r_CM[1] * b2.body.frame_a.f[2] - b2.body.r_CM[2] * b2.body.frame_a.f[1]);
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   b2.frameTranslation.frame_b.r_0 = b2.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(b2.frameTranslation.frame_a.R,{b2.frameTranslation.r[1],b2.frameTranslation.r[2],b2.frameTranslation.r[3]});
//   b2.frameTranslation.frame_b.R.T[1,1] = b2.frameTranslation.frame_a.R.T[1,1];
//   b2.frameTranslation.frame_b.R.T[1,2] = b2.frameTranslation.frame_a.R.T[1,2];
//   b2.frameTranslation.frame_b.R.T[1,3] = b2.frameTranslation.frame_a.R.T[1,3];
//   b2.frameTranslation.frame_b.R.T[2,1] = b2.frameTranslation.frame_a.R.T[2,1];
//   b2.frameTranslation.frame_b.R.T[2,2] = b2.frameTranslation.frame_a.R.T[2,2];
//   b2.frameTranslation.frame_b.R.T[2,3] = b2.frameTranslation.frame_a.R.T[2,3];
//   b2.frameTranslation.frame_b.R.T[3,1] = b2.frameTranslation.frame_a.R.T[3,1];
//   b2.frameTranslation.frame_b.R.T[3,2] = b2.frameTranslation.frame_a.R.T[3,2];
//   b2.frameTranslation.frame_b.R.T[3,3] = b2.frameTranslation.frame_a.R.T[3,3];
//   b2.frameTranslation.frame_b.R.w[1] = b2.frameTranslation.frame_a.R.w[1];
//   b2.frameTranslation.frame_b.R.w[2] = b2.frameTranslation.frame_a.R.w[2];
//   b2.frameTranslation.frame_b.R.w[3] = b2.frameTranslation.frame_a.R.w[3];
//   0.0 = b2.frameTranslation.frame_a.f[1] + b2.frameTranslation.frame_b.f[1];
//   0.0 = b2.frameTranslation.frame_a.f[2] + b2.frameTranslation.frame_b.f[2];
//   0.0 = b2.frameTranslation.frame_a.f[3] + b2.frameTranslation.frame_b.f[3];
//   0.0 = b2.frameTranslation.frame_a.t[1] + b2.frameTranslation.frame_b.t[1] + (b2.frameTranslation.r[2] * b2.frameTranslation.frame_b.f[3] - b2.frameTranslation.r[3] * b2.frameTranslation.frame_b.f[2]);
//   0.0 = b2.frameTranslation.frame_a.t[2] + b2.frameTranslation.frame_b.t[2] + (b2.frameTranslation.r[3] * b2.frameTranslation.frame_b.f[1] - b2.frameTranslation.r[1] * b2.frameTranslation.frame_b.f[3]);
//   0.0 = b2.frameTranslation.frame_a.t[3] + b2.frameTranslation.frame_b.t[3] + (b2.frameTranslation.r[1] * b2.frameTranslation.frame_b.f[2] - b2.frameTranslation.r[2] * b2.frameTranslation.frame_b.f[1]);
//   b2.r_0[1] = b2.frame_a.r_0[1];
//   b2.r_0[2] = b2.frame_a.r_0[2];
//   b2.r_0[3] = b2.frame_a.r_0[3];
//   b2.v_0[1] = der(b2.r_0[1]);
//   b2.v_0[2] = der(b2.r_0[2]);
//   b2.v_0[3] = der(b2.r_0[3]);
//   b2.a_0[1] = der(b2.v_0[1]);
//   b2.a_0[2] = der(b2.v_0[2]);
//   b2.a_0[3] = der(b2.v_0[3]);
//   assert(b2.innerDiameter < b2.diameter,\"parameter innerDiameter is greater as parameter diameter.\");
//   j1_phi = j1.phi;
//   j2_s = jointSSP.prismatic.distance;
//   j1_w = j1.w;
//   j2_v = der(jointSSP.prismatic.distance);
//   world.frame_b.t[1] + j1.frame_a.t[1] + b3.frame_a.t[1] = 0.0;
//   world.frame_b.t[2] + j1.frame_a.t[2] + b3.frame_a.t[2] = 0.0;
//   world.frame_b.t[3] + j1.frame_a.t[3] + b3.frame_a.t[3] = 0.0;
//   world.frame_b.f[1] + j1.frame_a.f[1] + b3.frame_a.f[1] = 0.0;
//   world.frame_b.f[2] + j1.frame_a.f[2] + b3.frame_a.f[2] = 0.0;
//   world.frame_b.f[3] + j1.frame_a.f[3] + b3.frame_a.f[3] = 0.0;
//   j1.frame_b.t[1] + b1.frame_a.t[1] = 0.0;
//   j1.frame_b.t[2] + b1.frame_a.t[2] = 0.0;
//   j1.frame_b.t[3] + b1.frame_a.t[3] = 0.0;
//   j1.frame_b.f[1] + b1.frame_a.f[1] = 0.0;
//   j1.frame_b.f[2] + b1.frame_a.f[2] = 0.0;
//   j1.frame_b.f[3] + b1.frame_a.f[3] = 0.0;
//   j1.fixed.flange.tau + -j1.support.tau = 0.0;
//   j1.axis.tau = 0.0;
//   j1.support.tau = 0.0;
//   -j1.axis.tau + j1.internalAxis.flange.tau = 0.0;
//   j1.fixed.flange.phi = j1.support.phi;
//   j1.axis.phi = j1.internalAxis.flange.phi;
//   b1.frame_b.t[1] + jointSSP.frame_a.t[1] = 0.0;
//   b1.frame_b.t[2] + jointSSP.frame_a.t[2] = 0.0;
//   b1.frame_b.t[3] + jointSSP.frame_a.t[3] = 0.0;
//   b1.frame_b.f[1] + jointSSP.frame_a.f[1] = 0.0;
//   b1.frame_b.f[2] + jointSSP.frame_a.f[2] = 0.0;
//   b1.frame_b.f[3] + jointSSP.frame_a.f[3] = 0.0;
//   -b1.frame_a.t[1] + b1.body.frame_a.t[1] + b1.frameTranslation.frame_a.t[1] = 0.0;
//   -b1.frame_a.t[2] + b1.body.frame_a.t[2] + b1.frameTranslation.frame_a.t[2] = 0.0;
//   -b1.frame_a.t[3] + b1.body.frame_a.t[3] + b1.frameTranslation.frame_a.t[3] = 0.0;
//   -b1.frame_a.f[1] + b1.body.frame_a.f[1] + b1.frameTranslation.frame_a.f[1] = 0.0;
//   -b1.frame_a.f[2] + b1.body.frame_a.f[2] + b1.frameTranslation.frame_a.f[2] = 0.0;
//   -b1.frame_a.f[3] + b1.body.frame_a.f[3] + b1.frameTranslation.frame_a.f[3] = 0.0;
//   -b1.frame_b.t[1] + b1.frameTranslation.frame_b.t[1] = 0.0;
//   -b1.frame_b.t[2] + b1.frameTranslation.frame_b.t[2] = 0.0;
//   -b1.frame_b.t[3] + b1.frameTranslation.frame_b.t[3] = 0.0;
//   -b1.frame_b.f[1] + b1.frameTranslation.frame_b.f[1] = 0.0;
//   -b1.frame_b.f[2] + b1.frameTranslation.frame_b.f[2] = 0.0;
//   -b1.frame_b.f[3] + b1.frameTranslation.frame_b.f[3] = 0.0;
//   b1.body.frame_a.r_0[3] = b1.frameTranslation.frame_a.r_0[3];
//   b1.body.frame_a.r_0[3] = b1.frame_a.r_0[3];
//   b1.body.frame_a.r_0[2] = b1.frameTranslation.frame_a.r_0[2];
//   b1.body.frame_a.r_0[2] = b1.frame_a.r_0[2];
//   b1.body.frame_a.r_0[1] = b1.frameTranslation.frame_a.r_0[1];
//   b1.body.frame_a.r_0[1] = b1.frame_a.r_0[1];
//   b1.body.frame_a.R.T[3,3] = b1.frameTranslation.frame_a.R.T[3,3];
//   b1.body.frame_a.R.T[3,3] = b1.frame_a.R.T[3,3];
//   b1.body.frame_a.R.T[3,2] = b1.frameTranslation.frame_a.R.T[3,2];
//   b1.body.frame_a.R.T[3,2] = b1.frame_a.R.T[3,2];
//   b1.body.frame_a.R.T[3,1] = b1.frameTranslation.frame_a.R.T[3,1];
//   b1.body.frame_a.R.T[3,1] = b1.frame_a.R.T[3,1];
//   b1.body.frame_a.R.T[2,3] = b1.frameTranslation.frame_a.R.T[2,3];
//   b1.body.frame_a.R.T[2,3] = b1.frame_a.R.T[2,3];
//   b1.body.frame_a.R.T[2,2] = b1.frameTranslation.frame_a.R.T[2,2];
//   b1.body.frame_a.R.T[2,2] = b1.frame_a.R.T[2,2];
//   b1.body.frame_a.R.T[2,1] = b1.frameTranslation.frame_a.R.T[2,1];
//   b1.body.frame_a.R.T[2,1] = b1.frame_a.R.T[2,1];
//   b1.body.frame_a.R.T[1,3] = b1.frameTranslation.frame_a.R.T[1,3];
//   b1.body.frame_a.R.T[1,3] = b1.frame_a.R.T[1,3];
//   b1.body.frame_a.R.T[1,2] = b1.frameTranslation.frame_a.R.T[1,2];
//   b1.body.frame_a.R.T[1,2] = b1.frame_a.R.T[1,2];
//   b1.body.frame_a.R.T[1,1] = b1.frameTranslation.frame_a.R.T[1,1];
//   b1.body.frame_a.R.T[1,1] = b1.frame_a.R.T[1,1];
//   b1.body.frame_a.R.w[3] = b1.frameTranslation.frame_a.R.w[3];
//   b1.body.frame_a.R.w[3] = b1.frame_a.R.w[3];
//   b1.body.frame_a.R.w[2] = b1.frameTranslation.frame_a.R.w[2];
//   b1.body.frame_a.R.w[2] = b1.frame_a.R.w[2];
//   b1.body.frame_a.R.w[1] = b1.frameTranslation.frame_a.R.w[1];
//   b1.body.frame_a.R.w[1] = b1.frame_a.R.w[1];
//   b1.frameTranslation.frame_b.r_0[3] = b1.frame_b.r_0[3];
//   b1.frameTranslation.frame_b.r_0[2] = b1.frame_b.r_0[2];
//   b1.frameTranslation.frame_b.r_0[1] = b1.frame_b.r_0[1];
//   b1.frameTranslation.frame_b.R.T[3,3] = b1.frame_b.R.T[3,3];
//   b1.frameTranslation.frame_b.R.T[3,2] = b1.frame_b.R.T[3,2];
//   b1.frameTranslation.frame_b.R.T[3,1] = b1.frame_b.R.T[3,1];
//   b1.frameTranslation.frame_b.R.T[2,3] = b1.frame_b.R.T[2,3];
//   b1.frameTranslation.frame_b.R.T[2,2] = b1.frame_b.R.T[2,2];
//   b1.frameTranslation.frame_b.R.T[2,1] = b1.frame_b.R.T[2,1];
//   b1.frameTranslation.frame_b.R.T[1,3] = b1.frame_b.R.T[1,3];
//   b1.frameTranslation.frame_b.R.T[1,2] = b1.frame_b.R.T[1,2];
//   b1.frameTranslation.frame_b.R.T[1,1] = b1.frame_b.R.T[1,1];
//   b1.frameTranslation.frame_b.R.w[3] = b1.frame_b.R.w[3];
//   b1.frameTranslation.frame_b.R.w[2] = b1.frame_b.R.w[2];
//   b1.frameTranslation.frame_b.R.w[1] = b1.frame_b.R.w[1];
//   b3.frame_b.t[1] + jointSSP.frame_b.t[1] = 0.0;
//   b3.frame_b.t[2] + jointSSP.frame_b.t[2] = 0.0;
//   b3.frame_b.t[3] + jointSSP.frame_b.t[3] = 0.0;
//   b3.frame_b.f[1] + jointSSP.frame_b.f[1] = 0.0;
//   b3.frame_b.f[2] + jointSSP.frame_b.f[2] = 0.0;
//   b3.frame_b.f[3] + jointSSP.frame_b.f[3] = 0.0;
//   jointSSP.frame_ib.t[1] + b2.frame_a.t[1] = 0.0;
//   jointSSP.frame_ib.t[2] + b2.frame_a.t[2] = 0.0;
//   jointSSP.frame_ib.t[3] + b2.frame_a.t[3] = 0.0;
//   jointSSP.frame_ib.f[1] + b2.frame_a.f[1] = 0.0;
//   jointSSP.frame_ib.f[2] + b2.frame_a.f[2] = 0.0;
//   jointSSP.frame_ib.f[3] + b2.frame_a.f[3] = 0.0;
//   jointSSP.frame_im.t[1] = 0.0;
//   jointSSP.frame_im.t[2] = 0.0;
//   jointSSP.frame_im.t[3] = 0.0;
//   jointSSP.frame_im.f[1] = 0.0;
//   jointSSP.frame_im.f[2] = 0.0;
//   jointSSP.frame_im.f[3] = 0.0;
//   jointSSP.axis.f = 0.0;
//   jointSSP.bearing.f = 0.0;
//   -jointSSP.frame_b.t[1] + jointSSP.relativePosition.frame_a.t[1] + jointSSP.prismatic.frame_a.t[1] = 0.0;
//   -jointSSP.frame_b.t[2] + jointSSP.relativePosition.frame_a.t[2] + jointSSP.prismatic.frame_a.t[2] = 0.0;
//   -jointSSP.frame_b.t[3] + jointSSP.relativePosition.frame_a.t[3] + jointSSP.prismatic.frame_a.t[3] = 0.0;
//   -jointSSP.frame_b.f[1] + jointSSP.relativePosition.frame_a.f[1] + jointSSP.prismatic.frame_a.f[1] = 0.0;
//   -jointSSP.frame_b.f[2] + jointSSP.relativePosition.frame_a.f[2] + jointSSP.prismatic.frame_a.f[2] = 0.0;
//   -jointSSP.frame_b.f[3] + jointSSP.relativePosition.frame_a.f[3] + jointSSP.prismatic.frame_a.f[3] = 0.0;
//   -jointSSP.frame_a.t[1] + jointSSP.relativePosition.frame_b.t[1] + jointSSP.rod1.frame_a.t[1] = 0.0;
//   -jointSSP.frame_a.t[2] + jointSSP.relativePosition.frame_b.t[2] + jointSSP.rod1.frame_a.t[2] = 0.0;
//   -jointSSP.frame_a.t[3] + jointSSP.relativePosition.frame_b.t[3] + jointSSP.rod1.frame_a.t[3] = 0.0;
//   -jointSSP.frame_a.f[1] + jointSSP.relativePosition.frame_b.f[1] + jointSSP.rod1.frame_a.f[1] = 0.0;
//   -jointSSP.frame_a.f[2] + jointSSP.relativePosition.frame_b.f[2] + jointSSP.rod1.frame_a.f[2] = 0.0;
//   -jointSSP.frame_a.f[3] + jointSSP.relativePosition.frame_b.f[3] + jointSSP.rod1.frame_a.f[3] = 0.0;
//   -jointSSP.relativePosition.frame_a.t[1] + jointSSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   -jointSSP.relativePosition.frame_a.t[2] + jointSSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   -jointSSP.relativePosition.frame_a.t[3] + jointSSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   -jointSSP.relativePosition.frame_a.f[1] + jointSSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   -jointSSP.relativePosition.frame_a.f[2] + jointSSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   -jointSSP.relativePosition.frame_a.f[3] + jointSSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   -jointSSP.relativePosition.frame_b.t[1] + jointSSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   -jointSSP.relativePosition.frame_b.t[2] + jointSSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   -jointSSP.relativePosition.frame_b.t[3] + jointSSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   -jointSSP.relativePosition.frame_b.f[1] + jointSSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   -jointSSP.relativePosition.frame_b.f[2] + jointSSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   -jointSSP.relativePosition.frame_b.f[3] + jointSSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.t[1] + jointSSP.relativePosition.zeroPosition.frame_resolve.t[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.t[2] + jointSSP.relativePosition.zeroPosition.frame_resolve.t[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.t[3] + jointSSP.relativePosition.zeroPosition.frame_resolve.t[3] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.f[1] + jointSSP.relativePosition.zeroPosition.frame_resolve.f[1] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.f[2] + jointSSP.relativePosition.zeroPosition.frame_resolve.f[2] = 0.0;
//   jointSSP.relativePosition.relativePosition.frame_resolve.f[3] + jointSSP.relativePosition.zeroPosition.frame_resolve.f[3] = 0.0;
//   jointSSP.relativePosition.frame_a.r_0[3] = jointSSP.relativePosition.relativePosition.frame_a.r_0[3];
//   jointSSP.relativePosition.frame_a.r_0[2] = jointSSP.relativePosition.relativePosition.frame_a.r_0[2];
//   jointSSP.relativePosition.frame_a.r_0[1] = jointSSP.relativePosition.relativePosition.frame_a.r_0[1];
//   jointSSP.relativePosition.frame_a.R.T[3,3] = jointSSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   jointSSP.relativePosition.frame_a.R.T[3,2] = jointSSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   jointSSP.relativePosition.frame_a.R.T[3,1] = jointSSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   jointSSP.relativePosition.frame_a.R.T[2,3] = jointSSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   jointSSP.relativePosition.frame_a.R.T[2,2] = jointSSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   jointSSP.relativePosition.frame_a.R.T[2,1] = jointSSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   jointSSP.relativePosition.frame_a.R.T[1,3] = jointSSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   jointSSP.relativePosition.frame_a.R.T[1,2] = jointSSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   jointSSP.relativePosition.frame_a.R.T[1,1] = jointSSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   jointSSP.relativePosition.frame_a.R.w[3] = jointSSP.relativePosition.relativePosition.frame_a.R.w[3];
//   jointSSP.relativePosition.frame_a.R.w[2] = jointSSP.relativePosition.relativePosition.frame_a.R.w[2];
//   jointSSP.relativePosition.frame_a.R.w[1] = jointSSP.relativePosition.relativePosition.frame_a.R.w[1];
//   jointSSP.relativePosition.frame_b.r_0[3] = jointSSP.relativePosition.relativePosition.frame_b.r_0[3];
//   jointSSP.relativePosition.frame_b.r_0[2] = jointSSP.relativePosition.relativePosition.frame_b.r_0[2];
//   jointSSP.relativePosition.frame_b.r_0[1] = jointSSP.relativePosition.relativePosition.frame_b.r_0[1];
//   jointSSP.relativePosition.frame_b.R.T[3,3] = jointSSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   jointSSP.relativePosition.frame_b.R.T[3,2] = jointSSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   jointSSP.relativePosition.frame_b.R.T[3,1] = jointSSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   jointSSP.relativePosition.frame_b.R.T[2,3] = jointSSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   jointSSP.relativePosition.frame_b.R.T[2,2] = jointSSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   jointSSP.relativePosition.frame_b.R.T[2,1] = jointSSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   jointSSP.relativePosition.frame_b.R.T[1,3] = jointSSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   jointSSP.relativePosition.frame_b.R.T[1,2] = jointSSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   jointSSP.relativePosition.frame_b.R.T[1,1] = jointSSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   jointSSP.relativePosition.frame_b.R.w[3] = jointSSP.relativePosition.relativePosition.frame_b.R.w[3];
//   jointSSP.relativePosition.frame_b.R.w[2] = jointSSP.relativePosition.relativePosition.frame_b.R.w[2];
//   jointSSP.relativePosition.frame_b.R.w[1] = jointSSP.relativePosition.relativePosition.frame_b.R.w[1];
//   jointSSP.relativePosition.relativePosition.frame_resolve.r_0[3] = jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   jointSSP.relativePosition.relativePosition.frame_resolve.r_0[2] = jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   jointSSP.relativePosition.relativePosition.frame_resolve.r_0[1] = jointSSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.w[3] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.w[2] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   jointSSP.relativePosition.relativePosition.frame_resolve.R.w[1] = jointSSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   jointSSP.relativePosition.r_rel[3] = jointSSP.relativePosition.relativePosition.r_rel[3];
//   jointSSP.relativePosition.r_rel[2] = jointSSP.relativePosition.relativePosition.r_rel[2];
//   jointSSP.relativePosition.r_rel[1] = jointSSP.relativePosition.relativePosition.r_rel[1];
//   -jointSSP.frame_im.t[1] + jointSSP.rod1.frame_b.t[1] + jointSSP.rod2.frame_b.t[1] = 0.0;
//   -jointSSP.frame_im.t[2] + jointSSP.rod1.frame_b.t[2] + jointSSP.rod2.frame_b.t[2] = 0.0;
//   -jointSSP.frame_im.t[3] + jointSSP.rod1.frame_b.t[3] + jointSSP.rod2.frame_b.t[3] = 0.0;
//   -jointSSP.frame_im.f[1] + jointSSP.rod1.frame_b.f[1] + jointSSP.rod2.frame_b.f[1] = 0.0;
//   -jointSSP.frame_im.f[2] + jointSSP.rod1.frame_b.f[2] + jointSSP.rod2.frame_b.f[2] = 0.0;
//   -jointSSP.frame_im.f[3] + jointSSP.rod1.frame_b.f[3] + jointSSP.rod2.frame_b.f[3] = 0.0;
//   -jointSSP.frame_ib.t[1] + jointSSP.prismatic.frame_b.t[1] + jointSSP.rod2.frame_a.t[1] = 0.0;
//   -jointSSP.frame_ib.t[2] + jointSSP.prismatic.frame_b.t[2] + jointSSP.rod2.frame_a.t[2] = 0.0;
//   -jointSSP.frame_ib.t[3] + jointSSP.prismatic.frame_b.t[3] + jointSSP.rod2.frame_a.t[3] = 0.0;
//   -jointSSP.frame_ib.f[1] + jointSSP.prismatic.frame_b.f[1] + jointSSP.rod2.frame_a.f[1] = 0.0;
//   -jointSSP.frame_ib.f[2] + jointSSP.prismatic.frame_b.f[2] + jointSSP.rod2.frame_a.f[2] = 0.0;
//   -jointSSP.frame_ib.f[3] + jointSSP.prismatic.frame_b.f[3] + jointSSP.rod2.frame_a.f[3] = 0.0;
//   -jointSSP.axis.f + jointSSP.prismatic.axis.f = 0.0;
//   -jointSSP.bearing.f + jointSSP.prismatic.bearing.f = 0.0;
//   jointSSP.frame_ib.r_0[3] = jointSSP.prismatic.frame_b.r_0[3];
//   jointSSP.frame_ib.r_0[3] = jointSSP.rod2.frame_a.r_0[3];
//   jointSSP.frame_ib.r_0[2] = jointSSP.prismatic.frame_b.r_0[2];
//   jointSSP.frame_ib.r_0[2] = jointSSP.rod2.frame_a.r_0[2];
//   jointSSP.frame_ib.r_0[1] = jointSSP.prismatic.frame_b.r_0[1];
//   jointSSP.frame_ib.r_0[1] = jointSSP.rod2.frame_a.r_0[1];
//   jointSSP.frame_ib.R.T[3,3] = jointSSP.prismatic.frame_b.R.T[3,3];
//   jointSSP.frame_ib.R.T[3,3] = jointSSP.rod2.frame_a.R.T[3,3];
//   jointSSP.frame_ib.R.T[3,2] = jointSSP.prismatic.frame_b.R.T[3,2];
//   jointSSP.frame_ib.R.T[3,2] = jointSSP.rod2.frame_a.R.T[3,2];
//   jointSSP.frame_ib.R.T[3,1] = jointSSP.prismatic.frame_b.R.T[3,1];
//   jointSSP.frame_ib.R.T[3,1] = jointSSP.rod2.frame_a.R.T[3,1];
//   jointSSP.frame_ib.R.T[2,3] = jointSSP.prismatic.frame_b.R.T[2,3];
//   jointSSP.frame_ib.R.T[2,3] = jointSSP.rod2.frame_a.R.T[2,3];
//   jointSSP.frame_ib.R.T[2,2] = jointSSP.prismatic.frame_b.R.T[2,2];
//   jointSSP.frame_ib.R.T[2,2] = jointSSP.rod2.frame_a.R.T[2,2];
//   jointSSP.frame_ib.R.T[2,1] = jointSSP.prismatic.frame_b.R.T[2,1];
//   jointSSP.frame_ib.R.T[2,1] = jointSSP.rod2.frame_a.R.T[2,1];
//   jointSSP.frame_ib.R.T[1,3] = jointSSP.prismatic.frame_b.R.T[1,3];
//   jointSSP.frame_ib.R.T[1,3] = jointSSP.rod2.frame_a.R.T[1,3];
//   jointSSP.frame_ib.R.T[1,2] = jointSSP.prismatic.frame_b.R.T[1,2];
//   jointSSP.frame_ib.R.T[1,2] = jointSSP.rod2.frame_a.R.T[1,2];
//   jointSSP.frame_ib.R.T[1,1] = jointSSP.prismatic.frame_b.R.T[1,1];
//   jointSSP.frame_ib.R.T[1,1] = jointSSP.rod2.frame_a.R.T[1,1];
//   jointSSP.frame_ib.R.w[3] = jointSSP.prismatic.frame_b.R.w[3];
//   jointSSP.frame_ib.R.w[3] = jointSSP.rod2.frame_a.R.w[3];
//   jointSSP.frame_ib.R.w[2] = jointSSP.prismatic.frame_b.R.w[2];
//   jointSSP.frame_ib.R.w[2] = jointSSP.rod2.frame_a.R.w[2];
//   jointSSP.frame_ib.R.w[1] = jointSSP.prismatic.frame_b.R.w[1];
//   jointSSP.frame_ib.R.w[1] = jointSSP.rod2.frame_a.R.w[1];
//   jointSSP.frame_im.r_0[3] = jointSSP.rod1.frame_b.r_0[3];
//   jointSSP.frame_im.r_0[3] = jointSSP.rod2.frame_b.r_0[3];
//   jointSSP.frame_im.r_0[2] = jointSSP.rod1.frame_b.r_0[2];
//   jointSSP.frame_im.r_0[2] = jointSSP.rod2.frame_b.r_0[2];
//   jointSSP.frame_im.r_0[1] = jointSSP.rod1.frame_b.r_0[1];
//   jointSSP.frame_im.r_0[1] = jointSSP.rod2.frame_b.r_0[1];
//   jointSSP.frame_im.R.T[3,3] = jointSSP.rod1.frame_b.R.T[3,3];
//   jointSSP.frame_im.R.T[3,3] = jointSSP.rod2.frame_b.R.T[3,3];
//   jointSSP.frame_im.R.T[3,2] = jointSSP.rod1.frame_b.R.T[3,2];
//   jointSSP.frame_im.R.T[3,2] = jointSSP.rod2.frame_b.R.T[3,2];
//   jointSSP.frame_im.R.T[3,1] = jointSSP.rod1.frame_b.R.T[3,1];
//   jointSSP.frame_im.R.T[3,1] = jointSSP.rod2.frame_b.R.T[3,1];
//   jointSSP.frame_im.R.T[2,3] = jointSSP.rod1.frame_b.R.T[2,3];
//   jointSSP.frame_im.R.T[2,3] = jointSSP.rod2.frame_b.R.T[2,3];
//   jointSSP.frame_im.R.T[2,2] = jointSSP.rod1.frame_b.R.T[2,2];
//   jointSSP.frame_im.R.T[2,2] = jointSSP.rod2.frame_b.R.T[2,2];
//   jointSSP.frame_im.R.T[2,1] = jointSSP.rod1.frame_b.R.T[2,1];
//   jointSSP.frame_im.R.T[2,1] = jointSSP.rod2.frame_b.R.T[2,1];
//   jointSSP.frame_im.R.T[1,3] = jointSSP.rod1.frame_b.R.T[1,3];
//   jointSSP.frame_im.R.T[1,3] = jointSSP.rod2.frame_b.R.T[1,3];
//   jointSSP.frame_im.R.T[1,2] = jointSSP.rod1.frame_b.R.T[1,2];
//   jointSSP.frame_im.R.T[1,2] = jointSSP.rod2.frame_b.R.T[1,2];
//   jointSSP.frame_im.R.T[1,1] = jointSSP.rod1.frame_b.R.T[1,1];
//   jointSSP.frame_im.R.T[1,1] = jointSSP.rod2.frame_b.R.T[1,1];
//   jointSSP.frame_im.R.w[3] = jointSSP.rod1.frame_b.R.w[3];
//   jointSSP.frame_im.R.w[3] = jointSSP.rod2.frame_b.R.w[3];
//   jointSSP.frame_im.R.w[2] = jointSSP.rod1.frame_b.R.w[2];
//   jointSSP.frame_im.R.w[2] = jointSSP.rod2.frame_b.R.w[2];
//   jointSSP.frame_im.R.w[1] = jointSSP.rod1.frame_b.R.w[1];
//   jointSSP.frame_im.R.w[1] = jointSSP.rod2.frame_b.R.w[1];
//   jointSSP.frame_b.r_0[3] = jointSSP.prismatic.frame_a.r_0[3];
//   jointSSP.frame_b.r_0[3] = jointSSP.relativePosition.frame_a.r_0[3];
//   jointSSP.frame_b.r_0[2] = jointSSP.prismatic.frame_a.r_0[2];
//   jointSSP.frame_b.r_0[2] = jointSSP.relativePosition.frame_a.r_0[2];
//   jointSSP.frame_b.r_0[1] = jointSSP.prismatic.frame_a.r_0[1];
//   jointSSP.frame_b.r_0[1] = jointSSP.relativePosition.frame_a.r_0[1];
//   jointSSP.frame_b.R.T[3,3] = jointSSP.prismatic.frame_a.R.T[3,3];
//   jointSSP.frame_b.R.T[3,3] = jointSSP.relativePosition.frame_a.R.T[3,3];
//   jointSSP.frame_b.R.T[3,2] = jointSSP.prismatic.frame_a.R.T[3,2];
//   jointSSP.frame_b.R.T[3,2] = jointSSP.relativePosition.frame_a.R.T[3,2];
//   jointSSP.frame_b.R.T[3,1] = jointSSP.prismatic.frame_a.R.T[3,1];
//   jointSSP.frame_b.R.T[3,1] = jointSSP.relativePosition.frame_a.R.T[3,1];
//   jointSSP.frame_b.R.T[2,3] = jointSSP.prismatic.frame_a.R.T[2,3];
//   jointSSP.frame_b.R.T[2,3] = jointSSP.relativePosition.frame_a.R.T[2,3];
//   jointSSP.frame_b.R.T[2,2] = jointSSP.prismatic.frame_a.R.T[2,2];
//   jointSSP.frame_b.R.T[2,2] = jointSSP.relativePosition.frame_a.R.T[2,2];
//   jointSSP.frame_b.R.T[2,1] = jointSSP.prismatic.frame_a.R.T[2,1];
//   jointSSP.frame_b.R.T[2,1] = jointSSP.relativePosition.frame_a.R.T[2,1];
//   jointSSP.frame_b.R.T[1,3] = jointSSP.prismatic.frame_a.R.T[1,3];
//   jointSSP.frame_b.R.T[1,3] = jointSSP.relativePosition.frame_a.R.T[1,3];
//   jointSSP.frame_b.R.T[1,2] = jointSSP.prismatic.frame_a.R.T[1,2];
//   jointSSP.frame_b.R.T[1,2] = jointSSP.relativePosition.frame_a.R.T[1,2];
//   jointSSP.frame_b.R.T[1,1] = jointSSP.prismatic.frame_a.R.T[1,1];
//   jointSSP.frame_b.R.T[1,1] = jointSSP.relativePosition.frame_a.R.T[1,1];
//   jointSSP.frame_b.R.w[3] = jointSSP.prismatic.frame_a.R.w[3];
//   jointSSP.frame_b.R.w[3] = jointSSP.relativePosition.frame_a.R.w[3];
//   jointSSP.frame_b.R.w[2] = jointSSP.prismatic.frame_a.R.w[2];
//   jointSSP.frame_b.R.w[2] = jointSSP.relativePosition.frame_a.R.w[2];
//   jointSSP.frame_b.R.w[1] = jointSSP.prismatic.frame_a.R.w[1];
//   jointSSP.frame_b.R.w[1] = jointSSP.relativePosition.frame_a.R.w[1];
//   jointSSP.frame_a.r_0[3] = jointSSP.relativePosition.frame_b.r_0[3];
//   jointSSP.frame_a.r_0[3] = jointSSP.rod1.frame_a.r_0[3];
//   jointSSP.frame_a.r_0[2] = jointSSP.relativePosition.frame_b.r_0[2];
//   jointSSP.frame_a.r_0[2] = jointSSP.rod1.frame_a.r_0[2];
//   jointSSP.frame_a.r_0[1] = jointSSP.relativePosition.frame_b.r_0[1];
//   jointSSP.frame_a.r_0[1] = jointSSP.rod1.frame_a.r_0[1];
//   jointSSP.frame_a.R.T[3,3] = jointSSP.relativePosition.frame_b.R.T[3,3];
//   jointSSP.frame_a.R.T[3,3] = jointSSP.rod1.frame_a.R.T[3,3];
//   jointSSP.frame_a.R.T[3,2] = jointSSP.relativePosition.frame_b.R.T[3,2];
//   jointSSP.frame_a.R.T[3,2] = jointSSP.rod1.frame_a.R.T[3,2];
//   jointSSP.frame_a.R.T[3,1] = jointSSP.relativePosition.frame_b.R.T[3,1];
//   jointSSP.frame_a.R.T[3,1] = jointSSP.rod1.frame_a.R.T[3,1];
//   jointSSP.frame_a.R.T[2,3] = jointSSP.relativePosition.frame_b.R.T[2,3];
//   jointSSP.frame_a.R.T[2,3] = jointSSP.rod1.frame_a.R.T[2,3];
//   jointSSP.frame_a.R.T[2,2] = jointSSP.relativePosition.frame_b.R.T[2,2];
//   jointSSP.frame_a.R.T[2,2] = jointSSP.rod1.frame_a.R.T[2,2];
//   jointSSP.frame_a.R.T[2,1] = jointSSP.relativePosition.frame_b.R.T[2,1];
//   jointSSP.frame_a.R.T[2,1] = jointSSP.rod1.frame_a.R.T[2,1];
//   jointSSP.frame_a.R.T[1,3] = jointSSP.relativePosition.frame_b.R.T[1,3];
//   jointSSP.frame_a.R.T[1,3] = jointSSP.rod1.frame_a.R.T[1,3];
//   jointSSP.frame_a.R.T[1,2] = jointSSP.relativePosition.frame_b.R.T[1,2];
//   jointSSP.frame_a.R.T[1,2] = jointSSP.rod1.frame_a.R.T[1,2];
//   jointSSP.frame_a.R.T[1,1] = jointSSP.relativePosition.frame_b.R.T[1,1];
//   jointSSP.frame_a.R.T[1,1] = jointSSP.rod1.frame_a.R.T[1,1];
//   jointSSP.frame_a.R.w[3] = jointSSP.relativePosition.frame_b.R.w[3];
//   jointSSP.frame_a.R.w[3] = jointSSP.rod1.frame_a.R.w[3];
//   jointSSP.frame_a.R.w[2] = jointSSP.relativePosition.frame_b.R.w[2];
//   jointSSP.frame_a.R.w[2] = jointSSP.rod1.frame_a.R.w[2];
//   jointSSP.frame_a.R.w[1] = jointSSP.relativePosition.frame_b.R.w[1];
//   jointSSP.frame_a.R.w[1] = jointSSP.rod1.frame_a.R.w[1];
//   jointSSP.position_b[3].y = jointSSP.prismatic.position_b[3];
//   jointSSP.position_b[2].y = jointSSP.prismatic.position_b[2];
//   jointSSP.position_b[1].y = jointSSP.prismatic.position_b[1];
//   jointSSP.axis.s = jointSSP.prismatic.axis.s;
//   jointSSP.bearing.s = jointSSP.prismatic.bearing.s;
//   jointSSP.prismatic.position_a[3] = jointSSP.relativePosition.r_rel[3];
//   jointSSP.prismatic.position_a[2] = jointSSP.relativePosition.r_rel[2];
//   jointSSP.prismatic.position_a[1] = jointSSP.relativePosition.r_rel[1];
//   b2.frame_b.t[1] = 0.0;
//   b2.frame_b.t[2] = 0.0;
//   b2.frame_b.t[3] = 0.0;
//   b2.frame_b.f[1] = 0.0;
//   b2.frame_b.f[2] = 0.0;
//   b2.frame_b.f[3] = 0.0;
//   -b2.frame_a.t[1] + b2.body.frame_a.t[1] + b2.frameTranslation.frame_a.t[1] = 0.0;
//   -b2.frame_a.t[2] + b2.body.frame_a.t[2] + b2.frameTranslation.frame_a.t[2] = 0.0;
//   -b2.frame_a.t[3] + b2.body.frame_a.t[3] + b2.frameTranslation.frame_a.t[3] = 0.0;
//   -b2.frame_a.f[1] + b2.body.frame_a.f[1] + b2.frameTranslation.frame_a.f[1] = 0.0;
//   -b2.frame_a.f[2] + b2.body.frame_a.f[2] + b2.frameTranslation.frame_a.f[2] = 0.0;
//   -b2.frame_a.f[3] + b2.body.frame_a.f[3] + b2.frameTranslation.frame_a.f[3] = 0.0;
//   -b2.frame_b.t[1] + b2.frameTranslation.frame_b.t[1] = 0.0;
//   -b2.frame_b.t[2] + b2.frameTranslation.frame_b.t[2] = 0.0;
//   -b2.frame_b.t[3] + b2.frameTranslation.frame_b.t[3] = 0.0;
//   -b2.frame_b.f[1] + b2.frameTranslation.frame_b.f[1] = 0.0;
//   -b2.frame_b.f[2] + b2.frameTranslation.frame_b.f[2] = 0.0;
//   -b2.frame_b.f[3] + b2.frameTranslation.frame_b.f[3] = 0.0;
//   b2.body.frame_a.r_0[3] = b2.frameTranslation.frame_a.r_0[3];
//   b2.body.frame_a.r_0[3] = b2.frame_a.r_0[3];
//   b2.body.frame_a.r_0[2] = b2.frameTranslation.frame_a.r_0[2];
//   b2.body.frame_a.r_0[2] = b2.frame_a.r_0[2];
//   b2.body.frame_a.r_0[1] = b2.frameTranslation.frame_a.r_0[1];
//   b2.body.frame_a.r_0[1] = b2.frame_a.r_0[1];
//   b2.body.frame_a.R.T[3,3] = b2.frameTranslation.frame_a.R.T[3,3];
//   b2.body.frame_a.R.T[3,3] = b2.frame_a.R.T[3,3];
//   b2.body.frame_a.R.T[3,2] = b2.frameTranslation.frame_a.R.T[3,2];
//   b2.body.frame_a.R.T[3,2] = b2.frame_a.R.T[3,2];
//   b2.body.frame_a.R.T[3,1] = b2.frameTranslation.frame_a.R.T[3,1];
//   b2.body.frame_a.R.T[3,1] = b2.frame_a.R.T[3,1];
//   b2.body.frame_a.R.T[2,3] = b2.frameTranslation.frame_a.R.T[2,3];
//   b2.body.frame_a.R.T[2,3] = b2.frame_a.R.T[2,3];
//   b2.body.frame_a.R.T[2,2] = b2.frameTranslation.frame_a.R.T[2,2];
//   b2.body.frame_a.R.T[2,2] = b2.frame_a.R.T[2,2];
//   b2.body.frame_a.R.T[2,1] = b2.frameTranslation.frame_a.R.T[2,1];
//   b2.body.frame_a.R.T[2,1] = b2.frame_a.R.T[2,1];
//   b2.body.frame_a.R.T[1,3] = b2.frameTranslation.frame_a.R.T[1,3];
//   b2.body.frame_a.R.T[1,3] = b2.frame_a.R.T[1,3];
//   b2.body.frame_a.R.T[1,2] = b2.frameTranslation.frame_a.R.T[1,2];
//   b2.body.frame_a.R.T[1,2] = b2.frame_a.R.T[1,2];
//   b2.body.frame_a.R.T[1,1] = b2.frameTranslation.frame_a.R.T[1,1];
//   b2.body.frame_a.R.T[1,1] = b2.frame_a.R.T[1,1];
//   b2.body.frame_a.R.w[3] = b2.frameTranslation.frame_a.R.w[3];
//   b2.body.frame_a.R.w[3] = b2.frame_a.R.w[3];
//   b2.body.frame_a.R.w[2] = b2.frameTranslation.frame_a.R.w[2];
//   b2.body.frame_a.R.w[2] = b2.frame_a.R.w[2];
//   b2.body.frame_a.R.w[1] = b2.frameTranslation.frame_a.R.w[1];
//   b2.body.frame_a.R.w[1] = b2.frame_a.R.w[1];
//   b2.frameTranslation.frame_b.r_0[3] = b2.frame_b.r_0[3];
//   b2.frameTranslation.frame_b.r_0[2] = b2.frame_b.r_0[2];
//   b2.frameTranslation.frame_b.r_0[1] = b2.frame_b.r_0[1];
//   b2.frameTranslation.frame_b.R.T[3,3] = b2.frame_b.R.T[3,3];
//   b2.frameTranslation.frame_b.R.T[3,2] = b2.frame_b.R.T[3,2];
//   b2.frameTranslation.frame_b.R.T[3,1] = b2.frame_b.R.T[3,1];
//   b2.frameTranslation.frame_b.R.T[2,3] = b2.frame_b.R.T[2,3];
//   b2.frameTranslation.frame_b.R.T[2,2] = b2.frame_b.R.T[2,2];
//   b2.frameTranslation.frame_b.R.T[2,1] = b2.frame_b.R.T[2,1];
//   b2.frameTranslation.frame_b.R.T[1,3] = b2.frame_b.R.T[1,3];
//   b2.frameTranslation.frame_b.R.T[1,2] = b2.frame_b.R.T[1,2];
//   b2.frameTranslation.frame_b.R.T[1,1] = b2.frame_b.R.T[1,1];
//   b2.frameTranslation.frame_b.R.w[3] = b2.frame_b.R.w[3];
//   b2.frameTranslation.frame_b.R.w[2] = b2.frame_b.R.w[2];
//   b2.frameTranslation.frame_b.R.w[1] = b2.frame_b.R.w[1];
//   b1.frame_a.r_0[3] = j1.frame_b.r_0[3];
//   b1.frame_a.r_0[2] = j1.frame_b.r_0[2];
//   b1.frame_a.r_0[1] = j1.frame_b.r_0[1];
//   b1.frame_a.R.T[3,3] = j1.frame_b.R.T[3,3];
//   b1.frame_a.R.T[3,2] = j1.frame_b.R.T[3,2];
//   b1.frame_a.R.T[3,1] = j1.frame_b.R.T[3,1];
//   b1.frame_a.R.T[2,3] = j1.frame_b.R.T[2,3];
//   b1.frame_a.R.T[2,2] = j1.frame_b.R.T[2,2];
//   b1.frame_a.R.T[2,1] = j1.frame_b.R.T[2,1];
//   b1.frame_a.R.T[1,3] = j1.frame_b.R.T[1,3];
//   b1.frame_a.R.T[1,2] = j1.frame_b.R.T[1,2];
//   b1.frame_a.R.T[1,1] = j1.frame_b.R.T[1,1];
//   b1.frame_a.R.w[3] = j1.frame_b.R.w[3];
//   b1.frame_a.R.w[2] = j1.frame_b.R.w[2];
//   b1.frame_a.R.w[1] = j1.frame_b.R.w[1];
//   b3.frame_a.r_0[3] = j1.frame_a.r_0[3];
//   b3.frame_a.r_0[3] = world.frame_b.r_0[3];
//   b3.frame_a.r_0[2] = j1.frame_a.r_0[2];
//   b3.frame_a.r_0[2] = world.frame_b.r_0[2];
//   b3.frame_a.r_0[1] = j1.frame_a.r_0[1];
//   b3.frame_a.r_0[1] = world.frame_b.r_0[1];
//   b3.frame_a.R.T[3,3] = j1.frame_a.R.T[3,3];
//   b3.frame_a.R.T[3,3] = world.frame_b.R.T[3,3];
//   b3.frame_a.R.T[3,2] = j1.frame_a.R.T[3,2];
//   b3.frame_a.R.T[3,2] = world.frame_b.R.T[3,2];
//   b3.frame_a.R.T[3,1] = j1.frame_a.R.T[3,1];
//   b3.frame_a.R.T[3,1] = world.frame_b.R.T[3,1];
//   b3.frame_a.R.T[2,3] = j1.frame_a.R.T[2,3];
//   b3.frame_a.R.T[2,3] = world.frame_b.R.T[2,3];
//   b3.frame_a.R.T[2,2] = j1.frame_a.R.T[2,2];
//   b3.frame_a.R.T[2,2] = world.frame_b.R.T[2,2];
//   b3.frame_a.R.T[2,1] = j1.frame_a.R.T[2,1];
//   b3.frame_a.R.T[2,1] = world.frame_b.R.T[2,1];
//   b3.frame_a.R.T[1,3] = j1.frame_a.R.T[1,3];
//   b3.frame_a.R.T[1,3] = world.frame_b.R.T[1,3];
//   b3.frame_a.R.T[1,2] = j1.frame_a.R.T[1,2];
//   b3.frame_a.R.T[1,2] = world.frame_b.R.T[1,2];
//   b3.frame_a.R.T[1,1] = j1.frame_a.R.T[1,1];
//   b3.frame_a.R.T[1,1] = world.frame_b.R.T[1,1];
//   b3.frame_a.R.w[3] = j1.frame_a.R.w[3];
//   b3.frame_a.R.w[3] = world.frame_b.R.w[3];
//   b3.frame_a.R.w[2] = j1.frame_a.R.w[2];
//   b3.frame_a.R.w[2] = world.frame_b.R.w[2];
//   b3.frame_a.R.w[1] = j1.frame_a.R.w[1];
//   b3.frame_a.R.w[1] = world.frame_b.R.w[1];
//   b1.frame_b.r_0[3] = jointSSP.frame_a.r_0[3];
//   b1.frame_b.r_0[2] = jointSSP.frame_a.r_0[2];
//   b1.frame_b.r_0[1] = jointSSP.frame_a.r_0[1];
//   b1.frame_b.R.T[3,3] = jointSSP.frame_a.R.T[3,3];
//   b1.frame_b.R.T[3,2] = jointSSP.frame_a.R.T[3,2];
//   b1.frame_b.R.T[3,1] = jointSSP.frame_a.R.T[3,1];
//   b1.frame_b.R.T[2,3] = jointSSP.frame_a.R.T[2,3];
//   b1.frame_b.R.T[2,2] = jointSSP.frame_a.R.T[2,2];
//   b1.frame_b.R.T[2,1] = jointSSP.frame_a.R.T[2,1];
//   b1.frame_b.R.T[1,3] = jointSSP.frame_a.R.T[1,3];
//   b1.frame_b.R.T[1,2] = jointSSP.frame_a.R.T[1,2];
//   b1.frame_b.R.T[1,1] = jointSSP.frame_a.R.T[1,1];
//   b1.frame_b.R.w[3] = jointSSP.frame_a.R.w[3];
//   b1.frame_b.R.w[2] = jointSSP.frame_a.R.w[2];
//   b1.frame_b.R.w[1] = jointSSP.frame_a.R.w[1];
//   b3.frame_b.r_0[3] = jointSSP.frame_b.r_0[3];
//   b3.frame_b.r_0[2] = jointSSP.frame_b.r_0[2];
//   b3.frame_b.r_0[1] = jointSSP.frame_b.r_0[1];
//   b3.frame_b.R.T[3,3] = jointSSP.frame_b.R.T[3,3];
//   b3.frame_b.R.T[3,2] = jointSSP.frame_b.R.T[3,2];
//   b3.frame_b.R.T[3,1] = jointSSP.frame_b.R.T[3,1];
//   b3.frame_b.R.T[2,3] = jointSSP.frame_b.R.T[2,3];
//   b3.frame_b.R.T[2,2] = jointSSP.frame_b.R.T[2,2];
//   b3.frame_b.R.T[2,1] = jointSSP.frame_b.R.T[2,1];
//   b3.frame_b.R.T[1,3] = jointSSP.frame_b.R.T[1,3];
//   b3.frame_b.R.T[1,2] = jointSSP.frame_b.R.T[1,2];
//   b3.frame_b.R.T[1,1] = jointSSP.frame_b.R.T[1,1];
//   b3.frame_b.R.w[3] = jointSSP.frame_b.R.w[3];
//   b3.frame_b.R.w[2] = jointSSP.frame_b.R.w[2];
//   b3.frame_b.R.w[1] = jointSSP.frame_b.R.w[1];
//   b2.frame_a.r_0[3] = jointSSP.frame_ib.r_0[3];
//   b2.frame_a.r_0[2] = jointSSP.frame_ib.r_0[2];
//   b2.frame_a.r_0[1] = jointSSP.frame_ib.r_0[1];
//   b2.frame_a.R.T[3,3] = jointSSP.frame_ib.R.T[3,3];
//   b2.frame_a.R.T[3,2] = jointSSP.frame_ib.R.T[3,2];
//   b2.frame_a.R.T[3,1] = jointSSP.frame_ib.R.T[3,1];
//   b2.frame_a.R.T[2,3] = jointSSP.frame_ib.R.T[2,3];
//   b2.frame_a.R.T[2,2] = jointSSP.frame_ib.R.T[2,2];
//   b2.frame_a.R.T[2,1] = jointSSP.frame_ib.R.T[2,1];
//   b2.frame_a.R.T[1,3] = jointSSP.frame_ib.R.T[1,3];
//   b2.frame_a.R.T[1,2] = jointSSP.frame_ib.R.T[1,2];
//   b2.frame_a.R.T[1,1] = jointSSP.frame_ib.R.T[1,1];
//   b2.frame_a.R.w[3] = jointSSP.frame_ib.R.w[3];
//   b2.frame_a.R.w[2] = jointSSP.frame_ib.R.w[2];
//   b2.frame_a.R.w[1] = jointSSP.frame_ib.R.w[1];
// end Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic;
// "
// "[_LoopsTotal.mo:2632:11-2633:249:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// [_LoopsTotal.mo:2659:11-2669:64:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// [_LoopsTotal.mo:2682:11-2693:64:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// [_LoopsTotal.mo:2717:11-2717:36:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// "
// "Check of Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic completed successfully.
// 
// [_LoopsTotal.mo:2632:11-2633:249:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// [_LoopsTotal.mo:2659:11-2669:64:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// [_LoopsTotal.mo:2682:11-2693:64:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// [_LoopsTotal.mo:2717:11-2717:36:writable] Warning: Parameter jointSSP.rod1.rodLength has no value, and is fixed during initialization (fixed=true), using available start value (start=1.0) as default value
// 
// Class Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar_analytic has 2238 equation(s) and 2238 variable(s).
// 1499 of these are trivial equation(s).
// "
// ""
// endResult
