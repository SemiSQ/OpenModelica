// name:     Modelica3.x.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic [checkModel]
// keywords: multibody, balancing
// status:   correct
// 
//  Modelica MultiBody 3.x: balance checking
//

loadFile("_LoopsTotal.mo"); getErrorString();

instantiateModel(Modelica.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic); getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic); getErrorString();

system("rm -f *.so *.dll *.log *.c* *.makefile *.libs");

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length
//   input Real[:] v "Vector";
//   output Real result "Length of vector v";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize
//   input Real[:] v "Vector";
//   input Real eps = 1e-13 "if |v| < eps then result = v/eps";
//   output Real[size(v,1)] result "Input vector v normalized to length=1";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = "Angle", unit = "rad", displayUnit = "deg");
// 
// external "C";
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent
//   input Real u1;
//   input Real u2;
//   output Real y;
//   protected Integer dummy;
// algorithm
//   y := if u1 > u2 then u1 else u2;
//   dummy := 0;
// end Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation "Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation"
// input Real[3, 3] T;
// input Real(quantity="AngularVelocity", unit="rad/s")[3] w;
// output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
//   output Real[3] residue "The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)";
// algorithm
//   residue := {Modelica.Math.atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),Modelica.Math.atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),Modelica.Math.atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   input Real[4] der_Q(unit = "1/s") "Derivative of Q";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 2";
// algorithm
//   w := {2.0 * (Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]),2.0 * (-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]),2.0 * (Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4])};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T
//   input Real[3, 3] T "Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} "Guess value for Q (there are 2 solutions; the one close to Q_guess is used";
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04;
// algorithm
//   c1 := (1.0 + T[1,1]) - T[2,2] - T[3,3];
//   c2 := (1.0 + T[2,2]) - T[1,1] - T[3,3];
//   c3 := (1.0 + T[3,3]) - T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04 OR c4 > c1 AND c4 > c2 AND c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 AND c1 > c3 AND c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 AND c2 > c3 AND c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint "Inline before index reduction"
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   output Real[1] residue "Residue constraint (shall be zero)";
// algorithm
//   residue := {(Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation
//   input Integer axis(min = 1, max = 3) "Rotate around 'axis' of frame 1";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,Modelica.Math.cos(angle),Modelica.Math.sin(angle);0.0,-Modelica.Math.sin(angle),Modelica.Math.cos(angle)] else if axis == 2 then <matrix>[Modelica.Math.cos(angle),0.0,-Modelica.Math.sin(angle);0.0,1.0,0.0;Modelica.Math.sin(angle),0.0,Modelica.Math.cos(angle)] else <matrix>[Modelica.Math.cos(angle),Modelica.Math.sin(angle),0.0;-Modelica.Math.sin(angle),Modelica.Math.cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation
//   input Real[3] e(unit = "1") "Normalized axis of rotation (must have length=1)";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e";
//   output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   T := <matrix>[e[1] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + Modelica.Math.cos(angle) * -e[1] * e[2]) - -Modelica.Math.sin(angle) * e[3],(e[1] * e[3] + Modelica.Math.cos(angle) * -e[1] * e[3]) - Modelica.Math.sin(angle) * e[2];(e[2] * e[1] + Modelica.Math.cos(angle) * -e[2] * e[1]) - Modelica.Math.sin(angle) * e[3],e[2] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + Modelica.Math.cos(angle) * -e[2] * e[3]) - -Modelica.Math.sin(angle) * e[1];(e[3] * e[1] + Modelica.Math.cos(angle) * -e[3] * e[1]) - -Modelica.Math.sin(angle) * e[2],(e[3] * e[2] + Modelica.Math.cos(angle) * -e[3] * e[2]) - Modelica.Math.sin(angle) * e[1],e[3] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[3] ^ 2.0)];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2
//   input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector in frame 1";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.absoluteRotation
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R_rel "Orientation object to rotate frame 1 into frame 2";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   R2 := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[R_rel.T[1,1] * R1.T[1,1] + R_rel.T[1,2] * R1.T[2,1] + R_rel.T[1,3] * R1.T[3,1],R_rel.T[1,1] * R1.T[1,2] + R_rel.T[1,2] * R1.T[2,2] + R_rel.T[1,3] * R1.T[3,2],R_rel.T[1,1] * R1.T[1,3] + R_rel.T[1,2] * R1.T[2,3] + R_rel.T[1,3] * R1.T[3,3];R_rel.T[2,1] * R1.T[1,1] + R_rel.T[2,2] * R1.T[2,1] + R_rel.T[2,3] * R1.T[3,1],R_rel.T[2,1] * R1.T[1,2] + R_rel.T[2,2] * R1.T[2,2] + R_rel.T[2,3] * R1.T[3,2],R_rel.T[2,1] * R1.T[1,3] + R_rel.T[2,2] * R1.T[2,3] + R_rel.T[2,3] * R1.T[3,3];R_rel.T[3,1] * R1.T[1,1] + R_rel.T[3,2] * R1.T[2,1] + R_rel.T[3,3] * R1.T[3,1],R_rel.T[3,1] * R1.T[1,2] + R_rel.T[3,2] * R1.T[2,2] + R_rel.T[3,3] * R1.T[3,2],R_rel.T[3,1] * R1.T[1,3] + R_rel.T[3,2] * R1.T[2,3] + R_rel.T[3,3] * R1.T[3,3]],Modelica.Mechanics.MultiBody.Frames.resolve2(R_rel,{R1.w[1],R1.w[2],R1.w[3]}) + {R_rel.w[1],R_rel.w[2],R_rel.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2 "Inline before index reduction"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   output Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of frame 2 with respect to frame 1 resolved in frame 2";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations
//   input Integer[3] sequence = {1,2,3} "Sequence of rotations from frame 1 to frame 2 along axis sequence[i]";
//   input Real[3] angles(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angles around the axes defined in 'sequence'";
//   input Real[3] der_angles(quantity = "AngularVelocity", unit = "rad/s") "= der(angles)";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Integer[3] sequence = {1,2,3} "Sequence of rotations from frame 1 to frame 2 along axis sequence[i]";
//   input Real guessAngle1(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Select angles[1] such that |angles[1] - guessAngle1| is a minimum";
//   output Real[3] angles(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi";
//   protected Real[3] e1_1(unit = "1") "First rotation axis, resolved in frame 1";
//   protected Real[3] e2_1a(unit = "1") "Second rotation axis, resolved in frame 1a";
//   protected Real[3] e3_1(unit = "1") "Third rotation axis, resolved in frame 1";
//   protected Real[3] e3_2(unit = "1") "Third rotation axis, resolved in frame 2";
//   protected Real A "Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0";
//   protected Real B "Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0";
//   protected Real angle_1a(quantity = "Angle", unit = "rad", displayUnit = "deg") "Solution 1 for angles[1]";
//   protected Real angle_1b(quantity = "Angle", unit = "rad", displayUnit = "deg") "Solution 2 for angles[1]";
//   protected Real[3, 3] T_1a "Orientation object to rotate frame 1 into frame 1a";
// algorithm
//   assert( sequence[1] <> sequence[2] AND sequence[2] <> sequence[3], "input argument 'sequence[1:3]' is not valid");
//   e1_1 := /*/tp:REAL[3]/*/(if sequence[1] == 1 then {1,0,0} else if sequence[1] == 2 then {0,1,0} else {0,0,1});
//   e2_1a := /*/tp:REAL[3]/*/(if sequence[2] == 1 then {1,0,0} else if sequence[2] == 2 then {0,1,0} else {0,0,1});
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := /*/tp:REAL[3]/*/(if sequence[3] == 1 then {1,0,0} else if sequence[3] == 2 then {0,1,0} else {0,0,1});
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 1e-12 AND abs(B) <= 1e-12 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := Modelica.Math.atan2(A,-B);
//     angle_1b := Modelica.Math.atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis
//   input Integer axis(min = 1, max = 3) "Axis vector to be returned";
//   output Real[3] e(unit = "1") "Unit axis vector";
// algorithm
//   e := /*/tp:REAL[3]/*/(if axis == 1 then {1,0,0} else if axis == 2 then {0,1,0} else {0,0,1});
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q
//   input Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
//   input Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity from frame 2 with respect to frame 1, resolved in frame 2";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_T
//   input Real[3, 3] T "Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)";
//   input Real[3] w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity from frame 2 with respect to frame 1, resolved in frame 2 (skew(w)=T*der(transpose(T)))";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[T[1,1],T[1,2],T[1,3];T[2,1],T[2,2],T[2,3];T[3,1],T[3,2],T[3,3]],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_nxy
//   input Real[3] n_x(unit = "1") "Vector in direction of x-axis of frame 2, resolved in frame 1";
//   input Real[3] n_y(unit = "1") "Vector in direction of y-axis of frame 2, resolved in frame 1";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = "1") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = "1") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = "1") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
//   protected Real[3] e_z_aux(unit = "1") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = "1") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object such that frame 1 and frame 2 are identical";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotation
//   input Real[3] e(unit = "1") "Normalized axis of rotation (must have length=1)";
//   input Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e";
//   input Real der_angle(quantity = "AngularVelocity", unit = "rad/s") "= der(angle)";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e[1] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + Modelica.Math.cos(angle) * -e[1] * e[2]) - -Modelica.Math.sin(angle) * e[3],(e[1] * e[3] + Modelica.Math.cos(angle) * -e[1] * e[3]) - Modelica.Math.sin(angle) * e[2];(e[2] * e[1] + Modelica.Math.cos(angle) * -e[2] * e[1]) - Modelica.Math.sin(angle) * e[3],e[2] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + Modelica.Math.cos(angle) * -e[2] * e[3]) - -Modelica.Math.sin(angle) * e[1];(e[3] * e[1] + Modelica.Math.cos(angle) * -e[3] * e[1]) - -Modelica.Math.sin(angle) * e[2],(e[3] * e[2] + Modelica.Math.cos(angle) * -e[3] * e[2]) - Modelica.Math.sin(angle) * e[1],e[3] ^ 2.0 + Modelica.Math.cos(angle) * (1.0 - e[3] ^ 2.0)],{der_angle * e[1],der_angle * e[2],der_angle * e[3]});
// end Modelica.Mechanics.MultiBody.Frames.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle
//   input Real[3] e(unit = "1") "Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)";
//   input Real[3] v1 "A vector v resolved in frame 1 (shall not be parallel to e)";
//   input Real[3] v2 "Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)";
//   output Real angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi";
// algorithm
//   angle := Modelica.Math.atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],(v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3]) - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v2 "Vector in frame 2";
//   output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[3] v1 "Vector in frame 1";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveRelative
//   input Real[3] v1 "Vector in frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 "Orientation object to rotate frame 0 into frame 1";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 "Orientation object to rotate frame 0 into frame 2";
//   output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := Modelica.Mechanics.MultiBody.Frames.resolve2(R2,Modelica.Mechanics.MultiBody.Frames.resolve1(R1,{v1[1],v1[2],v1[3]}));
// end Modelica.Mechanics.MultiBody.Frames.resolveRelative;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} "Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used";
//   output Real[4] Q "Quaternions orientation object to rotate frame 1 into frame 2";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch
//   input Real L(quantity = "Length", unit = "m") "Length of length constraint";
//   input Real[3] e(unit = "1") "Unit vector along axis of translation, resolved in frame_a (= same in frame_b)";
//   input Real d_guess(quantity = "Length", unit = "m") "Select the configuration such that at initial time |d-d_guess|is minimal (d: distance between origin of frame_a and origin of frame_b)";
//   input Real[3] r_a(quantity = "Length", unit = "m") "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of prismatic joint";
//   input Real[3] r_b(quantity = "Length", unit = "m") "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of prismatic joint";
//   output Boolean positiveBranch "Branch of the initial solution";
//   protected Real[3] rbra(quantity = "Length", unit = "m") "= rb - ra";
//   protected Real B "Coefficient B of equation: d*d + B*d + C = 0";
//   protected Real C "Coefficient C of equation: d*d + B*d + C = 0";
//   protected Real k1 "Constant of quadratic equation solution";
//   protected Real k2 "Constant of quadratic equation solution";
//   protected Real k1a;
//   protected Real k1b;
//   protected Real d1 "solution 1 of quadratic equation";
//   protected Real d2 "solution 2 of quadratic equation";
// algorithm
//   rbra := {r_b[1] - r_a[1],r_b[2] - r_a[2],r_b[3] - r_a[3]};
//   B := 2.0 * (e[1] * rbra[1] + e[2] * rbra[2] + e[3] * rbra[3]);
//   C := (rbra[1] ^ 2.0 + rbra[2] ^ 2.0 + rbra[3] ^ 2.0) - L ^ 2.0;
//   k1 := B / 2.0;
//   k1a := k1 ^ 2.0 - C;
//   assert( noEvent(k1a > 1e-10), "
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   k1b := max(k1a,1e-12);
//   k2 := sqrt(k1b);
//   d1 := k2 - k1;
//   d2 := -k1 - k2;
//   if abs(d1 - d_guess) <= abs(d2 - d_guess) then
//     positiveBranch := true;
//   else
//     positiveBranch := false;
//   end if;
// end Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration
//   input Real[3] r(quantity = "Length", unit = "m") "Position vector from world frame to actual point, resolved in world frame";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType "Type of gravity field";
//   input Real[3] g(quantity = "Acceleration", unit = "m/s2") "Constant gravity acceleration, resolved in world frame, if gravityType=1";
//   input Real mue(unit = "m3/s2") "Field constant of point gravity field, if gravityType=2";
//   output Real[3] gravity(quantity = "Acceleration", unit = "m/s2") "Gravity acceleration at point r, resolved in world frame";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// function Modelica.SIunits.Conversions.from_deg
//   input Real degree(quantity = "Angle", unit = "deg") "degree value";
//   output Real radian(quantity = "Angle", unit = "rad", displayUnit = "deg") "radian value";
// algorithm
//   radian := 0.0174532925199433 * degree;
// end Modelica.SIunits.Conversions.from_deg;
// 
// function Modelica.SIunits.Conversions.to_rpm
//   input Real rs(quantity = "AngularVelocity", unit = "rad/s") "radian per second value";
//   output Real rpm(quantity = "AngularVelocity", unit = "1/min") "revolutions per minute value";
// algorithm
//   rpm := 9.54929658551372 * rs;
// end Modelica.SIunits.Conversions.to_rpm;
// 
// class Modelica.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic
//   Real world.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real world.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real world.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real world.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real world.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real world.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real world.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean world.enableAnimation = true "= true, if animation of all components is enabled";
//   parameter Boolean world.animateWorld = false "= true, if world coordinate system shall be visualized";
//   parameter Boolean world.animateGravity = false "= true, if gravity field shall be visualized (acceleration vector or field center)";
//   parameter String world.label1 = "x" "Label of horizontal axis in icon";
//   parameter String world.label2 = "y" "Label of vertical axis in icon";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity "Type of gravity field";
//   parameter Real world.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Constant gravity acceleration";
//   parameter Real world.n[1](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.n[2](unit = "1") = -1.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.n[3](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
//   parameter Real world.mue(unit = "m3/s2", min = 0.0) = 398600000000000.0 "Gravity field constant (default = field constant of earth)";
//   parameter Boolean world.driveTrainMechanics3D = true "= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account";
//   parameter Real world.axisLength(quantity = "Length", unit = "m", min = 0.0) = world.nominalLength / 2.0 "Length of world axes arrows";
//   parameter Real world.axisDiameter(quantity = "Length", unit = "m", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction "Diameter of world axes arrows";
//   parameter Boolean world.axisShowLabels = true "= true, if labels shall be shown";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 "Color of x-arrow";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] "Color of z-arrow";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] "Color of z-arrow";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] "Color of z-arrow";
//   parameter Real world.gravityArrowTail[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowTail[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowTail[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
//   parameter Real world.gravityArrowLength(quantity = "Length", unit = "m") = world.axisLength / 2.0 "Length of gravity arrow";
//   parameter Real world.gravityArrowDiameter(quantity = "Length", unit = "m", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction "Diameter of gravity arrow";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 "Color of gravity arrow";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 "Color of gravity arrow";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 "Color of gravity arrow";
//   parameter Real world.gravitySphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 12742000.0 "Diameter of sphere representing gravity center (default = mean diameter of earth)";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 "Color of gravity sphere";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 "Color of gravity sphere";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 "Color of gravity sphere";
//   parameter Real world.nominalLength(quantity = "Length", unit = "m") = 1.0 "\"Nominal\" length of multi-body system";
//   parameter Real world.defaultAxisLength(quantity = "Length", unit = "m") = world.nominalLength / 5.0 "Default for length of a frame axis (but not world frame)";
//   parameter Real world.defaultJointLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a joint";
//   parameter Real world.defaultJointWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape representing a joint";
//   parameter Real world.defaultForceLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a force (e.g. damper)";
//   parameter Real world.defaultForceWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape represening a force (e.g. spring, bushing)";
//   parameter Real world.defaultBodyDiameter(quantity = "Length", unit = "m") = world.nominalLength / 9.0 "Default for diameter of sphere representing the center of mass of a body";
//   parameter Real world.defaultWidthFraction = 20.0 "Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)";
//   parameter Real world.defaultArrowDiameter(quantity = "Length", unit = "m") = world.nominalLength / 40.0 "Default for arrow diameter (e.g., of forces, torques, sensors)";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 "Default for arrow diameter of a coordinate system as a fraction of axis length";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 "Default reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real world.defaultN_to_m(unit = "N/m", min = 0.0) = 1000.0 "Default scaling of force arrows (length = force/defaultN_to_m)";
//   parameter Real world.defaultNm_to_m(unit = "N.m/m", min = 0.0) = 1000.0 "Default scaling of torque arrows (length = torque/defaultNm_to_m)";
//   protected parameter Integer world.ndim = if world.enableAnimation AND world.animateWorld then 1 else 0;
//   protected parameter Integer world.ndim2 = if world.enableAnimation AND world.animateWorld AND world.axisShowLabels then 1 else 0;
//   protected parameter Real world.headLength(quantity = "Length", unit = "m") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineLength(quantity = "Length", unit = "m") = max(0.0,world.axisLength - world.headLength);
//   protected parameter Real world.lineWidth(quantity = "Length", unit = "m") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
//   protected parameter Real world.labelStart(quantity = "Length", unit = "m") = 1.05 * world.axisLength;
//   protected parameter Real world.gravityHeadLength(quantity = "Length", unit = "m") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = "Length", unit = "m") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = "Length", unit = "m") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation AND world.animateGravity AND world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter Boolean animation = true "= true, if animation shall be enabled";
//   output Real engineSpeed_rpm(quantity = "AngularVelocity", unit = "1/min") = Modelica.SIunits.Conversions.to_rpm(load.w) "Engine speed";
//   output Real engineTorque(quantity = "Torque", unit = "N.m") = filter.u "Torque generated by engine";
//   output Real filteredEngineTorque(quantity = "Torque", unit = "N.m") = filter.y "Filtered torque generated by engine";
//   parameter Boolean engine.animation = true "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder1.animation = engine.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.cylinderTopPosition(quantity = "Length", unit = "m") = 0.42 "Length from crank shaft to end of cylinder.";
//   parameter Real engine.cylinder1.crankLength(quantity = "Length", unit = "m") = 0.14 "Length of crank shaft in x direction";
//   parameter Real engine.cylinder1.crankPinOffset(quantity = "Length", unit = "m") = 0.05 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder1.crankPinLength(quantity = "Length", unit = "m") = 0.1 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder1.cylinderInclination(quantity = "Angle", unit = "deg") = -30.0 "Inclination of cylinder";
//   parameter Real engine.cylinder1.crankAngleOffset(quantity = "Angle", unit = "deg") = -30.0 "Offset for crank angle";
//   parameter Real engine.cylinder1.pistonLength(quantity = "Length", unit = "m") = 0.1 " Length of cylinder";
//   parameter Real engine.cylinder1.pistonCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder1.pistonLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder1.pistonMass(quantity = "Mass", unit = "kg", min = 0.0) = 6.0 " Mass of piston";
//   parameter Real engine.cylinder1.pistonInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 11 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder1.pistonInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0076 " Inertia 22 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder1.pistonInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 33 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder1.rodLength(quantity = "Length", unit = "m") = 0.175 " Length of rod";
//   parameter Real engine.cylinder1.rodCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder1.rodLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder1.rodMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 " Mass of rod";
//   parameter Real engine.cylinder1.rodInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 11 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder1.rodInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0005 " Inertia 22 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder1.rodInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 33 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder1.cylinderLength(quantity = "Length", unit = "m") = engine.cylinder1.cylinderTopPosition - (engine.cylinder1.pistonLength + engine.cylinder1.rodLength - engine.cylinder1.crankPinOffset) "Maximum length of cylinder volume";
//   Real engine.cylinder1.Mid.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mid.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mid.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mid.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mid.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mid.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mid.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mid.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mid.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mid.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mid.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mid.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mid.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Mid.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.Mid.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.crankLength - engine.cylinder1.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.crankPinOffset "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder1.Mid.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.Mid.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.lengthDirection[1](unit = "1") = engine.cylinder1.Mid.r[1] - engine.cylinder1.Mid.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.lengthDirection[2](unit = "1") = engine.cylinder1.Mid.r[2] - engine.cylinder1.Mid.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.lengthDirection[3](unit = "1") = engine.cylinder1.Mid.r[3] - engine.cylinder1.Mid.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mid.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.Mid.r[1] - engine.cylinder1.Mid.r_shape[1],engine.cylinder1.Mid.r[2] - engine.cylinder1.Mid.r_shape[2],engine.cylinder1.Mid.r[3] - engine.cylinder1.Mid.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.Mid.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Mid.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.Mid.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Mid.width " Height of shape.";
//   parameter Real engine.cylinder1.Mid.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Mid.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Mid.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Mid.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.Mid.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder1.Mounting.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mounting.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mounting.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mounting.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mounting.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mounting.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mounting.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mounting.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Mounting.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Mounting.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Mounting.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.Mounting.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder1.Mounting.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.Mounting.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.lengthDirection[1](unit = "1") = engine.cylinder1.Mounting.r[1] - engine.cylinder1.Mounting.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.lengthDirection[2](unit = "1") = engine.cylinder1.Mounting.r[2] - engine.cylinder1.Mounting.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.lengthDirection[3](unit = "1") = engine.cylinder1.Mounting.r[3] - engine.cylinder1.Mounting.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Mounting.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.Mounting.r[1] - engine.cylinder1.Mounting.r_shape[1],engine.cylinder1.Mounting.r[2] - engine.cylinder1.Mounting.r_shape[2],engine.cylinder1.Mounting.r[3] - engine.cylinder1.Mounting.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.Mounting.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Mounting.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.Mounting.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Mounting.width " Height of shape.";
//   parameter Real engine.cylinder1.Mounting.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Mounting.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Mounting.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Mounting.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.Mounting.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder1.CylinderInclination.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CylinderInclination.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.CylinderInclination.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.CylinderInclination.r[1](quantity = "Length", unit = "m") = engine.cylinder1.crankLength - engine.cylinder1.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder1.CylinderInclination.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder1.CylinderInclination.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.CylinderInclination.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.CylinderInclination.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.CylinderInclination.angle(quantity = "Angle", unit = "deg") = engine.cylinder1.cylinderInclination " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder1.CylinderInclination.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder1.CylinderInclination.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder1.CylinderInclination.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder1.CylinderInclination.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder1.CylinderInclination.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder1.CylinderInclination.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder1.CylinderInclination.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder1.CylinderInclination.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.CylinderInclination.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.lengthDirection[1](unit = "1") = engine.cylinder1.CylinderInclination.r[1] - engine.cylinder1.CylinderInclination.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.lengthDirection[2](unit = "1") = engine.cylinder1.CylinderInclination.r[2] - engine.cylinder1.CylinderInclination.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.lengthDirection[3](unit = "1") = engine.cylinder1.CylinderInclination.r[3] - engine.cylinder1.CylinderInclination.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CylinderInclination.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.CylinderInclination.r[1] - engine.cylinder1.CylinderInclination.r_shape[1],engine.cylinder1.CylinderInclination.r[2] - engine.cylinder1.CylinderInclination.r_shape[2],engine.cylinder1.CylinderInclination.r[3] - engine.cylinder1.CylinderInclination.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.CylinderInclination.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.CylinderInclination.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.CylinderInclination.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.CylinderInclination.width " Height of shape.";
//   parameter Real engine.cylinder1.CylinderInclination.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.CylinderInclination.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.CylinderInclination.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.CylinderInclination.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.CylinderInclination.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CylinderInclination.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankAngle.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankAngle.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankAngle.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankAngle.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankAngle.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankAngle.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.CrankAngle.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.CrankAngle.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder1.CrankAngle.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder1.CrankAngle.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.CrankAngle.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.CrankAngle.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.CrankAngle.angle(quantity = "Angle", unit = "deg") = engine.cylinder1.crankAngleOffset " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder1.CrankAngle.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder1.CrankAngle.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder1.CrankAngle.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder1.CrankAngle.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder1.CrankAngle.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder1.CrankAngle.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder1.CrankAngle.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder1.CrankAngle.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.CrankAngle.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.lengthDirection[1](unit = "1") = engine.cylinder1.CrankAngle.r[1] - engine.cylinder1.CrankAngle.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.lengthDirection[2](unit = "1") = engine.cylinder1.CrankAngle.r[2] - engine.cylinder1.CrankAngle.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.lengthDirection[3](unit = "1") = engine.cylinder1.CrankAngle.r[3] - engine.cylinder1.CrankAngle.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.CrankAngle.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.CrankAngle.r[1] - engine.cylinder1.CrankAngle.r_shape[1],engine.cylinder1.CrankAngle.r[2] - engine.cylinder1.CrankAngle.r_shape[2],engine.cylinder1.CrankAngle.r[3] - engine.cylinder1.CrankAngle.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.CrankAngle.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.CrankAngle.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.CrankAngle.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.CrankAngle.width " Height of shape.";
//   parameter Real engine.cylinder1.CrankAngle.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.CrankAngle.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.CrankAngle.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.CrankAngle.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.CrankAngle.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.CrankAngle.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.jointRRP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder1.jointRRP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.jointRRP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder1.jointRRP.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.jointRRP.n_a[1](unit = "1") = 1.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder1.jointRRP.n_a[2](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder1.jointRRP.n_a[3](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder1.jointRRP.n_b[1](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder1.jointRRP.n_b[2](unit = "1") = -1.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder1.jointRRP.n_b[3](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder1.jointRRP.rRod1_ia[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder1.rodLength "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.rRod1_ia[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.rRod2_ib[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder1.jointRRP.rRod2_ib[2](quantity = "Length", unit = "m") = -engine.cylinder1.pistonLength "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder1.jointRRP.rRod2_ib[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder1.jointRRP.s_offset(quantity = "Length", unit = "m") = -engine.cylinder1.cylinderTopPosition "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder1.jointRRP.s_guess(quantity = "Length", unit = "m") = 0.0 "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder1.jointRRP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the revolute joints";
//   parameter Real engine.cylinder1.jointRRP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the revolute joints";
//   input Integer engine.cylinder1.jointRRP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder1.jointRRP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder1.jointRRP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   parameter Real engine.cylinder1.jointRRP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder1.jointRRP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.boxColor[1](min = 0, max = 255) = engine.cylinder1.jointRRP.cylinderColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.boxColor[2](min = 0, max = 255) = engine.cylinder1.jointRRP.cylinderColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.boxColor[3](min = 0, max = 255) = engine.cylinder1.jointRRP.cylinderColor[3] "Color of prismatic joint box";
//   parameter Real engine.cylinder1.jointRRP.rodDiameter(quantity = "Length", unit = "m", min = 0.0) = 1.1 * engine.cylinder1.jointRRP.cylinderDiameter "Diameter of the two rods connecting the joints";
//   input Integer engine.cylinder1.jointRRP.rodColor[1](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder1.jointRRP.rodColor[2](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder1.jointRRP.rodColor[3](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Real engine.cylinder1.jointRRP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.jointRRP.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder1.jointRRP.e_a[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.n_a[1],engine.cylinder1.jointRRP.n_a[2],engine.cylinder1.jointRRP.n_a[3]},1e-13)[1] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.e_a[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.n_a[1],engine.cylinder1.jointRRP.n_a[2],engine.cylinder1.jointRRP.n_a[3]},1e-13)[2] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.e_a[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.n_a[1],engine.cylinder1.jointRRP.n_a[2],engine.cylinder1.jointRRP.n_a[3]},1e-13)[3] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.e_ia[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.e2_ia[1] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.e_ia[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.e2_ia[2] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.e_ia[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.e2_ia[3] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.e_im[1](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder1.jointRRP.e_im[2](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder1.jointRRP.e_im[3](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder1.jointRRP.e_b[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.prismatic.e[1] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder1.jointRRP.e_b[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.prismatic.e[2] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder1.jointRRP.e_b[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.prismatic.e[3] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   Real engine.cylinder1.jointRRP.totalPower(quantity = "Power", unit = "W") = engine.cylinder1.jointRRP.jointUSP.totalPower "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.jointRRP.jointUSP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder1.jointRRP.jointUSP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.jointRRP.jointUSP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.animation = false "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.showUniversalAxes = false " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.n1_a[1](unit = "1") = engine.cylinder1.jointRRP.n_a[1] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.n1_a[2](unit = "1") = engine.cylinder1.jointRRP.n_a[2] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.n1_a[3](unit = "1") = engine.cylinder1.jointRRP.n_a[3] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.n_b[1](unit = "1") = engine.cylinder1.jointRRP.n_b[1] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.n_b[2](unit = "1") = engine.cylinder1.jointRRP.n_b[2] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.n_b[3](unit = "1") = engine.cylinder1.jointRRP.n_b[3] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rRod1_ia[1](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.rRod1_ia[1] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.rRod1_ia[2] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rRod1_ia[3](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.rRod1_ia[3] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rRod2_ib[1](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.rRod2_ib[1] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rRod2_ib[2](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.rRod2_ib[2] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rRod2_ib[3](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.rRod2_ib[3] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.s_offset(quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.s_offset "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.s_guess(quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.sphereColor[1](min = 0, max = 255) = 255 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.sphereColor[2](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.sphereColor[3](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.sphereDiameter / 2.0 "Diameter of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1Color[1](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1Color[2](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1Color[3](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.rod1Diameter "Diameter of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod2Color[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod1Color[1] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod2Color[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod1Color[2] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod2Color[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod1Color[3] "Color of rod 2 connecting the prismatic and the spherical joint";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.jointUSP.boxColor[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.sphereColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.jointUSP.boxColor[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.sphereColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.jointUSP.boxColor[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.sphereColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder1.jointRRP.jointUSP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder1.jointRRP.jointUSP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder1.jointRRP.jointUSP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder1.jointRRP.jointUSP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.checkTotalPower = engine.cylinder1.jointRRP.checkTotalPower "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.eRod1_ia[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.eRod1_ia[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.eRod1_ia[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.e2_ia[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.e2_ia[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.e2_ia[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1Length(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.rod1.rodLength "Length of rod 1 (= distance between universal and spherical joint";
//   Real engine.cylinder1.jointRRP.jointUSP.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   Real engine.cylinder1.jointRRP.jointUSP.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.prismatic.animation = engine.cylinder1.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.length(quantity = "Length", unit = "m", start = 1.0) = engine.cylinder1.jointRRP.jointUSP.rod1.rodLength "Fixed length of length constraint";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.n[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.n_b[1] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.n[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.n_b[2] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.n[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.n_b[3] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.s_offset(quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.s_offset "Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.s_guess(quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.boxWidthDirection[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.boxWidthDirection[1] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.boxWidthDirection[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.boxWidthDirection[2] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.boxWidthDirection[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.boxWidthDirection[3] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.boxWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.boxWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.boxHeight "Height of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.jointUSP.prismatic.boxColor[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.boxColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.jointUSP.prismatic.boxColor[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.boxColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder1.jointRRP.jointUSP.prismatic.boxColor[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.boxColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder1.jointRRP.jointUSP.prismatic.specularCoefficient = engine.cylinder1.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.prismatic.positiveBranch(fixed = false) "Selection of one of the two solutions of the non-linear constraint equation";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.prismatic.n[1],engine.cylinder1.jointRRP.jointUSP.prismatic.n[2],engine.cylinder1.jointRRP.jointUSP.prismatic.n[3]},1e-13)[1] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.prismatic.n[1],engine.cylinder1.jointRRP.jointUSP.prismatic.n[2],engine.cylinder1.jointRRP.jointUSP.prismatic.n[3]},1e-13)[2] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.prismatic.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.prismatic.n[1],engine.cylinder1.jointRRP.jointUSP.prismatic.n[2],engine.cylinder1.jointRRP.jointUSP.prismatic.n[3]},1e-13)[3] "Unit vector in direction of translation axis, resolved in frame_a";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.s(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n = s + s_offset)";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.distance(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder1.jointRRP.jointUSP.prismatic.f(quantity = "Force", unit = "N") "= axis.f (driving force in the axis)";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[1](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[2](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[3](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[1](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[2](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[3](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[1](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[2](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[3](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.B "Coefficient B of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.C "Coefficient C of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.k1 "Constant of quadratic equation solution";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.k2 "Constant of quadratic equation solution";
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.k1a(start = 1.0);
//   protected Real engine.cylinder1.jointRRP.jointUSP.prismatic.k1b;
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.rod1.animation = engine.cylinder1.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.rod1.showUniversalAxes = engine.cylinder1.jointRRP.jointUSP.showUniversalAxes " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.rod1.computeRodLength = false "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.n1_a[1] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.n1_a[2] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.n1_a[3] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.rRod1_ia[1] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.rRod1_ia[2] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3](quantity = "Length", unit = "m") = engine.cylinder1.jointRRP.jointUSP.rRod1_ia[3] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.sphereDiameter "Diameter of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.sphereColor[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.sphereColor[1] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.sphereColor[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.sphereColor[2] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.sphereColor[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.sphereColor[3] "Color of spheres representing the universal and the spherical joint";
//   parameter String engine.cylinder1.jointRRP.jointUSP.rod1.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rodWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.rod1Diameter "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rodHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.rod1Diameter "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.rodColor[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod1Color[1] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.rodColor[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod1Color[2] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.rodColor[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod1Color[3] "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.cylinderLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.cylinderDiameter "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.cylinderColor[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.cylinderColor[1] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.cylinderColor[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.cylinderColor[2] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod1.cylinderColor[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.cylinderColor[3] "Color of cylinders representing the two universal joint axes";
//   input Real engine.cylinder1.jointRRP.jointUSP.rod1.specularCoefficient = engine.cylinder1.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.rod1.kinematicConstraint = false "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.constraintResidue = engine.cylinder1.jointRRP.jointUSP.rod1.f_rod - engine.cylinder1.jointRRP.jointUSP.f_rod "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.rod1.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT engine.cylinder1.jointRRP.jointUSP.rod1.computeRodLength) = Modelica.Math.Vectors.length({engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.e3_ia[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[3] - engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.e3_ia[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[1] - engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod1.e3_ia[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[2] - engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[1](quantity = "Length", unit = "m", start = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[2](quantity = "Length", unit = "m", start = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[3](quantity = "Length", unit = "m", start = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[1](quantity = "Length", unit = "m", start = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[2](quantity = "Length", unit = "m", start = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[3](quantity = "Length", unit = "m", start = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.jointRRP.jointUSP.rod2.animation = engine.cylinder1.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.jointRRP.jointUSP.rRod2_ib[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.jointRRP.jointUSP.rRod2_ib[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.jointRRP.jointUSP.rRod2_ib[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder1.jointRRP.jointUSP.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.lengthDirection[1](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod2.r[1] - engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.lengthDirection[2](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod2.r[2] - engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.lengthDirection[3](unit = "1") = engine.cylinder1.jointRRP.jointUSP.rod2.r[3] - engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.jointRRP.jointUSP.rod2.r[1] - engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[1],engine.cylinder1.jointRRP.jointUSP.rod2.r[2] - engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[2],engine.cylinder1.jointRRP.jointUSP.rod2.r[3] - engine.cylinder1.jointRRP.jointUSP.rod2.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.rod2Diameter " Width of shape";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.jointRRP.jointUSP.rod2Diameter " Height of shape.";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod2.color[1](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod2Color[1] " Color of shape";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod2.color[2](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod2Color[2] " Color of shape";
//   input Integer engine.cylinder1.jointRRP.jointUSP.rod2.color[3](min = 0, max = 255) = engine.cylinder1.jointRRP.jointUSP.rod2Color[3] " Color of shape";
//   input Real engine.cylinder1.jointRRP.jointUSP.rod2.specularCoefficient = engine.cylinder1.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder1.jointRRP.jointUSP.relativePosition.r_rel[1] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder1.jointRRP.jointUSP.relativePosition.r_rel[2] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder1.jointRRP.jointUSP.relativePosition.r_rel[3] "Relative position vector resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder1.jointRRP.jointUSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a "Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.resolveInFrame = engine.cylinder1.jointRRP.jointUSP.relativePosition.resolveInFrame "Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder1.jointRRP.jointUSP.position_b[1].y "Connector of Real output signal";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.position_b[1].k(start = 1.0) = engine.cylinder1.jointRRP.jointUSP.rRod2_ib[1] "Constant output value";
//   output Real engine.cylinder1.jointRRP.jointUSP.position_b[2].y "Connector of Real output signal";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.position_b[2].k(start = 1.0) = engine.cylinder1.jointRRP.jointUSP.rRod2_ib[2] "Constant output value";
//   output Real engine.cylinder1.jointRRP.jointUSP.position_b[3].y "Connector of Real output signal";
//   parameter Real engine.cylinder1.jointRRP.jointUSP.position_b[3].k(start = 1.0) = engine.cylinder1.jointRRP.jointUSP.rRod2_ib[3] "Constant output value";
//   protected Real engine.cylinder1.jointRRP.jointUSP.aux "Denominator used to compute force in rod connecting universal and spherical joint";
//   Real engine.cylinder1.Rod.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Rod.animation = engine.cylinder1.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder1.Rod.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder1.Rod.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.rodLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.rodLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder1.rodMass "Mass of rigid body";
//   parameter Real engine.cylinder1.Rod.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.rodInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.rodInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.rodInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder1.Rod.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Rod.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Rod.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Rod.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Rod.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Rod.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Rod.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Rod.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Rod.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder1.Rod.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Rod.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Rod.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Rod.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder1.Rod.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Rod.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Rod.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder1.Rod.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Rod.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Rod.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Rod.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder1.Rod.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Rod.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Rod.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Rod.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder1.Rod.shapeType = "2" " Type of shape";
//   parameter Real engine.cylinder1.Rod.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.length(quantity = "Length", unit = "m") = engine.cylinder1.rodLength / 1.75 " Length of shape";
//   parameter Real engine.cylinder1.Rod.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.rodLength / 1.75 " Width of shape";
//   parameter Real engine.cylinder1.Rod.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.rodLength / 1.75 " Height of shape.";
//   parameter Real engine.cylinder1.Rod.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Rod.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Rod.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Rod.color[3](min = 0, max = 255) = 155 " Color of shape";
//   parameter Real engine.cylinder1.Rod.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder1.Rod.width " Diameter of sphere";
//   input Integer engine.cylinder1.Rod.sphereColor[1](min = 0, max = 255) = engine.cylinder1.Rod.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder1.Rod.sphereColor[2](min = 0, max = 255) = engine.cylinder1.Rod.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder1.Rod.sphereColor[3](min = 0, max = 255) = engine.cylinder1.Rod.color[3] " Color of sphere of mass";
//   input Real engine.cylinder1.Rod.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.Rod.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder1.Rod.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder1.Rod.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Rod.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Rod.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Rod.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.Rod.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Rod.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Rod.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Rod.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder1.Rod.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.Rod.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder1.Rod.frameTranslation.r[1] - engine.cylinder1.Rod.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder1.Rod.frameTranslation.r[2] - engine.cylinder1.Rod.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder1.Rod.frameTranslation.r[3] - engine.cylinder1.Rod.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.Rod.frameTranslation.r[1] - engine.cylinder1.Rod.frameTranslation.r_shape[1],engine.cylinder1.Rod.frameTranslation.r[2] - engine.cylinder1.Rod.frameTranslation.r_shape[2],engine.cylinder1.Rod.frameTranslation.r[3] - engine.cylinder1.Rod.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.Rod.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Rod.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.Rod.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Rod.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder1.Rod.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Rod.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Rod.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Rod.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.Rod.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder1.Rod.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Rod.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Rod.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Rod.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Rod.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder1.Rod.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Rod.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Rod.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Rod.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder1.Rod.m "Mass of rigid body";
//   parameter Real engine.cylinder1.Rod.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.Rod.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.Rod.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.Rod.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder1.Rod.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder1.Rod.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder1.Rod.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder1.Rod.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Rod.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Rod.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Rod.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Rod.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Rod.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Rod.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Rod.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Rod.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder1.Rod.body.angles_fixed = engine.cylinder1.Rod.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Rod.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder1.Rod.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Rod.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder1.Rod.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Rod.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder1.Rod.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder1.Rod.body.sequence_start[1](min = 1, max = 3) = engine.cylinder1.Rod.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Rod.body.sequence_start[2](min = 1, max = 3) = engine.cylinder1.Rod.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Rod.body.sequence_start[3](min = 1, max = 3) = engine.cylinder1.Rod.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder1.Rod.body.w_0_fixed = engine.cylinder1.Rod.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Rod.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder1.Rod.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Rod.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder1.Rod.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Rod.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder1.Rod.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder1.Rod.body.z_0_fixed = engine.cylinder1.Rod.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Rod.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder1.Rod.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Rod.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder1.Rod.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Rod.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder1.Rod.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Rod.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder1.Rod.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder1.Rod.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder1.Rod.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder1.Rod.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Rod.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder1.Rod.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder1.Rod.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder1.Rod.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder1.Rod.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder1.Rod.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder1.Rod.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder1.Rod.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.Rod.body.enforceStates = engine.cylinder1.Rod.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder1.Rod.body.useQuaternions = engine.cylinder1.Rod.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder1.Rod.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder1.Rod.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Rod.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder1.Rod.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Rod.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder1.Rod.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder1.Rod.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Rod.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.Rod.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.Rod.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.z_0_start[1],engine.cylinder1.Rod.body.z_0_start[2],engine.cylinder1.Rod.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.z_0_start[1],engine.cylinder1.Rod.body.z_0_start[2],engine.cylinder1.Rod.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder1.Rod.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.z_0_start[1],engine.cylinder1.Rod.body.z_0_start[2],engine.cylinder1.Rod.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder1.Rod.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.w_0_start[1],engine.cylinder1.Rod.body.w_0_start[2],engine.cylinder1.Rod.body.w_0_start[3]})[1], fixed = engine.cylinder1.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder1.Rod.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.w_0_start[1],engine.cylinder1.Rod.body.w_0_start[2],engine.cylinder1.Rod.body.w_0_start[3]})[2], fixed = engine.cylinder1.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder1.Rod.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.w_0_start[1],engine.cylinder1.Rod.body.w_0_start[2],engine.cylinder1.Rod.body.w_0_start[3]})[3], fixed = engine.cylinder1.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder1.Rod.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.z_0_start[1],engine.cylinder1.Rod.body.z_0_start[2],engine.cylinder1.Rod.body.z_0_start[3]})[1], fixed = engine.cylinder1.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder1.Rod.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.z_0_start[1],engine.cylinder1.Rod.body.z_0_start[2],engine.cylinder1.Rod.body.z_0_start[3]})[2], fixed = engine.cylinder1.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder1.Rod.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.z_0_start[1],engine.cylinder1.Rod.body.z_0_start[2],engine.cylinder1.Rod.body.z_0_start[3]})[3], fixed = engine.cylinder1.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder1.Rod.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder1.Rod.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder1.Rod.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder1.Rod.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder1.Rod.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder1.Rod.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder1.Rod.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder1.Rod.body.Q[1](start = engine.cylinder1.Rod.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder1.Rod.body.Q[2](start = engine.cylinder1.Rod.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder1.Rod.body.Q[3](start = engine.cylinder1.Rod.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder1.Rod.body.Q[4](start = engine.cylinder1.Rod.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder1.Rod.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder1.Rod.body.sequence_start[1] == engine.cylinder1.Rod.body.sequence_angleStates[1] AND engine.cylinder1.Rod.body.sequence_start[2] == engine.cylinder1.Rod.body.sequence_angleStates[2] AND engine.cylinder1.Rod.body.sequence_start[3] == engine.cylinder1.Rod.body.sequence_angleStates[3] then engine.cylinder1.Rod.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.sequence_angleStates[1],engine.cylinder1.Rod.body.sequence_angleStates[2],engine.cylinder1.Rod.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder1.Rod.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder1.Rod.body.sequence_start[1] == engine.cylinder1.Rod.body.sequence_angleStates[1] AND engine.cylinder1.Rod.body.sequence_start[2] == engine.cylinder1.Rod.body.sequence_angleStates[2] AND engine.cylinder1.Rod.body.sequence_start[3] == engine.cylinder1.Rod.body.sequence_angleStates[3] then engine.cylinder1.Rod.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.sequence_angleStates[1],engine.cylinder1.Rod.body.sequence_angleStates[2],engine.cylinder1.Rod.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder1.Rod.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder1.Rod.body.sequence_start[1] == engine.cylinder1.Rod.body.sequence_angleStates[1] AND engine.cylinder1.Rod.body.sequence_start[2] == engine.cylinder1.Rod.body.sequence_angleStates[2] AND engine.cylinder1.Rod.body.sequence_start[3] == engine.cylinder1.Rod.body.sequence_angleStates[3] then engine.cylinder1.Rod.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder1.Rod.body.R_start,{engine.cylinder1.Rod.body.sequence_angleStates[1],engine.cylinder1.Rod.body.sequence_angleStates[2],engine.cylinder1.Rod.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder1.Rod.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder1.Rod.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder1.Rod.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder1.Rod.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder1.Rod.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder1.Rod.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder1.Rod.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder1.Rod.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder1.Rod.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder1.Rod.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder1.Rod.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder1.Rod.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder1.Rod.shape1.shapeType = engine.cylinder1.Rod.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder1.Rod.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Rod.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.Rod.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.Rod.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.Rod.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder1.Rod.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.Rod.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder1.Rod.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.Rod.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder1.Rod.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.Rod.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder1.Rod.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder1.Rod.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder1.Rod.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.lengthDirection[1](unit = "1") = engine.cylinder1.Rod.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.lengthDirection[2](unit = "1") = engine.cylinder1.Rod.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.lengthDirection[3](unit = "1") = engine.cylinder1.Rod.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.widthDirection[1](unit = "1") = engine.cylinder1.Rod.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.widthDirection[2](unit = "1") = engine.cylinder1.Rod.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.widthDirection[3](unit = "1") = engine.cylinder1.Rod.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.Rod.shape1.length(quantity = "Length", unit = "m") = engine.cylinder1.Rod.length "Length of visual object";
//   input Real engine.cylinder1.Rod.shape1.width(quantity = "Length", unit = "m") = engine.cylinder1.Rod.width "Width of visual object";
//   input Real engine.cylinder1.Rod.shape1.height(quantity = "Length", unit = "m") = engine.cylinder1.Rod.height "Height of visual object";
//   input Real engine.cylinder1.Rod.shape1.extra = engine.cylinder1.Rod.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder1.Rod.shape1.color[1] = Real(engine.cylinder1.Rod.color[1]) "Color of shape";
//   input Real engine.cylinder1.Rod.shape1.color[2] = Real(engine.cylinder1.Rod.color[2]) "Color of shape";
//   input Real engine.cylinder1.Rod.shape1.color[3] = Real(engine.cylinder1.Rod.color[3]) "Color of shape";
//   input Real engine.cylinder1.Rod.shape1.specularCoefficient = engine.cylinder1.Rod.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder1.Rod.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder1.Rod.shape1.lengthDirection[1],engine.cylinder1.Rod.shape1.lengthDirection[2],engine.cylinder1.Rod.shape1.lengthDirection[3]});
//   protected Real engine.cylinder1.Rod.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder1.Rod.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder1.Rod.shape1.lengthDirection[1] / engine.cylinder1.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder1.Rod.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder1.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder1.Rod.shape1.lengthDirection[2] / engine.cylinder1.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder1.Rod.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder1.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder1.Rod.shape1.lengthDirection[3] / engine.cylinder1.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder1.Rod.shape1.n_z_aux[1](unit = "1") = engine.cylinder1.Rod.shape1.e_x[2] * engine.cylinder1.Rod.shape1.widthDirection[3] - engine.cylinder1.Rod.shape1.e_x[3] * engine.cylinder1.Rod.shape1.widthDirection[2];
//   protected Real engine.cylinder1.Rod.shape1.n_z_aux[2](unit = "1") = engine.cylinder1.Rod.shape1.e_x[3] * engine.cylinder1.Rod.shape1.widthDirection[1] - engine.cylinder1.Rod.shape1.e_x[1] * engine.cylinder1.Rod.shape1.widthDirection[3];
//   protected Real engine.cylinder1.Rod.shape1.n_z_aux[3](unit = "1") = engine.cylinder1.Rod.shape1.e_x[1] * engine.cylinder1.Rod.shape1.widthDirection[2] - engine.cylinder1.Rod.shape1.e_x[2] * engine.cylinder1.Rod.shape1.widthDirection[1];
//   protected Real engine.cylinder1.Rod.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.Rod.shape1.e_x[1],engine.cylinder1.Rod.shape1.e_x[2],engine.cylinder1.Rod.shape1.e_x[3]},if noEvent(engine.cylinder1.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder1.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder1.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.Rod.shape1.widthDirection[1],engine.cylinder1.Rod.shape1.widthDirection[2],engine.cylinder1.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder1.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.Rod.shape1.e_x[1],engine.cylinder1.Rod.shape1.e_x[2],engine.cylinder1.Rod.shape1.e_x[3]})[1];
//   protected Real engine.cylinder1.Rod.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.Rod.shape1.e_x[1],engine.cylinder1.Rod.shape1.e_x[2],engine.cylinder1.Rod.shape1.e_x[3]},if noEvent(engine.cylinder1.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder1.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder1.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.Rod.shape1.widthDirection[1],engine.cylinder1.Rod.shape1.widthDirection[2],engine.cylinder1.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder1.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.Rod.shape1.e_x[1],engine.cylinder1.Rod.shape1.e_x[2],engine.cylinder1.Rod.shape1.e_x[3]})[2];
//   protected Real engine.cylinder1.Rod.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.Rod.shape1.e_x[1],engine.cylinder1.Rod.shape1.e_x[2],engine.cylinder1.Rod.shape1.e_x[3]},if noEvent(engine.cylinder1.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder1.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder1.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.Rod.shape1.widthDirection[1],engine.cylinder1.Rod.shape1.widthDirection[2],engine.cylinder1.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder1.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.Rod.shape1.e_x[1],engine.cylinder1.Rod.shape1.e_x[2],engine.cylinder1.Rod.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder1.Rod.shape1.Form;
//   output Real engine.cylinder1.Rod.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder1.Rod.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder1.Rod.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.Rod.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.Rod.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.Rod.shape1.Material;
//   protected output Real engine.cylinder1.Rod.shape1.Extra;
//   Real engine.cylinder1.Piston.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Piston.animation = engine.cylinder1.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder1.Piston.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder1.Piston.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.pistonLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.pistonLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder1.pistonMass "Mass of rigid body";
//   parameter Real engine.cylinder1.Piston.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.pistonInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.pistonInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.pistonInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder1.Piston.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Piston.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Piston.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Piston.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Piston.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Piston.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Piston.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Piston.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Piston.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder1.Piston.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Piston.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Piston.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Piston.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder1.Piston.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Piston.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Piston.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder1.Piston.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Piston.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Piston.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Piston.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder1.Piston.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Piston.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Piston.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Piston.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder1.Piston.shapeType = "3" " Type of shape";
//   parameter Real engine.cylinder1.Piston.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.length(quantity = "Length", unit = "m") = 0.08 " Length of shape";
//   parameter Real engine.cylinder1.Piston.width(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Width of shape";
//   parameter Real engine.cylinder1.Piston.height(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Height of shape.";
//   parameter Real engine.cylinder1.Piston.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Piston.color[1](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder1.Piston.color[2](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder1.Piston.color[3](min = 0, max = 255) = 180 " Color of shape";
//   parameter Real engine.cylinder1.Piston.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder1.Piston.width " Diameter of sphere";
//   input Integer engine.cylinder1.Piston.sphereColor[1](min = 0, max = 255) = engine.cylinder1.Piston.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder1.Piston.sphereColor[2](min = 0, max = 255) = engine.cylinder1.Piston.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder1.Piston.sphereColor[3](min = 0, max = 255) = engine.cylinder1.Piston.color[3] " Color of sphere of mass";
//   input Real engine.cylinder1.Piston.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.Piston.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder1.Piston.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder1.Piston.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Piston.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Piston.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Piston.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.Piston.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Piston.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Piston.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Piston.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder1.Piston.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.Piston.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder1.Piston.frameTranslation.r[1] - engine.cylinder1.Piston.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder1.Piston.frameTranslation.r[2] - engine.cylinder1.Piston.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder1.Piston.frameTranslation.r[3] - engine.cylinder1.Piston.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.Piston.frameTranslation.r[1] - engine.cylinder1.Piston.frameTranslation.r_shape[1],engine.cylinder1.Piston.frameTranslation.r[2] - engine.cylinder1.Piston.frameTranslation.r_shape[2],engine.cylinder1.Piston.frameTranslation.r[3] - engine.cylinder1.Piston.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.Piston.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Piston.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.Piston.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Piston.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder1.Piston.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Piston.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Piston.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Piston.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.Piston.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder1.Piston.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Piston.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Piston.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder1.Piston.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Piston.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Piston.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.Piston.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder1.Piston.m "Mass of rigid body";
//   parameter Real engine.cylinder1.Piston.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.Piston.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.Piston.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder1.Piston.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder1.Piston.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder1.Piston.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder1.Piston.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder1.Piston.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Piston.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Piston.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder1.Piston.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Piston.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Piston.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder1.Piston.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Piston.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder1.Piston.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder1.Piston.body.angles_fixed = engine.cylinder1.Piston.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Piston.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder1.Piston.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Piston.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder1.Piston.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder1.Piston.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder1.Piston.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder1.Piston.body.sequence_start[1](min = 1, max = 3) = engine.cylinder1.Piston.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Piston.body.sequence_start[2](min = 1, max = 3) = engine.cylinder1.Piston.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder1.Piston.body.sequence_start[3](min = 1, max = 3) = engine.cylinder1.Piston.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder1.Piston.body.w_0_fixed = engine.cylinder1.Piston.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Piston.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder1.Piston.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Piston.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder1.Piston.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder1.Piston.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder1.Piston.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder1.Piston.body.z_0_fixed = engine.cylinder1.Piston.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder1.Piston.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder1.Piston.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Piston.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder1.Piston.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Piston.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder1.Piston.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder1.Piston.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder1.Piston.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder1.Piston.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder1.Piston.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder1.Piston.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Piston.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder1.Piston.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder1.Piston.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder1.Piston.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder1.Piston.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder1.Piston.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder1.Piston.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder1.Piston.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder1.Piston.body.enforceStates = engine.cylinder1.Piston.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder1.Piston.body.useQuaternions = engine.cylinder1.Piston.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder1.Piston.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder1.Piston.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Piston.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder1.Piston.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder1.Piston.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder1.Piston.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder1.Piston.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder1.Piston.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.Piston.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder1.Piston.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.z_0_start[1],engine.cylinder1.Piston.body.z_0_start[2],engine.cylinder1.Piston.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.z_0_start[1],engine.cylinder1.Piston.body.z_0_start[2],engine.cylinder1.Piston.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder1.Piston.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.z_0_start[1],engine.cylinder1.Piston.body.z_0_start[2],engine.cylinder1.Piston.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder1.Piston.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.w_0_start[1],engine.cylinder1.Piston.body.w_0_start[2],engine.cylinder1.Piston.body.w_0_start[3]})[1], fixed = engine.cylinder1.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder1.Piston.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.w_0_start[1],engine.cylinder1.Piston.body.w_0_start[2],engine.cylinder1.Piston.body.w_0_start[3]})[2], fixed = engine.cylinder1.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder1.Piston.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.w_0_start[1],engine.cylinder1.Piston.body.w_0_start[2],engine.cylinder1.Piston.body.w_0_start[3]})[3], fixed = engine.cylinder1.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder1.Piston.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.z_0_start[1],engine.cylinder1.Piston.body.z_0_start[2],engine.cylinder1.Piston.body.z_0_start[3]})[1], fixed = engine.cylinder1.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder1.Piston.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.z_0_start[1],engine.cylinder1.Piston.body.z_0_start[2],engine.cylinder1.Piston.body.z_0_start[3]})[2], fixed = engine.cylinder1.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder1.Piston.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.z_0_start[1],engine.cylinder1.Piston.body.z_0_start[2],engine.cylinder1.Piston.body.z_0_start[3]})[3], fixed = engine.cylinder1.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder1.Piston.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder1.Piston.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder1.Piston.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder1.Piston.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder1.Piston.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder1.Piston.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder1.Piston.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder1.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder1.Piston.body.Q[1](start = engine.cylinder1.Piston.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder1.Piston.body.Q[2](start = engine.cylinder1.Piston.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder1.Piston.body.Q[3](start = engine.cylinder1.Piston.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder1.Piston.body.Q[4](start = engine.cylinder1.Piston.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder1.Piston.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder1.Piston.body.sequence_start[1] == engine.cylinder1.Piston.body.sequence_angleStates[1] AND engine.cylinder1.Piston.body.sequence_start[2] == engine.cylinder1.Piston.body.sequence_angleStates[2] AND engine.cylinder1.Piston.body.sequence_start[3] == engine.cylinder1.Piston.body.sequence_angleStates[3] then engine.cylinder1.Piston.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.sequence_angleStates[1],engine.cylinder1.Piston.body.sequence_angleStates[2],engine.cylinder1.Piston.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder1.Piston.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder1.Piston.body.sequence_start[1] == engine.cylinder1.Piston.body.sequence_angleStates[1] AND engine.cylinder1.Piston.body.sequence_start[2] == engine.cylinder1.Piston.body.sequence_angleStates[2] AND engine.cylinder1.Piston.body.sequence_start[3] == engine.cylinder1.Piston.body.sequence_angleStates[3] then engine.cylinder1.Piston.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.sequence_angleStates[1],engine.cylinder1.Piston.body.sequence_angleStates[2],engine.cylinder1.Piston.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder1.Piston.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder1.Piston.body.sequence_start[1] == engine.cylinder1.Piston.body.sequence_angleStates[1] AND engine.cylinder1.Piston.body.sequence_start[2] == engine.cylinder1.Piston.body.sequence_angleStates[2] AND engine.cylinder1.Piston.body.sequence_start[3] == engine.cylinder1.Piston.body.sequence_angleStates[3] then engine.cylinder1.Piston.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder1.Piston.body.R_start,{engine.cylinder1.Piston.body.sequence_angleStates[1],engine.cylinder1.Piston.body.sequence_angleStates[2],engine.cylinder1.Piston.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder1.Piston.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder1.Piston.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder1.Piston.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder1.Piston.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder1.Piston.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder1.Piston.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder1.Piston.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder1.Piston.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder1.Piston.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder1.Piston.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder1.Piston.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder1.Piston.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder1.Piston.shape1.shapeType = engine.cylinder1.Piston.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder1.Piston.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.Piston.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.Piston.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.Piston.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.Piston.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder1.Piston.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.Piston.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder1.Piston.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.Piston.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder1.Piston.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.Piston.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder1.Piston.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder1.Piston.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder1.Piston.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.lengthDirection[1](unit = "1") = engine.cylinder1.Piston.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.lengthDirection[2](unit = "1") = engine.cylinder1.Piston.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.lengthDirection[3](unit = "1") = engine.cylinder1.Piston.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.widthDirection[1](unit = "1") = engine.cylinder1.Piston.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.widthDirection[2](unit = "1") = engine.cylinder1.Piston.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.widthDirection[3](unit = "1") = engine.cylinder1.Piston.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.Piston.shape1.length(quantity = "Length", unit = "m") = engine.cylinder1.Piston.length "Length of visual object";
//   input Real engine.cylinder1.Piston.shape1.width(quantity = "Length", unit = "m") = engine.cylinder1.Piston.width "Width of visual object";
//   input Real engine.cylinder1.Piston.shape1.height(quantity = "Length", unit = "m") = engine.cylinder1.Piston.height "Height of visual object";
//   input Real engine.cylinder1.Piston.shape1.extra = engine.cylinder1.Piston.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder1.Piston.shape1.color[1] = Real(engine.cylinder1.Piston.color[1]) "Color of shape";
//   input Real engine.cylinder1.Piston.shape1.color[2] = Real(engine.cylinder1.Piston.color[2]) "Color of shape";
//   input Real engine.cylinder1.Piston.shape1.color[3] = Real(engine.cylinder1.Piston.color[3]) "Color of shape";
//   input Real engine.cylinder1.Piston.shape1.specularCoefficient = engine.cylinder1.Piston.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder1.Piston.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder1.Piston.shape1.lengthDirection[1],engine.cylinder1.Piston.shape1.lengthDirection[2],engine.cylinder1.Piston.shape1.lengthDirection[3]});
//   protected Real engine.cylinder1.Piston.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder1.Piston.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder1.Piston.shape1.lengthDirection[1] / engine.cylinder1.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder1.Piston.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder1.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder1.Piston.shape1.lengthDirection[2] / engine.cylinder1.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder1.Piston.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder1.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder1.Piston.shape1.lengthDirection[3] / engine.cylinder1.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder1.Piston.shape1.n_z_aux[1](unit = "1") = engine.cylinder1.Piston.shape1.e_x[2] * engine.cylinder1.Piston.shape1.widthDirection[3] - engine.cylinder1.Piston.shape1.e_x[3] * engine.cylinder1.Piston.shape1.widthDirection[2];
//   protected Real engine.cylinder1.Piston.shape1.n_z_aux[2](unit = "1") = engine.cylinder1.Piston.shape1.e_x[3] * engine.cylinder1.Piston.shape1.widthDirection[1] - engine.cylinder1.Piston.shape1.e_x[1] * engine.cylinder1.Piston.shape1.widthDirection[3];
//   protected Real engine.cylinder1.Piston.shape1.n_z_aux[3](unit = "1") = engine.cylinder1.Piston.shape1.e_x[1] * engine.cylinder1.Piston.shape1.widthDirection[2] - engine.cylinder1.Piston.shape1.e_x[2] * engine.cylinder1.Piston.shape1.widthDirection[1];
//   protected Real engine.cylinder1.Piston.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.Piston.shape1.e_x[1],engine.cylinder1.Piston.shape1.e_x[2],engine.cylinder1.Piston.shape1.e_x[3]},if noEvent(engine.cylinder1.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder1.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder1.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.Piston.shape1.widthDirection[1],engine.cylinder1.Piston.shape1.widthDirection[2],engine.cylinder1.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder1.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.Piston.shape1.e_x[1],engine.cylinder1.Piston.shape1.e_x[2],engine.cylinder1.Piston.shape1.e_x[3]})[1];
//   protected Real engine.cylinder1.Piston.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.Piston.shape1.e_x[1],engine.cylinder1.Piston.shape1.e_x[2],engine.cylinder1.Piston.shape1.e_x[3]},if noEvent(engine.cylinder1.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder1.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder1.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.Piston.shape1.widthDirection[1],engine.cylinder1.Piston.shape1.widthDirection[2],engine.cylinder1.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder1.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.Piston.shape1.e_x[1],engine.cylinder1.Piston.shape1.e_x[2],engine.cylinder1.Piston.shape1.e_x[3]})[2];
//   protected Real engine.cylinder1.Piston.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.Piston.shape1.e_x[1],engine.cylinder1.Piston.shape1.e_x[2],engine.cylinder1.Piston.shape1.e_x[3]},if noEvent(engine.cylinder1.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder1.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder1.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.Piston.shape1.widthDirection[1],engine.cylinder1.Piston.shape1.widthDirection[2],engine.cylinder1.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder1.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.Piston.shape1.e_x[1],engine.cylinder1.Piston.shape1.e_x[2],engine.cylinder1.Piston.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder1.Piston.shape1.Form;
//   output Real engine.cylinder1.Piston.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder1.Piston.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder1.Piston.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.Piston.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.Piston.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.Piston.shape1.Material;
//   protected output Real engine.cylinder1.Piston.shape1.Extra;
//   Real engine.cylinder1.gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder1.gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder1.gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder1.gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real engine.cylinder1.gasForce.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
//   parameter Real engine.cylinder1.gasForce.L(quantity = "Length", unit = "m") = engine.cylinder1.cylinderLength "Length of cylinder";
//   parameter Real engine.cylinder1.gasForce.d(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of cylinder";
//   parameter Real engine.cylinder1.gasForce.k0(quantity = "Volume", unit = "m3") = 0.01 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder1.gasForce.k1(quantity = "Volume", unit = "m3") = 1.0 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder1.gasForce.k(quantity = "HeatCapacity", unit = "J/K") = 1.0 "Gas constant (p*V = k*T)";
//   constant Real engine.cylinder1.gasForce.pi = 3.14159265358979;
//   Real engine.cylinder1.gasForce.x "Normalized position of cylinder";
//   Real engine.cylinder1.gasForce.y "Normalized relative movement (= -s_rel/L)";
//   Real engine.cylinder1.gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real engine.cylinder1.gasForce.press(quantity = "Pressure", unit = "bar") "cylinder pressure";
//   Real engine.cylinder1.gasForce.V(quantity = "Volume", unit = "m3");
//   Real engine.cylinder1.gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real engine.cylinder1.gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   protected constant Real engine.cylinder1.gasForce.unitMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0;
//   protected Real engine.cylinder1.gasForce.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar");
//   Real engine.cylinder1.Crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.Crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.Crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.Crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.Crank.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder1.Crank.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder1.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder1.Crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder1.Crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.lengthDirection[1](unit = "1") = engine.cylinder1.Crank.r[1] - engine.cylinder1.Crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.lengthDirection[2](unit = "1") = engine.cylinder1.Crank.r[2] - engine.cylinder1.Crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.lengthDirection[3](unit = "1") = engine.cylinder1.Crank.r[3] - engine.cylinder1.Crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder1.Crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder1.Crank.r[1] - engine.cylinder1.Crank.r_shape[1],engine.cylinder1.Crank.r[2] - engine.cylinder1.Crank.r_shape[2],engine.cylinder1.Crank.r[3] - engine.cylinder1.Crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder1.Crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder1.Crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder1.Crank.width " Height of shape.";
//   parameter Real engine.cylinder1.Crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder1.Crank.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Crank.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder1.Crank.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder1.Crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder1.cylinder_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.cylinder_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.cylinder_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.cylinder_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.cylinder_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.cylinder_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.cylinder_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.cylinder_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.cylinder_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.cylinder_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.cylinder_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.cylinder_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.cylinder_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.cylinder_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.cylinder_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.cylinder_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.cylinder_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.cylinder_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.cylinder_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.cylinder_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.cylinder_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.cylinder_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.cylinder_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.cylinder_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.cylinder_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.crank_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.crank_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.crank_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.crank_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.crank_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.crank_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.crank_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.crank_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.crank_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.crank_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.crank_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.crank_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.crank_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.crank_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.crank_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.crank_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.crank_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.crank_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.crank_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.crank_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.crank_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.crank_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.crank_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.crank_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.crank_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankShape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankShape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankShape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankShape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder1.CrankShape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankShape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankShape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder1.CrankShape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankShape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder1.CrankShape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder1.CrankShape.animation = engine.cylinder1.animation "= true, if animation shall be enabled";
//   parameter String engine.cylinder1.CrankShape.shapeType = "1" "Type of shape";
//   input Real engine.cylinder1.CrankShape.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder1.crankLength - engine.cylinder1.crankPinLength / 2.0 - 0.002 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder1.CrankShape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = engine.cylinder1.crankPinOffset / 0.5 "Length of shape";
//   input Real engine.cylinder1.CrankShape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder1.crankPinOffset / 0.5 "Width of shape";
//   input Real engine.cylinder1.CrankShape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder1.crankPinOffset / 0.5 "Height of shape";
//   input Integer engine.cylinder1.CrankShape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer engine.cylinder1.CrankShape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer engine.cylinder1.CrankShape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real engine.cylinder1.CrankShape.extra = 1.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real engine.cylinder1.CrankShape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String engine.cylinder1.CrankShape.vis.shapeType = engine.cylinder1.CrankShape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder1.CrankShape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.CrankShape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder1.CrankShape.vis.r[1](quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.CrankShape.vis.r[2](quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.CrankShape.vis.r[3](quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder1.CrankShape.vis.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.lengthDirection[1](unit = "1") = engine.cylinder1.CrankShape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.lengthDirection[2](unit = "1") = engine.cylinder1.CrankShape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.lengthDirection[3](unit = "1") = engine.cylinder1.CrankShape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.widthDirection[1](unit = "1") = engine.cylinder1.CrankShape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.widthDirection[2](unit = "1") = engine.cylinder1.CrankShape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.widthDirection[3](unit = "1") = engine.cylinder1.CrankShape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder1.CrankShape.vis.length(quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.length "Length of visual object";
//   input Real engine.cylinder1.CrankShape.vis.width(quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.width "Width of visual object";
//   input Real engine.cylinder1.CrankShape.vis.height(quantity = "Length", unit = "m") = engine.cylinder1.CrankShape.height "Height of visual object";
//   input Real engine.cylinder1.CrankShape.vis.extra = engine.cylinder1.CrankShape.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder1.CrankShape.vis.color[1] = Real(engine.cylinder1.CrankShape.color[1]) "Color of shape";
//   input Real engine.cylinder1.CrankShape.vis.color[2] = Real(engine.cylinder1.CrankShape.color[2]) "Color of shape";
//   input Real engine.cylinder1.CrankShape.vis.color[3] = Real(engine.cylinder1.CrankShape.color[3]) "Color of shape";
//   input Real engine.cylinder1.CrankShape.vis.specularCoefficient = engine.cylinder1.CrankShape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder1.CrankShape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder1.CrankShape.vis.lengthDirection[1],engine.cylinder1.CrankShape.vis.lengthDirection[2],engine.cylinder1.CrankShape.vis.lengthDirection[3]});
//   protected Real engine.cylinder1.CrankShape.vis.e_x[1](unit = "1") = if noEvent(engine.cylinder1.CrankShape.vis.abs_n_x < 1e-10) then 1.0 else engine.cylinder1.CrankShape.vis.lengthDirection[1] / engine.cylinder1.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder1.CrankShape.vis.e_x[2](unit = "1") = if noEvent(engine.cylinder1.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder1.CrankShape.vis.lengthDirection[2] / engine.cylinder1.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder1.CrankShape.vis.e_x[3](unit = "1") = if noEvent(engine.cylinder1.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder1.CrankShape.vis.lengthDirection[3] / engine.cylinder1.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder1.CrankShape.vis.n_z_aux[1](unit = "1") = engine.cylinder1.CrankShape.vis.e_x[2] * engine.cylinder1.CrankShape.vis.widthDirection[3] - engine.cylinder1.CrankShape.vis.e_x[3] * engine.cylinder1.CrankShape.vis.widthDirection[2];
//   protected Real engine.cylinder1.CrankShape.vis.n_z_aux[2](unit = "1") = engine.cylinder1.CrankShape.vis.e_x[3] * engine.cylinder1.CrankShape.vis.widthDirection[1] - engine.cylinder1.CrankShape.vis.e_x[1] * engine.cylinder1.CrankShape.vis.widthDirection[3];
//   protected Real engine.cylinder1.CrankShape.vis.n_z_aux[3](unit = "1") = engine.cylinder1.CrankShape.vis.e_x[1] * engine.cylinder1.CrankShape.vis.widthDirection[2] - engine.cylinder1.CrankShape.vis.e_x[2] * engine.cylinder1.CrankShape.vis.widthDirection[1];
//   protected Real engine.cylinder1.CrankShape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.CrankShape.vis.e_x[1],engine.cylinder1.CrankShape.vis.e_x[2],engine.cylinder1.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder1.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder1.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder1.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.CrankShape.vis.widthDirection[1],engine.cylinder1.CrankShape.vis.widthDirection[2],engine.cylinder1.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder1.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.CrankShape.vis.e_x[1],engine.cylinder1.CrankShape.vis.e_x[2],engine.cylinder1.CrankShape.vis.e_x[3]})[1];
//   protected Real engine.cylinder1.CrankShape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.CrankShape.vis.e_x[1],engine.cylinder1.CrankShape.vis.e_x[2],engine.cylinder1.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder1.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder1.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder1.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.CrankShape.vis.widthDirection[1],engine.cylinder1.CrankShape.vis.widthDirection[2],engine.cylinder1.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder1.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.CrankShape.vis.e_x[1],engine.cylinder1.CrankShape.vis.e_x[2],engine.cylinder1.CrankShape.vis.e_x[3]})[2];
//   protected Real engine.cylinder1.CrankShape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder1.CrankShape.vis.e_x[1],engine.cylinder1.CrankShape.vis.e_x[2],engine.cylinder1.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder1.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder1.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder1.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder1.CrankShape.vis.widthDirection[1],engine.cylinder1.CrankShape.vis.widthDirection[2],engine.cylinder1.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder1.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder1.CrankShape.vis.e_x[1],engine.cylinder1.CrankShape.vis.e_x[2],engine.cylinder1.CrankShape.vis.e_x[3]})[3];
//   protected output Real engine.cylinder1.CrankShape.vis.Form;
//   output Real engine.cylinder1.CrankShape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder1.CrankShape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder1.CrankShape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.CrankShape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.CrankShape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder1.CrankShape.vis.Material;
//   protected output Real engine.cylinder1.CrankShape.vis.Extra;
//   parameter Boolean engine.cylinder2.animation = engine.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.cylinderTopPosition(quantity = "Length", unit = "m") = 0.42 "Length from crank shaft to end of cylinder.";
//   parameter Real engine.cylinder2.crankLength(quantity = "Length", unit = "m") = 0.14 "Length of crank shaft in x direction";
//   parameter Real engine.cylinder2.crankPinOffset(quantity = "Length", unit = "m") = 0.05 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder2.crankPinLength(quantity = "Length", unit = "m") = 0.1 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder2.cylinderInclination(quantity = "Angle", unit = "deg") = 30.0 "Inclination of cylinder";
//   parameter Real engine.cylinder2.crankAngleOffset(quantity = "Angle", unit = "deg") = 90.0 "Offset for crank angle";
//   parameter Real engine.cylinder2.pistonLength(quantity = "Length", unit = "m") = 0.1 " Length of cylinder";
//   parameter Real engine.cylinder2.pistonCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder2.pistonLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder2.pistonMass(quantity = "Mass", unit = "kg", min = 0.0) = 6.0 " Mass of piston";
//   parameter Real engine.cylinder2.pistonInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 11 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder2.pistonInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0076 " Inertia 22 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder2.pistonInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 33 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder2.rodLength(quantity = "Length", unit = "m") = 0.175 " Length of rod";
//   parameter Real engine.cylinder2.rodCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder2.rodLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder2.rodMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 " Mass of rod";
//   parameter Real engine.cylinder2.rodInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 11 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder2.rodInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0005 " Inertia 22 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder2.rodInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 33 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder2.cylinderLength(quantity = "Length", unit = "m") = engine.cylinder2.cylinderTopPosition - (engine.cylinder2.pistonLength + engine.cylinder2.rodLength - engine.cylinder2.crankPinOffset) "Maximum length of cylinder volume";
//   Real engine.cylinder2.Mid.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mid.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mid.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mid.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mid.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mid.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mid.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mid.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mid.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mid.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mid.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mid.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mid.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Mid.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.Mid.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.crankLength - engine.cylinder2.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.crankPinOffset "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder2.Mid.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.Mid.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.lengthDirection[1](unit = "1") = engine.cylinder2.Mid.r[1] - engine.cylinder2.Mid.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.lengthDirection[2](unit = "1") = engine.cylinder2.Mid.r[2] - engine.cylinder2.Mid.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.lengthDirection[3](unit = "1") = engine.cylinder2.Mid.r[3] - engine.cylinder2.Mid.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mid.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.Mid.r[1] - engine.cylinder2.Mid.r_shape[1],engine.cylinder2.Mid.r[2] - engine.cylinder2.Mid.r_shape[2],engine.cylinder2.Mid.r[3] - engine.cylinder2.Mid.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.Mid.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Mid.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.Mid.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Mid.width " Height of shape.";
//   parameter Real engine.cylinder2.Mid.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Mid.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Mid.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Mid.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.Mid.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder2.Mounting.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mounting.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mounting.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mounting.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mounting.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mounting.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mounting.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mounting.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Mounting.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Mounting.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Mounting.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.Mounting.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder2.Mounting.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.Mounting.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.lengthDirection[1](unit = "1") = engine.cylinder2.Mounting.r[1] - engine.cylinder2.Mounting.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.lengthDirection[2](unit = "1") = engine.cylinder2.Mounting.r[2] - engine.cylinder2.Mounting.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.lengthDirection[3](unit = "1") = engine.cylinder2.Mounting.r[3] - engine.cylinder2.Mounting.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Mounting.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.Mounting.r[1] - engine.cylinder2.Mounting.r_shape[1],engine.cylinder2.Mounting.r[2] - engine.cylinder2.Mounting.r_shape[2],engine.cylinder2.Mounting.r[3] - engine.cylinder2.Mounting.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.Mounting.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Mounting.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.Mounting.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Mounting.width " Height of shape.";
//   parameter Real engine.cylinder2.Mounting.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Mounting.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Mounting.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Mounting.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.Mounting.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder2.CylinderInclination.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CylinderInclination.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.CylinderInclination.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.CylinderInclination.r[1](quantity = "Length", unit = "m") = engine.cylinder2.crankLength - engine.cylinder2.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder2.CylinderInclination.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder2.CylinderInclination.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.CylinderInclination.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.CylinderInclination.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.CylinderInclination.angle(quantity = "Angle", unit = "deg") = engine.cylinder2.cylinderInclination " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder2.CylinderInclination.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder2.CylinderInclination.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder2.CylinderInclination.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder2.CylinderInclination.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder2.CylinderInclination.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder2.CylinderInclination.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder2.CylinderInclination.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder2.CylinderInclination.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.CylinderInclination.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.lengthDirection[1](unit = "1") = engine.cylinder2.CylinderInclination.r[1] - engine.cylinder2.CylinderInclination.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.lengthDirection[2](unit = "1") = engine.cylinder2.CylinderInclination.r[2] - engine.cylinder2.CylinderInclination.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.lengthDirection[3](unit = "1") = engine.cylinder2.CylinderInclination.r[3] - engine.cylinder2.CylinderInclination.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CylinderInclination.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.CylinderInclination.r[1] - engine.cylinder2.CylinderInclination.r_shape[1],engine.cylinder2.CylinderInclination.r[2] - engine.cylinder2.CylinderInclination.r_shape[2],engine.cylinder2.CylinderInclination.r[3] - engine.cylinder2.CylinderInclination.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.CylinderInclination.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.CylinderInclination.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.CylinderInclination.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.CylinderInclination.width " Height of shape.";
//   parameter Real engine.cylinder2.CylinderInclination.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.CylinderInclination.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.CylinderInclination.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.CylinderInclination.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.CylinderInclination.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CylinderInclination.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankAngle.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankAngle.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankAngle.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankAngle.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankAngle.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankAngle.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.CrankAngle.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.CrankAngle.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder2.CrankAngle.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder2.CrankAngle.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.CrankAngle.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.CrankAngle.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.CrankAngle.angle(quantity = "Angle", unit = "deg") = engine.cylinder2.crankAngleOffset " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder2.CrankAngle.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder2.CrankAngle.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder2.CrankAngle.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder2.CrankAngle.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder2.CrankAngle.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder2.CrankAngle.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder2.CrankAngle.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder2.CrankAngle.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.CrankAngle.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.lengthDirection[1](unit = "1") = engine.cylinder2.CrankAngle.r[1] - engine.cylinder2.CrankAngle.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.lengthDirection[2](unit = "1") = engine.cylinder2.CrankAngle.r[2] - engine.cylinder2.CrankAngle.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.lengthDirection[3](unit = "1") = engine.cylinder2.CrankAngle.r[3] - engine.cylinder2.CrankAngle.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.CrankAngle.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.CrankAngle.r[1] - engine.cylinder2.CrankAngle.r_shape[1],engine.cylinder2.CrankAngle.r[2] - engine.cylinder2.CrankAngle.r_shape[2],engine.cylinder2.CrankAngle.r[3] - engine.cylinder2.CrankAngle.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.CrankAngle.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.CrankAngle.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.CrankAngle.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.CrankAngle.width " Height of shape.";
//   parameter Real engine.cylinder2.CrankAngle.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.CrankAngle.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.CrankAngle.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.CrankAngle.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.CrankAngle.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[2,2] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[2,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[3,2] = -1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.T[3,3] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[2,2] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[2,3] = -1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[3,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.T[3,3] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.CrankAngle.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.jointRRP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder2.jointRRP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.jointRRP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder2.jointRRP.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.jointRRP.n_a[1](unit = "1") = 1.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder2.jointRRP.n_a[2](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder2.jointRRP.n_a[3](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder2.jointRRP.n_b[1](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder2.jointRRP.n_b[2](unit = "1") = -1.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder2.jointRRP.n_b[3](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder2.jointRRP.rRod1_ia[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder2.rodLength "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.rRod1_ia[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.rRod2_ib[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder2.jointRRP.rRod2_ib[2](quantity = "Length", unit = "m") = -engine.cylinder2.pistonLength "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder2.jointRRP.rRod2_ib[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder2.jointRRP.s_offset(quantity = "Length", unit = "m") = -engine.cylinder2.cylinderTopPosition "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder2.jointRRP.s_guess(quantity = "Length", unit = "m") = 0.0 "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder2.jointRRP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the revolute joints";
//   parameter Real engine.cylinder2.jointRRP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the revolute joints";
//   input Integer engine.cylinder2.jointRRP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder2.jointRRP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder2.jointRRP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   parameter Real engine.cylinder2.jointRRP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder2.jointRRP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.boxColor[1](min = 0, max = 255) = engine.cylinder2.jointRRP.cylinderColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.boxColor[2](min = 0, max = 255) = engine.cylinder2.jointRRP.cylinderColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.boxColor[3](min = 0, max = 255) = engine.cylinder2.jointRRP.cylinderColor[3] "Color of prismatic joint box";
//   parameter Real engine.cylinder2.jointRRP.rodDiameter(quantity = "Length", unit = "m", min = 0.0) = 1.1 * engine.cylinder2.jointRRP.cylinderDiameter "Diameter of the two rods connecting the joints";
//   input Integer engine.cylinder2.jointRRP.rodColor[1](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder2.jointRRP.rodColor[2](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder2.jointRRP.rodColor[3](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Real engine.cylinder2.jointRRP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.jointRRP.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder2.jointRRP.e_a[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.n_a[1],engine.cylinder2.jointRRP.n_a[2],engine.cylinder2.jointRRP.n_a[3]},1e-13)[1] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.e_a[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.n_a[1],engine.cylinder2.jointRRP.n_a[2],engine.cylinder2.jointRRP.n_a[3]},1e-13)[2] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.e_a[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.n_a[1],engine.cylinder2.jointRRP.n_a[2],engine.cylinder2.jointRRP.n_a[3]},1e-13)[3] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.e_ia[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.e2_ia[1] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.e_ia[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.e2_ia[2] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.e_ia[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.e2_ia[3] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.e_im[1](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder2.jointRRP.e_im[2](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder2.jointRRP.e_im[3](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder2.jointRRP.e_b[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.prismatic.e[1] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder2.jointRRP.e_b[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.prismatic.e[2] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder2.jointRRP.e_b[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.prismatic.e[3] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   Real engine.cylinder2.jointRRP.totalPower(quantity = "Power", unit = "W") = engine.cylinder2.jointRRP.jointUSP.totalPower "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.jointRRP.jointUSP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder2.jointRRP.jointUSP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.jointRRP.jointUSP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.animation = false "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.showUniversalAxes = false " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.n1_a[1](unit = "1") = engine.cylinder2.jointRRP.n_a[1] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.n1_a[2](unit = "1") = engine.cylinder2.jointRRP.n_a[2] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.n1_a[3](unit = "1") = engine.cylinder2.jointRRP.n_a[3] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.n_b[1](unit = "1") = engine.cylinder2.jointRRP.n_b[1] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.n_b[2](unit = "1") = engine.cylinder2.jointRRP.n_b[2] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.n_b[3](unit = "1") = engine.cylinder2.jointRRP.n_b[3] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rRod1_ia[1](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.rRod1_ia[1] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.rRod1_ia[2] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rRod1_ia[3](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.rRod1_ia[3] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rRod2_ib[1](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.rRod2_ib[1] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rRod2_ib[2](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.rRod2_ib[2] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rRod2_ib[3](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.rRod2_ib[3] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.s_offset(quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.s_offset "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.s_guess(quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.sphereColor[1](min = 0, max = 255) = 255 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.sphereColor[2](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.sphereColor[3](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.sphereDiameter / 2.0 "Diameter of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1Color[1](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1Color[2](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1Color[3](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.rod1Diameter "Diameter of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod2Color[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod1Color[1] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod2Color[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod1Color[2] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod2Color[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod1Color[3] "Color of rod 2 connecting the prismatic and the spherical joint";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.jointUSP.boxColor[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.sphereColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.jointUSP.boxColor[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.sphereColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.jointUSP.boxColor[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.sphereColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder2.jointRRP.jointUSP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder2.jointRRP.jointUSP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder2.jointRRP.jointUSP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder2.jointRRP.jointUSP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.checkTotalPower = engine.cylinder2.jointRRP.checkTotalPower "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.eRod1_ia[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.eRod1_ia[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.eRod1_ia[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.e2_ia[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.e2_ia[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.e2_ia[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1Length(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.rod1.rodLength "Length of rod 1 (= distance between universal and spherical joint";
//   Real engine.cylinder2.jointRRP.jointUSP.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   Real engine.cylinder2.jointRRP.jointUSP.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.prismatic.animation = engine.cylinder2.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.length(quantity = "Length", unit = "m", start = 1.0) = engine.cylinder2.jointRRP.jointUSP.rod1.rodLength "Fixed length of length constraint";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.n[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.n_b[1] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.n[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.n_b[2] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.n[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.n_b[3] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.s_offset(quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.s_offset "Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.s_guess(quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.boxWidthDirection[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.boxWidthDirection[1] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.boxWidthDirection[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.boxWidthDirection[2] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.boxWidthDirection[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.boxWidthDirection[3] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.boxWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.boxWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.boxHeight "Height of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.jointUSP.prismatic.boxColor[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.boxColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.jointUSP.prismatic.boxColor[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.boxColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder2.jointRRP.jointUSP.prismatic.boxColor[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.boxColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder2.jointRRP.jointUSP.prismatic.specularCoefficient = engine.cylinder2.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.prismatic.positiveBranch(fixed = false) "Selection of one of the two solutions of the non-linear constraint equation";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.prismatic.n[1],engine.cylinder2.jointRRP.jointUSP.prismatic.n[2],engine.cylinder2.jointRRP.jointUSP.prismatic.n[3]},1e-13)[1] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.prismatic.n[1],engine.cylinder2.jointRRP.jointUSP.prismatic.n[2],engine.cylinder2.jointRRP.jointUSP.prismatic.n[3]},1e-13)[2] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.prismatic.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.prismatic.n[1],engine.cylinder2.jointRRP.jointUSP.prismatic.n[2],engine.cylinder2.jointRRP.jointUSP.prismatic.n[3]},1e-13)[3] "Unit vector in direction of translation axis, resolved in frame_a";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.s(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n = s + s_offset)";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.distance(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder2.jointRRP.jointUSP.prismatic.f(quantity = "Force", unit = "N") "= axis.f (driving force in the axis)";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[1](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[2](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[3](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[1](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[2](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[3](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[1](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[2](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[3](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.B "Coefficient B of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.C "Coefficient C of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.k1 "Constant of quadratic equation solution";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.k2 "Constant of quadratic equation solution";
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.k1a(start = 1.0);
//   protected Real engine.cylinder2.jointRRP.jointUSP.prismatic.k1b;
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.rod1.animation = engine.cylinder2.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.rod1.showUniversalAxes = engine.cylinder2.jointRRP.jointUSP.showUniversalAxes " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.rod1.computeRodLength = false "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.n1_a[1] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.n1_a[2] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.n1_a[3] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.rRod1_ia[1] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.rRod1_ia[2] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3](quantity = "Length", unit = "m") = engine.cylinder2.jointRRP.jointUSP.rRod1_ia[3] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.sphereDiameter "Diameter of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.sphereColor[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.sphereColor[1] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.sphereColor[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.sphereColor[2] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.sphereColor[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.sphereColor[3] "Color of spheres representing the universal and the spherical joint";
//   parameter String engine.cylinder2.jointRRP.jointUSP.rod1.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rodWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.rod1Diameter "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rodHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.rod1Diameter "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.rodColor[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod1Color[1] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.rodColor[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod1Color[2] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.rodColor[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod1Color[3] "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.cylinderLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.cylinderDiameter "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.cylinderColor[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.cylinderColor[1] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.cylinderColor[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.cylinderColor[2] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod1.cylinderColor[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.cylinderColor[3] "Color of cylinders representing the two universal joint axes";
//   input Real engine.cylinder2.jointRRP.jointUSP.rod1.specularCoefficient = engine.cylinder2.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.rod1.kinematicConstraint = false "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.constraintResidue = engine.cylinder2.jointRRP.jointUSP.rod1.f_rod - engine.cylinder2.jointRRP.jointUSP.f_rod "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.rod1.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT engine.cylinder2.jointRRP.jointUSP.rod1.computeRodLength) = Modelica.Math.Vectors.length({engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.e3_ia[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[3] - engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.e3_ia[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[1] - engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod1.e3_ia[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[2] - engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[1](quantity = "Length", unit = "m", start = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[2](quantity = "Length", unit = "m", start = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[3](quantity = "Length", unit = "m", start = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[1](quantity = "Length", unit = "m", start = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[2](quantity = "Length", unit = "m", start = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[3](quantity = "Length", unit = "m", start = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.jointRRP.jointUSP.rod2.animation = engine.cylinder2.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.jointRRP.jointUSP.rRod2_ib[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.jointRRP.jointUSP.rRod2_ib[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.jointRRP.jointUSP.rRod2_ib[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder2.jointRRP.jointUSP.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.lengthDirection[1](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod2.r[1] - engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.lengthDirection[2](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod2.r[2] - engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.lengthDirection[3](unit = "1") = engine.cylinder2.jointRRP.jointUSP.rod2.r[3] - engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.jointRRP.jointUSP.rod2.r[1] - engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[1],engine.cylinder2.jointRRP.jointUSP.rod2.r[2] - engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[2],engine.cylinder2.jointRRP.jointUSP.rod2.r[3] - engine.cylinder2.jointRRP.jointUSP.rod2.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.rod2Diameter " Width of shape";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.jointRRP.jointUSP.rod2Diameter " Height of shape.";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod2.color[1](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod2Color[1] " Color of shape";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod2.color[2](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod2Color[2] " Color of shape";
//   input Integer engine.cylinder2.jointRRP.jointUSP.rod2.color[3](min = 0, max = 255) = engine.cylinder2.jointRRP.jointUSP.rod2Color[3] " Color of shape";
//   input Real engine.cylinder2.jointRRP.jointUSP.rod2.specularCoefficient = engine.cylinder2.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder2.jointRRP.jointUSP.relativePosition.r_rel[1] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder2.jointRRP.jointUSP.relativePosition.r_rel[2] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder2.jointRRP.jointUSP.relativePosition.r_rel[3] "Relative position vector resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder2.jointRRP.jointUSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a "Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.resolveInFrame = engine.cylinder2.jointRRP.jointUSP.relativePosition.resolveInFrame "Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder2.jointRRP.jointUSP.position_b[1].y "Connector of Real output signal";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.position_b[1].k(start = 1.0) = engine.cylinder2.jointRRP.jointUSP.rRod2_ib[1] "Constant output value";
//   output Real engine.cylinder2.jointRRP.jointUSP.position_b[2].y "Connector of Real output signal";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.position_b[2].k(start = 1.0) = engine.cylinder2.jointRRP.jointUSP.rRod2_ib[2] "Constant output value";
//   output Real engine.cylinder2.jointRRP.jointUSP.position_b[3].y "Connector of Real output signal";
//   parameter Real engine.cylinder2.jointRRP.jointUSP.position_b[3].k(start = 1.0) = engine.cylinder2.jointRRP.jointUSP.rRod2_ib[3] "Constant output value";
//   protected Real engine.cylinder2.jointRRP.jointUSP.aux "Denominator used to compute force in rod connecting universal and spherical joint";
//   Real engine.cylinder2.Rod.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Rod.animation = engine.cylinder2.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder2.Rod.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder2.Rod.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.rodLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.rodLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder2.rodMass "Mass of rigid body";
//   parameter Real engine.cylinder2.Rod.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.rodInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.rodInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.rodInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder2.Rod.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Rod.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Rod.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Rod.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Rod.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Rod.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Rod.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Rod.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Rod.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder2.Rod.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Rod.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Rod.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Rod.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder2.Rod.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Rod.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Rod.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder2.Rod.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Rod.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Rod.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Rod.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder2.Rod.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Rod.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Rod.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Rod.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder2.Rod.shapeType = "2" " Type of shape";
//   parameter Real engine.cylinder2.Rod.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.length(quantity = "Length", unit = "m") = engine.cylinder2.rodLength / 1.75 " Length of shape";
//   parameter Real engine.cylinder2.Rod.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.rodLength / 1.75 " Width of shape";
//   parameter Real engine.cylinder2.Rod.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.rodLength / 1.75 " Height of shape.";
//   parameter Real engine.cylinder2.Rod.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Rod.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Rod.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Rod.color[3](min = 0, max = 255) = 155 " Color of shape";
//   parameter Real engine.cylinder2.Rod.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder2.Rod.width " Diameter of sphere";
//   input Integer engine.cylinder2.Rod.sphereColor[1](min = 0, max = 255) = engine.cylinder2.Rod.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder2.Rod.sphereColor[2](min = 0, max = 255) = engine.cylinder2.Rod.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder2.Rod.sphereColor[3](min = 0, max = 255) = engine.cylinder2.Rod.color[3] " Color of sphere of mass";
//   input Real engine.cylinder2.Rod.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.Rod.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder2.Rod.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder2.Rod.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Rod.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Rod.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Rod.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.Rod.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Rod.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Rod.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Rod.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder2.Rod.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.Rod.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder2.Rod.frameTranslation.r[1] - engine.cylinder2.Rod.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder2.Rod.frameTranslation.r[2] - engine.cylinder2.Rod.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder2.Rod.frameTranslation.r[3] - engine.cylinder2.Rod.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.Rod.frameTranslation.r[1] - engine.cylinder2.Rod.frameTranslation.r_shape[1],engine.cylinder2.Rod.frameTranslation.r[2] - engine.cylinder2.Rod.frameTranslation.r_shape[2],engine.cylinder2.Rod.frameTranslation.r[3] - engine.cylinder2.Rod.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.Rod.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Rod.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.Rod.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Rod.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder2.Rod.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Rod.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Rod.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Rod.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.Rod.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder2.Rod.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Rod.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Rod.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Rod.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Rod.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder2.Rod.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Rod.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Rod.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Rod.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder2.Rod.m "Mass of rigid body";
//   parameter Real engine.cylinder2.Rod.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.Rod.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.Rod.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.Rod.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder2.Rod.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder2.Rod.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder2.Rod.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder2.Rod.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Rod.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Rod.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Rod.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Rod.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Rod.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Rod.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Rod.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Rod.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder2.Rod.body.angles_fixed = engine.cylinder2.Rod.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Rod.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder2.Rod.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Rod.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder2.Rod.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Rod.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder2.Rod.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder2.Rod.body.sequence_start[1](min = 1, max = 3) = engine.cylinder2.Rod.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Rod.body.sequence_start[2](min = 1, max = 3) = engine.cylinder2.Rod.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Rod.body.sequence_start[3](min = 1, max = 3) = engine.cylinder2.Rod.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder2.Rod.body.w_0_fixed = engine.cylinder2.Rod.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Rod.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder2.Rod.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Rod.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder2.Rod.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Rod.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder2.Rod.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder2.Rod.body.z_0_fixed = engine.cylinder2.Rod.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Rod.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder2.Rod.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Rod.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder2.Rod.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Rod.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder2.Rod.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Rod.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder2.Rod.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder2.Rod.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder2.Rod.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder2.Rod.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Rod.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder2.Rod.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder2.Rod.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder2.Rod.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder2.Rod.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder2.Rod.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder2.Rod.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder2.Rod.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.Rod.body.enforceStates = engine.cylinder2.Rod.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder2.Rod.body.useQuaternions = engine.cylinder2.Rod.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder2.Rod.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder2.Rod.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Rod.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder2.Rod.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Rod.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder2.Rod.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder2.Rod.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Rod.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.Rod.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.Rod.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.z_0_start[1],engine.cylinder2.Rod.body.z_0_start[2],engine.cylinder2.Rod.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.z_0_start[1],engine.cylinder2.Rod.body.z_0_start[2],engine.cylinder2.Rod.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder2.Rod.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.z_0_start[1],engine.cylinder2.Rod.body.z_0_start[2],engine.cylinder2.Rod.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder2.Rod.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.w_0_start[1],engine.cylinder2.Rod.body.w_0_start[2],engine.cylinder2.Rod.body.w_0_start[3]})[1], fixed = engine.cylinder2.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder2.Rod.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.w_0_start[1],engine.cylinder2.Rod.body.w_0_start[2],engine.cylinder2.Rod.body.w_0_start[3]})[2], fixed = engine.cylinder2.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder2.Rod.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.w_0_start[1],engine.cylinder2.Rod.body.w_0_start[2],engine.cylinder2.Rod.body.w_0_start[3]})[3], fixed = engine.cylinder2.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder2.Rod.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.z_0_start[1],engine.cylinder2.Rod.body.z_0_start[2],engine.cylinder2.Rod.body.z_0_start[3]})[1], fixed = engine.cylinder2.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder2.Rod.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.z_0_start[1],engine.cylinder2.Rod.body.z_0_start[2],engine.cylinder2.Rod.body.z_0_start[3]})[2], fixed = engine.cylinder2.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder2.Rod.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.z_0_start[1],engine.cylinder2.Rod.body.z_0_start[2],engine.cylinder2.Rod.body.z_0_start[3]})[3], fixed = engine.cylinder2.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder2.Rod.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder2.Rod.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder2.Rod.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder2.Rod.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder2.Rod.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder2.Rod.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder2.Rod.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder2.Rod.body.Q[1](start = engine.cylinder2.Rod.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder2.Rod.body.Q[2](start = engine.cylinder2.Rod.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder2.Rod.body.Q[3](start = engine.cylinder2.Rod.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder2.Rod.body.Q[4](start = engine.cylinder2.Rod.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder2.Rod.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder2.Rod.body.sequence_start[1] == engine.cylinder2.Rod.body.sequence_angleStates[1] AND engine.cylinder2.Rod.body.sequence_start[2] == engine.cylinder2.Rod.body.sequence_angleStates[2] AND engine.cylinder2.Rod.body.sequence_start[3] == engine.cylinder2.Rod.body.sequence_angleStates[3] then engine.cylinder2.Rod.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.sequence_angleStates[1],engine.cylinder2.Rod.body.sequence_angleStates[2],engine.cylinder2.Rod.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder2.Rod.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder2.Rod.body.sequence_start[1] == engine.cylinder2.Rod.body.sequence_angleStates[1] AND engine.cylinder2.Rod.body.sequence_start[2] == engine.cylinder2.Rod.body.sequence_angleStates[2] AND engine.cylinder2.Rod.body.sequence_start[3] == engine.cylinder2.Rod.body.sequence_angleStates[3] then engine.cylinder2.Rod.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.sequence_angleStates[1],engine.cylinder2.Rod.body.sequence_angleStates[2],engine.cylinder2.Rod.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder2.Rod.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder2.Rod.body.sequence_start[1] == engine.cylinder2.Rod.body.sequence_angleStates[1] AND engine.cylinder2.Rod.body.sequence_start[2] == engine.cylinder2.Rod.body.sequence_angleStates[2] AND engine.cylinder2.Rod.body.sequence_start[3] == engine.cylinder2.Rod.body.sequence_angleStates[3] then engine.cylinder2.Rod.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder2.Rod.body.R_start,{engine.cylinder2.Rod.body.sequence_angleStates[1],engine.cylinder2.Rod.body.sequence_angleStates[2],engine.cylinder2.Rod.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder2.Rod.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder2.Rod.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder2.Rod.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder2.Rod.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder2.Rod.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder2.Rod.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder2.Rod.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder2.Rod.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder2.Rod.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder2.Rod.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder2.Rod.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder2.Rod.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder2.Rod.shape1.shapeType = engine.cylinder2.Rod.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder2.Rod.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Rod.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.Rod.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.Rod.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.Rod.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder2.Rod.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.Rod.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder2.Rod.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.Rod.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder2.Rod.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.Rod.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder2.Rod.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder2.Rod.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder2.Rod.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.lengthDirection[1](unit = "1") = engine.cylinder2.Rod.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.lengthDirection[2](unit = "1") = engine.cylinder2.Rod.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.lengthDirection[3](unit = "1") = engine.cylinder2.Rod.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.widthDirection[1](unit = "1") = engine.cylinder2.Rod.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.widthDirection[2](unit = "1") = engine.cylinder2.Rod.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.widthDirection[3](unit = "1") = engine.cylinder2.Rod.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.Rod.shape1.length(quantity = "Length", unit = "m") = engine.cylinder2.Rod.length "Length of visual object";
//   input Real engine.cylinder2.Rod.shape1.width(quantity = "Length", unit = "m") = engine.cylinder2.Rod.width "Width of visual object";
//   input Real engine.cylinder2.Rod.shape1.height(quantity = "Length", unit = "m") = engine.cylinder2.Rod.height "Height of visual object";
//   input Real engine.cylinder2.Rod.shape1.extra = engine.cylinder2.Rod.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder2.Rod.shape1.color[1] = Real(engine.cylinder2.Rod.color[1]) "Color of shape";
//   input Real engine.cylinder2.Rod.shape1.color[2] = Real(engine.cylinder2.Rod.color[2]) "Color of shape";
//   input Real engine.cylinder2.Rod.shape1.color[3] = Real(engine.cylinder2.Rod.color[3]) "Color of shape";
//   input Real engine.cylinder2.Rod.shape1.specularCoefficient = engine.cylinder2.Rod.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder2.Rod.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder2.Rod.shape1.lengthDirection[1],engine.cylinder2.Rod.shape1.lengthDirection[2],engine.cylinder2.Rod.shape1.lengthDirection[3]});
//   protected Real engine.cylinder2.Rod.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder2.Rod.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder2.Rod.shape1.lengthDirection[1] / engine.cylinder2.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder2.Rod.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder2.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder2.Rod.shape1.lengthDirection[2] / engine.cylinder2.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder2.Rod.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder2.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder2.Rod.shape1.lengthDirection[3] / engine.cylinder2.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder2.Rod.shape1.n_z_aux[1](unit = "1") = engine.cylinder2.Rod.shape1.e_x[2] * engine.cylinder2.Rod.shape1.widthDirection[3] - engine.cylinder2.Rod.shape1.e_x[3] * engine.cylinder2.Rod.shape1.widthDirection[2];
//   protected Real engine.cylinder2.Rod.shape1.n_z_aux[2](unit = "1") = engine.cylinder2.Rod.shape1.e_x[3] * engine.cylinder2.Rod.shape1.widthDirection[1] - engine.cylinder2.Rod.shape1.e_x[1] * engine.cylinder2.Rod.shape1.widthDirection[3];
//   protected Real engine.cylinder2.Rod.shape1.n_z_aux[3](unit = "1") = engine.cylinder2.Rod.shape1.e_x[1] * engine.cylinder2.Rod.shape1.widthDirection[2] - engine.cylinder2.Rod.shape1.e_x[2] * engine.cylinder2.Rod.shape1.widthDirection[1];
//   protected Real engine.cylinder2.Rod.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.Rod.shape1.e_x[1],engine.cylinder2.Rod.shape1.e_x[2],engine.cylinder2.Rod.shape1.e_x[3]},if noEvent(engine.cylinder2.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder2.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder2.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.Rod.shape1.widthDirection[1],engine.cylinder2.Rod.shape1.widthDirection[2],engine.cylinder2.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder2.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.Rod.shape1.e_x[1],engine.cylinder2.Rod.shape1.e_x[2],engine.cylinder2.Rod.shape1.e_x[3]})[1];
//   protected Real engine.cylinder2.Rod.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.Rod.shape1.e_x[1],engine.cylinder2.Rod.shape1.e_x[2],engine.cylinder2.Rod.shape1.e_x[3]},if noEvent(engine.cylinder2.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder2.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder2.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.Rod.shape1.widthDirection[1],engine.cylinder2.Rod.shape1.widthDirection[2],engine.cylinder2.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder2.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.Rod.shape1.e_x[1],engine.cylinder2.Rod.shape1.e_x[2],engine.cylinder2.Rod.shape1.e_x[3]})[2];
//   protected Real engine.cylinder2.Rod.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.Rod.shape1.e_x[1],engine.cylinder2.Rod.shape1.e_x[2],engine.cylinder2.Rod.shape1.e_x[3]},if noEvent(engine.cylinder2.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder2.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder2.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.Rod.shape1.widthDirection[1],engine.cylinder2.Rod.shape1.widthDirection[2],engine.cylinder2.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder2.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.Rod.shape1.e_x[1],engine.cylinder2.Rod.shape1.e_x[2],engine.cylinder2.Rod.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder2.Rod.shape1.Form;
//   output Real engine.cylinder2.Rod.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder2.Rod.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder2.Rod.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.Rod.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.Rod.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.Rod.shape1.Material;
//   protected output Real engine.cylinder2.Rod.shape1.Extra;
//   Real engine.cylinder2.Piston.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Piston.animation = engine.cylinder2.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder2.Piston.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder2.Piston.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.pistonLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.pistonLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder2.pistonMass "Mass of rigid body";
//   parameter Real engine.cylinder2.Piston.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.pistonInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.pistonInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.pistonInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder2.Piston.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Piston.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Piston.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Piston.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Piston.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Piston.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Piston.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Piston.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Piston.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder2.Piston.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Piston.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Piston.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Piston.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder2.Piston.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Piston.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Piston.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder2.Piston.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Piston.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Piston.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Piston.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder2.Piston.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Piston.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Piston.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Piston.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder2.Piston.shapeType = "3" " Type of shape";
//   parameter Real engine.cylinder2.Piston.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.length(quantity = "Length", unit = "m") = 0.08 " Length of shape";
//   parameter Real engine.cylinder2.Piston.width(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Width of shape";
//   parameter Real engine.cylinder2.Piston.height(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Height of shape.";
//   parameter Real engine.cylinder2.Piston.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Piston.color[1](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder2.Piston.color[2](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder2.Piston.color[3](min = 0, max = 255) = 180 " Color of shape";
//   parameter Real engine.cylinder2.Piston.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder2.Piston.width " Diameter of sphere";
//   input Integer engine.cylinder2.Piston.sphereColor[1](min = 0, max = 255) = engine.cylinder2.Piston.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder2.Piston.sphereColor[2](min = 0, max = 255) = engine.cylinder2.Piston.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder2.Piston.sphereColor[3](min = 0, max = 255) = engine.cylinder2.Piston.color[3] " Color of sphere of mass";
//   input Real engine.cylinder2.Piston.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.Piston.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder2.Piston.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder2.Piston.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Piston.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Piston.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Piston.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.Piston.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Piston.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Piston.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Piston.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder2.Piston.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.Piston.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder2.Piston.frameTranslation.r[1] - engine.cylinder2.Piston.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder2.Piston.frameTranslation.r[2] - engine.cylinder2.Piston.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder2.Piston.frameTranslation.r[3] - engine.cylinder2.Piston.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.Piston.frameTranslation.r[1] - engine.cylinder2.Piston.frameTranslation.r_shape[1],engine.cylinder2.Piston.frameTranslation.r[2] - engine.cylinder2.Piston.frameTranslation.r_shape[2],engine.cylinder2.Piston.frameTranslation.r[3] - engine.cylinder2.Piston.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.Piston.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Piston.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.Piston.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Piston.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder2.Piston.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Piston.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Piston.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Piston.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.Piston.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder2.Piston.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Piston.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Piston.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder2.Piston.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Piston.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Piston.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.Piston.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder2.Piston.m "Mass of rigid body";
//   parameter Real engine.cylinder2.Piston.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.Piston.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.Piston.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder2.Piston.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder2.Piston.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder2.Piston.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder2.Piston.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder2.Piston.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Piston.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Piston.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder2.Piston.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Piston.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Piston.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder2.Piston.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Piston.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder2.Piston.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder2.Piston.body.angles_fixed = engine.cylinder2.Piston.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Piston.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder2.Piston.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Piston.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder2.Piston.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder2.Piston.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder2.Piston.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder2.Piston.body.sequence_start[1](min = 1, max = 3) = engine.cylinder2.Piston.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Piston.body.sequence_start[2](min = 1, max = 3) = engine.cylinder2.Piston.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder2.Piston.body.sequence_start[3](min = 1, max = 3) = engine.cylinder2.Piston.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder2.Piston.body.w_0_fixed = engine.cylinder2.Piston.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Piston.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder2.Piston.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Piston.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder2.Piston.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder2.Piston.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder2.Piston.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder2.Piston.body.z_0_fixed = engine.cylinder2.Piston.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder2.Piston.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder2.Piston.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Piston.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder2.Piston.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Piston.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder2.Piston.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder2.Piston.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder2.Piston.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder2.Piston.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder2.Piston.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder2.Piston.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Piston.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder2.Piston.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder2.Piston.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder2.Piston.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder2.Piston.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder2.Piston.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder2.Piston.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder2.Piston.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder2.Piston.body.enforceStates = engine.cylinder2.Piston.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder2.Piston.body.useQuaternions = engine.cylinder2.Piston.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder2.Piston.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder2.Piston.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Piston.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder2.Piston.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder2.Piston.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder2.Piston.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder2.Piston.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder2.Piston.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.Piston.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder2.Piston.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.z_0_start[1],engine.cylinder2.Piston.body.z_0_start[2],engine.cylinder2.Piston.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.z_0_start[1],engine.cylinder2.Piston.body.z_0_start[2],engine.cylinder2.Piston.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder2.Piston.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.z_0_start[1],engine.cylinder2.Piston.body.z_0_start[2],engine.cylinder2.Piston.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder2.Piston.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.w_0_start[1],engine.cylinder2.Piston.body.w_0_start[2],engine.cylinder2.Piston.body.w_0_start[3]})[1], fixed = engine.cylinder2.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder2.Piston.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.w_0_start[1],engine.cylinder2.Piston.body.w_0_start[2],engine.cylinder2.Piston.body.w_0_start[3]})[2], fixed = engine.cylinder2.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder2.Piston.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.w_0_start[1],engine.cylinder2.Piston.body.w_0_start[2],engine.cylinder2.Piston.body.w_0_start[3]})[3], fixed = engine.cylinder2.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder2.Piston.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.z_0_start[1],engine.cylinder2.Piston.body.z_0_start[2],engine.cylinder2.Piston.body.z_0_start[3]})[1], fixed = engine.cylinder2.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder2.Piston.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.z_0_start[1],engine.cylinder2.Piston.body.z_0_start[2],engine.cylinder2.Piston.body.z_0_start[3]})[2], fixed = engine.cylinder2.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder2.Piston.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.z_0_start[1],engine.cylinder2.Piston.body.z_0_start[2],engine.cylinder2.Piston.body.z_0_start[3]})[3], fixed = engine.cylinder2.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder2.Piston.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder2.Piston.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder2.Piston.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder2.Piston.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder2.Piston.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder2.Piston.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder2.Piston.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder2.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder2.Piston.body.Q[1](start = engine.cylinder2.Piston.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder2.Piston.body.Q[2](start = engine.cylinder2.Piston.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder2.Piston.body.Q[3](start = engine.cylinder2.Piston.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder2.Piston.body.Q[4](start = engine.cylinder2.Piston.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder2.Piston.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder2.Piston.body.sequence_start[1] == engine.cylinder2.Piston.body.sequence_angleStates[1] AND engine.cylinder2.Piston.body.sequence_start[2] == engine.cylinder2.Piston.body.sequence_angleStates[2] AND engine.cylinder2.Piston.body.sequence_start[3] == engine.cylinder2.Piston.body.sequence_angleStates[3] then engine.cylinder2.Piston.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.sequence_angleStates[1],engine.cylinder2.Piston.body.sequence_angleStates[2],engine.cylinder2.Piston.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder2.Piston.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder2.Piston.body.sequence_start[1] == engine.cylinder2.Piston.body.sequence_angleStates[1] AND engine.cylinder2.Piston.body.sequence_start[2] == engine.cylinder2.Piston.body.sequence_angleStates[2] AND engine.cylinder2.Piston.body.sequence_start[3] == engine.cylinder2.Piston.body.sequence_angleStates[3] then engine.cylinder2.Piston.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.sequence_angleStates[1],engine.cylinder2.Piston.body.sequence_angleStates[2],engine.cylinder2.Piston.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder2.Piston.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder2.Piston.body.sequence_start[1] == engine.cylinder2.Piston.body.sequence_angleStates[1] AND engine.cylinder2.Piston.body.sequence_start[2] == engine.cylinder2.Piston.body.sequence_angleStates[2] AND engine.cylinder2.Piston.body.sequence_start[3] == engine.cylinder2.Piston.body.sequence_angleStates[3] then engine.cylinder2.Piston.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder2.Piston.body.R_start,{engine.cylinder2.Piston.body.sequence_angleStates[1],engine.cylinder2.Piston.body.sequence_angleStates[2],engine.cylinder2.Piston.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder2.Piston.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder2.Piston.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder2.Piston.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder2.Piston.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder2.Piston.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder2.Piston.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder2.Piston.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder2.Piston.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder2.Piston.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder2.Piston.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder2.Piston.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder2.Piston.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder2.Piston.shape1.shapeType = engine.cylinder2.Piston.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder2.Piston.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.Piston.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.Piston.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.Piston.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.Piston.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder2.Piston.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.Piston.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder2.Piston.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.Piston.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder2.Piston.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.Piston.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder2.Piston.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder2.Piston.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder2.Piston.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.lengthDirection[1](unit = "1") = engine.cylinder2.Piston.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.lengthDirection[2](unit = "1") = engine.cylinder2.Piston.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.lengthDirection[3](unit = "1") = engine.cylinder2.Piston.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.widthDirection[1](unit = "1") = engine.cylinder2.Piston.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.widthDirection[2](unit = "1") = engine.cylinder2.Piston.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.widthDirection[3](unit = "1") = engine.cylinder2.Piston.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.Piston.shape1.length(quantity = "Length", unit = "m") = engine.cylinder2.Piston.length "Length of visual object";
//   input Real engine.cylinder2.Piston.shape1.width(quantity = "Length", unit = "m") = engine.cylinder2.Piston.width "Width of visual object";
//   input Real engine.cylinder2.Piston.shape1.height(quantity = "Length", unit = "m") = engine.cylinder2.Piston.height "Height of visual object";
//   input Real engine.cylinder2.Piston.shape1.extra = engine.cylinder2.Piston.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder2.Piston.shape1.color[1] = Real(engine.cylinder2.Piston.color[1]) "Color of shape";
//   input Real engine.cylinder2.Piston.shape1.color[2] = Real(engine.cylinder2.Piston.color[2]) "Color of shape";
//   input Real engine.cylinder2.Piston.shape1.color[3] = Real(engine.cylinder2.Piston.color[3]) "Color of shape";
//   input Real engine.cylinder2.Piston.shape1.specularCoefficient = engine.cylinder2.Piston.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder2.Piston.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder2.Piston.shape1.lengthDirection[1],engine.cylinder2.Piston.shape1.lengthDirection[2],engine.cylinder2.Piston.shape1.lengthDirection[3]});
//   protected Real engine.cylinder2.Piston.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder2.Piston.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder2.Piston.shape1.lengthDirection[1] / engine.cylinder2.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder2.Piston.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder2.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder2.Piston.shape1.lengthDirection[2] / engine.cylinder2.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder2.Piston.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder2.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder2.Piston.shape1.lengthDirection[3] / engine.cylinder2.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder2.Piston.shape1.n_z_aux[1](unit = "1") = engine.cylinder2.Piston.shape1.e_x[2] * engine.cylinder2.Piston.shape1.widthDirection[3] - engine.cylinder2.Piston.shape1.e_x[3] * engine.cylinder2.Piston.shape1.widthDirection[2];
//   protected Real engine.cylinder2.Piston.shape1.n_z_aux[2](unit = "1") = engine.cylinder2.Piston.shape1.e_x[3] * engine.cylinder2.Piston.shape1.widthDirection[1] - engine.cylinder2.Piston.shape1.e_x[1] * engine.cylinder2.Piston.shape1.widthDirection[3];
//   protected Real engine.cylinder2.Piston.shape1.n_z_aux[3](unit = "1") = engine.cylinder2.Piston.shape1.e_x[1] * engine.cylinder2.Piston.shape1.widthDirection[2] - engine.cylinder2.Piston.shape1.e_x[2] * engine.cylinder2.Piston.shape1.widthDirection[1];
//   protected Real engine.cylinder2.Piston.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.Piston.shape1.e_x[1],engine.cylinder2.Piston.shape1.e_x[2],engine.cylinder2.Piston.shape1.e_x[3]},if noEvent(engine.cylinder2.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder2.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder2.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.Piston.shape1.widthDirection[1],engine.cylinder2.Piston.shape1.widthDirection[2],engine.cylinder2.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder2.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.Piston.shape1.e_x[1],engine.cylinder2.Piston.shape1.e_x[2],engine.cylinder2.Piston.shape1.e_x[3]})[1];
//   protected Real engine.cylinder2.Piston.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.Piston.shape1.e_x[1],engine.cylinder2.Piston.shape1.e_x[2],engine.cylinder2.Piston.shape1.e_x[3]},if noEvent(engine.cylinder2.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder2.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder2.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.Piston.shape1.widthDirection[1],engine.cylinder2.Piston.shape1.widthDirection[2],engine.cylinder2.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder2.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.Piston.shape1.e_x[1],engine.cylinder2.Piston.shape1.e_x[2],engine.cylinder2.Piston.shape1.e_x[3]})[2];
//   protected Real engine.cylinder2.Piston.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.Piston.shape1.e_x[1],engine.cylinder2.Piston.shape1.e_x[2],engine.cylinder2.Piston.shape1.e_x[3]},if noEvent(engine.cylinder2.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder2.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder2.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.Piston.shape1.widthDirection[1],engine.cylinder2.Piston.shape1.widthDirection[2],engine.cylinder2.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder2.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.Piston.shape1.e_x[1],engine.cylinder2.Piston.shape1.e_x[2],engine.cylinder2.Piston.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder2.Piston.shape1.Form;
//   output Real engine.cylinder2.Piston.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder2.Piston.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder2.Piston.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.Piston.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.Piston.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.Piston.shape1.Material;
//   protected output Real engine.cylinder2.Piston.shape1.Extra;
//   Real engine.cylinder2.gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder2.gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder2.gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder2.gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real engine.cylinder2.gasForce.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
//   parameter Real engine.cylinder2.gasForce.L(quantity = "Length", unit = "m") = engine.cylinder2.cylinderLength "Length of cylinder";
//   parameter Real engine.cylinder2.gasForce.d(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of cylinder";
//   parameter Real engine.cylinder2.gasForce.k0(quantity = "Volume", unit = "m3") = 0.01 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder2.gasForce.k1(quantity = "Volume", unit = "m3") = 1.0 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder2.gasForce.k(quantity = "HeatCapacity", unit = "J/K") = 1.0 "Gas constant (p*V = k*T)";
//   constant Real engine.cylinder2.gasForce.pi = 3.14159265358979;
//   Real engine.cylinder2.gasForce.x "Normalized position of cylinder";
//   Real engine.cylinder2.gasForce.y "Normalized relative movement (= -s_rel/L)";
//   Real engine.cylinder2.gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real engine.cylinder2.gasForce.press(quantity = "Pressure", unit = "bar") "cylinder pressure";
//   Real engine.cylinder2.gasForce.V(quantity = "Volume", unit = "m3");
//   Real engine.cylinder2.gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real engine.cylinder2.gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   protected constant Real engine.cylinder2.gasForce.unitMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0;
//   protected Real engine.cylinder2.gasForce.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar");
//   Real engine.cylinder2.Crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.Crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.Crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.Crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.Crank.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder2.Crank.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder2.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder2.Crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder2.Crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.lengthDirection[1](unit = "1") = engine.cylinder2.Crank.r[1] - engine.cylinder2.Crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.lengthDirection[2](unit = "1") = engine.cylinder2.Crank.r[2] - engine.cylinder2.Crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.lengthDirection[3](unit = "1") = engine.cylinder2.Crank.r[3] - engine.cylinder2.Crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder2.Crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder2.Crank.r[1] - engine.cylinder2.Crank.r_shape[1],engine.cylinder2.Crank.r[2] - engine.cylinder2.Crank.r_shape[2],engine.cylinder2.Crank.r[3] - engine.cylinder2.Crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder2.Crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder2.Crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder2.Crank.width " Height of shape.";
//   parameter Real engine.cylinder2.Crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder2.Crank.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Crank.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder2.Crank.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder2.Crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder2.cylinder_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.cylinder_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.cylinder_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.cylinder_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.cylinder_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.cylinder_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.cylinder_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.cylinder_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.cylinder_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.cylinder_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.cylinder_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.cylinder_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.cylinder_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.cylinder_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.cylinder_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.cylinder_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.cylinder_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.cylinder_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.cylinder_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.cylinder_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.cylinder_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.cylinder_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.cylinder_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.cylinder_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.cylinder_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.crank_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.crank_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.crank_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.crank_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.crank_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.crank_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.crank_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.crank_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.crank_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.crank_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.crank_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.crank_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.crank_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.crank_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.crank_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.crank_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.crank_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.crank_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.crank_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.crank_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.crank_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.crank_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.crank_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.crank_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.crank_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankShape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankShape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankShape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankShape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder2.CrankShape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankShape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankShape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder2.CrankShape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankShape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder2.CrankShape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder2.CrankShape.animation = engine.cylinder2.animation "= true, if animation shall be enabled";
//   parameter String engine.cylinder2.CrankShape.shapeType = "1" "Type of shape";
//   input Real engine.cylinder2.CrankShape.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder2.crankLength - engine.cylinder2.crankPinLength / 2.0 - 0.002 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder2.CrankShape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = engine.cylinder2.crankPinOffset / 0.5 "Length of shape";
//   input Real engine.cylinder2.CrankShape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder2.crankPinOffset / 0.5 "Width of shape";
//   input Real engine.cylinder2.CrankShape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder2.crankPinOffset / 0.5 "Height of shape";
//   input Integer engine.cylinder2.CrankShape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer engine.cylinder2.CrankShape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer engine.cylinder2.CrankShape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real engine.cylinder2.CrankShape.extra = 1.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real engine.cylinder2.CrankShape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String engine.cylinder2.CrankShape.vis.shapeType = engine.cylinder2.CrankShape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder2.CrankShape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.CrankShape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder2.CrankShape.vis.r[1](quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.CrankShape.vis.r[2](quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.CrankShape.vis.r[3](quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder2.CrankShape.vis.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.lengthDirection[1](unit = "1") = engine.cylinder2.CrankShape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.lengthDirection[2](unit = "1") = engine.cylinder2.CrankShape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.lengthDirection[3](unit = "1") = engine.cylinder2.CrankShape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.widthDirection[1](unit = "1") = engine.cylinder2.CrankShape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.widthDirection[2](unit = "1") = engine.cylinder2.CrankShape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.widthDirection[3](unit = "1") = engine.cylinder2.CrankShape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder2.CrankShape.vis.length(quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.length "Length of visual object";
//   input Real engine.cylinder2.CrankShape.vis.width(quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.width "Width of visual object";
//   input Real engine.cylinder2.CrankShape.vis.height(quantity = "Length", unit = "m") = engine.cylinder2.CrankShape.height "Height of visual object";
//   input Real engine.cylinder2.CrankShape.vis.extra = engine.cylinder2.CrankShape.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder2.CrankShape.vis.color[1] = Real(engine.cylinder2.CrankShape.color[1]) "Color of shape";
//   input Real engine.cylinder2.CrankShape.vis.color[2] = Real(engine.cylinder2.CrankShape.color[2]) "Color of shape";
//   input Real engine.cylinder2.CrankShape.vis.color[3] = Real(engine.cylinder2.CrankShape.color[3]) "Color of shape";
//   input Real engine.cylinder2.CrankShape.vis.specularCoefficient = engine.cylinder2.CrankShape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder2.CrankShape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder2.CrankShape.vis.lengthDirection[1],engine.cylinder2.CrankShape.vis.lengthDirection[2],engine.cylinder2.CrankShape.vis.lengthDirection[3]});
//   protected Real engine.cylinder2.CrankShape.vis.e_x[1](unit = "1") = if noEvent(engine.cylinder2.CrankShape.vis.abs_n_x < 1e-10) then 1.0 else engine.cylinder2.CrankShape.vis.lengthDirection[1] / engine.cylinder2.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder2.CrankShape.vis.e_x[2](unit = "1") = if noEvent(engine.cylinder2.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder2.CrankShape.vis.lengthDirection[2] / engine.cylinder2.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder2.CrankShape.vis.e_x[3](unit = "1") = if noEvent(engine.cylinder2.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder2.CrankShape.vis.lengthDirection[3] / engine.cylinder2.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder2.CrankShape.vis.n_z_aux[1](unit = "1") = engine.cylinder2.CrankShape.vis.e_x[2] * engine.cylinder2.CrankShape.vis.widthDirection[3] - engine.cylinder2.CrankShape.vis.e_x[3] * engine.cylinder2.CrankShape.vis.widthDirection[2];
//   protected Real engine.cylinder2.CrankShape.vis.n_z_aux[2](unit = "1") = engine.cylinder2.CrankShape.vis.e_x[3] * engine.cylinder2.CrankShape.vis.widthDirection[1] - engine.cylinder2.CrankShape.vis.e_x[1] * engine.cylinder2.CrankShape.vis.widthDirection[3];
//   protected Real engine.cylinder2.CrankShape.vis.n_z_aux[3](unit = "1") = engine.cylinder2.CrankShape.vis.e_x[1] * engine.cylinder2.CrankShape.vis.widthDirection[2] - engine.cylinder2.CrankShape.vis.e_x[2] * engine.cylinder2.CrankShape.vis.widthDirection[1];
//   protected Real engine.cylinder2.CrankShape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.CrankShape.vis.e_x[1],engine.cylinder2.CrankShape.vis.e_x[2],engine.cylinder2.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder2.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder2.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder2.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.CrankShape.vis.widthDirection[1],engine.cylinder2.CrankShape.vis.widthDirection[2],engine.cylinder2.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder2.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.CrankShape.vis.e_x[1],engine.cylinder2.CrankShape.vis.e_x[2],engine.cylinder2.CrankShape.vis.e_x[3]})[1];
//   protected Real engine.cylinder2.CrankShape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.CrankShape.vis.e_x[1],engine.cylinder2.CrankShape.vis.e_x[2],engine.cylinder2.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder2.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder2.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder2.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.CrankShape.vis.widthDirection[1],engine.cylinder2.CrankShape.vis.widthDirection[2],engine.cylinder2.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder2.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.CrankShape.vis.e_x[1],engine.cylinder2.CrankShape.vis.e_x[2],engine.cylinder2.CrankShape.vis.e_x[3]})[2];
//   protected Real engine.cylinder2.CrankShape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder2.CrankShape.vis.e_x[1],engine.cylinder2.CrankShape.vis.e_x[2],engine.cylinder2.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder2.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder2.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder2.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder2.CrankShape.vis.widthDirection[1],engine.cylinder2.CrankShape.vis.widthDirection[2],engine.cylinder2.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder2.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder2.CrankShape.vis.e_x[1],engine.cylinder2.CrankShape.vis.e_x[2],engine.cylinder2.CrankShape.vis.e_x[3]})[3];
//   protected output Real engine.cylinder2.CrankShape.vis.Form;
//   output Real engine.cylinder2.CrankShape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder2.CrankShape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder2.CrankShape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.CrankShape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.CrankShape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder2.CrankShape.vis.Material;
//   protected output Real engine.cylinder2.CrankShape.vis.Extra;
//   parameter Boolean engine.cylinder3.animation = engine.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.cylinderTopPosition(quantity = "Length", unit = "m") = 0.42 "Length from crank shaft to end of cylinder.";
//   parameter Real engine.cylinder3.crankLength(quantity = "Length", unit = "m") = 0.14 "Length of crank shaft in x direction";
//   parameter Real engine.cylinder3.crankPinOffset(quantity = "Length", unit = "m") = 0.05 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder3.crankPinLength(quantity = "Length", unit = "m") = 0.1 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder3.cylinderInclination(quantity = "Angle", unit = "deg") = -30.0 "Inclination of cylinder";
//   parameter Real engine.cylinder3.crankAngleOffset(quantity = "Angle", unit = "deg") = 210.0 "Offset for crank angle";
//   parameter Real engine.cylinder3.pistonLength(quantity = "Length", unit = "m") = 0.1 " Length of cylinder";
//   parameter Real engine.cylinder3.pistonCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder3.pistonLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder3.pistonMass(quantity = "Mass", unit = "kg", min = 0.0) = 6.0 " Mass of piston";
//   parameter Real engine.cylinder3.pistonInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 11 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder3.pistonInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0076 " Inertia 22 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder3.pistonInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 33 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder3.rodLength(quantity = "Length", unit = "m") = 0.175 " Length of rod";
//   parameter Real engine.cylinder3.rodCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder3.rodLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder3.rodMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 " Mass of rod";
//   parameter Real engine.cylinder3.rodInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 11 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder3.rodInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0005 " Inertia 22 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder3.rodInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 33 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder3.cylinderLength(quantity = "Length", unit = "m") = engine.cylinder3.cylinderTopPosition - (engine.cylinder3.pistonLength + engine.cylinder3.rodLength - engine.cylinder3.crankPinOffset) "Maximum length of cylinder volume";
//   Real engine.cylinder3.Mid.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mid.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mid.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mid.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mid.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mid.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mid.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mid.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mid.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mid.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mid.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mid.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mid.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Mid.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.Mid.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.crankLength - engine.cylinder3.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.crankPinOffset "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder3.Mid.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.Mid.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.lengthDirection[1](unit = "1") = engine.cylinder3.Mid.r[1] - engine.cylinder3.Mid.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.lengthDirection[2](unit = "1") = engine.cylinder3.Mid.r[2] - engine.cylinder3.Mid.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.lengthDirection[3](unit = "1") = engine.cylinder3.Mid.r[3] - engine.cylinder3.Mid.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mid.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.Mid.r[1] - engine.cylinder3.Mid.r_shape[1],engine.cylinder3.Mid.r[2] - engine.cylinder3.Mid.r_shape[2],engine.cylinder3.Mid.r[3] - engine.cylinder3.Mid.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.Mid.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Mid.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.Mid.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Mid.width " Height of shape.";
//   parameter Real engine.cylinder3.Mid.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Mid.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Mid.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Mid.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.Mid.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder3.Mounting.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mounting.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mounting.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mounting.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mounting.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mounting.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mounting.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mounting.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Mounting.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Mounting.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Mounting.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.Mounting.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder3.Mounting.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.Mounting.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.lengthDirection[1](unit = "1") = engine.cylinder3.Mounting.r[1] - engine.cylinder3.Mounting.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.lengthDirection[2](unit = "1") = engine.cylinder3.Mounting.r[2] - engine.cylinder3.Mounting.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.lengthDirection[3](unit = "1") = engine.cylinder3.Mounting.r[3] - engine.cylinder3.Mounting.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Mounting.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.Mounting.r[1] - engine.cylinder3.Mounting.r_shape[1],engine.cylinder3.Mounting.r[2] - engine.cylinder3.Mounting.r_shape[2],engine.cylinder3.Mounting.r[3] - engine.cylinder3.Mounting.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.Mounting.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Mounting.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.Mounting.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Mounting.width " Height of shape.";
//   parameter Real engine.cylinder3.Mounting.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Mounting.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Mounting.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Mounting.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.Mounting.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder3.CylinderInclination.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CylinderInclination.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.CylinderInclination.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.CylinderInclination.r[1](quantity = "Length", unit = "m") = engine.cylinder3.crankLength - engine.cylinder3.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder3.CylinderInclination.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder3.CylinderInclination.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.CylinderInclination.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.CylinderInclination.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.CylinderInclination.angle(quantity = "Angle", unit = "deg") = engine.cylinder3.cylinderInclination " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder3.CylinderInclination.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder3.CylinderInclination.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder3.CylinderInclination.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder3.CylinderInclination.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder3.CylinderInclination.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder3.CylinderInclination.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder3.CylinderInclination.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder3.CylinderInclination.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.CylinderInclination.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.lengthDirection[1](unit = "1") = engine.cylinder3.CylinderInclination.r[1] - engine.cylinder3.CylinderInclination.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.lengthDirection[2](unit = "1") = engine.cylinder3.CylinderInclination.r[2] - engine.cylinder3.CylinderInclination.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.lengthDirection[3](unit = "1") = engine.cylinder3.CylinderInclination.r[3] - engine.cylinder3.CylinderInclination.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CylinderInclination.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.CylinderInclination.r[1] - engine.cylinder3.CylinderInclination.r_shape[1],engine.cylinder3.CylinderInclination.r[2] - engine.cylinder3.CylinderInclination.r_shape[2],engine.cylinder3.CylinderInclination.r[3] - engine.cylinder3.CylinderInclination.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.CylinderInclination.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.CylinderInclination.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.CylinderInclination.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.CylinderInclination.width " Height of shape.";
//   parameter Real engine.cylinder3.CylinderInclination.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.CylinderInclination.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.CylinderInclination.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.CylinderInclination.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.CylinderInclination.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CylinderInclination.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankAngle.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankAngle.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankAngle.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankAngle.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankAngle.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankAngle.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.CrankAngle.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.CrankAngle.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder3.CrankAngle.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder3.CrankAngle.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.CrankAngle.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.CrankAngle.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.CrankAngle.angle(quantity = "Angle", unit = "deg") = engine.cylinder3.crankAngleOffset " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder3.CrankAngle.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder3.CrankAngle.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder3.CrankAngle.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder3.CrankAngle.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder3.CrankAngle.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder3.CrankAngle.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder3.CrankAngle.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder3.CrankAngle.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.CrankAngle.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.lengthDirection[1](unit = "1") = engine.cylinder3.CrankAngle.r[1] - engine.cylinder3.CrankAngle.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.lengthDirection[2](unit = "1") = engine.cylinder3.CrankAngle.r[2] - engine.cylinder3.CrankAngle.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.lengthDirection[3](unit = "1") = engine.cylinder3.CrankAngle.r[3] - engine.cylinder3.CrankAngle.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.CrankAngle.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.CrankAngle.r[1] - engine.cylinder3.CrankAngle.r_shape[1],engine.cylinder3.CrankAngle.r[2] - engine.cylinder3.CrankAngle.r_shape[2],engine.cylinder3.CrankAngle.r[3] - engine.cylinder3.CrankAngle.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.CrankAngle.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.CrankAngle.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.CrankAngle.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.CrankAngle.width " Height of shape.";
//   parameter Real engine.cylinder3.CrankAngle.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.CrankAngle.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.CrankAngle.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.CrankAngle.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.CrankAngle.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[2,2] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.T[3,3] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[2,2] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.T[3,3] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.CrankAngle.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.jointRRP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder3.jointRRP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.jointRRP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder3.jointRRP.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.jointRRP.n_a[1](unit = "1") = 1.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder3.jointRRP.n_a[2](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder3.jointRRP.n_a[3](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder3.jointRRP.n_b[1](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder3.jointRRP.n_b[2](unit = "1") = -1.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder3.jointRRP.n_b[3](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder3.jointRRP.rRod1_ia[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder3.rodLength "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.rRod1_ia[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.rRod2_ib[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder3.jointRRP.rRod2_ib[2](quantity = "Length", unit = "m") = -engine.cylinder3.pistonLength "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder3.jointRRP.rRod2_ib[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder3.jointRRP.s_offset(quantity = "Length", unit = "m") = -engine.cylinder3.cylinderTopPosition "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder3.jointRRP.s_guess(quantity = "Length", unit = "m") = 0.0 "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder3.jointRRP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the revolute joints";
//   parameter Real engine.cylinder3.jointRRP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the revolute joints";
//   input Integer engine.cylinder3.jointRRP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder3.jointRRP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder3.jointRRP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   parameter Real engine.cylinder3.jointRRP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder3.jointRRP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.boxColor[1](min = 0, max = 255) = engine.cylinder3.jointRRP.cylinderColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.boxColor[2](min = 0, max = 255) = engine.cylinder3.jointRRP.cylinderColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.boxColor[3](min = 0, max = 255) = engine.cylinder3.jointRRP.cylinderColor[3] "Color of prismatic joint box";
//   parameter Real engine.cylinder3.jointRRP.rodDiameter(quantity = "Length", unit = "m", min = 0.0) = 1.1 * engine.cylinder3.jointRRP.cylinderDiameter "Diameter of the two rods connecting the joints";
//   input Integer engine.cylinder3.jointRRP.rodColor[1](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder3.jointRRP.rodColor[2](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder3.jointRRP.rodColor[3](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Real engine.cylinder3.jointRRP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.jointRRP.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder3.jointRRP.e_a[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.n_a[1],engine.cylinder3.jointRRP.n_a[2],engine.cylinder3.jointRRP.n_a[3]},1e-13)[1] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.e_a[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.n_a[1],engine.cylinder3.jointRRP.n_a[2],engine.cylinder3.jointRRP.n_a[3]},1e-13)[2] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.e_a[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.n_a[1],engine.cylinder3.jointRRP.n_a[2],engine.cylinder3.jointRRP.n_a[3]},1e-13)[3] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.e_ia[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.e2_ia[1] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.e_ia[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.e2_ia[2] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.e_ia[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.e2_ia[3] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.e_im[1](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder3.jointRRP.e_im[2](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder3.jointRRP.e_im[3](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder3.jointRRP.e_b[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.prismatic.e[1] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder3.jointRRP.e_b[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.prismatic.e[2] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder3.jointRRP.e_b[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.prismatic.e[3] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   Real engine.cylinder3.jointRRP.totalPower(quantity = "Power", unit = "W") = engine.cylinder3.jointRRP.jointUSP.totalPower "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.jointRRP.jointUSP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder3.jointRRP.jointUSP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.jointRRP.jointUSP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.animation = false "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.showUniversalAxes = false " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.n1_a[1](unit = "1") = engine.cylinder3.jointRRP.n_a[1] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.n1_a[2](unit = "1") = engine.cylinder3.jointRRP.n_a[2] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.n1_a[3](unit = "1") = engine.cylinder3.jointRRP.n_a[3] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.n_b[1](unit = "1") = engine.cylinder3.jointRRP.n_b[1] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.n_b[2](unit = "1") = engine.cylinder3.jointRRP.n_b[2] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.n_b[3](unit = "1") = engine.cylinder3.jointRRP.n_b[3] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rRod1_ia[1](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.rRod1_ia[1] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.rRod1_ia[2] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rRod1_ia[3](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.rRod1_ia[3] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rRod2_ib[1](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.rRod2_ib[1] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rRod2_ib[2](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.rRod2_ib[2] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rRod2_ib[3](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.rRod2_ib[3] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.s_offset(quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.s_offset "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.s_guess(quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.sphereColor[1](min = 0, max = 255) = 255 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.sphereColor[2](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.sphereColor[3](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.sphereDiameter / 2.0 "Diameter of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1Color[1](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1Color[2](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1Color[3](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.rod1Diameter "Diameter of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod2Color[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod1Color[1] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod2Color[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod1Color[2] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod2Color[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod1Color[3] "Color of rod 2 connecting the prismatic and the spherical joint";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.jointUSP.boxColor[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.sphereColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.jointUSP.boxColor[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.sphereColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.jointUSP.boxColor[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.sphereColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder3.jointRRP.jointUSP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder3.jointRRP.jointUSP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder3.jointRRP.jointUSP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder3.jointRRP.jointUSP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.checkTotalPower = engine.cylinder3.jointRRP.checkTotalPower "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.eRod1_ia[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.eRod1_ia[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.eRod1_ia[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.e2_ia[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.e2_ia[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.e2_ia[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1Length(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.rod1.rodLength "Length of rod 1 (= distance between universal and spherical joint";
//   Real engine.cylinder3.jointRRP.jointUSP.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   Real engine.cylinder3.jointRRP.jointUSP.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.prismatic.animation = engine.cylinder3.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.length(quantity = "Length", unit = "m", start = 1.0) = engine.cylinder3.jointRRP.jointUSP.rod1.rodLength "Fixed length of length constraint";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.n[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.n_b[1] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.n[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.n_b[2] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.n[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.n_b[3] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.s_offset(quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.s_offset "Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.s_guess(quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.boxWidthDirection[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.boxWidthDirection[1] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.boxWidthDirection[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.boxWidthDirection[2] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.boxWidthDirection[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.boxWidthDirection[3] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.boxWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.boxWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.boxHeight "Height of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.jointUSP.prismatic.boxColor[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.boxColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.jointUSP.prismatic.boxColor[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.boxColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder3.jointRRP.jointUSP.prismatic.boxColor[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.boxColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder3.jointRRP.jointUSP.prismatic.specularCoefficient = engine.cylinder3.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.prismatic.positiveBranch(fixed = false) "Selection of one of the two solutions of the non-linear constraint equation";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.prismatic.n[1],engine.cylinder3.jointRRP.jointUSP.prismatic.n[2],engine.cylinder3.jointRRP.jointUSP.prismatic.n[3]},1e-13)[1] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.prismatic.n[1],engine.cylinder3.jointRRP.jointUSP.prismatic.n[2],engine.cylinder3.jointRRP.jointUSP.prismatic.n[3]},1e-13)[2] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.prismatic.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.prismatic.n[1],engine.cylinder3.jointRRP.jointUSP.prismatic.n[2],engine.cylinder3.jointRRP.jointUSP.prismatic.n[3]},1e-13)[3] "Unit vector in direction of translation axis, resolved in frame_a";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.s(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n = s + s_offset)";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.distance(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder3.jointRRP.jointUSP.prismatic.f(quantity = "Force", unit = "N") "= axis.f (driving force in the axis)";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[1](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[2](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[3](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[1](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[2](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[3](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[1](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[2](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[3](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.B "Coefficient B of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.C "Coefficient C of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.k1 "Constant of quadratic equation solution";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.k2 "Constant of quadratic equation solution";
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.k1a(start = 1.0);
//   protected Real engine.cylinder3.jointRRP.jointUSP.prismatic.k1b;
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.rod1.animation = engine.cylinder3.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.rod1.showUniversalAxes = engine.cylinder3.jointRRP.jointUSP.showUniversalAxes " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.rod1.computeRodLength = false "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.n1_a[1] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.n1_a[2] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.n1_a[3] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.rRod1_ia[1] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.rRod1_ia[2] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3](quantity = "Length", unit = "m") = engine.cylinder3.jointRRP.jointUSP.rRod1_ia[3] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.sphereDiameter "Diameter of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.sphereColor[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.sphereColor[1] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.sphereColor[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.sphereColor[2] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.sphereColor[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.sphereColor[3] "Color of spheres representing the universal and the spherical joint";
//   parameter String engine.cylinder3.jointRRP.jointUSP.rod1.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rodWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.rod1Diameter "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rodHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.rod1Diameter "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.rodColor[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod1Color[1] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.rodColor[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod1Color[2] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.rodColor[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod1Color[3] "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.cylinderLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.cylinderDiameter "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.cylinderColor[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.cylinderColor[1] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.cylinderColor[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.cylinderColor[2] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod1.cylinderColor[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.cylinderColor[3] "Color of cylinders representing the two universal joint axes";
//   input Real engine.cylinder3.jointRRP.jointUSP.rod1.specularCoefficient = engine.cylinder3.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.rod1.kinematicConstraint = false "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.constraintResidue = engine.cylinder3.jointRRP.jointUSP.rod1.f_rod - engine.cylinder3.jointRRP.jointUSP.f_rod "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.rod1.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT engine.cylinder3.jointRRP.jointUSP.rod1.computeRodLength) = Modelica.Math.Vectors.length({engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.e3_ia[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[3] - engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.e3_ia[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[1] - engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod1.e3_ia[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[2] - engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[1](quantity = "Length", unit = "m", start = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[2](quantity = "Length", unit = "m", start = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[3](quantity = "Length", unit = "m", start = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[1](quantity = "Length", unit = "m", start = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[2](quantity = "Length", unit = "m", start = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[3](quantity = "Length", unit = "m", start = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.jointRRP.jointUSP.rod2.animation = engine.cylinder3.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.jointRRP.jointUSP.rRod2_ib[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.jointRRP.jointUSP.rRod2_ib[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.jointRRP.jointUSP.rRod2_ib[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder3.jointRRP.jointUSP.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.lengthDirection[1](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod2.r[1] - engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.lengthDirection[2](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod2.r[2] - engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.lengthDirection[3](unit = "1") = engine.cylinder3.jointRRP.jointUSP.rod2.r[3] - engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.jointRRP.jointUSP.rod2.r[1] - engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[1],engine.cylinder3.jointRRP.jointUSP.rod2.r[2] - engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[2],engine.cylinder3.jointRRP.jointUSP.rod2.r[3] - engine.cylinder3.jointRRP.jointUSP.rod2.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.rod2Diameter " Width of shape";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.jointRRP.jointUSP.rod2Diameter " Height of shape.";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod2.color[1](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod2Color[1] " Color of shape";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod2.color[2](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod2Color[2] " Color of shape";
//   input Integer engine.cylinder3.jointRRP.jointUSP.rod2.color[3](min = 0, max = 255) = engine.cylinder3.jointRRP.jointUSP.rod2Color[3] " Color of shape";
//   input Real engine.cylinder3.jointRRP.jointUSP.rod2.specularCoefficient = engine.cylinder3.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder3.jointRRP.jointUSP.relativePosition.r_rel[1] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder3.jointRRP.jointUSP.relativePosition.r_rel[2] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder3.jointRRP.jointUSP.relativePosition.r_rel[3] "Relative position vector resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder3.jointRRP.jointUSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a "Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.resolveInFrame = engine.cylinder3.jointRRP.jointUSP.relativePosition.resolveInFrame "Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder3.jointRRP.jointUSP.position_b[1].y "Connector of Real output signal";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.position_b[1].k(start = 1.0) = engine.cylinder3.jointRRP.jointUSP.rRod2_ib[1] "Constant output value";
//   output Real engine.cylinder3.jointRRP.jointUSP.position_b[2].y "Connector of Real output signal";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.position_b[2].k(start = 1.0) = engine.cylinder3.jointRRP.jointUSP.rRod2_ib[2] "Constant output value";
//   output Real engine.cylinder3.jointRRP.jointUSP.position_b[3].y "Connector of Real output signal";
//   parameter Real engine.cylinder3.jointRRP.jointUSP.position_b[3].k(start = 1.0) = engine.cylinder3.jointRRP.jointUSP.rRod2_ib[3] "Constant output value";
//   protected Real engine.cylinder3.jointRRP.jointUSP.aux "Denominator used to compute force in rod connecting universal and spherical joint";
//   Real engine.cylinder3.Rod.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Rod.animation = engine.cylinder3.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder3.Rod.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder3.Rod.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.rodLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.rodLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder3.rodMass "Mass of rigid body";
//   parameter Real engine.cylinder3.Rod.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.rodInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.rodInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.rodInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder3.Rod.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Rod.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Rod.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Rod.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Rod.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Rod.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Rod.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Rod.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Rod.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder3.Rod.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Rod.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Rod.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Rod.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder3.Rod.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Rod.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Rod.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder3.Rod.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Rod.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Rod.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Rod.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder3.Rod.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Rod.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Rod.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Rod.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder3.Rod.shapeType = "2" " Type of shape";
//   parameter Real engine.cylinder3.Rod.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.length(quantity = "Length", unit = "m") = engine.cylinder3.rodLength / 1.75 " Length of shape";
//   parameter Real engine.cylinder3.Rod.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.rodLength / 1.75 " Width of shape";
//   parameter Real engine.cylinder3.Rod.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.rodLength / 1.75 " Height of shape.";
//   parameter Real engine.cylinder3.Rod.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Rod.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Rod.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Rod.color[3](min = 0, max = 255) = 155 " Color of shape";
//   parameter Real engine.cylinder3.Rod.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder3.Rod.width " Diameter of sphere";
//   input Integer engine.cylinder3.Rod.sphereColor[1](min = 0, max = 255) = engine.cylinder3.Rod.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder3.Rod.sphereColor[2](min = 0, max = 255) = engine.cylinder3.Rod.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder3.Rod.sphereColor[3](min = 0, max = 255) = engine.cylinder3.Rod.color[3] " Color of sphere of mass";
//   input Real engine.cylinder3.Rod.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.Rod.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder3.Rod.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder3.Rod.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Rod.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Rod.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Rod.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.Rod.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Rod.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Rod.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Rod.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder3.Rod.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.Rod.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder3.Rod.frameTranslation.r[1] - engine.cylinder3.Rod.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder3.Rod.frameTranslation.r[2] - engine.cylinder3.Rod.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder3.Rod.frameTranslation.r[3] - engine.cylinder3.Rod.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.Rod.frameTranslation.r[1] - engine.cylinder3.Rod.frameTranslation.r_shape[1],engine.cylinder3.Rod.frameTranslation.r[2] - engine.cylinder3.Rod.frameTranslation.r_shape[2],engine.cylinder3.Rod.frameTranslation.r[3] - engine.cylinder3.Rod.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.Rod.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Rod.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.Rod.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Rod.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder3.Rod.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Rod.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Rod.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Rod.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.Rod.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder3.Rod.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Rod.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Rod.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Rod.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Rod.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder3.Rod.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Rod.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Rod.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Rod.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder3.Rod.m "Mass of rigid body";
//   parameter Real engine.cylinder3.Rod.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.Rod.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.Rod.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.Rod.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder3.Rod.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder3.Rod.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder3.Rod.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder3.Rod.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Rod.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Rod.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Rod.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Rod.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Rod.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Rod.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Rod.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Rod.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder3.Rod.body.angles_fixed = engine.cylinder3.Rod.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Rod.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder3.Rod.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Rod.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder3.Rod.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Rod.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder3.Rod.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder3.Rod.body.sequence_start[1](min = 1, max = 3) = engine.cylinder3.Rod.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Rod.body.sequence_start[2](min = 1, max = 3) = engine.cylinder3.Rod.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Rod.body.sequence_start[3](min = 1, max = 3) = engine.cylinder3.Rod.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder3.Rod.body.w_0_fixed = engine.cylinder3.Rod.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Rod.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder3.Rod.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Rod.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder3.Rod.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Rod.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder3.Rod.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder3.Rod.body.z_0_fixed = engine.cylinder3.Rod.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Rod.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder3.Rod.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Rod.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder3.Rod.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Rod.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder3.Rod.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Rod.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder3.Rod.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder3.Rod.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder3.Rod.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder3.Rod.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Rod.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder3.Rod.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder3.Rod.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder3.Rod.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder3.Rod.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder3.Rod.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder3.Rod.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder3.Rod.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.Rod.body.enforceStates = engine.cylinder3.Rod.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder3.Rod.body.useQuaternions = engine.cylinder3.Rod.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder3.Rod.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder3.Rod.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Rod.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder3.Rod.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Rod.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder3.Rod.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder3.Rod.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Rod.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.Rod.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.Rod.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.z_0_start[1],engine.cylinder3.Rod.body.z_0_start[2],engine.cylinder3.Rod.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.z_0_start[1],engine.cylinder3.Rod.body.z_0_start[2],engine.cylinder3.Rod.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder3.Rod.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.z_0_start[1],engine.cylinder3.Rod.body.z_0_start[2],engine.cylinder3.Rod.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder3.Rod.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.w_0_start[1],engine.cylinder3.Rod.body.w_0_start[2],engine.cylinder3.Rod.body.w_0_start[3]})[1], fixed = engine.cylinder3.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder3.Rod.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.w_0_start[1],engine.cylinder3.Rod.body.w_0_start[2],engine.cylinder3.Rod.body.w_0_start[3]})[2], fixed = engine.cylinder3.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder3.Rod.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.w_0_start[1],engine.cylinder3.Rod.body.w_0_start[2],engine.cylinder3.Rod.body.w_0_start[3]})[3], fixed = engine.cylinder3.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder3.Rod.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.z_0_start[1],engine.cylinder3.Rod.body.z_0_start[2],engine.cylinder3.Rod.body.z_0_start[3]})[1], fixed = engine.cylinder3.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder3.Rod.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.z_0_start[1],engine.cylinder3.Rod.body.z_0_start[2],engine.cylinder3.Rod.body.z_0_start[3]})[2], fixed = engine.cylinder3.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder3.Rod.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.z_0_start[1],engine.cylinder3.Rod.body.z_0_start[2],engine.cylinder3.Rod.body.z_0_start[3]})[3], fixed = engine.cylinder3.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder3.Rod.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder3.Rod.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder3.Rod.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder3.Rod.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder3.Rod.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder3.Rod.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder3.Rod.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder3.Rod.body.Q[1](start = engine.cylinder3.Rod.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder3.Rod.body.Q[2](start = engine.cylinder3.Rod.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder3.Rod.body.Q[3](start = engine.cylinder3.Rod.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder3.Rod.body.Q[4](start = engine.cylinder3.Rod.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder3.Rod.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder3.Rod.body.sequence_start[1] == engine.cylinder3.Rod.body.sequence_angleStates[1] AND engine.cylinder3.Rod.body.sequence_start[2] == engine.cylinder3.Rod.body.sequence_angleStates[2] AND engine.cylinder3.Rod.body.sequence_start[3] == engine.cylinder3.Rod.body.sequence_angleStates[3] then engine.cylinder3.Rod.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.sequence_angleStates[1],engine.cylinder3.Rod.body.sequence_angleStates[2],engine.cylinder3.Rod.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder3.Rod.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder3.Rod.body.sequence_start[1] == engine.cylinder3.Rod.body.sequence_angleStates[1] AND engine.cylinder3.Rod.body.sequence_start[2] == engine.cylinder3.Rod.body.sequence_angleStates[2] AND engine.cylinder3.Rod.body.sequence_start[3] == engine.cylinder3.Rod.body.sequence_angleStates[3] then engine.cylinder3.Rod.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.sequence_angleStates[1],engine.cylinder3.Rod.body.sequence_angleStates[2],engine.cylinder3.Rod.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder3.Rod.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder3.Rod.body.sequence_start[1] == engine.cylinder3.Rod.body.sequence_angleStates[1] AND engine.cylinder3.Rod.body.sequence_start[2] == engine.cylinder3.Rod.body.sequence_angleStates[2] AND engine.cylinder3.Rod.body.sequence_start[3] == engine.cylinder3.Rod.body.sequence_angleStates[3] then engine.cylinder3.Rod.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder3.Rod.body.R_start,{engine.cylinder3.Rod.body.sequence_angleStates[1],engine.cylinder3.Rod.body.sequence_angleStates[2],engine.cylinder3.Rod.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder3.Rod.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder3.Rod.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder3.Rod.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder3.Rod.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder3.Rod.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder3.Rod.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder3.Rod.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder3.Rod.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder3.Rod.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder3.Rod.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder3.Rod.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder3.Rod.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder3.Rod.shape1.shapeType = engine.cylinder3.Rod.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder3.Rod.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Rod.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.Rod.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.Rod.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.Rod.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder3.Rod.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.Rod.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder3.Rod.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.Rod.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder3.Rod.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.Rod.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder3.Rod.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder3.Rod.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder3.Rod.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.lengthDirection[1](unit = "1") = engine.cylinder3.Rod.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.lengthDirection[2](unit = "1") = engine.cylinder3.Rod.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.lengthDirection[3](unit = "1") = engine.cylinder3.Rod.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.widthDirection[1](unit = "1") = engine.cylinder3.Rod.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.widthDirection[2](unit = "1") = engine.cylinder3.Rod.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.widthDirection[3](unit = "1") = engine.cylinder3.Rod.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.Rod.shape1.length(quantity = "Length", unit = "m") = engine.cylinder3.Rod.length "Length of visual object";
//   input Real engine.cylinder3.Rod.shape1.width(quantity = "Length", unit = "m") = engine.cylinder3.Rod.width "Width of visual object";
//   input Real engine.cylinder3.Rod.shape1.height(quantity = "Length", unit = "m") = engine.cylinder3.Rod.height "Height of visual object";
//   input Real engine.cylinder3.Rod.shape1.extra = engine.cylinder3.Rod.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder3.Rod.shape1.color[1] = Real(engine.cylinder3.Rod.color[1]) "Color of shape";
//   input Real engine.cylinder3.Rod.shape1.color[2] = Real(engine.cylinder3.Rod.color[2]) "Color of shape";
//   input Real engine.cylinder3.Rod.shape1.color[3] = Real(engine.cylinder3.Rod.color[3]) "Color of shape";
//   input Real engine.cylinder3.Rod.shape1.specularCoefficient = engine.cylinder3.Rod.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder3.Rod.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder3.Rod.shape1.lengthDirection[1],engine.cylinder3.Rod.shape1.lengthDirection[2],engine.cylinder3.Rod.shape1.lengthDirection[3]});
//   protected Real engine.cylinder3.Rod.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder3.Rod.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder3.Rod.shape1.lengthDirection[1] / engine.cylinder3.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder3.Rod.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder3.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder3.Rod.shape1.lengthDirection[2] / engine.cylinder3.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder3.Rod.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder3.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder3.Rod.shape1.lengthDirection[3] / engine.cylinder3.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder3.Rod.shape1.n_z_aux[1](unit = "1") = engine.cylinder3.Rod.shape1.e_x[2] * engine.cylinder3.Rod.shape1.widthDirection[3] - engine.cylinder3.Rod.shape1.e_x[3] * engine.cylinder3.Rod.shape1.widthDirection[2];
//   protected Real engine.cylinder3.Rod.shape1.n_z_aux[2](unit = "1") = engine.cylinder3.Rod.shape1.e_x[3] * engine.cylinder3.Rod.shape1.widthDirection[1] - engine.cylinder3.Rod.shape1.e_x[1] * engine.cylinder3.Rod.shape1.widthDirection[3];
//   protected Real engine.cylinder3.Rod.shape1.n_z_aux[3](unit = "1") = engine.cylinder3.Rod.shape1.e_x[1] * engine.cylinder3.Rod.shape1.widthDirection[2] - engine.cylinder3.Rod.shape1.e_x[2] * engine.cylinder3.Rod.shape1.widthDirection[1];
//   protected Real engine.cylinder3.Rod.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.Rod.shape1.e_x[1],engine.cylinder3.Rod.shape1.e_x[2],engine.cylinder3.Rod.shape1.e_x[3]},if noEvent(engine.cylinder3.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder3.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder3.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.Rod.shape1.widthDirection[1],engine.cylinder3.Rod.shape1.widthDirection[2],engine.cylinder3.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder3.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.Rod.shape1.e_x[1],engine.cylinder3.Rod.shape1.e_x[2],engine.cylinder3.Rod.shape1.e_x[3]})[1];
//   protected Real engine.cylinder3.Rod.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.Rod.shape1.e_x[1],engine.cylinder3.Rod.shape1.e_x[2],engine.cylinder3.Rod.shape1.e_x[3]},if noEvent(engine.cylinder3.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder3.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder3.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.Rod.shape1.widthDirection[1],engine.cylinder3.Rod.shape1.widthDirection[2],engine.cylinder3.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder3.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.Rod.shape1.e_x[1],engine.cylinder3.Rod.shape1.e_x[2],engine.cylinder3.Rod.shape1.e_x[3]})[2];
//   protected Real engine.cylinder3.Rod.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.Rod.shape1.e_x[1],engine.cylinder3.Rod.shape1.e_x[2],engine.cylinder3.Rod.shape1.e_x[3]},if noEvent(engine.cylinder3.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder3.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder3.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.Rod.shape1.widthDirection[1],engine.cylinder3.Rod.shape1.widthDirection[2],engine.cylinder3.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder3.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.Rod.shape1.e_x[1],engine.cylinder3.Rod.shape1.e_x[2],engine.cylinder3.Rod.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder3.Rod.shape1.Form;
//   output Real engine.cylinder3.Rod.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder3.Rod.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder3.Rod.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.Rod.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.Rod.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.Rod.shape1.Material;
//   protected output Real engine.cylinder3.Rod.shape1.Extra;
//   Real engine.cylinder3.Piston.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Piston.animation = engine.cylinder3.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder3.Piston.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder3.Piston.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.pistonLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.pistonLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder3.pistonMass "Mass of rigid body";
//   parameter Real engine.cylinder3.Piston.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.pistonInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.pistonInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.pistonInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder3.Piston.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Piston.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Piston.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Piston.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Piston.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Piston.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Piston.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Piston.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Piston.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder3.Piston.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Piston.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Piston.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Piston.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder3.Piston.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Piston.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Piston.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder3.Piston.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Piston.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Piston.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Piston.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder3.Piston.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Piston.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Piston.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Piston.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder3.Piston.shapeType = "3" " Type of shape";
//   parameter Real engine.cylinder3.Piston.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.length(quantity = "Length", unit = "m") = 0.08 " Length of shape";
//   parameter Real engine.cylinder3.Piston.width(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Width of shape";
//   parameter Real engine.cylinder3.Piston.height(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Height of shape.";
//   parameter Real engine.cylinder3.Piston.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Piston.color[1](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder3.Piston.color[2](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder3.Piston.color[3](min = 0, max = 255) = 180 " Color of shape";
//   parameter Real engine.cylinder3.Piston.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder3.Piston.width " Diameter of sphere";
//   input Integer engine.cylinder3.Piston.sphereColor[1](min = 0, max = 255) = engine.cylinder3.Piston.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder3.Piston.sphereColor[2](min = 0, max = 255) = engine.cylinder3.Piston.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder3.Piston.sphereColor[3](min = 0, max = 255) = engine.cylinder3.Piston.color[3] " Color of sphere of mass";
//   input Real engine.cylinder3.Piston.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.Piston.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder3.Piston.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder3.Piston.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Piston.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Piston.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Piston.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.Piston.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Piston.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Piston.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Piston.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder3.Piston.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.Piston.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder3.Piston.frameTranslation.r[1] - engine.cylinder3.Piston.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder3.Piston.frameTranslation.r[2] - engine.cylinder3.Piston.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder3.Piston.frameTranslation.r[3] - engine.cylinder3.Piston.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.Piston.frameTranslation.r[1] - engine.cylinder3.Piston.frameTranslation.r_shape[1],engine.cylinder3.Piston.frameTranslation.r[2] - engine.cylinder3.Piston.frameTranslation.r_shape[2],engine.cylinder3.Piston.frameTranslation.r[3] - engine.cylinder3.Piston.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.Piston.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Piston.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.Piston.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Piston.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder3.Piston.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Piston.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Piston.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Piston.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.Piston.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder3.Piston.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Piston.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Piston.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder3.Piston.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Piston.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Piston.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.Piston.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder3.Piston.m "Mass of rigid body";
//   parameter Real engine.cylinder3.Piston.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.Piston.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.Piston.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder3.Piston.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder3.Piston.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder3.Piston.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder3.Piston.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder3.Piston.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Piston.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Piston.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder3.Piston.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Piston.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Piston.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder3.Piston.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Piston.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder3.Piston.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder3.Piston.body.angles_fixed = engine.cylinder3.Piston.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Piston.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder3.Piston.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Piston.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder3.Piston.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder3.Piston.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder3.Piston.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder3.Piston.body.sequence_start[1](min = 1, max = 3) = engine.cylinder3.Piston.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Piston.body.sequence_start[2](min = 1, max = 3) = engine.cylinder3.Piston.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder3.Piston.body.sequence_start[3](min = 1, max = 3) = engine.cylinder3.Piston.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder3.Piston.body.w_0_fixed = engine.cylinder3.Piston.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Piston.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder3.Piston.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Piston.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder3.Piston.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder3.Piston.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder3.Piston.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder3.Piston.body.z_0_fixed = engine.cylinder3.Piston.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder3.Piston.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder3.Piston.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Piston.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder3.Piston.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Piston.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder3.Piston.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder3.Piston.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder3.Piston.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder3.Piston.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder3.Piston.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder3.Piston.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Piston.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder3.Piston.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder3.Piston.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder3.Piston.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder3.Piston.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder3.Piston.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder3.Piston.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder3.Piston.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder3.Piston.body.enforceStates = engine.cylinder3.Piston.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder3.Piston.body.useQuaternions = engine.cylinder3.Piston.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder3.Piston.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder3.Piston.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Piston.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder3.Piston.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder3.Piston.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder3.Piston.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder3.Piston.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder3.Piston.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.Piston.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder3.Piston.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.z_0_start[1],engine.cylinder3.Piston.body.z_0_start[2],engine.cylinder3.Piston.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.z_0_start[1],engine.cylinder3.Piston.body.z_0_start[2],engine.cylinder3.Piston.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder3.Piston.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.z_0_start[1],engine.cylinder3.Piston.body.z_0_start[2],engine.cylinder3.Piston.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder3.Piston.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.w_0_start[1],engine.cylinder3.Piston.body.w_0_start[2],engine.cylinder3.Piston.body.w_0_start[3]})[1], fixed = engine.cylinder3.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder3.Piston.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.w_0_start[1],engine.cylinder3.Piston.body.w_0_start[2],engine.cylinder3.Piston.body.w_0_start[3]})[2], fixed = engine.cylinder3.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder3.Piston.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.w_0_start[1],engine.cylinder3.Piston.body.w_0_start[2],engine.cylinder3.Piston.body.w_0_start[3]})[3], fixed = engine.cylinder3.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder3.Piston.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.z_0_start[1],engine.cylinder3.Piston.body.z_0_start[2],engine.cylinder3.Piston.body.z_0_start[3]})[1], fixed = engine.cylinder3.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder3.Piston.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.z_0_start[1],engine.cylinder3.Piston.body.z_0_start[2],engine.cylinder3.Piston.body.z_0_start[3]})[2], fixed = engine.cylinder3.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder3.Piston.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.z_0_start[1],engine.cylinder3.Piston.body.z_0_start[2],engine.cylinder3.Piston.body.z_0_start[3]})[3], fixed = engine.cylinder3.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder3.Piston.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder3.Piston.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder3.Piston.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder3.Piston.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder3.Piston.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder3.Piston.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder3.Piston.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder3.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder3.Piston.body.Q[1](start = engine.cylinder3.Piston.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder3.Piston.body.Q[2](start = engine.cylinder3.Piston.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder3.Piston.body.Q[3](start = engine.cylinder3.Piston.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder3.Piston.body.Q[4](start = engine.cylinder3.Piston.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder3.Piston.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder3.Piston.body.sequence_start[1] == engine.cylinder3.Piston.body.sequence_angleStates[1] AND engine.cylinder3.Piston.body.sequence_start[2] == engine.cylinder3.Piston.body.sequence_angleStates[2] AND engine.cylinder3.Piston.body.sequence_start[3] == engine.cylinder3.Piston.body.sequence_angleStates[3] then engine.cylinder3.Piston.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.sequence_angleStates[1],engine.cylinder3.Piston.body.sequence_angleStates[2],engine.cylinder3.Piston.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder3.Piston.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder3.Piston.body.sequence_start[1] == engine.cylinder3.Piston.body.sequence_angleStates[1] AND engine.cylinder3.Piston.body.sequence_start[2] == engine.cylinder3.Piston.body.sequence_angleStates[2] AND engine.cylinder3.Piston.body.sequence_start[3] == engine.cylinder3.Piston.body.sequence_angleStates[3] then engine.cylinder3.Piston.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.sequence_angleStates[1],engine.cylinder3.Piston.body.sequence_angleStates[2],engine.cylinder3.Piston.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder3.Piston.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder3.Piston.body.sequence_start[1] == engine.cylinder3.Piston.body.sequence_angleStates[1] AND engine.cylinder3.Piston.body.sequence_start[2] == engine.cylinder3.Piston.body.sequence_angleStates[2] AND engine.cylinder3.Piston.body.sequence_start[3] == engine.cylinder3.Piston.body.sequence_angleStates[3] then engine.cylinder3.Piston.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder3.Piston.body.R_start,{engine.cylinder3.Piston.body.sequence_angleStates[1],engine.cylinder3.Piston.body.sequence_angleStates[2],engine.cylinder3.Piston.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder3.Piston.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder3.Piston.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder3.Piston.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder3.Piston.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder3.Piston.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder3.Piston.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder3.Piston.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder3.Piston.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder3.Piston.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder3.Piston.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder3.Piston.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder3.Piston.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder3.Piston.shape1.shapeType = engine.cylinder3.Piston.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder3.Piston.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.Piston.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.Piston.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.Piston.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.Piston.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder3.Piston.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.Piston.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder3.Piston.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.Piston.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder3.Piston.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.Piston.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder3.Piston.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder3.Piston.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder3.Piston.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.lengthDirection[1](unit = "1") = engine.cylinder3.Piston.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.lengthDirection[2](unit = "1") = engine.cylinder3.Piston.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.lengthDirection[3](unit = "1") = engine.cylinder3.Piston.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.widthDirection[1](unit = "1") = engine.cylinder3.Piston.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.widthDirection[2](unit = "1") = engine.cylinder3.Piston.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.widthDirection[3](unit = "1") = engine.cylinder3.Piston.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.Piston.shape1.length(quantity = "Length", unit = "m") = engine.cylinder3.Piston.length "Length of visual object";
//   input Real engine.cylinder3.Piston.shape1.width(quantity = "Length", unit = "m") = engine.cylinder3.Piston.width "Width of visual object";
//   input Real engine.cylinder3.Piston.shape1.height(quantity = "Length", unit = "m") = engine.cylinder3.Piston.height "Height of visual object";
//   input Real engine.cylinder3.Piston.shape1.extra = engine.cylinder3.Piston.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder3.Piston.shape1.color[1] = Real(engine.cylinder3.Piston.color[1]) "Color of shape";
//   input Real engine.cylinder3.Piston.shape1.color[2] = Real(engine.cylinder3.Piston.color[2]) "Color of shape";
//   input Real engine.cylinder3.Piston.shape1.color[3] = Real(engine.cylinder3.Piston.color[3]) "Color of shape";
//   input Real engine.cylinder3.Piston.shape1.specularCoefficient = engine.cylinder3.Piston.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder3.Piston.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder3.Piston.shape1.lengthDirection[1],engine.cylinder3.Piston.shape1.lengthDirection[2],engine.cylinder3.Piston.shape1.lengthDirection[3]});
//   protected Real engine.cylinder3.Piston.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder3.Piston.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder3.Piston.shape1.lengthDirection[1] / engine.cylinder3.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder3.Piston.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder3.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder3.Piston.shape1.lengthDirection[2] / engine.cylinder3.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder3.Piston.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder3.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder3.Piston.shape1.lengthDirection[3] / engine.cylinder3.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder3.Piston.shape1.n_z_aux[1](unit = "1") = engine.cylinder3.Piston.shape1.e_x[2] * engine.cylinder3.Piston.shape1.widthDirection[3] - engine.cylinder3.Piston.shape1.e_x[3] * engine.cylinder3.Piston.shape1.widthDirection[2];
//   protected Real engine.cylinder3.Piston.shape1.n_z_aux[2](unit = "1") = engine.cylinder3.Piston.shape1.e_x[3] * engine.cylinder3.Piston.shape1.widthDirection[1] - engine.cylinder3.Piston.shape1.e_x[1] * engine.cylinder3.Piston.shape1.widthDirection[3];
//   protected Real engine.cylinder3.Piston.shape1.n_z_aux[3](unit = "1") = engine.cylinder3.Piston.shape1.e_x[1] * engine.cylinder3.Piston.shape1.widthDirection[2] - engine.cylinder3.Piston.shape1.e_x[2] * engine.cylinder3.Piston.shape1.widthDirection[1];
//   protected Real engine.cylinder3.Piston.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.Piston.shape1.e_x[1],engine.cylinder3.Piston.shape1.e_x[2],engine.cylinder3.Piston.shape1.e_x[3]},if noEvent(engine.cylinder3.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder3.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder3.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.Piston.shape1.widthDirection[1],engine.cylinder3.Piston.shape1.widthDirection[2],engine.cylinder3.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder3.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.Piston.shape1.e_x[1],engine.cylinder3.Piston.shape1.e_x[2],engine.cylinder3.Piston.shape1.e_x[3]})[1];
//   protected Real engine.cylinder3.Piston.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.Piston.shape1.e_x[1],engine.cylinder3.Piston.shape1.e_x[2],engine.cylinder3.Piston.shape1.e_x[3]},if noEvent(engine.cylinder3.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder3.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder3.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.Piston.shape1.widthDirection[1],engine.cylinder3.Piston.shape1.widthDirection[2],engine.cylinder3.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder3.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.Piston.shape1.e_x[1],engine.cylinder3.Piston.shape1.e_x[2],engine.cylinder3.Piston.shape1.e_x[3]})[2];
//   protected Real engine.cylinder3.Piston.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.Piston.shape1.e_x[1],engine.cylinder3.Piston.shape1.e_x[2],engine.cylinder3.Piston.shape1.e_x[3]},if noEvent(engine.cylinder3.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder3.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder3.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.Piston.shape1.widthDirection[1],engine.cylinder3.Piston.shape1.widthDirection[2],engine.cylinder3.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder3.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.Piston.shape1.e_x[1],engine.cylinder3.Piston.shape1.e_x[2],engine.cylinder3.Piston.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder3.Piston.shape1.Form;
//   output Real engine.cylinder3.Piston.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder3.Piston.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder3.Piston.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.Piston.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.Piston.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.Piston.shape1.Material;
//   protected output Real engine.cylinder3.Piston.shape1.Extra;
//   Real engine.cylinder3.gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder3.gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder3.gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder3.gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real engine.cylinder3.gasForce.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
//   parameter Real engine.cylinder3.gasForce.L(quantity = "Length", unit = "m") = engine.cylinder3.cylinderLength "Length of cylinder";
//   parameter Real engine.cylinder3.gasForce.d(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of cylinder";
//   parameter Real engine.cylinder3.gasForce.k0(quantity = "Volume", unit = "m3") = 0.01 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder3.gasForce.k1(quantity = "Volume", unit = "m3") = 1.0 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder3.gasForce.k(quantity = "HeatCapacity", unit = "J/K") = 1.0 "Gas constant (p*V = k*T)";
//   constant Real engine.cylinder3.gasForce.pi = 3.14159265358979;
//   Real engine.cylinder3.gasForce.x "Normalized position of cylinder";
//   Real engine.cylinder3.gasForce.y "Normalized relative movement (= -s_rel/L)";
//   Real engine.cylinder3.gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real engine.cylinder3.gasForce.press(quantity = "Pressure", unit = "bar") "cylinder pressure";
//   Real engine.cylinder3.gasForce.V(quantity = "Volume", unit = "m3");
//   Real engine.cylinder3.gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real engine.cylinder3.gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   protected constant Real engine.cylinder3.gasForce.unitMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0;
//   protected Real engine.cylinder3.gasForce.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar");
//   Real engine.cylinder3.Crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.Crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.Crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.Crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.Crank.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder3.Crank.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder3.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder3.Crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder3.Crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.lengthDirection[1](unit = "1") = engine.cylinder3.Crank.r[1] - engine.cylinder3.Crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.lengthDirection[2](unit = "1") = engine.cylinder3.Crank.r[2] - engine.cylinder3.Crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.lengthDirection[3](unit = "1") = engine.cylinder3.Crank.r[3] - engine.cylinder3.Crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder3.Crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder3.Crank.r[1] - engine.cylinder3.Crank.r_shape[1],engine.cylinder3.Crank.r[2] - engine.cylinder3.Crank.r_shape[2],engine.cylinder3.Crank.r[3] - engine.cylinder3.Crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder3.Crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder3.Crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder3.Crank.width " Height of shape.";
//   parameter Real engine.cylinder3.Crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder3.Crank.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Crank.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder3.Crank.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder3.Crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder3.cylinder_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.cylinder_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.cylinder_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.cylinder_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.cylinder_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.cylinder_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.cylinder_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.cylinder_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.cylinder_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.cylinder_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.cylinder_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.cylinder_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.cylinder_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.cylinder_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.cylinder_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.cylinder_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.cylinder_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.cylinder_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.cylinder_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.cylinder_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.cylinder_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.cylinder_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.cylinder_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.cylinder_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.cylinder_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.crank_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.crank_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.crank_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.crank_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.crank_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.crank_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.crank_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.crank_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.crank_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.crank_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.crank_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.crank_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.crank_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.crank_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.crank_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.crank_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.crank_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.crank_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.crank_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.crank_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.crank_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.crank_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.crank_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.crank_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.crank_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankShape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankShape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankShape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankShape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder3.CrankShape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankShape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankShape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder3.CrankShape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankShape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder3.CrankShape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder3.CrankShape.animation = engine.cylinder3.animation "= true, if animation shall be enabled";
//   parameter String engine.cylinder3.CrankShape.shapeType = "1" "Type of shape";
//   input Real engine.cylinder3.CrankShape.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder3.crankLength - engine.cylinder3.crankPinLength / 2.0 - 0.002 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder3.CrankShape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = engine.cylinder3.crankPinOffset / 0.5 "Length of shape";
//   input Real engine.cylinder3.CrankShape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder3.crankPinOffset / 0.5 "Width of shape";
//   input Real engine.cylinder3.CrankShape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder3.crankPinOffset / 0.5 "Height of shape";
//   input Integer engine.cylinder3.CrankShape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer engine.cylinder3.CrankShape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer engine.cylinder3.CrankShape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real engine.cylinder3.CrankShape.extra = 1.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real engine.cylinder3.CrankShape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String engine.cylinder3.CrankShape.vis.shapeType = engine.cylinder3.CrankShape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder3.CrankShape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.CrankShape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder3.CrankShape.vis.r[1](quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.CrankShape.vis.r[2](quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.CrankShape.vis.r[3](quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder3.CrankShape.vis.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.lengthDirection[1](unit = "1") = engine.cylinder3.CrankShape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.lengthDirection[2](unit = "1") = engine.cylinder3.CrankShape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.lengthDirection[3](unit = "1") = engine.cylinder3.CrankShape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.widthDirection[1](unit = "1") = engine.cylinder3.CrankShape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.widthDirection[2](unit = "1") = engine.cylinder3.CrankShape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.widthDirection[3](unit = "1") = engine.cylinder3.CrankShape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder3.CrankShape.vis.length(quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.length "Length of visual object";
//   input Real engine.cylinder3.CrankShape.vis.width(quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.width "Width of visual object";
//   input Real engine.cylinder3.CrankShape.vis.height(quantity = "Length", unit = "m") = engine.cylinder3.CrankShape.height "Height of visual object";
//   input Real engine.cylinder3.CrankShape.vis.extra = engine.cylinder3.CrankShape.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder3.CrankShape.vis.color[1] = Real(engine.cylinder3.CrankShape.color[1]) "Color of shape";
//   input Real engine.cylinder3.CrankShape.vis.color[2] = Real(engine.cylinder3.CrankShape.color[2]) "Color of shape";
//   input Real engine.cylinder3.CrankShape.vis.color[3] = Real(engine.cylinder3.CrankShape.color[3]) "Color of shape";
//   input Real engine.cylinder3.CrankShape.vis.specularCoefficient = engine.cylinder3.CrankShape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder3.CrankShape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder3.CrankShape.vis.lengthDirection[1],engine.cylinder3.CrankShape.vis.lengthDirection[2],engine.cylinder3.CrankShape.vis.lengthDirection[3]});
//   protected Real engine.cylinder3.CrankShape.vis.e_x[1](unit = "1") = if noEvent(engine.cylinder3.CrankShape.vis.abs_n_x < 1e-10) then 1.0 else engine.cylinder3.CrankShape.vis.lengthDirection[1] / engine.cylinder3.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder3.CrankShape.vis.e_x[2](unit = "1") = if noEvent(engine.cylinder3.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder3.CrankShape.vis.lengthDirection[2] / engine.cylinder3.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder3.CrankShape.vis.e_x[3](unit = "1") = if noEvent(engine.cylinder3.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder3.CrankShape.vis.lengthDirection[3] / engine.cylinder3.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder3.CrankShape.vis.n_z_aux[1](unit = "1") = engine.cylinder3.CrankShape.vis.e_x[2] * engine.cylinder3.CrankShape.vis.widthDirection[3] - engine.cylinder3.CrankShape.vis.e_x[3] * engine.cylinder3.CrankShape.vis.widthDirection[2];
//   protected Real engine.cylinder3.CrankShape.vis.n_z_aux[2](unit = "1") = engine.cylinder3.CrankShape.vis.e_x[3] * engine.cylinder3.CrankShape.vis.widthDirection[1] - engine.cylinder3.CrankShape.vis.e_x[1] * engine.cylinder3.CrankShape.vis.widthDirection[3];
//   protected Real engine.cylinder3.CrankShape.vis.n_z_aux[3](unit = "1") = engine.cylinder3.CrankShape.vis.e_x[1] * engine.cylinder3.CrankShape.vis.widthDirection[2] - engine.cylinder3.CrankShape.vis.e_x[2] * engine.cylinder3.CrankShape.vis.widthDirection[1];
//   protected Real engine.cylinder3.CrankShape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.CrankShape.vis.e_x[1],engine.cylinder3.CrankShape.vis.e_x[2],engine.cylinder3.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder3.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder3.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder3.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.CrankShape.vis.widthDirection[1],engine.cylinder3.CrankShape.vis.widthDirection[2],engine.cylinder3.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder3.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.CrankShape.vis.e_x[1],engine.cylinder3.CrankShape.vis.e_x[2],engine.cylinder3.CrankShape.vis.e_x[3]})[1];
//   protected Real engine.cylinder3.CrankShape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.CrankShape.vis.e_x[1],engine.cylinder3.CrankShape.vis.e_x[2],engine.cylinder3.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder3.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder3.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder3.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.CrankShape.vis.widthDirection[1],engine.cylinder3.CrankShape.vis.widthDirection[2],engine.cylinder3.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder3.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.CrankShape.vis.e_x[1],engine.cylinder3.CrankShape.vis.e_x[2],engine.cylinder3.CrankShape.vis.e_x[3]})[2];
//   protected Real engine.cylinder3.CrankShape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder3.CrankShape.vis.e_x[1],engine.cylinder3.CrankShape.vis.e_x[2],engine.cylinder3.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder3.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder3.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder3.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder3.CrankShape.vis.widthDirection[1],engine.cylinder3.CrankShape.vis.widthDirection[2],engine.cylinder3.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder3.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder3.CrankShape.vis.e_x[1],engine.cylinder3.CrankShape.vis.e_x[2],engine.cylinder3.CrankShape.vis.e_x[3]})[3];
//   protected output Real engine.cylinder3.CrankShape.vis.Form;
//   output Real engine.cylinder3.CrankShape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder3.CrankShape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder3.CrankShape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.CrankShape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.CrankShape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder3.CrankShape.vis.Material;
//   protected output Real engine.cylinder3.CrankShape.vis.Extra;
//   parameter Boolean engine.cylinder4.animation = engine.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.cylinderTopPosition(quantity = "Length", unit = "m") = 0.42 "Length from crank shaft to end of cylinder.";
//   parameter Real engine.cylinder4.crankLength(quantity = "Length", unit = "m") = 0.14 "Length of crank shaft in x direction";
//   parameter Real engine.cylinder4.crankPinOffset(quantity = "Length", unit = "m") = 0.05 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder4.crankPinLength(quantity = "Length", unit = "m") = 0.1 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder4.cylinderInclination(quantity = "Angle", unit = "deg") = 30.0 "Inclination of cylinder";
//   parameter Real engine.cylinder4.crankAngleOffset(quantity = "Angle", unit = "deg") = 210.0 "Offset for crank angle";
//   parameter Real engine.cylinder4.pistonLength(quantity = "Length", unit = "m") = 0.1 " Length of cylinder";
//   parameter Real engine.cylinder4.pistonCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder4.pistonLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder4.pistonMass(quantity = "Mass", unit = "kg", min = 0.0) = 6.0 " Mass of piston";
//   parameter Real engine.cylinder4.pistonInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 11 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder4.pistonInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0076 " Inertia 22 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder4.pistonInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 33 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder4.rodLength(quantity = "Length", unit = "m") = 0.175 " Length of rod";
//   parameter Real engine.cylinder4.rodCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder4.rodLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder4.rodMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 " Mass of rod";
//   parameter Real engine.cylinder4.rodInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 11 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder4.rodInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0005 " Inertia 22 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder4.rodInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 33 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder4.cylinderLength(quantity = "Length", unit = "m") = engine.cylinder4.cylinderTopPosition - (engine.cylinder4.pistonLength + engine.cylinder4.rodLength - engine.cylinder4.crankPinOffset) "Maximum length of cylinder volume";
//   Real engine.cylinder4.Mid.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mid.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mid.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mid.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mid.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mid.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mid.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mid.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mid.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mid.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mid.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mid.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mid.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Mid.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.Mid.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.crankLength - engine.cylinder4.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.crankPinOffset "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder4.Mid.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.Mid.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.lengthDirection[1](unit = "1") = engine.cylinder4.Mid.r[1] - engine.cylinder4.Mid.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.lengthDirection[2](unit = "1") = engine.cylinder4.Mid.r[2] - engine.cylinder4.Mid.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.lengthDirection[3](unit = "1") = engine.cylinder4.Mid.r[3] - engine.cylinder4.Mid.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mid.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.Mid.r[1] - engine.cylinder4.Mid.r_shape[1],engine.cylinder4.Mid.r[2] - engine.cylinder4.Mid.r_shape[2],engine.cylinder4.Mid.r[3] - engine.cylinder4.Mid.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.Mid.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Mid.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.Mid.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Mid.width " Height of shape.";
//   parameter Real engine.cylinder4.Mid.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Mid.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Mid.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Mid.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.Mid.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder4.Mounting.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mounting.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mounting.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mounting.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mounting.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mounting.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mounting.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mounting.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Mounting.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Mounting.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Mounting.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.Mounting.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder4.Mounting.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.Mounting.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.lengthDirection[1](unit = "1") = engine.cylinder4.Mounting.r[1] - engine.cylinder4.Mounting.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.lengthDirection[2](unit = "1") = engine.cylinder4.Mounting.r[2] - engine.cylinder4.Mounting.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.lengthDirection[3](unit = "1") = engine.cylinder4.Mounting.r[3] - engine.cylinder4.Mounting.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Mounting.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.Mounting.r[1] - engine.cylinder4.Mounting.r_shape[1],engine.cylinder4.Mounting.r[2] - engine.cylinder4.Mounting.r_shape[2],engine.cylinder4.Mounting.r[3] - engine.cylinder4.Mounting.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.Mounting.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Mounting.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.Mounting.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Mounting.width " Height of shape.";
//   parameter Real engine.cylinder4.Mounting.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Mounting.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Mounting.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Mounting.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.Mounting.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder4.CylinderInclination.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CylinderInclination.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.CylinderInclination.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.CylinderInclination.r[1](quantity = "Length", unit = "m") = engine.cylinder4.crankLength - engine.cylinder4.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder4.CylinderInclination.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder4.CylinderInclination.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.CylinderInclination.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.CylinderInclination.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.CylinderInclination.angle(quantity = "Angle", unit = "deg") = engine.cylinder4.cylinderInclination " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder4.CylinderInclination.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder4.CylinderInclination.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder4.CylinderInclination.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder4.CylinderInclination.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder4.CylinderInclination.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder4.CylinderInclination.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder4.CylinderInclination.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder4.CylinderInclination.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.CylinderInclination.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.lengthDirection[1](unit = "1") = engine.cylinder4.CylinderInclination.r[1] - engine.cylinder4.CylinderInclination.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.lengthDirection[2](unit = "1") = engine.cylinder4.CylinderInclination.r[2] - engine.cylinder4.CylinderInclination.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.lengthDirection[3](unit = "1") = engine.cylinder4.CylinderInclination.r[3] - engine.cylinder4.CylinderInclination.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CylinderInclination.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.CylinderInclination.r[1] - engine.cylinder4.CylinderInclination.r_shape[1],engine.cylinder4.CylinderInclination.r[2] - engine.cylinder4.CylinderInclination.r_shape[2],engine.cylinder4.CylinderInclination.r[3] - engine.cylinder4.CylinderInclination.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.CylinderInclination.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.CylinderInclination.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.CylinderInclination.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.CylinderInclination.width " Height of shape.";
//   parameter Real engine.cylinder4.CylinderInclination.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.CylinderInclination.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.CylinderInclination.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.CylinderInclination.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.CylinderInclination.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CylinderInclination.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankAngle.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankAngle.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankAngle.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankAngle.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankAngle.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankAngle.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.CrankAngle.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.CrankAngle.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder4.CrankAngle.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder4.CrankAngle.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.CrankAngle.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.CrankAngle.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.CrankAngle.angle(quantity = "Angle", unit = "deg") = engine.cylinder4.crankAngleOffset " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder4.CrankAngle.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder4.CrankAngle.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder4.CrankAngle.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder4.CrankAngle.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder4.CrankAngle.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder4.CrankAngle.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder4.CrankAngle.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder4.CrankAngle.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.CrankAngle.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.lengthDirection[1](unit = "1") = engine.cylinder4.CrankAngle.r[1] - engine.cylinder4.CrankAngle.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.lengthDirection[2](unit = "1") = engine.cylinder4.CrankAngle.r[2] - engine.cylinder4.CrankAngle.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.lengthDirection[3](unit = "1") = engine.cylinder4.CrankAngle.r[3] - engine.cylinder4.CrankAngle.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.CrankAngle.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.CrankAngle.r[1] - engine.cylinder4.CrankAngle.r_shape[1],engine.cylinder4.CrankAngle.r[2] - engine.cylinder4.CrankAngle.r_shape[2],engine.cylinder4.CrankAngle.r[3] - engine.cylinder4.CrankAngle.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.CrankAngle.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.CrankAngle.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.CrankAngle.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.CrankAngle.width " Height of shape.";
//   parameter Real engine.cylinder4.CrankAngle.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.CrankAngle.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.CrankAngle.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.CrankAngle.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.CrankAngle.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[2,2] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.T[3,3] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[2,2] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.T[3,3] = -0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.CrankAngle.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.jointRRP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder4.jointRRP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.jointRRP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder4.jointRRP.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.jointRRP.n_a[1](unit = "1") = 1.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder4.jointRRP.n_a[2](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder4.jointRRP.n_a[3](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder4.jointRRP.n_b[1](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder4.jointRRP.n_b[2](unit = "1") = -1.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder4.jointRRP.n_b[3](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder4.jointRRP.rRod1_ia[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder4.rodLength "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.rRod1_ia[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.rRod2_ib[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder4.jointRRP.rRod2_ib[2](quantity = "Length", unit = "m") = -engine.cylinder4.pistonLength "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder4.jointRRP.rRod2_ib[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder4.jointRRP.s_offset(quantity = "Length", unit = "m") = -engine.cylinder4.cylinderTopPosition "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder4.jointRRP.s_guess(quantity = "Length", unit = "m") = 0.0 "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder4.jointRRP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the revolute joints";
//   parameter Real engine.cylinder4.jointRRP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the revolute joints";
//   input Integer engine.cylinder4.jointRRP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder4.jointRRP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder4.jointRRP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   parameter Real engine.cylinder4.jointRRP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder4.jointRRP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.boxColor[1](min = 0, max = 255) = engine.cylinder4.jointRRP.cylinderColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.boxColor[2](min = 0, max = 255) = engine.cylinder4.jointRRP.cylinderColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.boxColor[3](min = 0, max = 255) = engine.cylinder4.jointRRP.cylinderColor[3] "Color of prismatic joint box";
//   parameter Real engine.cylinder4.jointRRP.rodDiameter(quantity = "Length", unit = "m", min = 0.0) = 1.1 * engine.cylinder4.jointRRP.cylinderDiameter "Diameter of the two rods connecting the joints";
//   input Integer engine.cylinder4.jointRRP.rodColor[1](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder4.jointRRP.rodColor[2](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder4.jointRRP.rodColor[3](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Real engine.cylinder4.jointRRP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.jointRRP.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder4.jointRRP.e_a[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.n_a[1],engine.cylinder4.jointRRP.n_a[2],engine.cylinder4.jointRRP.n_a[3]},1e-13)[1] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.e_a[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.n_a[1],engine.cylinder4.jointRRP.n_a[2],engine.cylinder4.jointRRP.n_a[3]},1e-13)[2] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.e_a[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.n_a[1],engine.cylinder4.jointRRP.n_a[2],engine.cylinder4.jointRRP.n_a[3]},1e-13)[3] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.e_ia[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.e2_ia[1] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.e_ia[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.e2_ia[2] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.e_ia[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.e2_ia[3] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.e_im[1](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder4.jointRRP.e_im[2](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder4.jointRRP.e_im[3](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder4.jointRRP.e_b[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.prismatic.e[1] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder4.jointRRP.e_b[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.prismatic.e[2] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder4.jointRRP.e_b[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.prismatic.e[3] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   Real engine.cylinder4.jointRRP.totalPower(quantity = "Power", unit = "W") = engine.cylinder4.jointRRP.jointUSP.totalPower "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.jointRRP.jointUSP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder4.jointRRP.jointUSP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.jointRRP.jointUSP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.animation = false "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.showUniversalAxes = false " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.n1_a[1](unit = "1") = engine.cylinder4.jointRRP.n_a[1] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.n1_a[2](unit = "1") = engine.cylinder4.jointRRP.n_a[2] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.n1_a[3](unit = "1") = engine.cylinder4.jointRRP.n_a[3] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.n_b[1](unit = "1") = engine.cylinder4.jointRRP.n_b[1] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.n_b[2](unit = "1") = engine.cylinder4.jointRRP.n_b[2] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.n_b[3](unit = "1") = engine.cylinder4.jointRRP.n_b[3] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rRod1_ia[1](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.rRod1_ia[1] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.rRod1_ia[2] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rRod1_ia[3](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.rRod1_ia[3] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rRod2_ib[1](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.rRod2_ib[1] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rRod2_ib[2](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.rRod2_ib[2] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rRod2_ib[3](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.rRod2_ib[3] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.s_offset(quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.s_offset "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.s_guess(quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.sphereColor[1](min = 0, max = 255) = 255 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.sphereColor[2](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.sphereColor[3](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.sphereDiameter / 2.0 "Diameter of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1Color[1](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1Color[2](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1Color[3](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.rod1Diameter "Diameter of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod2Color[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod1Color[1] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod2Color[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod1Color[2] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod2Color[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod1Color[3] "Color of rod 2 connecting the prismatic and the spherical joint";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.jointUSP.boxColor[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.sphereColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.jointUSP.boxColor[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.sphereColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.jointUSP.boxColor[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.sphereColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder4.jointRRP.jointUSP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder4.jointRRP.jointUSP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder4.jointRRP.jointUSP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder4.jointRRP.jointUSP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.checkTotalPower = engine.cylinder4.jointRRP.checkTotalPower "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.eRod1_ia[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.eRod1_ia[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.eRod1_ia[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.e2_ia[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.e2_ia[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.e2_ia[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1Length(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.rod1.rodLength "Length of rod 1 (= distance between universal and spherical joint";
//   Real engine.cylinder4.jointRRP.jointUSP.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   Real engine.cylinder4.jointRRP.jointUSP.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.prismatic.animation = engine.cylinder4.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.length(quantity = "Length", unit = "m", start = 1.0) = engine.cylinder4.jointRRP.jointUSP.rod1.rodLength "Fixed length of length constraint";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.n[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.n_b[1] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.n[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.n_b[2] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.n[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.n_b[3] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.s_offset(quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.s_offset "Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.s_guess(quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.boxWidthDirection[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.boxWidthDirection[1] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.boxWidthDirection[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.boxWidthDirection[2] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.boxWidthDirection[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.boxWidthDirection[3] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.boxWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.boxWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.boxHeight "Height of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.jointUSP.prismatic.boxColor[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.boxColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.jointUSP.prismatic.boxColor[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.boxColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder4.jointRRP.jointUSP.prismatic.boxColor[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.boxColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder4.jointRRP.jointUSP.prismatic.specularCoefficient = engine.cylinder4.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.prismatic.positiveBranch(fixed = false) "Selection of one of the two solutions of the non-linear constraint equation";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.prismatic.n[1],engine.cylinder4.jointRRP.jointUSP.prismatic.n[2],engine.cylinder4.jointRRP.jointUSP.prismatic.n[3]},1e-13)[1] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.prismatic.n[1],engine.cylinder4.jointRRP.jointUSP.prismatic.n[2],engine.cylinder4.jointRRP.jointUSP.prismatic.n[3]},1e-13)[2] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.prismatic.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.prismatic.n[1],engine.cylinder4.jointRRP.jointUSP.prismatic.n[2],engine.cylinder4.jointRRP.jointUSP.prismatic.n[3]},1e-13)[3] "Unit vector in direction of translation axis, resolved in frame_a";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.s(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n = s + s_offset)";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.distance(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder4.jointRRP.jointUSP.prismatic.f(quantity = "Force", unit = "N") "= axis.f (driving force in the axis)";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[1](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[2](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[3](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[1](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[2](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[3](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[1](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[2](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[3](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.B "Coefficient B of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.C "Coefficient C of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.k1 "Constant of quadratic equation solution";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.k2 "Constant of quadratic equation solution";
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.k1a(start = 1.0);
//   protected Real engine.cylinder4.jointRRP.jointUSP.prismatic.k1b;
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.rod1.animation = engine.cylinder4.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.rod1.showUniversalAxes = engine.cylinder4.jointRRP.jointUSP.showUniversalAxes " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.rod1.computeRodLength = false "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.n1_a[1] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.n1_a[2] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.n1_a[3] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.rRod1_ia[1] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.rRod1_ia[2] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3](quantity = "Length", unit = "m") = engine.cylinder4.jointRRP.jointUSP.rRod1_ia[3] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.sphereDiameter "Diameter of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.sphereColor[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.sphereColor[1] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.sphereColor[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.sphereColor[2] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.sphereColor[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.sphereColor[3] "Color of spheres representing the universal and the spherical joint";
//   parameter String engine.cylinder4.jointRRP.jointUSP.rod1.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rodWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.rod1Diameter "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rodHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.rod1Diameter "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.rodColor[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod1Color[1] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.rodColor[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod1Color[2] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.rodColor[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod1Color[3] "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.cylinderLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.cylinderDiameter "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.cylinderColor[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.cylinderColor[1] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.cylinderColor[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.cylinderColor[2] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod1.cylinderColor[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.cylinderColor[3] "Color of cylinders representing the two universal joint axes";
//   input Real engine.cylinder4.jointRRP.jointUSP.rod1.specularCoefficient = engine.cylinder4.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.rod1.kinematicConstraint = false "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.constraintResidue = engine.cylinder4.jointRRP.jointUSP.rod1.f_rod - engine.cylinder4.jointRRP.jointUSP.f_rod "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.rod1.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT engine.cylinder4.jointRRP.jointUSP.rod1.computeRodLength) = Modelica.Math.Vectors.length({engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.e3_ia[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[3] - engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.e3_ia[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[1] - engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod1.e3_ia[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[2] - engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[1](quantity = "Length", unit = "m", start = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[2](quantity = "Length", unit = "m", start = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[3](quantity = "Length", unit = "m", start = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[1](quantity = "Length", unit = "m", start = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[2](quantity = "Length", unit = "m", start = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[3](quantity = "Length", unit = "m", start = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.jointRRP.jointUSP.rod2.animation = engine.cylinder4.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.jointRRP.jointUSP.rRod2_ib[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.jointRRP.jointUSP.rRod2_ib[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.jointRRP.jointUSP.rRod2_ib[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder4.jointRRP.jointUSP.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.lengthDirection[1](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod2.r[1] - engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.lengthDirection[2](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod2.r[2] - engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.lengthDirection[3](unit = "1") = engine.cylinder4.jointRRP.jointUSP.rod2.r[3] - engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.jointRRP.jointUSP.rod2.r[1] - engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[1],engine.cylinder4.jointRRP.jointUSP.rod2.r[2] - engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[2],engine.cylinder4.jointRRP.jointUSP.rod2.r[3] - engine.cylinder4.jointRRP.jointUSP.rod2.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.rod2Diameter " Width of shape";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.jointRRP.jointUSP.rod2Diameter " Height of shape.";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod2.color[1](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod2Color[1] " Color of shape";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod2.color[2](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod2Color[2] " Color of shape";
//   input Integer engine.cylinder4.jointRRP.jointUSP.rod2.color[3](min = 0, max = 255) = engine.cylinder4.jointRRP.jointUSP.rod2Color[3] " Color of shape";
//   input Real engine.cylinder4.jointRRP.jointUSP.rod2.specularCoefficient = engine.cylinder4.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder4.jointRRP.jointUSP.relativePosition.r_rel[1] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder4.jointRRP.jointUSP.relativePosition.r_rel[2] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder4.jointRRP.jointUSP.relativePosition.r_rel[3] "Relative position vector resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder4.jointRRP.jointUSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a "Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.resolveInFrame = engine.cylinder4.jointRRP.jointUSP.relativePosition.resolveInFrame "Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder4.jointRRP.jointUSP.position_b[1].y "Connector of Real output signal";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.position_b[1].k(start = 1.0) = engine.cylinder4.jointRRP.jointUSP.rRod2_ib[1] "Constant output value";
//   output Real engine.cylinder4.jointRRP.jointUSP.position_b[2].y "Connector of Real output signal";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.position_b[2].k(start = 1.0) = engine.cylinder4.jointRRP.jointUSP.rRod2_ib[2] "Constant output value";
//   output Real engine.cylinder4.jointRRP.jointUSP.position_b[3].y "Connector of Real output signal";
//   parameter Real engine.cylinder4.jointRRP.jointUSP.position_b[3].k(start = 1.0) = engine.cylinder4.jointRRP.jointUSP.rRod2_ib[3] "Constant output value";
//   protected Real engine.cylinder4.jointRRP.jointUSP.aux "Denominator used to compute force in rod connecting universal and spherical joint";
//   Real engine.cylinder4.Rod.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Rod.animation = engine.cylinder4.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder4.Rod.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder4.Rod.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.rodLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.rodLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder4.rodMass "Mass of rigid body";
//   parameter Real engine.cylinder4.Rod.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.rodInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.rodInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.rodInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder4.Rod.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Rod.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Rod.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Rod.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Rod.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Rod.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Rod.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Rod.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Rod.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder4.Rod.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Rod.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Rod.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Rod.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder4.Rod.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Rod.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Rod.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder4.Rod.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Rod.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Rod.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Rod.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder4.Rod.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Rod.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Rod.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Rod.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder4.Rod.shapeType = "2" " Type of shape";
//   parameter Real engine.cylinder4.Rod.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.length(quantity = "Length", unit = "m") = engine.cylinder4.rodLength / 1.75 " Length of shape";
//   parameter Real engine.cylinder4.Rod.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.rodLength / 1.75 " Width of shape";
//   parameter Real engine.cylinder4.Rod.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.rodLength / 1.75 " Height of shape.";
//   parameter Real engine.cylinder4.Rod.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Rod.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Rod.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Rod.color[3](min = 0, max = 255) = 155 " Color of shape";
//   parameter Real engine.cylinder4.Rod.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder4.Rod.width " Diameter of sphere";
//   input Integer engine.cylinder4.Rod.sphereColor[1](min = 0, max = 255) = engine.cylinder4.Rod.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder4.Rod.sphereColor[2](min = 0, max = 255) = engine.cylinder4.Rod.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder4.Rod.sphereColor[3](min = 0, max = 255) = engine.cylinder4.Rod.color[3] " Color of sphere of mass";
//   input Real engine.cylinder4.Rod.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.Rod.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder4.Rod.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder4.Rod.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Rod.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Rod.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Rod.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.Rod.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Rod.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Rod.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Rod.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder4.Rod.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.Rod.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder4.Rod.frameTranslation.r[1] - engine.cylinder4.Rod.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder4.Rod.frameTranslation.r[2] - engine.cylinder4.Rod.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder4.Rod.frameTranslation.r[3] - engine.cylinder4.Rod.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.Rod.frameTranslation.r[1] - engine.cylinder4.Rod.frameTranslation.r_shape[1],engine.cylinder4.Rod.frameTranslation.r[2] - engine.cylinder4.Rod.frameTranslation.r_shape[2],engine.cylinder4.Rod.frameTranslation.r[3] - engine.cylinder4.Rod.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.Rod.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Rod.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.Rod.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Rod.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder4.Rod.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Rod.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Rod.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Rod.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.Rod.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder4.Rod.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Rod.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Rod.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Rod.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Rod.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder4.Rod.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Rod.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Rod.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Rod.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder4.Rod.m "Mass of rigid body";
//   parameter Real engine.cylinder4.Rod.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.Rod.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.Rod.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.Rod.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder4.Rod.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder4.Rod.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder4.Rod.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder4.Rod.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Rod.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Rod.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Rod.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Rod.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Rod.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Rod.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Rod.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Rod.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder4.Rod.body.angles_fixed = engine.cylinder4.Rod.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Rod.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder4.Rod.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Rod.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder4.Rod.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Rod.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder4.Rod.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder4.Rod.body.sequence_start[1](min = 1, max = 3) = engine.cylinder4.Rod.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Rod.body.sequence_start[2](min = 1, max = 3) = engine.cylinder4.Rod.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Rod.body.sequence_start[3](min = 1, max = 3) = engine.cylinder4.Rod.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder4.Rod.body.w_0_fixed = engine.cylinder4.Rod.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Rod.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder4.Rod.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Rod.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder4.Rod.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Rod.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder4.Rod.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder4.Rod.body.z_0_fixed = engine.cylinder4.Rod.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Rod.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder4.Rod.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Rod.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder4.Rod.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Rod.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder4.Rod.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Rod.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder4.Rod.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder4.Rod.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder4.Rod.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder4.Rod.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Rod.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder4.Rod.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder4.Rod.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder4.Rod.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder4.Rod.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder4.Rod.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder4.Rod.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder4.Rod.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.Rod.body.enforceStates = engine.cylinder4.Rod.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder4.Rod.body.useQuaternions = engine.cylinder4.Rod.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder4.Rod.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder4.Rod.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Rod.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder4.Rod.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Rod.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder4.Rod.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder4.Rod.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Rod.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.Rod.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.Rod.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.z_0_start[1],engine.cylinder4.Rod.body.z_0_start[2],engine.cylinder4.Rod.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.z_0_start[1],engine.cylinder4.Rod.body.z_0_start[2],engine.cylinder4.Rod.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder4.Rod.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.z_0_start[1],engine.cylinder4.Rod.body.z_0_start[2],engine.cylinder4.Rod.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder4.Rod.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.w_0_start[1],engine.cylinder4.Rod.body.w_0_start[2],engine.cylinder4.Rod.body.w_0_start[3]})[1], fixed = engine.cylinder4.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder4.Rod.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.w_0_start[1],engine.cylinder4.Rod.body.w_0_start[2],engine.cylinder4.Rod.body.w_0_start[3]})[2], fixed = engine.cylinder4.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder4.Rod.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.w_0_start[1],engine.cylinder4.Rod.body.w_0_start[2],engine.cylinder4.Rod.body.w_0_start[3]})[3], fixed = engine.cylinder4.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder4.Rod.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.z_0_start[1],engine.cylinder4.Rod.body.z_0_start[2],engine.cylinder4.Rod.body.z_0_start[3]})[1], fixed = engine.cylinder4.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder4.Rod.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.z_0_start[1],engine.cylinder4.Rod.body.z_0_start[2],engine.cylinder4.Rod.body.z_0_start[3]})[2], fixed = engine.cylinder4.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder4.Rod.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.z_0_start[1],engine.cylinder4.Rod.body.z_0_start[2],engine.cylinder4.Rod.body.z_0_start[3]})[3], fixed = engine.cylinder4.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder4.Rod.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder4.Rod.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder4.Rod.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder4.Rod.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder4.Rod.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder4.Rod.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder4.Rod.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder4.Rod.body.Q[1](start = engine.cylinder4.Rod.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder4.Rod.body.Q[2](start = engine.cylinder4.Rod.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder4.Rod.body.Q[3](start = engine.cylinder4.Rod.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder4.Rod.body.Q[4](start = engine.cylinder4.Rod.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder4.Rod.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder4.Rod.body.sequence_start[1] == engine.cylinder4.Rod.body.sequence_angleStates[1] AND engine.cylinder4.Rod.body.sequence_start[2] == engine.cylinder4.Rod.body.sequence_angleStates[2] AND engine.cylinder4.Rod.body.sequence_start[3] == engine.cylinder4.Rod.body.sequence_angleStates[3] then engine.cylinder4.Rod.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.sequence_angleStates[1],engine.cylinder4.Rod.body.sequence_angleStates[2],engine.cylinder4.Rod.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder4.Rod.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder4.Rod.body.sequence_start[1] == engine.cylinder4.Rod.body.sequence_angleStates[1] AND engine.cylinder4.Rod.body.sequence_start[2] == engine.cylinder4.Rod.body.sequence_angleStates[2] AND engine.cylinder4.Rod.body.sequence_start[3] == engine.cylinder4.Rod.body.sequence_angleStates[3] then engine.cylinder4.Rod.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.sequence_angleStates[1],engine.cylinder4.Rod.body.sequence_angleStates[2],engine.cylinder4.Rod.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder4.Rod.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder4.Rod.body.sequence_start[1] == engine.cylinder4.Rod.body.sequence_angleStates[1] AND engine.cylinder4.Rod.body.sequence_start[2] == engine.cylinder4.Rod.body.sequence_angleStates[2] AND engine.cylinder4.Rod.body.sequence_start[3] == engine.cylinder4.Rod.body.sequence_angleStates[3] then engine.cylinder4.Rod.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder4.Rod.body.R_start,{engine.cylinder4.Rod.body.sequence_angleStates[1],engine.cylinder4.Rod.body.sequence_angleStates[2],engine.cylinder4.Rod.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder4.Rod.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder4.Rod.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder4.Rod.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder4.Rod.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder4.Rod.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder4.Rod.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder4.Rod.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder4.Rod.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder4.Rod.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder4.Rod.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder4.Rod.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder4.Rod.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder4.Rod.shape1.shapeType = engine.cylinder4.Rod.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder4.Rod.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Rod.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.Rod.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.Rod.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.Rod.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder4.Rod.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.Rod.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder4.Rod.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.Rod.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder4.Rod.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.Rod.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder4.Rod.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder4.Rod.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder4.Rod.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.lengthDirection[1](unit = "1") = engine.cylinder4.Rod.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.lengthDirection[2](unit = "1") = engine.cylinder4.Rod.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.lengthDirection[3](unit = "1") = engine.cylinder4.Rod.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.widthDirection[1](unit = "1") = engine.cylinder4.Rod.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.widthDirection[2](unit = "1") = engine.cylinder4.Rod.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.widthDirection[3](unit = "1") = engine.cylinder4.Rod.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.Rod.shape1.length(quantity = "Length", unit = "m") = engine.cylinder4.Rod.length "Length of visual object";
//   input Real engine.cylinder4.Rod.shape1.width(quantity = "Length", unit = "m") = engine.cylinder4.Rod.width "Width of visual object";
//   input Real engine.cylinder4.Rod.shape1.height(quantity = "Length", unit = "m") = engine.cylinder4.Rod.height "Height of visual object";
//   input Real engine.cylinder4.Rod.shape1.extra = engine.cylinder4.Rod.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder4.Rod.shape1.color[1] = Real(engine.cylinder4.Rod.color[1]) "Color of shape";
//   input Real engine.cylinder4.Rod.shape1.color[2] = Real(engine.cylinder4.Rod.color[2]) "Color of shape";
//   input Real engine.cylinder4.Rod.shape1.color[3] = Real(engine.cylinder4.Rod.color[3]) "Color of shape";
//   input Real engine.cylinder4.Rod.shape1.specularCoefficient = engine.cylinder4.Rod.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder4.Rod.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder4.Rod.shape1.lengthDirection[1],engine.cylinder4.Rod.shape1.lengthDirection[2],engine.cylinder4.Rod.shape1.lengthDirection[3]});
//   protected Real engine.cylinder4.Rod.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder4.Rod.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder4.Rod.shape1.lengthDirection[1] / engine.cylinder4.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder4.Rod.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder4.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder4.Rod.shape1.lengthDirection[2] / engine.cylinder4.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder4.Rod.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder4.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder4.Rod.shape1.lengthDirection[3] / engine.cylinder4.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder4.Rod.shape1.n_z_aux[1](unit = "1") = engine.cylinder4.Rod.shape1.e_x[2] * engine.cylinder4.Rod.shape1.widthDirection[3] - engine.cylinder4.Rod.shape1.e_x[3] * engine.cylinder4.Rod.shape1.widthDirection[2];
//   protected Real engine.cylinder4.Rod.shape1.n_z_aux[2](unit = "1") = engine.cylinder4.Rod.shape1.e_x[3] * engine.cylinder4.Rod.shape1.widthDirection[1] - engine.cylinder4.Rod.shape1.e_x[1] * engine.cylinder4.Rod.shape1.widthDirection[3];
//   protected Real engine.cylinder4.Rod.shape1.n_z_aux[3](unit = "1") = engine.cylinder4.Rod.shape1.e_x[1] * engine.cylinder4.Rod.shape1.widthDirection[2] - engine.cylinder4.Rod.shape1.e_x[2] * engine.cylinder4.Rod.shape1.widthDirection[1];
//   protected Real engine.cylinder4.Rod.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.Rod.shape1.e_x[1],engine.cylinder4.Rod.shape1.e_x[2],engine.cylinder4.Rod.shape1.e_x[3]},if noEvent(engine.cylinder4.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder4.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder4.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.Rod.shape1.widthDirection[1],engine.cylinder4.Rod.shape1.widthDirection[2],engine.cylinder4.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder4.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.Rod.shape1.e_x[1],engine.cylinder4.Rod.shape1.e_x[2],engine.cylinder4.Rod.shape1.e_x[3]})[1];
//   protected Real engine.cylinder4.Rod.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.Rod.shape1.e_x[1],engine.cylinder4.Rod.shape1.e_x[2],engine.cylinder4.Rod.shape1.e_x[3]},if noEvent(engine.cylinder4.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder4.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder4.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.Rod.shape1.widthDirection[1],engine.cylinder4.Rod.shape1.widthDirection[2],engine.cylinder4.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder4.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.Rod.shape1.e_x[1],engine.cylinder4.Rod.shape1.e_x[2],engine.cylinder4.Rod.shape1.e_x[3]})[2];
//   protected Real engine.cylinder4.Rod.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.Rod.shape1.e_x[1],engine.cylinder4.Rod.shape1.e_x[2],engine.cylinder4.Rod.shape1.e_x[3]},if noEvent(engine.cylinder4.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder4.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder4.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.Rod.shape1.widthDirection[1],engine.cylinder4.Rod.shape1.widthDirection[2],engine.cylinder4.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder4.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.Rod.shape1.e_x[1],engine.cylinder4.Rod.shape1.e_x[2],engine.cylinder4.Rod.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder4.Rod.shape1.Form;
//   output Real engine.cylinder4.Rod.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder4.Rod.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder4.Rod.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.Rod.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.Rod.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.Rod.shape1.Material;
//   protected output Real engine.cylinder4.Rod.shape1.Extra;
//   Real engine.cylinder4.Piston.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Piston.animation = engine.cylinder4.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder4.Piston.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder4.Piston.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.pistonLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.pistonLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder4.pistonMass "Mass of rigid body";
//   parameter Real engine.cylinder4.Piston.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.pistonInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.pistonInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.pistonInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder4.Piston.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Piston.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Piston.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Piston.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Piston.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Piston.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Piston.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Piston.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Piston.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder4.Piston.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Piston.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Piston.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Piston.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder4.Piston.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Piston.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Piston.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder4.Piston.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Piston.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Piston.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Piston.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder4.Piston.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Piston.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Piston.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Piston.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder4.Piston.shapeType = "3" " Type of shape";
//   parameter Real engine.cylinder4.Piston.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.length(quantity = "Length", unit = "m") = 0.08 " Length of shape";
//   parameter Real engine.cylinder4.Piston.width(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Width of shape";
//   parameter Real engine.cylinder4.Piston.height(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Height of shape.";
//   parameter Real engine.cylinder4.Piston.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Piston.color[1](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder4.Piston.color[2](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder4.Piston.color[3](min = 0, max = 255) = 180 " Color of shape";
//   parameter Real engine.cylinder4.Piston.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder4.Piston.width " Diameter of sphere";
//   input Integer engine.cylinder4.Piston.sphereColor[1](min = 0, max = 255) = engine.cylinder4.Piston.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder4.Piston.sphereColor[2](min = 0, max = 255) = engine.cylinder4.Piston.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder4.Piston.sphereColor[3](min = 0, max = 255) = engine.cylinder4.Piston.color[3] " Color of sphere of mass";
//   input Real engine.cylinder4.Piston.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.Piston.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder4.Piston.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder4.Piston.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Piston.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Piston.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Piston.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.Piston.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Piston.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Piston.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Piston.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder4.Piston.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.Piston.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder4.Piston.frameTranslation.r[1] - engine.cylinder4.Piston.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder4.Piston.frameTranslation.r[2] - engine.cylinder4.Piston.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder4.Piston.frameTranslation.r[3] - engine.cylinder4.Piston.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.Piston.frameTranslation.r[1] - engine.cylinder4.Piston.frameTranslation.r_shape[1],engine.cylinder4.Piston.frameTranslation.r[2] - engine.cylinder4.Piston.frameTranslation.r_shape[2],engine.cylinder4.Piston.frameTranslation.r[3] - engine.cylinder4.Piston.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.Piston.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Piston.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.Piston.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Piston.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder4.Piston.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Piston.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Piston.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Piston.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.Piston.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder4.Piston.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Piston.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Piston.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder4.Piston.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Piston.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Piston.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.Piston.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder4.Piston.m "Mass of rigid body";
//   parameter Real engine.cylinder4.Piston.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.Piston.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.Piston.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder4.Piston.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder4.Piston.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder4.Piston.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder4.Piston.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder4.Piston.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Piston.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Piston.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder4.Piston.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Piston.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Piston.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder4.Piston.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Piston.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder4.Piston.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder4.Piston.body.angles_fixed = engine.cylinder4.Piston.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Piston.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder4.Piston.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Piston.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder4.Piston.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder4.Piston.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder4.Piston.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder4.Piston.body.sequence_start[1](min = 1, max = 3) = engine.cylinder4.Piston.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Piston.body.sequence_start[2](min = 1, max = 3) = engine.cylinder4.Piston.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder4.Piston.body.sequence_start[3](min = 1, max = 3) = engine.cylinder4.Piston.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder4.Piston.body.w_0_fixed = engine.cylinder4.Piston.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Piston.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder4.Piston.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Piston.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder4.Piston.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder4.Piston.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder4.Piston.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder4.Piston.body.z_0_fixed = engine.cylinder4.Piston.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder4.Piston.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder4.Piston.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Piston.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder4.Piston.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Piston.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder4.Piston.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder4.Piston.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder4.Piston.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder4.Piston.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder4.Piston.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder4.Piston.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Piston.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder4.Piston.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder4.Piston.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder4.Piston.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder4.Piston.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder4.Piston.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder4.Piston.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder4.Piston.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder4.Piston.body.enforceStates = engine.cylinder4.Piston.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder4.Piston.body.useQuaternions = engine.cylinder4.Piston.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder4.Piston.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder4.Piston.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Piston.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder4.Piston.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder4.Piston.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder4.Piston.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder4.Piston.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder4.Piston.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.Piston.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder4.Piston.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.z_0_start[1],engine.cylinder4.Piston.body.z_0_start[2],engine.cylinder4.Piston.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.z_0_start[1],engine.cylinder4.Piston.body.z_0_start[2],engine.cylinder4.Piston.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder4.Piston.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.z_0_start[1],engine.cylinder4.Piston.body.z_0_start[2],engine.cylinder4.Piston.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder4.Piston.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.w_0_start[1],engine.cylinder4.Piston.body.w_0_start[2],engine.cylinder4.Piston.body.w_0_start[3]})[1], fixed = engine.cylinder4.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder4.Piston.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.w_0_start[1],engine.cylinder4.Piston.body.w_0_start[2],engine.cylinder4.Piston.body.w_0_start[3]})[2], fixed = engine.cylinder4.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder4.Piston.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.w_0_start[1],engine.cylinder4.Piston.body.w_0_start[2],engine.cylinder4.Piston.body.w_0_start[3]})[3], fixed = engine.cylinder4.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder4.Piston.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.z_0_start[1],engine.cylinder4.Piston.body.z_0_start[2],engine.cylinder4.Piston.body.z_0_start[3]})[1], fixed = engine.cylinder4.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder4.Piston.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.z_0_start[1],engine.cylinder4.Piston.body.z_0_start[2],engine.cylinder4.Piston.body.z_0_start[3]})[2], fixed = engine.cylinder4.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder4.Piston.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.z_0_start[1],engine.cylinder4.Piston.body.z_0_start[2],engine.cylinder4.Piston.body.z_0_start[3]})[3], fixed = engine.cylinder4.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder4.Piston.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder4.Piston.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder4.Piston.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder4.Piston.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder4.Piston.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder4.Piston.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder4.Piston.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder4.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder4.Piston.body.Q[1](start = engine.cylinder4.Piston.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder4.Piston.body.Q[2](start = engine.cylinder4.Piston.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder4.Piston.body.Q[3](start = engine.cylinder4.Piston.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder4.Piston.body.Q[4](start = engine.cylinder4.Piston.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder4.Piston.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder4.Piston.body.sequence_start[1] == engine.cylinder4.Piston.body.sequence_angleStates[1] AND engine.cylinder4.Piston.body.sequence_start[2] == engine.cylinder4.Piston.body.sequence_angleStates[2] AND engine.cylinder4.Piston.body.sequence_start[3] == engine.cylinder4.Piston.body.sequence_angleStates[3] then engine.cylinder4.Piston.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.sequence_angleStates[1],engine.cylinder4.Piston.body.sequence_angleStates[2],engine.cylinder4.Piston.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder4.Piston.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder4.Piston.body.sequence_start[1] == engine.cylinder4.Piston.body.sequence_angleStates[1] AND engine.cylinder4.Piston.body.sequence_start[2] == engine.cylinder4.Piston.body.sequence_angleStates[2] AND engine.cylinder4.Piston.body.sequence_start[3] == engine.cylinder4.Piston.body.sequence_angleStates[3] then engine.cylinder4.Piston.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.sequence_angleStates[1],engine.cylinder4.Piston.body.sequence_angleStates[2],engine.cylinder4.Piston.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder4.Piston.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder4.Piston.body.sequence_start[1] == engine.cylinder4.Piston.body.sequence_angleStates[1] AND engine.cylinder4.Piston.body.sequence_start[2] == engine.cylinder4.Piston.body.sequence_angleStates[2] AND engine.cylinder4.Piston.body.sequence_start[3] == engine.cylinder4.Piston.body.sequence_angleStates[3] then engine.cylinder4.Piston.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder4.Piston.body.R_start,{engine.cylinder4.Piston.body.sequence_angleStates[1],engine.cylinder4.Piston.body.sequence_angleStates[2],engine.cylinder4.Piston.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder4.Piston.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder4.Piston.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder4.Piston.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder4.Piston.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder4.Piston.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder4.Piston.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder4.Piston.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder4.Piston.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder4.Piston.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder4.Piston.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder4.Piston.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder4.Piston.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder4.Piston.shape1.shapeType = engine.cylinder4.Piston.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder4.Piston.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.Piston.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.Piston.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.Piston.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.Piston.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder4.Piston.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.Piston.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder4.Piston.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.Piston.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder4.Piston.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.Piston.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder4.Piston.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder4.Piston.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder4.Piston.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.lengthDirection[1](unit = "1") = engine.cylinder4.Piston.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.lengthDirection[2](unit = "1") = engine.cylinder4.Piston.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.lengthDirection[3](unit = "1") = engine.cylinder4.Piston.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.widthDirection[1](unit = "1") = engine.cylinder4.Piston.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.widthDirection[2](unit = "1") = engine.cylinder4.Piston.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.widthDirection[3](unit = "1") = engine.cylinder4.Piston.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.Piston.shape1.length(quantity = "Length", unit = "m") = engine.cylinder4.Piston.length "Length of visual object";
//   input Real engine.cylinder4.Piston.shape1.width(quantity = "Length", unit = "m") = engine.cylinder4.Piston.width "Width of visual object";
//   input Real engine.cylinder4.Piston.shape1.height(quantity = "Length", unit = "m") = engine.cylinder4.Piston.height "Height of visual object";
//   input Real engine.cylinder4.Piston.shape1.extra = engine.cylinder4.Piston.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder4.Piston.shape1.color[1] = Real(engine.cylinder4.Piston.color[1]) "Color of shape";
//   input Real engine.cylinder4.Piston.shape1.color[2] = Real(engine.cylinder4.Piston.color[2]) "Color of shape";
//   input Real engine.cylinder4.Piston.shape1.color[3] = Real(engine.cylinder4.Piston.color[3]) "Color of shape";
//   input Real engine.cylinder4.Piston.shape1.specularCoefficient = engine.cylinder4.Piston.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder4.Piston.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder4.Piston.shape1.lengthDirection[1],engine.cylinder4.Piston.shape1.lengthDirection[2],engine.cylinder4.Piston.shape1.lengthDirection[3]});
//   protected Real engine.cylinder4.Piston.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder4.Piston.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder4.Piston.shape1.lengthDirection[1] / engine.cylinder4.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder4.Piston.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder4.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder4.Piston.shape1.lengthDirection[2] / engine.cylinder4.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder4.Piston.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder4.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder4.Piston.shape1.lengthDirection[3] / engine.cylinder4.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder4.Piston.shape1.n_z_aux[1](unit = "1") = engine.cylinder4.Piston.shape1.e_x[2] * engine.cylinder4.Piston.shape1.widthDirection[3] - engine.cylinder4.Piston.shape1.e_x[3] * engine.cylinder4.Piston.shape1.widthDirection[2];
//   protected Real engine.cylinder4.Piston.shape1.n_z_aux[2](unit = "1") = engine.cylinder4.Piston.shape1.e_x[3] * engine.cylinder4.Piston.shape1.widthDirection[1] - engine.cylinder4.Piston.shape1.e_x[1] * engine.cylinder4.Piston.shape1.widthDirection[3];
//   protected Real engine.cylinder4.Piston.shape1.n_z_aux[3](unit = "1") = engine.cylinder4.Piston.shape1.e_x[1] * engine.cylinder4.Piston.shape1.widthDirection[2] - engine.cylinder4.Piston.shape1.e_x[2] * engine.cylinder4.Piston.shape1.widthDirection[1];
//   protected Real engine.cylinder4.Piston.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.Piston.shape1.e_x[1],engine.cylinder4.Piston.shape1.e_x[2],engine.cylinder4.Piston.shape1.e_x[3]},if noEvent(engine.cylinder4.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder4.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder4.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.Piston.shape1.widthDirection[1],engine.cylinder4.Piston.shape1.widthDirection[2],engine.cylinder4.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder4.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.Piston.shape1.e_x[1],engine.cylinder4.Piston.shape1.e_x[2],engine.cylinder4.Piston.shape1.e_x[3]})[1];
//   protected Real engine.cylinder4.Piston.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.Piston.shape1.e_x[1],engine.cylinder4.Piston.shape1.e_x[2],engine.cylinder4.Piston.shape1.e_x[3]},if noEvent(engine.cylinder4.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder4.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder4.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.Piston.shape1.widthDirection[1],engine.cylinder4.Piston.shape1.widthDirection[2],engine.cylinder4.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder4.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.Piston.shape1.e_x[1],engine.cylinder4.Piston.shape1.e_x[2],engine.cylinder4.Piston.shape1.e_x[3]})[2];
//   protected Real engine.cylinder4.Piston.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.Piston.shape1.e_x[1],engine.cylinder4.Piston.shape1.e_x[2],engine.cylinder4.Piston.shape1.e_x[3]},if noEvent(engine.cylinder4.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder4.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder4.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.Piston.shape1.widthDirection[1],engine.cylinder4.Piston.shape1.widthDirection[2],engine.cylinder4.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder4.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.Piston.shape1.e_x[1],engine.cylinder4.Piston.shape1.e_x[2],engine.cylinder4.Piston.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder4.Piston.shape1.Form;
//   output Real engine.cylinder4.Piston.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder4.Piston.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder4.Piston.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.Piston.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.Piston.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.Piston.shape1.Material;
//   protected output Real engine.cylinder4.Piston.shape1.Extra;
//   Real engine.cylinder4.gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder4.gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder4.gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder4.gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real engine.cylinder4.gasForce.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
//   parameter Real engine.cylinder4.gasForce.L(quantity = "Length", unit = "m") = engine.cylinder4.cylinderLength "Length of cylinder";
//   parameter Real engine.cylinder4.gasForce.d(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of cylinder";
//   parameter Real engine.cylinder4.gasForce.k0(quantity = "Volume", unit = "m3") = 0.01 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder4.gasForce.k1(quantity = "Volume", unit = "m3") = 1.0 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder4.gasForce.k(quantity = "HeatCapacity", unit = "J/K") = 1.0 "Gas constant (p*V = k*T)";
//   constant Real engine.cylinder4.gasForce.pi = 3.14159265358979;
//   Real engine.cylinder4.gasForce.x "Normalized position of cylinder";
//   Real engine.cylinder4.gasForce.y "Normalized relative movement (= -s_rel/L)";
//   Real engine.cylinder4.gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real engine.cylinder4.gasForce.press(quantity = "Pressure", unit = "bar") "cylinder pressure";
//   Real engine.cylinder4.gasForce.V(quantity = "Volume", unit = "m3");
//   Real engine.cylinder4.gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real engine.cylinder4.gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   protected constant Real engine.cylinder4.gasForce.unitMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0;
//   protected Real engine.cylinder4.gasForce.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar");
//   Real engine.cylinder4.Crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.Crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.Crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.Crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.Crank.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder4.Crank.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder4.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder4.Crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder4.Crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.lengthDirection[1](unit = "1") = engine.cylinder4.Crank.r[1] - engine.cylinder4.Crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.lengthDirection[2](unit = "1") = engine.cylinder4.Crank.r[2] - engine.cylinder4.Crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.lengthDirection[3](unit = "1") = engine.cylinder4.Crank.r[3] - engine.cylinder4.Crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder4.Crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder4.Crank.r[1] - engine.cylinder4.Crank.r_shape[1],engine.cylinder4.Crank.r[2] - engine.cylinder4.Crank.r_shape[2],engine.cylinder4.Crank.r[3] - engine.cylinder4.Crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder4.Crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder4.Crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder4.Crank.width " Height of shape.";
//   parameter Real engine.cylinder4.Crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder4.Crank.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Crank.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder4.Crank.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder4.Crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder4.cylinder_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.cylinder_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.cylinder_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.cylinder_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.cylinder_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.cylinder_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.cylinder_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.cylinder_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.cylinder_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.cylinder_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.cylinder_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.cylinder_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.cylinder_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.cylinder_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.cylinder_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.cylinder_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.cylinder_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.cylinder_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.cylinder_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.cylinder_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.cylinder_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.cylinder_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.cylinder_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.cylinder_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.cylinder_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.crank_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.crank_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.crank_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.crank_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.crank_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.crank_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.crank_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.crank_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.crank_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.crank_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.crank_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.crank_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.crank_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.crank_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.crank_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.crank_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.crank_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.crank_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.crank_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.crank_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.crank_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.crank_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.crank_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.crank_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.crank_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankShape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankShape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankShape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankShape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder4.CrankShape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankShape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankShape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder4.CrankShape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankShape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder4.CrankShape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder4.CrankShape.animation = engine.cylinder4.animation "= true, if animation shall be enabled";
//   parameter String engine.cylinder4.CrankShape.shapeType = "1" "Type of shape";
//   input Real engine.cylinder4.CrankShape.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder4.crankLength - engine.cylinder4.crankPinLength / 2.0 - 0.002 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder4.CrankShape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = engine.cylinder4.crankPinOffset / 0.5 "Length of shape";
//   input Real engine.cylinder4.CrankShape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder4.crankPinOffset / 0.5 "Width of shape";
//   input Real engine.cylinder4.CrankShape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder4.crankPinOffset / 0.5 "Height of shape";
//   input Integer engine.cylinder4.CrankShape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer engine.cylinder4.CrankShape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer engine.cylinder4.CrankShape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real engine.cylinder4.CrankShape.extra = 1.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real engine.cylinder4.CrankShape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String engine.cylinder4.CrankShape.vis.shapeType = engine.cylinder4.CrankShape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder4.CrankShape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.CrankShape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder4.CrankShape.vis.r[1](quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.CrankShape.vis.r[2](quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.CrankShape.vis.r[3](quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder4.CrankShape.vis.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.lengthDirection[1](unit = "1") = engine.cylinder4.CrankShape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.lengthDirection[2](unit = "1") = engine.cylinder4.CrankShape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.lengthDirection[3](unit = "1") = engine.cylinder4.CrankShape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.widthDirection[1](unit = "1") = engine.cylinder4.CrankShape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.widthDirection[2](unit = "1") = engine.cylinder4.CrankShape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.widthDirection[3](unit = "1") = engine.cylinder4.CrankShape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder4.CrankShape.vis.length(quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.length "Length of visual object";
//   input Real engine.cylinder4.CrankShape.vis.width(quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.width "Width of visual object";
//   input Real engine.cylinder4.CrankShape.vis.height(quantity = "Length", unit = "m") = engine.cylinder4.CrankShape.height "Height of visual object";
//   input Real engine.cylinder4.CrankShape.vis.extra = engine.cylinder4.CrankShape.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder4.CrankShape.vis.color[1] = Real(engine.cylinder4.CrankShape.color[1]) "Color of shape";
//   input Real engine.cylinder4.CrankShape.vis.color[2] = Real(engine.cylinder4.CrankShape.color[2]) "Color of shape";
//   input Real engine.cylinder4.CrankShape.vis.color[3] = Real(engine.cylinder4.CrankShape.color[3]) "Color of shape";
//   input Real engine.cylinder4.CrankShape.vis.specularCoefficient = engine.cylinder4.CrankShape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder4.CrankShape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder4.CrankShape.vis.lengthDirection[1],engine.cylinder4.CrankShape.vis.lengthDirection[2],engine.cylinder4.CrankShape.vis.lengthDirection[3]});
//   protected Real engine.cylinder4.CrankShape.vis.e_x[1](unit = "1") = if noEvent(engine.cylinder4.CrankShape.vis.abs_n_x < 1e-10) then 1.0 else engine.cylinder4.CrankShape.vis.lengthDirection[1] / engine.cylinder4.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder4.CrankShape.vis.e_x[2](unit = "1") = if noEvent(engine.cylinder4.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder4.CrankShape.vis.lengthDirection[2] / engine.cylinder4.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder4.CrankShape.vis.e_x[3](unit = "1") = if noEvent(engine.cylinder4.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder4.CrankShape.vis.lengthDirection[3] / engine.cylinder4.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder4.CrankShape.vis.n_z_aux[1](unit = "1") = engine.cylinder4.CrankShape.vis.e_x[2] * engine.cylinder4.CrankShape.vis.widthDirection[3] - engine.cylinder4.CrankShape.vis.e_x[3] * engine.cylinder4.CrankShape.vis.widthDirection[2];
//   protected Real engine.cylinder4.CrankShape.vis.n_z_aux[2](unit = "1") = engine.cylinder4.CrankShape.vis.e_x[3] * engine.cylinder4.CrankShape.vis.widthDirection[1] - engine.cylinder4.CrankShape.vis.e_x[1] * engine.cylinder4.CrankShape.vis.widthDirection[3];
//   protected Real engine.cylinder4.CrankShape.vis.n_z_aux[3](unit = "1") = engine.cylinder4.CrankShape.vis.e_x[1] * engine.cylinder4.CrankShape.vis.widthDirection[2] - engine.cylinder4.CrankShape.vis.e_x[2] * engine.cylinder4.CrankShape.vis.widthDirection[1];
//   protected Real engine.cylinder4.CrankShape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.CrankShape.vis.e_x[1],engine.cylinder4.CrankShape.vis.e_x[2],engine.cylinder4.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder4.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder4.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder4.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.CrankShape.vis.widthDirection[1],engine.cylinder4.CrankShape.vis.widthDirection[2],engine.cylinder4.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder4.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.CrankShape.vis.e_x[1],engine.cylinder4.CrankShape.vis.e_x[2],engine.cylinder4.CrankShape.vis.e_x[3]})[1];
//   protected Real engine.cylinder4.CrankShape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.CrankShape.vis.e_x[1],engine.cylinder4.CrankShape.vis.e_x[2],engine.cylinder4.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder4.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder4.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder4.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.CrankShape.vis.widthDirection[1],engine.cylinder4.CrankShape.vis.widthDirection[2],engine.cylinder4.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder4.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.CrankShape.vis.e_x[1],engine.cylinder4.CrankShape.vis.e_x[2],engine.cylinder4.CrankShape.vis.e_x[3]})[2];
//   protected Real engine.cylinder4.CrankShape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder4.CrankShape.vis.e_x[1],engine.cylinder4.CrankShape.vis.e_x[2],engine.cylinder4.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder4.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder4.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder4.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder4.CrankShape.vis.widthDirection[1],engine.cylinder4.CrankShape.vis.widthDirection[2],engine.cylinder4.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder4.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder4.CrankShape.vis.e_x[1],engine.cylinder4.CrankShape.vis.e_x[2],engine.cylinder4.CrankShape.vis.e_x[3]})[3];
//   protected output Real engine.cylinder4.CrankShape.vis.Form;
//   output Real engine.cylinder4.CrankShape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder4.CrankShape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder4.CrankShape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.CrankShape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.CrankShape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder4.CrankShape.vis.Material;
//   protected output Real engine.cylinder4.CrankShape.vis.Extra;
//   parameter Boolean engine.cylinder5.animation = engine.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.cylinderTopPosition(quantity = "Length", unit = "m") = 0.42 "Length from crank shaft to end of cylinder.";
//   parameter Real engine.cylinder5.crankLength(quantity = "Length", unit = "m") = 0.14 "Length of crank shaft in x direction";
//   parameter Real engine.cylinder5.crankPinOffset(quantity = "Length", unit = "m") = 0.05 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder5.crankPinLength(quantity = "Length", unit = "m") = 0.1 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder5.cylinderInclination(quantity = "Angle", unit = "deg") = -30.0 "Inclination of cylinder";
//   parameter Real engine.cylinder5.crankAngleOffset(quantity = "Angle", unit = "deg") = 90.0 "Offset for crank angle";
//   parameter Real engine.cylinder5.pistonLength(quantity = "Length", unit = "m") = 0.1 " Length of cylinder";
//   parameter Real engine.cylinder5.pistonCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder5.pistonLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder5.pistonMass(quantity = "Mass", unit = "kg", min = 0.0) = 6.0 " Mass of piston";
//   parameter Real engine.cylinder5.pistonInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 11 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder5.pistonInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0076 " Inertia 22 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder5.pistonInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 33 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder5.rodLength(quantity = "Length", unit = "m") = 0.175 " Length of rod";
//   parameter Real engine.cylinder5.rodCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder5.rodLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder5.rodMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 " Mass of rod";
//   parameter Real engine.cylinder5.rodInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 11 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder5.rodInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0005 " Inertia 22 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder5.rodInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 33 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder5.cylinderLength(quantity = "Length", unit = "m") = engine.cylinder5.cylinderTopPosition - (engine.cylinder5.pistonLength + engine.cylinder5.rodLength - engine.cylinder5.crankPinOffset) "Maximum length of cylinder volume";
//   Real engine.cylinder5.Mid.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mid.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mid.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mid.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mid.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mid.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mid.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mid.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mid.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mid.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mid.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mid.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mid.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Mid.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.Mid.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.crankLength - engine.cylinder5.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.crankPinOffset "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder5.Mid.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.Mid.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.lengthDirection[1](unit = "1") = engine.cylinder5.Mid.r[1] - engine.cylinder5.Mid.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.lengthDirection[2](unit = "1") = engine.cylinder5.Mid.r[2] - engine.cylinder5.Mid.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.lengthDirection[3](unit = "1") = engine.cylinder5.Mid.r[3] - engine.cylinder5.Mid.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mid.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.Mid.r[1] - engine.cylinder5.Mid.r_shape[1],engine.cylinder5.Mid.r[2] - engine.cylinder5.Mid.r_shape[2],engine.cylinder5.Mid.r[3] - engine.cylinder5.Mid.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.Mid.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Mid.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.Mid.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Mid.width " Height of shape.";
//   parameter Real engine.cylinder5.Mid.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Mid.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Mid.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Mid.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.Mid.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder5.Mounting.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mounting.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mounting.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mounting.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mounting.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mounting.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mounting.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mounting.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Mounting.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Mounting.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Mounting.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.Mounting.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder5.Mounting.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.Mounting.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.lengthDirection[1](unit = "1") = engine.cylinder5.Mounting.r[1] - engine.cylinder5.Mounting.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.lengthDirection[2](unit = "1") = engine.cylinder5.Mounting.r[2] - engine.cylinder5.Mounting.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.lengthDirection[3](unit = "1") = engine.cylinder5.Mounting.r[3] - engine.cylinder5.Mounting.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Mounting.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.Mounting.r[1] - engine.cylinder5.Mounting.r_shape[1],engine.cylinder5.Mounting.r[2] - engine.cylinder5.Mounting.r_shape[2],engine.cylinder5.Mounting.r[3] - engine.cylinder5.Mounting.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.Mounting.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Mounting.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.Mounting.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Mounting.width " Height of shape.";
//   parameter Real engine.cylinder5.Mounting.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Mounting.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Mounting.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Mounting.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.Mounting.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder5.CylinderInclination.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CylinderInclination.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.CylinderInclination.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.CylinderInclination.r[1](quantity = "Length", unit = "m") = engine.cylinder5.crankLength - engine.cylinder5.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder5.CylinderInclination.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder5.CylinderInclination.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.CylinderInclination.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.CylinderInclination.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.CylinderInclination.angle(quantity = "Angle", unit = "deg") = engine.cylinder5.cylinderInclination " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder5.CylinderInclination.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder5.CylinderInclination.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder5.CylinderInclination.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder5.CylinderInclination.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder5.CylinderInclination.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder5.CylinderInclination.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder5.CylinderInclination.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder5.CylinderInclination.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.CylinderInclination.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.lengthDirection[1](unit = "1") = engine.cylinder5.CylinderInclination.r[1] - engine.cylinder5.CylinderInclination.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.lengthDirection[2](unit = "1") = engine.cylinder5.CylinderInclination.r[2] - engine.cylinder5.CylinderInclination.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.lengthDirection[3](unit = "1") = engine.cylinder5.CylinderInclination.r[3] - engine.cylinder5.CylinderInclination.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CylinderInclination.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.CylinderInclination.r[1] - engine.cylinder5.CylinderInclination.r_shape[1],engine.cylinder5.CylinderInclination.r[2] - engine.cylinder5.CylinderInclination.r_shape[2],engine.cylinder5.CylinderInclination.r[3] - engine.cylinder5.CylinderInclination.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.CylinderInclination.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.CylinderInclination.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.CylinderInclination.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.CylinderInclination.width " Height of shape.";
//   parameter Real engine.cylinder5.CylinderInclination.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.CylinderInclination.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.CylinderInclination.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.CylinderInclination.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.CylinderInclination.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CylinderInclination.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankAngle.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankAngle.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankAngle.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankAngle.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankAngle.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankAngle.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.CrankAngle.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.CrankAngle.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder5.CrankAngle.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder5.CrankAngle.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.CrankAngle.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.CrankAngle.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.CrankAngle.angle(quantity = "Angle", unit = "deg") = engine.cylinder5.crankAngleOffset " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder5.CrankAngle.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder5.CrankAngle.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder5.CrankAngle.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder5.CrankAngle.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder5.CrankAngle.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder5.CrankAngle.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder5.CrankAngle.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder5.CrankAngle.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.CrankAngle.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.lengthDirection[1](unit = "1") = engine.cylinder5.CrankAngle.r[1] - engine.cylinder5.CrankAngle.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.lengthDirection[2](unit = "1") = engine.cylinder5.CrankAngle.r[2] - engine.cylinder5.CrankAngle.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.lengthDirection[3](unit = "1") = engine.cylinder5.CrankAngle.r[3] - engine.cylinder5.CrankAngle.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.CrankAngle.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.CrankAngle.r[1] - engine.cylinder5.CrankAngle.r_shape[1],engine.cylinder5.CrankAngle.r[2] - engine.cylinder5.CrankAngle.r_shape[2],engine.cylinder5.CrankAngle.r[3] - engine.cylinder5.CrankAngle.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.CrankAngle.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.CrankAngle.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.CrankAngle.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.CrankAngle.width " Height of shape.";
//   parameter Real engine.cylinder5.CrankAngle.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.CrankAngle.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.CrankAngle.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.CrankAngle.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.CrankAngle.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[2,2] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[2,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[3,2] = -1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.T[3,3] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[2,2] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[2,3] = -1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[3,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.T[3,3] = 6.12323399573677e-17 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.CrankAngle.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.jointRRP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder5.jointRRP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.jointRRP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder5.jointRRP.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.jointRRP.n_a[1](unit = "1") = 1.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder5.jointRRP.n_a[2](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder5.jointRRP.n_a[3](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder5.jointRRP.n_b[1](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder5.jointRRP.n_b[2](unit = "1") = -1.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder5.jointRRP.n_b[3](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder5.jointRRP.rRod1_ia[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder5.rodLength "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.rRod1_ia[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.rRod2_ib[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder5.jointRRP.rRod2_ib[2](quantity = "Length", unit = "m") = -engine.cylinder5.pistonLength "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder5.jointRRP.rRod2_ib[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder5.jointRRP.s_offset(quantity = "Length", unit = "m") = -engine.cylinder5.cylinderTopPosition "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder5.jointRRP.s_guess(quantity = "Length", unit = "m") = 0.0 "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder5.jointRRP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the revolute joints";
//   parameter Real engine.cylinder5.jointRRP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the revolute joints";
//   input Integer engine.cylinder5.jointRRP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder5.jointRRP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder5.jointRRP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   parameter Real engine.cylinder5.jointRRP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder5.jointRRP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.boxColor[1](min = 0, max = 255) = engine.cylinder5.jointRRP.cylinderColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.boxColor[2](min = 0, max = 255) = engine.cylinder5.jointRRP.cylinderColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.boxColor[3](min = 0, max = 255) = engine.cylinder5.jointRRP.cylinderColor[3] "Color of prismatic joint box";
//   parameter Real engine.cylinder5.jointRRP.rodDiameter(quantity = "Length", unit = "m", min = 0.0) = 1.1 * engine.cylinder5.jointRRP.cylinderDiameter "Diameter of the two rods connecting the joints";
//   input Integer engine.cylinder5.jointRRP.rodColor[1](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder5.jointRRP.rodColor[2](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder5.jointRRP.rodColor[3](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Real engine.cylinder5.jointRRP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.jointRRP.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder5.jointRRP.e_a[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.n_a[1],engine.cylinder5.jointRRP.n_a[2],engine.cylinder5.jointRRP.n_a[3]},1e-13)[1] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.e_a[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.n_a[1],engine.cylinder5.jointRRP.n_a[2],engine.cylinder5.jointRRP.n_a[3]},1e-13)[2] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.e_a[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.n_a[1],engine.cylinder5.jointRRP.n_a[2],engine.cylinder5.jointRRP.n_a[3]},1e-13)[3] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.e_ia[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.e2_ia[1] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.e_ia[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.e2_ia[2] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.e_ia[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.e2_ia[3] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.e_im[1](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder5.jointRRP.e_im[2](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder5.jointRRP.e_im[3](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder5.jointRRP.e_b[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.prismatic.e[1] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder5.jointRRP.e_b[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.prismatic.e[2] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder5.jointRRP.e_b[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.prismatic.e[3] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   Real engine.cylinder5.jointRRP.totalPower(quantity = "Power", unit = "W") = engine.cylinder5.jointRRP.jointUSP.totalPower "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.jointRRP.jointUSP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder5.jointRRP.jointUSP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.jointRRP.jointUSP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.animation = false "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.showUniversalAxes = false " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.n1_a[1](unit = "1") = engine.cylinder5.jointRRP.n_a[1] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.n1_a[2](unit = "1") = engine.cylinder5.jointRRP.n_a[2] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.n1_a[3](unit = "1") = engine.cylinder5.jointRRP.n_a[3] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.n_b[1](unit = "1") = engine.cylinder5.jointRRP.n_b[1] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.n_b[2](unit = "1") = engine.cylinder5.jointRRP.n_b[2] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.n_b[3](unit = "1") = engine.cylinder5.jointRRP.n_b[3] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rRod1_ia[1](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.rRod1_ia[1] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.rRod1_ia[2] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rRod1_ia[3](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.rRod1_ia[3] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rRod2_ib[1](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.rRod2_ib[1] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rRod2_ib[2](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.rRod2_ib[2] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rRod2_ib[3](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.rRod2_ib[3] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.s_offset(quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.s_offset "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.s_guess(quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.sphereColor[1](min = 0, max = 255) = 255 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.sphereColor[2](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.sphereColor[3](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.sphereDiameter / 2.0 "Diameter of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1Color[1](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1Color[2](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1Color[3](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.rod1Diameter "Diameter of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod2Color[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod1Color[1] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod2Color[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod1Color[2] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod2Color[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod1Color[3] "Color of rod 2 connecting the prismatic and the spherical joint";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.jointUSP.boxColor[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.sphereColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.jointUSP.boxColor[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.sphereColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.jointUSP.boxColor[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.sphereColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder5.jointRRP.jointUSP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder5.jointRRP.jointUSP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder5.jointRRP.jointUSP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder5.jointRRP.jointUSP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.checkTotalPower = engine.cylinder5.jointRRP.checkTotalPower "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.eRod1_ia[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.eRod1_ia[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.eRod1_ia[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.e2_ia[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.e2_ia[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.e2_ia[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1Length(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.rod1.rodLength "Length of rod 1 (= distance between universal and spherical joint";
//   Real engine.cylinder5.jointRRP.jointUSP.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   Real engine.cylinder5.jointRRP.jointUSP.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.prismatic.animation = engine.cylinder5.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.length(quantity = "Length", unit = "m", start = 1.0) = engine.cylinder5.jointRRP.jointUSP.rod1.rodLength "Fixed length of length constraint";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.n[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.n_b[1] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.n[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.n_b[2] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.n[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.n_b[3] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.s_offset(quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.s_offset "Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.s_guess(quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.boxWidthDirection[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.boxWidthDirection[1] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.boxWidthDirection[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.boxWidthDirection[2] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.boxWidthDirection[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.boxWidthDirection[3] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.boxWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.boxWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.boxHeight "Height of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.jointUSP.prismatic.boxColor[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.boxColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.jointUSP.prismatic.boxColor[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.boxColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder5.jointRRP.jointUSP.prismatic.boxColor[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.boxColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder5.jointRRP.jointUSP.prismatic.specularCoefficient = engine.cylinder5.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.prismatic.positiveBranch(fixed = false) "Selection of one of the two solutions of the non-linear constraint equation";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.prismatic.n[1],engine.cylinder5.jointRRP.jointUSP.prismatic.n[2],engine.cylinder5.jointRRP.jointUSP.prismatic.n[3]},1e-13)[1] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.prismatic.n[1],engine.cylinder5.jointRRP.jointUSP.prismatic.n[2],engine.cylinder5.jointRRP.jointUSP.prismatic.n[3]},1e-13)[2] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.prismatic.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.prismatic.n[1],engine.cylinder5.jointRRP.jointUSP.prismatic.n[2],engine.cylinder5.jointRRP.jointUSP.prismatic.n[3]},1e-13)[3] "Unit vector in direction of translation axis, resolved in frame_a";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.s(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n = s + s_offset)";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.distance(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder5.jointRRP.jointUSP.prismatic.f(quantity = "Force", unit = "N") "= axis.f (driving force in the axis)";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[1](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[2](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[3](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[1](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[2](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[3](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[1](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[2](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[3](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.B "Coefficient B of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.C "Coefficient C of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.k1 "Constant of quadratic equation solution";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.k2 "Constant of quadratic equation solution";
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.k1a(start = 1.0);
//   protected Real engine.cylinder5.jointRRP.jointUSP.prismatic.k1b;
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.rod1.animation = engine.cylinder5.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.rod1.showUniversalAxes = engine.cylinder5.jointRRP.jointUSP.showUniversalAxes " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.rod1.computeRodLength = false "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.n1_a[1] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.n1_a[2] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.n1_a[3] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.rRod1_ia[1] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.rRod1_ia[2] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3](quantity = "Length", unit = "m") = engine.cylinder5.jointRRP.jointUSP.rRod1_ia[3] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.sphereDiameter "Diameter of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.sphereColor[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.sphereColor[1] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.sphereColor[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.sphereColor[2] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.sphereColor[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.sphereColor[3] "Color of spheres representing the universal and the spherical joint";
//   parameter String engine.cylinder5.jointRRP.jointUSP.rod1.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rodWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.rod1Diameter "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rodHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.rod1Diameter "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.rodColor[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod1Color[1] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.rodColor[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod1Color[2] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.rodColor[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod1Color[3] "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.cylinderLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.cylinderDiameter "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.cylinderColor[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.cylinderColor[1] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.cylinderColor[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.cylinderColor[2] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod1.cylinderColor[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.cylinderColor[3] "Color of cylinders representing the two universal joint axes";
//   input Real engine.cylinder5.jointRRP.jointUSP.rod1.specularCoefficient = engine.cylinder5.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.rod1.kinematicConstraint = false "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.constraintResidue = engine.cylinder5.jointRRP.jointUSP.rod1.f_rod - engine.cylinder5.jointRRP.jointUSP.f_rod "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.rod1.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT engine.cylinder5.jointRRP.jointUSP.rod1.computeRodLength) = Modelica.Math.Vectors.length({engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.e3_ia[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[3] - engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.e3_ia[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[1] - engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod1.e3_ia[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[2] - engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[1](quantity = "Length", unit = "m", start = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[2](quantity = "Length", unit = "m", start = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[3](quantity = "Length", unit = "m", start = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[1](quantity = "Length", unit = "m", start = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[2](quantity = "Length", unit = "m", start = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[3](quantity = "Length", unit = "m", start = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.jointRRP.jointUSP.rod2.animation = engine.cylinder5.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.jointRRP.jointUSP.rRod2_ib[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.jointRRP.jointUSP.rRod2_ib[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.jointRRP.jointUSP.rRod2_ib[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder5.jointRRP.jointUSP.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.lengthDirection[1](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod2.r[1] - engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.lengthDirection[2](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod2.r[2] - engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.lengthDirection[3](unit = "1") = engine.cylinder5.jointRRP.jointUSP.rod2.r[3] - engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.jointRRP.jointUSP.rod2.r[1] - engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[1],engine.cylinder5.jointRRP.jointUSP.rod2.r[2] - engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[2],engine.cylinder5.jointRRP.jointUSP.rod2.r[3] - engine.cylinder5.jointRRP.jointUSP.rod2.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.rod2Diameter " Width of shape";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.jointRRP.jointUSP.rod2Diameter " Height of shape.";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod2.color[1](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod2Color[1] " Color of shape";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod2.color[2](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod2Color[2] " Color of shape";
//   input Integer engine.cylinder5.jointRRP.jointUSP.rod2.color[3](min = 0, max = 255) = engine.cylinder5.jointRRP.jointUSP.rod2Color[3] " Color of shape";
//   input Real engine.cylinder5.jointRRP.jointUSP.rod2.specularCoefficient = engine.cylinder5.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder5.jointRRP.jointUSP.relativePosition.r_rel[1] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder5.jointRRP.jointUSP.relativePosition.r_rel[2] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder5.jointRRP.jointUSP.relativePosition.r_rel[3] "Relative position vector resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder5.jointRRP.jointUSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a "Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.resolveInFrame = engine.cylinder5.jointRRP.jointUSP.relativePosition.resolveInFrame "Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder5.jointRRP.jointUSP.position_b[1].y "Connector of Real output signal";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.position_b[1].k(start = 1.0) = engine.cylinder5.jointRRP.jointUSP.rRod2_ib[1] "Constant output value";
//   output Real engine.cylinder5.jointRRP.jointUSP.position_b[2].y "Connector of Real output signal";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.position_b[2].k(start = 1.0) = engine.cylinder5.jointRRP.jointUSP.rRod2_ib[2] "Constant output value";
//   output Real engine.cylinder5.jointRRP.jointUSP.position_b[3].y "Connector of Real output signal";
//   parameter Real engine.cylinder5.jointRRP.jointUSP.position_b[3].k(start = 1.0) = engine.cylinder5.jointRRP.jointUSP.rRod2_ib[3] "Constant output value";
//   protected Real engine.cylinder5.jointRRP.jointUSP.aux "Denominator used to compute force in rod connecting universal and spherical joint";
//   Real engine.cylinder5.Rod.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Rod.animation = engine.cylinder5.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder5.Rod.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder5.Rod.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.rodLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.rodLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder5.rodMass "Mass of rigid body";
//   parameter Real engine.cylinder5.Rod.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.rodInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.rodInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.rodInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder5.Rod.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Rod.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Rod.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Rod.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Rod.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Rod.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Rod.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Rod.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Rod.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder5.Rod.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Rod.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Rod.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Rod.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder5.Rod.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Rod.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Rod.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder5.Rod.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Rod.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Rod.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Rod.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder5.Rod.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Rod.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Rod.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Rod.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder5.Rod.shapeType = "2" " Type of shape";
//   parameter Real engine.cylinder5.Rod.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.length(quantity = "Length", unit = "m") = engine.cylinder5.rodLength / 1.75 " Length of shape";
//   parameter Real engine.cylinder5.Rod.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.rodLength / 1.75 " Width of shape";
//   parameter Real engine.cylinder5.Rod.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.rodLength / 1.75 " Height of shape.";
//   parameter Real engine.cylinder5.Rod.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Rod.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Rod.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Rod.color[3](min = 0, max = 255) = 155 " Color of shape";
//   parameter Real engine.cylinder5.Rod.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder5.Rod.width " Diameter of sphere";
//   input Integer engine.cylinder5.Rod.sphereColor[1](min = 0, max = 255) = engine.cylinder5.Rod.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder5.Rod.sphereColor[2](min = 0, max = 255) = engine.cylinder5.Rod.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder5.Rod.sphereColor[3](min = 0, max = 255) = engine.cylinder5.Rod.color[3] " Color of sphere of mass";
//   input Real engine.cylinder5.Rod.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.Rod.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder5.Rod.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder5.Rod.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Rod.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Rod.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Rod.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.Rod.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Rod.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Rod.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Rod.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder5.Rod.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.Rod.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder5.Rod.frameTranslation.r[1] - engine.cylinder5.Rod.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder5.Rod.frameTranslation.r[2] - engine.cylinder5.Rod.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder5.Rod.frameTranslation.r[3] - engine.cylinder5.Rod.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.Rod.frameTranslation.r[1] - engine.cylinder5.Rod.frameTranslation.r_shape[1],engine.cylinder5.Rod.frameTranslation.r[2] - engine.cylinder5.Rod.frameTranslation.r_shape[2],engine.cylinder5.Rod.frameTranslation.r[3] - engine.cylinder5.Rod.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.Rod.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Rod.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.Rod.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Rod.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder5.Rod.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Rod.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Rod.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Rod.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.Rod.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder5.Rod.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Rod.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Rod.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Rod.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Rod.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder5.Rod.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Rod.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Rod.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Rod.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder5.Rod.m "Mass of rigid body";
//   parameter Real engine.cylinder5.Rod.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.Rod.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.Rod.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.Rod.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder5.Rod.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder5.Rod.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder5.Rod.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder5.Rod.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Rod.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Rod.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Rod.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Rod.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Rod.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Rod.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Rod.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Rod.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder5.Rod.body.angles_fixed = engine.cylinder5.Rod.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Rod.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder5.Rod.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Rod.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder5.Rod.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Rod.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder5.Rod.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder5.Rod.body.sequence_start[1](min = 1, max = 3) = engine.cylinder5.Rod.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Rod.body.sequence_start[2](min = 1, max = 3) = engine.cylinder5.Rod.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Rod.body.sequence_start[3](min = 1, max = 3) = engine.cylinder5.Rod.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder5.Rod.body.w_0_fixed = engine.cylinder5.Rod.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Rod.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder5.Rod.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Rod.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder5.Rod.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Rod.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder5.Rod.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder5.Rod.body.z_0_fixed = engine.cylinder5.Rod.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Rod.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder5.Rod.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Rod.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder5.Rod.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Rod.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder5.Rod.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Rod.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder5.Rod.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder5.Rod.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder5.Rod.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder5.Rod.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Rod.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder5.Rod.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder5.Rod.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder5.Rod.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder5.Rod.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder5.Rod.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder5.Rod.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder5.Rod.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.Rod.body.enforceStates = engine.cylinder5.Rod.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder5.Rod.body.useQuaternions = engine.cylinder5.Rod.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder5.Rod.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder5.Rod.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Rod.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder5.Rod.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Rod.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder5.Rod.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder5.Rod.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Rod.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.Rod.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.Rod.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.z_0_start[1],engine.cylinder5.Rod.body.z_0_start[2],engine.cylinder5.Rod.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.z_0_start[1],engine.cylinder5.Rod.body.z_0_start[2],engine.cylinder5.Rod.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder5.Rod.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.z_0_start[1],engine.cylinder5.Rod.body.z_0_start[2],engine.cylinder5.Rod.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder5.Rod.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.w_0_start[1],engine.cylinder5.Rod.body.w_0_start[2],engine.cylinder5.Rod.body.w_0_start[3]})[1], fixed = engine.cylinder5.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder5.Rod.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.w_0_start[1],engine.cylinder5.Rod.body.w_0_start[2],engine.cylinder5.Rod.body.w_0_start[3]})[2], fixed = engine.cylinder5.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder5.Rod.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.w_0_start[1],engine.cylinder5.Rod.body.w_0_start[2],engine.cylinder5.Rod.body.w_0_start[3]})[3], fixed = engine.cylinder5.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder5.Rod.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.z_0_start[1],engine.cylinder5.Rod.body.z_0_start[2],engine.cylinder5.Rod.body.z_0_start[3]})[1], fixed = engine.cylinder5.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder5.Rod.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.z_0_start[1],engine.cylinder5.Rod.body.z_0_start[2],engine.cylinder5.Rod.body.z_0_start[3]})[2], fixed = engine.cylinder5.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder5.Rod.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.z_0_start[1],engine.cylinder5.Rod.body.z_0_start[2],engine.cylinder5.Rod.body.z_0_start[3]})[3], fixed = engine.cylinder5.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder5.Rod.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder5.Rod.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder5.Rod.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder5.Rod.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder5.Rod.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder5.Rod.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder5.Rod.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder5.Rod.body.Q[1](start = engine.cylinder5.Rod.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder5.Rod.body.Q[2](start = engine.cylinder5.Rod.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder5.Rod.body.Q[3](start = engine.cylinder5.Rod.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder5.Rod.body.Q[4](start = engine.cylinder5.Rod.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder5.Rod.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder5.Rod.body.sequence_start[1] == engine.cylinder5.Rod.body.sequence_angleStates[1] AND engine.cylinder5.Rod.body.sequence_start[2] == engine.cylinder5.Rod.body.sequence_angleStates[2] AND engine.cylinder5.Rod.body.sequence_start[3] == engine.cylinder5.Rod.body.sequence_angleStates[3] then engine.cylinder5.Rod.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.sequence_angleStates[1],engine.cylinder5.Rod.body.sequence_angleStates[2],engine.cylinder5.Rod.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder5.Rod.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder5.Rod.body.sequence_start[1] == engine.cylinder5.Rod.body.sequence_angleStates[1] AND engine.cylinder5.Rod.body.sequence_start[2] == engine.cylinder5.Rod.body.sequence_angleStates[2] AND engine.cylinder5.Rod.body.sequence_start[3] == engine.cylinder5.Rod.body.sequence_angleStates[3] then engine.cylinder5.Rod.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.sequence_angleStates[1],engine.cylinder5.Rod.body.sequence_angleStates[2],engine.cylinder5.Rod.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder5.Rod.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder5.Rod.body.sequence_start[1] == engine.cylinder5.Rod.body.sequence_angleStates[1] AND engine.cylinder5.Rod.body.sequence_start[2] == engine.cylinder5.Rod.body.sequence_angleStates[2] AND engine.cylinder5.Rod.body.sequence_start[3] == engine.cylinder5.Rod.body.sequence_angleStates[3] then engine.cylinder5.Rod.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder5.Rod.body.R_start,{engine.cylinder5.Rod.body.sequence_angleStates[1],engine.cylinder5.Rod.body.sequence_angleStates[2],engine.cylinder5.Rod.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder5.Rod.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder5.Rod.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder5.Rod.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder5.Rod.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder5.Rod.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder5.Rod.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder5.Rod.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder5.Rod.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder5.Rod.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder5.Rod.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder5.Rod.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder5.Rod.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder5.Rod.shape1.shapeType = engine.cylinder5.Rod.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder5.Rod.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Rod.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.Rod.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.Rod.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.Rod.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder5.Rod.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.Rod.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder5.Rod.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.Rod.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder5.Rod.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.Rod.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder5.Rod.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder5.Rod.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder5.Rod.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.lengthDirection[1](unit = "1") = engine.cylinder5.Rod.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.lengthDirection[2](unit = "1") = engine.cylinder5.Rod.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.lengthDirection[3](unit = "1") = engine.cylinder5.Rod.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.widthDirection[1](unit = "1") = engine.cylinder5.Rod.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.widthDirection[2](unit = "1") = engine.cylinder5.Rod.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.widthDirection[3](unit = "1") = engine.cylinder5.Rod.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.Rod.shape1.length(quantity = "Length", unit = "m") = engine.cylinder5.Rod.length "Length of visual object";
//   input Real engine.cylinder5.Rod.shape1.width(quantity = "Length", unit = "m") = engine.cylinder5.Rod.width "Width of visual object";
//   input Real engine.cylinder5.Rod.shape1.height(quantity = "Length", unit = "m") = engine.cylinder5.Rod.height "Height of visual object";
//   input Real engine.cylinder5.Rod.shape1.extra = engine.cylinder5.Rod.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder5.Rod.shape1.color[1] = Real(engine.cylinder5.Rod.color[1]) "Color of shape";
//   input Real engine.cylinder5.Rod.shape1.color[2] = Real(engine.cylinder5.Rod.color[2]) "Color of shape";
//   input Real engine.cylinder5.Rod.shape1.color[3] = Real(engine.cylinder5.Rod.color[3]) "Color of shape";
//   input Real engine.cylinder5.Rod.shape1.specularCoefficient = engine.cylinder5.Rod.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder5.Rod.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder5.Rod.shape1.lengthDirection[1],engine.cylinder5.Rod.shape1.lengthDirection[2],engine.cylinder5.Rod.shape1.lengthDirection[3]});
//   protected Real engine.cylinder5.Rod.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder5.Rod.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder5.Rod.shape1.lengthDirection[1] / engine.cylinder5.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder5.Rod.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder5.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder5.Rod.shape1.lengthDirection[2] / engine.cylinder5.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder5.Rod.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder5.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder5.Rod.shape1.lengthDirection[3] / engine.cylinder5.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder5.Rod.shape1.n_z_aux[1](unit = "1") = engine.cylinder5.Rod.shape1.e_x[2] * engine.cylinder5.Rod.shape1.widthDirection[3] - engine.cylinder5.Rod.shape1.e_x[3] * engine.cylinder5.Rod.shape1.widthDirection[2];
//   protected Real engine.cylinder5.Rod.shape1.n_z_aux[2](unit = "1") = engine.cylinder5.Rod.shape1.e_x[3] * engine.cylinder5.Rod.shape1.widthDirection[1] - engine.cylinder5.Rod.shape1.e_x[1] * engine.cylinder5.Rod.shape1.widthDirection[3];
//   protected Real engine.cylinder5.Rod.shape1.n_z_aux[3](unit = "1") = engine.cylinder5.Rod.shape1.e_x[1] * engine.cylinder5.Rod.shape1.widthDirection[2] - engine.cylinder5.Rod.shape1.e_x[2] * engine.cylinder5.Rod.shape1.widthDirection[1];
//   protected Real engine.cylinder5.Rod.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.Rod.shape1.e_x[1],engine.cylinder5.Rod.shape1.e_x[2],engine.cylinder5.Rod.shape1.e_x[3]},if noEvent(engine.cylinder5.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder5.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder5.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.Rod.shape1.widthDirection[1],engine.cylinder5.Rod.shape1.widthDirection[2],engine.cylinder5.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder5.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.Rod.shape1.e_x[1],engine.cylinder5.Rod.shape1.e_x[2],engine.cylinder5.Rod.shape1.e_x[3]})[1];
//   protected Real engine.cylinder5.Rod.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.Rod.shape1.e_x[1],engine.cylinder5.Rod.shape1.e_x[2],engine.cylinder5.Rod.shape1.e_x[3]},if noEvent(engine.cylinder5.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder5.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder5.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.Rod.shape1.widthDirection[1],engine.cylinder5.Rod.shape1.widthDirection[2],engine.cylinder5.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder5.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.Rod.shape1.e_x[1],engine.cylinder5.Rod.shape1.e_x[2],engine.cylinder5.Rod.shape1.e_x[3]})[2];
//   protected Real engine.cylinder5.Rod.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.Rod.shape1.e_x[1],engine.cylinder5.Rod.shape1.e_x[2],engine.cylinder5.Rod.shape1.e_x[3]},if noEvent(engine.cylinder5.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder5.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder5.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.Rod.shape1.widthDirection[1],engine.cylinder5.Rod.shape1.widthDirection[2],engine.cylinder5.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder5.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.Rod.shape1.e_x[1],engine.cylinder5.Rod.shape1.e_x[2],engine.cylinder5.Rod.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder5.Rod.shape1.Form;
//   output Real engine.cylinder5.Rod.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder5.Rod.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder5.Rod.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.Rod.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.Rod.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.Rod.shape1.Material;
//   protected output Real engine.cylinder5.Rod.shape1.Extra;
//   Real engine.cylinder5.Piston.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Piston.animation = engine.cylinder5.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder5.Piston.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder5.Piston.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.pistonLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.pistonLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder5.pistonMass "Mass of rigid body";
//   parameter Real engine.cylinder5.Piston.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.pistonInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.pistonInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.pistonInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder5.Piston.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Piston.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Piston.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Piston.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Piston.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Piston.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Piston.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Piston.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Piston.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder5.Piston.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Piston.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Piston.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Piston.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder5.Piston.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Piston.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Piston.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder5.Piston.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Piston.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Piston.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Piston.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder5.Piston.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Piston.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Piston.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Piston.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder5.Piston.shapeType = "3" " Type of shape";
//   parameter Real engine.cylinder5.Piston.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.length(quantity = "Length", unit = "m") = 0.08 " Length of shape";
//   parameter Real engine.cylinder5.Piston.width(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Width of shape";
//   parameter Real engine.cylinder5.Piston.height(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Height of shape.";
//   parameter Real engine.cylinder5.Piston.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Piston.color[1](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder5.Piston.color[2](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder5.Piston.color[3](min = 0, max = 255) = 180 " Color of shape";
//   parameter Real engine.cylinder5.Piston.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder5.Piston.width " Diameter of sphere";
//   input Integer engine.cylinder5.Piston.sphereColor[1](min = 0, max = 255) = engine.cylinder5.Piston.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder5.Piston.sphereColor[2](min = 0, max = 255) = engine.cylinder5.Piston.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder5.Piston.sphereColor[3](min = 0, max = 255) = engine.cylinder5.Piston.color[3] " Color of sphere of mass";
//   input Real engine.cylinder5.Piston.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.Piston.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder5.Piston.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder5.Piston.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Piston.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Piston.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Piston.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.Piston.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Piston.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Piston.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Piston.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder5.Piston.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.Piston.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder5.Piston.frameTranslation.r[1] - engine.cylinder5.Piston.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder5.Piston.frameTranslation.r[2] - engine.cylinder5.Piston.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder5.Piston.frameTranslation.r[3] - engine.cylinder5.Piston.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.Piston.frameTranslation.r[1] - engine.cylinder5.Piston.frameTranslation.r_shape[1],engine.cylinder5.Piston.frameTranslation.r[2] - engine.cylinder5.Piston.frameTranslation.r_shape[2],engine.cylinder5.Piston.frameTranslation.r[3] - engine.cylinder5.Piston.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.Piston.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Piston.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.Piston.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Piston.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder5.Piston.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Piston.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Piston.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Piston.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.Piston.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder5.Piston.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Piston.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Piston.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder5.Piston.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Piston.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Piston.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.Piston.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder5.Piston.m "Mass of rigid body";
//   parameter Real engine.cylinder5.Piston.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.Piston.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.Piston.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder5.Piston.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder5.Piston.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder5.Piston.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder5.Piston.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder5.Piston.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Piston.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Piston.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder5.Piston.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Piston.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Piston.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder5.Piston.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Piston.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder5.Piston.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder5.Piston.body.angles_fixed = engine.cylinder5.Piston.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Piston.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder5.Piston.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Piston.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder5.Piston.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder5.Piston.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder5.Piston.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder5.Piston.body.sequence_start[1](min = 1, max = 3) = engine.cylinder5.Piston.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Piston.body.sequence_start[2](min = 1, max = 3) = engine.cylinder5.Piston.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder5.Piston.body.sequence_start[3](min = 1, max = 3) = engine.cylinder5.Piston.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder5.Piston.body.w_0_fixed = engine.cylinder5.Piston.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Piston.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder5.Piston.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Piston.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder5.Piston.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder5.Piston.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder5.Piston.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder5.Piston.body.z_0_fixed = engine.cylinder5.Piston.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder5.Piston.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder5.Piston.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Piston.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder5.Piston.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Piston.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder5.Piston.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder5.Piston.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder5.Piston.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder5.Piston.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder5.Piston.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder5.Piston.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Piston.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder5.Piston.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder5.Piston.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder5.Piston.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder5.Piston.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder5.Piston.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder5.Piston.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder5.Piston.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder5.Piston.body.enforceStates = engine.cylinder5.Piston.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder5.Piston.body.useQuaternions = engine.cylinder5.Piston.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder5.Piston.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder5.Piston.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Piston.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder5.Piston.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder5.Piston.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder5.Piston.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder5.Piston.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder5.Piston.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.Piston.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder5.Piston.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.z_0_start[1],engine.cylinder5.Piston.body.z_0_start[2],engine.cylinder5.Piston.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.z_0_start[1],engine.cylinder5.Piston.body.z_0_start[2],engine.cylinder5.Piston.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder5.Piston.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.z_0_start[1],engine.cylinder5.Piston.body.z_0_start[2],engine.cylinder5.Piston.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder5.Piston.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.w_0_start[1],engine.cylinder5.Piston.body.w_0_start[2],engine.cylinder5.Piston.body.w_0_start[3]})[1], fixed = engine.cylinder5.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder5.Piston.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.w_0_start[1],engine.cylinder5.Piston.body.w_0_start[2],engine.cylinder5.Piston.body.w_0_start[3]})[2], fixed = engine.cylinder5.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder5.Piston.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.w_0_start[1],engine.cylinder5.Piston.body.w_0_start[2],engine.cylinder5.Piston.body.w_0_start[3]})[3], fixed = engine.cylinder5.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder5.Piston.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.z_0_start[1],engine.cylinder5.Piston.body.z_0_start[2],engine.cylinder5.Piston.body.z_0_start[3]})[1], fixed = engine.cylinder5.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder5.Piston.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.z_0_start[1],engine.cylinder5.Piston.body.z_0_start[2],engine.cylinder5.Piston.body.z_0_start[3]})[2], fixed = engine.cylinder5.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder5.Piston.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.z_0_start[1],engine.cylinder5.Piston.body.z_0_start[2],engine.cylinder5.Piston.body.z_0_start[3]})[3], fixed = engine.cylinder5.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder5.Piston.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder5.Piston.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder5.Piston.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder5.Piston.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder5.Piston.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder5.Piston.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder5.Piston.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder5.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder5.Piston.body.Q[1](start = engine.cylinder5.Piston.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder5.Piston.body.Q[2](start = engine.cylinder5.Piston.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder5.Piston.body.Q[3](start = engine.cylinder5.Piston.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder5.Piston.body.Q[4](start = engine.cylinder5.Piston.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder5.Piston.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder5.Piston.body.sequence_start[1] == engine.cylinder5.Piston.body.sequence_angleStates[1] AND engine.cylinder5.Piston.body.sequence_start[2] == engine.cylinder5.Piston.body.sequence_angleStates[2] AND engine.cylinder5.Piston.body.sequence_start[3] == engine.cylinder5.Piston.body.sequence_angleStates[3] then engine.cylinder5.Piston.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.sequence_angleStates[1],engine.cylinder5.Piston.body.sequence_angleStates[2],engine.cylinder5.Piston.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder5.Piston.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder5.Piston.body.sequence_start[1] == engine.cylinder5.Piston.body.sequence_angleStates[1] AND engine.cylinder5.Piston.body.sequence_start[2] == engine.cylinder5.Piston.body.sequence_angleStates[2] AND engine.cylinder5.Piston.body.sequence_start[3] == engine.cylinder5.Piston.body.sequence_angleStates[3] then engine.cylinder5.Piston.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.sequence_angleStates[1],engine.cylinder5.Piston.body.sequence_angleStates[2],engine.cylinder5.Piston.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder5.Piston.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder5.Piston.body.sequence_start[1] == engine.cylinder5.Piston.body.sequence_angleStates[1] AND engine.cylinder5.Piston.body.sequence_start[2] == engine.cylinder5.Piston.body.sequence_angleStates[2] AND engine.cylinder5.Piston.body.sequence_start[3] == engine.cylinder5.Piston.body.sequence_angleStates[3] then engine.cylinder5.Piston.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder5.Piston.body.R_start,{engine.cylinder5.Piston.body.sequence_angleStates[1],engine.cylinder5.Piston.body.sequence_angleStates[2],engine.cylinder5.Piston.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder5.Piston.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder5.Piston.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder5.Piston.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder5.Piston.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder5.Piston.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder5.Piston.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder5.Piston.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder5.Piston.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder5.Piston.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder5.Piston.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder5.Piston.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder5.Piston.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder5.Piston.shape1.shapeType = engine.cylinder5.Piston.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder5.Piston.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.Piston.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.Piston.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.Piston.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.Piston.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder5.Piston.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.Piston.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder5.Piston.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.Piston.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder5.Piston.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.Piston.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder5.Piston.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder5.Piston.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder5.Piston.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.lengthDirection[1](unit = "1") = engine.cylinder5.Piston.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.lengthDirection[2](unit = "1") = engine.cylinder5.Piston.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.lengthDirection[3](unit = "1") = engine.cylinder5.Piston.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.widthDirection[1](unit = "1") = engine.cylinder5.Piston.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.widthDirection[2](unit = "1") = engine.cylinder5.Piston.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.widthDirection[3](unit = "1") = engine.cylinder5.Piston.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.Piston.shape1.length(quantity = "Length", unit = "m") = engine.cylinder5.Piston.length "Length of visual object";
//   input Real engine.cylinder5.Piston.shape1.width(quantity = "Length", unit = "m") = engine.cylinder5.Piston.width "Width of visual object";
//   input Real engine.cylinder5.Piston.shape1.height(quantity = "Length", unit = "m") = engine.cylinder5.Piston.height "Height of visual object";
//   input Real engine.cylinder5.Piston.shape1.extra = engine.cylinder5.Piston.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder5.Piston.shape1.color[1] = Real(engine.cylinder5.Piston.color[1]) "Color of shape";
//   input Real engine.cylinder5.Piston.shape1.color[2] = Real(engine.cylinder5.Piston.color[2]) "Color of shape";
//   input Real engine.cylinder5.Piston.shape1.color[3] = Real(engine.cylinder5.Piston.color[3]) "Color of shape";
//   input Real engine.cylinder5.Piston.shape1.specularCoefficient = engine.cylinder5.Piston.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder5.Piston.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder5.Piston.shape1.lengthDirection[1],engine.cylinder5.Piston.shape1.lengthDirection[2],engine.cylinder5.Piston.shape1.lengthDirection[3]});
//   protected Real engine.cylinder5.Piston.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder5.Piston.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder5.Piston.shape1.lengthDirection[1] / engine.cylinder5.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder5.Piston.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder5.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder5.Piston.shape1.lengthDirection[2] / engine.cylinder5.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder5.Piston.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder5.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder5.Piston.shape1.lengthDirection[3] / engine.cylinder5.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder5.Piston.shape1.n_z_aux[1](unit = "1") = engine.cylinder5.Piston.shape1.e_x[2] * engine.cylinder5.Piston.shape1.widthDirection[3] - engine.cylinder5.Piston.shape1.e_x[3] * engine.cylinder5.Piston.shape1.widthDirection[2];
//   protected Real engine.cylinder5.Piston.shape1.n_z_aux[2](unit = "1") = engine.cylinder5.Piston.shape1.e_x[3] * engine.cylinder5.Piston.shape1.widthDirection[1] - engine.cylinder5.Piston.shape1.e_x[1] * engine.cylinder5.Piston.shape1.widthDirection[3];
//   protected Real engine.cylinder5.Piston.shape1.n_z_aux[3](unit = "1") = engine.cylinder5.Piston.shape1.e_x[1] * engine.cylinder5.Piston.shape1.widthDirection[2] - engine.cylinder5.Piston.shape1.e_x[2] * engine.cylinder5.Piston.shape1.widthDirection[1];
//   protected Real engine.cylinder5.Piston.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.Piston.shape1.e_x[1],engine.cylinder5.Piston.shape1.e_x[2],engine.cylinder5.Piston.shape1.e_x[3]},if noEvent(engine.cylinder5.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder5.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder5.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.Piston.shape1.widthDirection[1],engine.cylinder5.Piston.shape1.widthDirection[2],engine.cylinder5.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder5.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.Piston.shape1.e_x[1],engine.cylinder5.Piston.shape1.e_x[2],engine.cylinder5.Piston.shape1.e_x[3]})[1];
//   protected Real engine.cylinder5.Piston.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.Piston.shape1.e_x[1],engine.cylinder5.Piston.shape1.e_x[2],engine.cylinder5.Piston.shape1.e_x[3]},if noEvent(engine.cylinder5.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder5.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder5.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.Piston.shape1.widthDirection[1],engine.cylinder5.Piston.shape1.widthDirection[2],engine.cylinder5.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder5.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.Piston.shape1.e_x[1],engine.cylinder5.Piston.shape1.e_x[2],engine.cylinder5.Piston.shape1.e_x[3]})[2];
//   protected Real engine.cylinder5.Piston.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.Piston.shape1.e_x[1],engine.cylinder5.Piston.shape1.e_x[2],engine.cylinder5.Piston.shape1.e_x[3]},if noEvent(engine.cylinder5.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder5.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder5.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.Piston.shape1.widthDirection[1],engine.cylinder5.Piston.shape1.widthDirection[2],engine.cylinder5.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder5.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.Piston.shape1.e_x[1],engine.cylinder5.Piston.shape1.e_x[2],engine.cylinder5.Piston.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder5.Piston.shape1.Form;
//   output Real engine.cylinder5.Piston.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder5.Piston.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder5.Piston.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.Piston.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.Piston.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.Piston.shape1.Material;
//   protected output Real engine.cylinder5.Piston.shape1.Extra;
//   Real engine.cylinder5.gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder5.gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder5.gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder5.gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real engine.cylinder5.gasForce.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
//   parameter Real engine.cylinder5.gasForce.L(quantity = "Length", unit = "m") = engine.cylinder5.cylinderLength "Length of cylinder";
//   parameter Real engine.cylinder5.gasForce.d(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of cylinder";
//   parameter Real engine.cylinder5.gasForce.k0(quantity = "Volume", unit = "m3") = 0.01 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder5.gasForce.k1(quantity = "Volume", unit = "m3") = 1.0 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder5.gasForce.k(quantity = "HeatCapacity", unit = "J/K") = 1.0 "Gas constant (p*V = k*T)";
//   constant Real engine.cylinder5.gasForce.pi = 3.14159265358979;
//   Real engine.cylinder5.gasForce.x "Normalized position of cylinder";
//   Real engine.cylinder5.gasForce.y "Normalized relative movement (= -s_rel/L)";
//   Real engine.cylinder5.gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real engine.cylinder5.gasForce.press(quantity = "Pressure", unit = "bar") "cylinder pressure";
//   Real engine.cylinder5.gasForce.V(quantity = "Volume", unit = "m3");
//   Real engine.cylinder5.gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real engine.cylinder5.gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   protected constant Real engine.cylinder5.gasForce.unitMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0;
//   protected Real engine.cylinder5.gasForce.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar");
//   Real engine.cylinder5.Crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.Crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.Crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.Crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.Crank.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder5.Crank.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder5.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder5.Crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder5.Crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.lengthDirection[1](unit = "1") = engine.cylinder5.Crank.r[1] - engine.cylinder5.Crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.lengthDirection[2](unit = "1") = engine.cylinder5.Crank.r[2] - engine.cylinder5.Crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.lengthDirection[3](unit = "1") = engine.cylinder5.Crank.r[3] - engine.cylinder5.Crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder5.Crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder5.Crank.r[1] - engine.cylinder5.Crank.r_shape[1],engine.cylinder5.Crank.r[2] - engine.cylinder5.Crank.r_shape[2],engine.cylinder5.Crank.r[3] - engine.cylinder5.Crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder5.Crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder5.Crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder5.Crank.width " Height of shape.";
//   parameter Real engine.cylinder5.Crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder5.Crank.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Crank.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder5.Crank.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder5.Crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder5.cylinder_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.cylinder_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.cylinder_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.cylinder_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.cylinder_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.cylinder_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.cylinder_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.cylinder_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.cylinder_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.cylinder_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.cylinder_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.cylinder_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.cylinder_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.cylinder_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.cylinder_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.cylinder_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.cylinder_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.cylinder_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.cylinder_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.cylinder_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.cylinder_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.cylinder_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.cylinder_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.cylinder_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.cylinder_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.crank_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.crank_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.crank_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.crank_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.crank_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.crank_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.crank_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.crank_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.crank_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.crank_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.crank_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.crank_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.crank_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.crank_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.crank_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.crank_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.crank_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.crank_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.crank_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.crank_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.crank_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.crank_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.crank_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.crank_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.crank_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankShape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankShape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankShape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankShape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder5.CrankShape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankShape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankShape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder5.CrankShape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankShape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder5.CrankShape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder5.CrankShape.animation = engine.cylinder5.animation "= true, if animation shall be enabled";
//   parameter String engine.cylinder5.CrankShape.shapeType = "1" "Type of shape";
//   input Real engine.cylinder5.CrankShape.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder5.crankLength - engine.cylinder5.crankPinLength / 2.0 - 0.002 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder5.CrankShape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = engine.cylinder5.crankPinOffset / 0.5 "Length of shape";
//   input Real engine.cylinder5.CrankShape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder5.crankPinOffset / 0.5 "Width of shape";
//   input Real engine.cylinder5.CrankShape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder5.crankPinOffset / 0.5 "Height of shape";
//   input Integer engine.cylinder5.CrankShape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer engine.cylinder5.CrankShape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer engine.cylinder5.CrankShape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real engine.cylinder5.CrankShape.extra = 1.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real engine.cylinder5.CrankShape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String engine.cylinder5.CrankShape.vis.shapeType = engine.cylinder5.CrankShape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder5.CrankShape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.CrankShape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder5.CrankShape.vis.r[1](quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.CrankShape.vis.r[2](quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.CrankShape.vis.r[3](quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder5.CrankShape.vis.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.lengthDirection[1](unit = "1") = engine.cylinder5.CrankShape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.lengthDirection[2](unit = "1") = engine.cylinder5.CrankShape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.lengthDirection[3](unit = "1") = engine.cylinder5.CrankShape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.widthDirection[1](unit = "1") = engine.cylinder5.CrankShape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.widthDirection[2](unit = "1") = engine.cylinder5.CrankShape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.widthDirection[3](unit = "1") = engine.cylinder5.CrankShape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder5.CrankShape.vis.length(quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.length "Length of visual object";
//   input Real engine.cylinder5.CrankShape.vis.width(quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.width "Width of visual object";
//   input Real engine.cylinder5.CrankShape.vis.height(quantity = "Length", unit = "m") = engine.cylinder5.CrankShape.height "Height of visual object";
//   input Real engine.cylinder5.CrankShape.vis.extra = engine.cylinder5.CrankShape.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder5.CrankShape.vis.color[1] = Real(engine.cylinder5.CrankShape.color[1]) "Color of shape";
//   input Real engine.cylinder5.CrankShape.vis.color[2] = Real(engine.cylinder5.CrankShape.color[2]) "Color of shape";
//   input Real engine.cylinder5.CrankShape.vis.color[3] = Real(engine.cylinder5.CrankShape.color[3]) "Color of shape";
//   input Real engine.cylinder5.CrankShape.vis.specularCoefficient = engine.cylinder5.CrankShape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder5.CrankShape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder5.CrankShape.vis.lengthDirection[1],engine.cylinder5.CrankShape.vis.lengthDirection[2],engine.cylinder5.CrankShape.vis.lengthDirection[3]});
//   protected Real engine.cylinder5.CrankShape.vis.e_x[1](unit = "1") = if noEvent(engine.cylinder5.CrankShape.vis.abs_n_x < 1e-10) then 1.0 else engine.cylinder5.CrankShape.vis.lengthDirection[1] / engine.cylinder5.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder5.CrankShape.vis.e_x[2](unit = "1") = if noEvent(engine.cylinder5.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder5.CrankShape.vis.lengthDirection[2] / engine.cylinder5.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder5.CrankShape.vis.e_x[3](unit = "1") = if noEvent(engine.cylinder5.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder5.CrankShape.vis.lengthDirection[3] / engine.cylinder5.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder5.CrankShape.vis.n_z_aux[1](unit = "1") = engine.cylinder5.CrankShape.vis.e_x[2] * engine.cylinder5.CrankShape.vis.widthDirection[3] - engine.cylinder5.CrankShape.vis.e_x[3] * engine.cylinder5.CrankShape.vis.widthDirection[2];
//   protected Real engine.cylinder5.CrankShape.vis.n_z_aux[2](unit = "1") = engine.cylinder5.CrankShape.vis.e_x[3] * engine.cylinder5.CrankShape.vis.widthDirection[1] - engine.cylinder5.CrankShape.vis.e_x[1] * engine.cylinder5.CrankShape.vis.widthDirection[3];
//   protected Real engine.cylinder5.CrankShape.vis.n_z_aux[3](unit = "1") = engine.cylinder5.CrankShape.vis.e_x[1] * engine.cylinder5.CrankShape.vis.widthDirection[2] - engine.cylinder5.CrankShape.vis.e_x[2] * engine.cylinder5.CrankShape.vis.widthDirection[1];
//   protected Real engine.cylinder5.CrankShape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.CrankShape.vis.e_x[1],engine.cylinder5.CrankShape.vis.e_x[2],engine.cylinder5.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder5.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder5.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder5.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.CrankShape.vis.widthDirection[1],engine.cylinder5.CrankShape.vis.widthDirection[2],engine.cylinder5.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder5.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.CrankShape.vis.e_x[1],engine.cylinder5.CrankShape.vis.e_x[2],engine.cylinder5.CrankShape.vis.e_x[3]})[1];
//   protected Real engine.cylinder5.CrankShape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.CrankShape.vis.e_x[1],engine.cylinder5.CrankShape.vis.e_x[2],engine.cylinder5.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder5.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder5.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder5.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.CrankShape.vis.widthDirection[1],engine.cylinder5.CrankShape.vis.widthDirection[2],engine.cylinder5.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder5.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.CrankShape.vis.e_x[1],engine.cylinder5.CrankShape.vis.e_x[2],engine.cylinder5.CrankShape.vis.e_x[3]})[2];
//   protected Real engine.cylinder5.CrankShape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder5.CrankShape.vis.e_x[1],engine.cylinder5.CrankShape.vis.e_x[2],engine.cylinder5.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder5.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder5.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder5.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder5.CrankShape.vis.widthDirection[1],engine.cylinder5.CrankShape.vis.widthDirection[2],engine.cylinder5.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder5.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder5.CrankShape.vis.e_x[1],engine.cylinder5.CrankShape.vis.e_x[2],engine.cylinder5.CrankShape.vis.e_x[3]})[3];
//   protected output Real engine.cylinder5.CrankShape.vis.Form;
//   output Real engine.cylinder5.CrankShape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder5.CrankShape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder5.CrankShape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.CrankShape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.CrankShape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder5.CrankShape.vis.Material;
//   protected output Real engine.cylinder5.CrankShape.vis.Extra;
//   parameter Boolean engine.cylinder6.animation = engine.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.cylinderTopPosition(quantity = "Length", unit = "m") = 0.42 "Length from crank shaft to end of cylinder.";
//   parameter Real engine.cylinder6.crankLength(quantity = "Length", unit = "m") = 0.14 "Length of crank shaft in x direction";
//   parameter Real engine.cylinder6.crankPinOffset(quantity = "Length", unit = "m") = 0.05 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder6.crankPinLength(quantity = "Length", unit = "m") = 0.1 "Offset of crank pin from center axis";
//   parameter Real engine.cylinder6.cylinderInclination(quantity = "Angle", unit = "deg") = 30.0 "Inclination of cylinder";
//   parameter Real engine.cylinder6.crankAngleOffset(quantity = "Angle", unit = "deg") = -30.0 "Offset for crank angle";
//   parameter Real engine.cylinder6.pistonLength(quantity = "Length", unit = "m") = 0.1 " Length of cylinder";
//   parameter Real engine.cylinder6.pistonCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder6.pistonLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder6.pistonMass(quantity = "Mass", unit = "kg", min = 0.0) = 6.0 " Mass of piston";
//   parameter Real engine.cylinder6.pistonInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 11 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder6.pistonInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0076 " Inertia 22 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder6.pistonInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0088 " Inertia 33 of piston with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder6.rodLength(quantity = "Length", unit = "m") = 0.175 " Length of rod";
//   parameter Real engine.cylinder6.rodCenterOfMass(quantity = "Length", unit = "m") = engine.cylinder6.rodLength / 2.0 " Distance from frame_a to center of mass of piston";
//   parameter Real engine.cylinder6.rodMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 " Mass of rod";
//   parameter Real engine.cylinder6.rodInertia_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 11 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder6.rodInertia_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0005 " Inertia 22 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder6.rodInertia_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.006 " Inertia 33 of rod with respect to center of mass frame, parallel to frame_a";
//   parameter Real engine.cylinder6.cylinderLength(quantity = "Length", unit = "m") = engine.cylinder6.cylinderTopPosition - (engine.cylinder6.pistonLength + engine.cylinder6.rodLength - engine.cylinder6.crankPinOffset) "Maximum length of cylinder volume";
//   Real engine.cylinder6.Mid.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mid.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mid.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mid.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mid.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mid.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mid.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mid.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mid.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mid.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mid.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mid.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mid.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Mid.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.Mid.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.crankLength - engine.cylinder6.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.crankPinOffset "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder6.Mid.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.Mid.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.lengthDirection[1](unit = "1") = engine.cylinder6.Mid.r[1] - engine.cylinder6.Mid.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.lengthDirection[2](unit = "1") = engine.cylinder6.Mid.r[2] - engine.cylinder6.Mid.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.lengthDirection[3](unit = "1") = engine.cylinder6.Mid.r[3] - engine.cylinder6.Mid.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mid.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.Mid.r[1] - engine.cylinder6.Mid.r_shape[1],engine.cylinder6.Mid.r[2] - engine.cylinder6.Mid.r_shape[2],engine.cylinder6.Mid.r[3] - engine.cylinder6.Mid.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.Mid.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Mid.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.Mid.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Mid.width " Height of shape.";
//   parameter Real engine.cylinder6.Mid.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Mid.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Mid.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Mid.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.Mid.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder6.Mounting.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mounting.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mounting.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mounting.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mounting.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mounting.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mounting.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mounting.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Mounting.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Mounting.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Mounting.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.Mounting.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder6.Mounting.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.Mounting.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.lengthDirection[1](unit = "1") = engine.cylinder6.Mounting.r[1] - engine.cylinder6.Mounting.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.lengthDirection[2](unit = "1") = engine.cylinder6.Mounting.r[2] - engine.cylinder6.Mounting.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.lengthDirection[3](unit = "1") = engine.cylinder6.Mounting.r[3] - engine.cylinder6.Mounting.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Mounting.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.Mounting.r[1] - engine.cylinder6.Mounting.r_shape[1],engine.cylinder6.Mounting.r[2] - engine.cylinder6.Mounting.r_shape[2],engine.cylinder6.Mounting.r[3] - engine.cylinder6.Mounting.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.Mounting.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Mounting.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.Mounting.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Mounting.width " Height of shape.";
//   parameter Real engine.cylinder6.Mounting.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Mounting.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Mounting.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Mounting.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.Mounting.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder6.CylinderInclination.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CylinderInclination.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.CylinderInclination.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.CylinderInclination.r[1](quantity = "Length", unit = "m") = engine.cylinder6.crankLength - engine.cylinder6.crankPinLength / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder6.CylinderInclination.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder6.CylinderInclination.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.CylinderInclination.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.CylinderInclination.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.CylinderInclination.angle(quantity = "Angle", unit = "deg") = engine.cylinder6.cylinderInclination " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder6.CylinderInclination.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder6.CylinderInclination.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder6.CylinderInclination.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder6.CylinderInclination.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder6.CylinderInclination.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder6.CylinderInclination.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder6.CylinderInclination.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder6.CylinderInclination.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.CylinderInclination.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.lengthDirection[1](unit = "1") = engine.cylinder6.CylinderInclination.r[1] - engine.cylinder6.CylinderInclination.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.lengthDirection[2](unit = "1") = engine.cylinder6.CylinderInclination.r[2] - engine.cylinder6.CylinderInclination.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.lengthDirection[3](unit = "1") = engine.cylinder6.CylinderInclination.r[3] - engine.cylinder6.CylinderInclination.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CylinderInclination.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.CylinderInclination.r[1] - engine.cylinder6.CylinderInclination.r_shape[1],engine.cylinder6.CylinderInclination.r[2] - engine.cylinder6.CylinderInclination.r_shape[2],engine.cylinder6.CylinderInclination.r[3] - engine.cylinder6.CylinderInclination.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.CylinderInclination.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.CylinderInclination.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.CylinderInclination.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.CylinderInclination.width " Height of shape.";
//   parameter Real engine.cylinder6.CylinderInclination.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.CylinderInclination.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.CylinderInclination.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.CylinderInclination.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.CylinderInclination.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CylinderInclination.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankAngle.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankAngle.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankAngle.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankAngle.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankAngle.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankAngle.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.CrankAngle.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.CrankAngle.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter enumeration(RotationAxis, TwoAxesVectors, PlanarRotationSequence) engine.cylinder6.CrankAngle.rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis "Type of rotation description";
//   parameter Real engine.cylinder6.CrankAngle.n[1](unit = "1") = 1.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.CrankAngle.n[2](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.CrankAngle.n[3](unit = "1") = 0.0 " Axis of rotation in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.CrankAngle.angle(quantity = "Angle", unit = "deg") = engine.cylinder6.crankAngleOffset " Angle to rotate frame_a around axis n into frame_b";
//   parameter Real engine.cylinder6.CrankAngle.n_x[1](unit = "1") = 1.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.n_x[2](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.n_x[3](unit = "1") = 0.0 " Vector along x-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.n_y[1](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.n_y[2](unit = "1") = 1.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.n_y[3](unit = "1") = 0.0 " Vector along y-axis of frame_b resolved in frame_a";
//   parameter Integer engine.cylinder6.CrankAngle.sequence[1](min = 1, max = 3) = 1 " Sequence of rotations";
//   parameter Integer engine.cylinder6.CrankAngle.sequence[2](min = 1, max = 3) = 2 " Sequence of rotations";
//   parameter Integer engine.cylinder6.CrankAngle.sequence[3](min = 1, max = 3) = 3 " Sequence of rotations";
//   parameter Real engine.cylinder6.CrankAngle.angles[1](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder6.CrankAngle.angles[2](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter Real engine.cylinder6.CrankAngle.angles[3](quantity = "Angle", unit = "deg") = 0.0 " Rotation angles around the axes defined in 'sequence'";
//   parameter String engine.cylinder6.CrankAngle.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.CrankAngle.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.lengthDirection[1](unit = "1") = engine.cylinder6.CrankAngle.r[1] - engine.cylinder6.CrankAngle.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.lengthDirection[2](unit = "1") = engine.cylinder6.CrankAngle.r[2] - engine.cylinder6.CrankAngle.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.lengthDirection[3](unit = "1") = engine.cylinder6.CrankAngle.r[3] - engine.cylinder6.CrankAngle.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.CrankAngle.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.CrankAngle.r[1] - engine.cylinder6.CrankAngle.r_shape[1],engine.cylinder6.CrankAngle.r[2] - engine.cylinder6.CrankAngle.r_shape[2],engine.cylinder6.CrankAngle.r[3] - engine.cylinder6.CrankAngle.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.CrankAngle.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.CrankAngle.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.CrankAngle.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.CrankAngle.width " Height of shape.";
//   parameter Real engine.cylinder6.CrankAngle.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.CrankAngle.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.CrankAngle.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.CrankAngle.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.CrankAngle.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[2,3] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[3,2] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[2,2] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[2,3] = 0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[3,2] = -0.5 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.T[3,3] = 0.866025403784439 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.CrankAngle.R_rel_inv.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.jointRRP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder6.jointRRP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.jointRRP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder6.jointRRP.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.jointRRP.n_a[1](unit = "1") = 1.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder6.jointRRP.n_a[2](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder6.jointRRP.n_a[3](unit = "1") = 0.0 "Axes of the two revolute joints resolved in frame_a (both axes are parallel to each other)";
//   parameter Real engine.cylinder6.jointRRP.n_b[1](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder6.jointRRP.n_b[2](unit = "1") = -1.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder6.jointRRP.n_b[3](unit = "1") = 0.0 "Axis of prismatic joint fixed and resolved in frame_b (must be orthogonal to revolute joint axes)";
//   parameter Real engine.cylinder6.jointRRP.rRod1_ia[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder6.rodLength "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.rRod1_ia[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_a to revolute joint in the middle, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.rRod2_ib[1](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder6.jointRRP.rRod2_ib[2](quantity = "Length", unit = "m") = -engine.cylinder6.pistonLength "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder6.jointRRP.rRod2_ib[3](quantity = "Length", unit = "m") = 0.0 "Vector from origin of frame_ib to revolute joint in the middle, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder6.jointRRP.s_offset(quantity = "Length", unit = "m") = -engine.cylinder6.cylinderTopPosition "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder6.jointRRP.s_guess(quantity = "Length", unit = "m") = 0.0 "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder6.jointRRP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the revolute joints";
//   parameter Real engine.cylinder6.jointRRP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the revolute joints";
//   input Integer engine.cylinder6.jointRRP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder6.jointRRP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   input Integer engine.cylinder6.jointRRP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the revolute joints";
//   parameter Real engine.cylinder6.jointRRP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder6.jointRRP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.boxColor[1](min = 0, max = 255) = engine.cylinder6.jointRRP.cylinderColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.boxColor[2](min = 0, max = 255) = engine.cylinder6.jointRRP.cylinderColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.boxColor[3](min = 0, max = 255) = engine.cylinder6.jointRRP.cylinderColor[3] "Color of prismatic joint box";
//   parameter Real engine.cylinder6.jointRRP.rodDiameter(quantity = "Length", unit = "m", min = 0.0) = 1.1 * engine.cylinder6.jointRRP.cylinderDiameter "Diameter of the two rods connecting the joints";
//   input Integer engine.cylinder6.jointRRP.rodColor[1](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder6.jointRRP.rodColor[2](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Integer engine.cylinder6.jointRRP.rodColor[3](min = 0, max = 255) = 155 "Color of the two rods connecting the joints";
//   input Real engine.cylinder6.jointRRP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.jointRRP.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder6.jointRRP.e_a[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.n_a[1],engine.cylinder6.jointRRP.n_a[2],engine.cylinder6.jointRRP.n_a[3]},1e-13)[1] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.e_a[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.n_a[1],engine.cylinder6.jointRRP.n_a[2],engine.cylinder6.jointRRP.n_a[3]},1e-13)[2] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.e_a[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.n_a[1],engine.cylinder6.jointRRP.n_a[2],engine.cylinder6.jointRRP.n_a[3]},1e-13)[3] "Unit vector along axes of rotations, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.e_ia[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.e2_ia[1] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.e_ia[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.e2_ia[2] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.e_ia[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.e2_ia[3] "Unit vector along axes of rotations, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.e_im[1](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder6.jointRRP.e_im[2](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder6.jointRRP.e_im[3](unit = "1", fixed = false) "Unit vector along axes of rotations, resolved in frame_im";
//   parameter Real engine.cylinder6.jointRRP.e_b[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.prismatic.e[1] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder6.jointRRP.e_b[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.prismatic.e[2] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   parameter Real engine.cylinder6.jointRRP.e_b[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.prismatic.e[3] "Unit vector along axes of translation of the prismatic joint, resolved in frame_b and frame_ib";
//   Real engine.cylinder6.jointRRP.totalPower(quantity = "Power", unit = "W") = engine.cylinder6.jointRRP.jointUSP.totalPower "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_ib.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.frame_im.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.jointRRP.jointUSP.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder6.jointRRP.jointUSP.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.jointRRP.jointUSP.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.animation = false "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.showUniversalAxes = false " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.n1_a[1](unit = "1") = engine.cylinder6.jointRRP.n_a[1] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.n1_a[2](unit = "1") = engine.cylinder6.jointRRP.n_a[2] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.n1_a[3](unit = "1") = engine.cylinder6.jointRRP.n_a[3] "Axis 1 of universal joint fixed and resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod 1)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.n_b[1](unit = "1") = engine.cylinder6.jointRRP.n_b[1] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.n_b[2](unit = "1") = engine.cylinder6.jointRRP.n_b[2] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.n_b[3](unit = "1") = engine.cylinder6.jointRRP.n_b[3] "Axis of prismatic joint fixed and resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rRod1_ia[1](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.rRod1_ia[1] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rRod1_ia[2](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.rRod1_ia[2] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rRod1_ia[3](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.rRod1_ia[3] "Vector from origin of frame_a to spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rRod2_ib[1](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.rRod2_ib[1] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rRod2_ib[2](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.rRod2_ib[2] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rRod2_ib[3](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.rRod2_ib[3] "Vector from origin of frame_ib to spherical joint, resolved in frame_ib (frame_ib is parallel to frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.s_offset(quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.s_offset "Relative distance offset of prismatic joint (distance between the prismatic joint frames = s(t) + s_offset)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.s_guess(quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Diameter of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.sphereColor[1](min = 0, max = 255) = 255 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.sphereColor[2](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.sphereColor[3](min = 0, max = 255) = 0 "Color of the spheres representing the universal and the spherical joint";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.sphereDiameter / 2.0 "Diameter of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1Color[1](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1Color[2](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1Color[3](min = 0, max = 255) = 155 "Color of rod 1 connecting the universal and the spherical joint";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2Diameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.rod1Diameter "Diameter of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod2Color[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod1Color[1] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod2Color[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod1Color[2] "Color of rod 2 connecting the prismatic and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod2Color[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod1Color[3] "Color of rod 2 connecting the prismatic and the spherical joint";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.boxWidthDirection[1](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.boxWidthDirection[2](unit = "1") = 1.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.boxWidthDirection[3](unit = "1") = 0.0 "Vector in width direction of prismatic joint, resolved in frame_b";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.boxWidth(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.boxWidth "Height of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.jointUSP.boxColor[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.sphereColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.jointUSP.boxColor[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.sphereColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.jointUSP.boxColor[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.sphereColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder6.jointRRP.jointUSP.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultJointWidth "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder6.jointRRP.jointUSP.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder6.jointRRP.jointUSP.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder6.jointRRP.jointUSP.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinders representing the two universal joint axes";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.checkTotalPower = engine.cylinder6.jointRRP.checkTotalPower "= true, if total power flowing into this component shall be determined (must be zero)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.eRod1_ia[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.eRod1_ia[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.eRod1_ia[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3] "Unit vector from origin of frame_a to origin of spherical joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.e2_ia[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.e2_ia[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.e2_ia[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1Length(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.rod1.rodLength "Length of rod 1 (= distance between universal and spherical joint";
//   Real engine.cylinder6.jointRRP.jointUSP.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   Real engine.cylinder6.jointRRP.jointUSP.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.prismatic.animation = engine.cylinder6.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.length(quantity = "Length", unit = "m", start = 1.0) = engine.cylinder6.jointRRP.jointUSP.rod1.rodLength "Fixed length of length constraint";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.n[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.n_b[1] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.n[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.n_b[2] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.n[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.n_b[3] "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.s_offset(quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.s_offset "Relative distance offset (distance between frame_a and frame_b = s(t) + s_offset)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.s_guess(quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.s_guess "Select the configuration such that at initial time |s(t0)-s_guess|is minimal";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.boxWidthDirection[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.boxWidthDirection[1] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.boxWidthDirection[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.boxWidthDirection[2] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.boxWidthDirection[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.boxWidthDirection[3] "Vector in width direction of box, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.boxWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.boxWidth "Width of prismatic joint box";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.boxHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.boxHeight "Height of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.jointUSP.prismatic.boxColor[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.boxColor[1] "Color of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.jointUSP.prismatic.boxColor[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.boxColor[2] "Color of prismatic joint box";
//   input Integer engine.cylinder6.jointRRP.jointUSP.prismatic.boxColor[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.boxColor[3] "Color of prismatic joint box";
//   input Real engine.cylinder6.jointRRP.jointUSP.prismatic.specularCoefficient = engine.cylinder6.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.prismatic.positiveBranch(fixed = false) "Selection of one of the two solutions of the non-linear constraint equation";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.prismatic.n[1],engine.cylinder6.jointRRP.jointUSP.prismatic.n[2],engine.cylinder6.jointRRP.jointUSP.prismatic.n[3]},1e-13)[1] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.prismatic.n[1],engine.cylinder6.jointRRP.jointUSP.prismatic.n[2],engine.cylinder6.jointRRP.jointUSP.prismatic.n[3]},1e-13)[2] "Unit vector in direction of translation axis, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.prismatic.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.prismatic.n[1],engine.cylinder6.jointRRP.jointUSP.prismatic.n[2],engine.cylinder6.jointRRP.jointUSP.prismatic.n[3]},1e-13)[3] "Unit vector in direction of translation axis, resolved in frame_a";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.s(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n = s + s_offset)";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.distance(quantity = "Length", unit = "m") "Relative distance between frame_a and frame_b along axis n";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in frame_a";
//   Real engine.cylinder6.jointRRP.jointUSP.prismatic.f(quantity = "Force", unit = "N") "= axis.f (driving force in the axis)";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[1](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[1] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[2](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[2] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[3](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[3] "Position vector from frame_a to frame_a side of length constraint, resolved in frame_a of revolute joint";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[1](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[1] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[2](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[2] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[3](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[3] "Position vector from frame_b to frame_b side of length constraint, resolved in frame_b of revolute joint";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[1](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[2](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[3](quantity = "Length", unit = "m") "= rb - ra";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.B "Coefficient B of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.C "Coefficient C of equation: s*s + B*s + C = 0";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.k1 "Constant of quadratic equation solution";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.k2 "Constant of quadratic equation solution";
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.k1a(start = 1.0);
//   protected Real engine.cylinder6.jointRRP.jointUSP.prismatic.k1b;
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.rod1.animation = engine.cylinder6.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.rod1.showUniversalAxes = engine.cylinder6.jointRRP.jointUSP.showUniversalAxes " = true, if universal joint shall be visualized with two cylinders, otherwise with a sphere (provided animation=true)";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.rod1.computeRodLength = false "= true, if distance between frame_a and frame_b shall be computed during initialization (see info)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.n1_a[1] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.n1_a[2] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.n1_a[3] "Axis 1 of universal joint resolved in frame_a (axis 2 is orthogonal to axis 1 and to rod)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.rRod1_ia[1] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.rRod1_ia[2] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3](quantity = "Length", unit = "m") = engine.cylinder6.jointRRP.jointUSP.rRod1_ia[3] "Vector from origin of frame_a to origin of frame_b, resolved in frame_ia (if computeRodLength=true, rRod_ia is only an axis vector along the connecting rod)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.sphereDiameter "Diameter of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.sphereColor[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.sphereColor[1] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.sphereColor[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.sphereColor[2] "Color of spheres representing the universal and the spherical joint";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.sphereColor[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.sphereColor[3] "Color of spheres representing the universal and the spherical joint";
//   parameter String engine.cylinder6.jointRRP.jointUSP.rod1.rodShapeType = "cylinder" "Shape type of rod connecting the universal and the spherical joint";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rodWidth(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.rod1Diameter "Width of rod shape in direction of axis 2 of universal joint.";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rodHeight(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.rod1Diameter "Height of rod shape in direction that is orthogonal to rod and to axis 2";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rodExtra = 0.0 "Additional parameter depending on rodShapeType";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.rodColor[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod1Color[1] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.rodColor[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod1Color[2] "Color of rod shape connecting the universal and the spherical joints";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.rodColor[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod1Color[3] "Color of rod shape connecting the universal and the spherical joints";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.cylinderLength "Length of cylinders representing the two universal joint axes";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.cylinderDiameter "Diameter of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.cylinderColor[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.cylinderColor[1] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.cylinderColor[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.cylinderColor[2] "Color of cylinders representing the two universal joint axes";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod1.cylinderColor[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.cylinderColor[3] "Color of cylinders representing the two universal joint axes";
//   input Real engine.cylinder6.jointRRP.jointUSP.rod1.specularCoefficient = engine.cylinder6.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.rod1.kinematicConstraint = false "= false, if no constraint shall be defined, due to analytically solving a kinematic loop";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.constraintResidue = engine.cylinder6.jointRRP.jointUSP.rod1.f_rod - engine.cylinder6.jointRRP.jointUSP.f_rod "Constraint equation of joint in residue form: Either length constraint (= default) or equation to compute rod force (for analytic solution of loops in combination with Internal.RevoluteWithLengthConstraint/PrismaticWithLengthConstraint)";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.rod1.checkTotalPower = false "= true, if total power flowing into this component shall be determined (must be zero)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.f_rod(quantity = "Force", unit = "N") "Constraint force in direction of the rod (positive, if rod is pressed)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.rodLength(quantity = "Length", unit = "m", min = 0.0, fixed =  NOT engine.cylinder6.jointRRP.jointUSP.rod1.computeRodLength) = Modelica.Math.Vectors.length({engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3]}) "Length of rod (distance between origin of frame_a and origin of frame_b)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[1] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[2] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3]},1e-13)[3] "Unit vector from origin of frame_a to origin of frame_b, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[1] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[2] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1]},1e-13)[3] "Unit vector in direction of axis 2 of universal joint, resolved in frame_ia (orthogonal to n1_a and eRod_ia; note: frame_ia is parallel to frame_a when the universal joint angles are zero)";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.e3_ia[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[3] - engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[2] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.e3_ia[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[1] - engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[3] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod1.e3_ia[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[2] - engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[1] "Unit vector perpendicular to eRod_ia and e2_ia, resolved in frame_ia";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.totalPower(quantity = "Power", unit = "W") "Total power flowing into this element, if checkTotalPower=true (otherwise dummy)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[1](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[2](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[3](quantity = "Force", unit = "N") "frame_b.f without f_rod part, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3](unit = "1") "Unit vector in direction of rRod_a, resolved in frame_a (needed for analytic loop handling)";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[1](quantity = "Length", unit = "m", start = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[2](quantity = "Length", unit = "m", start = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[3](quantity = "Length", unit = "m", start = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[1](quantity = "Length", unit = "m", start = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[1]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[2](quantity = "Length", unit = "m", start = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[2]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[3](quantity = "Length", unit = "m", start = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_ia[3]) "Position vector from origin of frame_a to origin of frame_b resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[1](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[2](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[3](quantity = "Force", unit = "N") "frame_b.f resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a[1](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a[2](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a[3](quantity = "Force", unit = "N") "frame_ia.f resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3](quantity = "Torque", unit = "N.m") "frame_ia.t resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[1](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[2](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[3](unit = "1") "Vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.length2_n2_a(unit = "m2", start = 1.0) "Square of length of vector n2_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.length_n2_a(quantity = "Length", unit = "m") "Length of vector n2_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3](unit = "1") "Unit vector in direction of axis 2 of the universal joint (e2_ia), resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3](unit = "1") "Unit vector perpendicular to eRod_ia and e2_a, resolved in frame_a";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[1](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[2](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[3](unit = "1/s") "= der(rRod_a)/rodLength";
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[1](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[2](quantity = "AngularVelocity", unit = "rad/s");
//   protected Real engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[3](quantity = "AngularVelocity", unit = "rad/s");
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.jointRRP.jointUSP.rod2.animation = engine.cylinder6.jointRRP.jointUSP.animation "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.jointRRP.jointUSP.rRod2_ib[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.jointRRP.jointUSP.rRod2_ib[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.jointRRP.jointUSP.rRod2_ib[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder6.jointRRP.jointUSP.rod2.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.lengthDirection[1](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod2.r[1] - engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.lengthDirection[2](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod2.r[2] - engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.lengthDirection[3](unit = "1") = engine.cylinder6.jointRRP.jointUSP.rod2.r[3] - engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.jointRRP.jointUSP.rod2.r[1] - engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[1],engine.cylinder6.jointRRP.jointUSP.rod2.r[2] - engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[2],engine.cylinder6.jointRRP.jointUSP.rod2.r[3] - engine.cylinder6.jointRRP.jointUSP.rod2.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.rod2Diameter " Width of shape";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.jointRRP.jointUSP.rod2Diameter " Height of shape.";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.rod2.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod2.color[1](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod2Color[1] " Color of shape";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod2.color[2](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod2Color[2] " Color of shape";
//   input Integer engine.cylinder6.jointRRP.jointUSP.rod2.color[3](min = 0, max = 255) = engine.cylinder6.jointRRP.jointUSP.rod2Color[3] " Color of shape";
//   input Real engine.cylinder6.jointRRP.jointUSP.rod2.specularCoefficient = engine.cylinder6.jointRRP.jointUSP.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder6.jointRRP.jointUSP.relativePosition.r_rel[1] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder6.jointRRP.jointUSP.relativePosition.r_rel[2] "Relative position vector resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder6.jointRRP.jointUSP.relativePosition.r_rel[3] "Relative position vector resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder6.jointRRP.jointUSP.relativePosition.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_a "Frame in which output vector r_rel shall be resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   output Real engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3](quantity = "Position", unit = "m") "Relative position vector frame_b.r_0 - frame_a.r_0 resolved in frame defined by resolveInFrame";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.resolveInFrame = engine.cylinder6.jointRRP.jointUSP.relativePosition.resolveInFrame "Frame in which output vector r_rel is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   output Real engine.cylinder6.jointRRP.jointUSP.position_b[1].y "Connector of Real output signal";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.position_b[1].k(start = 1.0) = engine.cylinder6.jointRRP.jointUSP.rRod2_ib[1] "Constant output value";
//   output Real engine.cylinder6.jointRRP.jointUSP.position_b[2].y "Connector of Real output signal";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.position_b[2].k(start = 1.0) = engine.cylinder6.jointRRP.jointUSP.rRod2_ib[2] "Constant output value";
//   output Real engine.cylinder6.jointRRP.jointUSP.position_b[3].y "Connector of Real output signal";
//   parameter Real engine.cylinder6.jointRRP.jointUSP.position_b[3].k(start = 1.0) = engine.cylinder6.jointRRP.jointUSP.rRod2_ib[3] "Constant output value";
//   protected Real engine.cylinder6.jointRRP.jointUSP.aux "Denominator used to compute force in rod connecting universal and spherical joint";
//   Real engine.cylinder6.Rod.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Rod.animation = engine.cylinder6.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder6.Rod.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder6.Rod.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.rodLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.rodLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder6.rodMass "Mass of rigid body";
//   parameter Real engine.cylinder6.Rod.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.rodInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.rodInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.rodInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder6.Rod.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Rod.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Rod.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Rod.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Rod.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Rod.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Rod.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Rod.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Rod.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder6.Rod.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Rod.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Rod.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Rod.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder6.Rod.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Rod.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Rod.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder6.Rod.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Rod.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Rod.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Rod.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder6.Rod.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Rod.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Rod.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Rod.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder6.Rod.shapeType = "2" " Type of shape";
//   parameter Real engine.cylinder6.Rod.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.length(quantity = "Length", unit = "m") = engine.cylinder6.rodLength / 1.75 " Length of shape";
//   parameter Real engine.cylinder6.Rod.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.rodLength / 1.75 " Width of shape";
//   parameter Real engine.cylinder6.Rod.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.rodLength / 1.75 " Height of shape.";
//   parameter Real engine.cylinder6.Rod.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Rod.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Rod.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Rod.color[3](min = 0, max = 255) = 155 " Color of shape";
//   parameter Real engine.cylinder6.Rod.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder6.Rod.width " Diameter of sphere";
//   input Integer engine.cylinder6.Rod.sphereColor[1](min = 0, max = 255) = engine.cylinder6.Rod.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder6.Rod.sphereColor[2](min = 0, max = 255) = engine.cylinder6.Rod.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder6.Rod.sphereColor[3](min = 0, max = 255) = engine.cylinder6.Rod.color[3] " Color of sphere of mass";
//   input Real engine.cylinder6.Rod.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.Rod.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder6.Rod.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder6.Rod.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Rod.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Rod.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Rod.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.Rod.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Rod.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Rod.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Rod.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder6.Rod.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.Rod.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder6.Rod.frameTranslation.r[1] - engine.cylinder6.Rod.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder6.Rod.frameTranslation.r[2] - engine.cylinder6.Rod.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder6.Rod.frameTranslation.r[3] - engine.cylinder6.Rod.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.Rod.frameTranslation.r[1] - engine.cylinder6.Rod.frameTranslation.r_shape[1],engine.cylinder6.Rod.frameTranslation.r[2] - engine.cylinder6.Rod.frameTranslation.r_shape[2],engine.cylinder6.Rod.frameTranslation.r[3] - engine.cylinder6.Rod.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.Rod.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Rod.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.Rod.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Rod.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder6.Rod.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Rod.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Rod.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Rod.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.Rod.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder6.Rod.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Rod.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Rod.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Rod.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Rod.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder6.Rod.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Rod.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Rod.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Rod.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder6.Rod.m "Mass of rigid body";
//   parameter Real engine.cylinder6.Rod.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.Rod.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.Rod.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.Rod.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder6.Rod.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder6.Rod.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder6.Rod.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder6.Rod.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Rod.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Rod.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Rod.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Rod.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Rod.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Rod.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Rod.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Rod.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder6.Rod.body.angles_fixed = engine.cylinder6.Rod.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Rod.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder6.Rod.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Rod.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder6.Rod.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Rod.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder6.Rod.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder6.Rod.body.sequence_start[1](min = 1, max = 3) = engine.cylinder6.Rod.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Rod.body.sequence_start[2](min = 1, max = 3) = engine.cylinder6.Rod.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Rod.body.sequence_start[3](min = 1, max = 3) = engine.cylinder6.Rod.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder6.Rod.body.w_0_fixed = engine.cylinder6.Rod.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Rod.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder6.Rod.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Rod.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder6.Rod.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Rod.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder6.Rod.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder6.Rod.body.z_0_fixed = engine.cylinder6.Rod.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Rod.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder6.Rod.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Rod.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder6.Rod.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Rod.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder6.Rod.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Rod.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder6.Rod.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder6.Rod.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder6.Rod.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder6.Rod.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Rod.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder6.Rod.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder6.Rod.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder6.Rod.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder6.Rod.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder6.Rod.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder6.Rod.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder6.Rod.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.Rod.body.enforceStates = engine.cylinder6.Rod.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder6.Rod.body.useQuaternions = engine.cylinder6.Rod.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder6.Rod.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder6.Rod.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Rod.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder6.Rod.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Rod.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder6.Rod.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder6.Rod.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Rod.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.Rod.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.Rod.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.z_0_start[1],engine.cylinder6.Rod.body.z_0_start[2],engine.cylinder6.Rod.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.z_0_start[1],engine.cylinder6.Rod.body.z_0_start[2],engine.cylinder6.Rod.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder6.Rod.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.z_0_start[1],engine.cylinder6.Rod.body.z_0_start[2],engine.cylinder6.Rod.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder6.Rod.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.w_0_start[1],engine.cylinder6.Rod.body.w_0_start[2],engine.cylinder6.Rod.body.w_0_start[3]})[1], fixed = engine.cylinder6.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder6.Rod.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.w_0_start[1],engine.cylinder6.Rod.body.w_0_start[2],engine.cylinder6.Rod.body.w_0_start[3]})[2], fixed = engine.cylinder6.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder6.Rod.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.w_0_start[1],engine.cylinder6.Rod.body.w_0_start[2],engine.cylinder6.Rod.body.w_0_start[3]})[3], fixed = engine.cylinder6.Rod.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder6.Rod.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.z_0_start[1],engine.cylinder6.Rod.body.z_0_start[2],engine.cylinder6.Rod.body.z_0_start[3]})[1], fixed = engine.cylinder6.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder6.Rod.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.z_0_start[1],engine.cylinder6.Rod.body.z_0_start[2],engine.cylinder6.Rod.body.z_0_start[3]})[2], fixed = engine.cylinder6.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder6.Rod.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.z_0_start[1],engine.cylinder6.Rod.body.z_0_start[2],engine.cylinder6.Rod.body.z_0_start[3]})[3], fixed = engine.cylinder6.Rod.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder6.Rod.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder6.Rod.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder6.Rod.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder6.Rod.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder6.Rod.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder6.Rod.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder6.Rod.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Rod.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder6.Rod.body.Q[1](start = engine.cylinder6.Rod.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder6.Rod.body.Q[2](start = engine.cylinder6.Rod.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder6.Rod.body.Q[3](start = engine.cylinder6.Rod.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder6.Rod.body.Q[4](start = engine.cylinder6.Rod.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder6.Rod.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder6.Rod.body.sequence_start[1] == engine.cylinder6.Rod.body.sequence_angleStates[1] AND engine.cylinder6.Rod.body.sequence_start[2] == engine.cylinder6.Rod.body.sequence_angleStates[2] AND engine.cylinder6.Rod.body.sequence_start[3] == engine.cylinder6.Rod.body.sequence_angleStates[3] then engine.cylinder6.Rod.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.sequence_angleStates[1],engine.cylinder6.Rod.body.sequence_angleStates[2],engine.cylinder6.Rod.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder6.Rod.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder6.Rod.body.sequence_start[1] == engine.cylinder6.Rod.body.sequence_angleStates[1] AND engine.cylinder6.Rod.body.sequence_start[2] == engine.cylinder6.Rod.body.sequence_angleStates[2] AND engine.cylinder6.Rod.body.sequence_start[3] == engine.cylinder6.Rod.body.sequence_angleStates[3] then engine.cylinder6.Rod.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.sequence_angleStates[1],engine.cylinder6.Rod.body.sequence_angleStates[2],engine.cylinder6.Rod.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder6.Rod.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder6.Rod.body.sequence_start[1] == engine.cylinder6.Rod.body.sequence_angleStates[1] AND engine.cylinder6.Rod.body.sequence_start[2] == engine.cylinder6.Rod.body.sequence_angleStates[2] AND engine.cylinder6.Rod.body.sequence_start[3] == engine.cylinder6.Rod.body.sequence_angleStates[3] then engine.cylinder6.Rod.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder6.Rod.body.R_start,{engine.cylinder6.Rod.body.sequence_angleStates[1],engine.cylinder6.Rod.body.sequence_angleStates[2],engine.cylinder6.Rod.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder6.Rod.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder6.Rod.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder6.Rod.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder6.Rod.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder6.Rod.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder6.Rod.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder6.Rod.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder6.Rod.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder6.Rod.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder6.Rod.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder6.Rod.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder6.Rod.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder6.Rod.shape1.shapeType = engine.cylinder6.Rod.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder6.Rod.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Rod.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.Rod.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.Rod.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.Rod.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder6.Rod.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.Rod.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder6.Rod.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.Rod.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder6.Rod.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.Rod.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder6.Rod.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder6.Rod.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder6.Rod.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.lengthDirection[1](unit = "1") = engine.cylinder6.Rod.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.lengthDirection[2](unit = "1") = engine.cylinder6.Rod.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.lengthDirection[3](unit = "1") = engine.cylinder6.Rod.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.widthDirection[1](unit = "1") = engine.cylinder6.Rod.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.widthDirection[2](unit = "1") = engine.cylinder6.Rod.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.widthDirection[3](unit = "1") = engine.cylinder6.Rod.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.Rod.shape1.length(quantity = "Length", unit = "m") = engine.cylinder6.Rod.length "Length of visual object";
//   input Real engine.cylinder6.Rod.shape1.width(quantity = "Length", unit = "m") = engine.cylinder6.Rod.width "Width of visual object";
//   input Real engine.cylinder6.Rod.shape1.height(quantity = "Length", unit = "m") = engine.cylinder6.Rod.height "Height of visual object";
//   input Real engine.cylinder6.Rod.shape1.extra = engine.cylinder6.Rod.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder6.Rod.shape1.color[1] = Real(engine.cylinder6.Rod.color[1]) "Color of shape";
//   input Real engine.cylinder6.Rod.shape1.color[2] = Real(engine.cylinder6.Rod.color[2]) "Color of shape";
//   input Real engine.cylinder6.Rod.shape1.color[3] = Real(engine.cylinder6.Rod.color[3]) "Color of shape";
//   input Real engine.cylinder6.Rod.shape1.specularCoefficient = engine.cylinder6.Rod.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder6.Rod.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder6.Rod.shape1.lengthDirection[1],engine.cylinder6.Rod.shape1.lengthDirection[2],engine.cylinder6.Rod.shape1.lengthDirection[3]});
//   protected Real engine.cylinder6.Rod.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder6.Rod.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder6.Rod.shape1.lengthDirection[1] / engine.cylinder6.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder6.Rod.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder6.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder6.Rod.shape1.lengthDirection[2] / engine.cylinder6.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder6.Rod.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder6.Rod.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder6.Rod.shape1.lengthDirection[3] / engine.cylinder6.Rod.shape1.abs_n_x;
//   protected Real engine.cylinder6.Rod.shape1.n_z_aux[1](unit = "1") = engine.cylinder6.Rod.shape1.e_x[2] * engine.cylinder6.Rod.shape1.widthDirection[3] - engine.cylinder6.Rod.shape1.e_x[3] * engine.cylinder6.Rod.shape1.widthDirection[2];
//   protected Real engine.cylinder6.Rod.shape1.n_z_aux[2](unit = "1") = engine.cylinder6.Rod.shape1.e_x[3] * engine.cylinder6.Rod.shape1.widthDirection[1] - engine.cylinder6.Rod.shape1.e_x[1] * engine.cylinder6.Rod.shape1.widthDirection[3];
//   protected Real engine.cylinder6.Rod.shape1.n_z_aux[3](unit = "1") = engine.cylinder6.Rod.shape1.e_x[1] * engine.cylinder6.Rod.shape1.widthDirection[2] - engine.cylinder6.Rod.shape1.e_x[2] * engine.cylinder6.Rod.shape1.widthDirection[1];
//   protected Real engine.cylinder6.Rod.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.Rod.shape1.e_x[1],engine.cylinder6.Rod.shape1.e_x[2],engine.cylinder6.Rod.shape1.e_x[3]},if noEvent(engine.cylinder6.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder6.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder6.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.Rod.shape1.widthDirection[1],engine.cylinder6.Rod.shape1.widthDirection[2],engine.cylinder6.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder6.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.Rod.shape1.e_x[1],engine.cylinder6.Rod.shape1.e_x[2],engine.cylinder6.Rod.shape1.e_x[3]})[1];
//   protected Real engine.cylinder6.Rod.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.Rod.shape1.e_x[1],engine.cylinder6.Rod.shape1.e_x[2],engine.cylinder6.Rod.shape1.e_x[3]},if noEvent(engine.cylinder6.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder6.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder6.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.Rod.shape1.widthDirection[1],engine.cylinder6.Rod.shape1.widthDirection[2],engine.cylinder6.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder6.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.Rod.shape1.e_x[1],engine.cylinder6.Rod.shape1.e_x[2],engine.cylinder6.Rod.shape1.e_x[3]})[2];
//   protected Real engine.cylinder6.Rod.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.Rod.shape1.e_x[1],engine.cylinder6.Rod.shape1.e_x[2],engine.cylinder6.Rod.shape1.e_x[3]},if noEvent(engine.cylinder6.Rod.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder6.Rod.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder6.Rod.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.Rod.shape1.widthDirection[1],engine.cylinder6.Rod.shape1.widthDirection[2],engine.cylinder6.Rod.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder6.Rod.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.Rod.shape1.e_x[1],engine.cylinder6.Rod.shape1.e_x[2],engine.cylinder6.Rod.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder6.Rod.shape1.Form;
//   output Real engine.cylinder6.Rod.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder6.Rod.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder6.Rod.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.Rod.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.Rod.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.Rod.shape1.Material;
//   protected output Real engine.cylinder6.Rod.shape1.Extra;
//   Real engine.cylinder6.Piston.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Piston.animation = engine.cylinder6.animation "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.cylinder6.Piston.animateSphere = false "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.cylinder6.Piston.r[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.pistonLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.pistonLength / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder6.pistonMass "Mass of rigid body";
//   parameter Real engine.cylinder6.Piston.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.pistonInertia_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.pistonInertia_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.pistonInertia_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.cylinder6.Piston.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Piston.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Piston.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Piston.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Piston.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Piston.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Piston.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Piston.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Piston.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder6.Piston.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Piston.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Piston.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Piston.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder6.Piston.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Piston.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Piston.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder6.Piston.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Piston.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Piston.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Piston.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder6.Piston.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Piston.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Piston.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Piston.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.cylinder6.Piston.shapeType = "3" " Type of shape";
//   parameter Real engine.cylinder6.Piston.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.lengthDirection[1](unit = "1") = 1.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.lengthDirection[2](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.lengthDirection[3](unit = "1") = 0.0 " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.widthDirection[2](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.widthDirection[3](unit = "1") = -1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.length(quantity = "Length", unit = "m") = 0.08 " Length of shape";
//   parameter Real engine.cylinder6.Piston.width(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Width of shape";
//   parameter Real engine.cylinder6.Piston.height(quantity = "Length", unit = "m", min = 0.0) = 0.08 " Height of shape.";
//   parameter Real engine.cylinder6.Piston.extra = 1.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Piston.color[1](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder6.Piston.color[2](min = 0, max = 255) = 180 " Color of shape";
//   input Integer engine.cylinder6.Piston.color[3](min = 0, max = 255) = 180 " Color of shape";
//   parameter Real engine.cylinder6.Piston.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.cylinder6.Piston.width " Diameter of sphere";
//   input Integer engine.cylinder6.Piston.sphereColor[1](min = 0, max = 255) = engine.cylinder6.Piston.color[1] " Color of sphere of mass";
//   input Integer engine.cylinder6.Piston.sphereColor[2](min = 0, max = 255) = engine.cylinder6.Piston.color[2] " Color of sphere of mass";
//   input Integer engine.cylinder6.Piston.sphereColor[3](min = 0, max = 255) = engine.cylinder6.Piston.color[3] " Color of sphere of mass";
//   input Real engine.cylinder6.Piston.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.Piston.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder6.Piston.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder6.Piston.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Piston.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Piston.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Piston.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.Piston.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Piston.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Piston.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Piston.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder6.Piston.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.Piston.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.lengthDirection[1](unit = "1") = engine.cylinder6.Piston.frameTranslation.r[1] - engine.cylinder6.Piston.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.lengthDirection[2](unit = "1") = engine.cylinder6.Piston.frameTranslation.r[2] - engine.cylinder6.Piston.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.lengthDirection[3](unit = "1") = engine.cylinder6.Piston.frameTranslation.r[3] - engine.cylinder6.Piston.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.Piston.frameTranslation.r[1] - engine.cylinder6.Piston.frameTranslation.r_shape[1],engine.cylinder6.Piston.frameTranslation.r[2] - engine.cylinder6.Piston.frameTranslation.r_shape[2],engine.cylinder6.Piston.frameTranslation.r[3] - engine.cylinder6.Piston.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.Piston.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Piston.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.Piston.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Piston.frameTranslation.width " Height of shape.";
//   parameter Real engine.cylinder6.Piston.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Piston.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Piston.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Piston.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.Piston.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder6.Piston.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Piston.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Piston.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.cylinder6.Piston.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Piston.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Piston.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.Piston.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.cylinder6.Piston.m "Mass of rigid body";
//   parameter Real engine.cylinder6.Piston.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.Piston.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.Piston.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.cylinder6.Piston.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder6.Piston.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder6.Piston.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.cylinder6.Piston.I_32 " (3,2) element of inertia tensor";
//   Real engine.cylinder6.Piston.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Piston.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Piston.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.cylinder6.Piston.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Piston.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Piston.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.cylinder6.Piston.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Piston.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.cylinder6.Piston.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.cylinder6.Piston.body.angles_fixed = engine.cylinder6.Piston.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Piston.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder6.Piston.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Piston.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder6.Piston.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.cylinder6.Piston.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.cylinder6.Piston.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.cylinder6.Piston.body.sequence_start[1](min = 1, max = 3) = engine.cylinder6.Piston.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Piston.body.sequence_start[2](min = 1, max = 3) = engine.cylinder6.Piston.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.cylinder6.Piston.body.sequence_start[3](min = 1, max = 3) = engine.cylinder6.Piston.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.cylinder6.Piston.body.w_0_fixed = engine.cylinder6.Piston.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Piston.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder6.Piston.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Piston.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder6.Piston.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.cylinder6.Piston.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.cylinder6.Piston.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.cylinder6.Piston.body.z_0_fixed = engine.cylinder6.Piston.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.cylinder6.Piston.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder6.Piston.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Piston.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder6.Piston.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Piston.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.cylinder6.Piston.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.cylinder6.Piston.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.cylinder6.Piston.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.cylinder6.Piston.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.cylinder6.Piston.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.cylinder6.Piston.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Piston.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.cylinder6.Piston.body.cylinderColor[1](min = 0, max = 255) = engine.cylinder6.Piston.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.cylinder6.Piston.body.cylinderColor[2](min = 0, max = 255) = engine.cylinder6.Piston.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.cylinder6.Piston.body.cylinderColor[3](min = 0, max = 255) = engine.cylinder6.Piston.body.sphereColor[3] "Color of cylinder";
//   input Real engine.cylinder6.Piston.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.cylinder6.Piston.body.enforceStates = engine.cylinder6.Piston.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.cylinder6.Piston.body.useQuaternions = engine.cylinder6.Piston.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.cylinder6.Piston.body.sequence_angleStates[1](min = 1, max = 3) = engine.cylinder6.Piston.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Piston.body.sequence_angleStates[2](min = 1, max = 3) = engine.cylinder6.Piston.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.cylinder6.Piston.body.sequence_angleStates[3](min = 1, max = 3) = engine.cylinder6.Piston.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.cylinder6.Piston.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_11 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_21 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_22 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_31 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_32 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.cylinder6.Piston.body.I_33 "inertia tensor";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.Piston.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.cylinder6.Piston.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.z_0_start[1],engine.cylinder6.Piston.body.z_0_start[2],engine.cylinder6.Piston.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.z_0_start[1],engine.cylinder6.Piston.body.z_0_start[2],engine.cylinder6.Piston.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.cylinder6.Piston.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.z_0_start[1],engine.cylinder6.Piston.body.z_0_start[2],engine.cylinder6.Piston.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.cylinder6.Piston.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.w_0_start[1],engine.cylinder6.Piston.body.w_0_start[2],engine.cylinder6.Piston.body.w_0_start[3]})[1], fixed = engine.cylinder6.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder6.Piston.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.w_0_start[1],engine.cylinder6.Piston.body.w_0_start[2],engine.cylinder6.Piston.body.w_0_start[3]})[2], fixed = engine.cylinder6.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder6.Piston.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.w_0_start[1],engine.cylinder6.Piston.body.w_0_start[2],engine.cylinder6.Piston.body.w_0_start[3]})[3], fixed = engine.cylinder6.Piston.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.cylinder6.Piston.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.z_0_start[1],engine.cylinder6.Piston.body.z_0_start[2],engine.cylinder6.Piston.body.z_0_start[3]})[1], fixed = engine.cylinder6.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder6.Piston.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.z_0_start[1],engine.cylinder6.Piston.body.z_0_start[2],engine.cylinder6.Piston.body.z_0_start[3]})[2], fixed = engine.cylinder6.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder6.Piston.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.z_0_start[1],engine.cylinder6.Piston.body.z_0_start[2],engine.cylinder6.Piston.body.z_0_start[3]})[3], fixed = engine.cylinder6.Piston.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.cylinder6.Piston.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder6.Piston.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.cylinder6.Piston.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.cylinder6.Piston.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder6.Piston.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder6.Piston.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.cylinder6.Piston.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.cylinder6.Piston.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.cylinder6.Piston.body.Q[1](start = engine.cylinder6.Piston.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder6.Piston.body.Q[2](start = engine.cylinder6.Piston.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder6.Piston.body.Q[3](start = engine.cylinder6.Piston.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.cylinder6.Piston.body.Q[4](start = engine.cylinder6.Piston.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.cylinder6.Piston.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder6.Piston.body.sequence_start[1] == engine.cylinder6.Piston.body.sequence_angleStates[1] AND engine.cylinder6.Piston.body.sequence_start[2] == engine.cylinder6.Piston.body.sequence_angleStates[2] AND engine.cylinder6.Piston.body.sequence_start[3] == engine.cylinder6.Piston.body.sequence_angleStates[3] then engine.cylinder6.Piston.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.sequence_angleStates[1],engine.cylinder6.Piston.body.sequence_angleStates[2],engine.cylinder6.Piston.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder6.Piston.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder6.Piston.body.sequence_start[1] == engine.cylinder6.Piston.body.sequence_angleStates[1] AND engine.cylinder6.Piston.body.sequence_start[2] == engine.cylinder6.Piston.body.sequence_angleStates[2] AND engine.cylinder6.Piston.body.sequence_start[3] == engine.cylinder6.Piston.body.sequence_angleStates[3] then engine.cylinder6.Piston.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.sequence_angleStates[1],engine.cylinder6.Piston.body.sequence_angleStates[2],engine.cylinder6.Piston.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.cylinder6.Piston.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.cylinder6.Piston.body.sequence_start[1] == engine.cylinder6.Piston.body.sequence_angleStates[1] AND engine.cylinder6.Piston.body.sequence_start[2] == engine.cylinder6.Piston.body.sequence_angleStates[2] AND engine.cylinder6.Piston.body.sequence_start[3] == engine.cylinder6.Piston.body.sequence_angleStates[3] then engine.cylinder6.Piston.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.cylinder6.Piston.body.R_start,{engine.cylinder6.Piston.body.sequence_angleStates[1],engine.cylinder6.Piston.body.sequence_angleStates[2],engine.cylinder6.Piston.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.cylinder6.Piston.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder6.Piston.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder6.Piston.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder6.Piston.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder6.Piston.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.cylinder6.Piston.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.cylinder6.Piston.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder6.Piston.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder6.Piston.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.cylinder6.Piston.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder6.Piston.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.cylinder6.Piston.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   parameter String engine.cylinder6.Piston.shape1.shapeType = engine.cylinder6.Piston.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder6.Piston.shape1.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.Piston.shape1.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.Piston.shape1.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.Piston.shape1.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.Piston.shape1.r[1](quantity = "Length", unit = "m") = engine.cylinder6.Piston.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.Piston.shape1.r[2](quantity = "Length", unit = "m") = engine.cylinder6.Piston.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.Piston.shape1.r[3](quantity = "Length", unit = "m") = engine.cylinder6.Piston.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.Piston.shape1.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder6.Piston.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder6.Piston.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder6.Piston.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.lengthDirection[1](unit = "1") = engine.cylinder6.Piston.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.lengthDirection[2](unit = "1") = engine.cylinder6.Piston.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.lengthDirection[3](unit = "1") = engine.cylinder6.Piston.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.widthDirection[1](unit = "1") = engine.cylinder6.Piston.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.widthDirection[2](unit = "1") = engine.cylinder6.Piston.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.widthDirection[3](unit = "1") = engine.cylinder6.Piston.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.Piston.shape1.length(quantity = "Length", unit = "m") = engine.cylinder6.Piston.length "Length of visual object";
//   input Real engine.cylinder6.Piston.shape1.width(quantity = "Length", unit = "m") = engine.cylinder6.Piston.width "Width of visual object";
//   input Real engine.cylinder6.Piston.shape1.height(quantity = "Length", unit = "m") = engine.cylinder6.Piston.height "Height of visual object";
//   input Real engine.cylinder6.Piston.shape1.extra = engine.cylinder6.Piston.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder6.Piston.shape1.color[1] = Real(engine.cylinder6.Piston.color[1]) "Color of shape";
//   input Real engine.cylinder6.Piston.shape1.color[2] = Real(engine.cylinder6.Piston.color[2]) "Color of shape";
//   input Real engine.cylinder6.Piston.shape1.color[3] = Real(engine.cylinder6.Piston.color[3]) "Color of shape";
//   input Real engine.cylinder6.Piston.shape1.specularCoefficient = engine.cylinder6.Piston.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder6.Piston.shape1.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder6.Piston.shape1.lengthDirection[1],engine.cylinder6.Piston.shape1.lengthDirection[2],engine.cylinder6.Piston.shape1.lengthDirection[3]});
//   protected Real engine.cylinder6.Piston.shape1.e_x[1](unit = "1") = if noEvent(engine.cylinder6.Piston.shape1.abs_n_x < 1e-10) then 1.0 else engine.cylinder6.Piston.shape1.lengthDirection[1] / engine.cylinder6.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder6.Piston.shape1.e_x[2](unit = "1") = if noEvent(engine.cylinder6.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder6.Piston.shape1.lengthDirection[2] / engine.cylinder6.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder6.Piston.shape1.e_x[3](unit = "1") = if noEvent(engine.cylinder6.Piston.shape1.abs_n_x < 1e-10) then 0.0 else engine.cylinder6.Piston.shape1.lengthDirection[3] / engine.cylinder6.Piston.shape1.abs_n_x;
//   protected Real engine.cylinder6.Piston.shape1.n_z_aux[1](unit = "1") = engine.cylinder6.Piston.shape1.e_x[2] * engine.cylinder6.Piston.shape1.widthDirection[3] - engine.cylinder6.Piston.shape1.e_x[3] * engine.cylinder6.Piston.shape1.widthDirection[2];
//   protected Real engine.cylinder6.Piston.shape1.n_z_aux[2](unit = "1") = engine.cylinder6.Piston.shape1.e_x[3] * engine.cylinder6.Piston.shape1.widthDirection[1] - engine.cylinder6.Piston.shape1.e_x[1] * engine.cylinder6.Piston.shape1.widthDirection[3];
//   protected Real engine.cylinder6.Piston.shape1.n_z_aux[3](unit = "1") = engine.cylinder6.Piston.shape1.e_x[1] * engine.cylinder6.Piston.shape1.widthDirection[2] - engine.cylinder6.Piston.shape1.e_x[2] * engine.cylinder6.Piston.shape1.widthDirection[1];
//   protected Real engine.cylinder6.Piston.shape1.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.Piston.shape1.e_x[1],engine.cylinder6.Piston.shape1.e_x[2],engine.cylinder6.Piston.shape1.e_x[3]},if noEvent(engine.cylinder6.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder6.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder6.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.Piston.shape1.widthDirection[1],engine.cylinder6.Piston.shape1.widthDirection[2],engine.cylinder6.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder6.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.Piston.shape1.e_x[1],engine.cylinder6.Piston.shape1.e_x[2],engine.cylinder6.Piston.shape1.e_x[3]})[1];
//   protected Real engine.cylinder6.Piston.shape1.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.Piston.shape1.e_x[1],engine.cylinder6.Piston.shape1.e_x[2],engine.cylinder6.Piston.shape1.e_x[3]},if noEvent(engine.cylinder6.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder6.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder6.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.Piston.shape1.widthDirection[1],engine.cylinder6.Piston.shape1.widthDirection[2],engine.cylinder6.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder6.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.Piston.shape1.e_x[1],engine.cylinder6.Piston.shape1.e_x[2],engine.cylinder6.Piston.shape1.e_x[3]})[2];
//   protected Real engine.cylinder6.Piston.shape1.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.Piston.shape1.e_x[1],engine.cylinder6.Piston.shape1.e_x[2],engine.cylinder6.Piston.shape1.e_x[3]},if noEvent(engine.cylinder6.Piston.shape1.n_z_aux[1] ^ 2.0 + (engine.cylinder6.Piston.shape1.n_z_aux[2] ^ 2.0 + engine.cylinder6.Piston.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.Piston.shape1.widthDirection[1],engine.cylinder6.Piston.shape1.widthDirection[2],engine.cylinder6.Piston.shape1.widthDirection[3]} else if noEvent(abs(engine.cylinder6.Piston.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.Piston.shape1.e_x[1],engine.cylinder6.Piston.shape1.e_x[2],engine.cylinder6.Piston.shape1.e_x[3]})[3];
//   protected output Real engine.cylinder6.Piston.shape1.Form;
//   output Real engine.cylinder6.Piston.shape1.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder6.Piston.shape1.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder6.Piston.shape1.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.Piston.shape1.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.Piston.shape1.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.Piston.shape1.Material;
//   protected output Real engine.cylinder6.Piston.shape1.Extra;
//   Real engine.cylinder6.gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder6.gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real engine.cylinder6.gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real engine.cylinder6.gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real engine.cylinder6.gasForce.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
//   parameter Real engine.cylinder6.gasForce.L(quantity = "Length", unit = "m") = engine.cylinder6.cylinderLength "Length of cylinder";
//   parameter Real engine.cylinder6.gasForce.d(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of cylinder";
//   parameter Real engine.cylinder6.gasForce.k0(quantity = "Volume", unit = "m3") = 0.01 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder6.gasForce.k1(quantity = "Volume", unit = "m3") = 1.0 "Volume V = k0 + k1*(1-x), with x = 1 + s_rel/L";
//   parameter Real engine.cylinder6.gasForce.k(quantity = "HeatCapacity", unit = "J/K") = 1.0 "Gas constant (p*V = k*T)";
//   constant Real engine.cylinder6.gasForce.pi = 3.14159265358979;
//   Real engine.cylinder6.gasForce.x "Normalized position of cylinder";
//   Real engine.cylinder6.gasForce.y "Normalized relative movement (= -s_rel/L)";
//   Real engine.cylinder6.gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real engine.cylinder6.gasForce.press(quantity = "Pressure", unit = "bar") "cylinder pressure";
//   Real engine.cylinder6.gasForce.V(quantity = "Volume", unit = "m3");
//   Real engine.cylinder6.gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real engine.cylinder6.gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   protected constant Real engine.cylinder6.gasForce.unitMass(quantity = "Mass", unit = "kg", min = 0.0) = 1.0;
//   protected Real engine.cylinder6.gasForce.p(quantity = "Pressure", unit = "Pa", displayUnit = "bar");
//   Real engine.cylinder6.Crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.Crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.Crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.Crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.Crank.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.cylinder6.Crank.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.cylinder6.crankLength "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.r[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.r[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.cylinder6.Crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.cylinder6.Crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.lengthDirection[1](unit = "1") = engine.cylinder6.Crank.r[1] - engine.cylinder6.Crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.lengthDirection[2](unit = "1") = engine.cylinder6.Crank.r[2] - engine.cylinder6.Crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.lengthDirection[3](unit = "1") = engine.cylinder6.Crank.r[3] - engine.cylinder6.Crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.cylinder6.Crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.cylinder6.Crank.r[1] - engine.cylinder6.Crank.r_shape[1],engine.cylinder6.Crank.r[2] - engine.cylinder6.Crank.r_shape[2],engine.cylinder6.Crank.r[3] - engine.cylinder6.Crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.cylinder6.Crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.cylinder6.Crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.cylinder6.Crank.width " Height of shape.";
//   parameter Real engine.cylinder6.Crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.cylinder6.Crank.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Crank.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.cylinder6.Crank.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.cylinder6.Crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.cylinder6.cylinder_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.cylinder_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.cylinder_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.cylinder_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.cylinder_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.cylinder_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.cylinder_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.cylinder_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.cylinder_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.cylinder_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.cylinder_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.cylinder_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.cylinder_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.cylinder_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.cylinder_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.cylinder_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.cylinder_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.cylinder_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.cylinder_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.cylinder_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.cylinder_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.cylinder_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.cylinder_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.cylinder_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.cylinder_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.crank_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.crank_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.crank_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.crank_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.crank_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.crank_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.crank_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.crank_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.crank_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.crank_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.crank_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.crank_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.crank_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.crank_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.crank_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.crank_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.crank_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.crank_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.crank_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.crank_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.crank_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.crank_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.crank_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.crank_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.crank_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankShape.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankShape.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankShape.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankShape.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.cylinder6.CrankShape.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankShape.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankShape.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.cylinder6.CrankShape.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankShape.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.cylinder6.CrankShape.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.cylinder6.CrankShape.animation = engine.cylinder6.animation "= true, if animation shall be enabled";
//   parameter String engine.cylinder6.CrankShape.shapeType = "1" "Type of shape";
//   input Real engine.cylinder6.CrankShape.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder6.crankLength - engine.cylinder6.crankPinLength / 2.0 - 0.002 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction of shape, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.widthDirection[1](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.widthDirection[2](unit = "1") = 1.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.widthDirection[3](unit = "1") = 0.0 "Vector in width direction of shape, resolved in frame_a";
//   input Real engine.cylinder6.CrankShape.length(quantity = "Length", unit = "m", min = 0.0, start = 1.0) = engine.cylinder6.crankPinOffset / 0.5 "Length of shape";
//   input Real engine.cylinder6.CrankShape.width(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder6.crankPinOffset / 0.5 "Width of shape";
//   input Real engine.cylinder6.CrankShape.height(quantity = "Length", unit = "m", min = 0.0, start = 0.1) = engine.cylinder6.crankPinOffset / 0.5 "Height of shape";
//   input Integer engine.cylinder6.CrankShape.color[1](min = 0, max = 255) = 0 "Color of shape";
//   input Integer engine.cylinder6.CrankShape.color[2](min = 0, max = 255) = 128 "Color of shape";
//   input Integer engine.cylinder6.CrankShape.color[3](min = 0, max = 255) = 255 "Color of shape";
//   input Real engine.cylinder6.CrankShape.extra = 1.0 "Additional data for cylinder, cone, pipe, gearwheel and spring";
//   input Real engine.cylinder6.CrankShape.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter String engine.cylinder6.CrankShape.vis.shapeType = engine.cylinder6.CrankShape.shapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.cylinder6.CrankShape.vis.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.CrankShape.vis.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.cylinder6.CrankShape.vis.r[1](quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.CrankShape.vis.r[2](quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.CrankShape.vis.r[3](quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.cylinder6.CrankShape.vis.r_shape[1](quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.r_shape[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.r_shape[2](quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.r_shape[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.r_shape[3](quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.r_shape[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.lengthDirection[1](unit = "1") = engine.cylinder6.CrankShape.lengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.lengthDirection[2](unit = "1") = engine.cylinder6.CrankShape.lengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.lengthDirection[3](unit = "1") = engine.cylinder6.CrankShape.lengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.widthDirection[1](unit = "1") = engine.cylinder6.CrankShape.widthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.widthDirection[2](unit = "1") = engine.cylinder6.CrankShape.widthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.widthDirection[3](unit = "1") = engine.cylinder6.CrankShape.widthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real engine.cylinder6.CrankShape.vis.length(quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.length "Length of visual object";
//   input Real engine.cylinder6.CrankShape.vis.width(quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.width "Width of visual object";
//   input Real engine.cylinder6.CrankShape.vis.height(quantity = "Length", unit = "m") = engine.cylinder6.CrankShape.height "Height of visual object";
//   input Real engine.cylinder6.CrankShape.vis.extra = engine.cylinder6.CrankShape.extra "Additional size data for some of the shape types";
//   input Real engine.cylinder6.CrankShape.vis.color[1] = Real(engine.cylinder6.CrankShape.color[1]) "Color of shape";
//   input Real engine.cylinder6.CrankShape.vis.color[2] = Real(engine.cylinder6.CrankShape.color[2]) "Color of shape";
//   input Real engine.cylinder6.CrankShape.vis.color[3] = Real(engine.cylinder6.CrankShape.color[3]) "Color of shape";
//   input Real engine.cylinder6.CrankShape.vis.specularCoefficient = engine.cylinder6.CrankShape.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.cylinder6.CrankShape.vis.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.cylinder6.CrankShape.vis.lengthDirection[1],engine.cylinder6.CrankShape.vis.lengthDirection[2],engine.cylinder6.CrankShape.vis.lengthDirection[3]});
//   protected Real engine.cylinder6.CrankShape.vis.e_x[1](unit = "1") = if noEvent(engine.cylinder6.CrankShape.vis.abs_n_x < 1e-10) then 1.0 else engine.cylinder6.CrankShape.vis.lengthDirection[1] / engine.cylinder6.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder6.CrankShape.vis.e_x[2](unit = "1") = if noEvent(engine.cylinder6.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder6.CrankShape.vis.lengthDirection[2] / engine.cylinder6.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder6.CrankShape.vis.e_x[3](unit = "1") = if noEvent(engine.cylinder6.CrankShape.vis.abs_n_x < 1e-10) then 0.0 else engine.cylinder6.CrankShape.vis.lengthDirection[3] / engine.cylinder6.CrankShape.vis.abs_n_x;
//   protected Real engine.cylinder6.CrankShape.vis.n_z_aux[1](unit = "1") = engine.cylinder6.CrankShape.vis.e_x[2] * engine.cylinder6.CrankShape.vis.widthDirection[3] - engine.cylinder6.CrankShape.vis.e_x[3] * engine.cylinder6.CrankShape.vis.widthDirection[2];
//   protected Real engine.cylinder6.CrankShape.vis.n_z_aux[2](unit = "1") = engine.cylinder6.CrankShape.vis.e_x[3] * engine.cylinder6.CrankShape.vis.widthDirection[1] - engine.cylinder6.CrankShape.vis.e_x[1] * engine.cylinder6.CrankShape.vis.widthDirection[3];
//   protected Real engine.cylinder6.CrankShape.vis.n_z_aux[3](unit = "1") = engine.cylinder6.CrankShape.vis.e_x[1] * engine.cylinder6.CrankShape.vis.widthDirection[2] - engine.cylinder6.CrankShape.vis.e_x[2] * engine.cylinder6.CrankShape.vis.widthDirection[1];
//   protected Real engine.cylinder6.CrankShape.vis.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.CrankShape.vis.e_x[1],engine.cylinder6.CrankShape.vis.e_x[2],engine.cylinder6.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder6.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder6.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder6.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.CrankShape.vis.widthDirection[1],engine.cylinder6.CrankShape.vis.widthDirection[2],engine.cylinder6.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder6.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.CrankShape.vis.e_x[1],engine.cylinder6.CrankShape.vis.e_x[2],engine.cylinder6.CrankShape.vis.e_x[3]})[1];
//   protected Real engine.cylinder6.CrankShape.vis.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.CrankShape.vis.e_x[1],engine.cylinder6.CrankShape.vis.e_x[2],engine.cylinder6.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder6.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder6.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder6.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.CrankShape.vis.widthDirection[1],engine.cylinder6.CrankShape.vis.widthDirection[2],engine.cylinder6.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder6.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.CrankShape.vis.e_x[1],engine.cylinder6.CrankShape.vis.e_x[2],engine.cylinder6.CrankShape.vis.e_x[3]})[2];
//   protected Real engine.cylinder6.CrankShape.vis.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.cylinder6.CrankShape.vis.e_x[1],engine.cylinder6.CrankShape.vis.e_x[2],engine.cylinder6.CrankShape.vis.e_x[3]},if noEvent(engine.cylinder6.CrankShape.vis.n_z_aux[1] ^ 2.0 + (engine.cylinder6.CrankShape.vis.n_z_aux[2] ^ 2.0 + engine.cylinder6.CrankShape.vis.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.cylinder6.CrankShape.vis.widthDirection[1],engine.cylinder6.CrankShape.vis.widthDirection[2],engine.cylinder6.CrankShape.vis.widthDirection[3]} else if noEvent(abs(engine.cylinder6.CrankShape.vis.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.cylinder6.CrankShape.vis.e_x[1],engine.cylinder6.CrankShape.vis.e_x[2],engine.cylinder6.CrankShape.vis.e_x[3]})[3];
//   protected output Real engine.cylinder6.CrankShape.vis.Form;
//   output Real engine.cylinder6.CrankShape.vis.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.cylinder6.CrankShape.vis.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.cylinder6.CrankShape.vis.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.CrankShape.vis.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.CrankShape.vis.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.cylinder6.CrankShape.vis.Material;
//   protected output Real engine.cylinder6.CrankShape.vis.Extra;
//   Real engine.bearing.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.bearing.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.bearing.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.bearing.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.bearing.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.bearing.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.bearing.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.bearing.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.bearing.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.bearing.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.bearing.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.bearing.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.bearing.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.bearing.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.bearing.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.bearing.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.bearing.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.bearing.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.bearing.useAxisFlange = true "= true, if axis flange is enabled";
//   parameter Boolean engine.bearing.animation = true "= true, if animation shall be enabled (show axis as cylinder)";
//   parameter Real engine.bearing.n[1](unit = "1") = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.bearing.n[2](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real engine.bearing.n[3](unit = "1") = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   constant Real engine.bearing.phi_offset(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Relative angle offset (angle = phi_offset + phi)";
//   parameter Real engine.bearing.cylinderLength(quantity = "Length", unit = "m", min = 0.0) = 0.02 "Length of cylinder representing the joint axis";
//   parameter Real engine.bearing.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.06 "Diameter of cylinder representing the joint axis";
//   input Integer engine.bearing.cylinderColor[1](min = 0, max = 255) = 255 "Color of cylinder representing the joint axis";
//   input Integer engine.bearing.cylinderColor[2](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Integer engine.bearing.cylinderColor[3](min = 0, max = 255) = 0 "Color of cylinder representing the joint axis";
//   input Real engine.bearing.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter enumeration(never, avoid, default, prefer, always) engine.bearing.stateSelect = StateSelect.prefer "Priority to use joint angle phi and w=der(phi) as states";
//   Real engine.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, StateSelect = StateSelect.prefer) "Relative rotation angle from frame_a to frame_b";
//   Real engine.bearing.w(quantity = "AngularVelocity", unit = "rad/s", start = 0.0, StateSelect = StateSelect.prefer) "First derivative of angle phi (relative angular velocity)";
//   Real engine.bearing.a(quantity = "AngularAcceleration", unit = "rad/s2", start = 0.0) "Second derivative of angle phi (relative angular acceleration)";
//   Real engine.bearing.tau(quantity = "Torque", unit = "N.m") "Driving torque in direction of axis of rotation";
//   Real engine.bearing.angle(quantity = "Angle", unit = "rad", displayUnit = "deg") "= phi_offset + phi";
//   protected parameter Real engine.bearing.e[1](unit = "1") = Modelica.Math.Vectors.normalize({engine.bearing.n[1],engine.bearing.n[2],engine.bearing.n[3]},1e-13)[1] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real engine.bearing.e[2](unit = "1") = Modelica.Math.Vectors.normalize({engine.bearing.n[1],engine.bearing.n[2],engine.bearing.n[3]},1e-13)[2] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   protected parameter Real engine.bearing.e[3](unit = "1") = Modelica.Math.Vectors.normalize({engine.bearing.n[1],engine.bearing.n[2],engine.bearing.n[3]},1e-13)[3] "Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)";
//   Real engine.bearing.R_rel.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.bearing.R_rel.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.R_rel.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.bearing.R_rel.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.bearing.fixed.phi0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Fixed offset angle of housing";
//   Real engine.bearing.fixed.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real engine.bearing.fixed.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real engine.bearing.internalAxis.tau(quantity = "Torque", unit = "N.m") = engine.bearing.tau "External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)";
//   Real engine.bearing.internalAxis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "External support angle (= flange.phi)";
//   Real engine.bearing.internalAxis.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real engine.bearing.internalAxis.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real engine.bearing.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real engine.bearing.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real engine.bearing.support.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real engine.bearing.support.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter String engine.bearing.cylinder.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real engine.bearing.cylinder.R.T[1,1] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[1,2] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[1,3] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[2,1] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[2,2] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[2,3] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[3,1] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[3,2] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.T[3,3] "Transformation matrix from world frame to local frame";
//   input Real engine.bearing.cylinder.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.bearing.cylinder.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.bearing.cylinder.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   input Real engine.bearing.cylinder.r[1](quantity = "Length", unit = "m") = engine.bearing.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.bearing.cylinder.r[2](quantity = "Length", unit = "m") = engine.bearing.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.bearing.cylinder.r[3](quantity = "Length", unit = "m") = engine.bearing.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real engine.bearing.cylinder.r_shape[1](quantity = "Length", unit = "m") = (-engine.bearing.cylinderLength) * engine.bearing.e[1] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.bearing.cylinder.r_shape[2](quantity = "Length", unit = "m") = (-engine.bearing.cylinderLength) * engine.bearing.e[2] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.bearing.cylinder.r_shape[3](quantity = "Length", unit = "m") = (-engine.bearing.cylinderLength) * engine.bearing.e[3] / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real engine.bearing.cylinder.lengthDirection[1](unit = "1") = engine.bearing.e[1] "Vector in length direction, resolved in object frame";
//   input Real engine.bearing.cylinder.lengthDirection[2](unit = "1") = engine.bearing.e[2] "Vector in length direction, resolved in object frame";
//   input Real engine.bearing.cylinder.lengthDirection[3](unit = "1") = engine.bearing.e[3] "Vector in length direction, resolved in object frame";
//   input Real engine.bearing.cylinder.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real engine.bearing.cylinder.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
//   input Real engine.bearing.cylinder.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
//   input Real engine.bearing.cylinder.length(quantity = "Length", unit = "m") = engine.bearing.cylinderLength "Length of visual object";
//   input Real engine.bearing.cylinder.width(quantity = "Length", unit = "m") = engine.bearing.cylinderDiameter "Width of visual object";
//   input Real engine.bearing.cylinder.height(quantity = "Length", unit = "m") = engine.bearing.cylinderDiameter "Height of visual object";
//   input Real engine.bearing.cylinder.extra = 0.0 "Additional size data for some of the shape types";
//   input Real engine.bearing.cylinder.color[1] = Real(engine.bearing.cylinderColor[1]) "Color of shape";
//   input Real engine.bearing.cylinder.color[2] = Real(engine.bearing.cylinderColor[2]) "Color of shape";
//   input Real engine.bearing.cylinder.color[3] = Real(engine.bearing.cylinderColor[3]) "Color of shape";
//   input Real engine.bearing.cylinder.specularCoefficient = engine.bearing.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   protected Real engine.bearing.cylinder.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({engine.bearing.cylinder.lengthDirection[1],engine.bearing.cylinder.lengthDirection[2],engine.bearing.cylinder.lengthDirection[3]});
//   protected Real engine.bearing.cylinder.e_x[1](unit = "1") = if noEvent(engine.bearing.cylinder.abs_n_x < 1e-10) then 1.0 else engine.bearing.cylinder.lengthDirection[1] / engine.bearing.cylinder.abs_n_x;
//   protected Real engine.bearing.cylinder.e_x[2](unit = "1") = if noEvent(engine.bearing.cylinder.abs_n_x < 1e-10) then 0.0 else engine.bearing.cylinder.lengthDirection[2] / engine.bearing.cylinder.abs_n_x;
//   protected Real engine.bearing.cylinder.e_x[3](unit = "1") = if noEvent(engine.bearing.cylinder.abs_n_x < 1e-10) then 0.0 else engine.bearing.cylinder.lengthDirection[3] / engine.bearing.cylinder.abs_n_x;
//   protected Real engine.bearing.cylinder.n_z_aux[1](unit = "1") = engine.bearing.cylinder.e_x[2] * engine.bearing.cylinder.widthDirection[3] - engine.bearing.cylinder.e_x[3] * engine.bearing.cylinder.widthDirection[2];
//   protected Real engine.bearing.cylinder.n_z_aux[2](unit = "1") = engine.bearing.cylinder.e_x[3] * engine.bearing.cylinder.widthDirection[1] - engine.bearing.cylinder.e_x[1] * engine.bearing.cylinder.widthDirection[3];
//   protected Real engine.bearing.cylinder.n_z_aux[3](unit = "1") = engine.bearing.cylinder.e_x[1] * engine.bearing.cylinder.widthDirection[2] - engine.bearing.cylinder.e_x[2] * engine.bearing.cylinder.widthDirection[1];
//   protected Real engine.bearing.cylinder.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.bearing.cylinder.e_x[1],engine.bearing.cylinder.e_x[2],engine.bearing.cylinder.e_x[3]},if noEvent(engine.bearing.cylinder.n_z_aux[1] ^ 2.0 + (engine.bearing.cylinder.n_z_aux[2] ^ 2.0 + engine.bearing.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.bearing.cylinder.widthDirection[1],engine.bearing.cylinder.widthDirection[2],engine.bearing.cylinder.widthDirection[3]} else if noEvent(abs(engine.bearing.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.bearing.cylinder.e_x[1],engine.bearing.cylinder.e_x[2],engine.bearing.cylinder.e_x[3]})[1];
//   protected Real engine.bearing.cylinder.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.bearing.cylinder.e_x[1],engine.bearing.cylinder.e_x[2],engine.bearing.cylinder.e_x[3]},if noEvent(engine.bearing.cylinder.n_z_aux[1] ^ 2.0 + (engine.bearing.cylinder.n_z_aux[2] ^ 2.0 + engine.bearing.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.bearing.cylinder.widthDirection[1],engine.bearing.cylinder.widthDirection[2],engine.bearing.cylinder.widthDirection[3]} else if noEvent(abs(engine.bearing.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.bearing.cylinder.e_x[1],engine.bearing.cylinder.e_x[2],engine.bearing.cylinder.e_x[3]})[2];
//   protected Real engine.bearing.cylinder.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({engine.bearing.cylinder.e_x[1],engine.bearing.cylinder.e_x[2],engine.bearing.cylinder.e_x[3]},if noEvent(engine.bearing.cylinder.n_z_aux[1] ^ 2.0 + (engine.bearing.cylinder.n_z_aux[2] ^ 2.0 + engine.bearing.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {engine.bearing.cylinder.widthDirection[1],engine.bearing.cylinder.widthDirection[2],engine.bearing.cylinder.widthDirection[3]} else if noEvent(abs(engine.bearing.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{engine.bearing.cylinder.e_x[1],engine.bearing.cylinder.e_x[2],engine.bearing.cylinder.e_x[3]})[3];
//   protected output Real engine.bearing.cylinder.Form;
//   output Real engine.bearing.cylinder.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.bearing.cylinder.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.bearing.cylinder.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
//   output Real engine.bearing.cylinder.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.bearing.cylinder.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.bearing.cylinder.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
//   output Real engine.bearing.cylinder.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.bearing.cylinder.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real engine.bearing.cylinder.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   protected output Real engine.bearing.cylinder.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.bearing.cylinder.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.bearing.cylinder.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real engine.bearing.cylinder.Material;
//   protected output Real engine.bearing.cylinder.Extra;
//   Real engine.crank.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.crank.animation = false "= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)";
//   parameter Boolean engine.crank.animateSphere = true "= true, if mass shall be animated as sphere provided animation=true";
//   parameter Real engine.crank.r[1](quantity = "Length", unit = "m", start = 0.0) "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.crank.r[2](quantity = "Length", unit = "m", start = 0.0) "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.crank.r[3](quantity = "Length", unit = "m", start = 0.0) "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.crank.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = 0.3 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.crank.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.crank.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.crank.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 180.0 "Mass of rigid body";
//   parameter Real engine.crank.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.1 " (1,1) element of inertia tensor";
//   parameter Real engine.crank.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 1e-05 " (2,2) element of inertia tensor";
//   parameter Real engine.crank.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 1e-05 " (3,3) element of inertia tensor";
//   parameter Real engine.crank.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (2,1) element of inertia tensor";
//   parameter Real engine.crank.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,1) element of inertia tensor";
//   parameter Real engine.crank.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = 0.0 " (3,2) element of inertia tensor";
//   Real engine.crank.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.crank.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.crank.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.crank.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.crank.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.crank.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.crank.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.crank.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.crank.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.crank.angles_fixed = false "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.crank.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.crank.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.crank.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.crank.sequence_start[1](min = 1, max = 3) = 1 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.crank.sequence_start[2](min = 1, max = 3) = 2 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.crank.sequence_start[3](min = 1, max = 3) = 3 "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.crank.w_0_fixed = false "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.crank.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.crank.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.crank.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.crank.z_0_fixed = false "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.crank.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.crank.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.crank.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter String engine.crank.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.crank.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.crank.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.crank.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.crank.lengthDirection[1](unit = "1") = engine.crank.r[1] - engine.crank.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.crank.lengthDirection[2](unit = "1") = engine.crank.r[2] - engine.crank.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.crank.lengthDirection[3](unit = "1") = engine.crank.r[3] - engine.crank.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.crank.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.crank.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.crank.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.crank.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.crank.r[1] - engine.crank.r_shape[1],engine.crank.r[2] - engine.crank.r_shape[2],engine.crank.r[3] - engine.crank.r_shape[3]}) " Length of shape";
//   parameter Real engine.crank.width(quantity = "Length", unit = "m", min = 0.0) = engine.crank.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.crank.height(quantity = "Length", unit = "m", min = 0.0) = engine.crank.width " Height of shape.";
//   parameter Real engine.crank.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.crank.color[1](min = 0, max = 255) = 0 " Color of shape";
//   input Integer engine.crank.color[2](min = 0, max = 255) = 128 " Color of shape";
//   input Integer engine.crank.color[3](min = 0, max = 255) = 255 " Color of shape";
//   parameter Real engine.crank.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 2.0 * engine.crank.width " Diameter of sphere";
//   input Integer engine.crank.sphereColor[1](min = 0, max = 255) = engine.crank.color[1] " Color of sphere of mass";
//   input Integer engine.crank.sphereColor[2](min = 0, max = 255) = engine.crank.color[2] " Color of sphere of mass";
//   input Integer engine.crank.sphereColor[3](min = 0, max = 255) = engine.crank.color[3] " Color of sphere of mass";
//   input Real engine.crank.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.crank.enforceStates = false " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.crank.useQuaternions = true " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.crank.sequence_angleStates[1](min = 1, max = 3) = 1 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.crank.sequence_angleStates[2](min = 1, max = 3) = 2 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.crank.sequence_angleStates[3](min = 1, max = 3) = 3 " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   Real engine.crank.frameTranslation.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frameTranslation.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frameTranslation.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frameTranslation.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frameTranslation.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frameTranslation.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frameTranslation.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.frameTranslation.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frameTranslation.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frameTranslation.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.crank.frameTranslation.animation = false "= true, if animation shall be enabled";
//   parameter Real engine.crank.frameTranslation.r[1](quantity = "Length", unit = "m", start = 0.0) = engine.crank.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.r[2](quantity = "Length", unit = "m", start = 0.0) = engine.crank.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.r[3](quantity = "Length", unit = "m", start = 0.0) = engine.crank.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter String engine.crank.frameTranslation.shapeType = "cylinder" " Type of shape";
//   parameter Real engine.crank.frameTranslation.r_shape[1](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.r_shape[2](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.r_shape[3](quantity = "Length", unit = "m") = 0.0 " Vector from frame_a to shape origin, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.lengthDirection[1](unit = "1") = engine.crank.frameTranslation.r[1] - engine.crank.frameTranslation.r_shape[1] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.lengthDirection[2](unit = "1") = engine.crank.frameTranslation.r[2] - engine.crank.frameTranslation.r_shape[2] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.lengthDirection[3](unit = "1") = engine.crank.frameTranslation.r[3] - engine.crank.frameTranslation.r_shape[3] " Vector in length direction of shape, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.widthDirection[1](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.widthDirection[2](unit = "1") = 1.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.widthDirection[3](unit = "1") = 0.0 " Vector in width direction of shape, resolved in frame_a";
//   parameter Real engine.crank.frameTranslation.length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({engine.crank.frameTranslation.r[1] - engine.crank.frameTranslation.r_shape[1],engine.crank.frameTranslation.r[2] - engine.crank.frameTranslation.r_shape[2],engine.crank.frameTranslation.r[3] - engine.crank.frameTranslation.r_shape[3]}) " Length of shape";
//   parameter Real engine.crank.frameTranslation.width(quantity = "Length", unit = "m", min = 0.0) = engine.crank.frameTranslation.length / world.defaultWidthFraction " Width of shape";
//   parameter Real engine.crank.frameTranslation.height(quantity = "Length", unit = "m", min = 0.0) = engine.crank.frameTranslation.width " Height of shape.";
//   parameter Real engine.crank.frameTranslation.extra = 0.0 " Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).";
//   input Integer engine.crank.frameTranslation.color[1](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.crank.frameTranslation.color[2](min = 0, max = 255) = 155 " Color of shape";
//   input Integer engine.crank.frameTranslation.color[3](min = 0, max = 255) = 155 " Color of shape";
//   input Real engine.crank.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   Real engine.crank.body.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.body.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.body.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.crank.body.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.crank.body.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.body.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.body.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.crank.body.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.body.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.body.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.crank.body.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.body.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.crank.body.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   parameter Boolean engine.crank.body.animation = false "= true, if animation shall be enabled (show cylinder and sphere)";
//   parameter Real engine.crank.body.r_CM[1](quantity = "Length", unit = "m", start = 0.0) = engine.crank.r_CM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.crank.body.r_CM[2](quantity = "Length", unit = "m", start = 0.0) = engine.crank.r_CM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.crank.body.r_CM[3](quantity = "Length", unit = "m", start = 0.0) = engine.crank.r_CM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real engine.crank.body.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = engine.crank.m "Mass of rigid body";
//   parameter Real engine.crank.body.I_11(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.crank.I_11 " (1,1) element of inertia tensor";
//   parameter Real engine.crank.body.I_22(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.crank.I_22 " (2,2) element of inertia tensor";
//   parameter Real engine.crank.body.I_33(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = engine.crank.I_33 " (3,3) element of inertia tensor";
//   parameter Real engine.crank.body.I_21(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.crank.I_21 " (2,1) element of inertia tensor";
//   parameter Real engine.crank.body.I_31(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.crank.I_31 " (3,1) element of inertia tensor";
//   parameter Real engine.crank.body.I_32(quantity = "MomentOfInertia", unit = "kg.m2", min = -1e+60) = engine.crank.I_32 " (3,2) element of inertia tensor";
//   Real engine.crank.body.r_0[1](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.crank.body.r_0[2](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.crank.body.r_0[3](quantity = "Length", unit = "m", start = 0.0, StateSelect = StateSelect.avoid) "Position vector from origin of world frame to origin of frame_a";
//   Real engine.crank.body.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.crank.body.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.crank.body.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, StateSelect = StateSelect.avoid) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
//   Real engine.crank.body.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.crank.body.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   Real engine.crank.body.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
//   parameter Boolean engine.crank.body.angles_fixed = engine.crank.angles_fixed "= true, if angles_start are used as initial values, else as guess values";
//   parameter Real engine.crank.body.angles_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.crank.angles_start[1] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.crank.body.angles_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.crank.angles_start[2] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Real engine.crank.body.angles_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = engine.crank.angles_start[3] "Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b";
//   parameter Integer engine.crank.body.sequence_start[1](min = 1, max = 3) = engine.crank.sequence_start[1] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.crank.body.sequence_start[2](min = 1, max = 3) = engine.crank.sequence_start[2] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Integer engine.crank.body.sequence_start[3](min = 1, max = 3) = engine.crank.sequence_start[3] "Sequence of rotations to rotate frame_a into frame_b at initial time";
//   parameter Boolean engine.crank.body.w_0_fixed = engine.crank.w_0_fixed "= true, if w_0_start are used as initial values, else as guess values";
//   parameter Real engine.crank.body.w_0_start[1](quantity = "AngularVelocity", unit = "rad/s") = engine.crank.w_0_start[1] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.crank.body.w_0_start[2](quantity = "AngularVelocity", unit = "rad/s") = engine.crank.w_0_start[2] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Real engine.crank.body.w_0_start[3](quantity = "AngularVelocity", unit = "rad/s") = engine.crank.w_0_start[3] "Initial or guess values of angular velocity of frame_a resolved in world frame";
//   parameter Boolean engine.crank.body.z_0_fixed = engine.crank.z_0_fixed "= true, if z_0_start are used as initial values, else as guess values";
//   parameter Real engine.crank.body.z_0_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = engine.crank.z_0_start[1] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.crank.body.z_0_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = engine.crank.z_0_start[2] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.crank.body.z_0_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = engine.crank.z_0_start[3] "Initial values of angular acceleration z_0 = der(w_0)";
//   parameter Real engine.crank.body.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = world.defaultBodyDiameter "Diameter of sphere";
//   input Integer engine.crank.body.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
//   input Integer engine.crank.body.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
//   input Integer engine.crank.body.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
//   parameter Real engine.crank.body.cylinderDiameter(quantity = "Length", unit = "m", min = 0.0) = engine.crank.body.sphereDiameter / 3.0 "Diameter of cylinder";
//   input Integer engine.crank.body.cylinderColor[1](min = 0, max = 255) = engine.crank.body.sphereColor[1] "Color of cylinder";
//   input Integer engine.crank.body.cylinderColor[2](min = 0, max = 255) = engine.crank.body.sphereColor[2] "Color of cylinder";
//   input Integer engine.crank.body.cylinderColor[3](min = 0, max = 255) = engine.crank.body.sphereColor[3] "Color of cylinder";
//   input Real engine.crank.body.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
//   parameter Boolean engine.crank.body.enforceStates = engine.crank.enforceStates " = true, if absolute variables of body object shall be used as states (StateSelect.always)";
//   parameter Boolean engine.crank.body.useQuaternions = engine.crank.useQuaternions " = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states";
//   parameter Integer engine.crank.body.sequence_angleStates[1](min = 1, max = 3) = engine.crank.sequence_angleStates[1] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.crank.body.sequence_angleStates[2](min = 1, max = 3) = engine.crank.sequence_angleStates[2] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Integer engine.crank.body.sequence_angleStates[3](min = 1, max = 3) = engine.crank.sequence_angleStates[3] " Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states";
//   parameter Real engine.crank.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_11 "inertia tensor";
//   parameter Real engine.crank.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_21 "inertia tensor";
//   parameter Real engine.crank.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_31 "inertia tensor";
//   parameter Real engine.crank.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_21 "inertia tensor";
//   parameter Real engine.crank.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_22 "inertia tensor";
//   parameter Real engine.crank.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_32 "inertia tensor";
//   parameter Real engine.crank.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_31 "inertia tensor";
//   parameter Real engine.crank.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_32 "inertia tensor";
//   parameter Real engine.crank.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2") = engine.crank.body.I_33 "inertia tensor";
//   parameter Real engine.crank.body.R_start.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
//   parameter Real engine.crank.body.R_start.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.crank.body.R_start.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.crank.body.R_start.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
//   parameter Real engine.crank.body.z_a_start[1](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.z_0_start[1],engine.crank.body.z_0_start[2],engine.crank.body.z_0_start[3]})[1] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.crank.body.z_a_start[2](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.z_0_start[1],engine.crank.body.z_0_start[2],engine.crank.body.z_0_start[3]})[2] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   parameter Real engine.crank.body.z_a_start[3](quantity = "AngularAcceleration", unit = "rad/s2") = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.z_0_start[1],engine.crank.body.z_0_start[2],engine.crank.body.z_0_start[3]})[3] "Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a";
//   Real engine.crank.body.w_a[1](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.w_0_start[1],engine.crank.body.w_0_start[2],engine.crank.body.w_0_start[3]})[1], fixed = engine.crank.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.crank.body.w_a[2](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.w_0_start[1],engine.crank.body.w_0_start[2],engine.crank.body.w_0_start[3]})[2], fixed = engine.crank.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.crank.body.w_a[3](quantity = "AngularVelocity", unit = "rad/s", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.w_0_start[1],engine.crank.body.w_0_start[2],engine.crank.body.w_0_start[3]})[3], fixed = engine.crank.body.w_0_fixed, StateSelect = StateSelect.avoid) "Absolute angular velocity of frame_a resolved in frame_a";
//   Real engine.crank.body.z_a[1](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.z_0_start[1],engine.crank.body.z_0_start[2],engine.crank.body.z_0_start[3]})[1], fixed = engine.crank.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.crank.body.z_a[2](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.z_0_start[1],engine.crank.body.z_0_start[2],engine.crank.body.z_0_start[3]})[2], fixed = engine.crank.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.crank.body.z_a[3](quantity = "AngularAcceleration", unit = "rad/s2", start = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.R_start,{engine.crank.body.z_0_start[1],engine.crank.body.z_0_start[2],engine.crank.body.z_0_start[3]})[3], fixed = engine.crank.body.z_0_fixed) "Absolute angular acceleration of frame_a resolved in frame_a";
//   Real engine.crank.body.g_0[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.crank.body.g_0[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   Real engine.crank.body.g_0[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration resolved in world frame";
//   protected parameter Real engine.crank.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.crank.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.crank.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.crank.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.crank.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.crank.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected parameter Real engine.crank.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(engine.crank.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] "Quaternion orientation object from world frame to frame_a at initial time";
//   protected Real engine.crank.body.Q[1](start = engine.crank.body.Q_start[1], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.crank.body.Q[2](start = engine.crank.body.Q_start[2], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.crank.body.Q[3](start = engine.crank.body.Q_start[3], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected Real engine.crank.body.Q[4](start = engine.crank.body.Q_start[4], StateSelect = StateSelect.avoid) "Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)";
//   protected parameter Real engine.crank.body.phi_start[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.crank.body.sequence_start[1] == engine.crank.body.sequence_angleStates[1] AND engine.crank.body.sequence_start[2] == engine.crank.body.sequence_angleStates[2] AND engine.crank.body.sequence_start[3] == engine.crank.body.sequence_angleStates[3] then engine.crank.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.crank.body.R_start,{engine.crank.body.sequence_angleStates[1],engine.crank.body.sequence_angleStates[2],engine.crank.body.sequence_angleStates[3]},0.0)[1] "Potential angle states at initial time";
//   protected parameter Real engine.crank.body.phi_start[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.crank.body.sequence_start[1] == engine.crank.body.sequence_angleStates[1] AND engine.crank.body.sequence_start[2] == engine.crank.body.sequence_angleStates[2] AND engine.crank.body.sequence_start[3] == engine.crank.body.sequence_angleStates[3] then engine.crank.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.crank.body.R_start,{engine.crank.body.sequence_angleStates[1],engine.crank.body.sequence_angleStates[2],engine.crank.body.sequence_angleStates[3]},0.0)[2] "Potential angle states at initial time";
//   protected parameter Real engine.crank.body.phi_start[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = if engine.crank.body.sequence_start[1] == engine.crank.body.sequence_angleStates[1] AND engine.crank.body.sequence_start[2] == engine.crank.body.sequence_angleStates[2] AND engine.crank.body.sequence_start[3] == engine.crank.body.sequence_angleStates[3] then engine.crank.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(engine.crank.body.R_start,{engine.crank.body.sequence_angleStates[1],engine.crank.body.sequence_angleStates[2],engine.crank.body.sequence_angleStates[3]},0.0)[3] "Potential angle states at initial time";
//   protected Real engine.crank.body.phi[1](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.crank.body.phi_start[1], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.crank.body.phi[2](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.crank.body.phi_start[2], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.crank.body.phi[3](quantity = "Angle", unit = "rad", displayUnit = "deg", start = engine.crank.body.phi_start[3], StateSelect = StateSelect.avoid) "Dummy or 3 angles to rotate world frame into frame_a of body";
//   protected Real engine.crank.body.phi_d[1](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.crank.body.phi_d[2](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.crank.body.phi_d[3](quantity = "AngularVelocity", unit = "rad/s", StateSelect = StateSelect.avoid) "= der(phi)";
//   protected Real engine.crank.body.phi_dd[1](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.crank.body.phi_dd[2](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   protected Real engine.crank.body.phi_dd[3](quantity = "AngularAcceleration", unit = "rad/s2") "= der(phi_d)";
//   Real engine.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real engine.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real engine.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
//   Real engine.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
//   Real engine.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
//   Real engine.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
//   Real engine.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real engine.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
//   Real load.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real load.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real load.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real load.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real load.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0, start = 1.0) = 1.0 "Moment of inertia";
//   parameter enumeration(never, avoid, default, prefer, always) load.stateSelect = StateSelect.always "Priority to use phi and w as states";
//   Real load.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0, fixed = true, StateSelect = StateSelect.always) "Absolute rotation angle of component";
//   Real load.w(quantity = "AngularVelocity", unit = "rad/s", start = 10.0, fixed = true, StateSelect = StateSelect.always) "Absolute angular velocity of component (= der(phi))";
//   Real load.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component (= der(w))";
//   parameter Boolean load2.useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
//   Real load2.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real load2.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   protected Real load2.phi_support(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of support flange";
//   Real load2.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Angle of flange with respect to support (= flange.phi - support.phi)";
//   parameter Real load2.tau_nominal(quantity = "Torque", unit = "N.m") = -100.0 "Nominal torque (if negative, torque is acting as load)";
//   parameter Boolean load2.TorqueDirection = true "Same direction of torque in both directions of rotation";
//   parameter Real load2.w_nominal(quantity = "AngularVelocity", unit = "rad/s", min = 1e-15) = 200.0 "Nominal speed";
//   Real load2.w(quantity = "AngularVelocity", unit = "rad/s") "Angular velocity of flange with respect to support (= der(phi))";
//   Real load2.tau(quantity = "Torque", unit = "N.m") "Accelerating torque acting at flange (= -flange.tau)";
//   Real torqueSensor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torqueSensor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torqueSensor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torqueSensor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real torqueSensor.tau "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau)";
//   input Real filter.u "Connector of Real input signal";
//   output Real filter.y "Connector of Real output signal";
//   parameter Integer filter.n = 2 "Order of filter";
//   parameter Real filter.f(quantity = "Frequency", unit = "Hz", start = 1.0) = 5.0 "Cut-off frequency";
//   parameter Boolean filter.normalized = true "= true, if amplitude at f_cut is 3 dB, otherwise unmodified filter";
//   parameter enumeration(NoInit, SteadyState, InitialState, InitialOutput) filter.initType = Modelica.Blocks.Types.Init.SteadyState "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)";
//   parameter Real filter.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real filter.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real filter.y_start = 0.0 "Initial value of output (remaining states are in steady state)";
//   output Real filter.x[1](start = filter.x_start[1]) "Filter states";
//   output Real filter.x[2](start = filter.x_start[2]) "Filter states";
//   protected parameter Real filter.alpha = if filter.normalized then sqrt(2.0 ^ (1.0 / Real(filter.n)) - 1.0) else 1.0 "Frequency correction factor for normalized filter";
//   protected parameter Real filter.w = 6.28318530717959 * filter.f / filter.alpha;
// initial equation
//   engine.cylinder1.jointRRP.jointUSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(engine.cylinder1.jointRRP.jointUSP.prismatic.length,{engine.cylinder1.jointRRP.jointUSP.prismatic.e[1],engine.cylinder1.jointRRP.jointUSP.prismatic.e[2],engine.cylinder1.jointRRP.jointUSP.prismatic.e[3]},engine.cylinder1.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder1.jointRRP.jointUSP.prismatic.s_guess,{engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[1],engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[2],engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[3]},{engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[1],engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[2],engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[3]});
//   engine.cylinder1.jointRRP.e_im = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.jointRRP.frame_im.R,Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.jointRRP.frame_a.R,{engine.cylinder1.jointRRP.e_a[1],engine.cylinder1.jointRRP.e_a[2],engine.cylinder1.jointRRP.e_a[3]}));
//   engine.cylinder2.jointRRP.jointUSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(engine.cylinder2.jointRRP.jointUSP.prismatic.length,{engine.cylinder2.jointRRP.jointUSP.prismatic.e[1],engine.cylinder2.jointRRP.jointUSP.prismatic.e[2],engine.cylinder2.jointRRP.jointUSP.prismatic.e[3]},engine.cylinder2.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder2.jointRRP.jointUSP.prismatic.s_guess,{engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[1],engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[2],engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[3]},{engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[1],engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[2],engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[3]});
//   engine.cylinder2.jointRRP.e_im = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.jointRRP.frame_im.R,Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.jointRRP.frame_a.R,{engine.cylinder2.jointRRP.e_a[1],engine.cylinder2.jointRRP.e_a[2],engine.cylinder2.jointRRP.e_a[3]}));
//   engine.cylinder3.jointRRP.jointUSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(engine.cylinder3.jointRRP.jointUSP.prismatic.length,{engine.cylinder3.jointRRP.jointUSP.prismatic.e[1],engine.cylinder3.jointRRP.jointUSP.prismatic.e[2],engine.cylinder3.jointRRP.jointUSP.prismatic.e[3]},engine.cylinder3.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder3.jointRRP.jointUSP.prismatic.s_guess,{engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[1],engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[2],engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[3]},{engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[1],engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[2],engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[3]});
//   engine.cylinder3.jointRRP.e_im = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.jointRRP.frame_im.R,Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.jointRRP.frame_a.R,{engine.cylinder3.jointRRP.e_a[1],engine.cylinder3.jointRRP.e_a[2],engine.cylinder3.jointRRP.e_a[3]}));
//   engine.cylinder4.jointRRP.jointUSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(engine.cylinder4.jointRRP.jointUSP.prismatic.length,{engine.cylinder4.jointRRP.jointUSP.prismatic.e[1],engine.cylinder4.jointRRP.jointUSP.prismatic.e[2],engine.cylinder4.jointRRP.jointUSP.prismatic.e[3]},engine.cylinder4.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder4.jointRRP.jointUSP.prismatic.s_guess,{engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[1],engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[2],engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[3]},{engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[1],engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[2],engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[3]});
//   engine.cylinder4.jointRRP.e_im = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.jointRRP.frame_im.R,Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.jointRRP.frame_a.R,{engine.cylinder4.jointRRP.e_a[1],engine.cylinder4.jointRRP.e_a[2],engine.cylinder4.jointRRP.e_a[3]}));
//   engine.cylinder5.jointRRP.jointUSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(engine.cylinder5.jointRRP.jointUSP.prismatic.length,{engine.cylinder5.jointRRP.jointUSP.prismatic.e[1],engine.cylinder5.jointRRP.jointUSP.prismatic.e[2],engine.cylinder5.jointRRP.jointUSP.prismatic.e[3]},engine.cylinder5.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder5.jointRRP.jointUSP.prismatic.s_guess,{engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[1],engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[2],engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[3]},{engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[1],engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[2],engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[3]});
//   engine.cylinder5.jointRRP.e_im = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.jointRRP.frame_im.R,Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.jointRRP.frame_a.R,{engine.cylinder5.jointRRP.e_a[1],engine.cylinder5.jointRRP.e_a[2],engine.cylinder5.jointRRP.e_a[3]}));
//   engine.cylinder6.jointRRP.jointUSP.prismatic.positiveBranch = Modelica.Mechanics.MultiBody.Joints.Internal.PrismaticWithLengthConstraint.selectBranch(engine.cylinder6.jointRRP.jointUSP.prismatic.length,{engine.cylinder6.jointRRP.jointUSP.prismatic.e[1],engine.cylinder6.jointRRP.jointUSP.prismatic.e[2],engine.cylinder6.jointRRP.jointUSP.prismatic.e[3]},engine.cylinder6.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder6.jointRRP.jointUSP.prismatic.s_guess,{engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[1],engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[2],engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[3]},{engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[1],engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[2],engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[3]});
//   engine.cylinder6.jointRRP.e_im = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.jointRRP.frame_im.R,Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.jointRRP.frame_a.R,{engine.cylinder6.jointRRP.e_a[1],engine.cylinder6.jointRRP.e_a[2],engine.cylinder6.jointRRP.e_a[3]}));
//   der(filter.x[1]) = 0.0;
//   der(filter.x[2]) = 0.0;
// equation
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-10,"Parameter n of World object is wrong (lenght(n) > 0 required)");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder1.Mid.frame_b.r_0 = engine.cylinder1.Mid.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Mid.frame_a.R,{engine.cylinder1.Mid.r[1],engine.cylinder1.Mid.r[2],engine.cylinder1.Mid.r[3]});
//   engine.cylinder1.Mid.frame_b.R.T[1,1] = engine.cylinder1.Mid.frame_a.R.T[1,1];
//   engine.cylinder1.Mid.frame_b.R.T[1,2] = engine.cylinder1.Mid.frame_a.R.T[1,2];
//   engine.cylinder1.Mid.frame_b.R.T[1,3] = engine.cylinder1.Mid.frame_a.R.T[1,3];
//   engine.cylinder1.Mid.frame_b.R.T[2,1] = engine.cylinder1.Mid.frame_a.R.T[2,1];
//   engine.cylinder1.Mid.frame_b.R.T[2,2] = engine.cylinder1.Mid.frame_a.R.T[2,2];
//   engine.cylinder1.Mid.frame_b.R.T[2,3] = engine.cylinder1.Mid.frame_a.R.T[2,3];
//   engine.cylinder1.Mid.frame_b.R.T[3,1] = engine.cylinder1.Mid.frame_a.R.T[3,1];
//   engine.cylinder1.Mid.frame_b.R.T[3,2] = engine.cylinder1.Mid.frame_a.R.T[3,2];
//   engine.cylinder1.Mid.frame_b.R.T[3,3] = engine.cylinder1.Mid.frame_a.R.T[3,3];
//   engine.cylinder1.Mid.frame_b.R.w[1] = engine.cylinder1.Mid.frame_a.R.w[1];
//   engine.cylinder1.Mid.frame_b.R.w[2] = engine.cylinder1.Mid.frame_a.R.w[2];
//   engine.cylinder1.Mid.frame_b.R.w[3] = engine.cylinder1.Mid.frame_a.R.w[3];
//   0.0 = engine.cylinder1.Mid.frame_a.f[1] + engine.cylinder1.Mid.frame_b.f[1];
//   0.0 = engine.cylinder1.Mid.frame_a.f[2] + engine.cylinder1.Mid.frame_b.f[2];
//   0.0 = engine.cylinder1.Mid.frame_a.f[3] + engine.cylinder1.Mid.frame_b.f[3];
//   0.0 = engine.cylinder1.Mid.frame_a.t[1] + (engine.cylinder1.Mid.frame_b.t[1] + (engine.cylinder1.Mid.r[2] * engine.cylinder1.Mid.frame_b.f[3] + (-engine.cylinder1.Mid.r[3] * engine.cylinder1.Mid.frame_b.f[2])));
//   0.0 = engine.cylinder1.Mid.frame_a.t[2] + (engine.cylinder1.Mid.frame_b.t[2] + (engine.cylinder1.Mid.r[3] * engine.cylinder1.Mid.frame_b.f[1] + (-engine.cylinder1.Mid.r[1] * engine.cylinder1.Mid.frame_b.f[3])));
//   0.0 = engine.cylinder1.Mid.frame_a.t[3] + (engine.cylinder1.Mid.frame_b.t[3] + (engine.cylinder1.Mid.r[1] * engine.cylinder1.Mid.frame_b.f[2] + (-engine.cylinder1.Mid.r[2] * engine.cylinder1.Mid.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder1.Mounting.frame_b.r_0 = engine.cylinder1.Mounting.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Mounting.frame_a.R,{engine.cylinder1.Mounting.r[1],engine.cylinder1.Mounting.r[2],engine.cylinder1.Mounting.r[3]});
//   engine.cylinder1.Mounting.frame_b.R.T[1,1] = engine.cylinder1.Mounting.frame_a.R.T[1,1];
//   engine.cylinder1.Mounting.frame_b.R.T[1,2] = engine.cylinder1.Mounting.frame_a.R.T[1,2];
//   engine.cylinder1.Mounting.frame_b.R.T[1,3] = engine.cylinder1.Mounting.frame_a.R.T[1,3];
//   engine.cylinder1.Mounting.frame_b.R.T[2,1] = engine.cylinder1.Mounting.frame_a.R.T[2,1];
//   engine.cylinder1.Mounting.frame_b.R.T[2,2] = engine.cylinder1.Mounting.frame_a.R.T[2,2];
//   engine.cylinder1.Mounting.frame_b.R.T[2,3] = engine.cylinder1.Mounting.frame_a.R.T[2,3];
//   engine.cylinder1.Mounting.frame_b.R.T[3,1] = engine.cylinder1.Mounting.frame_a.R.T[3,1];
//   engine.cylinder1.Mounting.frame_b.R.T[3,2] = engine.cylinder1.Mounting.frame_a.R.T[3,2];
//   engine.cylinder1.Mounting.frame_b.R.T[3,3] = engine.cylinder1.Mounting.frame_a.R.T[3,3];
//   engine.cylinder1.Mounting.frame_b.R.w[1] = engine.cylinder1.Mounting.frame_a.R.w[1];
//   engine.cylinder1.Mounting.frame_b.R.w[2] = engine.cylinder1.Mounting.frame_a.R.w[2];
//   engine.cylinder1.Mounting.frame_b.R.w[3] = engine.cylinder1.Mounting.frame_a.R.w[3];
//   0.0 = engine.cylinder1.Mounting.frame_a.f[1] + engine.cylinder1.Mounting.frame_b.f[1];
//   0.0 = engine.cylinder1.Mounting.frame_a.f[2] + engine.cylinder1.Mounting.frame_b.f[2];
//   0.0 = engine.cylinder1.Mounting.frame_a.f[3] + engine.cylinder1.Mounting.frame_b.f[3];
//   0.0 = engine.cylinder1.Mounting.frame_a.t[1] + (engine.cylinder1.Mounting.frame_b.t[1] + (engine.cylinder1.Mounting.r[2] * engine.cylinder1.Mounting.frame_b.f[3] + (-engine.cylinder1.Mounting.r[3] * engine.cylinder1.Mounting.frame_b.f[2])));
//   0.0 = engine.cylinder1.Mounting.frame_a.t[2] + (engine.cylinder1.Mounting.frame_b.t[2] + (engine.cylinder1.Mounting.r[3] * engine.cylinder1.Mounting.frame_b.f[1] + (-engine.cylinder1.Mounting.r[1] * engine.cylinder1.Mounting.frame_b.f[3])));
//   0.0 = engine.cylinder1.Mounting.frame_a.t[3] + (engine.cylinder1.Mounting.frame_b.t[3] + (engine.cylinder1.Mounting.r[1] * engine.cylinder1.Mounting.frame_b.f[2] + (-engine.cylinder1.Mounting.r[2] * engine.cylinder1.Mounting.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder1.CylinderInclination.frame_b.r_0 = engine.cylinder1.CylinderInclination.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.CylinderInclination.frame_a.R,{engine.cylinder1.CylinderInclination.r[1],engine.cylinder1.CylinderInclination.r[2],engine.cylinder1.CylinderInclination.r[3]});
//   engine.cylinder1.CylinderInclination.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder1.CylinderInclination.frame_a.R,engine.cylinder1.CylinderInclination.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder1.CylinderInclination.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.CylinderInclination.R_rel,{engine.cylinder1.CylinderInclination.frame_b.f[1],engine.cylinder1.CylinderInclination.frame_b.f[2],engine.cylinder1.CylinderInclination.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder1.CylinderInclination.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.CylinderInclination.R_rel,{engine.cylinder1.CylinderInclination.frame_b.t[1],engine.cylinder1.CylinderInclination.frame_b.t[2],engine.cylinder1.CylinderInclination.frame_b.t[3]}) - {engine.cylinder1.CylinderInclination.r[2] * engine.cylinder1.CylinderInclination.frame_a.f[3] - engine.cylinder1.CylinderInclination.r[3] * engine.cylinder1.CylinderInclination.frame_a.f[2],engine.cylinder1.CylinderInclination.r[3] * engine.cylinder1.CylinderInclination.frame_a.f[1] - engine.cylinder1.CylinderInclination.r[1] * engine.cylinder1.CylinderInclination.frame_a.f[3],engine.cylinder1.CylinderInclination.r[1] * engine.cylinder1.CylinderInclination.frame_a.f[2] - engine.cylinder1.CylinderInclination.r[2] * engine.cylinder1.CylinderInclination.frame_a.f[1]};
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder1.CrankAngle.frame_b.r_0 = engine.cylinder1.CrankAngle.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.CrankAngle.frame_a.R,{engine.cylinder1.CrankAngle.r[1],engine.cylinder1.CrankAngle.r[2],engine.cylinder1.CrankAngle.r[3]});
//   engine.cylinder1.CrankAngle.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder1.CrankAngle.frame_a.R,engine.cylinder1.CrankAngle.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder1.CrankAngle.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.CrankAngle.R_rel,{engine.cylinder1.CrankAngle.frame_b.f[1],engine.cylinder1.CrankAngle.frame_b.f[2],engine.cylinder1.CrankAngle.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder1.CrankAngle.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.CrankAngle.R_rel,{engine.cylinder1.CrankAngle.frame_b.t[1],engine.cylinder1.CrankAngle.frame_b.t[2],engine.cylinder1.CrankAngle.frame_b.t[3]}) - {engine.cylinder1.CrankAngle.r[2] * engine.cylinder1.CrankAngle.frame_a.f[3] - engine.cylinder1.CrankAngle.r[3] * engine.cylinder1.CrankAngle.frame_a.f[2],engine.cylinder1.CrankAngle.r[3] * engine.cylinder1.CrankAngle.frame_a.f[1] - engine.cylinder1.CrankAngle.r[1] * engine.cylinder1.CrankAngle.frame_a.f[3],engine.cylinder1.CrankAngle.r[1] * engine.cylinder1.CrankAngle.frame_a.f[2] - engine.cylinder1.CrankAngle.r[2] * engine.cylinder1.CrankAngle.frame_a.f[1]};
//   engine.cylinder1.jointRRP.jointUSP.prismatic.axis.f = engine.cylinder1.jointRRP.jointUSP.prismatic.f;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.axis.s = engine.cylinder1.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.bearing.s = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.distance = engine.cylinder1.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder1.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.distance * engine.cylinder1.jointRRP.jointUSP.prismatic.e[1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.distance * engine.cylinder1.jointRRP.jointUSP.prismatic.e[2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.distance * engine.cylinder1.jointRRP.jointUSP.prismatic.e[3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R,{engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[1],engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[2],engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[3]});
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[1] + engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[1];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[2] + engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[2];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[3] + engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[3];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[1] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[3] + (-engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[2])));
//   0.0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[2] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[1] + (-engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[3])));
//   0.0 = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[3] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[2] + (-engine.cylinder1.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[1])));
//   engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[1] - engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[2] - engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.r_b[3] - engine.cylinder1.jointRRP.jointUSP.prismatic.r_a[3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.B = 2.0 * (engine.cylinder1.jointRRP.jointUSP.prismatic.e[1] * engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[1] + (engine.cylinder1.jointRRP.jointUSP.prismatic.e[2] * engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[2] + engine.cylinder1.jointRRP.jointUSP.prismatic.e[3] * engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[3]));
//   engine.cylinder1.jointRRP.jointUSP.prismatic.C = engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[1] ^ 2.0 + (engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[2] ^ 2.0 + engine.cylinder1.jointRRP.jointUSP.prismatic.rbra[3] ^ 2.0) - engine.cylinder1.jointRRP.jointUSP.prismatic.length ^ 2.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.k1 = engine.cylinder1.jointRRP.jointUSP.prismatic.B / 2.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.k1a = engine.cylinder1.jointRRP.jointUSP.prismatic.k1 ^ 2.0 - engine.cylinder1.jointRRP.jointUSP.prismatic.C;
//   assert(noEvent(engine.cylinder1.jointRRP.jointUSP.prismatic.k1a > 1e-10),"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   engine.cylinder1.jointRRP.jointUSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(engine.cylinder1.jointRRP.jointUSP.prismatic.k1a,1e-12);
//   engine.cylinder1.jointRRP.jointUSP.prismatic.k2 = sqrt(engine.cylinder1.jointRRP.jointUSP.prismatic.k1b);
//   engine.cylinder1.jointRRP.jointUSP.prismatic.distance = (if engine.cylinder1.jointRRP.jointUSP.prismatic.positiveBranch then engine.cylinder1.jointRRP.jointUSP.prismatic.k2 else -engine.cylinder1.jointRRP.jointUSP.prismatic.k2) - engine.cylinder1.jointRRP.jointUSP.prismatic.k1;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[1] - engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[2] - engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[3] - engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R,{engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[1],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[2],engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[3]});
//   engine.cylinder1.jointRRP.jointUSP.rod1.constraintResidue = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1] = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[1] / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2] = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[2] / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3] = engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[3] / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[1] = engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2];
//   engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[2] = engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3];
//   engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[3] = engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1];
//   engine.cylinder1.jointRRP.jointUSP.rod1.length2_n2_a = engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[1] ^ 2.0 + (engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[2] ^ 2.0 + engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[3] ^ 2.0);
//   assert(engine.cylinder1.jointRRP.jointUSP.rod1.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   engine.cylinder1.jointRRP.jointUSP.rod1.length_n2_a = sqrt(engine.cylinder1.jointRRP.jointUSP.rod1.length2_n2_a);
//   engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] = engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[1] / engine.cylinder1.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] = engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[2] / engine.cylinder1.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] = engine.cylinder1.jointRRP.jointUSP.rod1.n2_a[3] / engine.cylinder1.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1] = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] - engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2];
//   engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2] = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] - engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3];
//   engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3] = engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] - engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1];
//   engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R,{der(engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[1]),der(engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[2]),der(engine.cylinder1.jointRRP.jointUSP.rod1.rRod_0[3])}) - {engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[3] - engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[2],engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[1] - engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[3],engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[2] - engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[1]}) / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[1] = (engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1] * (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[3] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[2]) + (engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2] * (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[1] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[3]) + engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3] * (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[2] - engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[1]))) / engine.cylinder1.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[2] = (-engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1]) * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + ((-engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2]) * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + (-engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3]) * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[3] = engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3]},{engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1],engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2],engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3]},{engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1],engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2],engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3]}},{engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[1],engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[2],engine.cylinder1.jointRRP.jointUSP.rod1.w_rel_ia1[3]});
//   engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[1],engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[1],engine.cylinder1.jointRRP.jointUSP.rod1.e3_ia[1]},{engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[2],engine.cylinder1.jointRRP.jointUSP.rod1.e3_ia[2]},{engine.cylinder1.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder1.jointRRP.jointUSP.rod1.e2_ia[3],engine.cylinder1.jointRRP.jointUSP.rod1.e3_ia[3]}},{0.0,0.0,0.0});
//   engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia1,engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia2);
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia);
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[1],engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[2],engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[3]});
//   engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[1],engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[2],engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[3]});
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[1] = ((-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] * 1.0 / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1] / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[2] = ((-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] * 1.0 / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2] / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[3] = ((-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] * 1.0 / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder1.jointRRP.jointUSP.rod1.e3_a[3] / engine.cylinder1.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[1] = (-engine.cylinder1.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1] + engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[1];
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[2] = (-engine.cylinder1.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[2];
//   engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[3] = (-engine.cylinder1.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3] + engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[3];
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[1],engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[2],engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[3]},engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[3] = 0.0;
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[1] + engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a[1]);
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[2] + engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a[2]);
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[3] + engine.cylinder1.jointRRP.jointUSP.rod1.f_ia_a[3]);
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[3] + (-engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[2])));
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[1] + (-engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[3])));
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.t_ia_a[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[2] + (-engine.cylinder1.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a[1])));
//   engine.cylinder1.jointRRP.jointUSP.rod1.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R,{engine.cylinder1.jointRRP.jointUSP.rod2.r[1],engine.cylinder1.jointRRP.jointUSP.rod2.r[2],engine.cylinder1.jointRRP.jointUSP.rod2.r[3]});
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[1] + engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[1];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[2] + engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[2];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[3] + engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[3];
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[1] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder1.jointRRP.jointUSP.rod2.r[2] * engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[3] + (-engine.cylinder1.jointRRP.jointUSP.rod2.r[3] * engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[2])));
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[2] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder1.jointRRP.jointUSP.rod2.r[3] * engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[1] + (-engine.cylinder1.jointRRP.jointUSP.rod2.r[1] * engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[3])));
//   0.0 = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[3] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder1.jointRRP.jointUSP.rod2.r[1] * engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[2] + (-engine.cylinder1.jointRRP.jointUSP.rod2.r[2] * engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[1])));
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R,{engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1] - engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1],engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2] - engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2],engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3] - engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   assert(true,"Connector frame_resolve must be connected exactly once");
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   engine.cylinder1.jointRRP.jointUSP.position_b[1].y = engine.cylinder1.jointRRP.jointUSP.position_b[1].k;
//   engine.cylinder1.jointRRP.jointUSP.position_b[2].y = engine.cylinder1.jointRRP.jointUSP.position_b[2].k;
//   engine.cylinder1.jointRRP.jointUSP.position_b[3].y = engine.cylinder1.jointRRP.jointUSP.position_b[3].k;
//   engine.cylinder1.jointRRP.jointUSP.aux = {engine.cylinder1.jointRRP.jointUSP.prismatic.e[1],engine.cylinder1.jointRRP.jointUSP.prismatic.e[2],engine.cylinder1.jointRRP.jointUSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder1.jointRRP.jointUSP.rod1.eRod_a[3]},engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder1.jointRRP.jointUSP.f_rod = ((-engine.cylinder1.jointRRP.jointUSP.prismatic.f) - {engine.cylinder1.jointRRP.jointUSP.prismatic.e[1],engine.cylinder1.jointRRP.jointUSP.prismatic.e[2],engine.cylinder1.jointRRP.jointUSP.prismatic.e[3]} * ({engine.cylinder1.jointRRP.jointUSP.frame_ib.f[1] + engine.cylinder1.jointRRP.jointUSP.frame_im.f[1],engine.cylinder1.jointRRP.jointUSP.frame_ib.f[2] + engine.cylinder1.jointRRP.jointUSP.frame_im.f[2],engine.cylinder1.jointRRP.jointUSP.frame_ib.f[3] + engine.cylinder1.jointRRP.jointUSP.frame_im.f[3]} - Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[1],engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[2],engine.cylinder1.jointRRP.jointUSP.rod1.f_b_a1[3]},engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R))) / (if noEvent(abs(engine.cylinder1.jointRRP.jointUSP.aux) < 1e-10) then 1e-10 else engine.cylinder1.jointRRP.jointUSP.aux);
//   engine.cylinder1.jointRRP.jointUSP.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder1.Rod.frameTranslation.frame_b.r_0 = engine.cylinder1.Rod.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Rod.frameTranslation.frame_a.R,{engine.cylinder1.Rod.frameTranslation.r[1],engine.cylinder1.Rod.frameTranslation.r[2],engine.cylinder1.Rod.frameTranslation.r[3]});
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder1.Rod.frameTranslation.frame_a.f[1] + engine.cylinder1.Rod.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder1.Rod.frameTranslation.frame_a.f[2] + engine.cylinder1.Rod.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder1.Rod.frameTranslation.frame_a.f[3] + engine.cylinder1.Rod.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder1.Rod.frameTranslation.frame_a.t[1] + (engine.cylinder1.Rod.frameTranslation.frame_b.t[1] + (engine.cylinder1.Rod.frameTranslation.r[2] * engine.cylinder1.Rod.frameTranslation.frame_b.f[3] + (-engine.cylinder1.Rod.frameTranslation.r[3] * engine.cylinder1.Rod.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder1.Rod.frameTranslation.frame_a.t[2] + (engine.cylinder1.Rod.frameTranslation.frame_b.t[2] + (engine.cylinder1.Rod.frameTranslation.r[3] * engine.cylinder1.Rod.frameTranslation.frame_b.f[1] + (-engine.cylinder1.Rod.frameTranslation.r[1] * engine.cylinder1.Rod.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder1.Rod.frameTranslation.frame_a.t[3] + (engine.cylinder1.Rod.frameTranslation.frame_b.t[3] + (engine.cylinder1.Rod.frameTranslation.r[1] * engine.cylinder1.Rod.frameTranslation.frame_b.f[2] + (-engine.cylinder1.Rod.frameTranslation.r[2] * engine.cylinder1.Rod.frameTranslation.frame_b.f[1])));
//   engine.cylinder1.Rod.body.r_0[1] = engine.cylinder1.Rod.body.frame_a.r_0[1];
//   engine.cylinder1.Rod.body.r_0[2] = engine.cylinder1.Rod.body.frame_a.r_0[2];
//   engine.cylinder1.Rod.body.r_0[3] = engine.cylinder1.Rod.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder1.Rod.body.Q[1] = 0.0;
//   engine.cylinder1.Rod.body.Q[2] = 0.0;
//   engine.cylinder1.Rod.body.Q[3] = 0.0;
//   engine.cylinder1.Rod.body.Q[4] = 1.0;
//   engine.cylinder1.Rod.body.phi[1] = 0.0;
//   engine.cylinder1.Rod.body.phi[2] = 0.0;
//   engine.cylinder1.Rod.body.phi[3] = 0.0;
//   engine.cylinder1.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder1.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder1.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder1.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder1.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder1.Rod.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder1.Rod.body.useQuaternions then
//   engine.cylinder1.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder1.Rod.body.Q[1],engine.cylinder1.Rod.body.Q[2],engine.cylinder1.Rod.body.Q[3],engine.cylinder1.Rod.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder1.Rod.body.Q[1],engine.cylinder1.Rod.body.Q[2],engine.cylinder1.Rod.body.Q[3],engine.cylinder1.Rod.body.Q[4]},{der(engine.cylinder1.Rod.body.Q[1]),der(engine.cylinder1.Rod.body.Q[2]),der(engine.cylinder1.Rod.body.Q[3]),der(engine.cylinder1.Rod.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder1.Rod.body.Q[1],engine.cylinder1.Rod.body.Q[2],engine.cylinder1.Rod.body.Q[3],engine.cylinder1.Rod.body.Q[4]});
//   engine.cylinder1.Rod.body.phi[1] = 0.0;
//   engine.cylinder1.Rod.body.phi[2] = 0.0;
//   engine.cylinder1.Rod.body.phi[3] = 0.0;
//   engine.cylinder1.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder1.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder1.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder1.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder1.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder1.Rod.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder1.Rod.body.phi_d[1] = der(engine.cylinder1.Rod.body.phi[1]);
//   engine.cylinder1.Rod.body.phi_d[2] = der(engine.cylinder1.Rod.body.phi[2]);
//   engine.cylinder1.Rod.body.phi_d[3] = der(engine.cylinder1.Rod.body.phi[3]);
//   engine.cylinder1.Rod.body.phi_dd[1] = der(engine.cylinder1.Rod.body.phi_d[1]);
//   engine.cylinder1.Rod.body.phi_dd[2] = der(engine.cylinder1.Rod.body.phi_d[2]);
//   engine.cylinder1.Rod.body.phi_dd[3] = der(engine.cylinder1.Rod.body.phi_d[3]);
//   engine.cylinder1.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder1.Rod.body.sequence_angleStates[1],engine.cylinder1.Rod.body.sequence_angleStates[2],engine.cylinder1.Rod.body.sequence_angleStates[3]},{engine.cylinder1.Rod.body.phi[1],engine.cylinder1.Rod.body.phi[2],engine.cylinder1.Rod.body.phi[3]},{engine.cylinder1.Rod.body.phi_d[1],engine.cylinder1.Rod.body.phi_d[2],engine.cylinder1.Rod.body.phi_d[3]});
//   engine.cylinder1.Rod.body.Q[1] = 0.0;
//   engine.cylinder1.Rod.body.Q[2] = 0.0;
//   engine.cylinder1.Rod.body.Q[3] = 0.0;
//   engine.cylinder1.Rod.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder1.Rod.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder1.Rod.body.frame_a.r_0[1],engine.cylinder1.Rod.body.frame_a.r_0[2],engine.cylinder1.Rod.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Rod.body.frame_a.R,{engine.cylinder1.Rod.body.r_CM[1],engine.cylinder1.Rod.body.r_CM[2],engine.cylinder1.Rod.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder1.Rod.body.v_0[1] = der(engine.cylinder1.Rod.body.frame_a.r_0[1]);
//   engine.cylinder1.Rod.body.v_0[2] = der(engine.cylinder1.Rod.body.frame_a.r_0[2]);
//   engine.cylinder1.Rod.body.v_0[3] = der(engine.cylinder1.Rod.body.frame_a.r_0[3]);
//   engine.cylinder1.Rod.body.a_0[1] = der(engine.cylinder1.Rod.body.v_0[1]);
//   engine.cylinder1.Rod.body.a_0[2] = der(engine.cylinder1.Rod.body.v_0[2]);
//   engine.cylinder1.Rod.body.a_0[3] = der(engine.cylinder1.Rod.body.v_0[3]);
//   engine.cylinder1.Rod.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder1.Rod.body.frame_a.R);
//   engine.cylinder1.Rod.body.z_a[1] = der(engine.cylinder1.Rod.body.w_a[1]);
//   engine.cylinder1.Rod.body.z_a[2] = der(engine.cylinder1.Rod.body.w_a[2]);
//   engine.cylinder1.Rod.body.z_a[3] = der(engine.cylinder1.Rod.body.w_a[3]);
//   engine.cylinder1.Rod.body.frame_a.f = engine.cylinder1.Rod.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Rod.body.frame_a.R,{engine.cylinder1.Rod.body.a_0[1] - engine.cylinder1.Rod.body.g_0[1],engine.cylinder1.Rod.body.a_0[2] - engine.cylinder1.Rod.body.g_0[2],engine.cylinder1.Rod.body.a_0[3] - engine.cylinder1.Rod.body.g_0[3]}) + {engine.cylinder1.Rod.body.z_a[2] * engine.cylinder1.Rod.body.r_CM[3] - engine.cylinder1.Rod.body.z_a[3] * engine.cylinder1.Rod.body.r_CM[2],engine.cylinder1.Rod.body.z_a[3] * engine.cylinder1.Rod.body.r_CM[1] - engine.cylinder1.Rod.body.z_a[1] * engine.cylinder1.Rod.body.r_CM[3],engine.cylinder1.Rod.body.z_a[1] * engine.cylinder1.Rod.body.r_CM[2] - engine.cylinder1.Rod.body.z_a[2] * engine.cylinder1.Rod.body.r_CM[1]} + {engine.cylinder1.Rod.body.w_a[2] * (engine.cylinder1.Rod.body.w_a[1] * engine.cylinder1.Rod.body.r_CM[2] - engine.cylinder1.Rod.body.w_a[2] * engine.cylinder1.Rod.body.r_CM[1]) - engine.cylinder1.Rod.body.w_a[3] * (engine.cylinder1.Rod.body.w_a[3] * engine.cylinder1.Rod.body.r_CM[1] - engine.cylinder1.Rod.body.w_a[1] * engine.cylinder1.Rod.body.r_CM[3]),engine.cylinder1.Rod.body.w_a[3] * (engine.cylinder1.Rod.body.w_a[2] * engine.cylinder1.Rod.body.r_CM[3] - engine.cylinder1.Rod.body.w_a[3] * engine.cylinder1.Rod.body.r_CM[2]) - engine.cylinder1.Rod.body.w_a[1] * (engine.cylinder1.Rod.body.w_a[1] * engine.cylinder1.Rod.body.r_CM[2] - engine.cylinder1.Rod.body.w_a[2] * engine.cylinder1.Rod.body.r_CM[1]),engine.cylinder1.Rod.body.w_a[1] * (engine.cylinder1.Rod.body.w_a[3] * engine.cylinder1.Rod.body.r_CM[1] - engine.cylinder1.Rod.body.w_a[1] * engine.cylinder1.Rod.body.r_CM[3]) - engine.cylinder1.Rod.body.w_a[2] * (engine.cylinder1.Rod.body.w_a[2] * engine.cylinder1.Rod.body.r_CM[3] - engine.cylinder1.Rod.body.w_a[3] * engine.cylinder1.Rod.body.r_CM[2])});
//   engine.cylinder1.Rod.body.frame_a.t[1] = engine.cylinder1.Rod.body.I[1,1] * engine.cylinder1.Rod.body.z_a[1] + (engine.cylinder1.Rod.body.I[1,2] * engine.cylinder1.Rod.body.z_a[2] + (engine.cylinder1.Rod.body.I[1,3] * engine.cylinder1.Rod.body.z_a[3] + (engine.cylinder1.Rod.body.w_a[2] * (engine.cylinder1.Rod.body.I[3,1] * engine.cylinder1.Rod.body.w_a[1] + (engine.cylinder1.Rod.body.I[3,2] * engine.cylinder1.Rod.body.w_a[2] + engine.cylinder1.Rod.body.I[3,3] * engine.cylinder1.Rod.body.w_a[3])) + ((-engine.cylinder1.Rod.body.w_a[3] * (engine.cylinder1.Rod.body.I[2,1] * engine.cylinder1.Rod.body.w_a[1] + (engine.cylinder1.Rod.body.I[2,2] * engine.cylinder1.Rod.body.w_a[2] + engine.cylinder1.Rod.body.I[2,3] * engine.cylinder1.Rod.body.w_a[3]))) + (engine.cylinder1.Rod.body.r_CM[2] * engine.cylinder1.Rod.body.frame_a.f[3] + (-engine.cylinder1.Rod.body.r_CM[3] * engine.cylinder1.Rod.body.frame_a.f[2]))))));
//   engine.cylinder1.Rod.body.frame_a.t[2] = engine.cylinder1.Rod.body.I[2,1] * engine.cylinder1.Rod.body.z_a[1] + (engine.cylinder1.Rod.body.I[2,2] * engine.cylinder1.Rod.body.z_a[2] + (engine.cylinder1.Rod.body.I[2,3] * engine.cylinder1.Rod.body.z_a[3] + (engine.cylinder1.Rod.body.w_a[3] * (engine.cylinder1.Rod.body.I[1,1] * engine.cylinder1.Rod.body.w_a[1] + (engine.cylinder1.Rod.body.I[1,2] * engine.cylinder1.Rod.body.w_a[2] + engine.cylinder1.Rod.body.I[1,3] * engine.cylinder1.Rod.body.w_a[3])) + ((-engine.cylinder1.Rod.body.w_a[1] * (engine.cylinder1.Rod.body.I[3,1] * engine.cylinder1.Rod.body.w_a[1] + (engine.cylinder1.Rod.body.I[3,2] * engine.cylinder1.Rod.body.w_a[2] + engine.cylinder1.Rod.body.I[3,3] * engine.cylinder1.Rod.body.w_a[3]))) + (engine.cylinder1.Rod.body.r_CM[3] * engine.cylinder1.Rod.body.frame_a.f[1] + (-engine.cylinder1.Rod.body.r_CM[1] * engine.cylinder1.Rod.body.frame_a.f[3]))))));
//   engine.cylinder1.Rod.body.frame_a.t[3] = engine.cylinder1.Rod.body.I[3,1] * engine.cylinder1.Rod.body.z_a[1] + (engine.cylinder1.Rod.body.I[3,2] * engine.cylinder1.Rod.body.z_a[2] + (engine.cylinder1.Rod.body.I[3,3] * engine.cylinder1.Rod.body.z_a[3] + (engine.cylinder1.Rod.body.w_a[1] * (engine.cylinder1.Rod.body.I[2,1] * engine.cylinder1.Rod.body.w_a[1] + (engine.cylinder1.Rod.body.I[2,2] * engine.cylinder1.Rod.body.w_a[2] + engine.cylinder1.Rod.body.I[2,3] * engine.cylinder1.Rod.body.w_a[3])) + ((-engine.cylinder1.Rod.body.w_a[2] * (engine.cylinder1.Rod.body.I[1,1] * engine.cylinder1.Rod.body.w_a[1] + (engine.cylinder1.Rod.body.I[1,2] * engine.cylinder1.Rod.body.w_a[2] + engine.cylinder1.Rod.body.I[1,3] * engine.cylinder1.Rod.body.w_a[3]))) + (engine.cylinder1.Rod.body.r_CM[1] * engine.cylinder1.Rod.body.frame_a.f[2] + (-engine.cylinder1.Rod.body.r_CM[2] * engine.cylinder1.Rod.body.frame_a.f[1]))))));
//   engine.cylinder1.Rod.shape1.R.T[1,1] = engine.cylinder1.Rod.frame_a.R.T[1,1];
//   engine.cylinder1.Rod.shape1.R.T[1,2] = engine.cylinder1.Rod.frame_a.R.T[1,2];
//   engine.cylinder1.Rod.shape1.R.T[1,3] = engine.cylinder1.Rod.frame_a.R.T[1,3];
//   engine.cylinder1.Rod.shape1.R.T[2,1] = engine.cylinder1.Rod.frame_a.R.T[2,1];
//   engine.cylinder1.Rod.shape1.R.T[2,2] = engine.cylinder1.Rod.frame_a.R.T[2,2];
//   engine.cylinder1.Rod.shape1.R.T[2,3] = engine.cylinder1.Rod.frame_a.R.T[2,3];
//   engine.cylinder1.Rod.shape1.R.T[3,1] = engine.cylinder1.Rod.frame_a.R.T[3,1];
//   engine.cylinder1.Rod.shape1.R.T[3,2] = engine.cylinder1.Rod.frame_a.R.T[3,2];
//   engine.cylinder1.Rod.shape1.R.T[3,3] = engine.cylinder1.Rod.frame_a.R.T[3,3];
//   engine.cylinder1.Rod.shape1.R.w[1] = engine.cylinder1.Rod.frame_a.R.w[1];
//   engine.cylinder1.Rod.shape1.R.w[2] = engine.cylinder1.Rod.frame_a.R.w[2];
//   engine.cylinder1.Rod.shape1.R.w[3] = engine.cylinder1.Rod.frame_a.R.w[3];
//   engine.cylinder1.Rod.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder1.Rod.shape1.shapeType);
//   engine.cylinder1.Rod.shape1.rxvisobj[1] = engine.cylinder1.Rod.shape1.R.T[1,1] * engine.cylinder1.Rod.shape1.e_x[1] + (engine.cylinder1.Rod.shape1.R.T[2,1] * engine.cylinder1.Rod.shape1.e_x[2] + engine.cylinder1.Rod.shape1.R.T[3,1] * engine.cylinder1.Rod.shape1.e_x[3]);
//   engine.cylinder1.Rod.shape1.rxvisobj[2] = engine.cylinder1.Rod.shape1.R.T[1,2] * engine.cylinder1.Rod.shape1.e_x[1] + (engine.cylinder1.Rod.shape1.R.T[2,2] * engine.cylinder1.Rod.shape1.e_x[2] + engine.cylinder1.Rod.shape1.R.T[3,2] * engine.cylinder1.Rod.shape1.e_x[3]);
//   engine.cylinder1.Rod.shape1.rxvisobj[3] = engine.cylinder1.Rod.shape1.R.T[1,3] * engine.cylinder1.Rod.shape1.e_x[1] + (engine.cylinder1.Rod.shape1.R.T[2,3] * engine.cylinder1.Rod.shape1.e_x[2] + engine.cylinder1.Rod.shape1.R.T[3,3] * engine.cylinder1.Rod.shape1.e_x[3]);
//   engine.cylinder1.Rod.shape1.ryvisobj[1] = engine.cylinder1.Rod.shape1.R.T[1,1] * engine.cylinder1.Rod.shape1.e_y[1] + (engine.cylinder1.Rod.shape1.R.T[2,1] * engine.cylinder1.Rod.shape1.e_y[2] + engine.cylinder1.Rod.shape1.R.T[3,1] * engine.cylinder1.Rod.shape1.e_y[3]);
//   engine.cylinder1.Rod.shape1.ryvisobj[2] = engine.cylinder1.Rod.shape1.R.T[1,2] * engine.cylinder1.Rod.shape1.e_y[1] + (engine.cylinder1.Rod.shape1.R.T[2,2] * engine.cylinder1.Rod.shape1.e_y[2] + engine.cylinder1.Rod.shape1.R.T[3,2] * engine.cylinder1.Rod.shape1.e_y[3]);
//   engine.cylinder1.Rod.shape1.ryvisobj[3] = engine.cylinder1.Rod.shape1.R.T[1,3] * engine.cylinder1.Rod.shape1.e_y[1] + (engine.cylinder1.Rod.shape1.R.T[2,3] * engine.cylinder1.Rod.shape1.e_y[2] + engine.cylinder1.Rod.shape1.R.T[3,3] * engine.cylinder1.Rod.shape1.e_y[3]);
//   engine.cylinder1.Rod.shape1.rvisobj = engine.cylinder1.Rod.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder1.Rod.shape1.R.T[1,1],engine.cylinder1.Rod.shape1.R.T[1,2],engine.cylinder1.Rod.shape1.R.T[1,3]},{engine.cylinder1.Rod.shape1.R.T[2,1],engine.cylinder1.Rod.shape1.R.T[2,2],engine.cylinder1.Rod.shape1.R.T[2,3]},{engine.cylinder1.Rod.shape1.R.T[3,1],engine.cylinder1.Rod.shape1.R.T[3,2],engine.cylinder1.Rod.shape1.R.T[3,3]}},{engine.cylinder1.Rod.shape1.r_shape[1],engine.cylinder1.Rod.shape1.r_shape[2],engine.cylinder1.Rod.shape1.r_shape[3]});
//   engine.cylinder1.Rod.shape1.size[1] = engine.cylinder1.Rod.shape1.length;
//   engine.cylinder1.Rod.shape1.size[2] = engine.cylinder1.Rod.shape1.width;
//   engine.cylinder1.Rod.shape1.size[3] = engine.cylinder1.Rod.shape1.height;
//   engine.cylinder1.Rod.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder1.Rod.shape1.color[1] / 255.0,engine.cylinder1.Rod.shape1.color[2] / 255.0,engine.cylinder1.Rod.shape1.color[3] / 255.0,engine.cylinder1.Rod.shape1.specularCoefficient);
//   engine.cylinder1.Rod.shape1.Extra = engine.cylinder1.Rod.shape1.extra;
//   engine.cylinder1.Rod.r_0[1] = engine.cylinder1.Rod.frame_a.r_0[1];
//   engine.cylinder1.Rod.r_0[2] = engine.cylinder1.Rod.frame_a.r_0[2];
//   engine.cylinder1.Rod.r_0[3] = engine.cylinder1.Rod.frame_a.r_0[3];
//   engine.cylinder1.Rod.v_0[1] = der(engine.cylinder1.Rod.r_0[1]);
//   engine.cylinder1.Rod.v_0[2] = der(engine.cylinder1.Rod.r_0[2]);
//   engine.cylinder1.Rod.v_0[3] = der(engine.cylinder1.Rod.r_0[3]);
//   engine.cylinder1.Rod.a_0[1] = der(engine.cylinder1.Rod.v_0[1]);
//   engine.cylinder1.Rod.a_0[2] = der(engine.cylinder1.Rod.v_0[2]);
//   engine.cylinder1.Rod.a_0[3] = der(engine.cylinder1.Rod.v_0[3]);
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0 = engine.cylinder1.Piston.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Piston.frameTranslation.frame_a.R,{engine.cylinder1.Piston.frameTranslation.r[1],engine.cylinder1.Piston.frameTranslation.r[2],engine.cylinder1.Piston.frameTranslation.r[3]});
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder1.Piston.frameTranslation.frame_a.f[1] + engine.cylinder1.Piston.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder1.Piston.frameTranslation.frame_a.f[2] + engine.cylinder1.Piston.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder1.Piston.frameTranslation.frame_a.f[3] + engine.cylinder1.Piston.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder1.Piston.frameTranslation.frame_a.t[1] + (engine.cylinder1.Piston.frameTranslation.frame_b.t[1] + (engine.cylinder1.Piston.frameTranslation.r[2] * engine.cylinder1.Piston.frameTranslation.frame_b.f[3] + (-engine.cylinder1.Piston.frameTranslation.r[3] * engine.cylinder1.Piston.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder1.Piston.frameTranslation.frame_a.t[2] + (engine.cylinder1.Piston.frameTranslation.frame_b.t[2] + (engine.cylinder1.Piston.frameTranslation.r[3] * engine.cylinder1.Piston.frameTranslation.frame_b.f[1] + (-engine.cylinder1.Piston.frameTranslation.r[1] * engine.cylinder1.Piston.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder1.Piston.frameTranslation.frame_a.t[3] + (engine.cylinder1.Piston.frameTranslation.frame_b.t[3] + (engine.cylinder1.Piston.frameTranslation.r[1] * engine.cylinder1.Piston.frameTranslation.frame_b.f[2] + (-engine.cylinder1.Piston.frameTranslation.r[2] * engine.cylinder1.Piston.frameTranslation.frame_b.f[1])));
//   engine.cylinder1.Piston.body.r_0[1] = engine.cylinder1.Piston.body.frame_a.r_0[1];
//   engine.cylinder1.Piston.body.r_0[2] = engine.cylinder1.Piston.body.frame_a.r_0[2];
//   engine.cylinder1.Piston.body.r_0[3] = engine.cylinder1.Piston.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder1.Piston.body.Q[1] = 0.0;
//   engine.cylinder1.Piston.body.Q[2] = 0.0;
//   engine.cylinder1.Piston.body.Q[3] = 0.0;
//   engine.cylinder1.Piston.body.Q[4] = 1.0;
//   engine.cylinder1.Piston.body.phi[1] = 0.0;
//   engine.cylinder1.Piston.body.phi[2] = 0.0;
//   engine.cylinder1.Piston.body.phi[3] = 0.0;
//   engine.cylinder1.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder1.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder1.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder1.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder1.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder1.Piston.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder1.Piston.body.useQuaternions then
//   engine.cylinder1.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder1.Piston.body.Q[1],engine.cylinder1.Piston.body.Q[2],engine.cylinder1.Piston.body.Q[3],engine.cylinder1.Piston.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder1.Piston.body.Q[1],engine.cylinder1.Piston.body.Q[2],engine.cylinder1.Piston.body.Q[3],engine.cylinder1.Piston.body.Q[4]},{der(engine.cylinder1.Piston.body.Q[1]),der(engine.cylinder1.Piston.body.Q[2]),der(engine.cylinder1.Piston.body.Q[3]),der(engine.cylinder1.Piston.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder1.Piston.body.Q[1],engine.cylinder1.Piston.body.Q[2],engine.cylinder1.Piston.body.Q[3],engine.cylinder1.Piston.body.Q[4]});
//   engine.cylinder1.Piston.body.phi[1] = 0.0;
//   engine.cylinder1.Piston.body.phi[2] = 0.0;
//   engine.cylinder1.Piston.body.phi[3] = 0.0;
//   engine.cylinder1.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder1.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder1.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder1.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder1.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder1.Piston.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder1.Piston.body.phi_d[1] = der(engine.cylinder1.Piston.body.phi[1]);
//   engine.cylinder1.Piston.body.phi_d[2] = der(engine.cylinder1.Piston.body.phi[2]);
//   engine.cylinder1.Piston.body.phi_d[3] = der(engine.cylinder1.Piston.body.phi[3]);
//   engine.cylinder1.Piston.body.phi_dd[1] = der(engine.cylinder1.Piston.body.phi_d[1]);
//   engine.cylinder1.Piston.body.phi_dd[2] = der(engine.cylinder1.Piston.body.phi_d[2]);
//   engine.cylinder1.Piston.body.phi_dd[3] = der(engine.cylinder1.Piston.body.phi_d[3]);
//   engine.cylinder1.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder1.Piston.body.sequence_angleStates[1],engine.cylinder1.Piston.body.sequence_angleStates[2],engine.cylinder1.Piston.body.sequence_angleStates[3]},{engine.cylinder1.Piston.body.phi[1],engine.cylinder1.Piston.body.phi[2],engine.cylinder1.Piston.body.phi[3]},{engine.cylinder1.Piston.body.phi_d[1],engine.cylinder1.Piston.body.phi_d[2],engine.cylinder1.Piston.body.phi_d[3]});
//   engine.cylinder1.Piston.body.Q[1] = 0.0;
//   engine.cylinder1.Piston.body.Q[2] = 0.0;
//   engine.cylinder1.Piston.body.Q[3] = 0.0;
//   engine.cylinder1.Piston.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder1.Piston.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder1.Piston.body.frame_a.r_0[1],engine.cylinder1.Piston.body.frame_a.r_0[2],engine.cylinder1.Piston.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Piston.body.frame_a.R,{engine.cylinder1.Piston.body.r_CM[1],engine.cylinder1.Piston.body.r_CM[2],engine.cylinder1.Piston.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder1.Piston.body.v_0[1] = der(engine.cylinder1.Piston.body.frame_a.r_0[1]);
//   engine.cylinder1.Piston.body.v_0[2] = der(engine.cylinder1.Piston.body.frame_a.r_0[2]);
//   engine.cylinder1.Piston.body.v_0[3] = der(engine.cylinder1.Piston.body.frame_a.r_0[3]);
//   engine.cylinder1.Piston.body.a_0[1] = der(engine.cylinder1.Piston.body.v_0[1]);
//   engine.cylinder1.Piston.body.a_0[2] = der(engine.cylinder1.Piston.body.v_0[2]);
//   engine.cylinder1.Piston.body.a_0[3] = der(engine.cylinder1.Piston.body.v_0[3]);
//   engine.cylinder1.Piston.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder1.Piston.body.frame_a.R);
//   engine.cylinder1.Piston.body.z_a[1] = der(engine.cylinder1.Piston.body.w_a[1]);
//   engine.cylinder1.Piston.body.z_a[2] = der(engine.cylinder1.Piston.body.w_a[2]);
//   engine.cylinder1.Piston.body.z_a[3] = der(engine.cylinder1.Piston.body.w_a[3]);
//   engine.cylinder1.Piston.body.frame_a.f = engine.cylinder1.Piston.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder1.Piston.body.frame_a.R,{engine.cylinder1.Piston.body.a_0[1] - engine.cylinder1.Piston.body.g_0[1],engine.cylinder1.Piston.body.a_0[2] - engine.cylinder1.Piston.body.g_0[2],engine.cylinder1.Piston.body.a_0[3] - engine.cylinder1.Piston.body.g_0[3]}) + {engine.cylinder1.Piston.body.z_a[2] * engine.cylinder1.Piston.body.r_CM[3] - engine.cylinder1.Piston.body.z_a[3] * engine.cylinder1.Piston.body.r_CM[2],engine.cylinder1.Piston.body.z_a[3] * engine.cylinder1.Piston.body.r_CM[1] - engine.cylinder1.Piston.body.z_a[1] * engine.cylinder1.Piston.body.r_CM[3],engine.cylinder1.Piston.body.z_a[1] * engine.cylinder1.Piston.body.r_CM[2] - engine.cylinder1.Piston.body.z_a[2] * engine.cylinder1.Piston.body.r_CM[1]} + {engine.cylinder1.Piston.body.w_a[2] * (engine.cylinder1.Piston.body.w_a[1] * engine.cylinder1.Piston.body.r_CM[2] - engine.cylinder1.Piston.body.w_a[2] * engine.cylinder1.Piston.body.r_CM[1]) - engine.cylinder1.Piston.body.w_a[3] * (engine.cylinder1.Piston.body.w_a[3] * engine.cylinder1.Piston.body.r_CM[1] - engine.cylinder1.Piston.body.w_a[1] * engine.cylinder1.Piston.body.r_CM[3]),engine.cylinder1.Piston.body.w_a[3] * (engine.cylinder1.Piston.body.w_a[2] * engine.cylinder1.Piston.body.r_CM[3] - engine.cylinder1.Piston.body.w_a[3] * engine.cylinder1.Piston.body.r_CM[2]) - engine.cylinder1.Piston.body.w_a[1] * (engine.cylinder1.Piston.body.w_a[1] * engine.cylinder1.Piston.body.r_CM[2] - engine.cylinder1.Piston.body.w_a[2] * engine.cylinder1.Piston.body.r_CM[1]),engine.cylinder1.Piston.body.w_a[1] * (engine.cylinder1.Piston.body.w_a[3] * engine.cylinder1.Piston.body.r_CM[1] - engine.cylinder1.Piston.body.w_a[1] * engine.cylinder1.Piston.body.r_CM[3]) - engine.cylinder1.Piston.body.w_a[2] * (engine.cylinder1.Piston.body.w_a[2] * engine.cylinder1.Piston.body.r_CM[3] - engine.cylinder1.Piston.body.w_a[3] * engine.cylinder1.Piston.body.r_CM[2])});
//   engine.cylinder1.Piston.body.frame_a.t[1] = engine.cylinder1.Piston.body.I[1,1] * engine.cylinder1.Piston.body.z_a[1] + (engine.cylinder1.Piston.body.I[1,2] * engine.cylinder1.Piston.body.z_a[2] + (engine.cylinder1.Piston.body.I[1,3] * engine.cylinder1.Piston.body.z_a[3] + (engine.cylinder1.Piston.body.w_a[2] * (engine.cylinder1.Piston.body.I[3,1] * engine.cylinder1.Piston.body.w_a[1] + (engine.cylinder1.Piston.body.I[3,2] * engine.cylinder1.Piston.body.w_a[2] + engine.cylinder1.Piston.body.I[3,3] * engine.cylinder1.Piston.body.w_a[3])) + ((-engine.cylinder1.Piston.body.w_a[3] * (engine.cylinder1.Piston.body.I[2,1] * engine.cylinder1.Piston.body.w_a[1] + (engine.cylinder1.Piston.body.I[2,2] * engine.cylinder1.Piston.body.w_a[2] + engine.cylinder1.Piston.body.I[2,3] * engine.cylinder1.Piston.body.w_a[3]))) + (engine.cylinder1.Piston.body.r_CM[2] * engine.cylinder1.Piston.body.frame_a.f[3] + (-engine.cylinder1.Piston.body.r_CM[3] * engine.cylinder1.Piston.body.frame_a.f[2]))))));
//   engine.cylinder1.Piston.body.frame_a.t[2] = engine.cylinder1.Piston.body.I[2,1] * engine.cylinder1.Piston.body.z_a[1] + (engine.cylinder1.Piston.body.I[2,2] * engine.cylinder1.Piston.body.z_a[2] + (engine.cylinder1.Piston.body.I[2,3] * engine.cylinder1.Piston.body.z_a[3] + (engine.cylinder1.Piston.body.w_a[3] * (engine.cylinder1.Piston.body.I[1,1] * engine.cylinder1.Piston.body.w_a[1] + (engine.cylinder1.Piston.body.I[1,2] * engine.cylinder1.Piston.body.w_a[2] + engine.cylinder1.Piston.body.I[1,3] * engine.cylinder1.Piston.body.w_a[3])) + ((-engine.cylinder1.Piston.body.w_a[1] * (engine.cylinder1.Piston.body.I[3,1] * engine.cylinder1.Piston.body.w_a[1] + (engine.cylinder1.Piston.body.I[3,2] * engine.cylinder1.Piston.body.w_a[2] + engine.cylinder1.Piston.body.I[3,3] * engine.cylinder1.Piston.body.w_a[3]))) + (engine.cylinder1.Piston.body.r_CM[3] * engine.cylinder1.Piston.body.frame_a.f[1] + (-engine.cylinder1.Piston.body.r_CM[1] * engine.cylinder1.Piston.body.frame_a.f[3]))))));
//   engine.cylinder1.Piston.body.frame_a.t[3] = engine.cylinder1.Piston.body.I[3,1] * engine.cylinder1.Piston.body.z_a[1] + (engine.cylinder1.Piston.body.I[3,2] * engine.cylinder1.Piston.body.z_a[2] + (engine.cylinder1.Piston.body.I[3,3] * engine.cylinder1.Piston.body.z_a[3] + (engine.cylinder1.Piston.body.w_a[1] * (engine.cylinder1.Piston.body.I[2,1] * engine.cylinder1.Piston.body.w_a[1] + (engine.cylinder1.Piston.body.I[2,2] * engine.cylinder1.Piston.body.w_a[2] + engine.cylinder1.Piston.body.I[2,3] * engine.cylinder1.Piston.body.w_a[3])) + ((-engine.cylinder1.Piston.body.w_a[2] * (engine.cylinder1.Piston.body.I[1,1] * engine.cylinder1.Piston.body.w_a[1] + (engine.cylinder1.Piston.body.I[1,2] * engine.cylinder1.Piston.body.w_a[2] + engine.cylinder1.Piston.body.I[1,3] * engine.cylinder1.Piston.body.w_a[3]))) + (engine.cylinder1.Piston.body.r_CM[1] * engine.cylinder1.Piston.body.frame_a.f[2] + (-engine.cylinder1.Piston.body.r_CM[2] * engine.cylinder1.Piston.body.frame_a.f[1]))))));
//   engine.cylinder1.Piston.shape1.R.T[1,1] = engine.cylinder1.Piston.frame_a.R.T[1,1];
//   engine.cylinder1.Piston.shape1.R.T[1,2] = engine.cylinder1.Piston.frame_a.R.T[1,2];
//   engine.cylinder1.Piston.shape1.R.T[1,3] = engine.cylinder1.Piston.frame_a.R.T[1,3];
//   engine.cylinder1.Piston.shape1.R.T[2,1] = engine.cylinder1.Piston.frame_a.R.T[2,1];
//   engine.cylinder1.Piston.shape1.R.T[2,2] = engine.cylinder1.Piston.frame_a.R.T[2,2];
//   engine.cylinder1.Piston.shape1.R.T[2,3] = engine.cylinder1.Piston.frame_a.R.T[2,3];
//   engine.cylinder1.Piston.shape1.R.T[3,1] = engine.cylinder1.Piston.frame_a.R.T[3,1];
//   engine.cylinder1.Piston.shape1.R.T[3,2] = engine.cylinder1.Piston.frame_a.R.T[3,2];
//   engine.cylinder1.Piston.shape1.R.T[3,3] = engine.cylinder1.Piston.frame_a.R.T[3,3];
//   engine.cylinder1.Piston.shape1.R.w[1] = engine.cylinder1.Piston.frame_a.R.w[1];
//   engine.cylinder1.Piston.shape1.R.w[2] = engine.cylinder1.Piston.frame_a.R.w[2];
//   engine.cylinder1.Piston.shape1.R.w[3] = engine.cylinder1.Piston.frame_a.R.w[3];
//   engine.cylinder1.Piston.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder1.Piston.shape1.shapeType);
//   engine.cylinder1.Piston.shape1.rxvisobj[1] = engine.cylinder1.Piston.shape1.R.T[1,1] * engine.cylinder1.Piston.shape1.e_x[1] + (engine.cylinder1.Piston.shape1.R.T[2,1] * engine.cylinder1.Piston.shape1.e_x[2] + engine.cylinder1.Piston.shape1.R.T[3,1] * engine.cylinder1.Piston.shape1.e_x[3]);
//   engine.cylinder1.Piston.shape1.rxvisobj[2] = engine.cylinder1.Piston.shape1.R.T[1,2] * engine.cylinder1.Piston.shape1.e_x[1] + (engine.cylinder1.Piston.shape1.R.T[2,2] * engine.cylinder1.Piston.shape1.e_x[2] + engine.cylinder1.Piston.shape1.R.T[3,2] * engine.cylinder1.Piston.shape1.e_x[3]);
//   engine.cylinder1.Piston.shape1.rxvisobj[3] = engine.cylinder1.Piston.shape1.R.T[1,3] * engine.cylinder1.Piston.shape1.e_x[1] + (engine.cylinder1.Piston.shape1.R.T[2,3] * engine.cylinder1.Piston.shape1.e_x[2] + engine.cylinder1.Piston.shape1.R.T[3,3] * engine.cylinder1.Piston.shape1.e_x[3]);
//   engine.cylinder1.Piston.shape1.ryvisobj[1] = engine.cylinder1.Piston.shape1.R.T[1,1] * engine.cylinder1.Piston.shape1.e_y[1] + (engine.cylinder1.Piston.shape1.R.T[2,1] * engine.cylinder1.Piston.shape1.e_y[2] + engine.cylinder1.Piston.shape1.R.T[3,1] * engine.cylinder1.Piston.shape1.e_y[3]);
//   engine.cylinder1.Piston.shape1.ryvisobj[2] = engine.cylinder1.Piston.shape1.R.T[1,2] * engine.cylinder1.Piston.shape1.e_y[1] + (engine.cylinder1.Piston.shape1.R.T[2,2] * engine.cylinder1.Piston.shape1.e_y[2] + engine.cylinder1.Piston.shape1.R.T[3,2] * engine.cylinder1.Piston.shape1.e_y[3]);
//   engine.cylinder1.Piston.shape1.ryvisobj[3] = engine.cylinder1.Piston.shape1.R.T[1,3] * engine.cylinder1.Piston.shape1.e_y[1] + (engine.cylinder1.Piston.shape1.R.T[2,3] * engine.cylinder1.Piston.shape1.e_y[2] + engine.cylinder1.Piston.shape1.R.T[3,3] * engine.cylinder1.Piston.shape1.e_y[3]);
//   engine.cylinder1.Piston.shape1.rvisobj = engine.cylinder1.Piston.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder1.Piston.shape1.R.T[1,1],engine.cylinder1.Piston.shape1.R.T[1,2],engine.cylinder1.Piston.shape1.R.T[1,3]},{engine.cylinder1.Piston.shape1.R.T[2,1],engine.cylinder1.Piston.shape1.R.T[2,2],engine.cylinder1.Piston.shape1.R.T[2,3]},{engine.cylinder1.Piston.shape1.R.T[3,1],engine.cylinder1.Piston.shape1.R.T[3,2],engine.cylinder1.Piston.shape1.R.T[3,3]}},{engine.cylinder1.Piston.shape1.r_shape[1],engine.cylinder1.Piston.shape1.r_shape[2],engine.cylinder1.Piston.shape1.r_shape[3]});
//   engine.cylinder1.Piston.shape1.size[1] = engine.cylinder1.Piston.shape1.length;
//   engine.cylinder1.Piston.shape1.size[2] = engine.cylinder1.Piston.shape1.width;
//   engine.cylinder1.Piston.shape1.size[3] = engine.cylinder1.Piston.shape1.height;
//   engine.cylinder1.Piston.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder1.Piston.shape1.color[1] / 255.0,engine.cylinder1.Piston.shape1.color[2] / 255.0,engine.cylinder1.Piston.shape1.color[3] / 255.0,engine.cylinder1.Piston.shape1.specularCoefficient);
//   engine.cylinder1.Piston.shape1.Extra = engine.cylinder1.Piston.shape1.extra;
//   engine.cylinder1.Piston.r_0[1] = engine.cylinder1.Piston.frame_a.r_0[1];
//   engine.cylinder1.Piston.r_0[2] = engine.cylinder1.Piston.frame_a.r_0[2];
//   engine.cylinder1.Piston.r_0[3] = engine.cylinder1.Piston.frame_a.r_0[3];
//   engine.cylinder1.Piston.v_0[1] = der(engine.cylinder1.Piston.r_0[1]);
//   engine.cylinder1.Piston.v_0[2] = der(engine.cylinder1.Piston.r_0[2]);
//   engine.cylinder1.Piston.v_0[3] = der(engine.cylinder1.Piston.r_0[3]);
//   engine.cylinder1.Piston.a_0[1] = der(engine.cylinder1.Piston.v_0[1]);
//   engine.cylinder1.Piston.a_0[2] = der(engine.cylinder1.Piston.v_0[2]);
//   engine.cylinder1.Piston.a_0[3] = der(engine.cylinder1.Piston.v_0[3]);
//   engine.cylinder1.gasForce.y = (-engine.cylinder1.gasForce.s_rel) / engine.cylinder1.gasForce.L;
//   engine.cylinder1.gasForce.x = 1.0 + engine.cylinder1.gasForce.s_rel / engine.cylinder1.gasForce.L;
//   engine.cylinder1.gasForce.v_rel = der(engine.cylinder1.gasForce.s_rel);
//   engine.cylinder1.gasForce.press = engine.cylinder1.gasForce.p / 100000.0;
//   engine.cylinder1.gasForce.p = 100000.0 * (if engine.cylinder1.gasForce.v_rel < 0.0 then if engine.cylinder1.gasForce.x < 0.987 then 2.4 + (177.4132 * engine.cylinder1.gasForce.x ^ 4.0 + (-287.2189 * engine.cylinder1.gasForce.x ^ 3.0 + (151.8252 * engine.cylinder1.gasForce.x ^ 2.0 + -24.9973 * engine.cylinder1.gasForce.x))) else 2129670.0 + (2836360.0 * engine.cylinder1.gasForce.x ^ 4.0 + (-10569296.0 * engine.cylinder1.gasForce.x ^ 3.0 + (14761814.0 * engine.cylinder1.gasForce.x ^ 2.0 + -9158505.0 * engine.cylinder1.gasForce.x))) else if engine.cylinder1.gasForce.x > 0.93 then -3929704.0 * engine.cylinder1.gasForce.x ^ 4.0 + (14748765.0 * engine.cylinder1.gasForce.x ^ 3.0 + (-20747000.0 * engine.cylinder1.gasForce.x ^ 2.0 + 12964477.0 * engine.cylinder1.gasForce.x)) - 3036495.0 else 2.4 + (145.93 * engine.cylinder1.gasForce.x ^ 4.0 + (-131.707 * engine.cylinder1.gasForce.x ^ 3.0 + (17.3438 * engine.cylinder1.gasForce.x ^ 2.0 + 17.9272 * engine.cylinder1.gasForce.x))));
//   engine.cylinder1.gasForce.f = -78539.8163397448 * (engine.cylinder1.gasForce.press * engine.cylinder1.gasForce.d ^ 2.0);
//   engine.cylinder1.gasForce.V = engine.cylinder1.gasForce.k0 + engine.cylinder1.gasForce.k1 * (1.0 - engine.cylinder1.gasForce.x);
//   engine.cylinder1.gasForce.dens = 1.0 / engine.cylinder1.gasForce.V;
//   engine.cylinder1.gasForce.p * engine.cylinder1.gasForce.V / 100000.0 = engine.cylinder1.gasForce.k * engine.cylinder1.gasForce.T;
//   engine.cylinder1.gasForce.s_rel = engine.cylinder1.gasForce.flange_b.s - engine.cylinder1.gasForce.flange_a.s;
//   engine.cylinder1.gasForce.flange_b.f = engine.cylinder1.gasForce.f;
//   engine.cylinder1.gasForce.flange_a.f = -engine.cylinder1.gasForce.f;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder1.Crank.frame_b.r_0 = engine.cylinder1.Crank.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder1.Crank.frame_a.R,{engine.cylinder1.Crank.r[1],engine.cylinder1.Crank.r[2],engine.cylinder1.Crank.r[3]});
//   engine.cylinder1.Crank.frame_b.R.T[1,1] = engine.cylinder1.Crank.frame_a.R.T[1,1];
//   engine.cylinder1.Crank.frame_b.R.T[1,2] = engine.cylinder1.Crank.frame_a.R.T[1,2];
//   engine.cylinder1.Crank.frame_b.R.T[1,3] = engine.cylinder1.Crank.frame_a.R.T[1,3];
//   engine.cylinder1.Crank.frame_b.R.T[2,1] = engine.cylinder1.Crank.frame_a.R.T[2,1];
//   engine.cylinder1.Crank.frame_b.R.T[2,2] = engine.cylinder1.Crank.frame_a.R.T[2,2];
//   engine.cylinder1.Crank.frame_b.R.T[2,3] = engine.cylinder1.Crank.frame_a.R.T[2,3];
//   engine.cylinder1.Crank.frame_b.R.T[3,1] = engine.cylinder1.Crank.frame_a.R.T[3,1];
//   engine.cylinder1.Crank.frame_b.R.T[3,2] = engine.cylinder1.Crank.frame_a.R.T[3,2];
//   engine.cylinder1.Crank.frame_b.R.T[3,3] = engine.cylinder1.Crank.frame_a.R.T[3,3];
//   engine.cylinder1.Crank.frame_b.R.w[1] = engine.cylinder1.Crank.frame_a.R.w[1];
//   engine.cylinder1.Crank.frame_b.R.w[2] = engine.cylinder1.Crank.frame_a.R.w[2];
//   engine.cylinder1.Crank.frame_b.R.w[3] = engine.cylinder1.Crank.frame_a.R.w[3];
//   0.0 = engine.cylinder1.Crank.frame_a.f[1] + engine.cylinder1.Crank.frame_b.f[1];
//   0.0 = engine.cylinder1.Crank.frame_a.f[2] + engine.cylinder1.Crank.frame_b.f[2];
//   0.0 = engine.cylinder1.Crank.frame_a.f[3] + engine.cylinder1.Crank.frame_b.f[3];
//   0.0 = engine.cylinder1.Crank.frame_a.t[1] + (engine.cylinder1.Crank.frame_b.t[1] + (engine.cylinder1.Crank.r[2] * engine.cylinder1.Crank.frame_b.f[3] + (-engine.cylinder1.Crank.r[3] * engine.cylinder1.Crank.frame_b.f[2])));
//   0.0 = engine.cylinder1.Crank.frame_a.t[2] + (engine.cylinder1.Crank.frame_b.t[2] + (engine.cylinder1.Crank.r[3] * engine.cylinder1.Crank.frame_b.f[1] + (-engine.cylinder1.Crank.r[1] * engine.cylinder1.Crank.frame_b.f[3])));
//   0.0 = engine.cylinder1.Crank.frame_a.t[3] + (engine.cylinder1.Crank.frame_b.t[3] + (engine.cylinder1.Crank.r[1] * engine.cylinder1.Crank.frame_b.f[2] + (-engine.cylinder1.Crank.r[2] * engine.cylinder1.Crank.frame_b.f[1])));
//   engine.cylinder1.CrankShape.vis.R.T[1,1] = engine.cylinder1.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder1.CrankShape.vis.R.T[1,2] = engine.cylinder1.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder1.CrankShape.vis.R.T[1,3] = engine.cylinder1.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder1.CrankShape.vis.R.T[2,1] = engine.cylinder1.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder1.CrankShape.vis.R.T[2,2] = engine.cylinder1.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder1.CrankShape.vis.R.T[2,3] = engine.cylinder1.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder1.CrankShape.vis.R.T[3,1] = engine.cylinder1.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder1.CrankShape.vis.R.T[3,2] = engine.cylinder1.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder1.CrankShape.vis.R.T[3,3] = engine.cylinder1.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder1.CrankShape.vis.R.w[1] = engine.cylinder1.CrankShape.frame_a.R.w[1];
//   engine.cylinder1.CrankShape.vis.R.w[2] = engine.cylinder1.CrankShape.frame_a.R.w[2];
//   engine.cylinder1.CrankShape.vis.R.w[3] = engine.cylinder1.CrankShape.frame_a.R.w[3];
//   engine.cylinder1.CrankShape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder1.CrankShape.vis.shapeType);
//   engine.cylinder1.CrankShape.vis.rxvisobj[1] = engine.cylinder1.CrankShape.vis.R.T[1,1] * engine.cylinder1.CrankShape.vis.e_x[1] + (engine.cylinder1.CrankShape.vis.R.T[2,1] * engine.cylinder1.CrankShape.vis.e_x[2] + engine.cylinder1.CrankShape.vis.R.T[3,1] * engine.cylinder1.CrankShape.vis.e_x[3]);
//   engine.cylinder1.CrankShape.vis.rxvisobj[2] = engine.cylinder1.CrankShape.vis.R.T[1,2] * engine.cylinder1.CrankShape.vis.e_x[1] + (engine.cylinder1.CrankShape.vis.R.T[2,2] * engine.cylinder1.CrankShape.vis.e_x[2] + engine.cylinder1.CrankShape.vis.R.T[3,2] * engine.cylinder1.CrankShape.vis.e_x[3]);
//   engine.cylinder1.CrankShape.vis.rxvisobj[3] = engine.cylinder1.CrankShape.vis.R.T[1,3] * engine.cylinder1.CrankShape.vis.e_x[1] + (engine.cylinder1.CrankShape.vis.R.T[2,3] * engine.cylinder1.CrankShape.vis.e_x[2] + engine.cylinder1.CrankShape.vis.R.T[3,3] * engine.cylinder1.CrankShape.vis.e_x[3]);
//   engine.cylinder1.CrankShape.vis.ryvisobj[1] = engine.cylinder1.CrankShape.vis.R.T[1,1] * engine.cylinder1.CrankShape.vis.e_y[1] + (engine.cylinder1.CrankShape.vis.R.T[2,1] * engine.cylinder1.CrankShape.vis.e_y[2] + engine.cylinder1.CrankShape.vis.R.T[3,1] * engine.cylinder1.CrankShape.vis.e_y[3]);
//   engine.cylinder1.CrankShape.vis.ryvisobj[2] = engine.cylinder1.CrankShape.vis.R.T[1,2] * engine.cylinder1.CrankShape.vis.e_y[1] + (engine.cylinder1.CrankShape.vis.R.T[2,2] * engine.cylinder1.CrankShape.vis.e_y[2] + engine.cylinder1.CrankShape.vis.R.T[3,2] * engine.cylinder1.CrankShape.vis.e_y[3]);
//   engine.cylinder1.CrankShape.vis.ryvisobj[3] = engine.cylinder1.CrankShape.vis.R.T[1,3] * engine.cylinder1.CrankShape.vis.e_y[1] + (engine.cylinder1.CrankShape.vis.R.T[2,3] * engine.cylinder1.CrankShape.vis.e_y[2] + engine.cylinder1.CrankShape.vis.R.T[3,3] * engine.cylinder1.CrankShape.vis.e_y[3]);
//   engine.cylinder1.CrankShape.vis.rvisobj = engine.cylinder1.CrankShape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder1.CrankShape.vis.R.T[1,1],engine.cylinder1.CrankShape.vis.R.T[1,2],engine.cylinder1.CrankShape.vis.R.T[1,3]},{engine.cylinder1.CrankShape.vis.R.T[2,1],engine.cylinder1.CrankShape.vis.R.T[2,2],engine.cylinder1.CrankShape.vis.R.T[2,3]},{engine.cylinder1.CrankShape.vis.R.T[3,1],engine.cylinder1.CrankShape.vis.R.T[3,2],engine.cylinder1.CrankShape.vis.R.T[3,3]}},{engine.cylinder1.CrankShape.vis.r_shape[1],engine.cylinder1.CrankShape.vis.r_shape[2],engine.cylinder1.CrankShape.vis.r_shape[3]});
//   engine.cylinder1.CrankShape.vis.size[1] = engine.cylinder1.CrankShape.vis.length;
//   engine.cylinder1.CrankShape.vis.size[2] = engine.cylinder1.CrankShape.vis.width;
//   engine.cylinder1.CrankShape.vis.size[3] = engine.cylinder1.CrankShape.vis.height;
//   engine.cylinder1.CrankShape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder1.CrankShape.vis.color[1] / 255.0,engine.cylinder1.CrankShape.vis.color[2] / 255.0,engine.cylinder1.CrankShape.vis.color[3] / 255.0,engine.cylinder1.CrankShape.vis.specularCoefficient);
//   engine.cylinder1.CrankShape.vis.Extra = engine.cylinder1.CrankShape.vis.extra;
//   engine.cylinder1.CrankShape.frame_a.f[1] = 0.0;
//   engine.cylinder1.CrankShape.frame_a.f[2] = 0.0;
//   engine.cylinder1.CrankShape.frame_a.f[3] = 0.0;
//   engine.cylinder1.CrankShape.frame_a.t[1] = 0.0;
//   engine.cylinder1.CrankShape.frame_a.t[2] = 0.0;
//   engine.cylinder1.CrankShape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder2.Mid.frame_b.r_0 = engine.cylinder2.Mid.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Mid.frame_a.R,{engine.cylinder2.Mid.r[1],engine.cylinder2.Mid.r[2],engine.cylinder2.Mid.r[3]});
//   engine.cylinder2.Mid.frame_b.R.T[1,1] = engine.cylinder2.Mid.frame_a.R.T[1,1];
//   engine.cylinder2.Mid.frame_b.R.T[1,2] = engine.cylinder2.Mid.frame_a.R.T[1,2];
//   engine.cylinder2.Mid.frame_b.R.T[1,3] = engine.cylinder2.Mid.frame_a.R.T[1,3];
//   engine.cylinder2.Mid.frame_b.R.T[2,1] = engine.cylinder2.Mid.frame_a.R.T[2,1];
//   engine.cylinder2.Mid.frame_b.R.T[2,2] = engine.cylinder2.Mid.frame_a.R.T[2,2];
//   engine.cylinder2.Mid.frame_b.R.T[2,3] = engine.cylinder2.Mid.frame_a.R.T[2,3];
//   engine.cylinder2.Mid.frame_b.R.T[3,1] = engine.cylinder2.Mid.frame_a.R.T[3,1];
//   engine.cylinder2.Mid.frame_b.R.T[3,2] = engine.cylinder2.Mid.frame_a.R.T[3,2];
//   engine.cylinder2.Mid.frame_b.R.T[3,3] = engine.cylinder2.Mid.frame_a.R.T[3,3];
//   engine.cylinder2.Mid.frame_b.R.w[1] = engine.cylinder2.Mid.frame_a.R.w[1];
//   engine.cylinder2.Mid.frame_b.R.w[2] = engine.cylinder2.Mid.frame_a.R.w[2];
//   engine.cylinder2.Mid.frame_b.R.w[3] = engine.cylinder2.Mid.frame_a.R.w[3];
//   0.0 = engine.cylinder2.Mid.frame_a.f[1] + engine.cylinder2.Mid.frame_b.f[1];
//   0.0 = engine.cylinder2.Mid.frame_a.f[2] + engine.cylinder2.Mid.frame_b.f[2];
//   0.0 = engine.cylinder2.Mid.frame_a.f[3] + engine.cylinder2.Mid.frame_b.f[3];
//   0.0 = engine.cylinder2.Mid.frame_a.t[1] + (engine.cylinder2.Mid.frame_b.t[1] + (engine.cylinder2.Mid.r[2] * engine.cylinder2.Mid.frame_b.f[3] + (-engine.cylinder2.Mid.r[3] * engine.cylinder2.Mid.frame_b.f[2])));
//   0.0 = engine.cylinder2.Mid.frame_a.t[2] + (engine.cylinder2.Mid.frame_b.t[2] + (engine.cylinder2.Mid.r[3] * engine.cylinder2.Mid.frame_b.f[1] + (-engine.cylinder2.Mid.r[1] * engine.cylinder2.Mid.frame_b.f[3])));
//   0.0 = engine.cylinder2.Mid.frame_a.t[3] + (engine.cylinder2.Mid.frame_b.t[3] + (engine.cylinder2.Mid.r[1] * engine.cylinder2.Mid.frame_b.f[2] + (-engine.cylinder2.Mid.r[2] * engine.cylinder2.Mid.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder2.Mounting.frame_b.r_0 = engine.cylinder2.Mounting.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Mounting.frame_a.R,{engine.cylinder2.Mounting.r[1],engine.cylinder2.Mounting.r[2],engine.cylinder2.Mounting.r[3]});
//   engine.cylinder2.Mounting.frame_b.R.T[1,1] = engine.cylinder2.Mounting.frame_a.R.T[1,1];
//   engine.cylinder2.Mounting.frame_b.R.T[1,2] = engine.cylinder2.Mounting.frame_a.R.T[1,2];
//   engine.cylinder2.Mounting.frame_b.R.T[1,3] = engine.cylinder2.Mounting.frame_a.R.T[1,3];
//   engine.cylinder2.Mounting.frame_b.R.T[2,1] = engine.cylinder2.Mounting.frame_a.R.T[2,1];
//   engine.cylinder2.Mounting.frame_b.R.T[2,2] = engine.cylinder2.Mounting.frame_a.R.T[2,2];
//   engine.cylinder2.Mounting.frame_b.R.T[2,3] = engine.cylinder2.Mounting.frame_a.R.T[2,3];
//   engine.cylinder2.Mounting.frame_b.R.T[3,1] = engine.cylinder2.Mounting.frame_a.R.T[3,1];
//   engine.cylinder2.Mounting.frame_b.R.T[3,2] = engine.cylinder2.Mounting.frame_a.R.T[3,2];
//   engine.cylinder2.Mounting.frame_b.R.T[3,3] = engine.cylinder2.Mounting.frame_a.R.T[3,3];
//   engine.cylinder2.Mounting.frame_b.R.w[1] = engine.cylinder2.Mounting.frame_a.R.w[1];
//   engine.cylinder2.Mounting.frame_b.R.w[2] = engine.cylinder2.Mounting.frame_a.R.w[2];
//   engine.cylinder2.Mounting.frame_b.R.w[3] = engine.cylinder2.Mounting.frame_a.R.w[3];
//   0.0 = engine.cylinder2.Mounting.frame_a.f[1] + engine.cylinder2.Mounting.frame_b.f[1];
//   0.0 = engine.cylinder2.Mounting.frame_a.f[2] + engine.cylinder2.Mounting.frame_b.f[2];
//   0.0 = engine.cylinder2.Mounting.frame_a.f[3] + engine.cylinder2.Mounting.frame_b.f[3];
//   0.0 = engine.cylinder2.Mounting.frame_a.t[1] + (engine.cylinder2.Mounting.frame_b.t[1] + (engine.cylinder2.Mounting.r[2] * engine.cylinder2.Mounting.frame_b.f[3] + (-engine.cylinder2.Mounting.r[3] * engine.cylinder2.Mounting.frame_b.f[2])));
//   0.0 = engine.cylinder2.Mounting.frame_a.t[2] + (engine.cylinder2.Mounting.frame_b.t[2] + (engine.cylinder2.Mounting.r[3] * engine.cylinder2.Mounting.frame_b.f[1] + (-engine.cylinder2.Mounting.r[1] * engine.cylinder2.Mounting.frame_b.f[3])));
//   0.0 = engine.cylinder2.Mounting.frame_a.t[3] + (engine.cylinder2.Mounting.frame_b.t[3] + (engine.cylinder2.Mounting.r[1] * engine.cylinder2.Mounting.frame_b.f[2] + (-engine.cylinder2.Mounting.r[2] * engine.cylinder2.Mounting.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder2.CylinderInclination.frame_b.r_0 = engine.cylinder2.CylinderInclination.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.CylinderInclination.frame_a.R,{engine.cylinder2.CylinderInclination.r[1],engine.cylinder2.CylinderInclination.r[2],engine.cylinder2.CylinderInclination.r[3]});
//   engine.cylinder2.CylinderInclination.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder2.CylinderInclination.frame_a.R,engine.cylinder2.CylinderInclination.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder2.CylinderInclination.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.CylinderInclination.R_rel,{engine.cylinder2.CylinderInclination.frame_b.f[1],engine.cylinder2.CylinderInclination.frame_b.f[2],engine.cylinder2.CylinderInclination.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder2.CylinderInclination.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.CylinderInclination.R_rel,{engine.cylinder2.CylinderInclination.frame_b.t[1],engine.cylinder2.CylinderInclination.frame_b.t[2],engine.cylinder2.CylinderInclination.frame_b.t[3]}) - {engine.cylinder2.CylinderInclination.r[2] * engine.cylinder2.CylinderInclination.frame_a.f[3] - engine.cylinder2.CylinderInclination.r[3] * engine.cylinder2.CylinderInclination.frame_a.f[2],engine.cylinder2.CylinderInclination.r[3] * engine.cylinder2.CylinderInclination.frame_a.f[1] - engine.cylinder2.CylinderInclination.r[1] * engine.cylinder2.CylinderInclination.frame_a.f[3],engine.cylinder2.CylinderInclination.r[1] * engine.cylinder2.CylinderInclination.frame_a.f[2] - engine.cylinder2.CylinderInclination.r[2] * engine.cylinder2.CylinderInclination.frame_a.f[1]};
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder2.CrankAngle.frame_b.r_0 = engine.cylinder2.CrankAngle.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.CrankAngle.frame_a.R,{engine.cylinder2.CrankAngle.r[1],engine.cylinder2.CrankAngle.r[2],engine.cylinder2.CrankAngle.r[3]});
//   engine.cylinder2.CrankAngle.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder2.CrankAngle.frame_a.R,engine.cylinder2.CrankAngle.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder2.CrankAngle.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.CrankAngle.R_rel,{engine.cylinder2.CrankAngle.frame_b.f[1],engine.cylinder2.CrankAngle.frame_b.f[2],engine.cylinder2.CrankAngle.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder2.CrankAngle.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.CrankAngle.R_rel,{engine.cylinder2.CrankAngle.frame_b.t[1],engine.cylinder2.CrankAngle.frame_b.t[2],engine.cylinder2.CrankAngle.frame_b.t[3]}) - {engine.cylinder2.CrankAngle.r[2] * engine.cylinder2.CrankAngle.frame_a.f[3] - engine.cylinder2.CrankAngle.r[3] * engine.cylinder2.CrankAngle.frame_a.f[2],engine.cylinder2.CrankAngle.r[3] * engine.cylinder2.CrankAngle.frame_a.f[1] - engine.cylinder2.CrankAngle.r[1] * engine.cylinder2.CrankAngle.frame_a.f[3],engine.cylinder2.CrankAngle.r[1] * engine.cylinder2.CrankAngle.frame_a.f[2] - engine.cylinder2.CrankAngle.r[2] * engine.cylinder2.CrankAngle.frame_a.f[1]};
//   engine.cylinder2.jointRRP.jointUSP.prismatic.axis.f = engine.cylinder2.jointRRP.jointUSP.prismatic.f;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.axis.s = engine.cylinder2.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.bearing.s = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.distance = engine.cylinder2.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder2.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.distance * engine.cylinder2.jointRRP.jointUSP.prismatic.e[1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.distance * engine.cylinder2.jointRRP.jointUSP.prismatic.e[2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.distance * engine.cylinder2.jointRRP.jointUSP.prismatic.e[3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R,{engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[1],engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[2],engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[3]});
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[1] + engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[1];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[2] + engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[2];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[3] + engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[3];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[1] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[3] + (-engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[2])));
//   0.0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[2] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[1] + (-engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[3])));
//   0.0 = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[3] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[2] + (-engine.cylinder2.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[1])));
//   engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[1] - engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[2] - engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.r_b[3] - engine.cylinder2.jointRRP.jointUSP.prismatic.r_a[3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.B = 2.0 * (engine.cylinder2.jointRRP.jointUSP.prismatic.e[1] * engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[1] + (engine.cylinder2.jointRRP.jointUSP.prismatic.e[2] * engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[2] + engine.cylinder2.jointRRP.jointUSP.prismatic.e[3] * engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[3]));
//   engine.cylinder2.jointRRP.jointUSP.prismatic.C = engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[1] ^ 2.0 + (engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[2] ^ 2.0 + engine.cylinder2.jointRRP.jointUSP.prismatic.rbra[3] ^ 2.0) - engine.cylinder2.jointRRP.jointUSP.prismatic.length ^ 2.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.k1 = engine.cylinder2.jointRRP.jointUSP.prismatic.B / 2.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.k1a = engine.cylinder2.jointRRP.jointUSP.prismatic.k1 ^ 2.0 - engine.cylinder2.jointRRP.jointUSP.prismatic.C;
//   assert(noEvent(engine.cylinder2.jointRRP.jointUSP.prismatic.k1a > 1e-10),"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   engine.cylinder2.jointRRP.jointUSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(engine.cylinder2.jointRRP.jointUSP.prismatic.k1a,1e-12);
//   engine.cylinder2.jointRRP.jointUSP.prismatic.k2 = sqrt(engine.cylinder2.jointRRP.jointUSP.prismatic.k1b);
//   engine.cylinder2.jointRRP.jointUSP.prismatic.distance = (if engine.cylinder2.jointRRP.jointUSP.prismatic.positiveBranch then engine.cylinder2.jointRRP.jointUSP.prismatic.k2 else -engine.cylinder2.jointRRP.jointUSP.prismatic.k2) - engine.cylinder2.jointRRP.jointUSP.prismatic.k1;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[1] - engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[2] - engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[3] - engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R,{engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[1],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[2],engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[3]});
//   engine.cylinder2.jointRRP.jointUSP.rod1.constraintResidue = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1] = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[1] / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2] = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[2] / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3] = engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[3] / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[1] = engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2];
//   engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[2] = engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3];
//   engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[3] = engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1];
//   engine.cylinder2.jointRRP.jointUSP.rod1.length2_n2_a = engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[1] ^ 2.0 + (engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[2] ^ 2.0 + engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[3] ^ 2.0);
//   assert(engine.cylinder2.jointRRP.jointUSP.rod1.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   engine.cylinder2.jointRRP.jointUSP.rod1.length_n2_a = sqrt(engine.cylinder2.jointRRP.jointUSP.rod1.length2_n2_a);
//   engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] = engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[1] / engine.cylinder2.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] = engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[2] / engine.cylinder2.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] = engine.cylinder2.jointRRP.jointUSP.rod1.n2_a[3] / engine.cylinder2.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1] = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] - engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2];
//   engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2] = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] - engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3];
//   engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3] = engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] - engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1];
//   engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R,{der(engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[1]),der(engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[2]),der(engine.cylinder2.jointRRP.jointUSP.rod1.rRod_0[3])}) - {engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[3] - engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[2],engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[1] - engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[3],engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[2] - engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[1]}) / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[1] = (engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1] * (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[3] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[2]) + (engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2] * (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[1] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[3]) + engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3] * (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[2] - engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[1]))) / engine.cylinder2.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[2] = (-engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1]) * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + ((-engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2]) * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + (-engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3]) * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[3] = engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3]},{engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1],engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2],engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3]},{engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1],engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2],engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3]}},{engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[1],engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[2],engine.cylinder2.jointRRP.jointUSP.rod1.w_rel_ia1[3]});
//   engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[1],engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[1],engine.cylinder2.jointRRP.jointUSP.rod1.e3_ia[1]},{engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[2],engine.cylinder2.jointRRP.jointUSP.rod1.e3_ia[2]},{engine.cylinder2.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder2.jointRRP.jointUSP.rod1.e2_ia[3],engine.cylinder2.jointRRP.jointUSP.rod1.e3_ia[3]}},{0.0,0.0,0.0});
//   engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia1,engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia2);
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia);
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[1],engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[2],engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[3]});
//   engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[1],engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[2],engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[3]});
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[1] = ((-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] * 1.0 / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1] / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[2] = ((-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] * 1.0 / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2] / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[3] = ((-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] * 1.0 / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder2.jointRRP.jointUSP.rod1.e3_a[3] / engine.cylinder2.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[1] = (-engine.cylinder2.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1] + engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[1];
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[2] = (-engine.cylinder2.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[2];
//   engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[3] = (-engine.cylinder2.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3] + engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[3];
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[1],engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[2],engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[3]},engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[3] = 0.0;
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[1] + engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a[1]);
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[2] + engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a[2]);
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[3] + engine.cylinder2.jointRRP.jointUSP.rod1.f_ia_a[3]);
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[3] + (-engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[2])));
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[1] + (-engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[3])));
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.t_ia_a[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[2] + (-engine.cylinder2.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a[1])));
//   engine.cylinder2.jointRRP.jointUSP.rod1.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R,{engine.cylinder2.jointRRP.jointUSP.rod2.r[1],engine.cylinder2.jointRRP.jointUSP.rod2.r[2],engine.cylinder2.jointRRP.jointUSP.rod2.r[3]});
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[1] + engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[1];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[2] + engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[2];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[3] + engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[3];
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[1] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder2.jointRRP.jointUSP.rod2.r[2] * engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[3] + (-engine.cylinder2.jointRRP.jointUSP.rod2.r[3] * engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[2])));
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[2] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder2.jointRRP.jointUSP.rod2.r[3] * engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[1] + (-engine.cylinder2.jointRRP.jointUSP.rod2.r[1] * engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[3])));
//   0.0 = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[3] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder2.jointRRP.jointUSP.rod2.r[1] * engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[2] + (-engine.cylinder2.jointRRP.jointUSP.rod2.r[2] * engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[1])));
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R,{engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1] - engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1],engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2] - engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2],engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3] - engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   assert(true,"Connector frame_resolve must be connected exactly once");
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   engine.cylinder2.jointRRP.jointUSP.position_b[1].y = engine.cylinder2.jointRRP.jointUSP.position_b[1].k;
//   engine.cylinder2.jointRRP.jointUSP.position_b[2].y = engine.cylinder2.jointRRP.jointUSP.position_b[2].k;
//   engine.cylinder2.jointRRP.jointUSP.position_b[3].y = engine.cylinder2.jointRRP.jointUSP.position_b[3].k;
//   engine.cylinder2.jointRRP.jointUSP.aux = {engine.cylinder2.jointRRP.jointUSP.prismatic.e[1],engine.cylinder2.jointRRP.jointUSP.prismatic.e[2],engine.cylinder2.jointRRP.jointUSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder2.jointRRP.jointUSP.rod1.eRod_a[3]},engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder2.jointRRP.jointUSP.f_rod = ((-engine.cylinder2.jointRRP.jointUSP.prismatic.f) - {engine.cylinder2.jointRRP.jointUSP.prismatic.e[1],engine.cylinder2.jointRRP.jointUSP.prismatic.e[2],engine.cylinder2.jointRRP.jointUSP.prismatic.e[3]} * ({engine.cylinder2.jointRRP.jointUSP.frame_ib.f[1] + engine.cylinder2.jointRRP.jointUSP.frame_im.f[1],engine.cylinder2.jointRRP.jointUSP.frame_ib.f[2] + engine.cylinder2.jointRRP.jointUSP.frame_im.f[2],engine.cylinder2.jointRRP.jointUSP.frame_ib.f[3] + engine.cylinder2.jointRRP.jointUSP.frame_im.f[3]} - Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[1],engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[2],engine.cylinder2.jointRRP.jointUSP.rod1.f_b_a1[3]},engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R))) / (if noEvent(abs(engine.cylinder2.jointRRP.jointUSP.aux) < 1e-10) then 1e-10 else engine.cylinder2.jointRRP.jointUSP.aux);
//   engine.cylinder2.jointRRP.jointUSP.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder2.Rod.frameTranslation.frame_b.r_0 = engine.cylinder2.Rod.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Rod.frameTranslation.frame_a.R,{engine.cylinder2.Rod.frameTranslation.r[1],engine.cylinder2.Rod.frameTranslation.r[2],engine.cylinder2.Rod.frameTranslation.r[3]});
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder2.Rod.frameTranslation.frame_a.f[1] + engine.cylinder2.Rod.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder2.Rod.frameTranslation.frame_a.f[2] + engine.cylinder2.Rod.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder2.Rod.frameTranslation.frame_a.f[3] + engine.cylinder2.Rod.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder2.Rod.frameTranslation.frame_a.t[1] + (engine.cylinder2.Rod.frameTranslation.frame_b.t[1] + (engine.cylinder2.Rod.frameTranslation.r[2] * engine.cylinder2.Rod.frameTranslation.frame_b.f[3] + (-engine.cylinder2.Rod.frameTranslation.r[3] * engine.cylinder2.Rod.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder2.Rod.frameTranslation.frame_a.t[2] + (engine.cylinder2.Rod.frameTranslation.frame_b.t[2] + (engine.cylinder2.Rod.frameTranslation.r[3] * engine.cylinder2.Rod.frameTranslation.frame_b.f[1] + (-engine.cylinder2.Rod.frameTranslation.r[1] * engine.cylinder2.Rod.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder2.Rod.frameTranslation.frame_a.t[3] + (engine.cylinder2.Rod.frameTranslation.frame_b.t[3] + (engine.cylinder2.Rod.frameTranslation.r[1] * engine.cylinder2.Rod.frameTranslation.frame_b.f[2] + (-engine.cylinder2.Rod.frameTranslation.r[2] * engine.cylinder2.Rod.frameTranslation.frame_b.f[1])));
//   engine.cylinder2.Rod.body.r_0[1] = engine.cylinder2.Rod.body.frame_a.r_0[1];
//   engine.cylinder2.Rod.body.r_0[2] = engine.cylinder2.Rod.body.frame_a.r_0[2];
//   engine.cylinder2.Rod.body.r_0[3] = engine.cylinder2.Rod.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder2.Rod.body.Q[1] = 0.0;
//   engine.cylinder2.Rod.body.Q[2] = 0.0;
//   engine.cylinder2.Rod.body.Q[3] = 0.0;
//   engine.cylinder2.Rod.body.Q[4] = 1.0;
//   engine.cylinder2.Rod.body.phi[1] = 0.0;
//   engine.cylinder2.Rod.body.phi[2] = 0.0;
//   engine.cylinder2.Rod.body.phi[3] = 0.0;
//   engine.cylinder2.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder2.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder2.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder2.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder2.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder2.Rod.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder2.Rod.body.useQuaternions then
//   engine.cylinder2.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder2.Rod.body.Q[1],engine.cylinder2.Rod.body.Q[2],engine.cylinder2.Rod.body.Q[3],engine.cylinder2.Rod.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder2.Rod.body.Q[1],engine.cylinder2.Rod.body.Q[2],engine.cylinder2.Rod.body.Q[3],engine.cylinder2.Rod.body.Q[4]},{der(engine.cylinder2.Rod.body.Q[1]),der(engine.cylinder2.Rod.body.Q[2]),der(engine.cylinder2.Rod.body.Q[3]),der(engine.cylinder2.Rod.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder2.Rod.body.Q[1],engine.cylinder2.Rod.body.Q[2],engine.cylinder2.Rod.body.Q[3],engine.cylinder2.Rod.body.Q[4]});
//   engine.cylinder2.Rod.body.phi[1] = 0.0;
//   engine.cylinder2.Rod.body.phi[2] = 0.0;
//   engine.cylinder2.Rod.body.phi[3] = 0.0;
//   engine.cylinder2.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder2.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder2.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder2.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder2.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder2.Rod.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder2.Rod.body.phi_d[1] = der(engine.cylinder2.Rod.body.phi[1]);
//   engine.cylinder2.Rod.body.phi_d[2] = der(engine.cylinder2.Rod.body.phi[2]);
//   engine.cylinder2.Rod.body.phi_d[3] = der(engine.cylinder2.Rod.body.phi[3]);
//   engine.cylinder2.Rod.body.phi_dd[1] = der(engine.cylinder2.Rod.body.phi_d[1]);
//   engine.cylinder2.Rod.body.phi_dd[2] = der(engine.cylinder2.Rod.body.phi_d[2]);
//   engine.cylinder2.Rod.body.phi_dd[3] = der(engine.cylinder2.Rod.body.phi_d[3]);
//   engine.cylinder2.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder2.Rod.body.sequence_angleStates[1],engine.cylinder2.Rod.body.sequence_angleStates[2],engine.cylinder2.Rod.body.sequence_angleStates[3]},{engine.cylinder2.Rod.body.phi[1],engine.cylinder2.Rod.body.phi[2],engine.cylinder2.Rod.body.phi[3]},{engine.cylinder2.Rod.body.phi_d[1],engine.cylinder2.Rod.body.phi_d[2],engine.cylinder2.Rod.body.phi_d[3]});
//   engine.cylinder2.Rod.body.Q[1] = 0.0;
//   engine.cylinder2.Rod.body.Q[2] = 0.0;
//   engine.cylinder2.Rod.body.Q[3] = 0.0;
//   engine.cylinder2.Rod.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder2.Rod.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder2.Rod.body.frame_a.r_0[1],engine.cylinder2.Rod.body.frame_a.r_0[2],engine.cylinder2.Rod.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Rod.body.frame_a.R,{engine.cylinder2.Rod.body.r_CM[1],engine.cylinder2.Rod.body.r_CM[2],engine.cylinder2.Rod.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder2.Rod.body.v_0[1] = der(engine.cylinder2.Rod.body.frame_a.r_0[1]);
//   engine.cylinder2.Rod.body.v_0[2] = der(engine.cylinder2.Rod.body.frame_a.r_0[2]);
//   engine.cylinder2.Rod.body.v_0[3] = der(engine.cylinder2.Rod.body.frame_a.r_0[3]);
//   engine.cylinder2.Rod.body.a_0[1] = der(engine.cylinder2.Rod.body.v_0[1]);
//   engine.cylinder2.Rod.body.a_0[2] = der(engine.cylinder2.Rod.body.v_0[2]);
//   engine.cylinder2.Rod.body.a_0[3] = der(engine.cylinder2.Rod.body.v_0[3]);
//   engine.cylinder2.Rod.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder2.Rod.body.frame_a.R);
//   engine.cylinder2.Rod.body.z_a[1] = der(engine.cylinder2.Rod.body.w_a[1]);
//   engine.cylinder2.Rod.body.z_a[2] = der(engine.cylinder2.Rod.body.w_a[2]);
//   engine.cylinder2.Rod.body.z_a[3] = der(engine.cylinder2.Rod.body.w_a[3]);
//   engine.cylinder2.Rod.body.frame_a.f = engine.cylinder2.Rod.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Rod.body.frame_a.R,{engine.cylinder2.Rod.body.a_0[1] - engine.cylinder2.Rod.body.g_0[1],engine.cylinder2.Rod.body.a_0[2] - engine.cylinder2.Rod.body.g_0[2],engine.cylinder2.Rod.body.a_0[3] - engine.cylinder2.Rod.body.g_0[3]}) + {engine.cylinder2.Rod.body.z_a[2] * engine.cylinder2.Rod.body.r_CM[3] - engine.cylinder2.Rod.body.z_a[3] * engine.cylinder2.Rod.body.r_CM[2],engine.cylinder2.Rod.body.z_a[3] * engine.cylinder2.Rod.body.r_CM[1] - engine.cylinder2.Rod.body.z_a[1] * engine.cylinder2.Rod.body.r_CM[3],engine.cylinder2.Rod.body.z_a[1] * engine.cylinder2.Rod.body.r_CM[2] - engine.cylinder2.Rod.body.z_a[2] * engine.cylinder2.Rod.body.r_CM[1]} + {engine.cylinder2.Rod.body.w_a[2] * (engine.cylinder2.Rod.body.w_a[1] * engine.cylinder2.Rod.body.r_CM[2] - engine.cylinder2.Rod.body.w_a[2] * engine.cylinder2.Rod.body.r_CM[1]) - engine.cylinder2.Rod.body.w_a[3] * (engine.cylinder2.Rod.body.w_a[3] * engine.cylinder2.Rod.body.r_CM[1] - engine.cylinder2.Rod.body.w_a[1] * engine.cylinder2.Rod.body.r_CM[3]),engine.cylinder2.Rod.body.w_a[3] * (engine.cylinder2.Rod.body.w_a[2] * engine.cylinder2.Rod.body.r_CM[3] - engine.cylinder2.Rod.body.w_a[3] * engine.cylinder2.Rod.body.r_CM[2]) - engine.cylinder2.Rod.body.w_a[1] * (engine.cylinder2.Rod.body.w_a[1] * engine.cylinder2.Rod.body.r_CM[2] - engine.cylinder2.Rod.body.w_a[2] * engine.cylinder2.Rod.body.r_CM[1]),engine.cylinder2.Rod.body.w_a[1] * (engine.cylinder2.Rod.body.w_a[3] * engine.cylinder2.Rod.body.r_CM[1] - engine.cylinder2.Rod.body.w_a[1] * engine.cylinder2.Rod.body.r_CM[3]) - engine.cylinder2.Rod.body.w_a[2] * (engine.cylinder2.Rod.body.w_a[2] * engine.cylinder2.Rod.body.r_CM[3] - engine.cylinder2.Rod.body.w_a[3] * engine.cylinder2.Rod.body.r_CM[2])});
//   engine.cylinder2.Rod.body.frame_a.t[1] = engine.cylinder2.Rod.body.I[1,1] * engine.cylinder2.Rod.body.z_a[1] + (engine.cylinder2.Rod.body.I[1,2] * engine.cylinder2.Rod.body.z_a[2] + (engine.cylinder2.Rod.body.I[1,3] * engine.cylinder2.Rod.body.z_a[3] + (engine.cylinder2.Rod.body.w_a[2] * (engine.cylinder2.Rod.body.I[3,1] * engine.cylinder2.Rod.body.w_a[1] + (engine.cylinder2.Rod.body.I[3,2] * engine.cylinder2.Rod.body.w_a[2] + engine.cylinder2.Rod.body.I[3,3] * engine.cylinder2.Rod.body.w_a[3])) + ((-engine.cylinder2.Rod.body.w_a[3] * (engine.cylinder2.Rod.body.I[2,1] * engine.cylinder2.Rod.body.w_a[1] + (engine.cylinder2.Rod.body.I[2,2] * engine.cylinder2.Rod.body.w_a[2] + engine.cylinder2.Rod.body.I[2,3] * engine.cylinder2.Rod.body.w_a[3]))) + (engine.cylinder2.Rod.body.r_CM[2] * engine.cylinder2.Rod.body.frame_a.f[3] + (-engine.cylinder2.Rod.body.r_CM[3] * engine.cylinder2.Rod.body.frame_a.f[2]))))));
//   engine.cylinder2.Rod.body.frame_a.t[2] = engine.cylinder2.Rod.body.I[2,1] * engine.cylinder2.Rod.body.z_a[1] + (engine.cylinder2.Rod.body.I[2,2] * engine.cylinder2.Rod.body.z_a[2] + (engine.cylinder2.Rod.body.I[2,3] * engine.cylinder2.Rod.body.z_a[3] + (engine.cylinder2.Rod.body.w_a[3] * (engine.cylinder2.Rod.body.I[1,1] * engine.cylinder2.Rod.body.w_a[1] + (engine.cylinder2.Rod.body.I[1,2] * engine.cylinder2.Rod.body.w_a[2] + engine.cylinder2.Rod.body.I[1,3] * engine.cylinder2.Rod.body.w_a[3])) + ((-engine.cylinder2.Rod.body.w_a[1] * (engine.cylinder2.Rod.body.I[3,1] * engine.cylinder2.Rod.body.w_a[1] + (engine.cylinder2.Rod.body.I[3,2] * engine.cylinder2.Rod.body.w_a[2] + engine.cylinder2.Rod.body.I[3,3] * engine.cylinder2.Rod.body.w_a[3]))) + (engine.cylinder2.Rod.body.r_CM[3] * engine.cylinder2.Rod.body.frame_a.f[1] + (-engine.cylinder2.Rod.body.r_CM[1] * engine.cylinder2.Rod.body.frame_a.f[3]))))));
//   engine.cylinder2.Rod.body.frame_a.t[3] = engine.cylinder2.Rod.body.I[3,1] * engine.cylinder2.Rod.body.z_a[1] + (engine.cylinder2.Rod.body.I[3,2] * engine.cylinder2.Rod.body.z_a[2] + (engine.cylinder2.Rod.body.I[3,3] * engine.cylinder2.Rod.body.z_a[3] + (engine.cylinder2.Rod.body.w_a[1] * (engine.cylinder2.Rod.body.I[2,1] * engine.cylinder2.Rod.body.w_a[1] + (engine.cylinder2.Rod.body.I[2,2] * engine.cylinder2.Rod.body.w_a[2] + engine.cylinder2.Rod.body.I[2,3] * engine.cylinder2.Rod.body.w_a[3])) + ((-engine.cylinder2.Rod.body.w_a[2] * (engine.cylinder2.Rod.body.I[1,1] * engine.cylinder2.Rod.body.w_a[1] + (engine.cylinder2.Rod.body.I[1,2] * engine.cylinder2.Rod.body.w_a[2] + engine.cylinder2.Rod.body.I[1,3] * engine.cylinder2.Rod.body.w_a[3]))) + (engine.cylinder2.Rod.body.r_CM[1] * engine.cylinder2.Rod.body.frame_a.f[2] + (-engine.cylinder2.Rod.body.r_CM[2] * engine.cylinder2.Rod.body.frame_a.f[1]))))));
//   engine.cylinder2.Rod.shape1.R.T[1,1] = engine.cylinder2.Rod.frame_a.R.T[1,1];
//   engine.cylinder2.Rod.shape1.R.T[1,2] = engine.cylinder2.Rod.frame_a.R.T[1,2];
//   engine.cylinder2.Rod.shape1.R.T[1,3] = engine.cylinder2.Rod.frame_a.R.T[1,3];
//   engine.cylinder2.Rod.shape1.R.T[2,1] = engine.cylinder2.Rod.frame_a.R.T[2,1];
//   engine.cylinder2.Rod.shape1.R.T[2,2] = engine.cylinder2.Rod.frame_a.R.T[2,2];
//   engine.cylinder2.Rod.shape1.R.T[2,3] = engine.cylinder2.Rod.frame_a.R.T[2,3];
//   engine.cylinder2.Rod.shape1.R.T[3,1] = engine.cylinder2.Rod.frame_a.R.T[3,1];
//   engine.cylinder2.Rod.shape1.R.T[3,2] = engine.cylinder2.Rod.frame_a.R.T[3,2];
//   engine.cylinder2.Rod.shape1.R.T[3,3] = engine.cylinder2.Rod.frame_a.R.T[3,3];
//   engine.cylinder2.Rod.shape1.R.w[1] = engine.cylinder2.Rod.frame_a.R.w[1];
//   engine.cylinder2.Rod.shape1.R.w[2] = engine.cylinder2.Rod.frame_a.R.w[2];
//   engine.cylinder2.Rod.shape1.R.w[3] = engine.cylinder2.Rod.frame_a.R.w[3];
//   engine.cylinder2.Rod.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder2.Rod.shape1.shapeType);
//   engine.cylinder2.Rod.shape1.rxvisobj[1] = engine.cylinder2.Rod.shape1.R.T[1,1] * engine.cylinder2.Rod.shape1.e_x[1] + (engine.cylinder2.Rod.shape1.R.T[2,1] * engine.cylinder2.Rod.shape1.e_x[2] + engine.cylinder2.Rod.shape1.R.T[3,1] * engine.cylinder2.Rod.shape1.e_x[3]);
//   engine.cylinder2.Rod.shape1.rxvisobj[2] = engine.cylinder2.Rod.shape1.R.T[1,2] * engine.cylinder2.Rod.shape1.e_x[1] + (engine.cylinder2.Rod.shape1.R.T[2,2] * engine.cylinder2.Rod.shape1.e_x[2] + engine.cylinder2.Rod.shape1.R.T[3,2] * engine.cylinder2.Rod.shape1.e_x[3]);
//   engine.cylinder2.Rod.shape1.rxvisobj[3] = engine.cylinder2.Rod.shape1.R.T[1,3] * engine.cylinder2.Rod.shape1.e_x[1] + (engine.cylinder2.Rod.shape1.R.T[2,3] * engine.cylinder2.Rod.shape1.e_x[2] + engine.cylinder2.Rod.shape1.R.T[3,3] * engine.cylinder2.Rod.shape1.e_x[3]);
//   engine.cylinder2.Rod.shape1.ryvisobj[1] = engine.cylinder2.Rod.shape1.R.T[1,1] * engine.cylinder2.Rod.shape1.e_y[1] + (engine.cylinder2.Rod.shape1.R.T[2,1] * engine.cylinder2.Rod.shape1.e_y[2] + engine.cylinder2.Rod.shape1.R.T[3,1] * engine.cylinder2.Rod.shape1.e_y[3]);
//   engine.cylinder2.Rod.shape1.ryvisobj[2] = engine.cylinder2.Rod.shape1.R.T[1,2] * engine.cylinder2.Rod.shape1.e_y[1] + (engine.cylinder2.Rod.shape1.R.T[2,2] * engine.cylinder2.Rod.shape1.e_y[2] + engine.cylinder2.Rod.shape1.R.T[3,2] * engine.cylinder2.Rod.shape1.e_y[3]);
//   engine.cylinder2.Rod.shape1.ryvisobj[3] = engine.cylinder2.Rod.shape1.R.T[1,3] * engine.cylinder2.Rod.shape1.e_y[1] + (engine.cylinder2.Rod.shape1.R.T[2,3] * engine.cylinder2.Rod.shape1.e_y[2] + engine.cylinder2.Rod.shape1.R.T[3,3] * engine.cylinder2.Rod.shape1.e_y[3]);
//   engine.cylinder2.Rod.shape1.rvisobj = engine.cylinder2.Rod.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder2.Rod.shape1.R.T[1,1],engine.cylinder2.Rod.shape1.R.T[1,2],engine.cylinder2.Rod.shape1.R.T[1,3]},{engine.cylinder2.Rod.shape1.R.T[2,1],engine.cylinder2.Rod.shape1.R.T[2,2],engine.cylinder2.Rod.shape1.R.T[2,3]},{engine.cylinder2.Rod.shape1.R.T[3,1],engine.cylinder2.Rod.shape1.R.T[3,2],engine.cylinder2.Rod.shape1.R.T[3,3]}},{engine.cylinder2.Rod.shape1.r_shape[1],engine.cylinder2.Rod.shape1.r_shape[2],engine.cylinder2.Rod.shape1.r_shape[3]});
//   engine.cylinder2.Rod.shape1.size[1] = engine.cylinder2.Rod.shape1.length;
//   engine.cylinder2.Rod.shape1.size[2] = engine.cylinder2.Rod.shape1.width;
//   engine.cylinder2.Rod.shape1.size[3] = engine.cylinder2.Rod.shape1.height;
//   engine.cylinder2.Rod.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder2.Rod.shape1.color[1] / 255.0,engine.cylinder2.Rod.shape1.color[2] / 255.0,engine.cylinder2.Rod.shape1.color[3] / 255.0,engine.cylinder2.Rod.shape1.specularCoefficient);
//   engine.cylinder2.Rod.shape1.Extra = engine.cylinder2.Rod.shape1.extra;
//   engine.cylinder2.Rod.r_0[1] = engine.cylinder2.Rod.frame_a.r_0[1];
//   engine.cylinder2.Rod.r_0[2] = engine.cylinder2.Rod.frame_a.r_0[2];
//   engine.cylinder2.Rod.r_0[3] = engine.cylinder2.Rod.frame_a.r_0[3];
//   engine.cylinder2.Rod.v_0[1] = der(engine.cylinder2.Rod.r_0[1]);
//   engine.cylinder2.Rod.v_0[2] = der(engine.cylinder2.Rod.r_0[2]);
//   engine.cylinder2.Rod.v_0[3] = der(engine.cylinder2.Rod.r_0[3]);
//   engine.cylinder2.Rod.a_0[1] = der(engine.cylinder2.Rod.v_0[1]);
//   engine.cylinder2.Rod.a_0[2] = der(engine.cylinder2.Rod.v_0[2]);
//   engine.cylinder2.Rod.a_0[3] = der(engine.cylinder2.Rod.v_0[3]);
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0 = engine.cylinder2.Piston.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Piston.frameTranslation.frame_a.R,{engine.cylinder2.Piston.frameTranslation.r[1],engine.cylinder2.Piston.frameTranslation.r[2],engine.cylinder2.Piston.frameTranslation.r[3]});
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder2.Piston.frameTranslation.frame_a.f[1] + engine.cylinder2.Piston.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder2.Piston.frameTranslation.frame_a.f[2] + engine.cylinder2.Piston.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder2.Piston.frameTranslation.frame_a.f[3] + engine.cylinder2.Piston.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder2.Piston.frameTranslation.frame_a.t[1] + (engine.cylinder2.Piston.frameTranslation.frame_b.t[1] + (engine.cylinder2.Piston.frameTranslation.r[2] * engine.cylinder2.Piston.frameTranslation.frame_b.f[3] + (-engine.cylinder2.Piston.frameTranslation.r[3] * engine.cylinder2.Piston.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder2.Piston.frameTranslation.frame_a.t[2] + (engine.cylinder2.Piston.frameTranslation.frame_b.t[2] + (engine.cylinder2.Piston.frameTranslation.r[3] * engine.cylinder2.Piston.frameTranslation.frame_b.f[1] + (-engine.cylinder2.Piston.frameTranslation.r[1] * engine.cylinder2.Piston.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder2.Piston.frameTranslation.frame_a.t[3] + (engine.cylinder2.Piston.frameTranslation.frame_b.t[3] + (engine.cylinder2.Piston.frameTranslation.r[1] * engine.cylinder2.Piston.frameTranslation.frame_b.f[2] + (-engine.cylinder2.Piston.frameTranslation.r[2] * engine.cylinder2.Piston.frameTranslation.frame_b.f[1])));
//   engine.cylinder2.Piston.body.r_0[1] = engine.cylinder2.Piston.body.frame_a.r_0[1];
//   engine.cylinder2.Piston.body.r_0[2] = engine.cylinder2.Piston.body.frame_a.r_0[2];
//   engine.cylinder2.Piston.body.r_0[3] = engine.cylinder2.Piston.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder2.Piston.body.Q[1] = 0.0;
//   engine.cylinder2.Piston.body.Q[2] = 0.0;
//   engine.cylinder2.Piston.body.Q[3] = 0.0;
//   engine.cylinder2.Piston.body.Q[4] = 1.0;
//   engine.cylinder2.Piston.body.phi[1] = 0.0;
//   engine.cylinder2.Piston.body.phi[2] = 0.0;
//   engine.cylinder2.Piston.body.phi[3] = 0.0;
//   engine.cylinder2.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder2.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder2.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder2.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder2.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder2.Piston.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder2.Piston.body.useQuaternions then
//   engine.cylinder2.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder2.Piston.body.Q[1],engine.cylinder2.Piston.body.Q[2],engine.cylinder2.Piston.body.Q[3],engine.cylinder2.Piston.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder2.Piston.body.Q[1],engine.cylinder2.Piston.body.Q[2],engine.cylinder2.Piston.body.Q[3],engine.cylinder2.Piston.body.Q[4]},{der(engine.cylinder2.Piston.body.Q[1]),der(engine.cylinder2.Piston.body.Q[2]),der(engine.cylinder2.Piston.body.Q[3]),der(engine.cylinder2.Piston.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder2.Piston.body.Q[1],engine.cylinder2.Piston.body.Q[2],engine.cylinder2.Piston.body.Q[3],engine.cylinder2.Piston.body.Q[4]});
//   engine.cylinder2.Piston.body.phi[1] = 0.0;
//   engine.cylinder2.Piston.body.phi[2] = 0.0;
//   engine.cylinder2.Piston.body.phi[3] = 0.0;
//   engine.cylinder2.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder2.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder2.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder2.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder2.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder2.Piston.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder2.Piston.body.phi_d[1] = der(engine.cylinder2.Piston.body.phi[1]);
//   engine.cylinder2.Piston.body.phi_d[2] = der(engine.cylinder2.Piston.body.phi[2]);
//   engine.cylinder2.Piston.body.phi_d[3] = der(engine.cylinder2.Piston.body.phi[3]);
//   engine.cylinder2.Piston.body.phi_dd[1] = der(engine.cylinder2.Piston.body.phi_d[1]);
//   engine.cylinder2.Piston.body.phi_dd[2] = der(engine.cylinder2.Piston.body.phi_d[2]);
//   engine.cylinder2.Piston.body.phi_dd[3] = der(engine.cylinder2.Piston.body.phi_d[3]);
//   engine.cylinder2.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder2.Piston.body.sequence_angleStates[1],engine.cylinder2.Piston.body.sequence_angleStates[2],engine.cylinder2.Piston.body.sequence_angleStates[3]},{engine.cylinder2.Piston.body.phi[1],engine.cylinder2.Piston.body.phi[2],engine.cylinder2.Piston.body.phi[3]},{engine.cylinder2.Piston.body.phi_d[1],engine.cylinder2.Piston.body.phi_d[2],engine.cylinder2.Piston.body.phi_d[3]});
//   engine.cylinder2.Piston.body.Q[1] = 0.0;
//   engine.cylinder2.Piston.body.Q[2] = 0.0;
//   engine.cylinder2.Piston.body.Q[3] = 0.0;
//   engine.cylinder2.Piston.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder2.Piston.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder2.Piston.body.frame_a.r_0[1],engine.cylinder2.Piston.body.frame_a.r_0[2],engine.cylinder2.Piston.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Piston.body.frame_a.R,{engine.cylinder2.Piston.body.r_CM[1],engine.cylinder2.Piston.body.r_CM[2],engine.cylinder2.Piston.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder2.Piston.body.v_0[1] = der(engine.cylinder2.Piston.body.frame_a.r_0[1]);
//   engine.cylinder2.Piston.body.v_0[2] = der(engine.cylinder2.Piston.body.frame_a.r_0[2]);
//   engine.cylinder2.Piston.body.v_0[3] = der(engine.cylinder2.Piston.body.frame_a.r_0[3]);
//   engine.cylinder2.Piston.body.a_0[1] = der(engine.cylinder2.Piston.body.v_0[1]);
//   engine.cylinder2.Piston.body.a_0[2] = der(engine.cylinder2.Piston.body.v_0[2]);
//   engine.cylinder2.Piston.body.a_0[3] = der(engine.cylinder2.Piston.body.v_0[3]);
//   engine.cylinder2.Piston.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder2.Piston.body.frame_a.R);
//   engine.cylinder2.Piston.body.z_a[1] = der(engine.cylinder2.Piston.body.w_a[1]);
//   engine.cylinder2.Piston.body.z_a[2] = der(engine.cylinder2.Piston.body.w_a[2]);
//   engine.cylinder2.Piston.body.z_a[3] = der(engine.cylinder2.Piston.body.w_a[3]);
//   engine.cylinder2.Piston.body.frame_a.f = engine.cylinder2.Piston.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder2.Piston.body.frame_a.R,{engine.cylinder2.Piston.body.a_0[1] - engine.cylinder2.Piston.body.g_0[1],engine.cylinder2.Piston.body.a_0[2] - engine.cylinder2.Piston.body.g_0[2],engine.cylinder2.Piston.body.a_0[3] - engine.cylinder2.Piston.body.g_0[3]}) + {engine.cylinder2.Piston.body.z_a[2] * engine.cylinder2.Piston.body.r_CM[3] - engine.cylinder2.Piston.body.z_a[3] * engine.cylinder2.Piston.body.r_CM[2],engine.cylinder2.Piston.body.z_a[3] * engine.cylinder2.Piston.body.r_CM[1] - engine.cylinder2.Piston.body.z_a[1] * engine.cylinder2.Piston.body.r_CM[3],engine.cylinder2.Piston.body.z_a[1] * engine.cylinder2.Piston.body.r_CM[2] - engine.cylinder2.Piston.body.z_a[2] * engine.cylinder2.Piston.body.r_CM[1]} + {engine.cylinder2.Piston.body.w_a[2] * (engine.cylinder2.Piston.body.w_a[1] * engine.cylinder2.Piston.body.r_CM[2] - engine.cylinder2.Piston.body.w_a[2] * engine.cylinder2.Piston.body.r_CM[1]) - engine.cylinder2.Piston.body.w_a[3] * (engine.cylinder2.Piston.body.w_a[3] * engine.cylinder2.Piston.body.r_CM[1] - engine.cylinder2.Piston.body.w_a[1] * engine.cylinder2.Piston.body.r_CM[3]),engine.cylinder2.Piston.body.w_a[3] * (engine.cylinder2.Piston.body.w_a[2] * engine.cylinder2.Piston.body.r_CM[3] - engine.cylinder2.Piston.body.w_a[3] * engine.cylinder2.Piston.body.r_CM[2]) - engine.cylinder2.Piston.body.w_a[1] * (engine.cylinder2.Piston.body.w_a[1] * engine.cylinder2.Piston.body.r_CM[2] - engine.cylinder2.Piston.body.w_a[2] * engine.cylinder2.Piston.body.r_CM[1]),engine.cylinder2.Piston.body.w_a[1] * (engine.cylinder2.Piston.body.w_a[3] * engine.cylinder2.Piston.body.r_CM[1] - engine.cylinder2.Piston.body.w_a[1] * engine.cylinder2.Piston.body.r_CM[3]) - engine.cylinder2.Piston.body.w_a[2] * (engine.cylinder2.Piston.body.w_a[2] * engine.cylinder2.Piston.body.r_CM[3] - engine.cylinder2.Piston.body.w_a[3] * engine.cylinder2.Piston.body.r_CM[2])});
//   engine.cylinder2.Piston.body.frame_a.t[1] = engine.cylinder2.Piston.body.I[1,1] * engine.cylinder2.Piston.body.z_a[1] + (engine.cylinder2.Piston.body.I[1,2] * engine.cylinder2.Piston.body.z_a[2] + (engine.cylinder2.Piston.body.I[1,3] * engine.cylinder2.Piston.body.z_a[3] + (engine.cylinder2.Piston.body.w_a[2] * (engine.cylinder2.Piston.body.I[3,1] * engine.cylinder2.Piston.body.w_a[1] + (engine.cylinder2.Piston.body.I[3,2] * engine.cylinder2.Piston.body.w_a[2] + engine.cylinder2.Piston.body.I[3,3] * engine.cylinder2.Piston.body.w_a[3])) + ((-engine.cylinder2.Piston.body.w_a[3] * (engine.cylinder2.Piston.body.I[2,1] * engine.cylinder2.Piston.body.w_a[1] + (engine.cylinder2.Piston.body.I[2,2] * engine.cylinder2.Piston.body.w_a[2] + engine.cylinder2.Piston.body.I[2,3] * engine.cylinder2.Piston.body.w_a[3]))) + (engine.cylinder2.Piston.body.r_CM[2] * engine.cylinder2.Piston.body.frame_a.f[3] + (-engine.cylinder2.Piston.body.r_CM[3] * engine.cylinder2.Piston.body.frame_a.f[2]))))));
//   engine.cylinder2.Piston.body.frame_a.t[2] = engine.cylinder2.Piston.body.I[2,1] * engine.cylinder2.Piston.body.z_a[1] + (engine.cylinder2.Piston.body.I[2,2] * engine.cylinder2.Piston.body.z_a[2] + (engine.cylinder2.Piston.body.I[2,3] * engine.cylinder2.Piston.body.z_a[3] + (engine.cylinder2.Piston.body.w_a[3] * (engine.cylinder2.Piston.body.I[1,1] * engine.cylinder2.Piston.body.w_a[1] + (engine.cylinder2.Piston.body.I[1,2] * engine.cylinder2.Piston.body.w_a[2] + engine.cylinder2.Piston.body.I[1,3] * engine.cylinder2.Piston.body.w_a[3])) + ((-engine.cylinder2.Piston.body.w_a[1] * (engine.cylinder2.Piston.body.I[3,1] * engine.cylinder2.Piston.body.w_a[1] + (engine.cylinder2.Piston.body.I[3,2] * engine.cylinder2.Piston.body.w_a[2] + engine.cylinder2.Piston.body.I[3,3] * engine.cylinder2.Piston.body.w_a[3]))) + (engine.cylinder2.Piston.body.r_CM[3] * engine.cylinder2.Piston.body.frame_a.f[1] + (-engine.cylinder2.Piston.body.r_CM[1] * engine.cylinder2.Piston.body.frame_a.f[3]))))));
//   engine.cylinder2.Piston.body.frame_a.t[3] = engine.cylinder2.Piston.body.I[3,1] * engine.cylinder2.Piston.body.z_a[1] + (engine.cylinder2.Piston.body.I[3,2] * engine.cylinder2.Piston.body.z_a[2] + (engine.cylinder2.Piston.body.I[3,3] * engine.cylinder2.Piston.body.z_a[3] + (engine.cylinder2.Piston.body.w_a[1] * (engine.cylinder2.Piston.body.I[2,1] * engine.cylinder2.Piston.body.w_a[1] + (engine.cylinder2.Piston.body.I[2,2] * engine.cylinder2.Piston.body.w_a[2] + engine.cylinder2.Piston.body.I[2,3] * engine.cylinder2.Piston.body.w_a[3])) + ((-engine.cylinder2.Piston.body.w_a[2] * (engine.cylinder2.Piston.body.I[1,1] * engine.cylinder2.Piston.body.w_a[1] + (engine.cylinder2.Piston.body.I[1,2] * engine.cylinder2.Piston.body.w_a[2] + engine.cylinder2.Piston.body.I[1,3] * engine.cylinder2.Piston.body.w_a[3]))) + (engine.cylinder2.Piston.body.r_CM[1] * engine.cylinder2.Piston.body.frame_a.f[2] + (-engine.cylinder2.Piston.body.r_CM[2] * engine.cylinder2.Piston.body.frame_a.f[1]))))));
//   engine.cylinder2.Piston.shape1.R.T[1,1] = engine.cylinder2.Piston.frame_a.R.T[1,1];
//   engine.cylinder2.Piston.shape1.R.T[1,2] = engine.cylinder2.Piston.frame_a.R.T[1,2];
//   engine.cylinder2.Piston.shape1.R.T[1,3] = engine.cylinder2.Piston.frame_a.R.T[1,3];
//   engine.cylinder2.Piston.shape1.R.T[2,1] = engine.cylinder2.Piston.frame_a.R.T[2,1];
//   engine.cylinder2.Piston.shape1.R.T[2,2] = engine.cylinder2.Piston.frame_a.R.T[2,2];
//   engine.cylinder2.Piston.shape1.R.T[2,3] = engine.cylinder2.Piston.frame_a.R.T[2,3];
//   engine.cylinder2.Piston.shape1.R.T[3,1] = engine.cylinder2.Piston.frame_a.R.T[3,1];
//   engine.cylinder2.Piston.shape1.R.T[3,2] = engine.cylinder2.Piston.frame_a.R.T[3,2];
//   engine.cylinder2.Piston.shape1.R.T[3,3] = engine.cylinder2.Piston.frame_a.R.T[3,3];
//   engine.cylinder2.Piston.shape1.R.w[1] = engine.cylinder2.Piston.frame_a.R.w[1];
//   engine.cylinder2.Piston.shape1.R.w[2] = engine.cylinder2.Piston.frame_a.R.w[2];
//   engine.cylinder2.Piston.shape1.R.w[3] = engine.cylinder2.Piston.frame_a.R.w[3];
//   engine.cylinder2.Piston.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder2.Piston.shape1.shapeType);
//   engine.cylinder2.Piston.shape1.rxvisobj[1] = engine.cylinder2.Piston.shape1.R.T[1,1] * engine.cylinder2.Piston.shape1.e_x[1] + (engine.cylinder2.Piston.shape1.R.T[2,1] * engine.cylinder2.Piston.shape1.e_x[2] + engine.cylinder2.Piston.shape1.R.T[3,1] * engine.cylinder2.Piston.shape1.e_x[3]);
//   engine.cylinder2.Piston.shape1.rxvisobj[2] = engine.cylinder2.Piston.shape1.R.T[1,2] * engine.cylinder2.Piston.shape1.e_x[1] + (engine.cylinder2.Piston.shape1.R.T[2,2] * engine.cylinder2.Piston.shape1.e_x[2] + engine.cylinder2.Piston.shape1.R.T[3,2] * engine.cylinder2.Piston.shape1.e_x[3]);
//   engine.cylinder2.Piston.shape1.rxvisobj[3] = engine.cylinder2.Piston.shape1.R.T[1,3] * engine.cylinder2.Piston.shape1.e_x[1] + (engine.cylinder2.Piston.shape1.R.T[2,3] * engine.cylinder2.Piston.shape1.e_x[2] + engine.cylinder2.Piston.shape1.R.T[3,3] * engine.cylinder2.Piston.shape1.e_x[3]);
//   engine.cylinder2.Piston.shape1.ryvisobj[1] = engine.cylinder2.Piston.shape1.R.T[1,1] * engine.cylinder2.Piston.shape1.e_y[1] + (engine.cylinder2.Piston.shape1.R.T[2,1] * engine.cylinder2.Piston.shape1.e_y[2] + engine.cylinder2.Piston.shape1.R.T[3,1] * engine.cylinder2.Piston.shape1.e_y[3]);
//   engine.cylinder2.Piston.shape1.ryvisobj[2] = engine.cylinder2.Piston.shape1.R.T[1,2] * engine.cylinder2.Piston.shape1.e_y[1] + (engine.cylinder2.Piston.shape1.R.T[2,2] * engine.cylinder2.Piston.shape1.e_y[2] + engine.cylinder2.Piston.shape1.R.T[3,2] * engine.cylinder2.Piston.shape1.e_y[3]);
//   engine.cylinder2.Piston.shape1.ryvisobj[3] = engine.cylinder2.Piston.shape1.R.T[1,3] * engine.cylinder2.Piston.shape1.e_y[1] + (engine.cylinder2.Piston.shape1.R.T[2,3] * engine.cylinder2.Piston.shape1.e_y[2] + engine.cylinder2.Piston.shape1.R.T[3,3] * engine.cylinder2.Piston.shape1.e_y[3]);
//   engine.cylinder2.Piston.shape1.rvisobj = engine.cylinder2.Piston.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder2.Piston.shape1.R.T[1,1],engine.cylinder2.Piston.shape1.R.T[1,2],engine.cylinder2.Piston.shape1.R.T[1,3]},{engine.cylinder2.Piston.shape1.R.T[2,1],engine.cylinder2.Piston.shape1.R.T[2,2],engine.cylinder2.Piston.shape1.R.T[2,3]},{engine.cylinder2.Piston.shape1.R.T[3,1],engine.cylinder2.Piston.shape1.R.T[3,2],engine.cylinder2.Piston.shape1.R.T[3,3]}},{engine.cylinder2.Piston.shape1.r_shape[1],engine.cylinder2.Piston.shape1.r_shape[2],engine.cylinder2.Piston.shape1.r_shape[3]});
//   engine.cylinder2.Piston.shape1.size[1] = engine.cylinder2.Piston.shape1.length;
//   engine.cylinder2.Piston.shape1.size[2] = engine.cylinder2.Piston.shape1.width;
//   engine.cylinder2.Piston.shape1.size[3] = engine.cylinder2.Piston.shape1.height;
//   engine.cylinder2.Piston.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder2.Piston.shape1.color[1] / 255.0,engine.cylinder2.Piston.shape1.color[2] / 255.0,engine.cylinder2.Piston.shape1.color[3] / 255.0,engine.cylinder2.Piston.shape1.specularCoefficient);
//   engine.cylinder2.Piston.shape1.Extra = engine.cylinder2.Piston.shape1.extra;
//   engine.cylinder2.Piston.r_0[1] = engine.cylinder2.Piston.frame_a.r_0[1];
//   engine.cylinder2.Piston.r_0[2] = engine.cylinder2.Piston.frame_a.r_0[2];
//   engine.cylinder2.Piston.r_0[3] = engine.cylinder2.Piston.frame_a.r_0[3];
//   engine.cylinder2.Piston.v_0[1] = der(engine.cylinder2.Piston.r_0[1]);
//   engine.cylinder2.Piston.v_0[2] = der(engine.cylinder2.Piston.r_0[2]);
//   engine.cylinder2.Piston.v_0[3] = der(engine.cylinder2.Piston.r_0[3]);
//   engine.cylinder2.Piston.a_0[1] = der(engine.cylinder2.Piston.v_0[1]);
//   engine.cylinder2.Piston.a_0[2] = der(engine.cylinder2.Piston.v_0[2]);
//   engine.cylinder2.Piston.a_0[3] = der(engine.cylinder2.Piston.v_0[3]);
//   engine.cylinder2.gasForce.y = (-engine.cylinder2.gasForce.s_rel) / engine.cylinder2.gasForce.L;
//   engine.cylinder2.gasForce.x = 1.0 + engine.cylinder2.gasForce.s_rel / engine.cylinder2.gasForce.L;
//   engine.cylinder2.gasForce.v_rel = der(engine.cylinder2.gasForce.s_rel);
//   engine.cylinder2.gasForce.press = engine.cylinder2.gasForce.p / 100000.0;
//   engine.cylinder2.gasForce.p = 100000.0 * (if engine.cylinder2.gasForce.v_rel < 0.0 then if engine.cylinder2.gasForce.x < 0.987 then 2.4 + (177.4132 * engine.cylinder2.gasForce.x ^ 4.0 + (-287.2189 * engine.cylinder2.gasForce.x ^ 3.0 + (151.8252 * engine.cylinder2.gasForce.x ^ 2.0 + -24.9973 * engine.cylinder2.gasForce.x))) else 2129670.0 + (2836360.0 * engine.cylinder2.gasForce.x ^ 4.0 + (-10569296.0 * engine.cylinder2.gasForce.x ^ 3.0 + (14761814.0 * engine.cylinder2.gasForce.x ^ 2.0 + -9158505.0 * engine.cylinder2.gasForce.x))) else if engine.cylinder2.gasForce.x > 0.93 then -3929704.0 * engine.cylinder2.gasForce.x ^ 4.0 + (14748765.0 * engine.cylinder2.gasForce.x ^ 3.0 + (-20747000.0 * engine.cylinder2.gasForce.x ^ 2.0 + 12964477.0 * engine.cylinder2.gasForce.x)) - 3036495.0 else 2.4 + (145.93 * engine.cylinder2.gasForce.x ^ 4.0 + (-131.707 * engine.cylinder2.gasForce.x ^ 3.0 + (17.3438 * engine.cylinder2.gasForce.x ^ 2.0 + 17.9272 * engine.cylinder2.gasForce.x))));
//   engine.cylinder2.gasForce.f = -78539.8163397448 * (engine.cylinder2.gasForce.press * engine.cylinder2.gasForce.d ^ 2.0);
//   engine.cylinder2.gasForce.V = engine.cylinder2.gasForce.k0 + engine.cylinder2.gasForce.k1 * (1.0 - engine.cylinder2.gasForce.x);
//   engine.cylinder2.gasForce.dens = 1.0 / engine.cylinder2.gasForce.V;
//   engine.cylinder2.gasForce.p * engine.cylinder2.gasForce.V / 100000.0 = engine.cylinder2.gasForce.k * engine.cylinder2.gasForce.T;
//   engine.cylinder2.gasForce.s_rel = engine.cylinder2.gasForce.flange_b.s - engine.cylinder2.gasForce.flange_a.s;
//   engine.cylinder2.gasForce.flange_b.f = engine.cylinder2.gasForce.f;
//   engine.cylinder2.gasForce.flange_a.f = -engine.cylinder2.gasForce.f;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder2.Crank.frame_b.r_0 = engine.cylinder2.Crank.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder2.Crank.frame_a.R,{engine.cylinder2.Crank.r[1],engine.cylinder2.Crank.r[2],engine.cylinder2.Crank.r[3]});
//   engine.cylinder2.Crank.frame_b.R.T[1,1] = engine.cylinder2.Crank.frame_a.R.T[1,1];
//   engine.cylinder2.Crank.frame_b.R.T[1,2] = engine.cylinder2.Crank.frame_a.R.T[1,2];
//   engine.cylinder2.Crank.frame_b.R.T[1,3] = engine.cylinder2.Crank.frame_a.R.T[1,3];
//   engine.cylinder2.Crank.frame_b.R.T[2,1] = engine.cylinder2.Crank.frame_a.R.T[2,1];
//   engine.cylinder2.Crank.frame_b.R.T[2,2] = engine.cylinder2.Crank.frame_a.R.T[2,2];
//   engine.cylinder2.Crank.frame_b.R.T[2,3] = engine.cylinder2.Crank.frame_a.R.T[2,3];
//   engine.cylinder2.Crank.frame_b.R.T[3,1] = engine.cylinder2.Crank.frame_a.R.T[3,1];
//   engine.cylinder2.Crank.frame_b.R.T[3,2] = engine.cylinder2.Crank.frame_a.R.T[3,2];
//   engine.cylinder2.Crank.frame_b.R.T[3,3] = engine.cylinder2.Crank.frame_a.R.T[3,3];
//   engine.cylinder2.Crank.frame_b.R.w[1] = engine.cylinder2.Crank.frame_a.R.w[1];
//   engine.cylinder2.Crank.frame_b.R.w[2] = engine.cylinder2.Crank.frame_a.R.w[2];
//   engine.cylinder2.Crank.frame_b.R.w[3] = engine.cylinder2.Crank.frame_a.R.w[3];
//   0.0 = engine.cylinder2.Crank.frame_a.f[1] + engine.cylinder2.Crank.frame_b.f[1];
//   0.0 = engine.cylinder2.Crank.frame_a.f[2] + engine.cylinder2.Crank.frame_b.f[2];
//   0.0 = engine.cylinder2.Crank.frame_a.f[3] + engine.cylinder2.Crank.frame_b.f[3];
//   0.0 = engine.cylinder2.Crank.frame_a.t[1] + (engine.cylinder2.Crank.frame_b.t[1] + (engine.cylinder2.Crank.r[2] * engine.cylinder2.Crank.frame_b.f[3] + (-engine.cylinder2.Crank.r[3] * engine.cylinder2.Crank.frame_b.f[2])));
//   0.0 = engine.cylinder2.Crank.frame_a.t[2] + (engine.cylinder2.Crank.frame_b.t[2] + (engine.cylinder2.Crank.r[3] * engine.cylinder2.Crank.frame_b.f[1] + (-engine.cylinder2.Crank.r[1] * engine.cylinder2.Crank.frame_b.f[3])));
//   0.0 = engine.cylinder2.Crank.frame_a.t[3] + (engine.cylinder2.Crank.frame_b.t[3] + (engine.cylinder2.Crank.r[1] * engine.cylinder2.Crank.frame_b.f[2] + (-engine.cylinder2.Crank.r[2] * engine.cylinder2.Crank.frame_b.f[1])));
//   engine.cylinder2.CrankShape.vis.R.T[1,1] = engine.cylinder2.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder2.CrankShape.vis.R.T[1,2] = engine.cylinder2.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder2.CrankShape.vis.R.T[1,3] = engine.cylinder2.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder2.CrankShape.vis.R.T[2,1] = engine.cylinder2.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder2.CrankShape.vis.R.T[2,2] = engine.cylinder2.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder2.CrankShape.vis.R.T[2,3] = engine.cylinder2.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder2.CrankShape.vis.R.T[3,1] = engine.cylinder2.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder2.CrankShape.vis.R.T[3,2] = engine.cylinder2.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder2.CrankShape.vis.R.T[3,3] = engine.cylinder2.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder2.CrankShape.vis.R.w[1] = engine.cylinder2.CrankShape.frame_a.R.w[1];
//   engine.cylinder2.CrankShape.vis.R.w[2] = engine.cylinder2.CrankShape.frame_a.R.w[2];
//   engine.cylinder2.CrankShape.vis.R.w[3] = engine.cylinder2.CrankShape.frame_a.R.w[3];
//   engine.cylinder2.CrankShape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder2.CrankShape.vis.shapeType);
//   engine.cylinder2.CrankShape.vis.rxvisobj[1] = engine.cylinder2.CrankShape.vis.R.T[1,1] * engine.cylinder2.CrankShape.vis.e_x[1] + (engine.cylinder2.CrankShape.vis.R.T[2,1] * engine.cylinder2.CrankShape.vis.e_x[2] + engine.cylinder2.CrankShape.vis.R.T[3,1] * engine.cylinder2.CrankShape.vis.e_x[3]);
//   engine.cylinder2.CrankShape.vis.rxvisobj[2] = engine.cylinder2.CrankShape.vis.R.T[1,2] * engine.cylinder2.CrankShape.vis.e_x[1] + (engine.cylinder2.CrankShape.vis.R.T[2,2] * engine.cylinder2.CrankShape.vis.e_x[2] + engine.cylinder2.CrankShape.vis.R.T[3,2] * engine.cylinder2.CrankShape.vis.e_x[3]);
//   engine.cylinder2.CrankShape.vis.rxvisobj[3] = engine.cylinder2.CrankShape.vis.R.T[1,3] * engine.cylinder2.CrankShape.vis.e_x[1] + (engine.cylinder2.CrankShape.vis.R.T[2,3] * engine.cylinder2.CrankShape.vis.e_x[2] + engine.cylinder2.CrankShape.vis.R.T[3,3] * engine.cylinder2.CrankShape.vis.e_x[3]);
//   engine.cylinder2.CrankShape.vis.ryvisobj[1] = engine.cylinder2.CrankShape.vis.R.T[1,1] * engine.cylinder2.CrankShape.vis.e_y[1] + (engine.cylinder2.CrankShape.vis.R.T[2,1] * engine.cylinder2.CrankShape.vis.e_y[2] + engine.cylinder2.CrankShape.vis.R.T[3,1] * engine.cylinder2.CrankShape.vis.e_y[3]);
//   engine.cylinder2.CrankShape.vis.ryvisobj[2] = engine.cylinder2.CrankShape.vis.R.T[1,2] * engine.cylinder2.CrankShape.vis.e_y[1] + (engine.cylinder2.CrankShape.vis.R.T[2,2] * engine.cylinder2.CrankShape.vis.e_y[2] + engine.cylinder2.CrankShape.vis.R.T[3,2] * engine.cylinder2.CrankShape.vis.e_y[3]);
//   engine.cylinder2.CrankShape.vis.ryvisobj[3] = engine.cylinder2.CrankShape.vis.R.T[1,3] * engine.cylinder2.CrankShape.vis.e_y[1] + (engine.cylinder2.CrankShape.vis.R.T[2,3] * engine.cylinder2.CrankShape.vis.e_y[2] + engine.cylinder2.CrankShape.vis.R.T[3,3] * engine.cylinder2.CrankShape.vis.e_y[3]);
//   engine.cylinder2.CrankShape.vis.rvisobj = engine.cylinder2.CrankShape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder2.CrankShape.vis.R.T[1,1],engine.cylinder2.CrankShape.vis.R.T[1,2],engine.cylinder2.CrankShape.vis.R.T[1,3]},{engine.cylinder2.CrankShape.vis.R.T[2,1],engine.cylinder2.CrankShape.vis.R.T[2,2],engine.cylinder2.CrankShape.vis.R.T[2,3]},{engine.cylinder2.CrankShape.vis.R.T[3,1],engine.cylinder2.CrankShape.vis.R.T[3,2],engine.cylinder2.CrankShape.vis.R.T[3,3]}},{engine.cylinder2.CrankShape.vis.r_shape[1],engine.cylinder2.CrankShape.vis.r_shape[2],engine.cylinder2.CrankShape.vis.r_shape[3]});
//   engine.cylinder2.CrankShape.vis.size[1] = engine.cylinder2.CrankShape.vis.length;
//   engine.cylinder2.CrankShape.vis.size[2] = engine.cylinder2.CrankShape.vis.width;
//   engine.cylinder2.CrankShape.vis.size[3] = engine.cylinder2.CrankShape.vis.height;
//   engine.cylinder2.CrankShape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder2.CrankShape.vis.color[1] / 255.0,engine.cylinder2.CrankShape.vis.color[2] / 255.0,engine.cylinder2.CrankShape.vis.color[3] / 255.0,engine.cylinder2.CrankShape.vis.specularCoefficient);
//   engine.cylinder2.CrankShape.vis.Extra = engine.cylinder2.CrankShape.vis.extra;
//   engine.cylinder2.CrankShape.frame_a.f[1] = 0.0;
//   engine.cylinder2.CrankShape.frame_a.f[2] = 0.0;
//   engine.cylinder2.CrankShape.frame_a.f[3] = 0.0;
//   engine.cylinder2.CrankShape.frame_a.t[1] = 0.0;
//   engine.cylinder2.CrankShape.frame_a.t[2] = 0.0;
//   engine.cylinder2.CrankShape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder3.Mid.frame_b.r_0 = engine.cylinder3.Mid.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Mid.frame_a.R,{engine.cylinder3.Mid.r[1],engine.cylinder3.Mid.r[2],engine.cylinder3.Mid.r[3]});
//   engine.cylinder3.Mid.frame_b.R.T[1,1] = engine.cylinder3.Mid.frame_a.R.T[1,1];
//   engine.cylinder3.Mid.frame_b.R.T[1,2] = engine.cylinder3.Mid.frame_a.R.T[1,2];
//   engine.cylinder3.Mid.frame_b.R.T[1,3] = engine.cylinder3.Mid.frame_a.R.T[1,3];
//   engine.cylinder3.Mid.frame_b.R.T[2,1] = engine.cylinder3.Mid.frame_a.R.T[2,1];
//   engine.cylinder3.Mid.frame_b.R.T[2,2] = engine.cylinder3.Mid.frame_a.R.T[2,2];
//   engine.cylinder3.Mid.frame_b.R.T[2,3] = engine.cylinder3.Mid.frame_a.R.T[2,3];
//   engine.cylinder3.Mid.frame_b.R.T[3,1] = engine.cylinder3.Mid.frame_a.R.T[3,1];
//   engine.cylinder3.Mid.frame_b.R.T[3,2] = engine.cylinder3.Mid.frame_a.R.T[3,2];
//   engine.cylinder3.Mid.frame_b.R.T[3,3] = engine.cylinder3.Mid.frame_a.R.T[3,3];
//   engine.cylinder3.Mid.frame_b.R.w[1] = engine.cylinder3.Mid.frame_a.R.w[1];
//   engine.cylinder3.Mid.frame_b.R.w[2] = engine.cylinder3.Mid.frame_a.R.w[2];
//   engine.cylinder3.Mid.frame_b.R.w[3] = engine.cylinder3.Mid.frame_a.R.w[3];
//   0.0 = engine.cylinder3.Mid.frame_a.f[1] + engine.cylinder3.Mid.frame_b.f[1];
//   0.0 = engine.cylinder3.Mid.frame_a.f[2] + engine.cylinder3.Mid.frame_b.f[2];
//   0.0 = engine.cylinder3.Mid.frame_a.f[3] + engine.cylinder3.Mid.frame_b.f[3];
//   0.0 = engine.cylinder3.Mid.frame_a.t[1] + (engine.cylinder3.Mid.frame_b.t[1] + (engine.cylinder3.Mid.r[2] * engine.cylinder3.Mid.frame_b.f[3] + (-engine.cylinder3.Mid.r[3] * engine.cylinder3.Mid.frame_b.f[2])));
//   0.0 = engine.cylinder3.Mid.frame_a.t[2] + (engine.cylinder3.Mid.frame_b.t[2] + (engine.cylinder3.Mid.r[3] * engine.cylinder3.Mid.frame_b.f[1] + (-engine.cylinder3.Mid.r[1] * engine.cylinder3.Mid.frame_b.f[3])));
//   0.0 = engine.cylinder3.Mid.frame_a.t[3] + (engine.cylinder3.Mid.frame_b.t[3] + (engine.cylinder3.Mid.r[1] * engine.cylinder3.Mid.frame_b.f[2] + (-engine.cylinder3.Mid.r[2] * engine.cylinder3.Mid.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder3.Mounting.frame_b.r_0 = engine.cylinder3.Mounting.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Mounting.frame_a.R,{engine.cylinder3.Mounting.r[1],engine.cylinder3.Mounting.r[2],engine.cylinder3.Mounting.r[3]});
//   engine.cylinder3.Mounting.frame_b.R.T[1,1] = engine.cylinder3.Mounting.frame_a.R.T[1,1];
//   engine.cylinder3.Mounting.frame_b.R.T[1,2] = engine.cylinder3.Mounting.frame_a.R.T[1,2];
//   engine.cylinder3.Mounting.frame_b.R.T[1,3] = engine.cylinder3.Mounting.frame_a.R.T[1,3];
//   engine.cylinder3.Mounting.frame_b.R.T[2,1] = engine.cylinder3.Mounting.frame_a.R.T[2,1];
//   engine.cylinder3.Mounting.frame_b.R.T[2,2] = engine.cylinder3.Mounting.frame_a.R.T[2,2];
//   engine.cylinder3.Mounting.frame_b.R.T[2,3] = engine.cylinder3.Mounting.frame_a.R.T[2,3];
//   engine.cylinder3.Mounting.frame_b.R.T[3,1] = engine.cylinder3.Mounting.frame_a.R.T[3,1];
//   engine.cylinder3.Mounting.frame_b.R.T[3,2] = engine.cylinder3.Mounting.frame_a.R.T[3,2];
//   engine.cylinder3.Mounting.frame_b.R.T[3,3] = engine.cylinder3.Mounting.frame_a.R.T[3,3];
//   engine.cylinder3.Mounting.frame_b.R.w[1] = engine.cylinder3.Mounting.frame_a.R.w[1];
//   engine.cylinder3.Mounting.frame_b.R.w[2] = engine.cylinder3.Mounting.frame_a.R.w[2];
//   engine.cylinder3.Mounting.frame_b.R.w[3] = engine.cylinder3.Mounting.frame_a.R.w[3];
//   0.0 = engine.cylinder3.Mounting.frame_a.f[1] + engine.cylinder3.Mounting.frame_b.f[1];
//   0.0 = engine.cylinder3.Mounting.frame_a.f[2] + engine.cylinder3.Mounting.frame_b.f[2];
//   0.0 = engine.cylinder3.Mounting.frame_a.f[3] + engine.cylinder3.Mounting.frame_b.f[3];
//   0.0 = engine.cylinder3.Mounting.frame_a.t[1] + (engine.cylinder3.Mounting.frame_b.t[1] + (engine.cylinder3.Mounting.r[2] * engine.cylinder3.Mounting.frame_b.f[3] + (-engine.cylinder3.Mounting.r[3] * engine.cylinder3.Mounting.frame_b.f[2])));
//   0.0 = engine.cylinder3.Mounting.frame_a.t[2] + (engine.cylinder3.Mounting.frame_b.t[2] + (engine.cylinder3.Mounting.r[3] * engine.cylinder3.Mounting.frame_b.f[1] + (-engine.cylinder3.Mounting.r[1] * engine.cylinder3.Mounting.frame_b.f[3])));
//   0.0 = engine.cylinder3.Mounting.frame_a.t[3] + (engine.cylinder3.Mounting.frame_b.t[3] + (engine.cylinder3.Mounting.r[1] * engine.cylinder3.Mounting.frame_b.f[2] + (-engine.cylinder3.Mounting.r[2] * engine.cylinder3.Mounting.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder3.CylinderInclination.frame_b.r_0 = engine.cylinder3.CylinderInclination.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.CylinderInclination.frame_a.R,{engine.cylinder3.CylinderInclination.r[1],engine.cylinder3.CylinderInclination.r[2],engine.cylinder3.CylinderInclination.r[3]});
//   engine.cylinder3.CylinderInclination.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder3.CylinderInclination.frame_a.R,engine.cylinder3.CylinderInclination.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder3.CylinderInclination.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.CylinderInclination.R_rel,{engine.cylinder3.CylinderInclination.frame_b.f[1],engine.cylinder3.CylinderInclination.frame_b.f[2],engine.cylinder3.CylinderInclination.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder3.CylinderInclination.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.CylinderInclination.R_rel,{engine.cylinder3.CylinderInclination.frame_b.t[1],engine.cylinder3.CylinderInclination.frame_b.t[2],engine.cylinder3.CylinderInclination.frame_b.t[3]}) - {engine.cylinder3.CylinderInclination.r[2] * engine.cylinder3.CylinderInclination.frame_a.f[3] - engine.cylinder3.CylinderInclination.r[3] * engine.cylinder3.CylinderInclination.frame_a.f[2],engine.cylinder3.CylinderInclination.r[3] * engine.cylinder3.CylinderInclination.frame_a.f[1] - engine.cylinder3.CylinderInclination.r[1] * engine.cylinder3.CylinderInclination.frame_a.f[3],engine.cylinder3.CylinderInclination.r[1] * engine.cylinder3.CylinderInclination.frame_a.f[2] - engine.cylinder3.CylinderInclination.r[2] * engine.cylinder3.CylinderInclination.frame_a.f[1]};
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder3.CrankAngle.frame_b.r_0 = engine.cylinder3.CrankAngle.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.CrankAngle.frame_a.R,{engine.cylinder3.CrankAngle.r[1],engine.cylinder3.CrankAngle.r[2],engine.cylinder3.CrankAngle.r[3]});
//   engine.cylinder3.CrankAngle.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder3.CrankAngle.frame_a.R,engine.cylinder3.CrankAngle.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder3.CrankAngle.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.CrankAngle.R_rel,{engine.cylinder3.CrankAngle.frame_b.f[1],engine.cylinder3.CrankAngle.frame_b.f[2],engine.cylinder3.CrankAngle.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder3.CrankAngle.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.CrankAngle.R_rel,{engine.cylinder3.CrankAngle.frame_b.t[1],engine.cylinder3.CrankAngle.frame_b.t[2],engine.cylinder3.CrankAngle.frame_b.t[3]}) - {engine.cylinder3.CrankAngle.r[2] * engine.cylinder3.CrankAngle.frame_a.f[3] - engine.cylinder3.CrankAngle.r[3] * engine.cylinder3.CrankAngle.frame_a.f[2],engine.cylinder3.CrankAngle.r[3] * engine.cylinder3.CrankAngle.frame_a.f[1] - engine.cylinder3.CrankAngle.r[1] * engine.cylinder3.CrankAngle.frame_a.f[3],engine.cylinder3.CrankAngle.r[1] * engine.cylinder3.CrankAngle.frame_a.f[2] - engine.cylinder3.CrankAngle.r[2] * engine.cylinder3.CrankAngle.frame_a.f[1]};
//   engine.cylinder3.jointRRP.jointUSP.prismatic.axis.f = engine.cylinder3.jointRRP.jointUSP.prismatic.f;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.axis.s = engine.cylinder3.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.bearing.s = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.distance = engine.cylinder3.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder3.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.distance * engine.cylinder3.jointRRP.jointUSP.prismatic.e[1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.distance * engine.cylinder3.jointRRP.jointUSP.prismatic.e[2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.distance * engine.cylinder3.jointRRP.jointUSP.prismatic.e[3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R,{engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[1],engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[2],engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[3]});
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[1] + engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[1];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[2] + engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[2];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[3] + engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[3];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[1] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[3] + (-engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[2])));
//   0.0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[2] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[1] + (-engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[3])));
//   0.0 = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[3] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[2] + (-engine.cylinder3.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[1])));
//   engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[1] - engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[2] - engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.r_b[3] - engine.cylinder3.jointRRP.jointUSP.prismatic.r_a[3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.B = 2.0 * (engine.cylinder3.jointRRP.jointUSP.prismatic.e[1] * engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[1] + (engine.cylinder3.jointRRP.jointUSP.prismatic.e[2] * engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[2] + engine.cylinder3.jointRRP.jointUSP.prismatic.e[3] * engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[3]));
//   engine.cylinder3.jointRRP.jointUSP.prismatic.C = engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[1] ^ 2.0 + (engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[2] ^ 2.0 + engine.cylinder3.jointRRP.jointUSP.prismatic.rbra[3] ^ 2.0) - engine.cylinder3.jointRRP.jointUSP.prismatic.length ^ 2.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.k1 = engine.cylinder3.jointRRP.jointUSP.prismatic.B / 2.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.k1a = engine.cylinder3.jointRRP.jointUSP.prismatic.k1 ^ 2.0 - engine.cylinder3.jointRRP.jointUSP.prismatic.C;
//   assert(noEvent(engine.cylinder3.jointRRP.jointUSP.prismatic.k1a > 1e-10),"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   engine.cylinder3.jointRRP.jointUSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(engine.cylinder3.jointRRP.jointUSP.prismatic.k1a,1e-12);
//   engine.cylinder3.jointRRP.jointUSP.prismatic.k2 = sqrt(engine.cylinder3.jointRRP.jointUSP.prismatic.k1b);
//   engine.cylinder3.jointRRP.jointUSP.prismatic.distance = (if engine.cylinder3.jointRRP.jointUSP.prismatic.positiveBranch then engine.cylinder3.jointRRP.jointUSP.prismatic.k2 else -engine.cylinder3.jointRRP.jointUSP.prismatic.k2) - engine.cylinder3.jointRRP.jointUSP.prismatic.k1;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[1] - engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[2] - engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[3] - engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R,{engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[1],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[2],engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[3]});
//   engine.cylinder3.jointRRP.jointUSP.rod1.constraintResidue = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1] = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[1] / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2] = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[2] / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3] = engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[3] / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[1] = engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2];
//   engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[2] = engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3];
//   engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[3] = engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1];
//   engine.cylinder3.jointRRP.jointUSP.rod1.length2_n2_a = engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[1] ^ 2.0 + (engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[2] ^ 2.0 + engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[3] ^ 2.0);
//   assert(engine.cylinder3.jointRRP.jointUSP.rod1.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   engine.cylinder3.jointRRP.jointUSP.rod1.length_n2_a = sqrt(engine.cylinder3.jointRRP.jointUSP.rod1.length2_n2_a);
//   engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] = engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[1] / engine.cylinder3.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] = engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[2] / engine.cylinder3.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] = engine.cylinder3.jointRRP.jointUSP.rod1.n2_a[3] / engine.cylinder3.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1] = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] - engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2];
//   engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2] = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] - engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3];
//   engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3] = engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] - engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1];
//   engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R,{der(engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[1]),der(engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[2]),der(engine.cylinder3.jointRRP.jointUSP.rod1.rRod_0[3])}) - {engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[3] - engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[2],engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[1] - engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[3],engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[2] - engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[1]}) / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[1] = (engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1] * (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[3] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[2]) + (engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2] * (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[1] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[3]) + engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3] * (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[2] - engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[1]))) / engine.cylinder3.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[2] = (-engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1]) * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + ((-engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2]) * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + (-engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3]) * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[3] = engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3]},{engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1],engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2],engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3]},{engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1],engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2],engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3]}},{engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[1],engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[2],engine.cylinder3.jointRRP.jointUSP.rod1.w_rel_ia1[3]});
//   engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[1],engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[1],engine.cylinder3.jointRRP.jointUSP.rod1.e3_ia[1]},{engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[2],engine.cylinder3.jointRRP.jointUSP.rod1.e3_ia[2]},{engine.cylinder3.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder3.jointRRP.jointUSP.rod1.e2_ia[3],engine.cylinder3.jointRRP.jointUSP.rod1.e3_ia[3]}},{0.0,0.0,0.0});
//   engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia1,engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia2);
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia);
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[1],engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[2],engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[3]});
//   engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[1],engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[2],engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[3]});
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[1] = ((-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] * 1.0 / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1] / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[2] = ((-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] * 1.0 / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2] / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[3] = ((-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] * 1.0 / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder3.jointRRP.jointUSP.rod1.e3_a[3] / engine.cylinder3.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[1] = (-engine.cylinder3.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1] + engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[1];
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[2] = (-engine.cylinder3.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[2];
//   engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[3] = (-engine.cylinder3.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3] + engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[3];
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[1],engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[2],engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[3]},engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[3] = 0.0;
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[1] + engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a[1]);
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[2] + engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a[2]);
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[3] + engine.cylinder3.jointRRP.jointUSP.rod1.f_ia_a[3]);
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[3] + (-engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[2])));
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[1] + (-engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[3])));
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.t_ia_a[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[2] + (-engine.cylinder3.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a[1])));
//   engine.cylinder3.jointRRP.jointUSP.rod1.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R,{engine.cylinder3.jointRRP.jointUSP.rod2.r[1],engine.cylinder3.jointRRP.jointUSP.rod2.r[2],engine.cylinder3.jointRRP.jointUSP.rod2.r[3]});
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[1] + engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[1];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[2] + engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[2];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[3] + engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[3];
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[1] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder3.jointRRP.jointUSP.rod2.r[2] * engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[3] + (-engine.cylinder3.jointRRP.jointUSP.rod2.r[3] * engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[2])));
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[2] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder3.jointRRP.jointUSP.rod2.r[3] * engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[1] + (-engine.cylinder3.jointRRP.jointUSP.rod2.r[1] * engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[3])));
//   0.0 = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[3] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder3.jointRRP.jointUSP.rod2.r[1] * engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[2] + (-engine.cylinder3.jointRRP.jointUSP.rod2.r[2] * engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[1])));
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R,{engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1] - engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1],engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2] - engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2],engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3] - engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   assert(true,"Connector frame_resolve must be connected exactly once");
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   engine.cylinder3.jointRRP.jointUSP.position_b[1].y = engine.cylinder3.jointRRP.jointUSP.position_b[1].k;
//   engine.cylinder3.jointRRP.jointUSP.position_b[2].y = engine.cylinder3.jointRRP.jointUSP.position_b[2].k;
//   engine.cylinder3.jointRRP.jointUSP.position_b[3].y = engine.cylinder3.jointRRP.jointUSP.position_b[3].k;
//   engine.cylinder3.jointRRP.jointUSP.aux = {engine.cylinder3.jointRRP.jointUSP.prismatic.e[1],engine.cylinder3.jointRRP.jointUSP.prismatic.e[2],engine.cylinder3.jointRRP.jointUSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder3.jointRRP.jointUSP.rod1.eRod_a[3]},engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder3.jointRRP.jointUSP.f_rod = ((-engine.cylinder3.jointRRP.jointUSP.prismatic.f) - {engine.cylinder3.jointRRP.jointUSP.prismatic.e[1],engine.cylinder3.jointRRP.jointUSP.prismatic.e[2],engine.cylinder3.jointRRP.jointUSP.prismatic.e[3]} * ({engine.cylinder3.jointRRP.jointUSP.frame_ib.f[1] + engine.cylinder3.jointRRP.jointUSP.frame_im.f[1],engine.cylinder3.jointRRP.jointUSP.frame_ib.f[2] + engine.cylinder3.jointRRP.jointUSP.frame_im.f[2],engine.cylinder3.jointRRP.jointUSP.frame_ib.f[3] + engine.cylinder3.jointRRP.jointUSP.frame_im.f[3]} - Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[1],engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[2],engine.cylinder3.jointRRP.jointUSP.rod1.f_b_a1[3]},engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R))) / (if noEvent(abs(engine.cylinder3.jointRRP.jointUSP.aux) < 1e-10) then 1e-10 else engine.cylinder3.jointRRP.jointUSP.aux);
//   engine.cylinder3.jointRRP.jointUSP.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder3.Rod.frameTranslation.frame_b.r_0 = engine.cylinder3.Rod.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Rod.frameTranslation.frame_a.R,{engine.cylinder3.Rod.frameTranslation.r[1],engine.cylinder3.Rod.frameTranslation.r[2],engine.cylinder3.Rod.frameTranslation.r[3]});
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder3.Rod.frameTranslation.frame_a.f[1] + engine.cylinder3.Rod.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder3.Rod.frameTranslation.frame_a.f[2] + engine.cylinder3.Rod.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder3.Rod.frameTranslation.frame_a.f[3] + engine.cylinder3.Rod.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder3.Rod.frameTranslation.frame_a.t[1] + (engine.cylinder3.Rod.frameTranslation.frame_b.t[1] + (engine.cylinder3.Rod.frameTranslation.r[2] * engine.cylinder3.Rod.frameTranslation.frame_b.f[3] + (-engine.cylinder3.Rod.frameTranslation.r[3] * engine.cylinder3.Rod.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder3.Rod.frameTranslation.frame_a.t[2] + (engine.cylinder3.Rod.frameTranslation.frame_b.t[2] + (engine.cylinder3.Rod.frameTranslation.r[3] * engine.cylinder3.Rod.frameTranslation.frame_b.f[1] + (-engine.cylinder3.Rod.frameTranslation.r[1] * engine.cylinder3.Rod.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder3.Rod.frameTranslation.frame_a.t[3] + (engine.cylinder3.Rod.frameTranslation.frame_b.t[3] + (engine.cylinder3.Rod.frameTranslation.r[1] * engine.cylinder3.Rod.frameTranslation.frame_b.f[2] + (-engine.cylinder3.Rod.frameTranslation.r[2] * engine.cylinder3.Rod.frameTranslation.frame_b.f[1])));
//   engine.cylinder3.Rod.body.r_0[1] = engine.cylinder3.Rod.body.frame_a.r_0[1];
//   engine.cylinder3.Rod.body.r_0[2] = engine.cylinder3.Rod.body.frame_a.r_0[2];
//   engine.cylinder3.Rod.body.r_0[3] = engine.cylinder3.Rod.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder3.Rod.body.Q[1] = 0.0;
//   engine.cylinder3.Rod.body.Q[2] = 0.0;
//   engine.cylinder3.Rod.body.Q[3] = 0.0;
//   engine.cylinder3.Rod.body.Q[4] = 1.0;
//   engine.cylinder3.Rod.body.phi[1] = 0.0;
//   engine.cylinder3.Rod.body.phi[2] = 0.0;
//   engine.cylinder3.Rod.body.phi[3] = 0.0;
//   engine.cylinder3.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder3.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder3.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder3.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder3.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder3.Rod.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder3.Rod.body.useQuaternions then
//   engine.cylinder3.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder3.Rod.body.Q[1],engine.cylinder3.Rod.body.Q[2],engine.cylinder3.Rod.body.Q[3],engine.cylinder3.Rod.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder3.Rod.body.Q[1],engine.cylinder3.Rod.body.Q[2],engine.cylinder3.Rod.body.Q[3],engine.cylinder3.Rod.body.Q[4]},{der(engine.cylinder3.Rod.body.Q[1]),der(engine.cylinder3.Rod.body.Q[2]),der(engine.cylinder3.Rod.body.Q[3]),der(engine.cylinder3.Rod.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder3.Rod.body.Q[1],engine.cylinder3.Rod.body.Q[2],engine.cylinder3.Rod.body.Q[3],engine.cylinder3.Rod.body.Q[4]});
//   engine.cylinder3.Rod.body.phi[1] = 0.0;
//   engine.cylinder3.Rod.body.phi[2] = 0.0;
//   engine.cylinder3.Rod.body.phi[3] = 0.0;
//   engine.cylinder3.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder3.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder3.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder3.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder3.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder3.Rod.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder3.Rod.body.phi_d[1] = der(engine.cylinder3.Rod.body.phi[1]);
//   engine.cylinder3.Rod.body.phi_d[2] = der(engine.cylinder3.Rod.body.phi[2]);
//   engine.cylinder3.Rod.body.phi_d[3] = der(engine.cylinder3.Rod.body.phi[3]);
//   engine.cylinder3.Rod.body.phi_dd[1] = der(engine.cylinder3.Rod.body.phi_d[1]);
//   engine.cylinder3.Rod.body.phi_dd[2] = der(engine.cylinder3.Rod.body.phi_d[2]);
//   engine.cylinder3.Rod.body.phi_dd[3] = der(engine.cylinder3.Rod.body.phi_d[3]);
//   engine.cylinder3.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder3.Rod.body.sequence_angleStates[1],engine.cylinder3.Rod.body.sequence_angleStates[2],engine.cylinder3.Rod.body.sequence_angleStates[3]},{engine.cylinder3.Rod.body.phi[1],engine.cylinder3.Rod.body.phi[2],engine.cylinder3.Rod.body.phi[3]},{engine.cylinder3.Rod.body.phi_d[1],engine.cylinder3.Rod.body.phi_d[2],engine.cylinder3.Rod.body.phi_d[3]});
//   engine.cylinder3.Rod.body.Q[1] = 0.0;
//   engine.cylinder3.Rod.body.Q[2] = 0.0;
//   engine.cylinder3.Rod.body.Q[3] = 0.0;
//   engine.cylinder3.Rod.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder3.Rod.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder3.Rod.body.frame_a.r_0[1],engine.cylinder3.Rod.body.frame_a.r_0[2],engine.cylinder3.Rod.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Rod.body.frame_a.R,{engine.cylinder3.Rod.body.r_CM[1],engine.cylinder3.Rod.body.r_CM[2],engine.cylinder3.Rod.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder3.Rod.body.v_0[1] = der(engine.cylinder3.Rod.body.frame_a.r_0[1]);
//   engine.cylinder3.Rod.body.v_0[2] = der(engine.cylinder3.Rod.body.frame_a.r_0[2]);
//   engine.cylinder3.Rod.body.v_0[3] = der(engine.cylinder3.Rod.body.frame_a.r_0[3]);
//   engine.cylinder3.Rod.body.a_0[1] = der(engine.cylinder3.Rod.body.v_0[1]);
//   engine.cylinder3.Rod.body.a_0[2] = der(engine.cylinder3.Rod.body.v_0[2]);
//   engine.cylinder3.Rod.body.a_0[3] = der(engine.cylinder3.Rod.body.v_0[3]);
//   engine.cylinder3.Rod.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder3.Rod.body.frame_a.R);
//   engine.cylinder3.Rod.body.z_a[1] = der(engine.cylinder3.Rod.body.w_a[1]);
//   engine.cylinder3.Rod.body.z_a[2] = der(engine.cylinder3.Rod.body.w_a[2]);
//   engine.cylinder3.Rod.body.z_a[3] = der(engine.cylinder3.Rod.body.w_a[3]);
//   engine.cylinder3.Rod.body.frame_a.f = engine.cylinder3.Rod.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Rod.body.frame_a.R,{engine.cylinder3.Rod.body.a_0[1] - engine.cylinder3.Rod.body.g_0[1],engine.cylinder3.Rod.body.a_0[2] - engine.cylinder3.Rod.body.g_0[2],engine.cylinder3.Rod.body.a_0[3] - engine.cylinder3.Rod.body.g_0[3]}) + {engine.cylinder3.Rod.body.z_a[2] * engine.cylinder3.Rod.body.r_CM[3] - engine.cylinder3.Rod.body.z_a[3] * engine.cylinder3.Rod.body.r_CM[2],engine.cylinder3.Rod.body.z_a[3] * engine.cylinder3.Rod.body.r_CM[1] - engine.cylinder3.Rod.body.z_a[1] * engine.cylinder3.Rod.body.r_CM[3],engine.cylinder3.Rod.body.z_a[1] * engine.cylinder3.Rod.body.r_CM[2] - engine.cylinder3.Rod.body.z_a[2] * engine.cylinder3.Rod.body.r_CM[1]} + {engine.cylinder3.Rod.body.w_a[2] * (engine.cylinder3.Rod.body.w_a[1] * engine.cylinder3.Rod.body.r_CM[2] - engine.cylinder3.Rod.body.w_a[2] * engine.cylinder3.Rod.body.r_CM[1]) - engine.cylinder3.Rod.body.w_a[3] * (engine.cylinder3.Rod.body.w_a[3] * engine.cylinder3.Rod.body.r_CM[1] - engine.cylinder3.Rod.body.w_a[1] * engine.cylinder3.Rod.body.r_CM[3]),engine.cylinder3.Rod.body.w_a[3] * (engine.cylinder3.Rod.body.w_a[2] * engine.cylinder3.Rod.body.r_CM[3] - engine.cylinder3.Rod.body.w_a[3] * engine.cylinder3.Rod.body.r_CM[2]) - engine.cylinder3.Rod.body.w_a[1] * (engine.cylinder3.Rod.body.w_a[1] * engine.cylinder3.Rod.body.r_CM[2] - engine.cylinder3.Rod.body.w_a[2] * engine.cylinder3.Rod.body.r_CM[1]),engine.cylinder3.Rod.body.w_a[1] * (engine.cylinder3.Rod.body.w_a[3] * engine.cylinder3.Rod.body.r_CM[1] - engine.cylinder3.Rod.body.w_a[1] * engine.cylinder3.Rod.body.r_CM[3]) - engine.cylinder3.Rod.body.w_a[2] * (engine.cylinder3.Rod.body.w_a[2] * engine.cylinder3.Rod.body.r_CM[3] - engine.cylinder3.Rod.body.w_a[3] * engine.cylinder3.Rod.body.r_CM[2])});
//   engine.cylinder3.Rod.body.frame_a.t[1] = engine.cylinder3.Rod.body.I[1,1] * engine.cylinder3.Rod.body.z_a[1] + (engine.cylinder3.Rod.body.I[1,2] * engine.cylinder3.Rod.body.z_a[2] + (engine.cylinder3.Rod.body.I[1,3] * engine.cylinder3.Rod.body.z_a[3] + (engine.cylinder3.Rod.body.w_a[2] * (engine.cylinder3.Rod.body.I[3,1] * engine.cylinder3.Rod.body.w_a[1] + (engine.cylinder3.Rod.body.I[3,2] * engine.cylinder3.Rod.body.w_a[2] + engine.cylinder3.Rod.body.I[3,3] * engine.cylinder3.Rod.body.w_a[3])) + ((-engine.cylinder3.Rod.body.w_a[3] * (engine.cylinder3.Rod.body.I[2,1] * engine.cylinder3.Rod.body.w_a[1] + (engine.cylinder3.Rod.body.I[2,2] * engine.cylinder3.Rod.body.w_a[2] + engine.cylinder3.Rod.body.I[2,3] * engine.cylinder3.Rod.body.w_a[3]))) + (engine.cylinder3.Rod.body.r_CM[2] * engine.cylinder3.Rod.body.frame_a.f[3] + (-engine.cylinder3.Rod.body.r_CM[3] * engine.cylinder3.Rod.body.frame_a.f[2]))))));
//   engine.cylinder3.Rod.body.frame_a.t[2] = engine.cylinder3.Rod.body.I[2,1] * engine.cylinder3.Rod.body.z_a[1] + (engine.cylinder3.Rod.body.I[2,2] * engine.cylinder3.Rod.body.z_a[2] + (engine.cylinder3.Rod.body.I[2,3] * engine.cylinder3.Rod.body.z_a[3] + (engine.cylinder3.Rod.body.w_a[3] * (engine.cylinder3.Rod.body.I[1,1] * engine.cylinder3.Rod.body.w_a[1] + (engine.cylinder3.Rod.body.I[1,2] * engine.cylinder3.Rod.body.w_a[2] + engine.cylinder3.Rod.body.I[1,3] * engine.cylinder3.Rod.body.w_a[3])) + ((-engine.cylinder3.Rod.body.w_a[1] * (engine.cylinder3.Rod.body.I[3,1] * engine.cylinder3.Rod.body.w_a[1] + (engine.cylinder3.Rod.body.I[3,2] * engine.cylinder3.Rod.body.w_a[2] + engine.cylinder3.Rod.body.I[3,3] * engine.cylinder3.Rod.body.w_a[3]))) + (engine.cylinder3.Rod.body.r_CM[3] * engine.cylinder3.Rod.body.frame_a.f[1] + (-engine.cylinder3.Rod.body.r_CM[1] * engine.cylinder3.Rod.body.frame_a.f[3]))))));
//   engine.cylinder3.Rod.body.frame_a.t[3] = engine.cylinder3.Rod.body.I[3,1] * engine.cylinder3.Rod.body.z_a[1] + (engine.cylinder3.Rod.body.I[3,2] * engine.cylinder3.Rod.body.z_a[2] + (engine.cylinder3.Rod.body.I[3,3] * engine.cylinder3.Rod.body.z_a[3] + (engine.cylinder3.Rod.body.w_a[1] * (engine.cylinder3.Rod.body.I[2,1] * engine.cylinder3.Rod.body.w_a[1] + (engine.cylinder3.Rod.body.I[2,2] * engine.cylinder3.Rod.body.w_a[2] + engine.cylinder3.Rod.body.I[2,3] * engine.cylinder3.Rod.body.w_a[3])) + ((-engine.cylinder3.Rod.body.w_a[2] * (engine.cylinder3.Rod.body.I[1,1] * engine.cylinder3.Rod.body.w_a[1] + (engine.cylinder3.Rod.body.I[1,2] * engine.cylinder3.Rod.body.w_a[2] + engine.cylinder3.Rod.body.I[1,3] * engine.cylinder3.Rod.body.w_a[3]))) + (engine.cylinder3.Rod.body.r_CM[1] * engine.cylinder3.Rod.body.frame_a.f[2] + (-engine.cylinder3.Rod.body.r_CM[2] * engine.cylinder3.Rod.body.frame_a.f[1]))))));
//   engine.cylinder3.Rod.shape1.R.T[1,1] = engine.cylinder3.Rod.frame_a.R.T[1,1];
//   engine.cylinder3.Rod.shape1.R.T[1,2] = engine.cylinder3.Rod.frame_a.R.T[1,2];
//   engine.cylinder3.Rod.shape1.R.T[1,3] = engine.cylinder3.Rod.frame_a.R.T[1,3];
//   engine.cylinder3.Rod.shape1.R.T[2,1] = engine.cylinder3.Rod.frame_a.R.T[2,1];
//   engine.cylinder3.Rod.shape1.R.T[2,2] = engine.cylinder3.Rod.frame_a.R.T[2,2];
//   engine.cylinder3.Rod.shape1.R.T[2,3] = engine.cylinder3.Rod.frame_a.R.T[2,3];
//   engine.cylinder3.Rod.shape1.R.T[3,1] = engine.cylinder3.Rod.frame_a.R.T[3,1];
//   engine.cylinder3.Rod.shape1.R.T[3,2] = engine.cylinder3.Rod.frame_a.R.T[3,2];
//   engine.cylinder3.Rod.shape1.R.T[3,3] = engine.cylinder3.Rod.frame_a.R.T[3,3];
//   engine.cylinder3.Rod.shape1.R.w[1] = engine.cylinder3.Rod.frame_a.R.w[1];
//   engine.cylinder3.Rod.shape1.R.w[2] = engine.cylinder3.Rod.frame_a.R.w[2];
//   engine.cylinder3.Rod.shape1.R.w[3] = engine.cylinder3.Rod.frame_a.R.w[3];
//   engine.cylinder3.Rod.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder3.Rod.shape1.shapeType);
//   engine.cylinder3.Rod.shape1.rxvisobj[1] = engine.cylinder3.Rod.shape1.R.T[1,1] * engine.cylinder3.Rod.shape1.e_x[1] + (engine.cylinder3.Rod.shape1.R.T[2,1] * engine.cylinder3.Rod.shape1.e_x[2] + engine.cylinder3.Rod.shape1.R.T[3,1] * engine.cylinder3.Rod.shape1.e_x[3]);
//   engine.cylinder3.Rod.shape1.rxvisobj[2] = engine.cylinder3.Rod.shape1.R.T[1,2] * engine.cylinder3.Rod.shape1.e_x[1] + (engine.cylinder3.Rod.shape1.R.T[2,2] * engine.cylinder3.Rod.shape1.e_x[2] + engine.cylinder3.Rod.shape1.R.T[3,2] * engine.cylinder3.Rod.shape1.e_x[3]);
//   engine.cylinder3.Rod.shape1.rxvisobj[3] = engine.cylinder3.Rod.shape1.R.T[1,3] * engine.cylinder3.Rod.shape1.e_x[1] + (engine.cylinder3.Rod.shape1.R.T[2,3] * engine.cylinder3.Rod.shape1.e_x[2] + engine.cylinder3.Rod.shape1.R.T[3,3] * engine.cylinder3.Rod.shape1.e_x[3]);
//   engine.cylinder3.Rod.shape1.ryvisobj[1] = engine.cylinder3.Rod.shape1.R.T[1,1] * engine.cylinder3.Rod.shape1.e_y[1] + (engine.cylinder3.Rod.shape1.R.T[2,1] * engine.cylinder3.Rod.shape1.e_y[2] + engine.cylinder3.Rod.shape1.R.T[3,1] * engine.cylinder3.Rod.shape1.e_y[3]);
//   engine.cylinder3.Rod.shape1.ryvisobj[2] = engine.cylinder3.Rod.shape1.R.T[1,2] * engine.cylinder3.Rod.shape1.e_y[1] + (engine.cylinder3.Rod.shape1.R.T[2,2] * engine.cylinder3.Rod.shape1.e_y[2] + engine.cylinder3.Rod.shape1.R.T[3,2] * engine.cylinder3.Rod.shape1.e_y[3]);
//   engine.cylinder3.Rod.shape1.ryvisobj[3] = engine.cylinder3.Rod.shape1.R.T[1,3] * engine.cylinder3.Rod.shape1.e_y[1] + (engine.cylinder3.Rod.shape1.R.T[2,3] * engine.cylinder3.Rod.shape1.e_y[2] + engine.cylinder3.Rod.shape1.R.T[3,3] * engine.cylinder3.Rod.shape1.e_y[3]);
//   engine.cylinder3.Rod.shape1.rvisobj = engine.cylinder3.Rod.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder3.Rod.shape1.R.T[1,1],engine.cylinder3.Rod.shape1.R.T[1,2],engine.cylinder3.Rod.shape1.R.T[1,3]},{engine.cylinder3.Rod.shape1.R.T[2,1],engine.cylinder3.Rod.shape1.R.T[2,2],engine.cylinder3.Rod.shape1.R.T[2,3]},{engine.cylinder3.Rod.shape1.R.T[3,1],engine.cylinder3.Rod.shape1.R.T[3,2],engine.cylinder3.Rod.shape1.R.T[3,3]}},{engine.cylinder3.Rod.shape1.r_shape[1],engine.cylinder3.Rod.shape1.r_shape[2],engine.cylinder3.Rod.shape1.r_shape[3]});
//   engine.cylinder3.Rod.shape1.size[1] = engine.cylinder3.Rod.shape1.length;
//   engine.cylinder3.Rod.shape1.size[2] = engine.cylinder3.Rod.shape1.width;
//   engine.cylinder3.Rod.shape1.size[3] = engine.cylinder3.Rod.shape1.height;
//   engine.cylinder3.Rod.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder3.Rod.shape1.color[1] / 255.0,engine.cylinder3.Rod.shape1.color[2] / 255.0,engine.cylinder3.Rod.shape1.color[3] / 255.0,engine.cylinder3.Rod.shape1.specularCoefficient);
//   engine.cylinder3.Rod.shape1.Extra = engine.cylinder3.Rod.shape1.extra;
//   engine.cylinder3.Rod.r_0[1] = engine.cylinder3.Rod.frame_a.r_0[1];
//   engine.cylinder3.Rod.r_0[2] = engine.cylinder3.Rod.frame_a.r_0[2];
//   engine.cylinder3.Rod.r_0[3] = engine.cylinder3.Rod.frame_a.r_0[3];
//   engine.cylinder3.Rod.v_0[1] = der(engine.cylinder3.Rod.r_0[1]);
//   engine.cylinder3.Rod.v_0[2] = der(engine.cylinder3.Rod.r_0[2]);
//   engine.cylinder3.Rod.v_0[3] = der(engine.cylinder3.Rod.r_0[3]);
//   engine.cylinder3.Rod.a_0[1] = der(engine.cylinder3.Rod.v_0[1]);
//   engine.cylinder3.Rod.a_0[2] = der(engine.cylinder3.Rod.v_0[2]);
//   engine.cylinder3.Rod.a_0[3] = der(engine.cylinder3.Rod.v_0[3]);
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0 = engine.cylinder3.Piston.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Piston.frameTranslation.frame_a.R,{engine.cylinder3.Piston.frameTranslation.r[1],engine.cylinder3.Piston.frameTranslation.r[2],engine.cylinder3.Piston.frameTranslation.r[3]});
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder3.Piston.frameTranslation.frame_a.f[1] + engine.cylinder3.Piston.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder3.Piston.frameTranslation.frame_a.f[2] + engine.cylinder3.Piston.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder3.Piston.frameTranslation.frame_a.f[3] + engine.cylinder3.Piston.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder3.Piston.frameTranslation.frame_a.t[1] + (engine.cylinder3.Piston.frameTranslation.frame_b.t[1] + (engine.cylinder3.Piston.frameTranslation.r[2] * engine.cylinder3.Piston.frameTranslation.frame_b.f[3] + (-engine.cylinder3.Piston.frameTranslation.r[3] * engine.cylinder3.Piston.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder3.Piston.frameTranslation.frame_a.t[2] + (engine.cylinder3.Piston.frameTranslation.frame_b.t[2] + (engine.cylinder3.Piston.frameTranslation.r[3] * engine.cylinder3.Piston.frameTranslation.frame_b.f[1] + (-engine.cylinder3.Piston.frameTranslation.r[1] * engine.cylinder3.Piston.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder3.Piston.frameTranslation.frame_a.t[3] + (engine.cylinder3.Piston.frameTranslation.frame_b.t[3] + (engine.cylinder3.Piston.frameTranslation.r[1] * engine.cylinder3.Piston.frameTranslation.frame_b.f[2] + (-engine.cylinder3.Piston.frameTranslation.r[2] * engine.cylinder3.Piston.frameTranslation.frame_b.f[1])));
//   engine.cylinder3.Piston.body.r_0[1] = engine.cylinder3.Piston.body.frame_a.r_0[1];
//   engine.cylinder3.Piston.body.r_0[2] = engine.cylinder3.Piston.body.frame_a.r_0[2];
//   engine.cylinder3.Piston.body.r_0[3] = engine.cylinder3.Piston.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder3.Piston.body.Q[1] = 0.0;
//   engine.cylinder3.Piston.body.Q[2] = 0.0;
//   engine.cylinder3.Piston.body.Q[3] = 0.0;
//   engine.cylinder3.Piston.body.Q[4] = 1.0;
//   engine.cylinder3.Piston.body.phi[1] = 0.0;
//   engine.cylinder3.Piston.body.phi[2] = 0.0;
//   engine.cylinder3.Piston.body.phi[3] = 0.0;
//   engine.cylinder3.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder3.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder3.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder3.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder3.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder3.Piston.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder3.Piston.body.useQuaternions then
//   engine.cylinder3.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder3.Piston.body.Q[1],engine.cylinder3.Piston.body.Q[2],engine.cylinder3.Piston.body.Q[3],engine.cylinder3.Piston.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder3.Piston.body.Q[1],engine.cylinder3.Piston.body.Q[2],engine.cylinder3.Piston.body.Q[3],engine.cylinder3.Piston.body.Q[4]},{der(engine.cylinder3.Piston.body.Q[1]),der(engine.cylinder3.Piston.body.Q[2]),der(engine.cylinder3.Piston.body.Q[3]),der(engine.cylinder3.Piston.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder3.Piston.body.Q[1],engine.cylinder3.Piston.body.Q[2],engine.cylinder3.Piston.body.Q[3],engine.cylinder3.Piston.body.Q[4]});
//   engine.cylinder3.Piston.body.phi[1] = 0.0;
//   engine.cylinder3.Piston.body.phi[2] = 0.0;
//   engine.cylinder3.Piston.body.phi[3] = 0.0;
//   engine.cylinder3.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder3.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder3.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder3.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder3.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder3.Piston.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder3.Piston.body.phi_d[1] = der(engine.cylinder3.Piston.body.phi[1]);
//   engine.cylinder3.Piston.body.phi_d[2] = der(engine.cylinder3.Piston.body.phi[2]);
//   engine.cylinder3.Piston.body.phi_d[3] = der(engine.cylinder3.Piston.body.phi[3]);
//   engine.cylinder3.Piston.body.phi_dd[1] = der(engine.cylinder3.Piston.body.phi_d[1]);
//   engine.cylinder3.Piston.body.phi_dd[2] = der(engine.cylinder3.Piston.body.phi_d[2]);
//   engine.cylinder3.Piston.body.phi_dd[3] = der(engine.cylinder3.Piston.body.phi_d[3]);
//   engine.cylinder3.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder3.Piston.body.sequence_angleStates[1],engine.cylinder3.Piston.body.sequence_angleStates[2],engine.cylinder3.Piston.body.sequence_angleStates[3]},{engine.cylinder3.Piston.body.phi[1],engine.cylinder3.Piston.body.phi[2],engine.cylinder3.Piston.body.phi[3]},{engine.cylinder3.Piston.body.phi_d[1],engine.cylinder3.Piston.body.phi_d[2],engine.cylinder3.Piston.body.phi_d[3]});
//   engine.cylinder3.Piston.body.Q[1] = 0.0;
//   engine.cylinder3.Piston.body.Q[2] = 0.0;
//   engine.cylinder3.Piston.body.Q[3] = 0.0;
//   engine.cylinder3.Piston.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder3.Piston.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder3.Piston.body.frame_a.r_0[1],engine.cylinder3.Piston.body.frame_a.r_0[2],engine.cylinder3.Piston.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Piston.body.frame_a.R,{engine.cylinder3.Piston.body.r_CM[1],engine.cylinder3.Piston.body.r_CM[2],engine.cylinder3.Piston.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder3.Piston.body.v_0[1] = der(engine.cylinder3.Piston.body.frame_a.r_0[1]);
//   engine.cylinder3.Piston.body.v_0[2] = der(engine.cylinder3.Piston.body.frame_a.r_0[2]);
//   engine.cylinder3.Piston.body.v_0[3] = der(engine.cylinder3.Piston.body.frame_a.r_0[3]);
//   engine.cylinder3.Piston.body.a_0[1] = der(engine.cylinder3.Piston.body.v_0[1]);
//   engine.cylinder3.Piston.body.a_0[2] = der(engine.cylinder3.Piston.body.v_0[2]);
//   engine.cylinder3.Piston.body.a_0[3] = der(engine.cylinder3.Piston.body.v_0[3]);
//   engine.cylinder3.Piston.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder3.Piston.body.frame_a.R);
//   engine.cylinder3.Piston.body.z_a[1] = der(engine.cylinder3.Piston.body.w_a[1]);
//   engine.cylinder3.Piston.body.z_a[2] = der(engine.cylinder3.Piston.body.w_a[2]);
//   engine.cylinder3.Piston.body.z_a[3] = der(engine.cylinder3.Piston.body.w_a[3]);
//   engine.cylinder3.Piston.body.frame_a.f = engine.cylinder3.Piston.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder3.Piston.body.frame_a.R,{engine.cylinder3.Piston.body.a_0[1] - engine.cylinder3.Piston.body.g_0[1],engine.cylinder3.Piston.body.a_0[2] - engine.cylinder3.Piston.body.g_0[2],engine.cylinder3.Piston.body.a_0[3] - engine.cylinder3.Piston.body.g_0[3]}) + {engine.cylinder3.Piston.body.z_a[2] * engine.cylinder3.Piston.body.r_CM[3] - engine.cylinder3.Piston.body.z_a[3] * engine.cylinder3.Piston.body.r_CM[2],engine.cylinder3.Piston.body.z_a[3] * engine.cylinder3.Piston.body.r_CM[1] - engine.cylinder3.Piston.body.z_a[1] * engine.cylinder3.Piston.body.r_CM[3],engine.cylinder3.Piston.body.z_a[1] * engine.cylinder3.Piston.body.r_CM[2] - engine.cylinder3.Piston.body.z_a[2] * engine.cylinder3.Piston.body.r_CM[1]} + {engine.cylinder3.Piston.body.w_a[2] * (engine.cylinder3.Piston.body.w_a[1] * engine.cylinder3.Piston.body.r_CM[2] - engine.cylinder3.Piston.body.w_a[2] * engine.cylinder3.Piston.body.r_CM[1]) - engine.cylinder3.Piston.body.w_a[3] * (engine.cylinder3.Piston.body.w_a[3] * engine.cylinder3.Piston.body.r_CM[1] - engine.cylinder3.Piston.body.w_a[1] * engine.cylinder3.Piston.body.r_CM[3]),engine.cylinder3.Piston.body.w_a[3] * (engine.cylinder3.Piston.body.w_a[2] * engine.cylinder3.Piston.body.r_CM[3] - engine.cylinder3.Piston.body.w_a[3] * engine.cylinder3.Piston.body.r_CM[2]) - engine.cylinder3.Piston.body.w_a[1] * (engine.cylinder3.Piston.body.w_a[1] * engine.cylinder3.Piston.body.r_CM[2] - engine.cylinder3.Piston.body.w_a[2] * engine.cylinder3.Piston.body.r_CM[1]),engine.cylinder3.Piston.body.w_a[1] * (engine.cylinder3.Piston.body.w_a[3] * engine.cylinder3.Piston.body.r_CM[1] - engine.cylinder3.Piston.body.w_a[1] * engine.cylinder3.Piston.body.r_CM[3]) - engine.cylinder3.Piston.body.w_a[2] * (engine.cylinder3.Piston.body.w_a[2] * engine.cylinder3.Piston.body.r_CM[3] - engine.cylinder3.Piston.body.w_a[3] * engine.cylinder3.Piston.body.r_CM[2])});
//   engine.cylinder3.Piston.body.frame_a.t[1] = engine.cylinder3.Piston.body.I[1,1] * engine.cylinder3.Piston.body.z_a[1] + (engine.cylinder3.Piston.body.I[1,2] * engine.cylinder3.Piston.body.z_a[2] + (engine.cylinder3.Piston.body.I[1,3] * engine.cylinder3.Piston.body.z_a[3] + (engine.cylinder3.Piston.body.w_a[2] * (engine.cylinder3.Piston.body.I[3,1] * engine.cylinder3.Piston.body.w_a[1] + (engine.cylinder3.Piston.body.I[3,2] * engine.cylinder3.Piston.body.w_a[2] + engine.cylinder3.Piston.body.I[3,3] * engine.cylinder3.Piston.body.w_a[3])) + ((-engine.cylinder3.Piston.body.w_a[3] * (engine.cylinder3.Piston.body.I[2,1] * engine.cylinder3.Piston.body.w_a[1] + (engine.cylinder3.Piston.body.I[2,2] * engine.cylinder3.Piston.body.w_a[2] + engine.cylinder3.Piston.body.I[2,3] * engine.cylinder3.Piston.body.w_a[3]))) + (engine.cylinder3.Piston.body.r_CM[2] * engine.cylinder3.Piston.body.frame_a.f[3] + (-engine.cylinder3.Piston.body.r_CM[3] * engine.cylinder3.Piston.body.frame_a.f[2]))))));
//   engine.cylinder3.Piston.body.frame_a.t[2] = engine.cylinder3.Piston.body.I[2,1] * engine.cylinder3.Piston.body.z_a[1] + (engine.cylinder3.Piston.body.I[2,2] * engine.cylinder3.Piston.body.z_a[2] + (engine.cylinder3.Piston.body.I[2,3] * engine.cylinder3.Piston.body.z_a[3] + (engine.cylinder3.Piston.body.w_a[3] * (engine.cylinder3.Piston.body.I[1,1] * engine.cylinder3.Piston.body.w_a[1] + (engine.cylinder3.Piston.body.I[1,2] * engine.cylinder3.Piston.body.w_a[2] + engine.cylinder3.Piston.body.I[1,3] * engine.cylinder3.Piston.body.w_a[3])) + ((-engine.cylinder3.Piston.body.w_a[1] * (engine.cylinder3.Piston.body.I[3,1] * engine.cylinder3.Piston.body.w_a[1] + (engine.cylinder3.Piston.body.I[3,2] * engine.cylinder3.Piston.body.w_a[2] + engine.cylinder3.Piston.body.I[3,3] * engine.cylinder3.Piston.body.w_a[3]))) + (engine.cylinder3.Piston.body.r_CM[3] * engine.cylinder3.Piston.body.frame_a.f[1] + (-engine.cylinder3.Piston.body.r_CM[1] * engine.cylinder3.Piston.body.frame_a.f[3]))))));
//   engine.cylinder3.Piston.body.frame_a.t[3] = engine.cylinder3.Piston.body.I[3,1] * engine.cylinder3.Piston.body.z_a[1] + (engine.cylinder3.Piston.body.I[3,2] * engine.cylinder3.Piston.body.z_a[2] + (engine.cylinder3.Piston.body.I[3,3] * engine.cylinder3.Piston.body.z_a[3] + (engine.cylinder3.Piston.body.w_a[1] * (engine.cylinder3.Piston.body.I[2,1] * engine.cylinder3.Piston.body.w_a[1] + (engine.cylinder3.Piston.body.I[2,2] * engine.cylinder3.Piston.body.w_a[2] + engine.cylinder3.Piston.body.I[2,3] * engine.cylinder3.Piston.body.w_a[3])) + ((-engine.cylinder3.Piston.body.w_a[2] * (engine.cylinder3.Piston.body.I[1,1] * engine.cylinder3.Piston.body.w_a[1] + (engine.cylinder3.Piston.body.I[1,2] * engine.cylinder3.Piston.body.w_a[2] + engine.cylinder3.Piston.body.I[1,3] * engine.cylinder3.Piston.body.w_a[3]))) + (engine.cylinder3.Piston.body.r_CM[1] * engine.cylinder3.Piston.body.frame_a.f[2] + (-engine.cylinder3.Piston.body.r_CM[2] * engine.cylinder3.Piston.body.frame_a.f[1]))))));
//   engine.cylinder3.Piston.shape1.R.T[1,1] = engine.cylinder3.Piston.frame_a.R.T[1,1];
//   engine.cylinder3.Piston.shape1.R.T[1,2] = engine.cylinder3.Piston.frame_a.R.T[1,2];
//   engine.cylinder3.Piston.shape1.R.T[1,3] = engine.cylinder3.Piston.frame_a.R.T[1,3];
//   engine.cylinder3.Piston.shape1.R.T[2,1] = engine.cylinder3.Piston.frame_a.R.T[2,1];
//   engine.cylinder3.Piston.shape1.R.T[2,2] = engine.cylinder3.Piston.frame_a.R.T[2,2];
//   engine.cylinder3.Piston.shape1.R.T[2,3] = engine.cylinder3.Piston.frame_a.R.T[2,3];
//   engine.cylinder3.Piston.shape1.R.T[3,1] = engine.cylinder3.Piston.frame_a.R.T[3,1];
//   engine.cylinder3.Piston.shape1.R.T[3,2] = engine.cylinder3.Piston.frame_a.R.T[3,2];
//   engine.cylinder3.Piston.shape1.R.T[3,3] = engine.cylinder3.Piston.frame_a.R.T[3,3];
//   engine.cylinder3.Piston.shape1.R.w[1] = engine.cylinder3.Piston.frame_a.R.w[1];
//   engine.cylinder3.Piston.shape1.R.w[2] = engine.cylinder3.Piston.frame_a.R.w[2];
//   engine.cylinder3.Piston.shape1.R.w[3] = engine.cylinder3.Piston.frame_a.R.w[3];
//   engine.cylinder3.Piston.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder3.Piston.shape1.shapeType);
//   engine.cylinder3.Piston.shape1.rxvisobj[1] = engine.cylinder3.Piston.shape1.R.T[1,1] * engine.cylinder3.Piston.shape1.e_x[1] + (engine.cylinder3.Piston.shape1.R.T[2,1] * engine.cylinder3.Piston.shape1.e_x[2] + engine.cylinder3.Piston.shape1.R.T[3,1] * engine.cylinder3.Piston.shape1.e_x[3]);
//   engine.cylinder3.Piston.shape1.rxvisobj[2] = engine.cylinder3.Piston.shape1.R.T[1,2] * engine.cylinder3.Piston.shape1.e_x[1] + (engine.cylinder3.Piston.shape1.R.T[2,2] * engine.cylinder3.Piston.shape1.e_x[2] + engine.cylinder3.Piston.shape1.R.T[3,2] * engine.cylinder3.Piston.shape1.e_x[3]);
//   engine.cylinder3.Piston.shape1.rxvisobj[3] = engine.cylinder3.Piston.shape1.R.T[1,3] * engine.cylinder3.Piston.shape1.e_x[1] + (engine.cylinder3.Piston.shape1.R.T[2,3] * engine.cylinder3.Piston.shape1.e_x[2] + engine.cylinder3.Piston.shape1.R.T[3,3] * engine.cylinder3.Piston.shape1.e_x[3]);
//   engine.cylinder3.Piston.shape1.ryvisobj[1] = engine.cylinder3.Piston.shape1.R.T[1,1] * engine.cylinder3.Piston.shape1.e_y[1] + (engine.cylinder3.Piston.shape1.R.T[2,1] * engine.cylinder3.Piston.shape1.e_y[2] + engine.cylinder3.Piston.shape1.R.T[3,1] * engine.cylinder3.Piston.shape1.e_y[3]);
//   engine.cylinder3.Piston.shape1.ryvisobj[2] = engine.cylinder3.Piston.shape1.R.T[1,2] * engine.cylinder3.Piston.shape1.e_y[1] + (engine.cylinder3.Piston.shape1.R.T[2,2] * engine.cylinder3.Piston.shape1.e_y[2] + engine.cylinder3.Piston.shape1.R.T[3,2] * engine.cylinder3.Piston.shape1.e_y[3]);
//   engine.cylinder3.Piston.shape1.ryvisobj[3] = engine.cylinder3.Piston.shape1.R.T[1,3] * engine.cylinder3.Piston.shape1.e_y[1] + (engine.cylinder3.Piston.shape1.R.T[2,3] * engine.cylinder3.Piston.shape1.e_y[2] + engine.cylinder3.Piston.shape1.R.T[3,3] * engine.cylinder3.Piston.shape1.e_y[3]);
//   engine.cylinder3.Piston.shape1.rvisobj = engine.cylinder3.Piston.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder3.Piston.shape1.R.T[1,1],engine.cylinder3.Piston.shape1.R.T[1,2],engine.cylinder3.Piston.shape1.R.T[1,3]},{engine.cylinder3.Piston.shape1.R.T[2,1],engine.cylinder3.Piston.shape1.R.T[2,2],engine.cylinder3.Piston.shape1.R.T[2,3]},{engine.cylinder3.Piston.shape1.R.T[3,1],engine.cylinder3.Piston.shape1.R.T[3,2],engine.cylinder3.Piston.shape1.R.T[3,3]}},{engine.cylinder3.Piston.shape1.r_shape[1],engine.cylinder3.Piston.shape1.r_shape[2],engine.cylinder3.Piston.shape1.r_shape[3]});
//   engine.cylinder3.Piston.shape1.size[1] = engine.cylinder3.Piston.shape1.length;
//   engine.cylinder3.Piston.shape1.size[2] = engine.cylinder3.Piston.shape1.width;
//   engine.cylinder3.Piston.shape1.size[3] = engine.cylinder3.Piston.shape1.height;
//   engine.cylinder3.Piston.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder3.Piston.shape1.color[1] / 255.0,engine.cylinder3.Piston.shape1.color[2] / 255.0,engine.cylinder3.Piston.shape1.color[3] / 255.0,engine.cylinder3.Piston.shape1.specularCoefficient);
//   engine.cylinder3.Piston.shape1.Extra = engine.cylinder3.Piston.shape1.extra;
//   engine.cylinder3.Piston.r_0[1] = engine.cylinder3.Piston.frame_a.r_0[1];
//   engine.cylinder3.Piston.r_0[2] = engine.cylinder3.Piston.frame_a.r_0[2];
//   engine.cylinder3.Piston.r_0[3] = engine.cylinder3.Piston.frame_a.r_0[3];
//   engine.cylinder3.Piston.v_0[1] = der(engine.cylinder3.Piston.r_0[1]);
//   engine.cylinder3.Piston.v_0[2] = der(engine.cylinder3.Piston.r_0[2]);
//   engine.cylinder3.Piston.v_0[3] = der(engine.cylinder3.Piston.r_0[3]);
//   engine.cylinder3.Piston.a_0[1] = der(engine.cylinder3.Piston.v_0[1]);
//   engine.cylinder3.Piston.a_0[2] = der(engine.cylinder3.Piston.v_0[2]);
//   engine.cylinder3.Piston.a_0[3] = der(engine.cylinder3.Piston.v_0[3]);
//   engine.cylinder3.gasForce.y = (-engine.cylinder3.gasForce.s_rel) / engine.cylinder3.gasForce.L;
//   engine.cylinder3.gasForce.x = 1.0 + engine.cylinder3.gasForce.s_rel / engine.cylinder3.gasForce.L;
//   engine.cylinder3.gasForce.v_rel = der(engine.cylinder3.gasForce.s_rel);
//   engine.cylinder3.gasForce.press = engine.cylinder3.gasForce.p / 100000.0;
//   engine.cylinder3.gasForce.p = 100000.0 * (if engine.cylinder3.gasForce.v_rel < 0.0 then if engine.cylinder3.gasForce.x < 0.987 then 2.4 + (177.4132 * engine.cylinder3.gasForce.x ^ 4.0 + (-287.2189 * engine.cylinder3.gasForce.x ^ 3.0 + (151.8252 * engine.cylinder3.gasForce.x ^ 2.0 + -24.9973 * engine.cylinder3.gasForce.x))) else 2129670.0 + (2836360.0 * engine.cylinder3.gasForce.x ^ 4.0 + (-10569296.0 * engine.cylinder3.gasForce.x ^ 3.0 + (14761814.0 * engine.cylinder3.gasForce.x ^ 2.0 + -9158505.0 * engine.cylinder3.gasForce.x))) else if engine.cylinder3.gasForce.x > 0.93 then -3929704.0 * engine.cylinder3.gasForce.x ^ 4.0 + (14748765.0 * engine.cylinder3.gasForce.x ^ 3.0 + (-20747000.0 * engine.cylinder3.gasForce.x ^ 2.0 + 12964477.0 * engine.cylinder3.gasForce.x)) - 3036495.0 else 2.4 + (145.93 * engine.cylinder3.gasForce.x ^ 4.0 + (-131.707 * engine.cylinder3.gasForce.x ^ 3.0 + (17.3438 * engine.cylinder3.gasForce.x ^ 2.0 + 17.9272 * engine.cylinder3.gasForce.x))));
//   engine.cylinder3.gasForce.f = -78539.8163397448 * (engine.cylinder3.gasForce.press * engine.cylinder3.gasForce.d ^ 2.0);
//   engine.cylinder3.gasForce.V = engine.cylinder3.gasForce.k0 + engine.cylinder3.gasForce.k1 * (1.0 - engine.cylinder3.gasForce.x);
//   engine.cylinder3.gasForce.dens = 1.0 / engine.cylinder3.gasForce.V;
//   engine.cylinder3.gasForce.p * engine.cylinder3.gasForce.V / 100000.0 = engine.cylinder3.gasForce.k * engine.cylinder3.gasForce.T;
//   engine.cylinder3.gasForce.s_rel = engine.cylinder3.gasForce.flange_b.s - engine.cylinder3.gasForce.flange_a.s;
//   engine.cylinder3.gasForce.flange_b.f = engine.cylinder3.gasForce.f;
//   engine.cylinder3.gasForce.flange_a.f = -engine.cylinder3.gasForce.f;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder3.Crank.frame_b.r_0 = engine.cylinder3.Crank.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder3.Crank.frame_a.R,{engine.cylinder3.Crank.r[1],engine.cylinder3.Crank.r[2],engine.cylinder3.Crank.r[3]});
//   engine.cylinder3.Crank.frame_b.R.T[1,1] = engine.cylinder3.Crank.frame_a.R.T[1,1];
//   engine.cylinder3.Crank.frame_b.R.T[1,2] = engine.cylinder3.Crank.frame_a.R.T[1,2];
//   engine.cylinder3.Crank.frame_b.R.T[1,3] = engine.cylinder3.Crank.frame_a.R.T[1,3];
//   engine.cylinder3.Crank.frame_b.R.T[2,1] = engine.cylinder3.Crank.frame_a.R.T[2,1];
//   engine.cylinder3.Crank.frame_b.R.T[2,2] = engine.cylinder3.Crank.frame_a.R.T[2,2];
//   engine.cylinder3.Crank.frame_b.R.T[2,3] = engine.cylinder3.Crank.frame_a.R.T[2,3];
//   engine.cylinder3.Crank.frame_b.R.T[3,1] = engine.cylinder3.Crank.frame_a.R.T[3,1];
//   engine.cylinder3.Crank.frame_b.R.T[3,2] = engine.cylinder3.Crank.frame_a.R.T[3,2];
//   engine.cylinder3.Crank.frame_b.R.T[3,3] = engine.cylinder3.Crank.frame_a.R.T[3,3];
//   engine.cylinder3.Crank.frame_b.R.w[1] = engine.cylinder3.Crank.frame_a.R.w[1];
//   engine.cylinder3.Crank.frame_b.R.w[2] = engine.cylinder3.Crank.frame_a.R.w[2];
//   engine.cylinder3.Crank.frame_b.R.w[3] = engine.cylinder3.Crank.frame_a.R.w[3];
//   0.0 = engine.cylinder3.Crank.frame_a.f[1] + engine.cylinder3.Crank.frame_b.f[1];
//   0.0 = engine.cylinder3.Crank.frame_a.f[2] + engine.cylinder3.Crank.frame_b.f[2];
//   0.0 = engine.cylinder3.Crank.frame_a.f[3] + engine.cylinder3.Crank.frame_b.f[3];
//   0.0 = engine.cylinder3.Crank.frame_a.t[1] + (engine.cylinder3.Crank.frame_b.t[1] + (engine.cylinder3.Crank.r[2] * engine.cylinder3.Crank.frame_b.f[3] + (-engine.cylinder3.Crank.r[3] * engine.cylinder3.Crank.frame_b.f[2])));
//   0.0 = engine.cylinder3.Crank.frame_a.t[2] + (engine.cylinder3.Crank.frame_b.t[2] + (engine.cylinder3.Crank.r[3] * engine.cylinder3.Crank.frame_b.f[1] + (-engine.cylinder3.Crank.r[1] * engine.cylinder3.Crank.frame_b.f[3])));
//   0.0 = engine.cylinder3.Crank.frame_a.t[3] + (engine.cylinder3.Crank.frame_b.t[3] + (engine.cylinder3.Crank.r[1] * engine.cylinder3.Crank.frame_b.f[2] + (-engine.cylinder3.Crank.r[2] * engine.cylinder3.Crank.frame_b.f[1])));
//   engine.cylinder3.CrankShape.vis.R.T[1,1] = engine.cylinder3.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder3.CrankShape.vis.R.T[1,2] = engine.cylinder3.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder3.CrankShape.vis.R.T[1,3] = engine.cylinder3.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder3.CrankShape.vis.R.T[2,1] = engine.cylinder3.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder3.CrankShape.vis.R.T[2,2] = engine.cylinder3.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder3.CrankShape.vis.R.T[2,3] = engine.cylinder3.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder3.CrankShape.vis.R.T[3,1] = engine.cylinder3.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder3.CrankShape.vis.R.T[3,2] = engine.cylinder3.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder3.CrankShape.vis.R.T[3,3] = engine.cylinder3.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder3.CrankShape.vis.R.w[1] = engine.cylinder3.CrankShape.frame_a.R.w[1];
//   engine.cylinder3.CrankShape.vis.R.w[2] = engine.cylinder3.CrankShape.frame_a.R.w[2];
//   engine.cylinder3.CrankShape.vis.R.w[3] = engine.cylinder3.CrankShape.frame_a.R.w[3];
//   engine.cylinder3.CrankShape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder3.CrankShape.vis.shapeType);
//   engine.cylinder3.CrankShape.vis.rxvisobj[1] = engine.cylinder3.CrankShape.vis.R.T[1,1] * engine.cylinder3.CrankShape.vis.e_x[1] + (engine.cylinder3.CrankShape.vis.R.T[2,1] * engine.cylinder3.CrankShape.vis.e_x[2] + engine.cylinder3.CrankShape.vis.R.T[3,1] * engine.cylinder3.CrankShape.vis.e_x[3]);
//   engine.cylinder3.CrankShape.vis.rxvisobj[2] = engine.cylinder3.CrankShape.vis.R.T[1,2] * engine.cylinder3.CrankShape.vis.e_x[1] + (engine.cylinder3.CrankShape.vis.R.T[2,2] * engine.cylinder3.CrankShape.vis.e_x[2] + engine.cylinder3.CrankShape.vis.R.T[3,2] * engine.cylinder3.CrankShape.vis.e_x[3]);
//   engine.cylinder3.CrankShape.vis.rxvisobj[3] = engine.cylinder3.CrankShape.vis.R.T[1,3] * engine.cylinder3.CrankShape.vis.e_x[1] + (engine.cylinder3.CrankShape.vis.R.T[2,3] * engine.cylinder3.CrankShape.vis.e_x[2] + engine.cylinder3.CrankShape.vis.R.T[3,3] * engine.cylinder3.CrankShape.vis.e_x[3]);
//   engine.cylinder3.CrankShape.vis.ryvisobj[1] = engine.cylinder3.CrankShape.vis.R.T[1,1] * engine.cylinder3.CrankShape.vis.e_y[1] + (engine.cylinder3.CrankShape.vis.R.T[2,1] * engine.cylinder3.CrankShape.vis.e_y[2] + engine.cylinder3.CrankShape.vis.R.T[3,1] * engine.cylinder3.CrankShape.vis.e_y[3]);
//   engine.cylinder3.CrankShape.vis.ryvisobj[2] = engine.cylinder3.CrankShape.vis.R.T[1,2] * engine.cylinder3.CrankShape.vis.e_y[1] + (engine.cylinder3.CrankShape.vis.R.T[2,2] * engine.cylinder3.CrankShape.vis.e_y[2] + engine.cylinder3.CrankShape.vis.R.T[3,2] * engine.cylinder3.CrankShape.vis.e_y[3]);
//   engine.cylinder3.CrankShape.vis.ryvisobj[3] = engine.cylinder3.CrankShape.vis.R.T[1,3] * engine.cylinder3.CrankShape.vis.e_y[1] + (engine.cylinder3.CrankShape.vis.R.T[2,3] * engine.cylinder3.CrankShape.vis.e_y[2] + engine.cylinder3.CrankShape.vis.R.T[3,3] * engine.cylinder3.CrankShape.vis.e_y[3]);
//   engine.cylinder3.CrankShape.vis.rvisobj = engine.cylinder3.CrankShape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder3.CrankShape.vis.R.T[1,1],engine.cylinder3.CrankShape.vis.R.T[1,2],engine.cylinder3.CrankShape.vis.R.T[1,3]},{engine.cylinder3.CrankShape.vis.R.T[2,1],engine.cylinder3.CrankShape.vis.R.T[2,2],engine.cylinder3.CrankShape.vis.R.T[2,3]},{engine.cylinder3.CrankShape.vis.R.T[3,1],engine.cylinder3.CrankShape.vis.R.T[3,2],engine.cylinder3.CrankShape.vis.R.T[3,3]}},{engine.cylinder3.CrankShape.vis.r_shape[1],engine.cylinder3.CrankShape.vis.r_shape[2],engine.cylinder3.CrankShape.vis.r_shape[3]});
//   engine.cylinder3.CrankShape.vis.size[1] = engine.cylinder3.CrankShape.vis.length;
//   engine.cylinder3.CrankShape.vis.size[2] = engine.cylinder3.CrankShape.vis.width;
//   engine.cylinder3.CrankShape.vis.size[3] = engine.cylinder3.CrankShape.vis.height;
//   engine.cylinder3.CrankShape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder3.CrankShape.vis.color[1] / 255.0,engine.cylinder3.CrankShape.vis.color[2] / 255.0,engine.cylinder3.CrankShape.vis.color[3] / 255.0,engine.cylinder3.CrankShape.vis.specularCoefficient);
//   engine.cylinder3.CrankShape.vis.Extra = engine.cylinder3.CrankShape.vis.extra;
//   engine.cylinder3.CrankShape.frame_a.f[1] = 0.0;
//   engine.cylinder3.CrankShape.frame_a.f[2] = 0.0;
//   engine.cylinder3.CrankShape.frame_a.f[3] = 0.0;
//   engine.cylinder3.CrankShape.frame_a.t[1] = 0.0;
//   engine.cylinder3.CrankShape.frame_a.t[2] = 0.0;
//   engine.cylinder3.CrankShape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder4.Mid.frame_b.r_0 = engine.cylinder4.Mid.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Mid.frame_a.R,{engine.cylinder4.Mid.r[1],engine.cylinder4.Mid.r[2],engine.cylinder4.Mid.r[3]});
//   engine.cylinder4.Mid.frame_b.R.T[1,1] = engine.cylinder4.Mid.frame_a.R.T[1,1];
//   engine.cylinder4.Mid.frame_b.R.T[1,2] = engine.cylinder4.Mid.frame_a.R.T[1,2];
//   engine.cylinder4.Mid.frame_b.R.T[1,3] = engine.cylinder4.Mid.frame_a.R.T[1,3];
//   engine.cylinder4.Mid.frame_b.R.T[2,1] = engine.cylinder4.Mid.frame_a.R.T[2,1];
//   engine.cylinder4.Mid.frame_b.R.T[2,2] = engine.cylinder4.Mid.frame_a.R.T[2,2];
//   engine.cylinder4.Mid.frame_b.R.T[2,3] = engine.cylinder4.Mid.frame_a.R.T[2,3];
//   engine.cylinder4.Mid.frame_b.R.T[3,1] = engine.cylinder4.Mid.frame_a.R.T[3,1];
//   engine.cylinder4.Mid.frame_b.R.T[3,2] = engine.cylinder4.Mid.frame_a.R.T[3,2];
//   engine.cylinder4.Mid.frame_b.R.T[3,3] = engine.cylinder4.Mid.frame_a.R.T[3,3];
//   engine.cylinder4.Mid.frame_b.R.w[1] = engine.cylinder4.Mid.frame_a.R.w[1];
//   engine.cylinder4.Mid.frame_b.R.w[2] = engine.cylinder4.Mid.frame_a.R.w[2];
//   engine.cylinder4.Mid.frame_b.R.w[3] = engine.cylinder4.Mid.frame_a.R.w[3];
//   0.0 = engine.cylinder4.Mid.frame_a.f[1] + engine.cylinder4.Mid.frame_b.f[1];
//   0.0 = engine.cylinder4.Mid.frame_a.f[2] + engine.cylinder4.Mid.frame_b.f[2];
//   0.0 = engine.cylinder4.Mid.frame_a.f[3] + engine.cylinder4.Mid.frame_b.f[3];
//   0.0 = engine.cylinder4.Mid.frame_a.t[1] + (engine.cylinder4.Mid.frame_b.t[1] + (engine.cylinder4.Mid.r[2] * engine.cylinder4.Mid.frame_b.f[3] + (-engine.cylinder4.Mid.r[3] * engine.cylinder4.Mid.frame_b.f[2])));
//   0.0 = engine.cylinder4.Mid.frame_a.t[2] + (engine.cylinder4.Mid.frame_b.t[2] + (engine.cylinder4.Mid.r[3] * engine.cylinder4.Mid.frame_b.f[1] + (-engine.cylinder4.Mid.r[1] * engine.cylinder4.Mid.frame_b.f[3])));
//   0.0 = engine.cylinder4.Mid.frame_a.t[3] + (engine.cylinder4.Mid.frame_b.t[3] + (engine.cylinder4.Mid.r[1] * engine.cylinder4.Mid.frame_b.f[2] + (-engine.cylinder4.Mid.r[2] * engine.cylinder4.Mid.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder4.Mounting.frame_b.r_0 = engine.cylinder4.Mounting.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Mounting.frame_a.R,{engine.cylinder4.Mounting.r[1],engine.cylinder4.Mounting.r[2],engine.cylinder4.Mounting.r[3]});
//   engine.cylinder4.Mounting.frame_b.R.T[1,1] = engine.cylinder4.Mounting.frame_a.R.T[1,1];
//   engine.cylinder4.Mounting.frame_b.R.T[1,2] = engine.cylinder4.Mounting.frame_a.R.T[1,2];
//   engine.cylinder4.Mounting.frame_b.R.T[1,3] = engine.cylinder4.Mounting.frame_a.R.T[1,3];
//   engine.cylinder4.Mounting.frame_b.R.T[2,1] = engine.cylinder4.Mounting.frame_a.R.T[2,1];
//   engine.cylinder4.Mounting.frame_b.R.T[2,2] = engine.cylinder4.Mounting.frame_a.R.T[2,2];
//   engine.cylinder4.Mounting.frame_b.R.T[2,3] = engine.cylinder4.Mounting.frame_a.R.T[2,3];
//   engine.cylinder4.Mounting.frame_b.R.T[3,1] = engine.cylinder4.Mounting.frame_a.R.T[3,1];
//   engine.cylinder4.Mounting.frame_b.R.T[3,2] = engine.cylinder4.Mounting.frame_a.R.T[3,2];
//   engine.cylinder4.Mounting.frame_b.R.T[3,3] = engine.cylinder4.Mounting.frame_a.R.T[3,3];
//   engine.cylinder4.Mounting.frame_b.R.w[1] = engine.cylinder4.Mounting.frame_a.R.w[1];
//   engine.cylinder4.Mounting.frame_b.R.w[2] = engine.cylinder4.Mounting.frame_a.R.w[2];
//   engine.cylinder4.Mounting.frame_b.R.w[3] = engine.cylinder4.Mounting.frame_a.R.w[3];
//   0.0 = engine.cylinder4.Mounting.frame_a.f[1] + engine.cylinder4.Mounting.frame_b.f[1];
//   0.0 = engine.cylinder4.Mounting.frame_a.f[2] + engine.cylinder4.Mounting.frame_b.f[2];
//   0.0 = engine.cylinder4.Mounting.frame_a.f[3] + engine.cylinder4.Mounting.frame_b.f[3];
//   0.0 = engine.cylinder4.Mounting.frame_a.t[1] + (engine.cylinder4.Mounting.frame_b.t[1] + (engine.cylinder4.Mounting.r[2] * engine.cylinder4.Mounting.frame_b.f[3] + (-engine.cylinder4.Mounting.r[3] * engine.cylinder4.Mounting.frame_b.f[2])));
//   0.0 = engine.cylinder4.Mounting.frame_a.t[2] + (engine.cylinder4.Mounting.frame_b.t[2] + (engine.cylinder4.Mounting.r[3] * engine.cylinder4.Mounting.frame_b.f[1] + (-engine.cylinder4.Mounting.r[1] * engine.cylinder4.Mounting.frame_b.f[3])));
//   0.0 = engine.cylinder4.Mounting.frame_a.t[3] + (engine.cylinder4.Mounting.frame_b.t[3] + (engine.cylinder4.Mounting.r[1] * engine.cylinder4.Mounting.frame_b.f[2] + (-engine.cylinder4.Mounting.r[2] * engine.cylinder4.Mounting.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder4.CylinderInclination.frame_b.r_0 = engine.cylinder4.CylinderInclination.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.CylinderInclination.frame_a.R,{engine.cylinder4.CylinderInclination.r[1],engine.cylinder4.CylinderInclination.r[2],engine.cylinder4.CylinderInclination.r[3]});
//   engine.cylinder4.CylinderInclination.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder4.CylinderInclination.frame_a.R,engine.cylinder4.CylinderInclination.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder4.CylinderInclination.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.CylinderInclination.R_rel,{engine.cylinder4.CylinderInclination.frame_b.f[1],engine.cylinder4.CylinderInclination.frame_b.f[2],engine.cylinder4.CylinderInclination.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder4.CylinderInclination.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.CylinderInclination.R_rel,{engine.cylinder4.CylinderInclination.frame_b.t[1],engine.cylinder4.CylinderInclination.frame_b.t[2],engine.cylinder4.CylinderInclination.frame_b.t[3]}) - {engine.cylinder4.CylinderInclination.r[2] * engine.cylinder4.CylinderInclination.frame_a.f[3] - engine.cylinder4.CylinderInclination.r[3] * engine.cylinder4.CylinderInclination.frame_a.f[2],engine.cylinder4.CylinderInclination.r[3] * engine.cylinder4.CylinderInclination.frame_a.f[1] - engine.cylinder4.CylinderInclination.r[1] * engine.cylinder4.CylinderInclination.frame_a.f[3],engine.cylinder4.CylinderInclination.r[1] * engine.cylinder4.CylinderInclination.frame_a.f[2] - engine.cylinder4.CylinderInclination.r[2] * engine.cylinder4.CylinderInclination.frame_a.f[1]};
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder4.CrankAngle.frame_b.r_0 = engine.cylinder4.CrankAngle.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.CrankAngle.frame_a.R,{engine.cylinder4.CrankAngle.r[1],engine.cylinder4.CrankAngle.r[2],engine.cylinder4.CrankAngle.r[3]});
//   engine.cylinder4.CrankAngle.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder4.CrankAngle.frame_a.R,engine.cylinder4.CrankAngle.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder4.CrankAngle.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.CrankAngle.R_rel,{engine.cylinder4.CrankAngle.frame_b.f[1],engine.cylinder4.CrankAngle.frame_b.f[2],engine.cylinder4.CrankAngle.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder4.CrankAngle.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.CrankAngle.R_rel,{engine.cylinder4.CrankAngle.frame_b.t[1],engine.cylinder4.CrankAngle.frame_b.t[2],engine.cylinder4.CrankAngle.frame_b.t[3]}) - {engine.cylinder4.CrankAngle.r[2] * engine.cylinder4.CrankAngle.frame_a.f[3] - engine.cylinder4.CrankAngle.r[3] * engine.cylinder4.CrankAngle.frame_a.f[2],engine.cylinder4.CrankAngle.r[3] * engine.cylinder4.CrankAngle.frame_a.f[1] - engine.cylinder4.CrankAngle.r[1] * engine.cylinder4.CrankAngle.frame_a.f[3],engine.cylinder4.CrankAngle.r[1] * engine.cylinder4.CrankAngle.frame_a.f[2] - engine.cylinder4.CrankAngle.r[2] * engine.cylinder4.CrankAngle.frame_a.f[1]};
//   engine.cylinder4.jointRRP.jointUSP.prismatic.axis.f = engine.cylinder4.jointRRP.jointUSP.prismatic.f;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.axis.s = engine.cylinder4.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.bearing.s = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.distance = engine.cylinder4.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder4.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.distance * engine.cylinder4.jointRRP.jointUSP.prismatic.e[1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.distance * engine.cylinder4.jointRRP.jointUSP.prismatic.e[2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.distance * engine.cylinder4.jointRRP.jointUSP.prismatic.e[3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R,{engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[1],engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[2],engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[3]});
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[1] + engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[1];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[2] + engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[2];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[3] + engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[3];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[1] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[3] + (-engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[2])));
//   0.0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[2] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[1] + (-engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[3])));
//   0.0 = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[3] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[2] + (-engine.cylinder4.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[1])));
//   engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[1] - engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[2] - engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.r_b[3] - engine.cylinder4.jointRRP.jointUSP.prismatic.r_a[3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.B = 2.0 * (engine.cylinder4.jointRRP.jointUSP.prismatic.e[1] * engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[1] + (engine.cylinder4.jointRRP.jointUSP.prismatic.e[2] * engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[2] + engine.cylinder4.jointRRP.jointUSP.prismatic.e[3] * engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[3]));
//   engine.cylinder4.jointRRP.jointUSP.prismatic.C = engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[1] ^ 2.0 + (engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[2] ^ 2.0 + engine.cylinder4.jointRRP.jointUSP.prismatic.rbra[3] ^ 2.0) - engine.cylinder4.jointRRP.jointUSP.prismatic.length ^ 2.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.k1 = engine.cylinder4.jointRRP.jointUSP.prismatic.B / 2.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.k1a = engine.cylinder4.jointRRP.jointUSP.prismatic.k1 ^ 2.0 - engine.cylinder4.jointRRP.jointUSP.prismatic.C;
//   assert(noEvent(engine.cylinder4.jointRRP.jointUSP.prismatic.k1a > 1e-10),"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   engine.cylinder4.jointRRP.jointUSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(engine.cylinder4.jointRRP.jointUSP.prismatic.k1a,1e-12);
//   engine.cylinder4.jointRRP.jointUSP.prismatic.k2 = sqrt(engine.cylinder4.jointRRP.jointUSP.prismatic.k1b);
//   engine.cylinder4.jointRRP.jointUSP.prismatic.distance = (if engine.cylinder4.jointRRP.jointUSP.prismatic.positiveBranch then engine.cylinder4.jointRRP.jointUSP.prismatic.k2 else -engine.cylinder4.jointRRP.jointUSP.prismatic.k2) - engine.cylinder4.jointRRP.jointUSP.prismatic.k1;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[1] - engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[2] - engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[3] - engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R,{engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[1],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[2],engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[3]});
//   engine.cylinder4.jointRRP.jointUSP.rod1.constraintResidue = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1] = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[1] / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2] = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[2] / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3] = engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[3] / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[1] = engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2];
//   engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[2] = engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3];
//   engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[3] = engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1];
//   engine.cylinder4.jointRRP.jointUSP.rod1.length2_n2_a = engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[1] ^ 2.0 + (engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[2] ^ 2.0 + engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[3] ^ 2.0);
//   assert(engine.cylinder4.jointRRP.jointUSP.rod1.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   engine.cylinder4.jointRRP.jointUSP.rod1.length_n2_a = sqrt(engine.cylinder4.jointRRP.jointUSP.rod1.length2_n2_a);
//   engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] = engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[1] / engine.cylinder4.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] = engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[2] / engine.cylinder4.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] = engine.cylinder4.jointRRP.jointUSP.rod1.n2_a[3] / engine.cylinder4.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1] = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] - engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2];
//   engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2] = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] - engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3];
//   engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3] = engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] - engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1];
//   engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R,{der(engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[1]),der(engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[2]),der(engine.cylinder4.jointRRP.jointUSP.rod1.rRod_0[3])}) - {engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[3] - engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[2],engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[1] - engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[3],engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[2] - engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[1]}) / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[1] = (engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1] * (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[3] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[2]) + (engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2] * (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[1] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[3]) + engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3] * (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[2] - engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[1]))) / engine.cylinder4.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[2] = (-engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1]) * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + ((-engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2]) * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + (-engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3]) * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[3] = engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3]},{engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1],engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2],engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3]},{engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1],engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2],engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3]}},{engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[1],engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[2],engine.cylinder4.jointRRP.jointUSP.rod1.w_rel_ia1[3]});
//   engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[1],engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[1],engine.cylinder4.jointRRP.jointUSP.rod1.e3_ia[1]},{engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[2],engine.cylinder4.jointRRP.jointUSP.rod1.e3_ia[2]},{engine.cylinder4.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder4.jointRRP.jointUSP.rod1.e2_ia[3],engine.cylinder4.jointRRP.jointUSP.rod1.e3_ia[3]}},{0.0,0.0,0.0});
//   engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia1,engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia2);
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia);
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[1],engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[2],engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[3]});
//   engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[1],engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[2],engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[3]});
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[1] = ((-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] * 1.0 / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1] / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[2] = ((-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] * 1.0 / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2] / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[3] = ((-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] * 1.0 / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder4.jointRRP.jointUSP.rod1.e3_a[3] / engine.cylinder4.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[1] = (-engine.cylinder4.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1] + engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[1];
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[2] = (-engine.cylinder4.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[2];
//   engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[3] = (-engine.cylinder4.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3] + engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[3];
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[1],engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[2],engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[3]},engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[3] = 0.0;
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[1] + engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a[1]);
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[2] + engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a[2]);
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[3] + engine.cylinder4.jointRRP.jointUSP.rod1.f_ia_a[3]);
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[3] + (-engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[2])));
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[1] + (-engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[3])));
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.t_ia_a[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[2] + (-engine.cylinder4.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a[1])));
//   engine.cylinder4.jointRRP.jointUSP.rod1.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R,{engine.cylinder4.jointRRP.jointUSP.rod2.r[1],engine.cylinder4.jointRRP.jointUSP.rod2.r[2],engine.cylinder4.jointRRP.jointUSP.rod2.r[3]});
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[1] + engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[1];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[2] + engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[2];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[3] + engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[3];
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[1] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder4.jointRRP.jointUSP.rod2.r[2] * engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[3] + (-engine.cylinder4.jointRRP.jointUSP.rod2.r[3] * engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[2])));
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[2] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder4.jointRRP.jointUSP.rod2.r[3] * engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[1] + (-engine.cylinder4.jointRRP.jointUSP.rod2.r[1] * engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[3])));
//   0.0 = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[3] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder4.jointRRP.jointUSP.rod2.r[1] * engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[2] + (-engine.cylinder4.jointRRP.jointUSP.rod2.r[2] * engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[1])));
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R,{engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1] - engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1],engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2] - engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2],engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3] - engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   assert(true,"Connector frame_resolve must be connected exactly once");
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   engine.cylinder4.jointRRP.jointUSP.position_b[1].y = engine.cylinder4.jointRRP.jointUSP.position_b[1].k;
//   engine.cylinder4.jointRRP.jointUSP.position_b[2].y = engine.cylinder4.jointRRP.jointUSP.position_b[2].k;
//   engine.cylinder4.jointRRP.jointUSP.position_b[3].y = engine.cylinder4.jointRRP.jointUSP.position_b[3].k;
//   engine.cylinder4.jointRRP.jointUSP.aux = {engine.cylinder4.jointRRP.jointUSP.prismatic.e[1],engine.cylinder4.jointRRP.jointUSP.prismatic.e[2],engine.cylinder4.jointRRP.jointUSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder4.jointRRP.jointUSP.rod1.eRod_a[3]},engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder4.jointRRP.jointUSP.f_rod = ((-engine.cylinder4.jointRRP.jointUSP.prismatic.f) - {engine.cylinder4.jointRRP.jointUSP.prismatic.e[1],engine.cylinder4.jointRRP.jointUSP.prismatic.e[2],engine.cylinder4.jointRRP.jointUSP.prismatic.e[3]} * ({engine.cylinder4.jointRRP.jointUSP.frame_ib.f[1] + engine.cylinder4.jointRRP.jointUSP.frame_im.f[1],engine.cylinder4.jointRRP.jointUSP.frame_ib.f[2] + engine.cylinder4.jointRRP.jointUSP.frame_im.f[2],engine.cylinder4.jointRRP.jointUSP.frame_ib.f[3] + engine.cylinder4.jointRRP.jointUSP.frame_im.f[3]} - Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[1],engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[2],engine.cylinder4.jointRRP.jointUSP.rod1.f_b_a1[3]},engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R))) / (if noEvent(abs(engine.cylinder4.jointRRP.jointUSP.aux) < 1e-10) then 1e-10 else engine.cylinder4.jointRRP.jointUSP.aux);
//   engine.cylinder4.jointRRP.jointUSP.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder4.Rod.frameTranslation.frame_b.r_0 = engine.cylinder4.Rod.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Rod.frameTranslation.frame_a.R,{engine.cylinder4.Rod.frameTranslation.r[1],engine.cylinder4.Rod.frameTranslation.r[2],engine.cylinder4.Rod.frameTranslation.r[3]});
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder4.Rod.frameTranslation.frame_a.f[1] + engine.cylinder4.Rod.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder4.Rod.frameTranslation.frame_a.f[2] + engine.cylinder4.Rod.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder4.Rod.frameTranslation.frame_a.f[3] + engine.cylinder4.Rod.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder4.Rod.frameTranslation.frame_a.t[1] + (engine.cylinder4.Rod.frameTranslation.frame_b.t[1] + (engine.cylinder4.Rod.frameTranslation.r[2] * engine.cylinder4.Rod.frameTranslation.frame_b.f[3] + (-engine.cylinder4.Rod.frameTranslation.r[3] * engine.cylinder4.Rod.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder4.Rod.frameTranslation.frame_a.t[2] + (engine.cylinder4.Rod.frameTranslation.frame_b.t[2] + (engine.cylinder4.Rod.frameTranslation.r[3] * engine.cylinder4.Rod.frameTranslation.frame_b.f[1] + (-engine.cylinder4.Rod.frameTranslation.r[1] * engine.cylinder4.Rod.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder4.Rod.frameTranslation.frame_a.t[3] + (engine.cylinder4.Rod.frameTranslation.frame_b.t[3] + (engine.cylinder4.Rod.frameTranslation.r[1] * engine.cylinder4.Rod.frameTranslation.frame_b.f[2] + (-engine.cylinder4.Rod.frameTranslation.r[2] * engine.cylinder4.Rod.frameTranslation.frame_b.f[1])));
//   engine.cylinder4.Rod.body.r_0[1] = engine.cylinder4.Rod.body.frame_a.r_0[1];
//   engine.cylinder4.Rod.body.r_0[2] = engine.cylinder4.Rod.body.frame_a.r_0[2];
//   engine.cylinder4.Rod.body.r_0[3] = engine.cylinder4.Rod.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder4.Rod.body.Q[1] = 0.0;
//   engine.cylinder4.Rod.body.Q[2] = 0.0;
//   engine.cylinder4.Rod.body.Q[3] = 0.0;
//   engine.cylinder4.Rod.body.Q[4] = 1.0;
//   engine.cylinder4.Rod.body.phi[1] = 0.0;
//   engine.cylinder4.Rod.body.phi[2] = 0.0;
//   engine.cylinder4.Rod.body.phi[3] = 0.0;
//   engine.cylinder4.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder4.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder4.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder4.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder4.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder4.Rod.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder4.Rod.body.useQuaternions then
//   engine.cylinder4.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder4.Rod.body.Q[1],engine.cylinder4.Rod.body.Q[2],engine.cylinder4.Rod.body.Q[3],engine.cylinder4.Rod.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder4.Rod.body.Q[1],engine.cylinder4.Rod.body.Q[2],engine.cylinder4.Rod.body.Q[3],engine.cylinder4.Rod.body.Q[4]},{der(engine.cylinder4.Rod.body.Q[1]),der(engine.cylinder4.Rod.body.Q[2]),der(engine.cylinder4.Rod.body.Q[3]),der(engine.cylinder4.Rod.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder4.Rod.body.Q[1],engine.cylinder4.Rod.body.Q[2],engine.cylinder4.Rod.body.Q[3],engine.cylinder4.Rod.body.Q[4]});
//   engine.cylinder4.Rod.body.phi[1] = 0.0;
//   engine.cylinder4.Rod.body.phi[2] = 0.0;
//   engine.cylinder4.Rod.body.phi[3] = 0.0;
//   engine.cylinder4.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder4.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder4.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder4.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder4.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder4.Rod.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder4.Rod.body.phi_d[1] = der(engine.cylinder4.Rod.body.phi[1]);
//   engine.cylinder4.Rod.body.phi_d[2] = der(engine.cylinder4.Rod.body.phi[2]);
//   engine.cylinder4.Rod.body.phi_d[3] = der(engine.cylinder4.Rod.body.phi[3]);
//   engine.cylinder4.Rod.body.phi_dd[1] = der(engine.cylinder4.Rod.body.phi_d[1]);
//   engine.cylinder4.Rod.body.phi_dd[2] = der(engine.cylinder4.Rod.body.phi_d[2]);
//   engine.cylinder4.Rod.body.phi_dd[3] = der(engine.cylinder4.Rod.body.phi_d[3]);
//   engine.cylinder4.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder4.Rod.body.sequence_angleStates[1],engine.cylinder4.Rod.body.sequence_angleStates[2],engine.cylinder4.Rod.body.sequence_angleStates[3]},{engine.cylinder4.Rod.body.phi[1],engine.cylinder4.Rod.body.phi[2],engine.cylinder4.Rod.body.phi[3]},{engine.cylinder4.Rod.body.phi_d[1],engine.cylinder4.Rod.body.phi_d[2],engine.cylinder4.Rod.body.phi_d[3]});
//   engine.cylinder4.Rod.body.Q[1] = 0.0;
//   engine.cylinder4.Rod.body.Q[2] = 0.0;
//   engine.cylinder4.Rod.body.Q[3] = 0.0;
//   engine.cylinder4.Rod.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder4.Rod.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder4.Rod.body.frame_a.r_0[1],engine.cylinder4.Rod.body.frame_a.r_0[2],engine.cylinder4.Rod.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Rod.body.frame_a.R,{engine.cylinder4.Rod.body.r_CM[1],engine.cylinder4.Rod.body.r_CM[2],engine.cylinder4.Rod.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder4.Rod.body.v_0[1] = der(engine.cylinder4.Rod.body.frame_a.r_0[1]);
//   engine.cylinder4.Rod.body.v_0[2] = der(engine.cylinder4.Rod.body.frame_a.r_0[2]);
//   engine.cylinder4.Rod.body.v_0[3] = der(engine.cylinder4.Rod.body.frame_a.r_0[3]);
//   engine.cylinder4.Rod.body.a_0[1] = der(engine.cylinder4.Rod.body.v_0[1]);
//   engine.cylinder4.Rod.body.a_0[2] = der(engine.cylinder4.Rod.body.v_0[2]);
//   engine.cylinder4.Rod.body.a_0[3] = der(engine.cylinder4.Rod.body.v_0[3]);
//   engine.cylinder4.Rod.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder4.Rod.body.frame_a.R);
//   engine.cylinder4.Rod.body.z_a[1] = der(engine.cylinder4.Rod.body.w_a[1]);
//   engine.cylinder4.Rod.body.z_a[2] = der(engine.cylinder4.Rod.body.w_a[2]);
//   engine.cylinder4.Rod.body.z_a[3] = der(engine.cylinder4.Rod.body.w_a[3]);
//   engine.cylinder4.Rod.body.frame_a.f = engine.cylinder4.Rod.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Rod.body.frame_a.R,{engine.cylinder4.Rod.body.a_0[1] - engine.cylinder4.Rod.body.g_0[1],engine.cylinder4.Rod.body.a_0[2] - engine.cylinder4.Rod.body.g_0[2],engine.cylinder4.Rod.body.a_0[3] - engine.cylinder4.Rod.body.g_0[3]}) + {engine.cylinder4.Rod.body.z_a[2] * engine.cylinder4.Rod.body.r_CM[3] - engine.cylinder4.Rod.body.z_a[3] * engine.cylinder4.Rod.body.r_CM[2],engine.cylinder4.Rod.body.z_a[3] * engine.cylinder4.Rod.body.r_CM[1] - engine.cylinder4.Rod.body.z_a[1] * engine.cylinder4.Rod.body.r_CM[3],engine.cylinder4.Rod.body.z_a[1] * engine.cylinder4.Rod.body.r_CM[2] - engine.cylinder4.Rod.body.z_a[2] * engine.cylinder4.Rod.body.r_CM[1]} + {engine.cylinder4.Rod.body.w_a[2] * (engine.cylinder4.Rod.body.w_a[1] * engine.cylinder4.Rod.body.r_CM[2] - engine.cylinder4.Rod.body.w_a[2] * engine.cylinder4.Rod.body.r_CM[1]) - engine.cylinder4.Rod.body.w_a[3] * (engine.cylinder4.Rod.body.w_a[3] * engine.cylinder4.Rod.body.r_CM[1] - engine.cylinder4.Rod.body.w_a[1] * engine.cylinder4.Rod.body.r_CM[3]),engine.cylinder4.Rod.body.w_a[3] * (engine.cylinder4.Rod.body.w_a[2] * engine.cylinder4.Rod.body.r_CM[3] - engine.cylinder4.Rod.body.w_a[3] * engine.cylinder4.Rod.body.r_CM[2]) - engine.cylinder4.Rod.body.w_a[1] * (engine.cylinder4.Rod.body.w_a[1] * engine.cylinder4.Rod.body.r_CM[2] - engine.cylinder4.Rod.body.w_a[2] * engine.cylinder4.Rod.body.r_CM[1]),engine.cylinder4.Rod.body.w_a[1] * (engine.cylinder4.Rod.body.w_a[3] * engine.cylinder4.Rod.body.r_CM[1] - engine.cylinder4.Rod.body.w_a[1] * engine.cylinder4.Rod.body.r_CM[3]) - engine.cylinder4.Rod.body.w_a[2] * (engine.cylinder4.Rod.body.w_a[2] * engine.cylinder4.Rod.body.r_CM[3] - engine.cylinder4.Rod.body.w_a[3] * engine.cylinder4.Rod.body.r_CM[2])});
//   engine.cylinder4.Rod.body.frame_a.t[1] = engine.cylinder4.Rod.body.I[1,1] * engine.cylinder4.Rod.body.z_a[1] + (engine.cylinder4.Rod.body.I[1,2] * engine.cylinder4.Rod.body.z_a[2] + (engine.cylinder4.Rod.body.I[1,3] * engine.cylinder4.Rod.body.z_a[3] + (engine.cylinder4.Rod.body.w_a[2] * (engine.cylinder4.Rod.body.I[3,1] * engine.cylinder4.Rod.body.w_a[1] + (engine.cylinder4.Rod.body.I[3,2] * engine.cylinder4.Rod.body.w_a[2] + engine.cylinder4.Rod.body.I[3,3] * engine.cylinder4.Rod.body.w_a[3])) + ((-engine.cylinder4.Rod.body.w_a[3] * (engine.cylinder4.Rod.body.I[2,1] * engine.cylinder4.Rod.body.w_a[1] + (engine.cylinder4.Rod.body.I[2,2] * engine.cylinder4.Rod.body.w_a[2] + engine.cylinder4.Rod.body.I[2,3] * engine.cylinder4.Rod.body.w_a[3]))) + (engine.cylinder4.Rod.body.r_CM[2] * engine.cylinder4.Rod.body.frame_a.f[3] + (-engine.cylinder4.Rod.body.r_CM[3] * engine.cylinder4.Rod.body.frame_a.f[2]))))));
//   engine.cylinder4.Rod.body.frame_a.t[2] = engine.cylinder4.Rod.body.I[2,1] * engine.cylinder4.Rod.body.z_a[1] + (engine.cylinder4.Rod.body.I[2,2] * engine.cylinder4.Rod.body.z_a[2] + (engine.cylinder4.Rod.body.I[2,3] * engine.cylinder4.Rod.body.z_a[3] + (engine.cylinder4.Rod.body.w_a[3] * (engine.cylinder4.Rod.body.I[1,1] * engine.cylinder4.Rod.body.w_a[1] + (engine.cylinder4.Rod.body.I[1,2] * engine.cylinder4.Rod.body.w_a[2] + engine.cylinder4.Rod.body.I[1,3] * engine.cylinder4.Rod.body.w_a[3])) + ((-engine.cylinder4.Rod.body.w_a[1] * (engine.cylinder4.Rod.body.I[3,1] * engine.cylinder4.Rod.body.w_a[1] + (engine.cylinder4.Rod.body.I[3,2] * engine.cylinder4.Rod.body.w_a[2] + engine.cylinder4.Rod.body.I[3,3] * engine.cylinder4.Rod.body.w_a[3]))) + (engine.cylinder4.Rod.body.r_CM[3] * engine.cylinder4.Rod.body.frame_a.f[1] + (-engine.cylinder4.Rod.body.r_CM[1] * engine.cylinder4.Rod.body.frame_a.f[3]))))));
//   engine.cylinder4.Rod.body.frame_a.t[3] = engine.cylinder4.Rod.body.I[3,1] * engine.cylinder4.Rod.body.z_a[1] + (engine.cylinder4.Rod.body.I[3,2] * engine.cylinder4.Rod.body.z_a[2] + (engine.cylinder4.Rod.body.I[3,3] * engine.cylinder4.Rod.body.z_a[3] + (engine.cylinder4.Rod.body.w_a[1] * (engine.cylinder4.Rod.body.I[2,1] * engine.cylinder4.Rod.body.w_a[1] + (engine.cylinder4.Rod.body.I[2,2] * engine.cylinder4.Rod.body.w_a[2] + engine.cylinder4.Rod.body.I[2,3] * engine.cylinder4.Rod.body.w_a[3])) + ((-engine.cylinder4.Rod.body.w_a[2] * (engine.cylinder4.Rod.body.I[1,1] * engine.cylinder4.Rod.body.w_a[1] + (engine.cylinder4.Rod.body.I[1,2] * engine.cylinder4.Rod.body.w_a[2] + engine.cylinder4.Rod.body.I[1,3] * engine.cylinder4.Rod.body.w_a[3]))) + (engine.cylinder4.Rod.body.r_CM[1] * engine.cylinder4.Rod.body.frame_a.f[2] + (-engine.cylinder4.Rod.body.r_CM[2] * engine.cylinder4.Rod.body.frame_a.f[1]))))));
//   engine.cylinder4.Rod.shape1.R.T[1,1] = engine.cylinder4.Rod.frame_a.R.T[1,1];
//   engine.cylinder4.Rod.shape1.R.T[1,2] = engine.cylinder4.Rod.frame_a.R.T[1,2];
//   engine.cylinder4.Rod.shape1.R.T[1,3] = engine.cylinder4.Rod.frame_a.R.T[1,3];
//   engine.cylinder4.Rod.shape1.R.T[2,1] = engine.cylinder4.Rod.frame_a.R.T[2,1];
//   engine.cylinder4.Rod.shape1.R.T[2,2] = engine.cylinder4.Rod.frame_a.R.T[2,2];
//   engine.cylinder4.Rod.shape1.R.T[2,3] = engine.cylinder4.Rod.frame_a.R.T[2,3];
//   engine.cylinder4.Rod.shape1.R.T[3,1] = engine.cylinder4.Rod.frame_a.R.T[3,1];
//   engine.cylinder4.Rod.shape1.R.T[3,2] = engine.cylinder4.Rod.frame_a.R.T[3,2];
//   engine.cylinder4.Rod.shape1.R.T[3,3] = engine.cylinder4.Rod.frame_a.R.T[3,3];
//   engine.cylinder4.Rod.shape1.R.w[1] = engine.cylinder4.Rod.frame_a.R.w[1];
//   engine.cylinder4.Rod.shape1.R.w[2] = engine.cylinder4.Rod.frame_a.R.w[2];
//   engine.cylinder4.Rod.shape1.R.w[3] = engine.cylinder4.Rod.frame_a.R.w[3];
//   engine.cylinder4.Rod.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder4.Rod.shape1.shapeType);
//   engine.cylinder4.Rod.shape1.rxvisobj[1] = engine.cylinder4.Rod.shape1.R.T[1,1] * engine.cylinder4.Rod.shape1.e_x[1] + (engine.cylinder4.Rod.shape1.R.T[2,1] * engine.cylinder4.Rod.shape1.e_x[2] + engine.cylinder4.Rod.shape1.R.T[3,1] * engine.cylinder4.Rod.shape1.e_x[3]);
//   engine.cylinder4.Rod.shape1.rxvisobj[2] = engine.cylinder4.Rod.shape1.R.T[1,2] * engine.cylinder4.Rod.shape1.e_x[1] + (engine.cylinder4.Rod.shape1.R.T[2,2] * engine.cylinder4.Rod.shape1.e_x[2] + engine.cylinder4.Rod.shape1.R.T[3,2] * engine.cylinder4.Rod.shape1.e_x[3]);
//   engine.cylinder4.Rod.shape1.rxvisobj[3] = engine.cylinder4.Rod.shape1.R.T[1,3] * engine.cylinder4.Rod.shape1.e_x[1] + (engine.cylinder4.Rod.shape1.R.T[2,3] * engine.cylinder4.Rod.shape1.e_x[2] + engine.cylinder4.Rod.shape1.R.T[3,3] * engine.cylinder4.Rod.shape1.e_x[3]);
//   engine.cylinder4.Rod.shape1.ryvisobj[1] = engine.cylinder4.Rod.shape1.R.T[1,1] * engine.cylinder4.Rod.shape1.e_y[1] + (engine.cylinder4.Rod.shape1.R.T[2,1] * engine.cylinder4.Rod.shape1.e_y[2] + engine.cylinder4.Rod.shape1.R.T[3,1] * engine.cylinder4.Rod.shape1.e_y[3]);
//   engine.cylinder4.Rod.shape1.ryvisobj[2] = engine.cylinder4.Rod.shape1.R.T[1,2] * engine.cylinder4.Rod.shape1.e_y[1] + (engine.cylinder4.Rod.shape1.R.T[2,2] * engine.cylinder4.Rod.shape1.e_y[2] + engine.cylinder4.Rod.shape1.R.T[3,2] * engine.cylinder4.Rod.shape1.e_y[3]);
//   engine.cylinder4.Rod.shape1.ryvisobj[3] = engine.cylinder4.Rod.shape1.R.T[1,3] * engine.cylinder4.Rod.shape1.e_y[1] + (engine.cylinder4.Rod.shape1.R.T[2,3] * engine.cylinder4.Rod.shape1.e_y[2] + engine.cylinder4.Rod.shape1.R.T[3,3] * engine.cylinder4.Rod.shape1.e_y[3]);
//   engine.cylinder4.Rod.shape1.rvisobj = engine.cylinder4.Rod.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder4.Rod.shape1.R.T[1,1],engine.cylinder4.Rod.shape1.R.T[1,2],engine.cylinder4.Rod.shape1.R.T[1,3]},{engine.cylinder4.Rod.shape1.R.T[2,1],engine.cylinder4.Rod.shape1.R.T[2,2],engine.cylinder4.Rod.shape1.R.T[2,3]},{engine.cylinder4.Rod.shape1.R.T[3,1],engine.cylinder4.Rod.shape1.R.T[3,2],engine.cylinder4.Rod.shape1.R.T[3,3]}},{engine.cylinder4.Rod.shape1.r_shape[1],engine.cylinder4.Rod.shape1.r_shape[2],engine.cylinder4.Rod.shape1.r_shape[3]});
//   engine.cylinder4.Rod.shape1.size[1] = engine.cylinder4.Rod.shape1.length;
//   engine.cylinder4.Rod.shape1.size[2] = engine.cylinder4.Rod.shape1.width;
//   engine.cylinder4.Rod.shape1.size[3] = engine.cylinder4.Rod.shape1.height;
//   engine.cylinder4.Rod.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder4.Rod.shape1.color[1] / 255.0,engine.cylinder4.Rod.shape1.color[2] / 255.0,engine.cylinder4.Rod.shape1.color[3] / 255.0,engine.cylinder4.Rod.shape1.specularCoefficient);
//   engine.cylinder4.Rod.shape1.Extra = engine.cylinder4.Rod.shape1.extra;
//   engine.cylinder4.Rod.r_0[1] = engine.cylinder4.Rod.frame_a.r_0[1];
//   engine.cylinder4.Rod.r_0[2] = engine.cylinder4.Rod.frame_a.r_0[2];
//   engine.cylinder4.Rod.r_0[3] = engine.cylinder4.Rod.frame_a.r_0[3];
//   engine.cylinder4.Rod.v_0[1] = der(engine.cylinder4.Rod.r_0[1]);
//   engine.cylinder4.Rod.v_0[2] = der(engine.cylinder4.Rod.r_0[2]);
//   engine.cylinder4.Rod.v_0[3] = der(engine.cylinder4.Rod.r_0[3]);
//   engine.cylinder4.Rod.a_0[1] = der(engine.cylinder4.Rod.v_0[1]);
//   engine.cylinder4.Rod.a_0[2] = der(engine.cylinder4.Rod.v_0[2]);
//   engine.cylinder4.Rod.a_0[3] = der(engine.cylinder4.Rod.v_0[3]);
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0 = engine.cylinder4.Piston.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Piston.frameTranslation.frame_a.R,{engine.cylinder4.Piston.frameTranslation.r[1],engine.cylinder4.Piston.frameTranslation.r[2],engine.cylinder4.Piston.frameTranslation.r[3]});
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder4.Piston.frameTranslation.frame_a.f[1] + engine.cylinder4.Piston.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder4.Piston.frameTranslation.frame_a.f[2] + engine.cylinder4.Piston.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder4.Piston.frameTranslation.frame_a.f[3] + engine.cylinder4.Piston.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder4.Piston.frameTranslation.frame_a.t[1] + (engine.cylinder4.Piston.frameTranslation.frame_b.t[1] + (engine.cylinder4.Piston.frameTranslation.r[2] * engine.cylinder4.Piston.frameTranslation.frame_b.f[3] + (-engine.cylinder4.Piston.frameTranslation.r[3] * engine.cylinder4.Piston.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder4.Piston.frameTranslation.frame_a.t[2] + (engine.cylinder4.Piston.frameTranslation.frame_b.t[2] + (engine.cylinder4.Piston.frameTranslation.r[3] * engine.cylinder4.Piston.frameTranslation.frame_b.f[1] + (-engine.cylinder4.Piston.frameTranslation.r[1] * engine.cylinder4.Piston.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder4.Piston.frameTranslation.frame_a.t[3] + (engine.cylinder4.Piston.frameTranslation.frame_b.t[3] + (engine.cylinder4.Piston.frameTranslation.r[1] * engine.cylinder4.Piston.frameTranslation.frame_b.f[2] + (-engine.cylinder4.Piston.frameTranslation.r[2] * engine.cylinder4.Piston.frameTranslation.frame_b.f[1])));
//   engine.cylinder4.Piston.body.r_0[1] = engine.cylinder4.Piston.body.frame_a.r_0[1];
//   engine.cylinder4.Piston.body.r_0[2] = engine.cylinder4.Piston.body.frame_a.r_0[2];
//   engine.cylinder4.Piston.body.r_0[3] = engine.cylinder4.Piston.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder4.Piston.body.Q[1] = 0.0;
//   engine.cylinder4.Piston.body.Q[2] = 0.0;
//   engine.cylinder4.Piston.body.Q[3] = 0.0;
//   engine.cylinder4.Piston.body.Q[4] = 1.0;
//   engine.cylinder4.Piston.body.phi[1] = 0.0;
//   engine.cylinder4.Piston.body.phi[2] = 0.0;
//   engine.cylinder4.Piston.body.phi[3] = 0.0;
//   engine.cylinder4.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder4.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder4.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder4.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder4.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder4.Piston.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder4.Piston.body.useQuaternions then
//   engine.cylinder4.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder4.Piston.body.Q[1],engine.cylinder4.Piston.body.Q[2],engine.cylinder4.Piston.body.Q[3],engine.cylinder4.Piston.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder4.Piston.body.Q[1],engine.cylinder4.Piston.body.Q[2],engine.cylinder4.Piston.body.Q[3],engine.cylinder4.Piston.body.Q[4]},{der(engine.cylinder4.Piston.body.Q[1]),der(engine.cylinder4.Piston.body.Q[2]),der(engine.cylinder4.Piston.body.Q[3]),der(engine.cylinder4.Piston.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder4.Piston.body.Q[1],engine.cylinder4.Piston.body.Q[2],engine.cylinder4.Piston.body.Q[3],engine.cylinder4.Piston.body.Q[4]});
//   engine.cylinder4.Piston.body.phi[1] = 0.0;
//   engine.cylinder4.Piston.body.phi[2] = 0.0;
//   engine.cylinder4.Piston.body.phi[3] = 0.0;
//   engine.cylinder4.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder4.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder4.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder4.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder4.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder4.Piston.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder4.Piston.body.phi_d[1] = der(engine.cylinder4.Piston.body.phi[1]);
//   engine.cylinder4.Piston.body.phi_d[2] = der(engine.cylinder4.Piston.body.phi[2]);
//   engine.cylinder4.Piston.body.phi_d[3] = der(engine.cylinder4.Piston.body.phi[3]);
//   engine.cylinder4.Piston.body.phi_dd[1] = der(engine.cylinder4.Piston.body.phi_d[1]);
//   engine.cylinder4.Piston.body.phi_dd[2] = der(engine.cylinder4.Piston.body.phi_d[2]);
//   engine.cylinder4.Piston.body.phi_dd[3] = der(engine.cylinder4.Piston.body.phi_d[3]);
//   engine.cylinder4.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder4.Piston.body.sequence_angleStates[1],engine.cylinder4.Piston.body.sequence_angleStates[2],engine.cylinder4.Piston.body.sequence_angleStates[3]},{engine.cylinder4.Piston.body.phi[1],engine.cylinder4.Piston.body.phi[2],engine.cylinder4.Piston.body.phi[3]},{engine.cylinder4.Piston.body.phi_d[1],engine.cylinder4.Piston.body.phi_d[2],engine.cylinder4.Piston.body.phi_d[3]});
//   engine.cylinder4.Piston.body.Q[1] = 0.0;
//   engine.cylinder4.Piston.body.Q[2] = 0.0;
//   engine.cylinder4.Piston.body.Q[3] = 0.0;
//   engine.cylinder4.Piston.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder4.Piston.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder4.Piston.body.frame_a.r_0[1],engine.cylinder4.Piston.body.frame_a.r_0[2],engine.cylinder4.Piston.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Piston.body.frame_a.R,{engine.cylinder4.Piston.body.r_CM[1],engine.cylinder4.Piston.body.r_CM[2],engine.cylinder4.Piston.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder4.Piston.body.v_0[1] = der(engine.cylinder4.Piston.body.frame_a.r_0[1]);
//   engine.cylinder4.Piston.body.v_0[2] = der(engine.cylinder4.Piston.body.frame_a.r_0[2]);
//   engine.cylinder4.Piston.body.v_0[3] = der(engine.cylinder4.Piston.body.frame_a.r_0[3]);
//   engine.cylinder4.Piston.body.a_0[1] = der(engine.cylinder4.Piston.body.v_0[1]);
//   engine.cylinder4.Piston.body.a_0[2] = der(engine.cylinder4.Piston.body.v_0[2]);
//   engine.cylinder4.Piston.body.a_0[3] = der(engine.cylinder4.Piston.body.v_0[3]);
//   engine.cylinder4.Piston.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder4.Piston.body.frame_a.R);
//   engine.cylinder4.Piston.body.z_a[1] = der(engine.cylinder4.Piston.body.w_a[1]);
//   engine.cylinder4.Piston.body.z_a[2] = der(engine.cylinder4.Piston.body.w_a[2]);
//   engine.cylinder4.Piston.body.z_a[3] = der(engine.cylinder4.Piston.body.w_a[3]);
//   engine.cylinder4.Piston.body.frame_a.f = engine.cylinder4.Piston.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder4.Piston.body.frame_a.R,{engine.cylinder4.Piston.body.a_0[1] - engine.cylinder4.Piston.body.g_0[1],engine.cylinder4.Piston.body.a_0[2] - engine.cylinder4.Piston.body.g_0[2],engine.cylinder4.Piston.body.a_0[3] - engine.cylinder4.Piston.body.g_0[3]}) + {engine.cylinder4.Piston.body.z_a[2] * engine.cylinder4.Piston.body.r_CM[3] - engine.cylinder4.Piston.body.z_a[3] * engine.cylinder4.Piston.body.r_CM[2],engine.cylinder4.Piston.body.z_a[3] * engine.cylinder4.Piston.body.r_CM[1] - engine.cylinder4.Piston.body.z_a[1] * engine.cylinder4.Piston.body.r_CM[3],engine.cylinder4.Piston.body.z_a[1] * engine.cylinder4.Piston.body.r_CM[2] - engine.cylinder4.Piston.body.z_a[2] * engine.cylinder4.Piston.body.r_CM[1]} + {engine.cylinder4.Piston.body.w_a[2] * (engine.cylinder4.Piston.body.w_a[1] * engine.cylinder4.Piston.body.r_CM[2] - engine.cylinder4.Piston.body.w_a[2] * engine.cylinder4.Piston.body.r_CM[1]) - engine.cylinder4.Piston.body.w_a[3] * (engine.cylinder4.Piston.body.w_a[3] * engine.cylinder4.Piston.body.r_CM[1] - engine.cylinder4.Piston.body.w_a[1] * engine.cylinder4.Piston.body.r_CM[3]),engine.cylinder4.Piston.body.w_a[3] * (engine.cylinder4.Piston.body.w_a[2] * engine.cylinder4.Piston.body.r_CM[3] - engine.cylinder4.Piston.body.w_a[3] * engine.cylinder4.Piston.body.r_CM[2]) - engine.cylinder4.Piston.body.w_a[1] * (engine.cylinder4.Piston.body.w_a[1] * engine.cylinder4.Piston.body.r_CM[2] - engine.cylinder4.Piston.body.w_a[2] * engine.cylinder4.Piston.body.r_CM[1]),engine.cylinder4.Piston.body.w_a[1] * (engine.cylinder4.Piston.body.w_a[3] * engine.cylinder4.Piston.body.r_CM[1] - engine.cylinder4.Piston.body.w_a[1] * engine.cylinder4.Piston.body.r_CM[3]) - engine.cylinder4.Piston.body.w_a[2] * (engine.cylinder4.Piston.body.w_a[2] * engine.cylinder4.Piston.body.r_CM[3] - engine.cylinder4.Piston.body.w_a[3] * engine.cylinder4.Piston.body.r_CM[2])});
//   engine.cylinder4.Piston.body.frame_a.t[1] = engine.cylinder4.Piston.body.I[1,1] * engine.cylinder4.Piston.body.z_a[1] + (engine.cylinder4.Piston.body.I[1,2] * engine.cylinder4.Piston.body.z_a[2] + (engine.cylinder4.Piston.body.I[1,3] * engine.cylinder4.Piston.body.z_a[3] + (engine.cylinder4.Piston.body.w_a[2] * (engine.cylinder4.Piston.body.I[3,1] * engine.cylinder4.Piston.body.w_a[1] + (engine.cylinder4.Piston.body.I[3,2] * engine.cylinder4.Piston.body.w_a[2] + engine.cylinder4.Piston.body.I[3,3] * engine.cylinder4.Piston.body.w_a[3])) + ((-engine.cylinder4.Piston.body.w_a[3] * (engine.cylinder4.Piston.body.I[2,1] * engine.cylinder4.Piston.body.w_a[1] + (engine.cylinder4.Piston.body.I[2,2] * engine.cylinder4.Piston.body.w_a[2] + engine.cylinder4.Piston.body.I[2,3] * engine.cylinder4.Piston.body.w_a[3]))) + (engine.cylinder4.Piston.body.r_CM[2] * engine.cylinder4.Piston.body.frame_a.f[3] + (-engine.cylinder4.Piston.body.r_CM[3] * engine.cylinder4.Piston.body.frame_a.f[2]))))));
//   engine.cylinder4.Piston.body.frame_a.t[2] = engine.cylinder4.Piston.body.I[2,1] * engine.cylinder4.Piston.body.z_a[1] + (engine.cylinder4.Piston.body.I[2,2] * engine.cylinder4.Piston.body.z_a[2] + (engine.cylinder4.Piston.body.I[2,3] * engine.cylinder4.Piston.body.z_a[3] + (engine.cylinder4.Piston.body.w_a[3] * (engine.cylinder4.Piston.body.I[1,1] * engine.cylinder4.Piston.body.w_a[1] + (engine.cylinder4.Piston.body.I[1,2] * engine.cylinder4.Piston.body.w_a[2] + engine.cylinder4.Piston.body.I[1,3] * engine.cylinder4.Piston.body.w_a[3])) + ((-engine.cylinder4.Piston.body.w_a[1] * (engine.cylinder4.Piston.body.I[3,1] * engine.cylinder4.Piston.body.w_a[1] + (engine.cylinder4.Piston.body.I[3,2] * engine.cylinder4.Piston.body.w_a[2] + engine.cylinder4.Piston.body.I[3,3] * engine.cylinder4.Piston.body.w_a[3]))) + (engine.cylinder4.Piston.body.r_CM[3] * engine.cylinder4.Piston.body.frame_a.f[1] + (-engine.cylinder4.Piston.body.r_CM[1] * engine.cylinder4.Piston.body.frame_a.f[3]))))));
//   engine.cylinder4.Piston.body.frame_a.t[3] = engine.cylinder4.Piston.body.I[3,1] * engine.cylinder4.Piston.body.z_a[1] + (engine.cylinder4.Piston.body.I[3,2] * engine.cylinder4.Piston.body.z_a[2] + (engine.cylinder4.Piston.body.I[3,3] * engine.cylinder4.Piston.body.z_a[3] + (engine.cylinder4.Piston.body.w_a[1] * (engine.cylinder4.Piston.body.I[2,1] * engine.cylinder4.Piston.body.w_a[1] + (engine.cylinder4.Piston.body.I[2,2] * engine.cylinder4.Piston.body.w_a[2] + engine.cylinder4.Piston.body.I[2,3] * engine.cylinder4.Piston.body.w_a[3])) + ((-engine.cylinder4.Piston.body.w_a[2] * (engine.cylinder4.Piston.body.I[1,1] * engine.cylinder4.Piston.body.w_a[1] + (engine.cylinder4.Piston.body.I[1,2] * engine.cylinder4.Piston.body.w_a[2] + engine.cylinder4.Piston.body.I[1,3] * engine.cylinder4.Piston.body.w_a[3]))) + (engine.cylinder4.Piston.body.r_CM[1] * engine.cylinder4.Piston.body.frame_a.f[2] + (-engine.cylinder4.Piston.body.r_CM[2] * engine.cylinder4.Piston.body.frame_a.f[1]))))));
//   engine.cylinder4.Piston.shape1.R.T[1,1] = engine.cylinder4.Piston.frame_a.R.T[1,1];
//   engine.cylinder4.Piston.shape1.R.T[1,2] = engine.cylinder4.Piston.frame_a.R.T[1,2];
//   engine.cylinder4.Piston.shape1.R.T[1,3] = engine.cylinder4.Piston.frame_a.R.T[1,3];
//   engine.cylinder4.Piston.shape1.R.T[2,1] = engine.cylinder4.Piston.frame_a.R.T[2,1];
//   engine.cylinder4.Piston.shape1.R.T[2,2] = engine.cylinder4.Piston.frame_a.R.T[2,2];
//   engine.cylinder4.Piston.shape1.R.T[2,3] = engine.cylinder4.Piston.frame_a.R.T[2,3];
//   engine.cylinder4.Piston.shape1.R.T[3,1] = engine.cylinder4.Piston.frame_a.R.T[3,1];
//   engine.cylinder4.Piston.shape1.R.T[3,2] = engine.cylinder4.Piston.frame_a.R.T[3,2];
//   engine.cylinder4.Piston.shape1.R.T[3,3] = engine.cylinder4.Piston.frame_a.R.T[3,3];
//   engine.cylinder4.Piston.shape1.R.w[1] = engine.cylinder4.Piston.frame_a.R.w[1];
//   engine.cylinder4.Piston.shape1.R.w[2] = engine.cylinder4.Piston.frame_a.R.w[2];
//   engine.cylinder4.Piston.shape1.R.w[3] = engine.cylinder4.Piston.frame_a.R.w[3];
//   engine.cylinder4.Piston.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder4.Piston.shape1.shapeType);
//   engine.cylinder4.Piston.shape1.rxvisobj[1] = engine.cylinder4.Piston.shape1.R.T[1,1] * engine.cylinder4.Piston.shape1.e_x[1] + (engine.cylinder4.Piston.shape1.R.T[2,1] * engine.cylinder4.Piston.shape1.e_x[2] + engine.cylinder4.Piston.shape1.R.T[3,1] * engine.cylinder4.Piston.shape1.e_x[3]);
//   engine.cylinder4.Piston.shape1.rxvisobj[2] = engine.cylinder4.Piston.shape1.R.T[1,2] * engine.cylinder4.Piston.shape1.e_x[1] + (engine.cylinder4.Piston.shape1.R.T[2,2] * engine.cylinder4.Piston.shape1.e_x[2] + engine.cylinder4.Piston.shape1.R.T[3,2] * engine.cylinder4.Piston.shape1.e_x[3]);
//   engine.cylinder4.Piston.shape1.rxvisobj[3] = engine.cylinder4.Piston.shape1.R.T[1,3] * engine.cylinder4.Piston.shape1.e_x[1] + (engine.cylinder4.Piston.shape1.R.T[2,3] * engine.cylinder4.Piston.shape1.e_x[2] + engine.cylinder4.Piston.shape1.R.T[3,3] * engine.cylinder4.Piston.shape1.e_x[3]);
//   engine.cylinder4.Piston.shape1.ryvisobj[1] = engine.cylinder4.Piston.shape1.R.T[1,1] * engine.cylinder4.Piston.shape1.e_y[1] + (engine.cylinder4.Piston.shape1.R.T[2,1] * engine.cylinder4.Piston.shape1.e_y[2] + engine.cylinder4.Piston.shape1.R.T[3,1] * engine.cylinder4.Piston.shape1.e_y[3]);
//   engine.cylinder4.Piston.shape1.ryvisobj[2] = engine.cylinder4.Piston.shape1.R.T[1,2] * engine.cylinder4.Piston.shape1.e_y[1] + (engine.cylinder4.Piston.shape1.R.T[2,2] * engine.cylinder4.Piston.shape1.e_y[2] + engine.cylinder4.Piston.shape1.R.T[3,2] * engine.cylinder4.Piston.shape1.e_y[3]);
//   engine.cylinder4.Piston.shape1.ryvisobj[3] = engine.cylinder4.Piston.shape1.R.T[1,3] * engine.cylinder4.Piston.shape1.e_y[1] + (engine.cylinder4.Piston.shape1.R.T[2,3] * engine.cylinder4.Piston.shape1.e_y[2] + engine.cylinder4.Piston.shape1.R.T[3,3] * engine.cylinder4.Piston.shape1.e_y[3]);
//   engine.cylinder4.Piston.shape1.rvisobj = engine.cylinder4.Piston.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder4.Piston.shape1.R.T[1,1],engine.cylinder4.Piston.shape1.R.T[1,2],engine.cylinder4.Piston.shape1.R.T[1,3]},{engine.cylinder4.Piston.shape1.R.T[2,1],engine.cylinder4.Piston.shape1.R.T[2,2],engine.cylinder4.Piston.shape1.R.T[2,3]},{engine.cylinder4.Piston.shape1.R.T[3,1],engine.cylinder4.Piston.shape1.R.T[3,2],engine.cylinder4.Piston.shape1.R.T[3,3]}},{engine.cylinder4.Piston.shape1.r_shape[1],engine.cylinder4.Piston.shape1.r_shape[2],engine.cylinder4.Piston.shape1.r_shape[3]});
//   engine.cylinder4.Piston.shape1.size[1] = engine.cylinder4.Piston.shape1.length;
//   engine.cylinder4.Piston.shape1.size[2] = engine.cylinder4.Piston.shape1.width;
//   engine.cylinder4.Piston.shape1.size[3] = engine.cylinder4.Piston.shape1.height;
//   engine.cylinder4.Piston.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder4.Piston.shape1.color[1] / 255.0,engine.cylinder4.Piston.shape1.color[2] / 255.0,engine.cylinder4.Piston.shape1.color[3] / 255.0,engine.cylinder4.Piston.shape1.specularCoefficient);
//   engine.cylinder4.Piston.shape1.Extra = engine.cylinder4.Piston.shape1.extra;
//   engine.cylinder4.Piston.r_0[1] = engine.cylinder4.Piston.frame_a.r_0[1];
//   engine.cylinder4.Piston.r_0[2] = engine.cylinder4.Piston.frame_a.r_0[2];
//   engine.cylinder4.Piston.r_0[3] = engine.cylinder4.Piston.frame_a.r_0[3];
//   engine.cylinder4.Piston.v_0[1] = der(engine.cylinder4.Piston.r_0[1]);
//   engine.cylinder4.Piston.v_0[2] = der(engine.cylinder4.Piston.r_0[2]);
//   engine.cylinder4.Piston.v_0[3] = der(engine.cylinder4.Piston.r_0[3]);
//   engine.cylinder4.Piston.a_0[1] = der(engine.cylinder4.Piston.v_0[1]);
//   engine.cylinder4.Piston.a_0[2] = der(engine.cylinder4.Piston.v_0[2]);
//   engine.cylinder4.Piston.a_0[3] = der(engine.cylinder4.Piston.v_0[3]);
//   engine.cylinder4.gasForce.y = (-engine.cylinder4.gasForce.s_rel) / engine.cylinder4.gasForce.L;
//   engine.cylinder4.gasForce.x = 1.0 + engine.cylinder4.gasForce.s_rel / engine.cylinder4.gasForce.L;
//   engine.cylinder4.gasForce.v_rel = der(engine.cylinder4.gasForce.s_rel);
//   engine.cylinder4.gasForce.press = engine.cylinder4.gasForce.p / 100000.0;
//   engine.cylinder4.gasForce.p = 100000.0 * (if engine.cylinder4.gasForce.v_rel < 0.0 then if engine.cylinder4.gasForce.x < 0.987 then 2.4 + (177.4132 * engine.cylinder4.gasForce.x ^ 4.0 + (-287.2189 * engine.cylinder4.gasForce.x ^ 3.0 + (151.8252 * engine.cylinder4.gasForce.x ^ 2.0 + -24.9973 * engine.cylinder4.gasForce.x))) else 2129670.0 + (2836360.0 * engine.cylinder4.gasForce.x ^ 4.0 + (-10569296.0 * engine.cylinder4.gasForce.x ^ 3.0 + (14761814.0 * engine.cylinder4.gasForce.x ^ 2.0 + -9158505.0 * engine.cylinder4.gasForce.x))) else if engine.cylinder4.gasForce.x > 0.93 then -3929704.0 * engine.cylinder4.gasForce.x ^ 4.0 + (14748765.0 * engine.cylinder4.gasForce.x ^ 3.0 + (-20747000.0 * engine.cylinder4.gasForce.x ^ 2.0 + 12964477.0 * engine.cylinder4.gasForce.x)) - 3036495.0 else 2.4 + (145.93 * engine.cylinder4.gasForce.x ^ 4.0 + (-131.707 * engine.cylinder4.gasForce.x ^ 3.0 + (17.3438 * engine.cylinder4.gasForce.x ^ 2.0 + 17.9272 * engine.cylinder4.gasForce.x))));
//   engine.cylinder4.gasForce.f = -78539.8163397448 * (engine.cylinder4.gasForce.press * engine.cylinder4.gasForce.d ^ 2.0);
//   engine.cylinder4.gasForce.V = engine.cylinder4.gasForce.k0 + engine.cylinder4.gasForce.k1 * (1.0 - engine.cylinder4.gasForce.x);
//   engine.cylinder4.gasForce.dens = 1.0 / engine.cylinder4.gasForce.V;
//   engine.cylinder4.gasForce.p * engine.cylinder4.gasForce.V / 100000.0 = engine.cylinder4.gasForce.k * engine.cylinder4.gasForce.T;
//   engine.cylinder4.gasForce.s_rel = engine.cylinder4.gasForce.flange_b.s - engine.cylinder4.gasForce.flange_a.s;
//   engine.cylinder4.gasForce.flange_b.f = engine.cylinder4.gasForce.f;
//   engine.cylinder4.gasForce.flange_a.f = -engine.cylinder4.gasForce.f;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder4.Crank.frame_b.r_0 = engine.cylinder4.Crank.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder4.Crank.frame_a.R,{engine.cylinder4.Crank.r[1],engine.cylinder4.Crank.r[2],engine.cylinder4.Crank.r[3]});
//   engine.cylinder4.Crank.frame_b.R.T[1,1] = engine.cylinder4.Crank.frame_a.R.T[1,1];
//   engine.cylinder4.Crank.frame_b.R.T[1,2] = engine.cylinder4.Crank.frame_a.R.T[1,2];
//   engine.cylinder4.Crank.frame_b.R.T[1,3] = engine.cylinder4.Crank.frame_a.R.T[1,3];
//   engine.cylinder4.Crank.frame_b.R.T[2,1] = engine.cylinder4.Crank.frame_a.R.T[2,1];
//   engine.cylinder4.Crank.frame_b.R.T[2,2] = engine.cylinder4.Crank.frame_a.R.T[2,2];
//   engine.cylinder4.Crank.frame_b.R.T[2,3] = engine.cylinder4.Crank.frame_a.R.T[2,3];
//   engine.cylinder4.Crank.frame_b.R.T[3,1] = engine.cylinder4.Crank.frame_a.R.T[3,1];
//   engine.cylinder4.Crank.frame_b.R.T[3,2] = engine.cylinder4.Crank.frame_a.R.T[3,2];
//   engine.cylinder4.Crank.frame_b.R.T[3,3] = engine.cylinder4.Crank.frame_a.R.T[3,3];
//   engine.cylinder4.Crank.frame_b.R.w[1] = engine.cylinder4.Crank.frame_a.R.w[1];
//   engine.cylinder4.Crank.frame_b.R.w[2] = engine.cylinder4.Crank.frame_a.R.w[2];
//   engine.cylinder4.Crank.frame_b.R.w[3] = engine.cylinder4.Crank.frame_a.R.w[3];
//   0.0 = engine.cylinder4.Crank.frame_a.f[1] + engine.cylinder4.Crank.frame_b.f[1];
//   0.0 = engine.cylinder4.Crank.frame_a.f[2] + engine.cylinder4.Crank.frame_b.f[2];
//   0.0 = engine.cylinder4.Crank.frame_a.f[3] + engine.cylinder4.Crank.frame_b.f[3];
//   0.0 = engine.cylinder4.Crank.frame_a.t[1] + (engine.cylinder4.Crank.frame_b.t[1] + (engine.cylinder4.Crank.r[2] * engine.cylinder4.Crank.frame_b.f[3] + (-engine.cylinder4.Crank.r[3] * engine.cylinder4.Crank.frame_b.f[2])));
//   0.0 = engine.cylinder4.Crank.frame_a.t[2] + (engine.cylinder4.Crank.frame_b.t[2] + (engine.cylinder4.Crank.r[3] * engine.cylinder4.Crank.frame_b.f[1] + (-engine.cylinder4.Crank.r[1] * engine.cylinder4.Crank.frame_b.f[3])));
//   0.0 = engine.cylinder4.Crank.frame_a.t[3] + (engine.cylinder4.Crank.frame_b.t[3] + (engine.cylinder4.Crank.r[1] * engine.cylinder4.Crank.frame_b.f[2] + (-engine.cylinder4.Crank.r[2] * engine.cylinder4.Crank.frame_b.f[1])));
//   engine.cylinder4.CrankShape.vis.R.T[1,1] = engine.cylinder4.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder4.CrankShape.vis.R.T[1,2] = engine.cylinder4.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder4.CrankShape.vis.R.T[1,3] = engine.cylinder4.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder4.CrankShape.vis.R.T[2,1] = engine.cylinder4.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder4.CrankShape.vis.R.T[2,2] = engine.cylinder4.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder4.CrankShape.vis.R.T[2,3] = engine.cylinder4.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder4.CrankShape.vis.R.T[3,1] = engine.cylinder4.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder4.CrankShape.vis.R.T[3,2] = engine.cylinder4.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder4.CrankShape.vis.R.T[3,3] = engine.cylinder4.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder4.CrankShape.vis.R.w[1] = engine.cylinder4.CrankShape.frame_a.R.w[1];
//   engine.cylinder4.CrankShape.vis.R.w[2] = engine.cylinder4.CrankShape.frame_a.R.w[2];
//   engine.cylinder4.CrankShape.vis.R.w[3] = engine.cylinder4.CrankShape.frame_a.R.w[3];
//   engine.cylinder4.CrankShape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder4.CrankShape.vis.shapeType);
//   engine.cylinder4.CrankShape.vis.rxvisobj[1] = engine.cylinder4.CrankShape.vis.R.T[1,1] * engine.cylinder4.CrankShape.vis.e_x[1] + (engine.cylinder4.CrankShape.vis.R.T[2,1] * engine.cylinder4.CrankShape.vis.e_x[2] + engine.cylinder4.CrankShape.vis.R.T[3,1] * engine.cylinder4.CrankShape.vis.e_x[3]);
//   engine.cylinder4.CrankShape.vis.rxvisobj[2] = engine.cylinder4.CrankShape.vis.R.T[1,2] * engine.cylinder4.CrankShape.vis.e_x[1] + (engine.cylinder4.CrankShape.vis.R.T[2,2] * engine.cylinder4.CrankShape.vis.e_x[2] + engine.cylinder4.CrankShape.vis.R.T[3,2] * engine.cylinder4.CrankShape.vis.e_x[3]);
//   engine.cylinder4.CrankShape.vis.rxvisobj[3] = engine.cylinder4.CrankShape.vis.R.T[1,3] * engine.cylinder4.CrankShape.vis.e_x[1] + (engine.cylinder4.CrankShape.vis.R.T[2,3] * engine.cylinder4.CrankShape.vis.e_x[2] + engine.cylinder4.CrankShape.vis.R.T[3,3] * engine.cylinder4.CrankShape.vis.e_x[3]);
//   engine.cylinder4.CrankShape.vis.ryvisobj[1] = engine.cylinder4.CrankShape.vis.R.T[1,1] * engine.cylinder4.CrankShape.vis.e_y[1] + (engine.cylinder4.CrankShape.vis.R.T[2,1] * engine.cylinder4.CrankShape.vis.e_y[2] + engine.cylinder4.CrankShape.vis.R.T[3,1] * engine.cylinder4.CrankShape.vis.e_y[3]);
//   engine.cylinder4.CrankShape.vis.ryvisobj[2] = engine.cylinder4.CrankShape.vis.R.T[1,2] * engine.cylinder4.CrankShape.vis.e_y[1] + (engine.cylinder4.CrankShape.vis.R.T[2,2] * engine.cylinder4.CrankShape.vis.e_y[2] + engine.cylinder4.CrankShape.vis.R.T[3,2] * engine.cylinder4.CrankShape.vis.e_y[3]);
//   engine.cylinder4.CrankShape.vis.ryvisobj[3] = engine.cylinder4.CrankShape.vis.R.T[1,3] * engine.cylinder4.CrankShape.vis.e_y[1] + (engine.cylinder4.CrankShape.vis.R.T[2,3] * engine.cylinder4.CrankShape.vis.e_y[2] + engine.cylinder4.CrankShape.vis.R.T[3,3] * engine.cylinder4.CrankShape.vis.e_y[3]);
//   engine.cylinder4.CrankShape.vis.rvisobj = engine.cylinder4.CrankShape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder4.CrankShape.vis.R.T[1,1],engine.cylinder4.CrankShape.vis.R.T[1,2],engine.cylinder4.CrankShape.vis.R.T[1,3]},{engine.cylinder4.CrankShape.vis.R.T[2,1],engine.cylinder4.CrankShape.vis.R.T[2,2],engine.cylinder4.CrankShape.vis.R.T[2,3]},{engine.cylinder4.CrankShape.vis.R.T[3,1],engine.cylinder4.CrankShape.vis.R.T[3,2],engine.cylinder4.CrankShape.vis.R.T[3,3]}},{engine.cylinder4.CrankShape.vis.r_shape[1],engine.cylinder4.CrankShape.vis.r_shape[2],engine.cylinder4.CrankShape.vis.r_shape[3]});
//   engine.cylinder4.CrankShape.vis.size[1] = engine.cylinder4.CrankShape.vis.length;
//   engine.cylinder4.CrankShape.vis.size[2] = engine.cylinder4.CrankShape.vis.width;
//   engine.cylinder4.CrankShape.vis.size[3] = engine.cylinder4.CrankShape.vis.height;
//   engine.cylinder4.CrankShape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder4.CrankShape.vis.color[1] / 255.0,engine.cylinder4.CrankShape.vis.color[2] / 255.0,engine.cylinder4.CrankShape.vis.color[3] / 255.0,engine.cylinder4.CrankShape.vis.specularCoefficient);
//   engine.cylinder4.CrankShape.vis.Extra = engine.cylinder4.CrankShape.vis.extra;
//   engine.cylinder4.CrankShape.frame_a.f[1] = 0.0;
//   engine.cylinder4.CrankShape.frame_a.f[2] = 0.0;
//   engine.cylinder4.CrankShape.frame_a.f[3] = 0.0;
//   engine.cylinder4.CrankShape.frame_a.t[1] = 0.0;
//   engine.cylinder4.CrankShape.frame_a.t[2] = 0.0;
//   engine.cylinder4.CrankShape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder5.Mid.frame_b.r_0 = engine.cylinder5.Mid.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Mid.frame_a.R,{engine.cylinder5.Mid.r[1],engine.cylinder5.Mid.r[2],engine.cylinder5.Mid.r[3]});
//   engine.cylinder5.Mid.frame_b.R.T[1,1] = engine.cylinder5.Mid.frame_a.R.T[1,1];
//   engine.cylinder5.Mid.frame_b.R.T[1,2] = engine.cylinder5.Mid.frame_a.R.T[1,2];
//   engine.cylinder5.Mid.frame_b.R.T[1,3] = engine.cylinder5.Mid.frame_a.R.T[1,3];
//   engine.cylinder5.Mid.frame_b.R.T[2,1] = engine.cylinder5.Mid.frame_a.R.T[2,1];
//   engine.cylinder5.Mid.frame_b.R.T[2,2] = engine.cylinder5.Mid.frame_a.R.T[2,2];
//   engine.cylinder5.Mid.frame_b.R.T[2,3] = engine.cylinder5.Mid.frame_a.R.T[2,3];
//   engine.cylinder5.Mid.frame_b.R.T[3,1] = engine.cylinder5.Mid.frame_a.R.T[3,1];
//   engine.cylinder5.Mid.frame_b.R.T[3,2] = engine.cylinder5.Mid.frame_a.R.T[3,2];
//   engine.cylinder5.Mid.frame_b.R.T[3,3] = engine.cylinder5.Mid.frame_a.R.T[3,3];
//   engine.cylinder5.Mid.frame_b.R.w[1] = engine.cylinder5.Mid.frame_a.R.w[1];
//   engine.cylinder5.Mid.frame_b.R.w[2] = engine.cylinder5.Mid.frame_a.R.w[2];
//   engine.cylinder5.Mid.frame_b.R.w[3] = engine.cylinder5.Mid.frame_a.R.w[3];
//   0.0 = engine.cylinder5.Mid.frame_a.f[1] + engine.cylinder5.Mid.frame_b.f[1];
//   0.0 = engine.cylinder5.Mid.frame_a.f[2] + engine.cylinder5.Mid.frame_b.f[2];
//   0.0 = engine.cylinder5.Mid.frame_a.f[3] + engine.cylinder5.Mid.frame_b.f[3];
//   0.0 = engine.cylinder5.Mid.frame_a.t[1] + (engine.cylinder5.Mid.frame_b.t[1] + (engine.cylinder5.Mid.r[2] * engine.cylinder5.Mid.frame_b.f[3] + (-engine.cylinder5.Mid.r[3] * engine.cylinder5.Mid.frame_b.f[2])));
//   0.0 = engine.cylinder5.Mid.frame_a.t[2] + (engine.cylinder5.Mid.frame_b.t[2] + (engine.cylinder5.Mid.r[3] * engine.cylinder5.Mid.frame_b.f[1] + (-engine.cylinder5.Mid.r[1] * engine.cylinder5.Mid.frame_b.f[3])));
//   0.0 = engine.cylinder5.Mid.frame_a.t[3] + (engine.cylinder5.Mid.frame_b.t[3] + (engine.cylinder5.Mid.r[1] * engine.cylinder5.Mid.frame_b.f[2] + (-engine.cylinder5.Mid.r[2] * engine.cylinder5.Mid.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder5.Mounting.frame_b.r_0 = engine.cylinder5.Mounting.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Mounting.frame_a.R,{engine.cylinder5.Mounting.r[1],engine.cylinder5.Mounting.r[2],engine.cylinder5.Mounting.r[3]});
//   engine.cylinder5.Mounting.frame_b.R.T[1,1] = engine.cylinder5.Mounting.frame_a.R.T[1,1];
//   engine.cylinder5.Mounting.frame_b.R.T[1,2] = engine.cylinder5.Mounting.frame_a.R.T[1,2];
//   engine.cylinder5.Mounting.frame_b.R.T[1,3] = engine.cylinder5.Mounting.frame_a.R.T[1,3];
//   engine.cylinder5.Mounting.frame_b.R.T[2,1] = engine.cylinder5.Mounting.frame_a.R.T[2,1];
//   engine.cylinder5.Mounting.frame_b.R.T[2,2] = engine.cylinder5.Mounting.frame_a.R.T[2,2];
//   engine.cylinder5.Mounting.frame_b.R.T[2,3] = engine.cylinder5.Mounting.frame_a.R.T[2,3];
//   engine.cylinder5.Mounting.frame_b.R.T[3,1] = engine.cylinder5.Mounting.frame_a.R.T[3,1];
//   engine.cylinder5.Mounting.frame_b.R.T[3,2] = engine.cylinder5.Mounting.frame_a.R.T[3,2];
//   engine.cylinder5.Mounting.frame_b.R.T[3,3] = engine.cylinder5.Mounting.frame_a.R.T[3,3];
//   engine.cylinder5.Mounting.frame_b.R.w[1] = engine.cylinder5.Mounting.frame_a.R.w[1];
//   engine.cylinder5.Mounting.frame_b.R.w[2] = engine.cylinder5.Mounting.frame_a.R.w[2];
//   engine.cylinder5.Mounting.frame_b.R.w[3] = engine.cylinder5.Mounting.frame_a.R.w[3];
//   0.0 = engine.cylinder5.Mounting.frame_a.f[1] + engine.cylinder5.Mounting.frame_b.f[1];
//   0.0 = engine.cylinder5.Mounting.frame_a.f[2] + engine.cylinder5.Mounting.frame_b.f[2];
//   0.0 = engine.cylinder5.Mounting.frame_a.f[3] + engine.cylinder5.Mounting.frame_b.f[3];
//   0.0 = engine.cylinder5.Mounting.frame_a.t[1] + (engine.cylinder5.Mounting.frame_b.t[1] + (engine.cylinder5.Mounting.r[2] * engine.cylinder5.Mounting.frame_b.f[3] + (-engine.cylinder5.Mounting.r[3] * engine.cylinder5.Mounting.frame_b.f[2])));
//   0.0 = engine.cylinder5.Mounting.frame_a.t[2] + (engine.cylinder5.Mounting.frame_b.t[2] + (engine.cylinder5.Mounting.r[3] * engine.cylinder5.Mounting.frame_b.f[1] + (-engine.cylinder5.Mounting.r[1] * engine.cylinder5.Mounting.frame_b.f[3])));
//   0.0 = engine.cylinder5.Mounting.frame_a.t[3] + (engine.cylinder5.Mounting.frame_b.t[3] + (engine.cylinder5.Mounting.r[1] * engine.cylinder5.Mounting.frame_b.f[2] + (-engine.cylinder5.Mounting.r[2] * engine.cylinder5.Mounting.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder5.CylinderInclination.frame_b.r_0 = engine.cylinder5.CylinderInclination.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.CylinderInclination.frame_a.R,{engine.cylinder5.CylinderInclination.r[1],engine.cylinder5.CylinderInclination.r[2],engine.cylinder5.CylinderInclination.r[3]});
//   engine.cylinder5.CylinderInclination.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder5.CylinderInclination.frame_a.R,engine.cylinder5.CylinderInclination.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder5.CylinderInclination.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.CylinderInclination.R_rel,{engine.cylinder5.CylinderInclination.frame_b.f[1],engine.cylinder5.CylinderInclination.frame_b.f[2],engine.cylinder5.CylinderInclination.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder5.CylinderInclination.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.CylinderInclination.R_rel,{engine.cylinder5.CylinderInclination.frame_b.t[1],engine.cylinder5.CylinderInclination.frame_b.t[2],engine.cylinder5.CylinderInclination.frame_b.t[3]}) - {engine.cylinder5.CylinderInclination.r[2] * engine.cylinder5.CylinderInclination.frame_a.f[3] - engine.cylinder5.CylinderInclination.r[3] * engine.cylinder5.CylinderInclination.frame_a.f[2],engine.cylinder5.CylinderInclination.r[3] * engine.cylinder5.CylinderInclination.frame_a.f[1] - engine.cylinder5.CylinderInclination.r[1] * engine.cylinder5.CylinderInclination.frame_a.f[3],engine.cylinder5.CylinderInclination.r[1] * engine.cylinder5.CylinderInclination.frame_a.f[2] - engine.cylinder5.CylinderInclination.r[2] * engine.cylinder5.CylinderInclination.frame_a.f[1]};
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder5.CrankAngle.frame_b.r_0 = engine.cylinder5.CrankAngle.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.CrankAngle.frame_a.R,{engine.cylinder5.CrankAngle.r[1],engine.cylinder5.CrankAngle.r[2],engine.cylinder5.CrankAngle.r[3]});
//   engine.cylinder5.CrankAngle.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder5.CrankAngle.frame_a.R,engine.cylinder5.CrankAngle.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder5.CrankAngle.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.CrankAngle.R_rel,{engine.cylinder5.CrankAngle.frame_b.f[1],engine.cylinder5.CrankAngle.frame_b.f[2],engine.cylinder5.CrankAngle.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder5.CrankAngle.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.CrankAngle.R_rel,{engine.cylinder5.CrankAngle.frame_b.t[1],engine.cylinder5.CrankAngle.frame_b.t[2],engine.cylinder5.CrankAngle.frame_b.t[3]}) - {engine.cylinder5.CrankAngle.r[2] * engine.cylinder5.CrankAngle.frame_a.f[3] - engine.cylinder5.CrankAngle.r[3] * engine.cylinder5.CrankAngle.frame_a.f[2],engine.cylinder5.CrankAngle.r[3] * engine.cylinder5.CrankAngle.frame_a.f[1] - engine.cylinder5.CrankAngle.r[1] * engine.cylinder5.CrankAngle.frame_a.f[3],engine.cylinder5.CrankAngle.r[1] * engine.cylinder5.CrankAngle.frame_a.f[2] - engine.cylinder5.CrankAngle.r[2] * engine.cylinder5.CrankAngle.frame_a.f[1]};
//   engine.cylinder5.jointRRP.jointUSP.prismatic.axis.f = engine.cylinder5.jointRRP.jointUSP.prismatic.f;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.axis.s = engine.cylinder5.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.bearing.s = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.distance = engine.cylinder5.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder5.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.distance * engine.cylinder5.jointRRP.jointUSP.prismatic.e[1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.distance * engine.cylinder5.jointRRP.jointUSP.prismatic.e[2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.distance * engine.cylinder5.jointRRP.jointUSP.prismatic.e[3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R,{engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[1],engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[2],engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[3]});
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[1] + engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[1];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[2] + engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[2];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[3] + engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[3];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[1] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[3] + (-engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[2])));
//   0.0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[2] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[1] + (-engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[3])));
//   0.0 = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[3] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[2] + (-engine.cylinder5.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[1])));
//   engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[1] - engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[2] - engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.r_b[3] - engine.cylinder5.jointRRP.jointUSP.prismatic.r_a[3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.B = 2.0 * (engine.cylinder5.jointRRP.jointUSP.prismatic.e[1] * engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[1] + (engine.cylinder5.jointRRP.jointUSP.prismatic.e[2] * engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[2] + engine.cylinder5.jointRRP.jointUSP.prismatic.e[3] * engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[3]));
//   engine.cylinder5.jointRRP.jointUSP.prismatic.C = engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[1] ^ 2.0 + (engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[2] ^ 2.0 + engine.cylinder5.jointRRP.jointUSP.prismatic.rbra[3] ^ 2.0) - engine.cylinder5.jointRRP.jointUSP.prismatic.length ^ 2.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.k1 = engine.cylinder5.jointRRP.jointUSP.prismatic.B / 2.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.k1a = engine.cylinder5.jointRRP.jointUSP.prismatic.k1 ^ 2.0 - engine.cylinder5.jointRRP.jointUSP.prismatic.C;
//   assert(noEvent(engine.cylinder5.jointRRP.jointUSP.prismatic.k1a > 1e-10),"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   engine.cylinder5.jointRRP.jointUSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(engine.cylinder5.jointRRP.jointUSP.prismatic.k1a,1e-12);
//   engine.cylinder5.jointRRP.jointUSP.prismatic.k2 = sqrt(engine.cylinder5.jointRRP.jointUSP.prismatic.k1b);
//   engine.cylinder5.jointRRP.jointUSP.prismatic.distance = (if engine.cylinder5.jointRRP.jointUSP.prismatic.positiveBranch then engine.cylinder5.jointRRP.jointUSP.prismatic.k2 else -engine.cylinder5.jointRRP.jointUSP.prismatic.k2) - engine.cylinder5.jointRRP.jointUSP.prismatic.k1;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[1] - engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[2] - engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[3] - engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R,{engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[1],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[2],engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[3]});
//   engine.cylinder5.jointRRP.jointUSP.rod1.constraintResidue = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1] = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[1] / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2] = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[2] / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3] = engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[3] / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[1] = engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2];
//   engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[2] = engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3];
//   engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[3] = engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1];
//   engine.cylinder5.jointRRP.jointUSP.rod1.length2_n2_a = engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[1] ^ 2.0 + (engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[2] ^ 2.0 + engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[3] ^ 2.0);
//   assert(engine.cylinder5.jointRRP.jointUSP.rod1.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   engine.cylinder5.jointRRP.jointUSP.rod1.length_n2_a = sqrt(engine.cylinder5.jointRRP.jointUSP.rod1.length2_n2_a);
//   engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] = engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[1] / engine.cylinder5.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] = engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[2] / engine.cylinder5.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] = engine.cylinder5.jointRRP.jointUSP.rod1.n2_a[3] / engine.cylinder5.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1] = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] - engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2];
//   engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2] = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] - engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3];
//   engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3] = engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] - engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1];
//   engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R,{der(engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[1]),der(engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[2]),der(engine.cylinder5.jointRRP.jointUSP.rod1.rRod_0[3])}) - {engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[3] - engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[2],engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[1] - engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[3],engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[2] - engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[1]}) / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[1] = (engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1] * (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[3] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[2]) + (engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2] * (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[1] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[3]) + engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3] * (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[2] - engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[1]))) / engine.cylinder5.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[2] = (-engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1]) * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + ((-engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2]) * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + (-engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3]) * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[3] = engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3]},{engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1],engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2],engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3]},{engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1],engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2],engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3]}},{engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[1],engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[2],engine.cylinder5.jointRRP.jointUSP.rod1.w_rel_ia1[3]});
//   engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[1],engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[1],engine.cylinder5.jointRRP.jointUSP.rod1.e3_ia[1]},{engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[2],engine.cylinder5.jointRRP.jointUSP.rod1.e3_ia[2]},{engine.cylinder5.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder5.jointRRP.jointUSP.rod1.e2_ia[3],engine.cylinder5.jointRRP.jointUSP.rod1.e3_ia[3]}},{0.0,0.0,0.0});
//   engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia1,engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia2);
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia);
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[1],engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[2],engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[3]});
//   engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[1],engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[2],engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[3]});
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[1] = ((-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] * 1.0 / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1] / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[2] = ((-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] * 1.0 / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2] / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[3] = ((-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] * 1.0 / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder5.jointRRP.jointUSP.rod1.e3_a[3] / engine.cylinder5.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[1] = (-engine.cylinder5.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1] + engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[1];
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[2] = (-engine.cylinder5.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[2];
//   engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[3] = (-engine.cylinder5.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3] + engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[3];
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[1],engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[2],engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[3]},engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[3] = 0.0;
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[1] + engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a[1]);
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[2] + engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a[2]);
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[3] + engine.cylinder5.jointRRP.jointUSP.rod1.f_ia_a[3]);
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[3] + (-engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[2])));
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[1] + (-engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[3])));
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.t_ia_a[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[2] + (-engine.cylinder5.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a[1])));
//   engine.cylinder5.jointRRP.jointUSP.rod1.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R,{engine.cylinder5.jointRRP.jointUSP.rod2.r[1],engine.cylinder5.jointRRP.jointUSP.rod2.r[2],engine.cylinder5.jointRRP.jointUSP.rod2.r[3]});
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[1] + engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[1];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[2] + engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[2];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[3] + engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[3];
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[1] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder5.jointRRP.jointUSP.rod2.r[2] * engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[3] + (-engine.cylinder5.jointRRP.jointUSP.rod2.r[3] * engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[2])));
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[2] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder5.jointRRP.jointUSP.rod2.r[3] * engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[1] + (-engine.cylinder5.jointRRP.jointUSP.rod2.r[1] * engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[3])));
//   0.0 = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[3] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder5.jointRRP.jointUSP.rod2.r[1] * engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[2] + (-engine.cylinder5.jointRRP.jointUSP.rod2.r[2] * engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[1])));
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R,{engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1] - engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1],engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2] - engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2],engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3] - engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   assert(true,"Connector frame_resolve must be connected exactly once");
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   engine.cylinder5.jointRRP.jointUSP.position_b[1].y = engine.cylinder5.jointRRP.jointUSP.position_b[1].k;
//   engine.cylinder5.jointRRP.jointUSP.position_b[2].y = engine.cylinder5.jointRRP.jointUSP.position_b[2].k;
//   engine.cylinder5.jointRRP.jointUSP.position_b[3].y = engine.cylinder5.jointRRP.jointUSP.position_b[3].k;
//   engine.cylinder5.jointRRP.jointUSP.aux = {engine.cylinder5.jointRRP.jointUSP.prismatic.e[1],engine.cylinder5.jointRRP.jointUSP.prismatic.e[2],engine.cylinder5.jointRRP.jointUSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder5.jointRRP.jointUSP.rod1.eRod_a[3]},engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder5.jointRRP.jointUSP.f_rod = ((-engine.cylinder5.jointRRP.jointUSP.prismatic.f) - {engine.cylinder5.jointRRP.jointUSP.prismatic.e[1],engine.cylinder5.jointRRP.jointUSP.prismatic.e[2],engine.cylinder5.jointRRP.jointUSP.prismatic.e[3]} * ({engine.cylinder5.jointRRP.jointUSP.frame_ib.f[1] + engine.cylinder5.jointRRP.jointUSP.frame_im.f[1],engine.cylinder5.jointRRP.jointUSP.frame_ib.f[2] + engine.cylinder5.jointRRP.jointUSP.frame_im.f[2],engine.cylinder5.jointRRP.jointUSP.frame_ib.f[3] + engine.cylinder5.jointRRP.jointUSP.frame_im.f[3]} - Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[1],engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[2],engine.cylinder5.jointRRP.jointUSP.rod1.f_b_a1[3]},engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R))) / (if noEvent(abs(engine.cylinder5.jointRRP.jointUSP.aux) < 1e-10) then 1e-10 else engine.cylinder5.jointRRP.jointUSP.aux);
//   engine.cylinder5.jointRRP.jointUSP.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder5.Rod.frameTranslation.frame_b.r_0 = engine.cylinder5.Rod.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Rod.frameTranslation.frame_a.R,{engine.cylinder5.Rod.frameTranslation.r[1],engine.cylinder5.Rod.frameTranslation.r[2],engine.cylinder5.Rod.frameTranslation.r[3]});
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder5.Rod.frameTranslation.frame_a.f[1] + engine.cylinder5.Rod.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder5.Rod.frameTranslation.frame_a.f[2] + engine.cylinder5.Rod.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder5.Rod.frameTranslation.frame_a.f[3] + engine.cylinder5.Rod.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder5.Rod.frameTranslation.frame_a.t[1] + (engine.cylinder5.Rod.frameTranslation.frame_b.t[1] + (engine.cylinder5.Rod.frameTranslation.r[2] * engine.cylinder5.Rod.frameTranslation.frame_b.f[3] + (-engine.cylinder5.Rod.frameTranslation.r[3] * engine.cylinder5.Rod.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder5.Rod.frameTranslation.frame_a.t[2] + (engine.cylinder5.Rod.frameTranslation.frame_b.t[2] + (engine.cylinder5.Rod.frameTranslation.r[3] * engine.cylinder5.Rod.frameTranslation.frame_b.f[1] + (-engine.cylinder5.Rod.frameTranslation.r[1] * engine.cylinder5.Rod.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder5.Rod.frameTranslation.frame_a.t[3] + (engine.cylinder5.Rod.frameTranslation.frame_b.t[3] + (engine.cylinder5.Rod.frameTranslation.r[1] * engine.cylinder5.Rod.frameTranslation.frame_b.f[2] + (-engine.cylinder5.Rod.frameTranslation.r[2] * engine.cylinder5.Rod.frameTranslation.frame_b.f[1])));
//   engine.cylinder5.Rod.body.r_0[1] = engine.cylinder5.Rod.body.frame_a.r_0[1];
//   engine.cylinder5.Rod.body.r_0[2] = engine.cylinder5.Rod.body.frame_a.r_0[2];
//   engine.cylinder5.Rod.body.r_0[3] = engine.cylinder5.Rod.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder5.Rod.body.Q[1] = 0.0;
//   engine.cylinder5.Rod.body.Q[2] = 0.0;
//   engine.cylinder5.Rod.body.Q[3] = 0.0;
//   engine.cylinder5.Rod.body.Q[4] = 1.0;
//   engine.cylinder5.Rod.body.phi[1] = 0.0;
//   engine.cylinder5.Rod.body.phi[2] = 0.0;
//   engine.cylinder5.Rod.body.phi[3] = 0.0;
//   engine.cylinder5.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder5.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder5.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder5.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder5.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder5.Rod.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder5.Rod.body.useQuaternions then
//   engine.cylinder5.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder5.Rod.body.Q[1],engine.cylinder5.Rod.body.Q[2],engine.cylinder5.Rod.body.Q[3],engine.cylinder5.Rod.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder5.Rod.body.Q[1],engine.cylinder5.Rod.body.Q[2],engine.cylinder5.Rod.body.Q[3],engine.cylinder5.Rod.body.Q[4]},{der(engine.cylinder5.Rod.body.Q[1]),der(engine.cylinder5.Rod.body.Q[2]),der(engine.cylinder5.Rod.body.Q[3]),der(engine.cylinder5.Rod.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder5.Rod.body.Q[1],engine.cylinder5.Rod.body.Q[2],engine.cylinder5.Rod.body.Q[3],engine.cylinder5.Rod.body.Q[4]});
//   engine.cylinder5.Rod.body.phi[1] = 0.0;
//   engine.cylinder5.Rod.body.phi[2] = 0.0;
//   engine.cylinder5.Rod.body.phi[3] = 0.0;
//   engine.cylinder5.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder5.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder5.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder5.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder5.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder5.Rod.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder5.Rod.body.phi_d[1] = der(engine.cylinder5.Rod.body.phi[1]);
//   engine.cylinder5.Rod.body.phi_d[2] = der(engine.cylinder5.Rod.body.phi[2]);
//   engine.cylinder5.Rod.body.phi_d[3] = der(engine.cylinder5.Rod.body.phi[3]);
//   engine.cylinder5.Rod.body.phi_dd[1] = der(engine.cylinder5.Rod.body.phi_d[1]);
//   engine.cylinder5.Rod.body.phi_dd[2] = der(engine.cylinder5.Rod.body.phi_d[2]);
//   engine.cylinder5.Rod.body.phi_dd[3] = der(engine.cylinder5.Rod.body.phi_d[3]);
//   engine.cylinder5.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder5.Rod.body.sequence_angleStates[1],engine.cylinder5.Rod.body.sequence_angleStates[2],engine.cylinder5.Rod.body.sequence_angleStates[3]},{engine.cylinder5.Rod.body.phi[1],engine.cylinder5.Rod.body.phi[2],engine.cylinder5.Rod.body.phi[3]},{engine.cylinder5.Rod.body.phi_d[1],engine.cylinder5.Rod.body.phi_d[2],engine.cylinder5.Rod.body.phi_d[3]});
//   engine.cylinder5.Rod.body.Q[1] = 0.0;
//   engine.cylinder5.Rod.body.Q[2] = 0.0;
//   engine.cylinder5.Rod.body.Q[3] = 0.0;
//   engine.cylinder5.Rod.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder5.Rod.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder5.Rod.body.frame_a.r_0[1],engine.cylinder5.Rod.body.frame_a.r_0[2],engine.cylinder5.Rod.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Rod.body.frame_a.R,{engine.cylinder5.Rod.body.r_CM[1],engine.cylinder5.Rod.body.r_CM[2],engine.cylinder5.Rod.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder5.Rod.body.v_0[1] = der(engine.cylinder5.Rod.body.frame_a.r_0[1]);
//   engine.cylinder5.Rod.body.v_0[2] = der(engine.cylinder5.Rod.body.frame_a.r_0[2]);
//   engine.cylinder5.Rod.body.v_0[3] = der(engine.cylinder5.Rod.body.frame_a.r_0[3]);
//   engine.cylinder5.Rod.body.a_0[1] = der(engine.cylinder5.Rod.body.v_0[1]);
//   engine.cylinder5.Rod.body.a_0[2] = der(engine.cylinder5.Rod.body.v_0[2]);
//   engine.cylinder5.Rod.body.a_0[3] = der(engine.cylinder5.Rod.body.v_0[3]);
//   engine.cylinder5.Rod.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder5.Rod.body.frame_a.R);
//   engine.cylinder5.Rod.body.z_a[1] = der(engine.cylinder5.Rod.body.w_a[1]);
//   engine.cylinder5.Rod.body.z_a[2] = der(engine.cylinder5.Rod.body.w_a[2]);
//   engine.cylinder5.Rod.body.z_a[3] = der(engine.cylinder5.Rod.body.w_a[3]);
//   engine.cylinder5.Rod.body.frame_a.f = engine.cylinder5.Rod.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Rod.body.frame_a.R,{engine.cylinder5.Rod.body.a_0[1] - engine.cylinder5.Rod.body.g_0[1],engine.cylinder5.Rod.body.a_0[2] - engine.cylinder5.Rod.body.g_0[2],engine.cylinder5.Rod.body.a_0[3] - engine.cylinder5.Rod.body.g_0[3]}) + {engine.cylinder5.Rod.body.z_a[2] * engine.cylinder5.Rod.body.r_CM[3] - engine.cylinder5.Rod.body.z_a[3] * engine.cylinder5.Rod.body.r_CM[2],engine.cylinder5.Rod.body.z_a[3] * engine.cylinder5.Rod.body.r_CM[1] - engine.cylinder5.Rod.body.z_a[1] * engine.cylinder5.Rod.body.r_CM[3],engine.cylinder5.Rod.body.z_a[1] * engine.cylinder5.Rod.body.r_CM[2] - engine.cylinder5.Rod.body.z_a[2] * engine.cylinder5.Rod.body.r_CM[1]} + {engine.cylinder5.Rod.body.w_a[2] * (engine.cylinder5.Rod.body.w_a[1] * engine.cylinder5.Rod.body.r_CM[2] - engine.cylinder5.Rod.body.w_a[2] * engine.cylinder5.Rod.body.r_CM[1]) - engine.cylinder5.Rod.body.w_a[3] * (engine.cylinder5.Rod.body.w_a[3] * engine.cylinder5.Rod.body.r_CM[1] - engine.cylinder5.Rod.body.w_a[1] * engine.cylinder5.Rod.body.r_CM[3]),engine.cylinder5.Rod.body.w_a[3] * (engine.cylinder5.Rod.body.w_a[2] * engine.cylinder5.Rod.body.r_CM[3] - engine.cylinder5.Rod.body.w_a[3] * engine.cylinder5.Rod.body.r_CM[2]) - engine.cylinder5.Rod.body.w_a[1] * (engine.cylinder5.Rod.body.w_a[1] * engine.cylinder5.Rod.body.r_CM[2] - engine.cylinder5.Rod.body.w_a[2] * engine.cylinder5.Rod.body.r_CM[1]),engine.cylinder5.Rod.body.w_a[1] * (engine.cylinder5.Rod.body.w_a[3] * engine.cylinder5.Rod.body.r_CM[1] - engine.cylinder5.Rod.body.w_a[1] * engine.cylinder5.Rod.body.r_CM[3]) - engine.cylinder5.Rod.body.w_a[2] * (engine.cylinder5.Rod.body.w_a[2] * engine.cylinder5.Rod.body.r_CM[3] - engine.cylinder5.Rod.body.w_a[3] * engine.cylinder5.Rod.body.r_CM[2])});
//   engine.cylinder5.Rod.body.frame_a.t[1] = engine.cylinder5.Rod.body.I[1,1] * engine.cylinder5.Rod.body.z_a[1] + (engine.cylinder5.Rod.body.I[1,2] * engine.cylinder5.Rod.body.z_a[2] + (engine.cylinder5.Rod.body.I[1,3] * engine.cylinder5.Rod.body.z_a[3] + (engine.cylinder5.Rod.body.w_a[2] * (engine.cylinder5.Rod.body.I[3,1] * engine.cylinder5.Rod.body.w_a[1] + (engine.cylinder5.Rod.body.I[3,2] * engine.cylinder5.Rod.body.w_a[2] + engine.cylinder5.Rod.body.I[3,3] * engine.cylinder5.Rod.body.w_a[3])) + ((-engine.cylinder5.Rod.body.w_a[3] * (engine.cylinder5.Rod.body.I[2,1] * engine.cylinder5.Rod.body.w_a[1] + (engine.cylinder5.Rod.body.I[2,2] * engine.cylinder5.Rod.body.w_a[2] + engine.cylinder5.Rod.body.I[2,3] * engine.cylinder5.Rod.body.w_a[3]))) + (engine.cylinder5.Rod.body.r_CM[2] * engine.cylinder5.Rod.body.frame_a.f[3] + (-engine.cylinder5.Rod.body.r_CM[3] * engine.cylinder5.Rod.body.frame_a.f[2]))))));
//   engine.cylinder5.Rod.body.frame_a.t[2] = engine.cylinder5.Rod.body.I[2,1] * engine.cylinder5.Rod.body.z_a[1] + (engine.cylinder5.Rod.body.I[2,2] * engine.cylinder5.Rod.body.z_a[2] + (engine.cylinder5.Rod.body.I[2,3] * engine.cylinder5.Rod.body.z_a[3] + (engine.cylinder5.Rod.body.w_a[3] * (engine.cylinder5.Rod.body.I[1,1] * engine.cylinder5.Rod.body.w_a[1] + (engine.cylinder5.Rod.body.I[1,2] * engine.cylinder5.Rod.body.w_a[2] + engine.cylinder5.Rod.body.I[1,3] * engine.cylinder5.Rod.body.w_a[3])) + ((-engine.cylinder5.Rod.body.w_a[1] * (engine.cylinder5.Rod.body.I[3,1] * engine.cylinder5.Rod.body.w_a[1] + (engine.cylinder5.Rod.body.I[3,2] * engine.cylinder5.Rod.body.w_a[2] + engine.cylinder5.Rod.body.I[3,3] * engine.cylinder5.Rod.body.w_a[3]))) + (engine.cylinder5.Rod.body.r_CM[3] * engine.cylinder5.Rod.body.frame_a.f[1] + (-engine.cylinder5.Rod.body.r_CM[1] * engine.cylinder5.Rod.body.frame_a.f[3]))))));
//   engine.cylinder5.Rod.body.frame_a.t[3] = engine.cylinder5.Rod.body.I[3,1] * engine.cylinder5.Rod.body.z_a[1] + (engine.cylinder5.Rod.body.I[3,2] * engine.cylinder5.Rod.body.z_a[2] + (engine.cylinder5.Rod.body.I[3,3] * engine.cylinder5.Rod.body.z_a[3] + (engine.cylinder5.Rod.body.w_a[1] * (engine.cylinder5.Rod.body.I[2,1] * engine.cylinder5.Rod.body.w_a[1] + (engine.cylinder5.Rod.body.I[2,2] * engine.cylinder5.Rod.body.w_a[2] + engine.cylinder5.Rod.body.I[2,3] * engine.cylinder5.Rod.body.w_a[3])) + ((-engine.cylinder5.Rod.body.w_a[2] * (engine.cylinder5.Rod.body.I[1,1] * engine.cylinder5.Rod.body.w_a[1] + (engine.cylinder5.Rod.body.I[1,2] * engine.cylinder5.Rod.body.w_a[2] + engine.cylinder5.Rod.body.I[1,3] * engine.cylinder5.Rod.body.w_a[3]))) + (engine.cylinder5.Rod.body.r_CM[1] * engine.cylinder5.Rod.body.frame_a.f[2] + (-engine.cylinder5.Rod.body.r_CM[2] * engine.cylinder5.Rod.body.frame_a.f[1]))))));
//   engine.cylinder5.Rod.shape1.R.T[1,1] = engine.cylinder5.Rod.frame_a.R.T[1,1];
//   engine.cylinder5.Rod.shape1.R.T[1,2] = engine.cylinder5.Rod.frame_a.R.T[1,2];
//   engine.cylinder5.Rod.shape1.R.T[1,3] = engine.cylinder5.Rod.frame_a.R.T[1,3];
//   engine.cylinder5.Rod.shape1.R.T[2,1] = engine.cylinder5.Rod.frame_a.R.T[2,1];
//   engine.cylinder5.Rod.shape1.R.T[2,2] = engine.cylinder5.Rod.frame_a.R.T[2,2];
//   engine.cylinder5.Rod.shape1.R.T[2,3] = engine.cylinder5.Rod.frame_a.R.T[2,3];
//   engine.cylinder5.Rod.shape1.R.T[3,1] = engine.cylinder5.Rod.frame_a.R.T[3,1];
//   engine.cylinder5.Rod.shape1.R.T[3,2] = engine.cylinder5.Rod.frame_a.R.T[3,2];
//   engine.cylinder5.Rod.shape1.R.T[3,3] = engine.cylinder5.Rod.frame_a.R.T[3,3];
//   engine.cylinder5.Rod.shape1.R.w[1] = engine.cylinder5.Rod.frame_a.R.w[1];
//   engine.cylinder5.Rod.shape1.R.w[2] = engine.cylinder5.Rod.frame_a.R.w[2];
//   engine.cylinder5.Rod.shape1.R.w[3] = engine.cylinder5.Rod.frame_a.R.w[3];
//   engine.cylinder5.Rod.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder5.Rod.shape1.shapeType);
//   engine.cylinder5.Rod.shape1.rxvisobj[1] = engine.cylinder5.Rod.shape1.R.T[1,1] * engine.cylinder5.Rod.shape1.e_x[1] + (engine.cylinder5.Rod.shape1.R.T[2,1] * engine.cylinder5.Rod.shape1.e_x[2] + engine.cylinder5.Rod.shape1.R.T[3,1] * engine.cylinder5.Rod.shape1.e_x[3]);
//   engine.cylinder5.Rod.shape1.rxvisobj[2] = engine.cylinder5.Rod.shape1.R.T[1,2] * engine.cylinder5.Rod.shape1.e_x[1] + (engine.cylinder5.Rod.shape1.R.T[2,2] * engine.cylinder5.Rod.shape1.e_x[2] + engine.cylinder5.Rod.shape1.R.T[3,2] * engine.cylinder5.Rod.shape1.e_x[3]);
//   engine.cylinder5.Rod.shape1.rxvisobj[3] = engine.cylinder5.Rod.shape1.R.T[1,3] * engine.cylinder5.Rod.shape1.e_x[1] + (engine.cylinder5.Rod.shape1.R.T[2,3] * engine.cylinder5.Rod.shape1.e_x[2] + engine.cylinder5.Rod.shape1.R.T[3,3] * engine.cylinder5.Rod.shape1.e_x[3]);
//   engine.cylinder5.Rod.shape1.ryvisobj[1] = engine.cylinder5.Rod.shape1.R.T[1,1] * engine.cylinder5.Rod.shape1.e_y[1] + (engine.cylinder5.Rod.shape1.R.T[2,1] * engine.cylinder5.Rod.shape1.e_y[2] + engine.cylinder5.Rod.shape1.R.T[3,1] * engine.cylinder5.Rod.shape1.e_y[3]);
//   engine.cylinder5.Rod.shape1.ryvisobj[2] = engine.cylinder5.Rod.shape1.R.T[1,2] * engine.cylinder5.Rod.shape1.e_y[1] + (engine.cylinder5.Rod.shape1.R.T[2,2] * engine.cylinder5.Rod.shape1.e_y[2] + engine.cylinder5.Rod.shape1.R.T[3,2] * engine.cylinder5.Rod.shape1.e_y[3]);
//   engine.cylinder5.Rod.shape1.ryvisobj[3] = engine.cylinder5.Rod.shape1.R.T[1,3] * engine.cylinder5.Rod.shape1.e_y[1] + (engine.cylinder5.Rod.shape1.R.T[2,3] * engine.cylinder5.Rod.shape1.e_y[2] + engine.cylinder5.Rod.shape1.R.T[3,3] * engine.cylinder5.Rod.shape1.e_y[3]);
//   engine.cylinder5.Rod.shape1.rvisobj = engine.cylinder5.Rod.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder5.Rod.shape1.R.T[1,1],engine.cylinder5.Rod.shape1.R.T[1,2],engine.cylinder5.Rod.shape1.R.T[1,3]},{engine.cylinder5.Rod.shape1.R.T[2,1],engine.cylinder5.Rod.shape1.R.T[2,2],engine.cylinder5.Rod.shape1.R.T[2,3]},{engine.cylinder5.Rod.shape1.R.T[3,1],engine.cylinder5.Rod.shape1.R.T[3,2],engine.cylinder5.Rod.shape1.R.T[3,3]}},{engine.cylinder5.Rod.shape1.r_shape[1],engine.cylinder5.Rod.shape1.r_shape[2],engine.cylinder5.Rod.shape1.r_shape[3]});
//   engine.cylinder5.Rod.shape1.size[1] = engine.cylinder5.Rod.shape1.length;
//   engine.cylinder5.Rod.shape1.size[2] = engine.cylinder5.Rod.shape1.width;
//   engine.cylinder5.Rod.shape1.size[3] = engine.cylinder5.Rod.shape1.height;
//   engine.cylinder5.Rod.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder5.Rod.shape1.color[1] / 255.0,engine.cylinder5.Rod.shape1.color[2] / 255.0,engine.cylinder5.Rod.shape1.color[3] / 255.0,engine.cylinder5.Rod.shape1.specularCoefficient);
//   engine.cylinder5.Rod.shape1.Extra = engine.cylinder5.Rod.shape1.extra;
//   engine.cylinder5.Rod.r_0[1] = engine.cylinder5.Rod.frame_a.r_0[1];
//   engine.cylinder5.Rod.r_0[2] = engine.cylinder5.Rod.frame_a.r_0[2];
//   engine.cylinder5.Rod.r_0[3] = engine.cylinder5.Rod.frame_a.r_0[3];
//   engine.cylinder5.Rod.v_0[1] = der(engine.cylinder5.Rod.r_0[1]);
//   engine.cylinder5.Rod.v_0[2] = der(engine.cylinder5.Rod.r_0[2]);
//   engine.cylinder5.Rod.v_0[3] = der(engine.cylinder5.Rod.r_0[3]);
//   engine.cylinder5.Rod.a_0[1] = der(engine.cylinder5.Rod.v_0[1]);
//   engine.cylinder5.Rod.a_0[2] = der(engine.cylinder5.Rod.v_0[2]);
//   engine.cylinder5.Rod.a_0[3] = der(engine.cylinder5.Rod.v_0[3]);
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0 = engine.cylinder5.Piston.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Piston.frameTranslation.frame_a.R,{engine.cylinder5.Piston.frameTranslation.r[1],engine.cylinder5.Piston.frameTranslation.r[2],engine.cylinder5.Piston.frameTranslation.r[3]});
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder5.Piston.frameTranslation.frame_a.f[1] + engine.cylinder5.Piston.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder5.Piston.frameTranslation.frame_a.f[2] + engine.cylinder5.Piston.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder5.Piston.frameTranslation.frame_a.f[3] + engine.cylinder5.Piston.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder5.Piston.frameTranslation.frame_a.t[1] + (engine.cylinder5.Piston.frameTranslation.frame_b.t[1] + (engine.cylinder5.Piston.frameTranslation.r[2] * engine.cylinder5.Piston.frameTranslation.frame_b.f[3] + (-engine.cylinder5.Piston.frameTranslation.r[3] * engine.cylinder5.Piston.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder5.Piston.frameTranslation.frame_a.t[2] + (engine.cylinder5.Piston.frameTranslation.frame_b.t[2] + (engine.cylinder5.Piston.frameTranslation.r[3] * engine.cylinder5.Piston.frameTranslation.frame_b.f[1] + (-engine.cylinder5.Piston.frameTranslation.r[1] * engine.cylinder5.Piston.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder5.Piston.frameTranslation.frame_a.t[3] + (engine.cylinder5.Piston.frameTranslation.frame_b.t[3] + (engine.cylinder5.Piston.frameTranslation.r[1] * engine.cylinder5.Piston.frameTranslation.frame_b.f[2] + (-engine.cylinder5.Piston.frameTranslation.r[2] * engine.cylinder5.Piston.frameTranslation.frame_b.f[1])));
//   engine.cylinder5.Piston.body.r_0[1] = engine.cylinder5.Piston.body.frame_a.r_0[1];
//   engine.cylinder5.Piston.body.r_0[2] = engine.cylinder5.Piston.body.frame_a.r_0[2];
//   engine.cylinder5.Piston.body.r_0[3] = engine.cylinder5.Piston.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder5.Piston.body.Q[1] = 0.0;
//   engine.cylinder5.Piston.body.Q[2] = 0.0;
//   engine.cylinder5.Piston.body.Q[3] = 0.0;
//   engine.cylinder5.Piston.body.Q[4] = 1.0;
//   engine.cylinder5.Piston.body.phi[1] = 0.0;
//   engine.cylinder5.Piston.body.phi[2] = 0.0;
//   engine.cylinder5.Piston.body.phi[3] = 0.0;
//   engine.cylinder5.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder5.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder5.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder5.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder5.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder5.Piston.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder5.Piston.body.useQuaternions then
//   engine.cylinder5.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder5.Piston.body.Q[1],engine.cylinder5.Piston.body.Q[2],engine.cylinder5.Piston.body.Q[3],engine.cylinder5.Piston.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder5.Piston.body.Q[1],engine.cylinder5.Piston.body.Q[2],engine.cylinder5.Piston.body.Q[3],engine.cylinder5.Piston.body.Q[4]},{der(engine.cylinder5.Piston.body.Q[1]),der(engine.cylinder5.Piston.body.Q[2]),der(engine.cylinder5.Piston.body.Q[3]),der(engine.cylinder5.Piston.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder5.Piston.body.Q[1],engine.cylinder5.Piston.body.Q[2],engine.cylinder5.Piston.body.Q[3],engine.cylinder5.Piston.body.Q[4]});
//   engine.cylinder5.Piston.body.phi[1] = 0.0;
//   engine.cylinder5.Piston.body.phi[2] = 0.0;
//   engine.cylinder5.Piston.body.phi[3] = 0.0;
//   engine.cylinder5.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder5.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder5.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder5.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder5.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder5.Piston.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder5.Piston.body.phi_d[1] = der(engine.cylinder5.Piston.body.phi[1]);
//   engine.cylinder5.Piston.body.phi_d[2] = der(engine.cylinder5.Piston.body.phi[2]);
//   engine.cylinder5.Piston.body.phi_d[3] = der(engine.cylinder5.Piston.body.phi[3]);
//   engine.cylinder5.Piston.body.phi_dd[1] = der(engine.cylinder5.Piston.body.phi_d[1]);
//   engine.cylinder5.Piston.body.phi_dd[2] = der(engine.cylinder5.Piston.body.phi_d[2]);
//   engine.cylinder5.Piston.body.phi_dd[3] = der(engine.cylinder5.Piston.body.phi_d[3]);
//   engine.cylinder5.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder5.Piston.body.sequence_angleStates[1],engine.cylinder5.Piston.body.sequence_angleStates[2],engine.cylinder5.Piston.body.sequence_angleStates[3]},{engine.cylinder5.Piston.body.phi[1],engine.cylinder5.Piston.body.phi[2],engine.cylinder5.Piston.body.phi[3]},{engine.cylinder5.Piston.body.phi_d[1],engine.cylinder5.Piston.body.phi_d[2],engine.cylinder5.Piston.body.phi_d[3]});
//   engine.cylinder5.Piston.body.Q[1] = 0.0;
//   engine.cylinder5.Piston.body.Q[2] = 0.0;
//   engine.cylinder5.Piston.body.Q[3] = 0.0;
//   engine.cylinder5.Piston.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder5.Piston.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder5.Piston.body.frame_a.r_0[1],engine.cylinder5.Piston.body.frame_a.r_0[2],engine.cylinder5.Piston.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Piston.body.frame_a.R,{engine.cylinder5.Piston.body.r_CM[1],engine.cylinder5.Piston.body.r_CM[2],engine.cylinder5.Piston.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder5.Piston.body.v_0[1] = der(engine.cylinder5.Piston.body.frame_a.r_0[1]);
//   engine.cylinder5.Piston.body.v_0[2] = der(engine.cylinder5.Piston.body.frame_a.r_0[2]);
//   engine.cylinder5.Piston.body.v_0[3] = der(engine.cylinder5.Piston.body.frame_a.r_0[3]);
//   engine.cylinder5.Piston.body.a_0[1] = der(engine.cylinder5.Piston.body.v_0[1]);
//   engine.cylinder5.Piston.body.a_0[2] = der(engine.cylinder5.Piston.body.v_0[2]);
//   engine.cylinder5.Piston.body.a_0[3] = der(engine.cylinder5.Piston.body.v_0[3]);
//   engine.cylinder5.Piston.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder5.Piston.body.frame_a.R);
//   engine.cylinder5.Piston.body.z_a[1] = der(engine.cylinder5.Piston.body.w_a[1]);
//   engine.cylinder5.Piston.body.z_a[2] = der(engine.cylinder5.Piston.body.w_a[2]);
//   engine.cylinder5.Piston.body.z_a[3] = der(engine.cylinder5.Piston.body.w_a[3]);
//   engine.cylinder5.Piston.body.frame_a.f = engine.cylinder5.Piston.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder5.Piston.body.frame_a.R,{engine.cylinder5.Piston.body.a_0[1] - engine.cylinder5.Piston.body.g_0[1],engine.cylinder5.Piston.body.a_0[2] - engine.cylinder5.Piston.body.g_0[2],engine.cylinder5.Piston.body.a_0[3] - engine.cylinder5.Piston.body.g_0[3]}) + {engine.cylinder5.Piston.body.z_a[2] * engine.cylinder5.Piston.body.r_CM[3] - engine.cylinder5.Piston.body.z_a[3] * engine.cylinder5.Piston.body.r_CM[2],engine.cylinder5.Piston.body.z_a[3] * engine.cylinder5.Piston.body.r_CM[1] - engine.cylinder5.Piston.body.z_a[1] * engine.cylinder5.Piston.body.r_CM[3],engine.cylinder5.Piston.body.z_a[1] * engine.cylinder5.Piston.body.r_CM[2] - engine.cylinder5.Piston.body.z_a[2] * engine.cylinder5.Piston.body.r_CM[1]} + {engine.cylinder5.Piston.body.w_a[2] * (engine.cylinder5.Piston.body.w_a[1] * engine.cylinder5.Piston.body.r_CM[2] - engine.cylinder5.Piston.body.w_a[2] * engine.cylinder5.Piston.body.r_CM[1]) - engine.cylinder5.Piston.body.w_a[3] * (engine.cylinder5.Piston.body.w_a[3] * engine.cylinder5.Piston.body.r_CM[1] - engine.cylinder5.Piston.body.w_a[1] * engine.cylinder5.Piston.body.r_CM[3]),engine.cylinder5.Piston.body.w_a[3] * (engine.cylinder5.Piston.body.w_a[2] * engine.cylinder5.Piston.body.r_CM[3] - engine.cylinder5.Piston.body.w_a[3] * engine.cylinder5.Piston.body.r_CM[2]) - engine.cylinder5.Piston.body.w_a[1] * (engine.cylinder5.Piston.body.w_a[1] * engine.cylinder5.Piston.body.r_CM[2] - engine.cylinder5.Piston.body.w_a[2] * engine.cylinder5.Piston.body.r_CM[1]),engine.cylinder5.Piston.body.w_a[1] * (engine.cylinder5.Piston.body.w_a[3] * engine.cylinder5.Piston.body.r_CM[1] - engine.cylinder5.Piston.body.w_a[1] * engine.cylinder5.Piston.body.r_CM[3]) - engine.cylinder5.Piston.body.w_a[2] * (engine.cylinder5.Piston.body.w_a[2] * engine.cylinder5.Piston.body.r_CM[3] - engine.cylinder5.Piston.body.w_a[3] * engine.cylinder5.Piston.body.r_CM[2])});
//   engine.cylinder5.Piston.body.frame_a.t[1] = engine.cylinder5.Piston.body.I[1,1] * engine.cylinder5.Piston.body.z_a[1] + (engine.cylinder5.Piston.body.I[1,2] * engine.cylinder5.Piston.body.z_a[2] + (engine.cylinder5.Piston.body.I[1,3] * engine.cylinder5.Piston.body.z_a[3] + (engine.cylinder5.Piston.body.w_a[2] * (engine.cylinder5.Piston.body.I[3,1] * engine.cylinder5.Piston.body.w_a[1] + (engine.cylinder5.Piston.body.I[3,2] * engine.cylinder5.Piston.body.w_a[2] + engine.cylinder5.Piston.body.I[3,3] * engine.cylinder5.Piston.body.w_a[3])) + ((-engine.cylinder5.Piston.body.w_a[3] * (engine.cylinder5.Piston.body.I[2,1] * engine.cylinder5.Piston.body.w_a[1] + (engine.cylinder5.Piston.body.I[2,2] * engine.cylinder5.Piston.body.w_a[2] + engine.cylinder5.Piston.body.I[2,3] * engine.cylinder5.Piston.body.w_a[3]))) + (engine.cylinder5.Piston.body.r_CM[2] * engine.cylinder5.Piston.body.frame_a.f[3] + (-engine.cylinder5.Piston.body.r_CM[3] * engine.cylinder5.Piston.body.frame_a.f[2]))))));
//   engine.cylinder5.Piston.body.frame_a.t[2] = engine.cylinder5.Piston.body.I[2,1] * engine.cylinder5.Piston.body.z_a[1] + (engine.cylinder5.Piston.body.I[2,2] * engine.cylinder5.Piston.body.z_a[2] + (engine.cylinder5.Piston.body.I[2,3] * engine.cylinder5.Piston.body.z_a[3] + (engine.cylinder5.Piston.body.w_a[3] * (engine.cylinder5.Piston.body.I[1,1] * engine.cylinder5.Piston.body.w_a[1] + (engine.cylinder5.Piston.body.I[1,2] * engine.cylinder5.Piston.body.w_a[2] + engine.cylinder5.Piston.body.I[1,3] * engine.cylinder5.Piston.body.w_a[3])) + ((-engine.cylinder5.Piston.body.w_a[1] * (engine.cylinder5.Piston.body.I[3,1] * engine.cylinder5.Piston.body.w_a[1] + (engine.cylinder5.Piston.body.I[3,2] * engine.cylinder5.Piston.body.w_a[2] + engine.cylinder5.Piston.body.I[3,3] * engine.cylinder5.Piston.body.w_a[3]))) + (engine.cylinder5.Piston.body.r_CM[3] * engine.cylinder5.Piston.body.frame_a.f[1] + (-engine.cylinder5.Piston.body.r_CM[1] * engine.cylinder5.Piston.body.frame_a.f[3]))))));
//   engine.cylinder5.Piston.body.frame_a.t[3] = engine.cylinder5.Piston.body.I[3,1] * engine.cylinder5.Piston.body.z_a[1] + (engine.cylinder5.Piston.body.I[3,2] * engine.cylinder5.Piston.body.z_a[2] + (engine.cylinder5.Piston.body.I[3,3] * engine.cylinder5.Piston.body.z_a[3] + (engine.cylinder5.Piston.body.w_a[1] * (engine.cylinder5.Piston.body.I[2,1] * engine.cylinder5.Piston.body.w_a[1] + (engine.cylinder5.Piston.body.I[2,2] * engine.cylinder5.Piston.body.w_a[2] + engine.cylinder5.Piston.body.I[2,3] * engine.cylinder5.Piston.body.w_a[3])) + ((-engine.cylinder5.Piston.body.w_a[2] * (engine.cylinder5.Piston.body.I[1,1] * engine.cylinder5.Piston.body.w_a[1] + (engine.cylinder5.Piston.body.I[1,2] * engine.cylinder5.Piston.body.w_a[2] + engine.cylinder5.Piston.body.I[1,3] * engine.cylinder5.Piston.body.w_a[3]))) + (engine.cylinder5.Piston.body.r_CM[1] * engine.cylinder5.Piston.body.frame_a.f[2] + (-engine.cylinder5.Piston.body.r_CM[2] * engine.cylinder5.Piston.body.frame_a.f[1]))))));
//   engine.cylinder5.Piston.shape1.R.T[1,1] = engine.cylinder5.Piston.frame_a.R.T[1,1];
//   engine.cylinder5.Piston.shape1.R.T[1,2] = engine.cylinder5.Piston.frame_a.R.T[1,2];
//   engine.cylinder5.Piston.shape1.R.T[1,3] = engine.cylinder5.Piston.frame_a.R.T[1,3];
//   engine.cylinder5.Piston.shape1.R.T[2,1] = engine.cylinder5.Piston.frame_a.R.T[2,1];
//   engine.cylinder5.Piston.shape1.R.T[2,2] = engine.cylinder5.Piston.frame_a.R.T[2,2];
//   engine.cylinder5.Piston.shape1.R.T[2,3] = engine.cylinder5.Piston.frame_a.R.T[2,3];
//   engine.cylinder5.Piston.shape1.R.T[3,1] = engine.cylinder5.Piston.frame_a.R.T[3,1];
//   engine.cylinder5.Piston.shape1.R.T[3,2] = engine.cylinder5.Piston.frame_a.R.T[3,2];
//   engine.cylinder5.Piston.shape1.R.T[3,3] = engine.cylinder5.Piston.frame_a.R.T[3,3];
//   engine.cylinder5.Piston.shape1.R.w[1] = engine.cylinder5.Piston.frame_a.R.w[1];
//   engine.cylinder5.Piston.shape1.R.w[2] = engine.cylinder5.Piston.frame_a.R.w[2];
//   engine.cylinder5.Piston.shape1.R.w[3] = engine.cylinder5.Piston.frame_a.R.w[3];
//   engine.cylinder5.Piston.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder5.Piston.shape1.shapeType);
//   engine.cylinder5.Piston.shape1.rxvisobj[1] = engine.cylinder5.Piston.shape1.R.T[1,1] * engine.cylinder5.Piston.shape1.e_x[1] + (engine.cylinder5.Piston.shape1.R.T[2,1] * engine.cylinder5.Piston.shape1.e_x[2] + engine.cylinder5.Piston.shape1.R.T[3,1] * engine.cylinder5.Piston.shape1.e_x[3]);
//   engine.cylinder5.Piston.shape1.rxvisobj[2] = engine.cylinder5.Piston.shape1.R.T[1,2] * engine.cylinder5.Piston.shape1.e_x[1] + (engine.cylinder5.Piston.shape1.R.T[2,2] * engine.cylinder5.Piston.shape1.e_x[2] + engine.cylinder5.Piston.shape1.R.T[3,2] * engine.cylinder5.Piston.shape1.e_x[3]);
//   engine.cylinder5.Piston.shape1.rxvisobj[3] = engine.cylinder5.Piston.shape1.R.T[1,3] * engine.cylinder5.Piston.shape1.e_x[1] + (engine.cylinder5.Piston.shape1.R.T[2,3] * engine.cylinder5.Piston.shape1.e_x[2] + engine.cylinder5.Piston.shape1.R.T[3,3] * engine.cylinder5.Piston.shape1.e_x[3]);
//   engine.cylinder5.Piston.shape1.ryvisobj[1] = engine.cylinder5.Piston.shape1.R.T[1,1] * engine.cylinder5.Piston.shape1.e_y[1] + (engine.cylinder5.Piston.shape1.R.T[2,1] * engine.cylinder5.Piston.shape1.e_y[2] + engine.cylinder5.Piston.shape1.R.T[3,1] * engine.cylinder5.Piston.shape1.e_y[3]);
//   engine.cylinder5.Piston.shape1.ryvisobj[2] = engine.cylinder5.Piston.shape1.R.T[1,2] * engine.cylinder5.Piston.shape1.e_y[1] + (engine.cylinder5.Piston.shape1.R.T[2,2] * engine.cylinder5.Piston.shape1.e_y[2] + engine.cylinder5.Piston.shape1.R.T[3,2] * engine.cylinder5.Piston.shape1.e_y[3]);
//   engine.cylinder5.Piston.shape1.ryvisobj[3] = engine.cylinder5.Piston.shape1.R.T[1,3] * engine.cylinder5.Piston.shape1.e_y[1] + (engine.cylinder5.Piston.shape1.R.T[2,3] * engine.cylinder5.Piston.shape1.e_y[2] + engine.cylinder5.Piston.shape1.R.T[3,3] * engine.cylinder5.Piston.shape1.e_y[3]);
//   engine.cylinder5.Piston.shape1.rvisobj = engine.cylinder5.Piston.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder5.Piston.shape1.R.T[1,1],engine.cylinder5.Piston.shape1.R.T[1,2],engine.cylinder5.Piston.shape1.R.T[1,3]},{engine.cylinder5.Piston.shape1.R.T[2,1],engine.cylinder5.Piston.shape1.R.T[2,2],engine.cylinder5.Piston.shape1.R.T[2,3]},{engine.cylinder5.Piston.shape1.R.T[3,1],engine.cylinder5.Piston.shape1.R.T[3,2],engine.cylinder5.Piston.shape1.R.T[3,3]}},{engine.cylinder5.Piston.shape1.r_shape[1],engine.cylinder5.Piston.shape1.r_shape[2],engine.cylinder5.Piston.shape1.r_shape[3]});
//   engine.cylinder5.Piston.shape1.size[1] = engine.cylinder5.Piston.shape1.length;
//   engine.cylinder5.Piston.shape1.size[2] = engine.cylinder5.Piston.shape1.width;
//   engine.cylinder5.Piston.shape1.size[3] = engine.cylinder5.Piston.shape1.height;
//   engine.cylinder5.Piston.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder5.Piston.shape1.color[1] / 255.0,engine.cylinder5.Piston.shape1.color[2] / 255.0,engine.cylinder5.Piston.shape1.color[3] / 255.0,engine.cylinder5.Piston.shape1.specularCoefficient);
//   engine.cylinder5.Piston.shape1.Extra = engine.cylinder5.Piston.shape1.extra;
//   engine.cylinder5.Piston.r_0[1] = engine.cylinder5.Piston.frame_a.r_0[1];
//   engine.cylinder5.Piston.r_0[2] = engine.cylinder5.Piston.frame_a.r_0[2];
//   engine.cylinder5.Piston.r_0[3] = engine.cylinder5.Piston.frame_a.r_0[3];
//   engine.cylinder5.Piston.v_0[1] = der(engine.cylinder5.Piston.r_0[1]);
//   engine.cylinder5.Piston.v_0[2] = der(engine.cylinder5.Piston.r_0[2]);
//   engine.cylinder5.Piston.v_0[3] = der(engine.cylinder5.Piston.r_0[3]);
//   engine.cylinder5.Piston.a_0[1] = der(engine.cylinder5.Piston.v_0[1]);
//   engine.cylinder5.Piston.a_0[2] = der(engine.cylinder5.Piston.v_0[2]);
//   engine.cylinder5.Piston.a_0[3] = der(engine.cylinder5.Piston.v_0[3]);
//   engine.cylinder5.gasForce.y = (-engine.cylinder5.gasForce.s_rel) / engine.cylinder5.gasForce.L;
//   engine.cylinder5.gasForce.x = 1.0 + engine.cylinder5.gasForce.s_rel / engine.cylinder5.gasForce.L;
//   engine.cylinder5.gasForce.v_rel = der(engine.cylinder5.gasForce.s_rel);
//   engine.cylinder5.gasForce.press = engine.cylinder5.gasForce.p / 100000.0;
//   engine.cylinder5.gasForce.p = 100000.0 * (if engine.cylinder5.gasForce.v_rel < 0.0 then if engine.cylinder5.gasForce.x < 0.987 then 2.4 + (177.4132 * engine.cylinder5.gasForce.x ^ 4.0 + (-287.2189 * engine.cylinder5.gasForce.x ^ 3.0 + (151.8252 * engine.cylinder5.gasForce.x ^ 2.0 + -24.9973 * engine.cylinder5.gasForce.x))) else 2129670.0 + (2836360.0 * engine.cylinder5.gasForce.x ^ 4.0 + (-10569296.0 * engine.cylinder5.gasForce.x ^ 3.0 + (14761814.0 * engine.cylinder5.gasForce.x ^ 2.0 + -9158505.0 * engine.cylinder5.gasForce.x))) else if engine.cylinder5.gasForce.x > 0.93 then -3929704.0 * engine.cylinder5.gasForce.x ^ 4.0 + (14748765.0 * engine.cylinder5.gasForce.x ^ 3.0 + (-20747000.0 * engine.cylinder5.gasForce.x ^ 2.0 + 12964477.0 * engine.cylinder5.gasForce.x)) - 3036495.0 else 2.4 + (145.93 * engine.cylinder5.gasForce.x ^ 4.0 + (-131.707 * engine.cylinder5.gasForce.x ^ 3.0 + (17.3438 * engine.cylinder5.gasForce.x ^ 2.0 + 17.9272 * engine.cylinder5.gasForce.x))));
//   engine.cylinder5.gasForce.f = -78539.8163397448 * (engine.cylinder5.gasForce.press * engine.cylinder5.gasForce.d ^ 2.0);
//   engine.cylinder5.gasForce.V = engine.cylinder5.gasForce.k0 + engine.cylinder5.gasForce.k1 * (1.0 - engine.cylinder5.gasForce.x);
//   engine.cylinder5.gasForce.dens = 1.0 / engine.cylinder5.gasForce.V;
//   engine.cylinder5.gasForce.p * engine.cylinder5.gasForce.V / 100000.0 = engine.cylinder5.gasForce.k * engine.cylinder5.gasForce.T;
//   engine.cylinder5.gasForce.s_rel = engine.cylinder5.gasForce.flange_b.s - engine.cylinder5.gasForce.flange_a.s;
//   engine.cylinder5.gasForce.flange_b.f = engine.cylinder5.gasForce.f;
//   engine.cylinder5.gasForce.flange_a.f = -engine.cylinder5.gasForce.f;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder5.Crank.frame_b.r_0 = engine.cylinder5.Crank.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder5.Crank.frame_a.R,{engine.cylinder5.Crank.r[1],engine.cylinder5.Crank.r[2],engine.cylinder5.Crank.r[3]});
//   engine.cylinder5.Crank.frame_b.R.T[1,1] = engine.cylinder5.Crank.frame_a.R.T[1,1];
//   engine.cylinder5.Crank.frame_b.R.T[1,2] = engine.cylinder5.Crank.frame_a.R.T[1,2];
//   engine.cylinder5.Crank.frame_b.R.T[1,3] = engine.cylinder5.Crank.frame_a.R.T[1,3];
//   engine.cylinder5.Crank.frame_b.R.T[2,1] = engine.cylinder5.Crank.frame_a.R.T[2,1];
//   engine.cylinder5.Crank.frame_b.R.T[2,2] = engine.cylinder5.Crank.frame_a.R.T[2,2];
//   engine.cylinder5.Crank.frame_b.R.T[2,3] = engine.cylinder5.Crank.frame_a.R.T[2,3];
//   engine.cylinder5.Crank.frame_b.R.T[3,1] = engine.cylinder5.Crank.frame_a.R.T[3,1];
//   engine.cylinder5.Crank.frame_b.R.T[3,2] = engine.cylinder5.Crank.frame_a.R.T[3,2];
//   engine.cylinder5.Crank.frame_b.R.T[3,3] = engine.cylinder5.Crank.frame_a.R.T[3,3];
//   engine.cylinder5.Crank.frame_b.R.w[1] = engine.cylinder5.Crank.frame_a.R.w[1];
//   engine.cylinder5.Crank.frame_b.R.w[2] = engine.cylinder5.Crank.frame_a.R.w[2];
//   engine.cylinder5.Crank.frame_b.R.w[3] = engine.cylinder5.Crank.frame_a.R.w[3];
//   0.0 = engine.cylinder5.Crank.frame_a.f[1] + engine.cylinder5.Crank.frame_b.f[1];
//   0.0 = engine.cylinder5.Crank.frame_a.f[2] + engine.cylinder5.Crank.frame_b.f[2];
//   0.0 = engine.cylinder5.Crank.frame_a.f[3] + engine.cylinder5.Crank.frame_b.f[3];
//   0.0 = engine.cylinder5.Crank.frame_a.t[1] + (engine.cylinder5.Crank.frame_b.t[1] + (engine.cylinder5.Crank.r[2] * engine.cylinder5.Crank.frame_b.f[3] + (-engine.cylinder5.Crank.r[3] * engine.cylinder5.Crank.frame_b.f[2])));
//   0.0 = engine.cylinder5.Crank.frame_a.t[2] + (engine.cylinder5.Crank.frame_b.t[2] + (engine.cylinder5.Crank.r[3] * engine.cylinder5.Crank.frame_b.f[1] + (-engine.cylinder5.Crank.r[1] * engine.cylinder5.Crank.frame_b.f[3])));
//   0.0 = engine.cylinder5.Crank.frame_a.t[3] + (engine.cylinder5.Crank.frame_b.t[3] + (engine.cylinder5.Crank.r[1] * engine.cylinder5.Crank.frame_b.f[2] + (-engine.cylinder5.Crank.r[2] * engine.cylinder5.Crank.frame_b.f[1])));
//   engine.cylinder5.CrankShape.vis.R.T[1,1] = engine.cylinder5.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder5.CrankShape.vis.R.T[1,2] = engine.cylinder5.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder5.CrankShape.vis.R.T[1,3] = engine.cylinder5.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder5.CrankShape.vis.R.T[2,1] = engine.cylinder5.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder5.CrankShape.vis.R.T[2,2] = engine.cylinder5.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder5.CrankShape.vis.R.T[2,3] = engine.cylinder5.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder5.CrankShape.vis.R.T[3,1] = engine.cylinder5.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder5.CrankShape.vis.R.T[3,2] = engine.cylinder5.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder5.CrankShape.vis.R.T[3,3] = engine.cylinder5.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder5.CrankShape.vis.R.w[1] = engine.cylinder5.CrankShape.frame_a.R.w[1];
//   engine.cylinder5.CrankShape.vis.R.w[2] = engine.cylinder5.CrankShape.frame_a.R.w[2];
//   engine.cylinder5.CrankShape.vis.R.w[3] = engine.cylinder5.CrankShape.frame_a.R.w[3];
//   engine.cylinder5.CrankShape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder5.CrankShape.vis.shapeType);
//   engine.cylinder5.CrankShape.vis.rxvisobj[1] = engine.cylinder5.CrankShape.vis.R.T[1,1] * engine.cylinder5.CrankShape.vis.e_x[1] + (engine.cylinder5.CrankShape.vis.R.T[2,1] * engine.cylinder5.CrankShape.vis.e_x[2] + engine.cylinder5.CrankShape.vis.R.T[3,1] * engine.cylinder5.CrankShape.vis.e_x[3]);
//   engine.cylinder5.CrankShape.vis.rxvisobj[2] = engine.cylinder5.CrankShape.vis.R.T[1,2] * engine.cylinder5.CrankShape.vis.e_x[1] + (engine.cylinder5.CrankShape.vis.R.T[2,2] * engine.cylinder5.CrankShape.vis.e_x[2] + engine.cylinder5.CrankShape.vis.R.T[3,2] * engine.cylinder5.CrankShape.vis.e_x[3]);
//   engine.cylinder5.CrankShape.vis.rxvisobj[3] = engine.cylinder5.CrankShape.vis.R.T[1,3] * engine.cylinder5.CrankShape.vis.e_x[1] + (engine.cylinder5.CrankShape.vis.R.T[2,3] * engine.cylinder5.CrankShape.vis.e_x[2] + engine.cylinder5.CrankShape.vis.R.T[3,3] * engine.cylinder5.CrankShape.vis.e_x[3]);
//   engine.cylinder5.CrankShape.vis.ryvisobj[1] = engine.cylinder5.CrankShape.vis.R.T[1,1] * engine.cylinder5.CrankShape.vis.e_y[1] + (engine.cylinder5.CrankShape.vis.R.T[2,1] * engine.cylinder5.CrankShape.vis.e_y[2] + engine.cylinder5.CrankShape.vis.R.T[3,1] * engine.cylinder5.CrankShape.vis.e_y[3]);
//   engine.cylinder5.CrankShape.vis.ryvisobj[2] = engine.cylinder5.CrankShape.vis.R.T[1,2] * engine.cylinder5.CrankShape.vis.e_y[1] + (engine.cylinder5.CrankShape.vis.R.T[2,2] * engine.cylinder5.CrankShape.vis.e_y[2] + engine.cylinder5.CrankShape.vis.R.T[3,2] * engine.cylinder5.CrankShape.vis.e_y[3]);
//   engine.cylinder5.CrankShape.vis.ryvisobj[3] = engine.cylinder5.CrankShape.vis.R.T[1,3] * engine.cylinder5.CrankShape.vis.e_y[1] + (engine.cylinder5.CrankShape.vis.R.T[2,3] * engine.cylinder5.CrankShape.vis.e_y[2] + engine.cylinder5.CrankShape.vis.R.T[3,3] * engine.cylinder5.CrankShape.vis.e_y[3]);
//   engine.cylinder5.CrankShape.vis.rvisobj = engine.cylinder5.CrankShape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder5.CrankShape.vis.R.T[1,1],engine.cylinder5.CrankShape.vis.R.T[1,2],engine.cylinder5.CrankShape.vis.R.T[1,3]},{engine.cylinder5.CrankShape.vis.R.T[2,1],engine.cylinder5.CrankShape.vis.R.T[2,2],engine.cylinder5.CrankShape.vis.R.T[2,3]},{engine.cylinder5.CrankShape.vis.R.T[3,1],engine.cylinder5.CrankShape.vis.R.T[3,2],engine.cylinder5.CrankShape.vis.R.T[3,3]}},{engine.cylinder5.CrankShape.vis.r_shape[1],engine.cylinder5.CrankShape.vis.r_shape[2],engine.cylinder5.CrankShape.vis.r_shape[3]});
//   engine.cylinder5.CrankShape.vis.size[1] = engine.cylinder5.CrankShape.vis.length;
//   engine.cylinder5.CrankShape.vis.size[2] = engine.cylinder5.CrankShape.vis.width;
//   engine.cylinder5.CrankShape.vis.size[3] = engine.cylinder5.CrankShape.vis.height;
//   engine.cylinder5.CrankShape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder5.CrankShape.vis.color[1] / 255.0,engine.cylinder5.CrankShape.vis.color[2] / 255.0,engine.cylinder5.CrankShape.vis.color[3] / 255.0,engine.cylinder5.CrankShape.vis.specularCoefficient);
//   engine.cylinder5.CrankShape.vis.Extra = engine.cylinder5.CrankShape.vis.extra;
//   engine.cylinder5.CrankShape.frame_a.f[1] = 0.0;
//   engine.cylinder5.CrankShape.frame_a.f[2] = 0.0;
//   engine.cylinder5.CrankShape.frame_a.f[3] = 0.0;
//   engine.cylinder5.CrankShape.frame_a.t[1] = 0.0;
//   engine.cylinder5.CrankShape.frame_a.t[2] = 0.0;
//   engine.cylinder5.CrankShape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder6.Mid.frame_b.r_0 = engine.cylinder6.Mid.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Mid.frame_a.R,{engine.cylinder6.Mid.r[1],engine.cylinder6.Mid.r[2],engine.cylinder6.Mid.r[3]});
//   engine.cylinder6.Mid.frame_b.R.T[1,1] = engine.cylinder6.Mid.frame_a.R.T[1,1];
//   engine.cylinder6.Mid.frame_b.R.T[1,2] = engine.cylinder6.Mid.frame_a.R.T[1,2];
//   engine.cylinder6.Mid.frame_b.R.T[1,3] = engine.cylinder6.Mid.frame_a.R.T[1,3];
//   engine.cylinder6.Mid.frame_b.R.T[2,1] = engine.cylinder6.Mid.frame_a.R.T[2,1];
//   engine.cylinder6.Mid.frame_b.R.T[2,2] = engine.cylinder6.Mid.frame_a.R.T[2,2];
//   engine.cylinder6.Mid.frame_b.R.T[2,3] = engine.cylinder6.Mid.frame_a.R.T[2,3];
//   engine.cylinder6.Mid.frame_b.R.T[3,1] = engine.cylinder6.Mid.frame_a.R.T[3,1];
//   engine.cylinder6.Mid.frame_b.R.T[3,2] = engine.cylinder6.Mid.frame_a.R.T[3,2];
//   engine.cylinder6.Mid.frame_b.R.T[3,3] = engine.cylinder6.Mid.frame_a.R.T[3,3];
//   engine.cylinder6.Mid.frame_b.R.w[1] = engine.cylinder6.Mid.frame_a.R.w[1];
//   engine.cylinder6.Mid.frame_b.R.w[2] = engine.cylinder6.Mid.frame_a.R.w[2];
//   engine.cylinder6.Mid.frame_b.R.w[3] = engine.cylinder6.Mid.frame_a.R.w[3];
//   0.0 = engine.cylinder6.Mid.frame_a.f[1] + engine.cylinder6.Mid.frame_b.f[1];
//   0.0 = engine.cylinder6.Mid.frame_a.f[2] + engine.cylinder6.Mid.frame_b.f[2];
//   0.0 = engine.cylinder6.Mid.frame_a.f[3] + engine.cylinder6.Mid.frame_b.f[3];
//   0.0 = engine.cylinder6.Mid.frame_a.t[1] + (engine.cylinder6.Mid.frame_b.t[1] + (engine.cylinder6.Mid.r[2] * engine.cylinder6.Mid.frame_b.f[3] + (-engine.cylinder6.Mid.r[3] * engine.cylinder6.Mid.frame_b.f[2])));
//   0.0 = engine.cylinder6.Mid.frame_a.t[2] + (engine.cylinder6.Mid.frame_b.t[2] + (engine.cylinder6.Mid.r[3] * engine.cylinder6.Mid.frame_b.f[1] + (-engine.cylinder6.Mid.r[1] * engine.cylinder6.Mid.frame_b.f[3])));
//   0.0 = engine.cylinder6.Mid.frame_a.t[3] + (engine.cylinder6.Mid.frame_b.t[3] + (engine.cylinder6.Mid.r[1] * engine.cylinder6.Mid.frame_b.f[2] + (-engine.cylinder6.Mid.r[2] * engine.cylinder6.Mid.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder6.Mounting.frame_b.r_0 = engine.cylinder6.Mounting.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Mounting.frame_a.R,{engine.cylinder6.Mounting.r[1],engine.cylinder6.Mounting.r[2],engine.cylinder6.Mounting.r[3]});
//   engine.cylinder6.Mounting.frame_b.R.T[1,1] = engine.cylinder6.Mounting.frame_a.R.T[1,1];
//   engine.cylinder6.Mounting.frame_b.R.T[1,2] = engine.cylinder6.Mounting.frame_a.R.T[1,2];
//   engine.cylinder6.Mounting.frame_b.R.T[1,3] = engine.cylinder6.Mounting.frame_a.R.T[1,3];
//   engine.cylinder6.Mounting.frame_b.R.T[2,1] = engine.cylinder6.Mounting.frame_a.R.T[2,1];
//   engine.cylinder6.Mounting.frame_b.R.T[2,2] = engine.cylinder6.Mounting.frame_a.R.T[2,2];
//   engine.cylinder6.Mounting.frame_b.R.T[2,3] = engine.cylinder6.Mounting.frame_a.R.T[2,3];
//   engine.cylinder6.Mounting.frame_b.R.T[3,1] = engine.cylinder6.Mounting.frame_a.R.T[3,1];
//   engine.cylinder6.Mounting.frame_b.R.T[3,2] = engine.cylinder6.Mounting.frame_a.R.T[3,2];
//   engine.cylinder6.Mounting.frame_b.R.T[3,3] = engine.cylinder6.Mounting.frame_a.R.T[3,3];
//   engine.cylinder6.Mounting.frame_b.R.w[1] = engine.cylinder6.Mounting.frame_a.R.w[1];
//   engine.cylinder6.Mounting.frame_b.R.w[2] = engine.cylinder6.Mounting.frame_a.R.w[2];
//   engine.cylinder6.Mounting.frame_b.R.w[3] = engine.cylinder6.Mounting.frame_a.R.w[3];
//   0.0 = engine.cylinder6.Mounting.frame_a.f[1] + engine.cylinder6.Mounting.frame_b.f[1];
//   0.0 = engine.cylinder6.Mounting.frame_a.f[2] + engine.cylinder6.Mounting.frame_b.f[2];
//   0.0 = engine.cylinder6.Mounting.frame_a.f[3] + engine.cylinder6.Mounting.frame_b.f[3];
//   0.0 = engine.cylinder6.Mounting.frame_a.t[1] + (engine.cylinder6.Mounting.frame_b.t[1] + (engine.cylinder6.Mounting.r[2] * engine.cylinder6.Mounting.frame_b.f[3] + (-engine.cylinder6.Mounting.r[3] * engine.cylinder6.Mounting.frame_b.f[2])));
//   0.0 = engine.cylinder6.Mounting.frame_a.t[2] + (engine.cylinder6.Mounting.frame_b.t[2] + (engine.cylinder6.Mounting.r[3] * engine.cylinder6.Mounting.frame_b.f[1] + (-engine.cylinder6.Mounting.r[1] * engine.cylinder6.Mounting.frame_b.f[3])));
//   0.0 = engine.cylinder6.Mounting.frame_a.t[3] + (engine.cylinder6.Mounting.frame_b.t[3] + (engine.cylinder6.Mounting.r[1] * engine.cylinder6.Mounting.frame_b.f[2] + (-engine.cylinder6.Mounting.r[2] * engine.cylinder6.Mounting.frame_b.f[1])));
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder6.CylinderInclination.frame_b.r_0 = engine.cylinder6.CylinderInclination.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.CylinderInclination.frame_a.R,{engine.cylinder6.CylinderInclination.r[1],engine.cylinder6.CylinderInclination.r[2],engine.cylinder6.CylinderInclination.r[3]});
//   engine.cylinder6.CylinderInclination.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder6.CylinderInclination.frame_a.R,engine.cylinder6.CylinderInclination.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder6.CylinderInclination.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.CylinderInclination.R_rel,{engine.cylinder6.CylinderInclination.frame_b.f[1],engine.cylinder6.CylinderInclination.frame_b.f[2],engine.cylinder6.CylinderInclination.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder6.CylinderInclination.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.CylinderInclination.R_rel,{engine.cylinder6.CylinderInclination.frame_b.t[1],engine.cylinder6.CylinderInclination.frame_b.t[2],engine.cylinder6.CylinderInclination.frame_b.t[3]}) - {engine.cylinder6.CylinderInclination.r[2] * engine.cylinder6.CylinderInclination.frame_a.f[3] - engine.cylinder6.CylinderInclination.r[3] * engine.cylinder6.CylinderInclination.frame_a.f[2],engine.cylinder6.CylinderInclination.r[3] * engine.cylinder6.CylinderInclination.frame_a.f[1] - engine.cylinder6.CylinderInclination.r[1] * engine.cylinder6.CylinderInclination.frame_a.f[3],engine.cylinder6.CylinderInclination.r[1] * engine.cylinder6.CylinderInclination.frame_a.f[2] - engine.cylinder6.CylinderInclination.r[2] * engine.cylinder6.CylinderInclination.frame_a.f[1]};
//   assert(true,"Neither connector frame_a nor frame_b of FixedRotation object is connected");
//   engine.cylinder6.CrankAngle.frame_b.r_0 = engine.cylinder6.CrankAngle.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.CrankAngle.frame_a.R,{engine.cylinder6.CrankAngle.r[1],engine.cylinder6.CrankAngle.r[2],engine.cylinder6.CrankAngle.r[3]});
//   engine.cylinder6.CrankAngle.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder6.CrankAngle.frame_a.R,engine.cylinder6.CrankAngle.R_rel);
//   {0.0,0.0,0.0} = engine.cylinder6.CrankAngle.frame_a.f + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.CrankAngle.R_rel,{engine.cylinder6.CrankAngle.frame_b.f[1],engine.cylinder6.CrankAngle.frame_b.f[2],engine.cylinder6.CrankAngle.frame_b.f[3]});
//   {0.0,0.0,0.0} = engine.cylinder6.CrankAngle.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.CrankAngle.R_rel,{engine.cylinder6.CrankAngle.frame_b.t[1],engine.cylinder6.CrankAngle.frame_b.t[2],engine.cylinder6.CrankAngle.frame_b.t[3]}) - {engine.cylinder6.CrankAngle.r[2] * engine.cylinder6.CrankAngle.frame_a.f[3] - engine.cylinder6.CrankAngle.r[3] * engine.cylinder6.CrankAngle.frame_a.f[2],engine.cylinder6.CrankAngle.r[3] * engine.cylinder6.CrankAngle.frame_a.f[1] - engine.cylinder6.CrankAngle.r[1] * engine.cylinder6.CrankAngle.frame_a.f[3],engine.cylinder6.CrankAngle.r[1] * engine.cylinder6.CrankAngle.frame_a.f[2] - engine.cylinder6.CrankAngle.r[2] * engine.cylinder6.CrankAngle.frame_a.f[1]};
//   engine.cylinder6.jointRRP.jointUSP.prismatic.axis.f = engine.cylinder6.jointRRP.jointUSP.prismatic.f;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.axis.s = engine.cylinder6.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.bearing.s = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.distance = engine.cylinder6.jointRRP.jointUSP.prismatic.s_offset + engine.cylinder6.jointRRP.jointUSP.prismatic.s;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.distance * engine.cylinder6.jointRRP.jointUSP.prismatic.e[1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.distance * engine.cylinder6.jointRRP.jointUSP.prismatic.e[2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.distance * engine.cylinder6.jointRRP.jointUSP.prismatic.e[3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R,{engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[1],engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[2],engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[3]});
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[1] + engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[1];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[2] + engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[2];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[3] + engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[3];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[1] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[3] + (-engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[2])));
//   0.0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[2] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[3] * engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[1] + (-engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[3])));
//   0.0 = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[3] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[1] * engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[2] + (-engine.cylinder6.jointRRP.jointUSP.prismatic.r_rel_a[2] * engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[1])));
//   engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[1] - engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[2] - engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.r_b[3] - engine.cylinder6.jointRRP.jointUSP.prismatic.r_a[3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.B = 2.0 * (engine.cylinder6.jointRRP.jointUSP.prismatic.e[1] * engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[1] + (engine.cylinder6.jointRRP.jointUSP.prismatic.e[2] * engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[2] + engine.cylinder6.jointRRP.jointUSP.prismatic.e[3] * engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[3]));
//   engine.cylinder6.jointRRP.jointUSP.prismatic.C = engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[1] ^ 2.0 + (engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[2] ^ 2.0 + engine.cylinder6.jointRRP.jointUSP.prismatic.rbra[3] ^ 2.0) - engine.cylinder6.jointRRP.jointUSP.prismatic.length ^ 2.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.k1 = engine.cylinder6.jointRRP.jointUSP.prismatic.B / 2.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.k1a = engine.cylinder6.jointRRP.jointUSP.prismatic.k1 ^ 2.0 - engine.cylinder6.jointRRP.jointUSP.prismatic.C;
//   assert(noEvent(engine.cylinder6.jointRRP.jointUSP.prismatic.k1a > 1e-10),"
// Singular position of loop (either no or two analytic solutions;
// the mechanism has lost one-degree-of freedom in this position).
// Try first to use another Modelica.Mechanics.MultiBody.Joints.Assemblies.JointXXX component.
// If this also lead to singular positions, it could be that this
// kinematic loop cannot be solved analytically with a fixed state
// selection. In this case you have to build up the loop with
// basic joints (NO aggregation JointXXX components) and rely on
// dynamic state selection, i.e., during simulation the states will
// be dynamically selected in such a way that in no position a
// degree of freedom is lost.
// ");
//   engine.cylinder6.jointRRP.jointUSP.prismatic.k1b = Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(engine.cylinder6.jointRRP.jointUSP.prismatic.k1a,1e-12);
//   engine.cylinder6.jointRRP.jointUSP.prismatic.k2 = sqrt(engine.cylinder6.jointRRP.jointUSP.prismatic.k1b);
//   engine.cylinder6.jointRRP.jointUSP.prismatic.distance = (if engine.cylinder6.jointRRP.jointUSP.prismatic.positiveBranch then engine.cylinder6.jointRRP.jointUSP.prismatic.k2 else -engine.cylinder6.jointRRP.jointUSP.prismatic.k2) - engine.cylinder6.jointRRP.jointUSP.prismatic.k1;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[1] - engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[2] - engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[3] - engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R,{engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[1],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[2],engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[3]});
//   engine.cylinder6.jointRRP.jointUSP.rod1.constraintResidue = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1] = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[1] / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2] = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[2] / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3] = engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[3] / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[1] = engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2];
//   engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[2] = engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3];
//   engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[3] = engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1];
//   engine.cylinder6.jointRRP.jointUSP.rod1.length2_n2_a = engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[1] ^ 2.0 + (engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[2] ^ 2.0 + engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[3] ^ 2.0);
//   assert(engine.cylinder6.jointRRP.jointUSP.rod1.length2_n2_a > 1e-10,"
// A Modelica.Mechanics.MultiBody.Joints.UniversalSpherical joint (consisting of
// a universal joint and a spherical joint connected together
// by a rigid rod) is in the singular configuration of the
// universal joint. This means that axis 1 of the universal
// joint defined via parameter \"n1_a\" is parallel to vector
// \"rRod_ia\" that is directed from the origin of frame_a to the
// origin of frame_b.
//    You may try to use another \"n1_a\" vector. If this fails,
// use instead Modelica.Mechanics.MultiBody.Joints.SphericalSpherical, if this is
// possible, because this joint aggregation does not have a
// singular configuration.
// ");
//   engine.cylinder6.jointRRP.jointUSP.rod1.length_n2_a = sqrt(engine.cylinder6.jointRRP.jointUSP.rod1.length2_n2_a);
//   engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] = engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[1] / engine.cylinder6.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] = engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[2] / engine.cylinder6.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] = engine.cylinder6.jointRRP.jointUSP.rod1.n2_a[3] / engine.cylinder6.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1] = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] - engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2];
//   engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2] = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] - engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3];
//   engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3] = engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] - engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1];
//   engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L = (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R,{der(engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[1]),der(engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[2]),der(engine.cylinder6.jointRRP.jointUSP.rod1.rRod_0[3])}) - {engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[3] - engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[2],engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[3] * engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[1] - engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[3],engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[1] * engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[2] - engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[2] * engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[1]}) / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[1] = (engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1] * (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[3] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[2]) + (engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2] * (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[1] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[3]) + engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3] * (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[2] - engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[1]))) / engine.cylinder6.jointRRP.jointUSP.rod1.length_n2_a;
//   engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[2] = (-engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1]) * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + ((-engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2]) * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + (-engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3]) * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[3] = engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[2] + engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.der_rRod_a_L[3]);
//   engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3]},{engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1],engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2],engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3]},{engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1],engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2],engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3]}},{engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[1],engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[2],engine.cylinder6.jointRRP.jointUSP.rod1.w_rel_ia1[3]});
//   engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2 = Modelica.Mechanics.MultiBody.Frames.from_T({{engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[1],engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[1],engine.cylinder6.jointRRP.jointUSP.rod1.e3_ia[1]},{engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[2],engine.cylinder6.jointRRP.jointUSP.rod1.e3_ia[2]},{engine.cylinder6.jointRRP.jointUSP.rod1.eRod_ia[3],engine.cylinder6.jointRRP.jointUSP.rod1.e2_ia[3],engine.cylinder6.jointRRP.jointUSP.rod1.e3_ia[3]}},{0.0,0.0,0.0});
//   engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia1,engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia2);
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia);
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[1],engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[2],engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[3]});
//   engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a = Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.jointRRP.jointUSP.rod1.R_rel_ia,{engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[1],engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[2],engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[3]});
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[1] = ((-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] * 1.0 / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1] / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[2] = ((-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] * 1.0 / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2] / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[3] = ((-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + ((-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + (-engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3]) * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3])) * (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] * 1.0 / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength / (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.n1_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3]))) + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.e2_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3])) * engine.cylinder6.jointRRP.jointUSP.rod1.e3_a[3] / engine.cylinder6.jointRRP.jointUSP.rod1.rodLength;
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[1] = (-engine.cylinder6.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1] + engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[1];
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[2] = (-engine.cylinder6.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[2];
//   engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[3] = (-engine.cylinder6.jointRRP.jointUSP.rod1.f_rod) * engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3] + engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[3];
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f = Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[1],engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[2],engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[3]},engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[3] = 0.0;
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[1] + engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a[1]);
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[2] + engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a[2]);
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[3] + engine.cylinder6.jointRRP.jointUSP.rod1.f_ia_a[3]);
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[3] + (-engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[2])));
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[3] * engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[1] + (-engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[3])));
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.t_ia_a[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[1] * engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[2] + (-engine.cylinder6.jointRRP.jointUSP.rod1.rRod_a[2] * engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a[1])));
//   engine.cylinder6.jointRRP.jointUSP.rod1.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R,{engine.cylinder6.jointRRP.jointUSP.rod2.r[1],engine.cylinder6.jointRRP.jointUSP.rod2.r[2],engine.cylinder6.jointRRP.jointUSP.rod2.r[3]});
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[1] + engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[1];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[2] + engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[2];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[3] + engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[3];
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[1] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder6.jointRRP.jointUSP.rod2.r[2] * engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[3] + (-engine.cylinder6.jointRRP.jointUSP.rod2.r[3] * engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[2])));
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[2] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder6.jointRRP.jointUSP.rod2.r[3] * engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[1] + (-engine.cylinder6.jointRRP.jointUSP.rod2.r[1] * engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[3])));
//   0.0 = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[3] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder6.jointRRP.jointUSP.rod2.r[1] * engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[2] + (-engine.cylinder6.jointRRP.jointUSP.rod2.r[2] * engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[1])));
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel = Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R,{engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1] - engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1],engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2] - engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2],engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3] - engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3]});
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   assert(true,"Connector frame_resolve must be connected exactly once");
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,"Connector frame_a must be connected at least once");
//   assert(true,"Connector frame_b must be connected at least once");
//   engine.cylinder6.jointRRP.jointUSP.position_b[1].y = engine.cylinder6.jointRRP.jointUSP.position_b[1].k;
//   engine.cylinder6.jointRRP.jointUSP.position_b[2].y = engine.cylinder6.jointRRP.jointUSP.position_b[2].k;
//   engine.cylinder6.jointRRP.jointUSP.position_b[3].y = engine.cylinder6.jointRRP.jointUSP.position_b[3].k;
//   engine.cylinder6.jointRRP.jointUSP.aux = {engine.cylinder6.jointRRP.jointUSP.prismatic.e[1],engine.cylinder6.jointRRP.jointUSP.prismatic.e[2],engine.cylinder6.jointRRP.jointUSP.prismatic.e[3]} * Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[1],engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[2],engine.cylinder6.jointRRP.jointUSP.rod1.eRod_a[3]},engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R);
//   engine.cylinder6.jointRRP.jointUSP.f_rod = ((-engine.cylinder6.jointRRP.jointUSP.prismatic.f) - {engine.cylinder6.jointRRP.jointUSP.prismatic.e[1],engine.cylinder6.jointRRP.jointUSP.prismatic.e[2],engine.cylinder6.jointRRP.jointUSP.prismatic.e[3]} * ({engine.cylinder6.jointRRP.jointUSP.frame_ib.f[1] + engine.cylinder6.jointRRP.jointUSP.frame_im.f[1],engine.cylinder6.jointRRP.jointUSP.frame_ib.f[2] + engine.cylinder6.jointRRP.jointUSP.frame_im.f[2],engine.cylinder6.jointRRP.jointUSP.frame_ib.f[3] + engine.cylinder6.jointRRP.jointUSP.frame_im.f[3]} - Modelica.Mechanics.MultiBody.Frames.resolveRelative({engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[1],engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[2],engine.cylinder6.jointRRP.jointUSP.rod1.f_b_a1[3]},engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R,engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R))) / (if noEvent(abs(engine.cylinder6.jointRRP.jointUSP.aux) < 1e-10) then 1e-10 else engine.cylinder6.jointRRP.jointUSP.aux);
//   engine.cylinder6.jointRRP.jointUSP.totalPower = 0.0;
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Connector frame_a of component is not connected");
//   assert(true,"Connector frame_b of component is not connected");
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder6.Rod.frameTranslation.frame_b.r_0 = engine.cylinder6.Rod.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Rod.frameTranslation.frame_a.R,{engine.cylinder6.Rod.frameTranslation.r[1],engine.cylinder6.Rod.frameTranslation.r[2],engine.cylinder6.Rod.frameTranslation.r[3]});
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder6.Rod.frameTranslation.frame_a.f[1] + engine.cylinder6.Rod.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder6.Rod.frameTranslation.frame_a.f[2] + engine.cylinder6.Rod.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder6.Rod.frameTranslation.frame_a.f[3] + engine.cylinder6.Rod.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder6.Rod.frameTranslation.frame_a.t[1] + (engine.cylinder6.Rod.frameTranslation.frame_b.t[1] + (engine.cylinder6.Rod.frameTranslation.r[2] * engine.cylinder6.Rod.frameTranslation.frame_b.f[3] + (-engine.cylinder6.Rod.frameTranslation.r[3] * engine.cylinder6.Rod.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder6.Rod.frameTranslation.frame_a.t[2] + (engine.cylinder6.Rod.frameTranslation.frame_b.t[2] + (engine.cylinder6.Rod.frameTranslation.r[3] * engine.cylinder6.Rod.frameTranslation.frame_b.f[1] + (-engine.cylinder6.Rod.frameTranslation.r[1] * engine.cylinder6.Rod.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder6.Rod.frameTranslation.frame_a.t[3] + (engine.cylinder6.Rod.frameTranslation.frame_b.t[3] + (engine.cylinder6.Rod.frameTranslation.r[1] * engine.cylinder6.Rod.frameTranslation.frame_b.f[2] + (-engine.cylinder6.Rod.frameTranslation.r[2] * engine.cylinder6.Rod.frameTranslation.frame_b.f[1])));
//   engine.cylinder6.Rod.body.r_0[1] = engine.cylinder6.Rod.body.frame_a.r_0[1];
//   engine.cylinder6.Rod.body.r_0[2] = engine.cylinder6.Rod.body.frame_a.r_0[2];
//   engine.cylinder6.Rod.body.r_0[3] = engine.cylinder6.Rod.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder6.Rod.body.Q[1] = 0.0;
//   engine.cylinder6.Rod.body.Q[2] = 0.0;
//   engine.cylinder6.Rod.body.Q[3] = 0.0;
//   engine.cylinder6.Rod.body.Q[4] = 1.0;
//   engine.cylinder6.Rod.body.phi[1] = 0.0;
//   engine.cylinder6.Rod.body.phi[2] = 0.0;
//   engine.cylinder6.Rod.body.phi[3] = 0.0;
//   engine.cylinder6.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder6.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder6.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder6.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder6.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder6.Rod.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder6.Rod.body.useQuaternions then
//   engine.cylinder6.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder6.Rod.body.Q[1],engine.cylinder6.Rod.body.Q[2],engine.cylinder6.Rod.body.Q[3],engine.cylinder6.Rod.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder6.Rod.body.Q[1],engine.cylinder6.Rod.body.Q[2],engine.cylinder6.Rod.body.Q[3],engine.cylinder6.Rod.body.Q[4]},{der(engine.cylinder6.Rod.body.Q[1]),der(engine.cylinder6.Rod.body.Q[2]),der(engine.cylinder6.Rod.body.Q[3]),der(engine.cylinder6.Rod.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder6.Rod.body.Q[1],engine.cylinder6.Rod.body.Q[2],engine.cylinder6.Rod.body.Q[3],engine.cylinder6.Rod.body.Q[4]});
//   engine.cylinder6.Rod.body.phi[1] = 0.0;
//   engine.cylinder6.Rod.body.phi[2] = 0.0;
//   engine.cylinder6.Rod.body.phi[3] = 0.0;
//   engine.cylinder6.Rod.body.phi_d[1] = 0.0;
//   engine.cylinder6.Rod.body.phi_d[2] = 0.0;
//   engine.cylinder6.Rod.body.phi_d[3] = 0.0;
//   engine.cylinder6.Rod.body.phi_dd[1] = 0.0;
//   engine.cylinder6.Rod.body.phi_dd[2] = 0.0;
//   engine.cylinder6.Rod.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder6.Rod.body.phi_d[1] = der(engine.cylinder6.Rod.body.phi[1]);
//   engine.cylinder6.Rod.body.phi_d[2] = der(engine.cylinder6.Rod.body.phi[2]);
//   engine.cylinder6.Rod.body.phi_d[3] = der(engine.cylinder6.Rod.body.phi[3]);
//   engine.cylinder6.Rod.body.phi_dd[1] = der(engine.cylinder6.Rod.body.phi_d[1]);
//   engine.cylinder6.Rod.body.phi_dd[2] = der(engine.cylinder6.Rod.body.phi_d[2]);
//   engine.cylinder6.Rod.body.phi_dd[3] = der(engine.cylinder6.Rod.body.phi_d[3]);
//   engine.cylinder6.Rod.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder6.Rod.body.sequence_angleStates[1],engine.cylinder6.Rod.body.sequence_angleStates[2],engine.cylinder6.Rod.body.sequence_angleStates[3]},{engine.cylinder6.Rod.body.phi[1],engine.cylinder6.Rod.body.phi[2],engine.cylinder6.Rod.body.phi[3]},{engine.cylinder6.Rod.body.phi_d[1],engine.cylinder6.Rod.body.phi_d[2],engine.cylinder6.Rod.body.phi_d[3]});
//   engine.cylinder6.Rod.body.Q[1] = 0.0;
//   engine.cylinder6.Rod.body.Q[2] = 0.0;
//   engine.cylinder6.Rod.body.Q[3] = 0.0;
//   engine.cylinder6.Rod.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder6.Rod.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder6.Rod.body.frame_a.r_0[1],engine.cylinder6.Rod.body.frame_a.r_0[2],engine.cylinder6.Rod.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Rod.body.frame_a.R,{engine.cylinder6.Rod.body.r_CM[1],engine.cylinder6.Rod.body.r_CM[2],engine.cylinder6.Rod.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder6.Rod.body.v_0[1] = der(engine.cylinder6.Rod.body.frame_a.r_0[1]);
//   engine.cylinder6.Rod.body.v_0[2] = der(engine.cylinder6.Rod.body.frame_a.r_0[2]);
//   engine.cylinder6.Rod.body.v_0[3] = der(engine.cylinder6.Rod.body.frame_a.r_0[3]);
//   engine.cylinder6.Rod.body.a_0[1] = der(engine.cylinder6.Rod.body.v_0[1]);
//   engine.cylinder6.Rod.body.a_0[2] = der(engine.cylinder6.Rod.body.v_0[2]);
//   engine.cylinder6.Rod.body.a_0[3] = der(engine.cylinder6.Rod.body.v_0[3]);
//   engine.cylinder6.Rod.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder6.Rod.body.frame_a.R);
//   engine.cylinder6.Rod.body.z_a[1] = der(engine.cylinder6.Rod.body.w_a[1]);
//   engine.cylinder6.Rod.body.z_a[2] = der(engine.cylinder6.Rod.body.w_a[2]);
//   engine.cylinder6.Rod.body.z_a[3] = der(engine.cylinder6.Rod.body.w_a[3]);
//   engine.cylinder6.Rod.body.frame_a.f = engine.cylinder6.Rod.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Rod.body.frame_a.R,{engine.cylinder6.Rod.body.a_0[1] - engine.cylinder6.Rod.body.g_0[1],engine.cylinder6.Rod.body.a_0[2] - engine.cylinder6.Rod.body.g_0[2],engine.cylinder6.Rod.body.a_0[3] - engine.cylinder6.Rod.body.g_0[3]}) + {engine.cylinder6.Rod.body.z_a[2] * engine.cylinder6.Rod.body.r_CM[3] - engine.cylinder6.Rod.body.z_a[3] * engine.cylinder6.Rod.body.r_CM[2],engine.cylinder6.Rod.body.z_a[3] * engine.cylinder6.Rod.body.r_CM[1] - engine.cylinder6.Rod.body.z_a[1] * engine.cylinder6.Rod.body.r_CM[3],engine.cylinder6.Rod.body.z_a[1] * engine.cylinder6.Rod.body.r_CM[2] - engine.cylinder6.Rod.body.z_a[2] * engine.cylinder6.Rod.body.r_CM[1]} + {engine.cylinder6.Rod.body.w_a[2] * (engine.cylinder6.Rod.body.w_a[1] * engine.cylinder6.Rod.body.r_CM[2] - engine.cylinder6.Rod.body.w_a[2] * engine.cylinder6.Rod.body.r_CM[1]) - engine.cylinder6.Rod.body.w_a[3] * (engine.cylinder6.Rod.body.w_a[3] * engine.cylinder6.Rod.body.r_CM[1] - engine.cylinder6.Rod.body.w_a[1] * engine.cylinder6.Rod.body.r_CM[3]),engine.cylinder6.Rod.body.w_a[3] * (engine.cylinder6.Rod.body.w_a[2] * engine.cylinder6.Rod.body.r_CM[3] - engine.cylinder6.Rod.body.w_a[3] * engine.cylinder6.Rod.body.r_CM[2]) - engine.cylinder6.Rod.body.w_a[1] * (engine.cylinder6.Rod.body.w_a[1] * engine.cylinder6.Rod.body.r_CM[2] - engine.cylinder6.Rod.body.w_a[2] * engine.cylinder6.Rod.body.r_CM[1]),engine.cylinder6.Rod.body.w_a[1] * (engine.cylinder6.Rod.body.w_a[3] * engine.cylinder6.Rod.body.r_CM[1] - engine.cylinder6.Rod.body.w_a[1] * engine.cylinder6.Rod.body.r_CM[3]) - engine.cylinder6.Rod.body.w_a[2] * (engine.cylinder6.Rod.body.w_a[2] * engine.cylinder6.Rod.body.r_CM[3] - engine.cylinder6.Rod.body.w_a[3] * engine.cylinder6.Rod.body.r_CM[2])});
//   engine.cylinder6.Rod.body.frame_a.t[1] = engine.cylinder6.Rod.body.I[1,1] * engine.cylinder6.Rod.body.z_a[1] + (engine.cylinder6.Rod.body.I[1,2] * engine.cylinder6.Rod.body.z_a[2] + (engine.cylinder6.Rod.body.I[1,3] * engine.cylinder6.Rod.body.z_a[3] + (engine.cylinder6.Rod.body.w_a[2] * (engine.cylinder6.Rod.body.I[3,1] * engine.cylinder6.Rod.body.w_a[1] + (engine.cylinder6.Rod.body.I[3,2] * engine.cylinder6.Rod.body.w_a[2] + engine.cylinder6.Rod.body.I[3,3] * engine.cylinder6.Rod.body.w_a[3])) + ((-engine.cylinder6.Rod.body.w_a[3] * (engine.cylinder6.Rod.body.I[2,1] * engine.cylinder6.Rod.body.w_a[1] + (engine.cylinder6.Rod.body.I[2,2] * engine.cylinder6.Rod.body.w_a[2] + engine.cylinder6.Rod.body.I[2,3] * engine.cylinder6.Rod.body.w_a[3]))) + (engine.cylinder6.Rod.body.r_CM[2] * engine.cylinder6.Rod.body.frame_a.f[3] + (-engine.cylinder6.Rod.body.r_CM[3] * engine.cylinder6.Rod.body.frame_a.f[2]))))));
//   engine.cylinder6.Rod.body.frame_a.t[2] = engine.cylinder6.Rod.body.I[2,1] * engine.cylinder6.Rod.body.z_a[1] + (engine.cylinder6.Rod.body.I[2,2] * engine.cylinder6.Rod.body.z_a[2] + (engine.cylinder6.Rod.body.I[2,3] * engine.cylinder6.Rod.body.z_a[3] + (engine.cylinder6.Rod.body.w_a[3] * (engine.cylinder6.Rod.body.I[1,1] * engine.cylinder6.Rod.body.w_a[1] + (engine.cylinder6.Rod.body.I[1,2] * engine.cylinder6.Rod.body.w_a[2] + engine.cylinder6.Rod.body.I[1,3] * engine.cylinder6.Rod.body.w_a[3])) + ((-engine.cylinder6.Rod.body.w_a[1] * (engine.cylinder6.Rod.body.I[3,1] * engine.cylinder6.Rod.body.w_a[1] + (engine.cylinder6.Rod.body.I[3,2] * engine.cylinder6.Rod.body.w_a[2] + engine.cylinder6.Rod.body.I[3,3] * engine.cylinder6.Rod.body.w_a[3]))) + (engine.cylinder6.Rod.body.r_CM[3] * engine.cylinder6.Rod.body.frame_a.f[1] + (-engine.cylinder6.Rod.body.r_CM[1] * engine.cylinder6.Rod.body.frame_a.f[3]))))));
//   engine.cylinder6.Rod.body.frame_a.t[3] = engine.cylinder6.Rod.body.I[3,1] * engine.cylinder6.Rod.body.z_a[1] + (engine.cylinder6.Rod.body.I[3,2] * engine.cylinder6.Rod.body.z_a[2] + (engine.cylinder6.Rod.body.I[3,3] * engine.cylinder6.Rod.body.z_a[3] + (engine.cylinder6.Rod.body.w_a[1] * (engine.cylinder6.Rod.body.I[2,1] * engine.cylinder6.Rod.body.w_a[1] + (engine.cylinder6.Rod.body.I[2,2] * engine.cylinder6.Rod.body.w_a[2] + engine.cylinder6.Rod.body.I[2,3] * engine.cylinder6.Rod.body.w_a[3])) + ((-engine.cylinder6.Rod.body.w_a[2] * (engine.cylinder6.Rod.body.I[1,1] * engine.cylinder6.Rod.body.w_a[1] + (engine.cylinder6.Rod.body.I[1,2] * engine.cylinder6.Rod.body.w_a[2] + engine.cylinder6.Rod.body.I[1,3] * engine.cylinder6.Rod.body.w_a[3]))) + (engine.cylinder6.Rod.body.r_CM[1] * engine.cylinder6.Rod.body.frame_a.f[2] + (-engine.cylinder6.Rod.body.r_CM[2] * engine.cylinder6.Rod.body.frame_a.f[1]))))));
//   engine.cylinder6.Rod.shape1.R.T[1,1] = engine.cylinder6.Rod.frame_a.R.T[1,1];
//   engine.cylinder6.Rod.shape1.R.T[1,2] = engine.cylinder6.Rod.frame_a.R.T[1,2];
//   engine.cylinder6.Rod.shape1.R.T[1,3] = engine.cylinder6.Rod.frame_a.R.T[1,3];
//   engine.cylinder6.Rod.shape1.R.T[2,1] = engine.cylinder6.Rod.frame_a.R.T[2,1];
//   engine.cylinder6.Rod.shape1.R.T[2,2] = engine.cylinder6.Rod.frame_a.R.T[2,2];
//   engine.cylinder6.Rod.shape1.R.T[2,3] = engine.cylinder6.Rod.frame_a.R.T[2,3];
//   engine.cylinder6.Rod.shape1.R.T[3,1] = engine.cylinder6.Rod.frame_a.R.T[3,1];
//   engine.cylinder6.Rod.shape1.R.T[3,2] = engine.cylinder6.Rod.frame_a.R.T[3,2];
//   engine.cylinder6.Rod.shape1.R.T[3,3] = engine.cylinder6.Rod.frame_a.R.T[3,3];
//   engine.cylinder6.Rod.shape1.R.w[1] = engine.cylinder6.Rod.frame_a.R.w[1];
//   engine.cylinder6.Rod.shape1.R.w[2] = engine.cylinder6.Rod.frame_a.R.w[2];
//   engine.cylinder6.Rod.shape1.R.w[3] = engine.cylinder6.Rod.frame_a.R.w[3];
//   engine.cylinder6.Rod.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder6.Rod.shape1.shapeType);
//   engine.cylinder6.Rod.shape1.rxvisobj[1] = engine.cylinder6.Rod.shape1.R.T[1,1] * engine.cylinder6.Rod.shape1.e_x[1] + (engine.cylinder6.Rod.shape1.R.T[2,1] * engine.cylinder6.Rod.shape1.e_x[2] + engine.cylinder6.Rod.shape1.R.T[3,1] * engine.cylinder6.Rod.shape1.e_x[3]);
//   engine.cylinder6.Rod.shape1.rxvisobj[2] = engine.cylinder6.Rod.shape1.R.T[1,2] * engine.cylinder6.Rod.shape1.e_x[1] + (engine.cylinder6.Rod.shape1.R.T[2,2] * engine.cylinder6.Rod.shape1.e_x[2] + engine.cylinder6.Rod.shape1.R.T[3,2] * engine.cylinder6.Rod.shape1.e_x[3]);
//   engine.cylinder6.Rod.shape1.rxvisobj[3] = engine.cylinder6.Rod.shape1.R.T[1,3] * engine.cylinder6.Rod.shape1.e_x[1] + (engine.cylinder6.Rod.shape1.R.T[2,3] * engine.cylinder6.Rod.shape1.e_x[2] + engine.cylinder6.Rod.shape1.R.T[3,3] * engine.cylinder6.Rod.shape1.e_x[3]);
//   engine.cylinder6.Rod.shape1.ryvisobj[1] = engine.cylinder6.Rod.shape1.R.T[1,1] * engine.cylinder6.Rod.shape1.e_y[1] + (engine.cylinder6.Rod.shape1.R.T[2,1] * engine.cylinder6.Rod.shape1.e_y[2] + engine.cylinder6.Rod.shape1.R.T[3,1] * engine.cylinder6.Rod.shape1.e_y[3]);
//   engine.cylinder6.Rod.shape1.ryvisobj[2] = engine.cylinder6.Rod.shape1.R.T[1,2] * engine.cylinder6.Rod.shape1.e_y[1] + (engine.cylinder6.Rod.shape1.R.T[2,2] * engine.cylinder6.Rod.shape1.e_y[2] + engine.cylinder6.Rod.shape1.R.T[3,2] * engine.cylinder6.Rod.shape1.e_y[3]);
//   engine.cylinder6.Rod.shape1.ryvisobj[3] = engine.cylinder6.Rod.shape1.R.T[1,3] * engine.cylinder6.Rod.shape1.e_y[1] + (engine.cylinder6.Rod.shape1.R.T[2,3] * engine.cylinder6.Rod.shape1.e_y[2] + engine.cylinder6.Rod.shape1.R.T[3,3] * engine.cylinder6.Rod.shape1.e_y[3]);
//   engine.cylinder6.Rod.shape1.rvisobj = engine.cylinder6.Rod.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder6.Rod.shape1.R.T[1,1],engine.cylinder6.Rod.shape1.R.T[1,2],engine.cylinder6.Rod.shape1.R.T[1,3]},{engine.cylinder6.Rod.shape1.R.T[2,1],engine.cylinder6.Rod.shape1.R.T[2,2],engine.cylinder6.Rod.shape1.R.T[2,3]},{engine.cylinder6.Rod.shape1.R.T[3,1],engine.cylinder6.Rod.shape1.R.T[3,2],engine.cylinder6.Rod.shape1.R.T[3,3]}},{engine.cylinder6.Rod.shape1.r_shape[1],engine.cylinder6.Rod.shape1.r_shape[2],engine.cylinder6.Rod.shape1.r_shape[3]});
//   engine.cylinder6.Rod.shape1.size[1] = engine.cylinder6.Rod.shape1.length;
//   engine.cylinder6.Rod.shape1.size[2] = engine.cylinder6.Rod.shape1.width;
//   engine.cylinder6.Rod.shape1.size[3] = engine.cylinder6.Rod.shape1.height;
//   engine.cylinder6.Rod.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder6.Rod.shape1.color[1] / 255.0,engine.cylinder6.Rod.shape1.color[2] / 255.0,engine.cylinder6.Rod.shape1.color[3] / 255.0,engine.cylinder6.Rod.shape1.specularCoefficient);
//   engine.cylinder6.Rod.shape1.Extra = engine.cylinder6.Rod.shape1.extra;
//   engine.cylinder6.Rod.r_0[1] = engine.cylinder6.Rod.frame_a.r_0[1];
//   engine.cylinder6.Rod.r_0[2] = engine.cylinder6.Rod.frame_a.r_0[2];
//   engine.cylinder6.Rod.r_0[3] = engine.cylinder6.Rod.frame_a.r_0[3];
//   engine.cylinder6.Rod.v_0[1] = der(engine.cylinder6.Rod.r_0[1]);
//   engine.cylinder6.Rod.v_0[2] = der(engine.cylinder6.Rod.r_0[2]);
//   engine.cylinder6.Rod.v_0[3] = der(engine.cylinder6.Rod.r_0[3]);
//   engine.cylinder6.Rod.a_0[1] = der(engine.cylinder6.Rod.v_0[1]);
//   engine.cylinder6.Rod.a_0[2] = der(engine.cylinder6.Rod.v_0[2]);
//   engine.cylinder6.Rod.a_0[3] = der(engine.cylinder6.Rod.v_0[3]);
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0 = engine.cylinder6.Piston.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Piston.frameTranslation.frame_a.R,{engine.cylinder6.Piston.frameTranslation.r[1],engine.cylinder6.Piston.frameTranslation.r[2],engine.cylinder6.Piston.frameTranslation.r[3]});
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.cylinder6.Piston.frameTranslation.frame_a.f[1] + engine.cylinder6.Piston.frameTranslation.frame_b.f[1];
//   0.0 = engine.cylinder6.Piston.frameTranslation.frame_a.f[2] + engine.cylinder6.Piston.frameTranslation.frame_b.f[2];
//   0.0 = engine.cylinder6.Piston.frameTranslation.frame_a.f[3] + engine.cylinder6.Piston.frameTranslation.frame_b.f[3];
//   0.0 = engine.cylinder6.Piston.frameTranslation.frame_a.t[1] + (engine.cylinder6.Piston.frameTranslation.frame_b.t[1] + (engine.cylinder6.Piston.frameTranslation.r[2] * engine.cylinder6.Piston.frameTranslation.frame_b.f[3] + (-engine.cylinder6.Piston.frameTranslation.r[3] * engine.cylinder6.Piston.frameTranslation.frame_b.f[2])));
//   0.0 = engine.cylinder6.Piston.frameTranslation.frame_a.t[2] + (engine.cylinder6.Piston.frameTranslation.frame_b.t[2] + (engine.cylinder6.Piston.frameTranslation.r[3] * engine.cylinder6.Piston.frameTranslation.frame_b.f[1] + (-engine.cylinder6.Piston.frameTranslation.r[1] * engine.cylinder6.Piston.frameTranslation.frame_b.f[3])));
//   0.0 = engine.cylinder6.Piston.frameTranslation.frame_a.t[3] + (engine.cylinder6.Piston.frameTranslation.frame_b.t[3] + (engine.cylinder6.Piston.frameTranslation.r[1] * engine.cylinder6.Piston.frameTranslation.frame_b.f[2] + (-engine.cylinder6.Piston.frameTranslation.r[2] * engine.cylinder6.Piston.frameTranslation.frame_b.f[1])));
//   engine.cylinder6.Piston.body.r_0[1] = engine.cylinder6.Piston.body.frame_a.r_0[1];
//   engine.cylinder6.Piston.body.r_0[2] = engine.cylinder6.Piston.body.frame_a.r_0[2];
//   engine.cylinder6.Piston.body.r_0[3] = engine.cylinder6.Piston.body.frame_a.r_0[3];
//   if true then
//   engine.cylinder6.Piston.body.Q[1] = 0.0;
//   engine.cylinder6.Piston.body.Q[2] = 0.0;
//   engine.cylinder6.Piston.body.Q[3] = 0.0;
//   engine.cylinder6.Piston.body.Q[4] = 1.0;
//   engine.cylinder6.Piston.body.phi[1] = 0.0;
//   engine.cylinder6.Piston.body.phi[2] = 0.0;
//   engine.cylinder6.Piston.body.phi[3] = 0.0;
//   engine.cylinder6.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder6.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder6.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder6.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder6.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder6.Piston.body.phi_dd[3] = 0.0;
//   elseif engine.cylinder6.Piston.body.useQuaternions then
//   engine.cylinder6.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.cylinder6.Piston.body.Q[1],engine.cylinder6.Piston.body.Q[2],engine.cylinder6.Piston.body.Q[3],engine.cylinder6.Piston.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.cylinder6.Piston.body.Q[1],engine.cylinder6.Piston.body.Q[2],engine.cylinder6.Piston.body.Q[3],engine.cylinder6.Piston.body.Q[4]},{der(engine.cylinder6.Piston.body.Q[1]),der(engine.cylinder6.Piston.body.Q[2]),der(engine.cylinder6.Piston.body.Q[3]),der(engine.cylinder6.Piston.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.cylinder6.Piston.body.Q[1],engine.cylinder6.Piston.body.Q[2],engine.cylinder6.Piston.body.Q[3],engine.cylinder6.Piston.body.Q[4]});
//   engine.cylinder6.Piston.body.phi[1] = 0.0;
//   engine.cylinder6.Piston.body.phi[2] = 0.0;
//   engine.cylinder6.Piston.body.phi[3] = 0.0;
//   engine.cylinder6.Piston.body.phi_d[1] = 0.0;
//   engine.cylinder6.Piston.body.phi_d[2] = 0.0;
//   engine.cylinder6.Piston.body.phi_d[3] = 0.0;
//   engine.cylinder6.Piston.body.phi_dd[1] = 0.0;
//   engine.cylinder6.Piston.body.phi_dd[2] = 0.0;
//   engine.cylinder6.Piston.body.phi_dd[3] = 0.0;
//   else
//   engine.cylinder6.Piston.body.phi_d[1] = der(engine.cylinder6.Piston.body.phi[1]);
//   engine.cylinder6.Piston.body.phi_d[2] = der(engine.cylinder6.Piston.body.phi[2]);
//   engine.cylinder6.Piston.body.phi_d[3] = der(engine.cylinder6.Piston.body.phi[3]);
//   engine.cylinder6.Piston.body.phi_dd[1] = der(engine.cylinder6.Piston.body.phi_d[1]);
//   engine.cylinder6.Piston.body.phi_dd[2] = der(engine.cylinder6.Piston.body.phi_d[2]);
//   engine.cylinder6.Piston.body.phi_dd[3] = der(engine.cylinder6.Piston.body.phi_d[3]);
//   engine.cylinder6.Piston.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.cylinder6.Piston.body.sequence_angleStates[1],engine.cylinder6.Piston.body.sequence_angleStates[2],engine.cylinder6.Piston.body.sequence_angleStates[3]},{engine.cylinder6.Piston.body.phi[1],engine.cylinder6.Piston.body.phi[2],engine.cylinder6.Piston.body.phi[3]},{engine.cylinder6.Piston.body.phi_d[1],engine.cylinder6.Piston.body.phi_d[2],engine.cylinder6.Piston.body.phi_d[3]});
//   engine.cylinder6.Piston.body.Q[1] = 0.0;
//   engine.cylinder6.Piston.body.Q[2] = 0.0;
//   engine.cylinder6.Piston.body.Q[3] = 0.0;
//   engine.cylinder6.Piston.body.Q[4] = 1.0;
//   end if;
//   engine.cylinder6.Piston.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.cylinder6.Piston.body.frame_a.r_0[1],engine.cylinder6.Piston.body.frame_a.r_0[2],engine.cylinder6.Piston.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Piston.body.frame_a.R,{engine.cylinder6.Piston.body.r_CM[1],engine.cylinder6.Piston.body.r_CM[2],engine.cylinder6.Piston.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.cylinder6.Piston.body.v_0[1] = der(engine.cylinder6.Piston.body.frame_a.r_0[1]);
//   engine.cylinder6.Piston.body.v_0[2] = der(engine.cylinder6.Piston.body.frame_a.r_0[2]);
//   engine.cylinder6.Piston.body.v_0[3] = der(engine.cylinder6.Piston.body.frame_a.r_0[3]);
//   engine.cylinder6.Piston.body.a_0[1] = der(engine.cylinder6.Piston.body.v_0[1]);
//   engine.cylinder6.Piston.body.a_0[2] = der(engine.cylinder6.Piston.body.v_0[2]);
//   engine.cylinder6.Piston.body.a_0[3] = der(engine.cylinder6.Piston.body.v_0[3]);
//   engine.cylinder6.Piston.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.cylinder6.Piston.body.frame_a.R);
//   engine.cylinder6.Piston.body.z_a[1] = der(engine.cylinder6.Piston.body.w_a[1]);
//   engine.cylinder6.Piston.body.z_a[2] = der(engine.cylinder6.Piston.body.w_a[2]);
//   engine.cylinder6.Piston.body.z_a[3] = der(engine.cylinder6.Piston.body.w_a[3]);
//   engine.cylinder6.Piston.body.frame_a.f = engine.cylinder6.Piston.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.cylinder6.Piston.body.frame_a.R,{engine.cylinder6.Piston.body.a_0[1] - engine.cylinder6.Piston.body.g_0[1],engine.cylinder6.Piston.body.a_0[2] - engine.cylinder6.Piston.body.g_0[2],engine.cylinder6.Piston.body.a_0[3] - engine.cylinder6.Piston.body.g_0[3]}) + {engine.cylinder6.Piston.body.z_a[2] * engine.cylinder6.Piston.body.r_CM[3] - engine.cylinder6.Piston.body.z_a[3] * engine.cylinder6.Piston.body.r_CM[2],engine.cylinder6.Piston.body.z_a[3] * engine.cylinder6.Piston.body.r_CM[1] - engine.cylinder6.Piston.body.z_a[1] * engine.cylinder6.Piston.body.r_CM[3],engine.cylinder6.Piston.body.z_a[1] * engine.cylinder6.Piston.body.r_CM[2] - engine.cylinder6.Piston.body.z_a[2] * engine.cylinder6.Piston.body.r_CM[1]} + {engine.cylinder6.Piston.body.w_a[2] * (engine.cylinder6.Piston.body.w_a[1] * engine.cylinder6.Piston.body.r_CM[2] - engine.cylinder6.Piston.body.w_a[2] * engine.cylinder6.Piston.body.r_CM[1]) - engine.cylinder6.Piston.body.w_a[3] * (engine.cylinder6.Piston.body.w_a[3] * engine.cylinder6.Piston.body.r_CM[1] - engine.cylinder6.Piston.body.w_a[1] * engine.cylinder6.Piston.body.r_CM[3]),engine.cylinder6.Piston.body.w_a[3] * (engine.cylinder6.Piston.body.w_a[2] * engine.cylinder6.Piston.body.r_CM[3] - engine.cylinder6.Piston.body.w_a[3] * engine.cylinder6.Piston.body.r_CM[2]) - engine.cylinder6.Piston.body.w_a[1] * (engine.cylinder6.Piston.body.w_a[1] * engine.cylinder6.Piston.body.r_CM[2] - engine.cylinder6.Piston.body.w_a[2] * engine.cylinder6.Piston.body.r_CM[1]),engine.cylinder6.Piston.body.w_a[1] * (engine.cylinder6.Piston.body.w_a[3] * engine.cylinder6.Piston.body.r_CM[1] - engine.cylinder6.Piston.body.w_a[1] * engine.cylinder6.Piston.body.r_CM[3]) - engine.cylinder6.Piston.body.w_a[2] * (engine.cylinder6.Piston.body.w_a[2] * engine.cylinder6.Piston.body.r_CM[3] - engine.cylinder6.Piston.body.w_a[3] * engine.cylinder6.Piston.body.r_CM[2])});
//   engine.cylinder6.Piston.body.frame_a.t[1] = engine.cylinder6.Piston.body.I[1,1] * engine.cylinder6.Piston.body.z_a[1] + (engine.cylinder6.Piston.body.I[1,2] * engine.cylinder6.Piston.body.z_a[2] + (engine.cylinder6.Piston.body.I[1,3] * engine.cylinder6.Piston.body.z_a[3] + (engine.cylinder6.Piston.body.w_a[2] * (engine.cylinder6.Piston.body.I[3,1] * engine.cylinder6.Piston.body.w_a[1] + (engine.cylinder6.Piston.body.I[3,2] * engine.cylinder6.Piston.body.w_a[2] + engine.cylinder6.Piston.body.I[3,3] * engine.cylinder6.Piston.body.w_a[3])) + ((-engine.cylinder6.Piston.body.w_a[3] * (engine.cylinder6.Piston.body.I[2,1] * engine.cylinder6.Piston.body.w_a[1] + (engine.cylinder6.Piston.body.I[2,2] * engine.cylinder6.Piston.body.w_a[2] + engine.cylinder6.Piston.body.I[2,3] * engine.cylinder6.Piston.body.w_a[3]))) + (engine.cylinder6.Piston.body.r_CM[2] * engine.cylinder6.Piston.body.frame_a.f[3] + (-engine.cylinder6.Piston.body.r_CM[3] * engine.cylinder6.Piston.body.frame_a.f[2]))))));
//   engine.cylinder6.Piston.body.frame_a.t[2] = engine.cylinder6.Piston.body.I[2,1] * engine.cylinder6.Piston.body.z_a[1] + (engine.cylinder6.Piston.body.I[2,2] * engine.cylinder6.Piston.body.z_a[2] + (engine.cylinder6.Piston.body.I[2,3] * engine.cylinder6.Piston.body.z_a[3] + (engine.cylinder6.Piston.body.w_a[3] * (engine.cylinder6.Piston.body.I[1,1] * engine.cylinder6.Piston.body.w_a[1] + (engine.cylinder6.Piston.body.I[1,2] * engine.cylinder6.Piston.body.w_a[2] + engine.cylinder6.Piston.body.I[1,3] * engine.cylinder6.Piston.body.w_a[3])) + ((-engine.cylinder6.Piston.body.w_a[1] * (engine.cylinder6.Piston.body.I[3,1] * engine.cylinder6.Piston.body.w_a[1] + (engine.cylinder6.Piston.body.I[3,2] * engine.cylinder6.Piston.body.w_a[2] + engine.cylinder6.Piston.body.I[3,3] * engine.cylinder6.Piston.body.w_a[3]))) + (engine.cylinder6.Piston.body.r_CM[3] * engine.cylinder6.Piston.body.frame_a.f[1] + (-engine.cylinder6.Piston.body.r_CM[1] * engine.cylinder6.Piston.body.frame_a.f[3]))))));
//   engine.cylinder6.Piston.body.frame_a.t[3] = engine.cylinder6.Piston.body.I[3,1] * engine.cylinder6.Piston.body.z_a[1] + (engine.cylinder6.Piston.body.I[3,2] * engine.cylinder6.Piston.body.z_a[2] + (engine.cylinder6.Piston.body.I[3,3] * engine.cylinder6.Piston.body.z_a[3] + (engine.cylinder6.Piston.body.w_a[1] * (engine.cylinder6.Piston.body.I[2,1] * engine.cylinder6.Piston.body.w_a[1] + (engine.cylinder6.Piston.body.I[2,2] * engine.cylinder6.Piston.body.w_a[2] + engine.cylinder6.Piston.body.I[2,3] * engine.cylinder6.Piston.body.w_a[3])) + ((-engine.cylinder6.Piston.body.w_a[2] * (engine.cylinder6.Piston.body.I[1,1] * engine.cylinder6.Piston.body.w_a[1] + (engine.cylinder6.Piston.body.I[1,2] * engine.cylinder6.Piston.body.w_a[2] + engine.cylinder6.Piston.body.I[1,3] * engine.cylinder6.Piston.body.w_a[3]))) + (engine.cylinder6.Piston.body.r_CM[1] * engine.cylinder6.Piston.body.frame_a.f[2] + (-engine.cylinder6.Piston.body.r_CM[2] * engine.cylinder6.Piston.body.frame_a.f[1]))))));
//   engine.cylinder6.Piston.shape1.R.T[1,1] = engine.cylinder6.Piston.frame_a.R.T[1,1];
//   engine.cylinder6.Piston.shape1.R.T[1,2] = engine.cylinder6.Piston.frame_a.R.T[1,2];
//   engine.cylinder6.Piston.shape1.R.T[1,3] = engine.cylinder6.Piston.frame_a.R.T[1,3];
//   engine.cylinder6.Piston.shape1.R.T[2,1] = engine.cylinder6.Piston.frame_a.R.T[2,1];
//   engine.cylinder6.Piston.shape1.R.T[2,2] = engine.cylinder6.Piston.frame_a.R.T[2,2];
//   engine.cylinder6.Piston.shape1.R.T[2,3] = engine.cylinder6.Piston.frame_a.R.T[2,3];
//   engine.cylinder6.Piston.shape1.R.T[3,1] = engine.cylinder6.Piston.frame_a.R.T[3,1];
//   engine.cylinder6.Piston.shape1.R.T[3,2] = engine.cylinder6.Piston.frame_a.R.T[3,2];
//   engine.cylinder6.Piston.shape1.R.T[3,3] = engine.cylinder6.Piston.frame_a.R.T[3,3];
//   engine.cylinder6.Piston.shape1.R.w[1] = engine.cylinder6.Piston.frame_a.R.w[1];
//   engine.cylinder6.Piston.shape1.R.w[2] = engine.cylinder6.Piston.frame_a.R.w[2];
//   engine.cylinder6.Piston.shape1.R.w[3] = engine.cylinder6.Piston.frame_a.R.w[3];
//   engine.cylinder6.Piston.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder6.Piston.shape1.shapeType);
//   engine.cylinder6.Piston.shape1.rxvisobj[1] = engine.cylinder6.Piston.shape1.R.T[1,1] * engine.cylinder6.Piston.shape1.e_x[1] + (engine.cylinder6.Piston.shape1.R.T[2,1] * engine.cylinder6.Piston.shape1.e_x[2] + engine.cylinder6.Piston.shape1.R.T[3,1] * engine.cylinder6.Piston.shape1.e_x[3]);
//   engine.cylinder6.Piston.shape1.rxvisobj[2] = engine.cylinder6.Piston.shape1.R.T[1,2] * engine.cylinder6.Piston.shape1.e_x[1] + (engine.cylinder6.Piston.shape1.R.T[2,2] * engine.cylinder6.Piston.shape1.e_x[2] + engine.cylinder6.Piston.shape1.R.T[3,2] * engine.cylinder6.Piston.shape1.e_x[3]);
//   engine.cylinder6.Piston.shape1.rxvisobj[3] = engine.cylinder6.Piston.shape1.R.T[1,3] * engine.cylinder6.Piston.shape1.e_x[1] + (engine.cylinder6.Piston.shape1.R.T[2,3] * engine.cylinder6.Piston.shape1.e_x[2] + engine.cylinder6.Piston.shape1.R.T[3,3] * engine.cylinder6.Piston.shape1.e_x[3]);
//   engine.cylinder6.Piston.shape1.ryvisobj[1] = engine.cylinder6.Piston.shape1.R.T[1,1] * engine.cylinder6.Piston.shape1.e_y[1] + (engine.cylinder6.Piston.shape1.R.T[2,1] * engine.cylinder6.Piston.shape1.e_y[2] + engine.cylinder6.Piston.shape1.R.T[3,1] * engine.cylinder6.Piston.shape1.e_y[3]);
//   engine.cylinder6.Piston.shape1.ryvisobj[2] = engine.cylinder6.Piston.shape1.R.T[1,2] * engine.cylinder6.Piston.shape1.e_y[1] + (engine.cylinder6.Piston.shape1.R.T[2,2] * engine.cylinder6.Piston.shape1.e_y[2] + engine.cylinder6.Piston.shape1.R.T[3,2] * engine.cylinder6.Piston.shape1.e_y[3]);
//   engine.cylinder6.Piston.shape1.ryvisobj[3] = engine.cylinder6.Piston.shape1.R.T[1,3] * engine.cylinder6.Piston.shape1.e_y[1] + (engine.cylinder6.Piston.shape1.R.T[2,3] * engine.cylinder6.Piston.shape1.e_y[2] + engine.cylinder6.Piston.shape1.R.T[3,3] * engine.cylinder6.Piston.shape1.e_y[3]);
//   engine.cylinder6.Piston.shape1.rvisobj = engine.cylinder6.Piston.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder6.Piston.shape1.R.T[1,1],engine.cylinder6.Piston.shape1.R.T[1,2],engine.cylinder6.Piston.shape1.R.T[1,3]},{engine.cylinder6.Piston.shape1.R.T[2,1],engine.cylinder6.Piston.shape1.R.T[2,2],engine.cylinder6.Piston.shape1.R.T[2,3]},{engine.cylinder6.Piston.shape1.R.T[3,1],engine.cylinder6.Piston.shape1.R.T[3,2],engine.cylinder6.Piston.shape1.R.T[3,3]}},{engine.cylinder6.Piston.shape1.r_shape[1],engine.cylinder6.Piston.shape1.r_shape[2],engine.cylinder6.Piston.shape1.r_shape[3]});
//   engine.cylinder6.Piston.shape1.size[1] = engine.cylinder6.Piston.shape1.length;
//   engine.cylinder6.Piston.shape1.size[2] = engine.cylinder6.Piston.shape1.width;
//   engine.cylinder6.Piston.shape1.size[3] = engine.cylinder6.Piston.shape1.height;
//   engine.cylinder6.Piston.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder6.Piston.shape1.color[1] / 255.0,engine.cylinder6.Piston.shape1.color[2] / 255.0,engine.cylinder6.Piston.shape1.color[3] / 255.0,engine.cylinder6.Piston.shape1.specularCoefficient);
//   engine.cylinder6.Piston.shape1.Extra = engine.cylinder6.Piston.shape1.extra;
//   engine.cylinder6.Piston.r_0[1] = engine.cylinder6.Piston.frame_a.r_0[1];
//   engine.cylinder6.Piston.r_0[2] = engine.cylinder6.Piston.frame_a.r_0[2];
//   engine.cylinder6.Piston.r_0[3] = engine.cylinder6.Piston.frame_a.r_0[3];
//   engine.cylinder6.Piston.v_0[1] = der(engine.cylinder6.Piston.r_0[1]);
//   engine.cylinder6.Piston.v_0[2] = der(engine.cylinder6.Piston.r_0[2]);
//   engine.cylinder6.Piston.v_0[3] = der(engine.cylinder6.Piston.r_0[3]);
//   engine.cylinder6.Piston.a_0[1] = der(engine.cylinder6.Piston.v_0[1]);
//   engine.cylinder6.Piston.a_0[2] = der(engine.cylinder6.Piston.v_0[2]);
//   engine.cylinder6.Piston.a_0[3] = der(engine.cylinder6.Piston.v_0[3]);
//   engine.cylinder6.gasForce.y = (-engine.cylinder6.gasForce.s_rel) / engine.cylinder6.gasForce.L;
//   engine.cylinder6.gasForce.x = 1.0 + engine.cylinder6.gasForce.s_rel / engine.cylinder6.gasForce.L;
//   engine.cylinder6.gasForce.v_rel = der(engine.cylinder6.gasForce.s_rel);
//   engine.cylinder6.gasForce.press = engine.cylinder6.gasForce.p / 100000.0;
//   engine.cylinder6.gasForce.p = 100000.0 * (if engine.cylinder6.gasForce.v_rel < 0.0 then if engine.cylinder6.gasForce.x < 0.987 then 2.4 + (177.4132 * engine.cylinder6.gasForce.x ^ 4.0 + (-287.2189 * engine.cylinder6.gasForce.x ^ 3.0 + (151.8252 * engine.cylinder6.gasForce.x ^ 2.0 + -24.9973 * engine.cylinder6.gasForce.x))) else 2129670.0 + (2836360.0 * engine.cylinder6.gasForce.x ^ 4.0 + (-10569296.0 * engine.cylinder6.gasForce.x ^ 3.0 + (14761814.0 * engine.cylinder6.gasForce.x ^ 2.0 + -9158505.0 * engine.cylinder6.gasForce.x))) else if engine.cylinder6.gasForce.x > 0.93 then -3929704.0 * engine.cylinder6.gasForce.x ^ 4.0 + (14748765.0 * engine.cylinder6.gasForce.x ^ 3.0 + (-20747000.0 * engine.cylinder6.gasForce.x ^ 2.0 + 12964477.0 * engine.cylinder6.gasForce.x)) - 3036495.0 else 2.4 + (145.93 * engine.cylinder6.gasForce.x ^ 4.0 + (-131.707 * engine.cylinder6.gasForce.x ^ 3.0 + (17.3438 * engine.cylinder6.gasForce.x ^ 2.0 + 17.9272 * engine.cylinder6.gasForce.x))));
//   engine.cylinder6.gasForce.f = -78539.8163397448 * (engine.cylinder6.gasForce.press * engine.cylinder6.gasForce.d ^ 2.0);
//   engine.cylinder6.gasForce.V = engine.cylinder6.gasForce.k0 + engine.cylinder6.gasForce.k1 * (1.0 - engine.cylinder6.gasForce.x);
//   engine.cylinder6.gasForce.dens = 1.0 / engine.cylinder6.gasForce.V;
//   engine.cylinder6.gasForce.p * engine.cylinder6.gasForce.V / 100000.0 = engine.cylinder6.gasForce.k * engine.cylinder6.gasForce.T;
//   engine.cylinder6.gasForce.s_rel = engine.cylinder6.gasForce.flange_b.s - engine.cylinder6.gasForce.flange_a.s;
//   engine.cylinder6.gasForce.flange_b.f = engine.cylinder6.gasForce.f;
//   engine.cylinder6.gasForce.flange_a.f = -engine.cylinder6.gasForce.f;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.cylinder6.Crank.frame_b.r_0 = engine.cylinder6.Crank.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.cylinder6.Crank.frame_a.R,{engine.cylinder6.Crank.r[1],engine.cylinder6.Crank.r[2],engine.cylinder6.Crank.r[3]});
//   engine.cylinder6.Crank.frame_b.R.T[1,1] = engine.cylinder6.Crank.frame_a.R.T[1,1];
//   engine.cylinder6.Crank.frame_b.R.T[1,2] = engine.cylinder6.Crank.frame_a.R.T[1,2];
//   engine.cylinder6.Crank.frame_b.R.T[1,3] = engine.cylinder6.Crank.frame_a.R.T[1,3];
//   engine.cylinder6.Crank.frame_b.R.T[2,1] = engine.cylinder6.Crank.frame_a.R.T[2,1];
//   engine.cylinder6.Crank.frame_b.R.T[2,2] = engine.cylinder6.Crank.frame_a.R.T[2,2];
//   engine.cylinder6.Crank.frame_b.R.T[2,3] = engine.cylinder6.Crank.frame_a.R.T[2,3];
//   engine.cylinder6.Crank.frame_b.R.T[3,1] = engine.cylinder6.Crank.frame_a.R.T[3,1];
//   engine.cylinder6.Crank.frame_b.R.T[3,2] = engine.cylinder6.Crank.frame_a.R.T[3,2];
//   engine.cylinder6.Crank.frame_b.R.T[3,3] = engine.cylinder6.Crank.frame_a.R.T[3,3];
//   engine.cylinder6.Crank.frame_b.R.w[1] = engine.cylinder6.Crank.frame_a.R.w[1];
//   engine.cylinder6.Crank.frame_b.R.w[2] = engine.cylinder6.Crank.frame_a.R.w[2];
//   engine.cylinder6.Crank.frame_b.R.w[3] = engine.cylinder6.Crank.frame_a.R.w[3];
//   0.0 = engine.cylinder6.Crank.frame_a.f[1] + engine.cylinder6.Crank.frame_b.f[1];
//   0.0 = engine.cylinder6.Crank.frame_a.f[2] + engine.cylinder6.Crank.frame_b.f[2];
//   0.0 = engine.cylinder6.Crank.frame_a.f[3] + engine.cylinder6.Crank.frame_b.f[3];
//   0.0 = engine.cylinder6.Crank.frame_a.t[1] + (engine.cylinder6.Crank.frame_b.t[1] + (engine.cylinder6.Crank.r[2] * engine.cylinder6.Crank.frame_b.f[3] + (-engine.cylinder6.Crank.r[3] * engine.cylinder6.Crank.frame_b.f[2])));
//   0.0 = engine.cylinder6.Crank.frame_a.t[2] + (engine.cylinder6.Crank.frame_b.t[2] + (engine.cylinder6.Crank.r[3] * engine.cylinder6.Crank.frame_b.f[1] + (-engine.cylinder6.Crank.r[1] * engine.cylinder6.Crank.frame_b.f[3])));
//   0.0 = engine.cylinder6.Crank.frame_a.t[3] + (engine.cylinder6.Crank.frame_b.t[3] + (engine.cylinder6.Crank.r[1] * engine.cylinder6.Crank.frame_b.f[2] + (-engine.cylinder6.Crank.r[2] * engine.cylinder6.Crank.frame_b.f[1])));
//   engine.cylinder6.CrankShape.vis.R.T[1,1] = engine.cylinder6.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder6.CrankShape.vis.R.T[1,2] = engine.cylinder6.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder6.CrankShape.vis.R.T[1,3] = engine.cylinder6.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder6.CrankShape.vis.R.T[2,1] = engine.cylinder6.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder6.CrankShape.vis.R.T[2,2] = engine.cylinder6.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder6.CrankShape.vis.R.T[2,3] = engine.cylinder6.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder6.CrankShape.vis.R.T[3,1] = engine.cylinder6.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder6.CrankShape.vis.R.T[3,2] = engine.cylinder6.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder6.CrankShape.vis.R.T[3,3] = engine.cylinder6.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder6.CrankShape.vis.R.w[1] = engine.cylinder6.CrankShape.frame_a.R.w[1];
//   engine.cylinder6.CrankShape.vis.R.w[2] = engine.cylinder6.CrankShape.frame_a.R.w[2];
//   engine.cylinder6.CrankShape.vis.R.w[3] = engine.cylinder6.CrankShape.frame_a.R.w[3];
//   engine.cylinder6.CrankShape.vis.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.cylinder6.CrankShape.vis.shapeType);
//   engine.cylinder6.CrankShape.vis.rxvisobj[1] = engine.cylinder6.CrankShape.vis.R.T[1,1] * engine.cylinder6.CrankShape.vis.e_x[1] + (engine.cylinder6.CrankShape.vis.R.T[2,1] * engine.cylinder6.CrankShape.vis.e_x[2] + engine.cylinder6.CrankShape.vis.R.T[3,1] * engine.cylinder6.CrankShape.vis.e_x[3]);
//   engine.cylinder6.CrankShape.vis.rxvisobj[2] = engine.cylinder6.CrankShape.vis.R.T[1,2] * engine.cylinder6.CrankShape.vis.e_x[1] + (engine.cylinder6.CrankShape.vis.R.T[2,2] * engine.cylinder6.CrankShape.vis.e_x[2] + engine.cylinder6.CrankShape.vis.R.T[3,2] * engine.cylinder6.CrankShape.vis.e_x[3]);
//   engine.cylinder6.CrankShape.vis.rxvisobj[3] = engine.cylinder6.CrankShape.vis.R.T[1,3] * engine.cylinder6.CrankShape.vis.e_x[1] + (engine.cylinder6.CrankShape.vis.R.T[2,3] * engine.cylinder6.CrankShape.vis.e_x[2] + engine.cylinder6.CrankShape.vis.R.T[3,3] * engine.cylinder6.CrankShape.vis.e_x[3]);
//   engine.cylinder6.CrankShape.vis.ryvisobj[1] = engine.cylinder6.CrankShape.vis.R.T[1,1] * engine.cylinder6.CrankShape.vis.e_y[1] + (engine.cylinder6.CrankShape.vis.R.T[2,1] * engine.cylinder6.CrankShape.vis.e_y[2] + engine.cylinder6.CrankShape.vis.R.T[3,1] * engine.cylinder6.CrankShape.vis.e_y[3]);
//   engine.cylinder6.CrankShape.vis.ryvisobj[2] = engine.cylinder6.CrankShape.vis.R.T[1,2] * engine.cylinder6.CrankShape.vis.e_y[1] + (engine.cylinder6.CrankShape.vis.R.T[2,2] * engine.cylinder6.CrankShape.vis.e_y[2] + engine.cylinder6.CrankShape.vis.R.T[3,2] * engine.cylinder6.CrankShape.vis.e_y[3]);
//   engine.cylinder6.CrankShape.vis.ryvisobj[3] = engine.cylinder6.CrankShape.vis.R.T[1,3] * engine.cylinder6.CrankShape.vis.e_y[1] + (engine.cylinder6.CrankShape.vis.R.T[2,3] * engine.cylinder6.CrankShape.vis.e_y[2] + engine.cylinder6.CrankShape.vis.R.T[3,3] * engine.cylinder6.CrankShape.vis.e_y[3]);
//   engine.cylinder6.CrankShape.vis.rvisobj = engine.cylinder6.CrankShape.vis.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.cylinder6.CrankShape.vis.R.T[1,1],engine.cylinder6.CrankShape.vis.R.T[1,2],engine.cylinder6.CrankShape.vis.R.T[1,3]},{engine.cylinder6.CrankShape.vis.R.T[2,1],engine.cylinder6.CrankShape.vis.R.T[2,2],engine.cylinder6.CrankShape.vis.R.T[2,3]},{engine.cylinder6.CrankShape.vis.R.T[3,1],engine.cylinder6.CrankShape.vis.R.T[3,2],engine.cylinder6.CrankShape.vis.R.T[3,3]}},{engine.cylinder6.CrankShape.vis.r_shape[1],engine.cylinder6.CrankShape.vis.r_shape[2],engine.cylinder6.CrankShape.vis.r_shape[3]});
//   engine.cylinder6.CrankShape.vis.size[1] = engine.cylinder6.CrankShape.vis.length;
//   engine.cylinder6.CrankShape.vis.size[2] = engine.cylinder6.CrankShape.vis.width;
//   engine.cylinder6.CrankShape.vis.size[3] = engine.cylinder6.CrankShape.vis.height;
//   engine.cylinder6.CrankShape.vis.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.cylinder6.CrankShape.vis.color[1] / 255.0,engine.cylinder6.CrankShape.vis.color[2] / 255.0,engine.cylinder6.CrankShape.vis.color[3] / 255.0,engine.cylinder6.CrankShape.vis.specularCoefficient);
//   engine.cylinder6.CrankShape.vis.Extra = engine.cylinder6.CrankShape.vis.extra;
//   engine.cylinder6.CrankShape.frame_a.f[1] = 0.0;
//   engine.cylinder6.CrankShape.frame_a.f[2] = 0.0;
//   engine.cylinder6.CrankShape.frame_a.f[3] = 0.0;
//   engine.cylinder6.CrankShape.frame_a.t[1] = 0.0;
//   engine.cylinder6.CrankShape.frame_a.t[2] = 0.0;
//   engine.cylinder6.CrankShape.frame_a.t[3] = 0.0;
//   assert(true,"Connector frame_a of visualizer object is not connected");
//   engine.bearing.fixed.flange.phi = engine.bearing.fixed.phi0;
//   engine.bearing.internalAxis.flange.tau = engine.bearing.internalAxis.tau;
//   engine.bearing.internalAxis.flange.phi = engine.bearing.internalAxis.phi;
//   engine.bearing.cylinder.R.T[1,1] = engine.bearing.frame_a.R.T[1,1];
//   engine.bearing.cylinder.R.T[1,2] = engine.bearing.frame_a.R.T[1,2];
//   engine.bearing.cylinder.R.T[1,3] = engine.bearing.frame_a.R.T[1,3];
//   engine.bearing.cylinder.R.T[2,1] = engine.bearing.frame_a.R.T[2,1];
//   engine.bearing.cylinder.R.T[2,2] = engine.bearing.frame_a.R.T[2,2];
//   engine.bearing.cylinder.R.T[2,3] = engine.bearing.frame_a.R.T[2,3];
//   engine.bearing.cylinder.R.T[3,1] = engine.bearing.frame_a.R.T[3,1];
//   engine.bearing.cylinder.R.T[3,2] = engine.bearing.frame_a.R.T[3,2];
//   engine.bearing.cylinder.R.T[3,3] = engine.bearing.frame_a.R.T[3,3];
//   engine.bearing.cylinder.R.w[1] = engine.bearing.frame_a.R.w[1];
//   engine.bearing.cylinder.R.w[2] = engine.bearing.frame_a.R.w[2];
//   engine.bearing.cylinder.R.w[3] = engine.bearing.frame_a.R.w[3];
//   engine.bearing.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(engine.bearing.cylinder.shapeType);
//   engine.bearing.cylinder.rxvisobj[1] = engine.bearing.cylinder.R.T[1,1] * engine.bearing.cylinder.e_x[1] + (engine.bearing.cylinder.R.T[2,1] * engine.bearing.cylinder.e_x[2] + engine.bearing.cylinder.R.T[3,1] * engine.bearing.cylinder.e_x[3]);
//   engine.bearing.cylinder.rxvisobj[2] = engine.bearing.cylinder.R.T[1,2] * engine.bearing.cylinder.e_x[1] + (engine.bearing.cylinder.R.T[2,2] * engine.bearing.cylinder.e_x[2] + engine.bearing.cylinder.R.T[3,2] * engine.bearing.cylinder.e_x[3]);
//   engine.bearing.cylinder.rxvisobj[3] = engine.bearing.cylinder.R.T[1,3] * engine.bearing.cylinder.e_x[1] + (engine.bearing.cylinder.R.T[2,3] * engine.bearing.cylinder.e_x[2] + engine.bearing.cylinder.R.T[3,3] * engine.bearing.cylinder.e_x[3]);
//   engine.bearing.cylinder.ryvisobj[1] = engine.bearing.cylinder.R.T[1,1] * engine.bearing.cylinder.e_y[1] + (engine.bearing.cylinder.R.T[2,1] * engine.bearing.cylinder.e_y[2] + engine.bearing.cylinder.R.T[3,1] * engine.bearing.cylinder.e_y[3]);
//   engine.bearing.cylinder.ryvisobj[2] = engine.bearing.cylinder.R.T[1,2] * engine.bearing.cylinder.e_y[1] + (engine.bearing.cylinder.R.T[2,2] * engine.bearing.cylinder.e_y[2] + engine.bearing.cylinder.R.T[3,2] * engine.bearing.cylinder.e_y[3]);
//   engine.bearing.cylinder.ryvisobj[3] = engine.bearing.cylinder.R.T[1,3] * engine.bearing.cylinder.e_y[1] + (engine.bearing.cylinder.R.T[2,3] * engine.bearing.cylinder.e_y[2] + engine.bearing.cylinder.R.T[3,3] * engine.bearing.cylinder.e_y[3]);
//   engine.bearing.cylinder.rvisobj = engine.bearing.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{engine.bearing.cylinder.R.T[1,1],engine.bearing.cylinder.R.T[1,2],engine.bearing.cylinder.R.T[1,3]},{engine.bearing.cylinder.R.T[2,1],engine.bearing.cylinder.R.T[2,2],engine.bearing.cylinder.R.T[2,3]},{engine.bearing.cylinder.R.T[3,1],engine.bearing.cylinder.R.T[3,2],engine.bearing.cylinder.R.T[3,3]}},{engine.bearing.cylinder.r_shape[1],engine.bearing.cylinder.r_shape[2],engine.bearing.cylinder.r_shape[3]});
//   engine.bearing.cylinder.size[1] = engine.bearing.cylinder.length;
//   engine.bearing.cylinder.size[2] = engine.bearing.cylinder.width;
//   engine.bearing.cylinder.size[3] = engine.bearing.cylinder.height;
//   engine.bearing.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(engine.bearing.cylinder.color[1] / 255.0,engine.bearing.cylinder.color[2] / 255.0,engine.bearing.cylinder.color[3] / 255.0,engine.bearing.cylinder.specularCoefficient);
//   engine.bearing.cylinder.Extra = engine.bearing.cylinder.extra;
//   assert(true,"Connector frame_a of revolute joint is not connected");
//   assert(true,"Connector frame_b of revolute joint is not connected");
//   engine.bearing.angle = engine.bearing.phi;
//   engine.bearing.w = der(engine.bearing.phi);
//   engine.bearing.a = der(engine.bearing.w);
//   engine.bearing.frame_b.r_0[1] = engine.bearing.frame_a.r_0[1];
//   engine.bearing.frame_b.r_0[2] = engine.bearing.frame_a.r_0[2];
//   engine.bearing.frame_b.r_0[3] = engine.bearing.frame_a.r_0[3];
//   engine.bearing.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({engine.bearing.e[1],engine.bearing.e[2],engine.bearing.e[3]},engine.bearing.phi,engine.bearing.w);
//   engine.bearing.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(engine.bearing.frame_a.R,engine.bearing.R_rel);
//   engine.bearing.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(engine.bearing.R_rel,{engine.bearing.frame_b.f[1],engine.bearing.frame_b.f[2],engine.bearing.frame_b.f[3]});
//   engine.bearing.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(engine.bearing.R_rel,{engine.bearing.frame_b.t[1],engine.bearing.frame_b.t[2],engine.bearing.frame_b.t[3]});
//   engine.bearing.tau = (-engine.bearing.frame_b.t[1]) * engine.bearing.e[1] + ((-engine.bearing.frame_b.t[2]) * engine.bearing.e[2] + (-engine.bearing.frame_b.t[3]) * engine.bearing.e[3]);
//   engine.bearing.phi = engine.bearing.internalAxis.phi;
//   assert(true,"Neither connector frame_a nor frame_b of FixedTranslation object is connected");
//   engine.crank.frameTranslation.frame_b.r_0 = engine.crank.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.crank.frameTranslation.frame_a.R,{engine.crank.frameTranslation.r[1],engine.crank.frameTranslation.r[2],engine.crank.frameTranslation.r[3]});
//   engine.crank.frameTranslation.frame_b.R.T[1,1] = engine.crank.frameTranslation.frame_a.R.T[1,1];
//   engine.crank.frameTranslation.frame_b.R.T[1,2] = engine.crank.frameTranslation.frame_a.R.T[1,2];
//   engine.crank.frameTranslation.frame_b.R.T[1,3] = engine.crank.frameTranslation.frame_a.R.T[1,3];
//   engine.crank.frameTranslation.frame_b.R.T[2,1] = engine.crank.frameTranslation.frame_a.R.T[2,1];
//   engine.crank.frameTranslation.frame_b.R.T[2,2] = engine.crank.frameTranslation.frame_a.R.T[2,2];
//   engine.crank.frameTranslation.frame_b.R.T[2,3] = engine.crank.frameTranslation.frame_a.R.T[2,3];
//   engine.crank.frameTranslation.frame_b.R.T[3,1] = engine.crank.frameTranslation.frame_a.R.T[3,1];
//   engine.crank.frameTranslation.frame_b.R.T[3,2] = engine.crank.frameTranslation.frame_a.R.T[3,2];
//   engine.crank.frameTranslation.frame_b.R.T[3,3] = engine.crank.frameTranslation.frame_a.R.T[3,3];
//   engine.crank.frameTranslation.frame_b.R.w[1] = engine.crank.frameTranslation.frame_a.R.w[1];
//   engine.crank.frameTranslation.frame_b.R.w[2] = engine.crank.frameTranslation.frame_a.R.w[2];
//   engine.crank.frameTranslation.frame_b.R.w[3] = engine.crank.frameTranslation.frame_a.R.w[3];
//   0.0 = engine.crank.frameTranslation.frame_a.f[1] + engine.crank.frameTranslation.frame_b.f[1];
//   0.0 = engine.crank.frameTranslation.frame_a.f[2] + engine.crank.frameTranslation.frame_b.f[2];
//   0.0 = engine.crank.frameTranslation.frame_a.f[3] + engine.crank.frameTranslation.frame_b.f[3];
//   0.0 = engine.crank.frameTranslation.frame_a.t[1] + (engine.crank.frameTranslation.frame_b.t[1] + (engine.crank.frameTranslation.r[2] * engine.crank.frameTranslation.frame_b.f[3] + (-engine.crank.frameTranslation.r[3] * engine.crank.frameTranslation.frame_b.f[2])));
//   0.0 = engine.crank.frameTranslation.frame_a.t[2] + (engine.crank.frameTranslation.frame_b.t[2] + (engine.crank.frameTranslation.r[3] * engine.crank.frameTranslation.frame_b.f[1] + (-engine.crank.frameTranslation.r[1] * engine.crank.frameTranslation.frame_b.f[3])));
//   0.0 = engine.crank.frameTranslation.frame_a.t[3] + (engine.crank.frameTranslation.frame_b.t[3] + (engine.crank.frameTranslation.r[1] * engine.crank.frameTranslation.frame_b.f[2] + (-engine.crank.frameTranslation.r[2] * engine.crank.frameTranslation.frame_b.f[1])));
//   engine.crank.body.r_0[1] = engine.crank.body.frame_a.r_0[1];
//   engine.crank.body.r_0[2] = engine.crank.body.frame_a.r_0[2];
//   engine.crank.body.r_0[3] = engine.crank.body.frame_a.r_0[3];
//   if true then
//   engine.crank.body.Q[1] = 0.0;
//   engine.crank.body.Q[2] = 0.0;
//   engine.crank.body.Q[3] = 0.0;
//   engine.crank.body.Q[4] = 1.0;
//   engine.crank.body.phi[1] = 0.0;
//   engine.crank.body.phi[2] = 0.0;
//   engine.crank.body.phi[3] = 0.0;
//   engine.crank.body.phi_d[1] = 0.0;
//   engine.crank.body.phi_d[2] = 0.0;
//   engine.crank.body.phi_d[3] = 0.0;
//   engine.crank.body.phi_dd[1] = 0.0;
//   engine.crank.body.phi_dd[2] = 0.0;
//   engine.crank.body.phi_dd[3] = 0.0;
//   elseif engine.crank.body.useQuaternions then
//   engine.crank.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({engine.crank.body.Q[1],engine.crank.body.Q[2],engine.crank.body.Q[3],engine.crank.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({engine.crank.body.Q[1],engine.crank.body.Q[2],engine.crank.body.Q[3],engine.crank.body.Q[4]},{der(engine.crank.body.Q[1]),der(engine.crank.body.Q[2]),der(engine.crank.body.Q[3]),der(engine.crank.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({engine.crank.body.Q[1],engine.crank.body.Q[2],engine.crank.body.Q[3],engine.crank.body.Q[4]});
//   engine.crank.body.phi[1] = 0.0;
//   engine.crank.body.phi[2] = 0.0;
//   engine.crank.body.phi[3] = 0.0;
//   engine.crank.body.phi_d[1] = 0.0;
//   engine.crank.body.phi_d[2] = 0.0;
//   engine.crank.body.phi_d[3] = 0.0;
//   engine.crank.body.phi_dd[1] = 0.0;
//   engine.crank.body.phi_dd[2] = 0.0;
//   engine.crank.body.phi_dd[3] = 0.0;
//   else
//   engine.crank.body.phi_d[1] = der(engine.crank.body.phi[1]);
//   engine.crank.body.phi_d[2] = der(engine.crank.body.phi[2]);
//   engine.crank.body.phi_d[3] = der(engine.crank.body.phi[3]);
//   engine.crank.body.phi_dd[1] = der(engine.crank.body.phi_d[1]);
//   engine.crank.body.phi_dd[2] = der(engine.crank.body.phi_d[2]);
//   engine.crank.body.phi_dd[3] = der(engine.crank.body.phi_d[3]);
//   engine.crank.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({engine.crank.body.sequence_angleStates[1],engine.crank.body.sequence_angleStates[2],engine.crank.body.sequence_angleStates[3]},{engine.crank.body.phi[1],engine.crank.body.phi[2],engine.crank.body.phi[3]},{engine.crank.body.phi_d[1],engine.crank.body.phi_d[2],engine.crank.body.phi_d[3]});
//   engine.crank.body.Q[1] = 0.0;
//   engine.crank.body.Q[2] = 0.0;
//   engine.crank.body.Q[3] = 0.0;
//   engine.crank.body.Q[4] = 1.0;
//   end if;
//   engine.crank.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world.gravityAcceleration({engine.crank.body.frame_a.r_0[1],engine.crank.body.frame_a.r_0[2],engine.crank.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(engine.crank.body.frame_a.R,{engine.crank.body.r_CM[1],engine.crank.body.r_CM[2],engine.crank.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   engine.crank.body.v_0[1] = der(engine.crank.body.frame_a.r_0[1]);
//   engine.crank.body.v_0[2] = der(engine.crank.body.frame_a.r_0[2]);
//   engine.crank.body.v_0[3] = der(engine.crank.body.frame_a.r_0[3]);
//   engine.crank.body.a_0[1] = der(engine.crank.body.v_0[1]);
//   engine.crank.body.a_0[2] = der(engine.crank.body.v_0[2]);
//   engine.crank.body.a_0[3] = der(engine.crank.body.v_0[3]);
//   engine.crank.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(engine.crank.body.frame_a.R);
//   engine.crank.body.z_a[1] = der(engine.crank.body.w_a[1]);
//   engine.crank.body.z_a[2] = der(engine.crank.body.w_a[2]);
//   engine.crank.body.z_a[3] = der(engine.crank.body.w_a[3]);
//   engine.crank.body.frame_a.f = engine.crank.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(engine.crank.body.frame_a.R,{engine.crank.body.a_0[1] - engine.crank.body.g_0[1],engine.crank.body.a_0[2] - engine.crank.body.g_0[2],engine.crank.body.a_0[3] - engine.crank.body.g_0[3]}) + {engine.crank.body.z_a[2] * engine.crank.body.r_CM[3] - engine.crank.body.z_a[3] * engine.crank.body.r_CM[2],engine.crank.body.z_a[3] * engine.crank.body.r_CM[1] - engine.crank.body.z_a[1] * engine.crank.body.r_CM[3],engine.crank.body.z_a[1] * engine.crank.body.r_CM[2] - engine.crank.body.z_a[2] * engine.crank.body.r_CM[1]} + {engine.crank.body.w_a[2] * (engine.crank.body.w_a[1] * engine.crank.body.r_CM[2] - engine.crank.body.w_a[2] * engine.crank.body.r_CM[1]) - engine.crank.body.w_a[3] * (engine.crank.body.w_a[3] * engine.crank.body.r_CM[1] - engine.crank.body.w_a[1] * engine.crank.body.r_CM[3]),engine.crank.body.w_a[3] * (engine.crank.body.w_a[2] * engine.crank.body.r_CM[3] - engine.crank.body.w_a[3] * engine.crank.body.r_CM[2]) - engine.crank.body.w_a[1] * (engine.crank.body.w_a[1] * engine.crank.body.r_CM[2] - engine.crank.body.w_a[2] * engine.crank.body.r_CM[1]),engine.crank.body.w_a[1] * (engine.crank.body.w_a[3] * engine.crank.body.r_CM[1] - engine.crank.body.w_a[1] * engine.crank.body.r_CM[3]) - engine.crank.body.w_a[2] * (engine.crank.body.w_a[2] * engine.crank.body.r_CM[3] - engine.crank.body.w_a[3] * engine.crank.body.r_CM[2])});
//   engine.crank.body.frame_a.t[1] = engine.crank.body.I[1,1] * engine.crank.body.z_a[1] + (engine.crank.body.I[1,2] * engine.crank.body.z_a[2] + (engine.crank.body.I[1,3] * engine.crank.body.z_a[3] + (engine.crank.body.w_a[2] * (engine.crank.body.I[3,1] * engine.crank.body.w_a[1] + (engine.crank.body.I[3,2] * engine.crank.body.w_a[2] + engine.crank.body.I[3,3] * engine.crank.body.w_a[3])) + ((-engine.crank.body.w_a[3] * (engine.crank.body.I[2,1] * engine.crank.body.w_a[1] + (engine.crank.body.I[2,2] * engine.crank.body.w_a[2] + engine.crank.body.I[2,3] * engine.crank.body.w_a[3]))) + (engine.crank.body.r_CM[2] * engine.crank.body.frame_a.f[3] + (-engine.crank.body.r_CM[3] * engine.crank.body.frame_a.f[2]))))));
//   engine.crank.body.frame_a.t[2] = engine.crank.body.I[2,1] * engine.crank.body.z_a[1] + (engine.crank.body.I[2,2] * engine.crank.body.z_a[2] + (engine.crank.body.I[2,3] * engine.crank.body.z_a[3] + (engine.crank.body.w_a[3] * (engine.crank.body.I[1,1] * engine.crank.body.w_a[1] + (engine.crank.body.I[1,2] * engine.crank.body.w_a[2] + engine.crank.body.I[1,3] * engine.crank.body.w_a[3])) + ((-engine.crank.body.w_a[1] * (engine.crank.body.I[3,1] * engine.crank.body.w_a[1] + (engine.crank.body.I[3,2] * engine.crank.body.w_a[2] + engine.crank.body.I[3,3] * engine.crank.body.w_a[3]))) + (engine.crank.body.r_CM[3] * engine.crank.body.frame_a.f[1] + (-engine.crank.body.r_CM[1] * engine.crank.body.frame_a.f[3]))))));
//   engine.crank.body.frame_a.t[3] = engine.crank.body.I[3,1] * engine.crank.body.z_a[1] + (engine.crank.body.I[3,2] * engine.crank.body.z_a[2] + (engine.crank.body.I[3,3] * engine.crank.body.z_a[3] + (engine.crank.body.w_a[1] * (engine.crank.body.I[2,1] * engine.crank.body.w_a[1] + (engine.crank.body.I[2,2] * engine.crank.body.w_a[2] + engine.crank.body.I[2,3] * engine.crank.body.w_a[3])) + ((-engine.crank.body.w_a[2] * (engine.crank.body.I[1,1] * engine.crank.body.w_a[1] + (engine.crank.body.I[1,2] * engine.crank.body.w_a[2] + engine.crank.body.I[1,3] * engine.crank.body.w_a[3]))) + (engine.crank.body.r_CM[1] * engine.crank.body.frame_a.f[2] + (-engine.crank.body.r_CM[2] * engine.crank.body.frame_a.f[1]))))));
//   engine.crank.r_0[1] = engine.crank.frame_a.r_0[1];
//   engine.crank.r_0[2] = engine.crank.frame_a.r_0[2];
//   engine.crank.r_0[3] = engine.crank.frame_a.r_0[3];
//   engine.crank.v_0[1] = der(engine.crank.r_0[1]);
//   engine.crank.v_0[2] = der(engine.crank.r_0[2]);
//   engine.crank.v_0[3] = der(engine.crank.r_0[3]);
//   engine.crank.a_0[1] = der(engine.crank.v_0[1]);
//   engine.crank.a_0[2] = der(engine.crank.v_0[2]);
//   engine.crank.a_0[3] = der(engine.crank.v_0[3]);
//   load.phi = load.flange_a.phi;
//   load.phi = load.flange_b.phi;
//   load.w = der(load.phi);
//   load.a = der(load.w);
//   load.J * load.a = load.flange_a.tau + load.flange_b.tau;
//   load2.w = der(load2.phi);
//   load2.tau = -load2.flange.tau;
//   load2.tau = load2.tau_nominal * (load2.w / load2.w_nominal) ^ 2.0;
//   load2.phi = load2.flange.phi - load2.phi_support;
//   load2.phi_support = 0.0;
//   torqueSensor.flange_a.phi = torqueSensor.flange_b.phi;
//   torqueSensor.flange_a.tau = torqueSensor.tau;
//   0.0 = torqueSensor.flange_a.tau + torqueSensor.flange_b.tau;
//   der(filter.x[1]) = (filter.u - filter.x[1]) * filter.w;
//   der(filter.x[2]) = (filter.x[1] - filter.x[2]) * filter.w;
//   filter.y = filter.x[2];
//   filter.u = torqueSensor.tau;
//   torqueSensor.flange_b.tau + load.flange_a.tau = 0.0;
//   load.flange_a.phi = torqueSensor.flange_b.phi;
//   torqueSensor.flange_a.tau + engine.flange_b.tau = 0.0;
//   engine.bearing.axis.phi = engine.bearing.internalAxis.flange.phi;
//   engine.bearing.axis.phi = engine.flange_b.phi;
//   engine.bearing.axis.phi = torqueSensor.flange_a.phi;
//   load2.flange.tau + load.flange_b.tau = 0.0;
//   load.flange_b.phi = load2.flange.phi;
//   world.frame_b.t[1] + engine.frame_a.t[1] = 0.0;
//   world.frame_b.t[2] + engine.frame_a.t[2] = 0.0;
//   world.frame_b.t[3] + engine.frame_a.t[3] = 0.0;
//   world.frame_b.f[1] + engine.frame_a.f[1] = 0.0;
//   world.frame_b.f[2] + engine.frame_a.f[2] = 0.0;
//   world.frame_b.f[3] + engine.frame_a.f[3] = 0.0;
//   engine.bearing.frame_a.R.w[1] = engine.cylinder1.CylinderInclination.frame_a.R.w[1];
//   engine.bearing.frame_a.R.w[1] = engine.cylinder1.Mounting.frame_a.R.w[1];
//   engine.bearing.frame_a.R.w[1] = engine.cylinder1.cylinder_a.R.w[1];
//   engine.bearing.frame_a.R.w[1] = engine.frame_a.R.w[1];
//   engine.bearing.frame_a.R.w[1] = world.frame_b.R.w[1];
//   engine.bearing.frame_a.R.w[2] = engine.cylinder1.CylinderInclination.frame_a.R.w[2];
//   engine.bearing.frame_a.R.w[2] = engine.cylinder1.Mounting.frame_a.R.w[2];
//   engine.bearing.frame_a.R.w[2] = engine.cylinder1.cylinder_a.R.w[2];
//   engine.bearing.frame_a.R.w[2] = engine.frame_a.R.w[2];
//   engine.bearing.frame_a.R.w[2] = world.frame_b.R.w[2];
//   engine.bearing.frame_a.R.w[3] = engine.cylinder1.CylinderInclination.frame_a.R.w[3];
//   engine.bearing.frame_a.R.w[3] = engine.cylinder1.Mounting.frame_a.R.w[3];
//   engine.bearing.frame_a.R.w[3] = engine.cylinder1.cylinder_a.R.w[3];
//   engine.bearing.frame_a.R.w[3] = engine.frame_a.R.w[3];
//   engine.bearing.frame_a.R.w[3] = world.frame_b.R.w[3];
//   engine.bearing.frame_a.R.T[1,1] = engine.cylinder1.CylinderInclination.frame_a.R.T[1,1];
//   engine.bearing.frame_a.R.T[1,1] = engine.cylinder1.Mounting.frame_a.R.T[1,1];
//   engine.bearing.frame_a.R.T[1,1] = engine.cylinder1.cylinder_a.R.T[1,1];
//   engine.bearing.frame_a.R.T[1,1] = engine.frame_a.R.T[1,1];
//   engine.bearing.frame_a.R.T[1,1] = world.frame_b.R.T[1,1];
//   engine.bearing.frame_a.R.T[1,2] = engine.cylinder1.CylinderInclination.frame_a.R.T[1,2];
//   engine.bearing.frame_a.R.T[1,2] = engine.cylinder1.Mounting.frame_a.R.T[1,2];
//   engine.bearing.frame_a.R.T[1,2] = engine.cylinder1.cylinder_a.R.T[1,2];
//   engine.bearing.frame_a.R.T[1,2] = engine.frame_a.R.T[1,2];
//   engine.bearing.frame_a.R.T[1,2] = world.frame_b.R.T[1,2];
//   engine.bearing.frame_a.R.T[1,3] = engine.cylinder1.CylinderInclination.frame_a.R.T[1,3];
//   engine.bearing.frame_a.R.T[1,3] = engine.cylinder1.Mounting.frame_a.R.T[1,3];
//   engine.bearing.frame_a.R.T[1,3] = engine.cylinder1.cylinder_a.R.T[1,3];
//   engine.bearing.frame_a.R.T[1,3] = engine.frame_a.R.T[1,3];
//   engine.bearing.frame_a.R.T[1,3] = world.frame_b.R.T[1,3];
//   engine.bearing.frame_a.R.T[2,1] = engine.cylinder1.CylinderInclination.frame_a.R.T[2,1];
//   engine.bearing.frame_a.R.T[2,1] = engine.cylinder1.Mounting.frame_a.R.T[2,1];
//   engine.bearing.frame_a.R.T[2,1] = engine.cylinder1.cylinder_a.R.T[2,1];
//   engine.bearing.frame_a.R.T[2,1] = engine.frame_a.R.T[2,1];
//   engine.bearing.frame_a.R.T[2,1] = world.frame_b.R.T[2,1];
//   engine.bearing.frame_a.R.T[2,2] = engine.cylinder1.CylinderInclination.frame_a.R.T[2,2];
//   engine.bearing.frame_a.R.T[2,2] = engine.cylinder1.Mounting.frame_a.R.T[2,2];
//   engine.bearing.frame_a.R.T[2,2] = engine.cylinder1.cylinder_a.R.T[2,2];
//   engine.bearing.frame_a.R.T[2,2] = engine.frame_a.R.T[2,2];
//   engine.bearing.frame_a.R.T[2,2] = world.frame_b.R.T[2,2];
//   engine.bearing.frame_a.R.T[2,3] = engine.cylinder1.CylinderInclination.frame_a.R.T[2,3];
//   engine.bearing.frame_a.R.T[2,3] = engine.cylinder1.Mounting.frame_a.R.T[2,3];
//   engine.bearing.frame_a.R.T[2,3] = engine.cylinder1.cylinder_a.R.T[2,3];
//   engine.bearing.frame_a.R.T[2,3] = engine.frame_a.R.T[2,3];
//   engine.bearing.frame_a.R.T[2,3] = world.frame_b.R.T[2,3];
//   engine.bearing.frame_a.R.T[3,1] = engine.cylinder1.CylinderInclination.frame_a.R.T[3,1];
//   engine.bearing.frame_a.R.T[3,1] = engine.cylinder1.Mounting.frame_a.R.T[3,1];
//   engine.bearing.frame_a.R.T[3,1] = engine.cylinder1.cylinder_a.R.T[3,1];
//   engine.bearing.frame_a.R.T[3,1] = engine.frame_a.R.T[3,1];
//   engine.bearing.frame_a.R.T[3,1] = world.frame_b.R.T[3,1];
//   engine.bearing.frame_a.R.T[3,2] = engine.cylinder1.CylinderInclination.frame_a.R.T[3,2];
//   engine.bearing.frame_a.R.T[3,2] = engine.cylinder1.Mounting.frame_a.R.T[3,2];
//   engine.bearing.frame_a.R.T[3,2] = engine.cylinder1.cylinder_a.R.T[3,2];
//   engine.bearing.frame_a.R.T[3,2] = engine.frame_a.R.T[3,2];
//   engine.bearing.frame_a.R.T[3,2] = world.frame_b.R.T[3,2];
//   engine.bearing.frame_a.R.T[3,3] = engine.cylinder1.CylinderInclination.frame_a.R.T[3,3];
//   engine.bearing.frame_a.R.T[3,3] = engine.cylinder1.Mounting.frame_a.R.T[3,3];
//   engine.bearing.frame_a.R.T[3,3] = engine.cylinder1.cylinder_a.R.T[3,3];
//   engine.bearing.frame_a.R.T[3,3] = engine.frame_a.R.T[3,3];
//   engine.bearing.frame_a.R.T[3,3] = world.frame_b.R.T[3,3];
//   engine.bearing.frame_a.r_0[1] = engine.cylinder1.CylinderInclination.frame_a.r_0[1];
//   engine.bearing.frame_a.r_0[1] = engine.cylinder1.Mounting.frame_a.r_0[1];
//   engine.bearing.frame_a.r_0[1] = engine.cylinder1.cylinder_a.r_0[1];
//   engine.bearing.frame_a.r_0[1] = engine.frame_a.r_0[1];
//   engine.bearing.frame_a.r_0[1] = world.frame_b.r_0[1];
//   engine.bearing.frame_a.r_0[2] = engine.cylinder1.CylinderInclination.frame_a.r_0[2];
//   engine.bearing.frame_a.r_0[2] = engine.cylinder1.Mounting.frame_a.r_0[2];
//   engine.bearing.frame_a.r_0[2] = engine.cylinder1.cylinder_a.r_0[2];
//   engine.bearing.frame_a.r_0[2] = engine.frame_a.r_0[2];
//   engine.bearing.frame_a.r_0[2] = world.frame_b.r_0[2];
//   engine.bearing.frame_a.r_0[3] = engine.cylinder1.CylinderInclination.frame_a.r_0[3];
//   engine.bearing.frame_a.r_0[3] = engine.cylinder1.Mounting.frame_a.r_0[3];
//   engine.bearing.frame_a.r_0[3] = engine.cylinder1.cylinder_a.r_0[3];
//   engine.bearing.frame_a.r_0[3] = engine.frame_a.r_0[3];
//   engine.bearing.frame_a.r_0[3] = world.frame_b.r_0[3];
//   (-engine.frame_a.t[1]) + (engine.bearing.frame_a.t[1] + engine.cylinder1.cylinder_a.t[1]) = 0.0;
//   (-engine.frame_a.t[2]) + (engine.bearing.frame_a.t[2] + engine.cylinder1.cylinder_a.t[2]) = 0.0;
//   (-engine.frame_a.t[3]) + (engine.bearing.frame_a.t[3] + engine.cylinder1.cylinder_a.t[3]) = 0.0;
//   (-engine.frame_a.f[1]) + (engine.bearing.frame_a.f[1] + engine.cylinder1.cylinder_a.f[1]) = 0.0;
//   (-engine.frame_a.f[2]) + (engine.bearing.frame_a.f[2] + engine.cylinder1.cylinder_a.f[2]) = 0.0;
//   (-engine.frame_a.f[3]) + (engine.bearing.frame_a.f[3] + engine.cylinder1.cylinder_a.f[3]) = 0.0;
//   engine.bearing.axis.tau + (-engine.flange_b.tau) = 0.0;
//   engine.crank.frame_b.t[1] + engine.cylinder1.crank_a.t[1] = 0.0;
//   engine.crank.frame_b.t[2] + engine.cylinder1.crank_a.t[2] = 0.0;
//   engine.crank.frame_b.t[3] + engine.cylinder1.crank_a.t[3] = 0.0;
//   engine.crank.frame_b.f[1] + engine.cylinder1.crank_a.f[1] = 0.0;
//   engine.crank.frame_b.f[2] + engine.cylinder1.crank_a.f[2] = 0.0;
//   engine.crank.frame_b.f[3] + engine.cylinder1.crank_a.f[3] = 0.0;
//   engine.crank.frameTranslation.frame_b.R.w[1] = engine.crank.frame_b.R.w[1];
//   engine.crank.frameTranslation.frame_b.R.w[1] = engine.cylinder1.Crank.frame_a.R.w[1];
//   engine.crank.frameTranslation.frame_b.R.w[1] = engine.cylinder1.CrankAngle.frame_a.R.w[1];
//   engine.crank.frameTranslation.frame_b.R.w[1] = engine.cylinder1.crank_a.R.w[1];
//   engine.crank.frameTranslation.frame_b.R.w[2] = engine.crank.frame_b.R.w[2];
//   engine.crank.frameTranslation.frame_b.R.w[2] = engine.cylinder1.Crank.frame_a.R.w[2];
//   engine.crank.frameTranslation.frame_b.R.w[2] = engine.cylinder1.CrankAngle.frame_a.R.w[2];
//   engine.crank.frameTranslation.frame_b.R.w[2] = engine.cylinder1.crank_a.R.w[2];
//   engine.crank.frameTranslation.frame_b.R.w[3] = engine.crank.frame_b.R.w[3];
//   engine.crank.frameTranslation.frame_b.R.w[3] = engine.cylinder1.Crank.frame_a.R.w[3];
//   engine.crank.frameTranslation.frame_b.R.w[3] = engine.cylinder1.CrankAngle.frame_a.R.w[3];
//   engine.crank.frameTranslation.frame_b.R.w[3] = engine.cylinder1.crank_a.R.w[3];
//   engine.crank.frameTranslation.frame_b.R.T[1,1] = engine.crank.frame_b.R.T[1,1];
//   engine.crank.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.Crank.frame_a.R.T[1,1];
//   engine.crank.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.CrankAngle.frame_a.R.T[1,1];
//   engine.crank.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.crank_a.R.T[1,1];
//   engine.crank.frameTranslation.frame_b.R.T[1,2] = engine.crank.frame_b.R.T[1,2];
//   engine.crank.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.Crank.frame_a.R.T[1,2];
//   engine.crank.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.CrankAngle.frame_a.R.T[1,2];
//   engine.crank.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.crank_a.R.T[1,2];
//   engine.crank.frameTranslation.frame_b.R.T[1,3] = engine.crank.frame_b.R.T[1,3];
//   engine.crank.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.Crank.frame_a.R.T[1,3];
//   engine.crank.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.CrankAngle.frame_a.R.T[1,3];
//   engine.crank.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.crank_a.R.T[1,3];
//   engine.crank.frameTranslation.frame_b.R.T[2,1] = engine.crank.frame_b.R.T[2,1];
//   engine.crank.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.Crank.frame_a.R.T[2,1];
//   engine.crank.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.CrankAngle.frame_a.R.T[2,1];
//   engine.crank.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.crank_a.R.T[2,1];
//   engine.crank.frameTranslation.frame_b.R.T[2,2] = engine.crank.frame_b.R.T[2,2];
//   engine.crank.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.Crank.frame_a.R.T[2,2];
//   engine.crank.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.CrankAngle.frame_a.R.T[2,2];
//   engine.crank.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.crank_a.R.T[2,2];
//   engine.crank.frameTranslation.frame_b.R.T[2,3] = engine.crank.frame_b.R.T[2,3];
//   engine.crank.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.Crank.frame_a.R.T[2,3];
//   engine.crank.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.CrankAngle.frame_a.R.T[2,3];
//   engine.crank.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.crank_a.R.T[2,3];
//   engine.crank.frameTranslation.frame_b.R.T[3,1] = engine.crank.frame_b.R.T[3,1];
//   engine.crank.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.Crank.frame_a.R.T[3,1];
//   engine.crank.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.CrankAngle.frame_a.R.T[3,1];
//   engine.crank.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.crank_a.R.T[3,1];
//   engine.crank.frameTranslation.frame_b.R.T[3,2] = engine.crank.frame_b.R.T[3,2];
//   engine.crank.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.Crank.frame_a.R.T[3,2];
//   engine.crank.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.CrankAngle.frame_a.R.T[3,2];
//   engine.crank.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.crank_a.R.T[3,2];
//   engine.crank.frameTranslation.frame_b.R.T[3,3] = engine.crank.frame_b.R.T[3,3];
//   engine.crank.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.Crank.frame_a.R.T[3,3];
//   engine.crank.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.CrankAngle.frame_a.R.T[3,3];
//   engine.crank.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.crank_a.R.T[3,3];
//   engine.crank.frameTranslation.frame_b.r_0[1] = engine.crank.frame_b.r_0[1];
//   engine.crank.frameTranslation.frame_b.r_0[1] = engine.cylinder1.Crank.frame_a.r_0[1];
//   engine.crank.frameTranslation.frame_b.r_0[1] = engine.cylinder1.CrankAngle.frame_a.r_0[1];
//   engine.crank.frameTranslation.frame_b.r_0[1] = engine.cylinder1.crank_a.r_0[1];
//   engine.crank.frameTranslation.frame_b.r_0[2] = engine.crank.frame_b.r_0[2];
//   engine.crank.frameTranslation.frame_b.r_0[2] = engine.cylinder1.Crank.frame_a.r_0[2];
//   engine.crank.frameTranslation.frame_b.r_0[2] = engine.cylinder1.CrankAngle.frame_a.r_0[2];
//   engine.crank.frameTranslation.frame_b.r_0[2] = engine.cylinder1.crank_a.r_0[2];
//   engine.crank.frameTranslation.frame_b.r_0[3] = engine.crank.frame_b.r_0[3];
//   engine.crank.frameTranslation.frame_b.r_0[3] = engine.cylinder1.Crank.frame_a.r_0[3];
//   engine.crank.frameTranslation.frame_b.r_0[3] = engine.cylinder1.CrankAngle.frame_a.r_0[3];
//   engine.crank.frameTranslation.frame_b.r_0[3] = engine.cylinder1.crank_a.r_0[3];
//   engine.bearing.frame_b.t[1] + engine.crank.frame_a.t[1] = 0.0;
//   engine.bearing.frame_b.t[2] + engine.crank.frame_a.t[2] = 0.0;
//   engine.bearing.frame_b.t[3] + engine.crank.frame_a.t[3] = 0.0;
//   engine.bearing.frame_b.f[1] + engine.crank.frame_a.f[1] = 0.0;
//   engine.bearing.frame_b.f[2] + engine.crank.frame_a.f[2] = 0.0;
//   engine.bearing.frame_b.f[3] + engine.crank.frame_a.f[3] = 0.0;
//   engine.bearing.frame_b.R.w[1] = engine.crank.body.frame_a.R.w[1];
//   engine.bearing.frame_b.R.w[1] = engine.crank.frameTranslation.frame_a.R.w[1];
//   engine.bearing.frame_b.R.w[1] = engine.crank.frame_a.R.w[1];
//   engine.bearing.frame_b.R.w[2] = engine.crank.body.frame_a.R.w[2];
//   engine.bearing.frame_b.R.w[2] = engine.crank.frameTranslation.frame_a.R.w[2];
//   engine.bearing.frame_b.R.w[2] = engine.crank.frame_a.R.w[2];
//   engine.bearing.frame_b.R.w[3] = engine.crank.body.frame_a.R.w[3];
//   engine.bearing.frame_b.R.w[3] = engine.crank.frameTranslation.frame_a.R.w[3];
//   engine.bearing.frame_b.R.w[3] = engine.crank.frame_a.R.w[3];
//   engine.bearing.frame_b.R.T[1,1] = engine.crank.body.frame_a.R.T[1,1];
//   engine.bearing.frame_b.R.T[1,1] = engine.crank.frameTranslation.frame_a.R.T[1,1];
//   engine.bearing.frame_b.R.T[1,1] = engine.crank.frame_a.R.T[1,1];
//   engine.bearing.frame_b.R.T[1,2] = engine.crank.body.frame_a.R.T[1,2];
//   engine.bearing.frame_b.R.T[1,2] = engine.crank.frameTranslation.frame_a.R.T[1,2];
//   engine.bearing.frame_b.R.T[1,2] = engine.crank.frame_a.R.T[1,2];
//   engine.bearing.frame_b.R.T[1,3] = engine.crank.body.frame_a.R.T[1,3];
//   engine.bearing.frame_b.R.T[1,3] = engine.crank.frameTranslation.frame_a.R.T[1,3];
//   engine.bearing.frame_b.R.T[1,3] = engine.crank.frame_a.R.T[1,3];
//   engine.bearing.frame_b.R.T[2,1] = engine.crank.body.frame_a.R.T[2,1];
//   engine.bearing.frame_b.R.T[2,1] = engine.crank.frameTranslation.frame_a.R.T[2,1];
//   engine.bearing.frame_b.R.T[2,1] = engine.crank.frame_a.R.T[2,1];
//   engine.bearing.frame_b.R.T[2,2] = engine.crank.body.frame_a.R.T[2,2];
//   engine.bearing.frame_b.R.T[2,2] = engine.crank.frameTranslation.frame_a.R.T[2,2];
//   engine.bearing.frame_b.R.T[2,2] = engine.crank.frame_a.R.T[2,2];
//   engine.bearing.frame_b.R.T[2,3] = engine.crank.body.frame_a.R.T[2,3];
//   engine.bearing.frame_b.R.T[2,3] = engine.crank.frameTranslation.frame_a.R.T[2,3];
//   engine.bearing.frame_b.R.T[2,3] = engine.crank.frame_a.R.T[2,3];
//   engine.bearing.frame_b.R.T[3,1] = engine.crank.body.frame_a.R.T[3,1];
//   engine.bearing.frame_b.R.T[3,1] = engine.crank.frameTranslation.frame_a.R.T[3,1];
//   engine.bearing.frame_b.R.T[3,1] = engine.crank.frame_a.R.T[3,1];
//   engine.bearing.frame_b.R.T[3,2] = engine.crank.body.frame_a.R.T[3,2];
//   engine.bearing.frame_b.R.T[3,2] = engine.crank.frameTranslation.frame_a.R.T[3,2];
//   engine.bearing.frame_b.R.T[3,2] = engine.crank.frame_a.R.T[3,2];
//   engine.bearing.frame_b.R.T[3,3] = engine.crank.body.frame_a.R.T[3,3];
//   engine.bearing.frame_b.R.T[3,3] = engine.crank.frameTranslation.frame_a.R.T[3,3];
//   engine.bearing.frame_b.R.T[3,3] = engine.crank.frame_a.R.T[3,3];
//   engine.bearing.frame_b.r_0[1] = engine.crank.body.frame_a.r_0[1];
//   engine.bearing.frame_b.r_0[1] = engine.crank.frameTranslation.frame_a.r_0[1];
//   engine.bearing.frame_b.r_0[1] = engine.crank.frame_a.r_0[1];
//   engine.bearing.frame_b.r_0[2] = engine.crank.body.frame_a.r_0[2];
//   engine.bearing.frame_b.r_0[2] = engine.crank.frameTranslation.frame_a.r_0[2];
//   engine.bearing.frame_b.r_0[2] = engine.crank.frame_a.r_0[2];
//   engine.bearing.frame_b.r_0[3] = engine.crank.body.frame_a.r_0[3];
//   engine.bearing.frame_b.r_0[3] = engine.crank.frameTranslation.frame_a.r_0[3];
//   engine.bearing.frame_b.r_0[3] = engine.crank.frame_a.r_0[3];
//   engine.cylinder5.crank_b.t[1] + engine.cylinder6.crank_a.t[1] = 0.0;
//   engine.cylinder5.crank_b.t[2] + engine.cylinder6.crank_a.t[2] = 0.0;
//   engine.cylinder5.crank_b.t[3] + engine.cylinder6.crank_a.t[3] = 0.0;
//   engine.cylinder5.crank_b.f[1] + engine.cylinder6.crank_a.f[1] = 0.0;
//   engine.cylinder5.crank_b.f[2] + engine.cylinder6.crank_a.f[2] = 0.0;
//   engine.cylinder5.crank_b.f[3] + engine.cylinder6.crank_a.f[3] = 0.0;
//   engine.cylinder5.Crank.frame_b.R.w[1] = engine.cylinder5.crank_b.R.w[1];
//   engine.cylinder5.Crank.frame_b.R.w[1] = engine.cylinder6.Crank.frame_a.R.w[1];
//   engine.cylinder5.Crank.frame_b.R.w[1] = engine.cylinder6.CrankAngle.frame_a.R.w[1];
//   engine.cylinder5.Crank.frame_b.R.w[1] = engine.cylinder6.crank_a.R.w[1];
//   engine.cylinder5.Crank.frame_b.R.w[2] = engine.cylinder5.crank_b.R.w[2];
//   engine.cylinder5.Crank.frame_b.R.w[2] = engine.cylinder6.Crank.frame_a.R.w[2];
//   engine.cylinder5.Crank.frame_b.R.w[2] = engine.cylinder6.CrankAngle.frame_a.R.w[2];
//   engine.cylinder5.Crank.frame_b.R.w[2] = engine.cylinder6.crank_a.R.w[2];
//   engine.cylinder5.Crank.frame_b.R.w[3] = engine.cylinder5.crank_b.R.w[3];
//   engine.cylinder5.Crank.frame_b.R.w[3] = engine.cylinder6.Crank.frame_a.R.w[3];
//   engine.cylinder5.Crank.frame_b.R.w[3] = engine.cylinder6.CrankAngle.frame_a.R.w[3];
//   engine.cylinder5.Crank.frame_b.R.w[3] = engine.cylinder6.crank_a.R.w[3];
//   engine.cylinder5.Crank.frame_b.R.T[1,1] = engine.cylinder5.crank_b.R.T[1,1];
//   engine.cylinder5.Crank.frame_b.R.T[1,1] = engine.cylinder6.Crank.frame_a.R.T[1,1];
//   engine.cylinder5.Crank.frame_b.R.T[1,1] = engine.cylinder6.CrankAngle.frame_a.R.T[1,1];
//   engine.cylinder5.Crank.frame_b.R.T[1,1] = engine.cylinder6.crank_a.R.T[1,1];
//   engine.cylinder5.Crank.frame_b.R.T[1,2] = engine.cylinder5.crank_b.R.T[1,2];
//   engine.cylinder5.Crank.frame_b.R.T[1,2] = engine.cylinder6.Crank.frame_a.R.T[1,2];
//   engine.cylinder5.Crank.frame_b.R.T[1,2] = engine.cylinder6.CrankAngle.frame_a.R.T[1,2];
//   engine.cylinder5.Crank.frame_b.R.T[1,2] = engine.cylinder6.crank_a.R.T[1,2];
//   engine.cylinder5.Crank.frame_b.R.T[1,3] = engine.cylinder5.crank_b.R.T[1,3];
//   engine.cylinder5.Crank.frame_b.R.T[1,3] = engine.cylinder6.Crank.frame_a.R.T[1,3];
//   engine.cylinder5.Crank.frame_b.R.T[1,3] = engine.cylinder6.CrankAngle.frame_a.R.T[1,3];
//   engine.cylinder5.Crank.frame_b.R.T[1,3] = engine.cylinder6.crank_a.R.T[1,3];
//   engine.cylinder5.Crank.frame_b.R.T[2,1] = engine.cylinder5.crank_b.R.T[2,1];
//   engine.cylinder5.Crank.frame_b.R.T[2,1] = engine.cylinder6.Crank.frame_a.R.T[2,1];
//   engine.cylinder5.Crank.frame_b.R.T[2,1] = engine.cylinder6.CrankAngle.frame_a.R.T[2,1];
//   engine.cylinder5.Crank.frame_b.R.T[2,1] = engine.cylinder6.crank_a.R.T[2,1];
//   engine.cylinder5.Crank.frame_b.R.T[2,2] = engine.cylinder5.crank_b.R.T[2,2];
//   engine.cylinder5.Crank.frame_b.R.T[2,2] = engine.cylinder6.Crank.frame_a.R.T[2,2];
//   engine.cylinder5.Crank.frame_b.R.T[2,2] = engine.cylinder6.CrankAngle.frame_a.R.T[2,2];
//   engine.cylinder5.Crank.frame_b.R.T[2,2] = engine.cylinder6.crank_a.R.T[2,2];
//   engine.cylinder5.Crank.frame_b.R.T[2,3] = engine.cylinder5.crank_b.R.T[2,3];
//   engine.cylinder5.Crank.frame_b.R.T[2,3] = engine.cylinder6.Crank.frame_a.R.T[2,3];
//   engine.cylinder5.Crank.frame_b.R.T[2,3] = engine.cylinder6.CrankAngle.frame_a.R.T[2,3];
//   engine.cylinder5.Crank.frame_b.R.T[2,3] = engine.cylinder6.crank_a.R.T[2,3];
//   engine.cylinder5.Crank.frame_b.R.T[3,1] = engine.cylinder5.crank_b.R.T[3,1];
//   engine.cylinder5.Crank.frame_b.R.T[3,1] = engine.cylinder6.Crank.frame_a.R.T[3,1];
//   engine.cylinder5.Crank.frame_b.R.T[3,1] = engine.cylinder6.CrankAngle.frame_a.R.T[3,1];
//   engine.cylinder5.Crank.frame_b.R.T[3,1] = engine.cylinder6.crank_a.R.T[3,1];
//   engine.cylinder5.Crank.frame_b.R.T[3,2] = engine.cylinder5.crank_b.R.T[3,2];
//   engine.cylinder5.Crank.frame_b.R.T[3,2] = engine.cylinder6.Crank.frame_a.R.T[3,2];
//   engine.cylinder5.Crank.frame_b.R.T[3,2] = engine.cylinder6.CrankAngle.frame_a.R.T[3,2];
//   engine.cylinder5.Crank.frame_b.R.T[3,2] = engine.cylinder6.crank_a.R.T[3,2];
//   engine.cylinder5.Crank.frame_b.R.T[3,3] = engine.cylinder5.crank_b.R.T[3,3];
//   engine.cylinder5.Crank.frame_b.R.T[3,3] = engine.cylinder6.Crank.frame_a.R.T[3,3];
//   engine.cylinder5.Crank.frame_b.R.T[3,3] = engine.cylinder6.CrankAngle.frame_a.R.T[3,3];
//   engine.cylinder5.Crank.frame_b.R.T[3,3] = engine.cylinder6.crank_a.R.T[3,3];
//   engine.cylinder5.Crank.frame_b.r_0[1] = engine.cylinder5.crank_b.r_0[1];
//   engine.cylinder5.Crank.frame_b.r_0[1] = engine.cylinder6.Crank.frame_a.r_0[1];
//   engine.cylinder5.Crank.frame_b.r_0[1] = engine.cylinder6.CrankAngle.frame_a.r_0[1];
//   engine.cylinder5.Crank.frame_b.r_0[1] = engine.cylinder6.crank_a.r_0[1];
//   engine.cylinder5.Crank.frame_b.r_0[2] = engine.cylinder5.crank_b.r_0[2];
//   engine.cylinder5.Crank.frame_b.r_0[2] = engine.cylinder6.Crank.frame_a.r_0[2];
//   engine.cylinder5.Crank.frame_b.r_0[2] = engine.cylinder6.CrankAngle.frame_a.r_0[2];
//   engine.cylinder5.Crank.frame_b.r_0[2] = engine.cylinder6.crank_a.r_0[2];
//   engine.cylinder5.Crank.frame_b.r_0[3] = engine.cylinder5.crank_b.r_0[3];
//   engine.cylinder5.Crank.frame_b.r_0[3] = engine.cylinder6.Crank.frame_a.r_0[3];
//   engine.cylinder5.Crank.frame_b.r_0[3] = engine.cylinder6.CrankAngle.frame_a.r_0[3];
//   engine.cylinder5.Crank.frame_b.r_0[3] = engine.cylinder6.crank_a.r_0[3];
//   engine.cylinder5.cylinder_b.t[1] + engine.cylinder6.cylinder_a.t[1] = 0.0;
//   engine.cylinder5.cylinder_b.t[2] + engine.cylinder6.cylinder_a.t[2] = 0.0;
//   engine.cylinder5.cylinder_b.t[3] + engine.cylinder6.cylinder_a.t[3] = 0.0;
//   engine.cylinder5.cylinder_b.f[1] + engine.cylinder6.cylinder_a.f[1] = 0.0;
//   engine.cylinder5.cylinder_b.f[2] + engine.cylinder6.cylinder_a.f[2] = 0.0;
//   engine.cylinder5.cylinder_b.f[3] + engine.cylinder6.cylinder_a.f[3] = 0.0;
//   engine.cylinder5.Mounting.frame_b.R.w[1] = engine.cylinder5.cylinder_b.R.w[1];
//   engine.cylinder5.Mounting.frame_b.R.w[1] = engine.cylinder6.CylinderInclination.frame_a.R.w[1];
//   engine.cylinder5.Mounting.frame_b.R.w[1] = engine.cylinder6.Mounting.frame_a.R.w[1];
//   engine.cylinder5.Mounting.frame_b.R.w[1] = engine.cylinder6.cylinder_a.R.w[1];
//   engine.cylinder5.Mounting.frame_b.R.w[2] = engine.cylinder5.cylinder_b.R.w[2];
//   engine.cylinder5.Mounting.frame_b.R.w[2] = engine.cylinder6.CylinderInclination.frame_a.R.w[2];
//   engine.cylinder5.Mounting.frame_b.R.w[2] = engine.cylinder6.Mounting.frame_a.R.w[2];
//   engine.cylinder5.Mounting.frame_b.R.w[2] = engine.cylinder6.cylinder_a.R.w[2];
//   engine.cylinder5.Mounting.frame_b.R.w[3] = engine.cylinder5.cylinder_b.R.w[3];
//   engine.cylinder5.Mounting.frame_b.R.w[3] = engine.cylinder6.CylinderInclination.frame_a.R.w[3];
//   engine.cylinder5.Mounting.frame_b.R.w[3] = engine.cylinder6.Mounting.frame_a.R.w[3];
//   engine.cylinder5.Mounting.frame_b.R.w[3] = engine.cylinder6.cylinder_a.R.w[3];
//   engine.cylinder5.Mounting.frame_b.R.T[1,1] = engine.cylinder5.cylinder_b.R.T[1,1];
//   engine.cylinder5.Mounting.frame_b.R.T[1,1] = engine.cylinder6.CylinderInclination.frame_a.R.T[1,1];
//   engine.cylinder5.Mounting.frame_b.R.T[1,1] = engine.cylinder6.Mounting.frame_a.R.T[1,1];
//   engine.cylinder5.Mounting.frame_b.R.T[1,1] = engine.cylinder6.cylinder_a.R.T[1,1];
//   engine.cylinder5.Mounting.frame_b.R.T[1,2] = engine.cylinder5.cylinder_b.R.T[1,2];
//   engine.cylinder5.Mounting.frame_b.R.T[1,2] = engine.cylinder6.CylinderInclination.frame_a.R.T[1,2];
//   engine.cylinder5.Mounting.frame_b.R.T[1,2] = engine.cylinder6.Mounting.frame_a.R.T[1,2];
//   engine.cylinder5.Mounting.frame_b.R.T[1,2] = engine.cylinder6.cylinder_a.R.T[1,2];
//   engine.cylinder5.Mounting.frame_b.R.T[1,3] = engine.cylinder5.cylinder_b.R.T[1,3];
//   engine.cylinder5.Mounting.frame_b.R.T[1,3] = engine.cylinder6.CylinderInclination.frame_a.R.T[1,3];
//   engine.cylinder5.Mounting.frame_b.R.T[1,3] = engine.cylinder6.Mounting.frame_a.R.T[1,3];
//   engine.cylinder5.Mounting.frame_b.R.T[1,3] = engine.cylinder6.cylinder_a.R.T[1,3];
//   engine.cylinder5.Mounting.frame_b.R.T[2,1] = engine.cylinder5.cylinder_b.R.T[2,1];
//   engine.cylinder5.Mounting.frame_b.R.T[2,1] = engine.cylinder6.CylinderInclination.frame_a.R.T[2,1];
//   engine.cylinder5.Mounting.frame_b.R.T[2,1] = engine.cylinder6.Mounting.frame_a.R.T[2,1];
//   engine.cylinder5.Mounting.frame_b.R.T[2,1] = engine.cylinder6.cylinder_a.R.T[2,1];
//   engine.cylinder5.Mounting.frame_b.R.T[2,2] = engine.cylinder5.cylinder_b.R.T[2,2];
//   engine.cylinder5.Mounting.frame_b.R.T[2,2] = engine.cylinder6.CylinderInclination.frame_a.R.T[2,2];
//   engine.cylinder5.Mounting.frame_b.R.T[2,2] = engine.cylinder6.Mounting.frame_a.R.T[2,2];
//   engine.cylinder5.Mounting.frame_b.R.T[2,2] = engine.cylinder6.cylinder_a.R.T[2,2];
//   engine.cylinder5.Mounting.frame_b.R.T[2,3] = engine.cylinder5.cylinder_b.R.T[2,3];
//   engine.cylinder5.Mounting.frame_b.R.T[2,3] = engine.cylinder6.CylinderInclination.frame_a.R.T[2,3];
//   engine.cylinder5.Mounting.frame_b.R.T[2,3] = engine.cylinder6.Mounting.frame_a.R.T[2,3];
//   engine.cylinder5.Mounting.frame_b.R.T[2,3] = engine.cylinder6.cylinder_a.R.T[2,3];
//   engine.cylinder5.Mounting.frame_b.R.T[3,1] = engine.cylinder5.cylinder_b.R.T[3,1];
//   engine.cylinder5.Mounting.frame_b.R.T[3,1] = engine.cylinder6.CylinderInclination.frame_a.R.T[3,1];
//   engine.cylinder5.Mounting.frame_b.R.T[3,1] = engine.cylinder6.Mounting.frame_a.R.T[3,1];
//   engine.cylinder5.Mounting.frame_b.R.T[3,1] = engine.cylinder6.cylinder_a.R.T[3,1];
//   engine.cylinder5.Mounting.frame_b.R.T[3,2] = engine.cylinder5.cylinder_b.R.T[3,2];
//   engine.cylinder5.Mounting.frame_b.R.T[3,2] = engine.cylinder6.CylinderInclination.frame_a.R.T[3,2];
//   engine.cylinder5.Mounting.frame_b.R.T[3,2] = engine.cylinder6.Mounting.frame_a.R.T[3,2];
//   engine.cylinder5.Mounting.frame_b.R.T[3,2] = engine.cylinder6.cylinder_a.R.T[3,2];
//   engine.cylinder5.Mounting.frame_b.R.T[3,3] = engine.cylinder5.cylinder_b.R.T[3,3];
//   engine.cylinder5.Mounting.frame_b.R.T[3,3] = engine.cylinder6.CylinderInclination.frame_a.R.T[3,3];
//   engine.cylinder5.Mounting.frame_b.R.T[3,3] = engine.cylinder6.Mounting.frame_a.R.T[3,3];
//   engine.cylinder5.Mounting.frame_b.R.T[3,3] = engine.cylinder6.cylinder_a.R.T[3,3];
//   engine.cylinder5.Mounting.frame_b.r_0[1] = engine.cylinder5.cylinder_b.r_0[1];
//   engine.cylinder5.Mounting.frame_b.r_0[1] = engine.cylinder6.CylinderInclination.frame_a.r_0[1];
//   engine.cylinder5.Mounting.frame_b.r_0[1] = engine.cylinder6.Mounting.frame_a.r_0[1];
//   engine.cylinder5.Mounting.frame_b.r_0[1] = engine.cylinder6.cylinder_a.r_0[1];
//   engine.cylinder5.Mounting.frame_b.r_0[2] = engine.cylinder5.cylinder_b.r_0[2];
//   engine.cylinder5.Mounting.frame_b.r_0[2] = engine.cylinder6.CylinderInclination.frame_a.r_0[2];
//   engine.cylinder5.Mounting.frame_b.r_0[2] = engine.cylinder6.Mounting.frame_a.r_0[2];
//   engine.cylinder5.Mounting.frame_b.r_0[2] = engine.cylinder6.cylinder_a.r_0[2];
//   engine.cylinder5.Mounting.frame_b.r_0[3] = engine.cylinder5.cylinder_b.r_0[3];
//   engine.cylinder5.Mounting.frame_b.r_0[3] = engine.cylinder6.CylinderInclination.frame_a.r_0[3];
//   engine.cylinder5.Mounting.frame_b.r_0[3] = engine.cylinder6.Mounting.frame_a.r_0[3];
//   engine.cylinder5.Mounting.frame_b.r_0[3] = engine.cylinder6.cylinder_a.r_0[3];
//   engine.cylinder4.crank_b.t[1] + engine.cylinder5.crank_a.t[1] = 0.0;
//   engine.cylinder4.crank_b.t[2] + engine.cylinder5.crank_a.t[2] = 0.0;
//   engine.cylinder4.crank_b.t[3] + engine.cylinder5.crank_a.t[3] = 0.0;
//   engine.cylinder4.crank_b.f[1] + engine.cylinder5.crank_a.f[1] = 0.0;
//   engine.cylinder4.crank_b.f[2] + engine.cylinder5.crank_a.f[2] = 0.0;
//   engine.cylinder4.crank_b.f[3] + engine.cylinder5.crank_a.f[3] = 0.0;
//   engine.cylinder4.Crank.frame_b.R.w[1] = engine.cylinder4.crank_b.R.w[1];
//   engine.cylinder4.Crank.frame_b.R.w[1] = engine.cylinder5.Crank.frame_a.R.w[1];
//   engine.cylinder4.Crank.frame_b.R.w[1] = engine.cylinder5.CrankAngle.frame_a.R.w[1];
//   engine.cylinder4.Crank.frame_b.R.w[1] = engine.cylinder5.crank_a.R.w[1];
//   engine.cylinder4.Crank.frame_b.R.w[2] = engine.cylinder4.crank_b.R.w[2];
//   engine.cylinder4.Crank.frame_b.R.w[2] = engine.cylinder5.Crank.frame_a.R.w[2];
//   engine.cylinder4.Crank.frame_b.R.w[2] = engine.cylinder5.CrankAngle.frame_a.R.w[2];
//   engine.cylinder4.Crank.frame_b.R.w[2] = engine.cylinder5.crank_a.R.w[2];
//   engine.cylinder4.Crank.frame_b.R.w[3] = engine.cylinder4.crank_b.R.w[3];
//   engine.cylinder4.Crank.frame_b.R.w[3] = engine.cylinder5.Crank.frame_a.R.w[3];
//   engine.cylinder4.Crank.frame_b.R.w[3] = engine.cylinder5.CrankAngle.frame_a.R.w[3];
//   engine.cylinder4.Crank.frame_b.R.w[3] = engine.cylinder5.crank_a.R.w[3];
//   engine.cylinder4.Crank.frame_b.R.T[1,1] = engine.cylinder4.crank_b.R.T[1,1];
//   engine.cylinder4.Crank.frame_b.R.T[1,1] = engine.cylinder5.Crank.frame_a.R.T[1,1];
//   engine.cylinder4.Crank.frame_b.R.T[1,1] = engine.cylinder5.CrankAngle.frame_a.R.T[1,1];
//   engine.cylinder4.Crank.frame_b.R.T[1,1] = engine.cylinder5.crank_a.R.T[1,1];
//   engine.cylinder4.Crank.frame_b.R.T[1,2] = engine.cylinder4.crank_b.R.T[1,2];
//   engine.cylinder4.Crank.frame_b.R.T[1,2] = engine.cylinder5.Crank.frame_a.R.T[1,2];
//   engine.cylinder4.Crank.frame_b.R.T[1,2] = engine.cylinder5.CrankAngle.frame_a.R.T[1,2];
//   engine.cylinder4.Crank.frame_b.R.T[1,2] = engine.cylinder5.crank_a.R.T[1,2];
//   engine.cylinder4.Crank.frame_b.R.T[1,3] = engine.cylinder4.crank_b.R.T[1,3];
//   engine.cylinder4.Crank.frame_b.R.T[1,3] = engine.cylinder5.Crank.frame_a.R.T[1,3];
//   engine.cylinder4.Crank.frame_b.R.T[1,3] = engine.cylinder5.CrankAngle.frame_a.R.T[1,3];
//   engine.cylinder4.Crank.frame_b.R.T[1,3] = engine.cylinder5.crank_a.R.T[1,3];
//   engine.cylinder4.Crank.frame_b.R.T[2,1] = engine.cylinder4.crank_b.R.T[2,1];
//   engine.cylinder4.Crank.frame_b.R.T[2,1] = engine.cylinder5.Crank.frame_a.R.T[2,1];
//   engine.cylinder4.Crank.frame_b.R.T[2,1] = engine.cylinder5.CrankAngle.frame_a.R.T[2,1];
//   engine.cylinder4.Crank.frame_b.R.T[2,1] = engine.cylinder5.crank_a.R.T[2,1];
//   engine.cylinder4.Crank.frame_b.R.T[2,2] = engine.cylinder4.crank_b.R.T[2,2];
//   engine.cylinder4.Crank.frame_b.R.T[2,2] = engine.cylinder5.Crank.frame_a.R.T[2,2];
//   engine.cylinder4.Crank.frame_b.R.T[2,2] = engine.cylinder5.CrankAngle.frame_a.R.T[2,2];
//   engine.cylinder4.Crank.frame_b.R.T[2,2] = engine.cylinder5.crank_a.R.T[2,2];
//   engine.cylinder4.Crank.frame_b.R.T[2,3] = engine.cylinder4.crank_b.R.T[2,3];
//   engine.cylinder4.Crank.frame_b.R.T[2,3] = engine.cylinder5.Crank.frame_a.R.T[2,3];
//   engine.cylinder4.Crank.frame_b.R.T[2,3] = engine.cylinder5.CrankAngle.frame_a.R.T[2,3];
//   engine.cylinder4.Crank.frame_b.R.T[2,3] = engine.cylinder5.crank_a.R.T[2,3];
//   engine.cylinder4.Crank.frame_b.R.T[3,1] = engine.cylinder4.crank_b.R.T[3,1];
//   engine.cylinder4.Crank.frame_b.R.T[3,1] = engine.cylinder5.Crank.frame_a.R.T[3,1];
//   engine.cylinder4.Crank.frame_b.R.T[3,1] = engine.cylinder5.CrankAngle.frame_a.R.T[3,1];
//   engine.cylinder4.Crank.frame_b.R.T[3,1] = engine.cylinder5.crank_a.R.T[3,1];
//   engine.cylinder4.Crank.frame_b.R.T[3,2] = engine.cylinder4.crank_b.R.T[3,2];
//   engine.cylinder4.Crank.frame_b.R.T[3,2] = engine.cylinder5.Crank.frame_a.R.T[3,2];
//   engine.cylinder4.Crank.frame_b.R.T[3,2] = engine.cylinder5.CrankAngle.frame_a.R.T[3,2];
//   engine.cylinder4.Crank.frame_b.R.T[3,2] = engine.cylinder5.crank_a.R.T[3,2];
//   engine.cylinder4.Crank.frame_b.R.T[3,3] = engine.cylinder4.crank_b.R.T[3,3];
//   engine.cylinder4.Crank.frame_b.R.T[3,3] = engine.cylinder5.Crank.frame_a.R.T[3,3];
//   engine.cylinder4.Crank.frame_b.R.T[3,3] = engine.cylinder5.CrankAngle.frame_a.R.T[3,3];
//   engine.cylinder4.Crank.frame_b.R.T[3,3] = engine.cylinder5.crank_a.R.T[3,3];
//   engine.cylinder4.Crank.frame_b.r_0[1] = engine.cylinder4.crank_b.r_0[1];
//   engine.cylinder4.Crank.frame_b.r_0[1] = engine.cylinder5.Crank.frame_a.r_0[1];
//   engine.cylinder4.Crank.frame_b.r_0[1] = engine.cylinder5.CrankAngle.frame_a.r_0[1];
//   engine.cylinder4.Crank.frame_b.r_0[1] = engine.cylinder5.crank_a.r_0[1];
//   engine.cylinder4.Crank.frame_b.r_0[2] = engine.cylinder4.crank_b.r_0[2];
//   engine.cylinder4.Crank.frame_b.r_0[2] = engine.cylinder5.Crank.frame_a.r_0[2];
//   engine.cylinder4.Crank.frame_b.r_0[2] = engine.cylinder5.CrankAngle.frame_a.r_0[2];
//   engine.cylinder4.Crank.frame_b.r_0[2] = engine.cylinder5.crank_a.r_0[2];
//   engine.cylinder4.Crank.frame_b.r_0[3] = engine.cylinder4.crank_b.r_0[3];
//   engine.cylinder4.Crank.frame_b.r_0[3] = engine.cylinder5.Crank.frame_a.r_0[3];
//   engine.cylinder4.Crank.frame_b.r_0[3] = engine.cylinder5.CrankAngle.frame_a.r_0[3];
//   engine.cylinder4.Crank.frame_b.r_0[3] = engine.cylinder5.crank_a.r_0[3];
//   engine.cylinder4.cylinder_b.t[1] + engine.cylinder5.cylinder_a.t[1] = 0.0;
//   engine.cylinder4.cylinder_b.t[2] + engine.cylinder5.cylinder_a.t[2] = 0.0;
//   engine.cylinder4.cylinder_b.t[3] + engine.cylinder5.cylinder_a.t[3] = 0.0;
//   engine.cylinder4.cylinder_b.f[1] + engine.cylinder5.cylinder_a.f[1] = 0.0;
//   engine.cylinder4.cylinder_b.f[2] + engine.cylinder5.cylinder_a.f[2] = 0.0;
//   engine.cylinder4.cylinder_b.f[3] + engine.cylinder5.cylinder_a.f[3] = 0.0;
//   engine.cylinder4.Mounting.frame_b.R.w[1] = engine.cylinder4.cylinder_b.R.w[1];
//   engine.cylinder4.Mounting.frame_b.R.w[1] = engine.cylinder5.CylinderInclination.frame_a.R.w[1];
//   engine.cylinder4.Mounting.frame_b.R.w[1] = engine.cylinder5.Mounting.frame_a.R.w[1];
//   engine.cylinder4.Mounting.frame_b.R.w[1] = engine.cylinder5.cylinder_a.R.w[1];
//   engine.cylinder4.Mounting.frame_b.R.w[2] = engine.cylinder4.cylinder_b.R.w[2];
//   engine.cylinder4.Mounting.frame_b.R.w[2] = engine.cylinder5.CylinderInclination.frame_a.R.w[2];
//   engine.cylinder4.Mounting.frame_b.R.w[2] = engine.cylinder5.Mounting.frame_a.R.w[2];
//   engine.cylinder4.Mounting.frame_b.R.w[2] = engine.cylinder5.cylinder_a.R.w[2];
//   engine.cylinder4.Mounting.frame_b.R.w[3] = engine.cylinder4.cylinder_b.R.w[3];
//   engine.cylinder4.Mounting.frame_b.R.w[3] = engine.cylinder5.CylinderInclination.frame_a.R.w[3];
//   engine.cylinder4.Mounting.frame_b.R.w[3] = engine.cylinder5.Mounting.frame_a.R.w[3];
//   engine.cylinder4.Mounting.frame_b.R.w[3] = engine.cylinder5.cylinder_a.R.w[3];
//   engine.cylinder4.Mounting.frame_b.R.T[1,1] = engine.cylinder4.cylinder_b.R.T[1,1];
//   engine.cylinder4.Mounting.frame_b.R.T[1,1] = engine.cylinder5.CylinderInclination.frame_a.R.T[1,1];
//   engine.cylinder4.Mounting.frame_b.R.T[1,1] = engine.cylinder5.Mounting.frame_a.R.T[1,1];
//   engine.cylinder4.Mounting.frame_b.R.T[1,1] = engine.cylinder5.cylinder_a.R.T[1,1];
//   engine.cylinder4.Mounting.frame_b.R.T[1,2] = engine.cylinder4.cylinder_b.R.T[1,2];
//   engine.cylinder4.Mounting.frame_b.R.T[1,2] = engine.cylinder5.CylinderInclination.frame_a.R.T[1,2];
//   engine.cylinder4.Mounting.frame_b.R.T[1,2] = engine.cylinder5.Mounting.frame_a.R.T[1,2];
//   engine.cylinder4.Mounting.frame_b.R.T[1,2] = engine.cylinder5.cylinder_a.R.T[1,2];
//   engine.cylinder4.Mounting.frame_b.R.T[1,3] = engine.cylinder4.cylinder_b.R.T[1,3];
//   engine.cylinder4.Mounting.frame_b.R.T[1,3] = engine.cylinder5.CylinderInclination.frame_a.R.T[1,3];
//   engine.cylinder4.Mounting.frame_b.R.T[1,3] = engine.cylinder5.Mounting.frame_a.R.T[1,3];
//   engine.cylinder4.Mounting.frame_b.R.T[1,3] = engine.cylinder5.cylinder_a.R.T[1,3];
//   engine.cylinder4.Mounting.frame_b.R.T[2,1] = engine.cylinder4.cylinder_b.R.T[2,1];
//   engine.cylinder4.Mounting.frame_b.R.T[2,1] = engine.cylinder5.CylinderInclination.frame_a.R.T[2,1];
//   engine.cylinder4.Mounting.frame_b.R.T[2,1] = engine.cylinder5.Mounting.frame_a.R.T[2,1];
//   engine.cylinder4.Mounting.frame_b.R.T[2,1] = engine.cylinder5.cylinder_a.R.T[2,1];
//   engine.cylinder4.Mounting.frame_b.R.T[2,2] = engine.cylinder4.cylinder_b.R.T[2,2];
//   engine.cylinder4.Mounting.frame_b.R.T[2,2] = engine.cylinder5.CylinderInclination.frame_a.R.T[2,2];
//   engine.cylinder4.Mounting.frame_b.R.T[2,2] = engine.cylinder5.Mounting.frame_a.R.T[2,2];
//   engine.cylinder4.Mounting.frame_b.R.T[2,2] = engine.cylinder5.cylinder_a.R.T[2,2];
//   engine.cylinder4.Mounting.frame_b.R.T[2,3] = engine.cylinder4.cylinder_b.R.T[2,3];
//   engine.cylinder4.Mounting.frame_b.R.T[2,3] = engine.cylinder5.CylinderInclination.frame_a.R.T[2,3];
//   engine.cylinder4.Mounting.frame_b.R.T[2,3] = engine.cylinder5.Mounting.frame_a.R.T[2,3];
//   engine.cylinder4.Mounting.frame_b.R.T[2,3] = engine.cylinder5.cylinder_a.R.T[2,3];
//   engine.cylinder4.Mounting.frame_b.R.T[3,1] = engine.cylinder4.cylinder_b.R.T[3,1];
//   engine.cylinder4.Mounting.frame_b.R.T[3,1] = engine.cylinder5.CylinderInclination.frame_a.R.T[3,1];
//   engine.cylinder4.Mounting.frame_b.R.T[3,1] = engine.cylinder5.Mounting.frame_a.R.T[3,1];
//   engine.cylinder4.Mounting.frame_b.R.T[3,1] = engine.cylinder5.cylinder_a.R.T[3,1];
//   engine.cylinder4.Mounting.frame_b.R.T[3,2] = engine.cylinder4.cylinder_b.R.T[3,2];
//   engine.cylinder4.Mounting.frame_b.R.T[3,2] = engine.cylinder5.CylinderInclination.frame_a.R.T[3,2];
//   engine.cylinder4.Mounting.frame_b.R.T[3,2] = engine.cylinder5.Mounting.frame_a.R.T[3,2];
//   engine.cylinder4.Mounting.frame_b.R.T[3,2] = engine.cylinder5.cylinder_a.R.T[3,2];
//   engine.cylinder4.Mounting.frame_b.R.T[3,3] = engine.cylinder4.cylinder_b.R.T[3,3];
//   engine.cylinder4.Mounting.frame_b.R.T[3,3] = engine.cylinder5.CylinderInclination.frame_a.R.T[3,3];
//   engine.cylinder4.Mounting.frame_b.R.T[3,3] = engine.cylinder5.Mounting.frame_a.R.T[3,3];
//   engine.cylinder4.Mounting.frame_b.R.T[3,3] = engine.cylinder5.cylinder_a.R.T[3,3];
//   engine.cylinder4.Mounting.frame_b.r_0[1] = engine.cylinder4.cylinder_b.r_0[1];
//   engine.cylinder4.Mounting.frame_b.r_0[1] = engine.cylinder5.CylinderInclination.frame_a.r_0[1];
//   engine.cylinder4.Mounting.frame_b.r_0[1] = engine.cylinder5.Mounting.frame_a.r_0[1];
//   engine.cylinder4.Mounting.frame_b.r_0[1] = engine.cylinder5.cylinder_a.r_0[1];
//   engine.cylinder4.Mounting.frame_b.r_0[2] = engine.cylinder4.cylinder_b.r_0[2];
//   engine.cylinder4.Mounting.frame_b.r_0[2] = engine.cylinder5.CylinderInclination.frame_a.r_0[2];
//   engine.cylinder4.Mounting.frame_b.r_0[2] = engine.cylinder5.Mounting.frame_a.r_0[2];
//   engine.cylinder4.Mounting.frame_b.r_0[2] = engine.cylinder5.cylinder_a.r_0[2];
//   engine.cylinder4.Mounting.frame_b.r_0[3] = engine.cylinder4.cylinder_b.r_0[3];
//   engine.cylinder4.Mounting.frame_b.r_0[3] = engine.cylinder5.CylinderInclination.frame_a.r_0[3];
//   engine.cylinder4.Mounting.frame_b.r_0[3] = engine.cylinder5.Mounting.frame_a.r_0[3];
//   engine.cylinder4.Mounting.frame_b.r_0[3] = engine.cylinder5.cylinder_a.r_0[3];
//   engine.cylinder3.crank_b.t[1] + engine.cylinder4.crank_a.t[1] = 0.0;
//   engine.cylinder3.crank_b.t[2] + engine.cylinder4.crank_a.t[2] = 0.0;
//   engine.cylinder3.crank_b.t[3] + engine.cylinder4.crank_a.t[3] = 0.0;
//   engine.cylinder3.crank_b.f[1] + engine.cylinder4.crank_a.f[1] = 0.0;
//   engine.cylinder3.crank_b.f[2] + engine.cylinder4.crank_a.f[2] = 0.0;
//   engine.cylinder3.crank_b.f[3] + engine.cylinder4.crank_a.f[3] = 0.0;
//   engine.cylinder3.Crank.frame_b.R.w[1] = engine.cylinder3.crank_b.R.w[1];
//   engine.cylinder3.Crank.frame_b.R.w[1] = engine.cylinder4.Crank.frame_a.R.w[1];
//   engine.cylinder3.Crank.frame_b.R.w[1] = engine.cylinder4.CrankAngle.frame_a.R.w[1];
//   engine.cylinder3.Crank.frame_b.R.w[1] = engine.cylinder4.crank_a.R.w[1];
//   engine.cylinder3.Crank.frame_b.R.w[2] = engine.cylinder3.crank_b.R.w[2];
//   engine.cylinder3.Crank.frame_b.R.w[2] = engine.cylinder4.Crank.frame_a.R.w[2];
//   engine.cylinder3.Crank.frame_b.R.w[2] = engine.cylinder4.CrankAngle.frame_a.R.w[2];
//   engine.cylinder3.Crank.frame_b.R.w[2] = engine.cylinder4.crank_a.R.w[2];
//   engine.cylinder3.Crank.frame_b.R.w[3] = engine.cylinder3.crank_b.R.w[3];
//   engine.cylinder3.Crank.frame_b.R.w[3] = engine.cylinder4.Crank.frame_a.R.w[3];
//   engine.cylinder3.Crank.frame_b.R.w[3] = engine.cylinder4.CrankAngle.frame_a.R.w[3];
//   engine.cylinder3.Crank.frame_b.R.w[3] = engine.cylinder4.crank_a.R.w[3];
//   engine.cylinder3.Crank.frame_b.R.T[1,1] = engine.cylinder3.crank_b.R.T[1,1];
//   engine.cylinder3.Crank.frame_b.R.T[1,1] = engine.cylinder4.Crank.frame_a.R.T[1,1];
//   engine.cylinder3.Crank.frame_b.R.T[1,1] = engine.cylinder4.CrankAngle.frame_a.R.T[1,1];
//   engine.cylinder3.Crank.frame_b.R.T[1,1] = engine.cylinder4.crank_a.R.T[1,1];
//   engine.cylinder3.Crank.frame_b.R.T[1,2] = engine.cylinder3.crank_b.R.T[1,2];
//   engine.cylinder3.Crank.frame_b.R.T[1,2] = engine.cylinder4.Crank.frame_a.R.T[1,2];
//   engine.cylinder3.Crank.frame_b.R.T[1,2] = engine.cylinder4.CrankAngle.frame_a.R.T[1,2];
//   engine.cylinder3.Crank.frame_b.R.T[1,2] = engine.cylinder4.crank_a.R.T[1,2];
//   engine.cylinder3.Crank.frame_b.R.T[1,3] = engine.cylinder3.crank_b.R.T[1,3];
//   engine.cylinder3.Crank.frame_b.R.T[1,3] = engine.cylinder4.Crank.frame_a.R.T[1,3];
//   engine.cylinder3.Crank.frame_b.R.T[1,3] = engine.cylinder4.CrankAngle.frame_a.R.T[1,3];
//   engine.cylinder3.Crank.frame_b.R.T[1,3] = engine.cylinder4.crank_a.R.T[1,3];
//   engine.cylinder3.Crank.frame_b.R.T[2,1] = engine.cylinder3.crank_b.R.T[2,1];
//   engine.cylinder3.Crank.frame_b.R.T[2,1] = engine.cylinder4.Crank.frame_a.R.T[2,1];
//   engine.cylinder3.Crank.frame_b.R.T[2,1] = engine.cylinder4.CrankAngle.frame_a.R.T[2,1];
//   engine.cylinder3.Crank.frame_b.R.T[2,1] = engine.cylinder4.crank_a.R.T[2,1];
//   engine.cylinder3.Crank.frame_b.R.T[2,2] = engine.cylinder3.crank_b.R.T[2,2];
//   engine.cylinder3.Crank.frame_b.R.T[2,2] = engine.cylinder4.Crank.frame_a.R.T[2,2];
//   engine.cylinder3.Crank.frame_b.R.T[2,2] = engine.cylinder4.CrankAngle.frame_a.R.T[2,2];
//   engine.cylinder3.Crank.frame_b.R.T[2,2] = engine.cylinder4.crank_a.R.T[2,2];
//   engine.cylinder3.Crank.frame_b.R.T[2,3] = engine.cylinder3.crank_b.R.T[2,3];
//   engine.cylinder3.Crank.frame_b.R.T[2,3] = engine.cylinder4.Crank.frame_a.R.T[2,3];
//   engine.cylinder3.Crank.frame_b.R.T[2,3] = engine.cylinder4.CrankAngle.frame_a.R.T[2,3];
//   engine.cylinder3.Crank.frame_b.R.T[2,3] = engine.cylinder4.crank_a.R.T[2,3];
//   engine.cylinder3.Crank.frame_b.R.T[3,1] = engine.cylinder3.crank_b.R.T[3,1];
//   engine.cylinder3.Crank.frame_b.R.T[3,1] = engine.cylinder4.Crank.frame_a.R.T[3,1];
//   engine.cylinder3.Crank.frame_b.R.T[3,1] = engine.cylinder4.CrankAngle.frame_a.R.T[3,1];
//   engine.cylinder3.Crank.frame_b.R.T[3,1] = engine.cylinder4.crank_a.R.T[3,1];
//   engine.cylinder3.Crank.frame_b.R.T[3,2] = engine.cylinder3.crank_b.R.T[3,2];
//   engine.cylinder3.Crank.frame_b.R.T[3,2] = engine.cylinder4.Crank.frame_a.R.T[3,2];
//   engine.cylinder3.Crank.frame_b.R.T[3,2] = engine.cylinder4.CrankAngle.frame_a.R.T[3,2];
//   engine.cylinder3.Crank.frame_b.R.T[3,2] = engine.cylinder4.crank_a.R.T[3,2];
//   engine.cylinder3.Crank.frame_b.R.T[3,3] = engine.cylinder3.crank_b.R.T[3,3];
//   engine.cylinder3.Crank.frame_b.R.T[3,3] = engine.cylinder4.Crank.frame_a.R.T[3,3];
//   engine.cylinder3.Crank.frame_b.R.T[3,3] = engine.cylinder4.CrankAngle.frame_a.R.T[3,3];
//   engine.cylinder3.Crank.frame_b.R.T[3,3] = engine.cylinder4.crank_a.R.T[3,3];
//   engine.cylinder3.Crank.frame_b.r_0[1] = engine.cylinder3.crank_b.r_0[1];
//   engine.cylinder3.Crank.frame_b.r_0[1] = engine.cylinder4.Crank.frame_a.r_0[1];
//   engine.cylinder3.Crank.frame_b.r_0[1] = engine.cylinder4.CrankAngle.frame_a.r_0[1];
//   engine.cylinder3.Crank.frame_b.r_0[1] = engine.cylinder4.crank_a.r_0[1];
//   engine.cylinder3.Crank.frame_b.r_0[2] = engine.cylinder3.crank_b.r_0[2];
//   engine.cylinder3.Crank.frame_b.r_0[2] = engine.cylinder4.Crank.frame_a.r_0[2];
//   engine.cylinder3.Crank.frame_b.r_0[2] = engine.cylinder4.CrankAngle.frame_a.r_0[2];
//   engine.cylinder3.Crank.frame_b.r_0[2] = engine.cylinder4.crank_a.r_0[2];
//   engine.cylinder3.Crank.frame_b.r_0[3] = engine.cylinder3.crank_b.r_0[3];
//   engine.cylinder3.Crank.frame_b.r_0[3] = engine.cylinder4.Crank.frame_a.r_0[3];
//   engine.cylinder3.Crank.frame_b.r_0[3] = engine.cylinder4.CrankAngle.frame_a.r_0[3];
//   engine.cylinder3.Crank.frame_b.r_0[3] = engine.cylinder4.crank_a.r_0[3];
//   engine.cylinder3.cylinder_b.t[1] + engine.cylinder4.cylinder_a.t[1] = 0.0;
//   engine.cylinder3.cylinder_b.t[2] + engine.cylinder4.cylinder_a.t[2] = 0.0;
//   engine.cylinder3.cylinder_b.t[3] + engine.cylinder4.cylinder_a.t[3] = 0.0;
//   engine.cylinder3.cylinder_b.f[1] + engine.cylinder4.cylinder_a.f[1] = 0.0;
//   engine.cylinder3.cylinder_b.f[2] + engine.cylinder4.cylinder_a.f[2] = 0.0;
//   engine.cylinder3.cylinder_b.f[3] + engine.cylinder4.cylinder_a.f[3] = 0.0;
//   engine.cylinder3.Mounting.frame_b.R.w[1] = engine.cylinder3.cylinder_b.R.w[1];
//   engine.cylinder3.Mounting.frame_b.R.w[1] = engine.cylinder4.CylinderInclination.frame_a.R.w[1];
//   engine.cylinder3.Mounting.frame_b.R.w[1] = engine.cylinder4.Mounting.frame_a.R.w[1];
//   engine.cylinder3.Mounting.frame_b.R.w[1] = engine.cylinder4.cylinder_a.R.w[1];
//   engine.cylinder3.Mounting.frame_b.R.w[2] = engine.cylinder3.cylinder_b.R.w[2];
//   engine.cylinder3.Mounting.frame_b.R.w[2] = engine.cylinder4.CylinderInclination.frame_a.R.w[2];
//   engine.cylinder3.Mounting.frame_b.R.w[2] = engine.cylinder4.Mounting.frame_a.R.w[2];
//   engine.cylinder3.Mounting.frame_b.R.w[2] = engine.cylinder4.cylinder_a.R.w[2];
//   engine.cylinder3.Mounting.frame_b.R.w[3] = engine.cylinder3.cylinder_b.R.w[3];
//   engine.cylinder3.Mounting.frame_b.R.w[3] = engine.cylinder4.CylinderInclination.frame_a.R.w[3];
//   engine.cylinder3.Mounting.frame_b.R.w[3] = engine.cylinder4.Mounting.frame_a.R.w[3];
//   engine.cylinder3.Mounting.frame_b.R.w[3] = engine.cylinder4.cylinder_a.R.w[3];
//   engine.cylinder3.Mounting.frame_b.R.T[1,1] = engine.cylinder3.cylinder_b.R.T[1,1];
//   engine.cylinder3.Mounting.frame_b.R.T[1,1] = engine.cylinder4.CylinderInclination.frame_a.R.T[1,1];
//   engine.cylinder3.Mounting.frame_b.R.T[1,1] = engine.cylinder4.Mounting.frame_a.R.T[1,1];
//   engine.cylinder3.Mounting.frame_b.R.T[1,1] = engine.cylinder4.cylinder_a.R.T[1,1];
//   engine.cylinder3.Mounting.frame_b.R.T[1,2] = engine.cylinder3.cylinder_b.R.T[1,2];
//   engine.cylinder3.Mounting.frame_b.R.T[1,2] = engine.cylinder4.CylinderInclination.frame_a.R.T[1,2];
//   engine.cylinder3.Mounting.frame_b.R.T[1,2] = engine.cylinder4.Mounting.frame_a.R.T[1,2];
//   engine.cylinder3.Mounting.frame_b.R.T[1,2] = engine.cylinder4.cylinder_a.R.T[1,2];
//   engine.cylinder3.Mounting.frame_b.R.T[1,3] = engine.cylinder3.cylinder_b.R.T[1,3];
//   engine.cylinder3.Mounting.frame_b.R.T[1,3] = engine.cylinder4.CylinderInclination.frame_a.R.T[1,3];
//   engine.cylinder3.Mounting.frame_b.R.T[1,3] = engine.cylinder4.Mounting.frame_a.R.T[1,3];
//   engine.cylinder3.Mounting.frame_b.R.T[1,3] = engine.cylinder4.cylinder_a.R.T[1,3];
//   engine.cylinder3.Mounting.frame_b.R.T[2,1] = engine.cylinder3.cylinder_b.R.T[2,1];
//   engine.cylinder3.Mounting.frame_b.R.T[2,1] = engine.cylinder4.CylinderInclination.frame_a.R.T[2,1];
//   engine.cylinder3.Mounting.frame_b.R.T[2,1] = engine.cylinder4.Mounting.frame_a.R.T[2,1];
//   engine.cylinder3.Mounting.frame_b.R.T[2,1] = engine.cylinder4.cylinder_a.R.T[2,1];
//   engine.cylinder3.Mounting.frame_b.R.T[2,2] = engine.cylinder3.cylinder_b.R.T[2,2];
//   engine.cylinder3.Mounting.frame_b.R.T[2,2] = engine.cylinder4.CylinderInclination.frame_a.R.T[2,2];
//   engine.cylinder3.Mounting.frame_b.R.T[2,2] = engine.cylinder4.Mounting.frame_a.R.T[2,2];
//   engine.cylinder3.Mounting.frame_b.R.T[2,2] = engine.cylinder4.cylinder_a.R.T[2,2];
//   engine.cylinder3.Mounting.frame_b.R.T[2,3] = engine.cylinder3.cylinder_b.R.T[2,3];
//   engine.cylinder3.Mounting.frame_b.R.T[2,3] = engine.cylinder4.CylinderInclination.frame_a.R.T[2,3];
//   engine.cylinder3.Mounting.frame_b.R.T[2,3] = engine.cylinder4.Mounting.frame_a.R.T[2,3];
//   engine.cylinder3.Mounting.frame_b.R.T[2,3] = engine.cylinder4.cylinder_a.R.T[2,3];
//   engine.cylinder3.Mounting.frame_b.R.T[3,1] = engine.cylinder3.cylinder_b.R.T[3,1];
//   engine.cylinder3.Mounting.frame_b.R.T[3,1] = engine.cylinder4.CylinderInclination.frame_a.R.T[3,1];
//   engine.cylinder3.Mounting.frame_b.R.T[3,1] = engine.cylinder4.Mounting.frame_a.R.T[3,1];
//   engine.cylinder3.Mounting.frame_b.R.T[3,1] = engine.cylinder4.cylinder_a.R.T[3,1];
//   engine.cylinder3.Mounting.frame_b.R.T[3,2] = engine.cylinder3.cylinder_b.R.T[3,2];
//   engine.cylinder3.Mounting.frame_b.R.T[3,2] = engine.cylinder4.CylinderInclination.frame_a.R.T[3,2];
//   engine.cylinder3.Mounting.frame_b.R.T[3,2] = engine.cylinder4.Mounting.frame_a.R.T[3,2];
//   engine.cylinder3.Mounting.frame_b.R.T[3,2] = engine.cylinder4.cylinder_a.R.T[3,2];
//   engine.cylinder3.Mounting.frame_b.R.T[3,3] = engine.cylinder3.cylinder_b.R.T[3,3];
//   engine.cylinder3.Mounting.frame_b.R.T[3,3] = engine.cylinder4.CylinderInclination.frame_a.R.T[3,3];
//   engine.cylinder3.Mounting.frame_b.R.T[3,3] = engine.cylinder4.Mounting.frame_a.R.T[3,3];
//   engine.cylinder3.Mounting.frame_b.R.T[3,3] = engine.cylinder4.cylinder_a.R.T[3,3];
//   engine.cylinder3.Mounting.frame_b.r_0[1] = engine.cylinder3.cylinder_b.r_0[1];
//   engine.cylinder3.Mounting.frame_b.r_0[1] = engine.cylinder4.CylinderInclination.frame_a.r_0[1];
//   engine.cylinder3.Mounting.frame_b.r_0[1] = engine.cylinder4.Mounting.frame_a.r_0[1];
//   engine.cylinder3.Mounting.frame_b.r_0[1] = engine.cylinder4.cylinder_a.r_0[1];
//   engine.cylinder3.Mounting.frame_b.r_0[2] = engine.cylinder3.cylinder_b.r_0[2];
//   engine.cylinder3.Mounting.frame_b.r_0[2] = engine.cylinder4.CylinderInclination.frame_a.r_0[2];
//   engine.cylinder3.Mounting.frame_b.r_0[2] = engine.cylinder4.Mounting.frame_a.r_0[2];
//   engine.cylinder3.Mounting.frame_b.r_0[2] = engine.cylinder4.cylinder_a.r_0[2];
//   engine.cylinder3.Mounting.frame_b.r_0[3] = engine.cylinder3.cylinder_b.r_0[3];
//   engine.cylinder3.Mounting.frame_b.r_0[3] = engine.cylinder4.CylinderInclination.frame_a.r_0[3];
//   engine.cylinder3.Mounting.frame_b.r_0[3] = engine.cylinder4.Mounting.frame_a.r_0[3];
//   engine.cylinder3.Mounting.frame_b.r_0[3] = engine.cylinder4.cylinder_a.r_0[3];
//   engine.cylinder3.crank_a.t[1] + engine.cylinder2.crank_b.t[1] = 0.0;
//   engine.cylinder3.crank_a.t[2] + engine.cylinder2.crank_b.t[2] = 0.0;
//   engine.cylinder3.crank_a.t[3] + engine.cylinder2.crank_b.t[3] = 0.0;
//   engine.cylinder3.crank_a.f[1] + engine.cylinder2.crank_b.f[1] = 0.0;
//   engine.cylinder3.crank_a.f[2] + engine.cylinder2.crank_b.f[2] = 0.0;
//   engine.cylinder3.crank_a.f[3] + engine.cylinder2.crank_b.f[3] = 0.0;
//   engine.cylinder2.Crank.frame_b.R.w[1] = engine.cylinder2.crank_b.R.w[1];
//   engine.cylinder2.Crank.frame_b.R.w[1] = engine.cylinder3.Crank.frame_a.R.w[1];
//   engine.cylinder2.Crank.frame_b.R.w[1] = engine.cylinder3.CrankAngle.frame_a.R.w[1];
//   engine.cylinder2.Crank.frame_b.R.w[1] = engine.cylinder3.crank_a.R.w[1];
//   engine.cylinder2.Crank.frame_b.R.w[2] = engine.cylinder2.crank_b.R.w[2];
//   engine.cylinder2.Crank.frame_b.R.w[2] = engine.cylinder3.Crank.frame_a.R.w[2];
//   engine.cylinder2.Crank.frame_b.R.w[2] = engine.cylinder3.CrankAngle.frame_a.R.w[2];
//   engine.cylinder2.Crank.frame_b.R.w[2] = engine.cylinder3.crank_a.R.w[2];
//   engine.cylinder2.Crank.frame_b.R.w[3] = engine.cylinder2.crank_b.R.w[3];
//   engine.cylinder2.Crank.frame_b.R.w[3] = engine.cylinder3.Crank.frame_a.R.w[3];
//   engine.cylinder2.Crank.frame_b.R.w[3] = engine.cylinder3.CrankAngle.frame_a.R.w[3];
//   engine.cylinder2.Crank.frame_b.R.w[3] = engine.cylinder3.crank_a.R.w[3];
//   engine.cylinder2.Crank.frame_b.R.T[1,1] = engine.cylinder2.crank_b.R.T[1,1];
//   engine.cylinder2.Crank.frame_b.R.T[1,1] = engine.cylinder3.Crank.frame_a.R.T[1,1];
//   engine.cylinder2.Crank.frame_b.R.T[1,1] = engine.cylinder3.CrankAngle.frame_a.R.T[1,1];
//   engine.cylinder2.Crank.frame_b.R.T[1,1] = engine.cylinder3.crank_a.R.T[1,1];
//   engine.cylinder2.Crank.frame_b.R.T[1,2] = engine.cylinder2.crank_b.R.T[1,2];
//   engine.cylinder2.Crank.frame_b.R.T[1,2] = engine.cylinder3.Crank.frame_a.R.T[1,2];
//   engine.cylinder2.Crank.frame_b.R.T[1,2] = engine.cylinder3.CrankAngle.frame_a.R.T[1,2];
//   engine.cylinder2.Crank.frame_b.R.T[1,2] = engine.cylinder3.crank_a.R.T[1,2];
//   engine.cylinder2.Crank.frame_b.R.T[1,3] = engine.cylinder2.crank_b.R.T[1,3];
//   engine.cylinder2.Crank.frame_b.R.T[1,3] = engine.cylinder3.Crank.frame_a.R.T[1,3];
//   engine.cylinder2.Crank.frame_b.R.T[1,3] = engine.cylinder3.CrankAngle.frame_a.R.T[1,3];
//   engine.cylinder2.Crank.frame_b.R.T[1,3] = engine.cylinder3.crank_a.R.T[1,3];
//   engine.cylinder2.Crank.frame_b.R.T[2,1] = engine.cylinder2.crank_b.R.T[2,1];
//   engine.cylinder2.Crank.frame_b.R.T[2,1] = engine.cylinder3.Crank.frame_a.R.T[2,1];
//   engine.cylinder2.Crank.frame_b.R.T[2,1] = engine.cylinder3.CrankAngle.frame_a.R.T[2,1];
//   engine.cylinder2.Crank.frame_b.R.T[2,1] = engine.cylinder3.crank_a.R.T[2,1];
//   engine.cylinder2.Crank.frame_b.R.T[2,2] = engine.cylinder2.crank_b.R.T[2,2];
//   engine.cylinder2.Crank.frame_b.R.T[2,2] = engine.cylinder3.Crank.frame_a.R.T[2,2];
//   engine.cylinder2.Crank.frame_b.R.T[2,2] = engine.cylinder3.CrankAngle.frame_a.R.T[2,2];
//   engine.cylinder2.Crank.frame_b.R.T[2,2] = engine.cylinder3.crank_a.R.T[2,2];
//   engine.cylinder2.Crank.frame_b.R.T[2,3] = engine.cylinder2.crank_b.R.T[2,3];
//   engine.cylinder2.Crank.frame_b.R.T[2,3] = engine.cylinder3.Crank.frame_a.R.T[2,3];
//   engine.cylinder2.Crank.frame_b.R.T[2,3] = engine.cylinder3.CrankAngle.frame_a.R.T[2,3];
//   engine.cylinder2.Crank.frame_b.R.T[2,3] = engine.cylinder3.crank_a.R.T[2,3];
//   engine.cylinder2.Crank.frame_b.R.T[3,1] = engine.cylinder2.crank_b.R.T[3,1];
//   engine.cylinder2.Crank.frame_b.R.T[3,1] = engine.cylinder3.Crank.frame_a.R.T[3,1];
//   engine.cylinder2.Crank.frame_b.R.T[3,1] = engine.cylinder3.CrankAngle.frame_a.R.T[3,1];
//   engine.cylinder2.Crank.frame_b.R.T[3,1] = engine.cylinder3.crank_a.R.T[3,1];
//   engine.cylinder2.Crank.frame_b.R.T[3,2] = engine.cylinder2.crank_b.R.T[3,2];
//   engine.cylinder2.Crank.frame_b.R.T[3,2] = engine.cylinder3.Crank.frame_a.R.T[3,2];
//   engine.cylinder2.Crank.frame_b.R.T[3,2] = engine.cylinder3.CrankAngle.frame_a.R.T[3,2];
//   engine.cylinder2.Crank.frame_b.R.T[3,2] = engine.cylinder3.crank_a.R.T[3,2];
//   engine.cylinder2.Crank.frame_b.R.T[3,3] = engine.cylinder2.crank_b.R.T[3,3];
//   engine.cylinder2.Crank.frame_b.R.T[3,3] = engine.cylinder3.Crank.frame_a.R.T[3,3];
//   engine.cylinder2.Crank.frame_b.R.T[3,3] = engine.cylinder3.CrankAngle.frame_a.R.T[3,3];
//   engine.cylinder2.Crank.frame_b.R.T[3,3] = engine.cylinder3.crank_a.R.T[3,3];
//   engine.cylinder2.Crank.frame_b.r_0[1] = engine.cylinder2.crank_b.r_0[1];
//   engine.cylinder2.Crank.frame_b.r_0[1] = engine.cylinder3.Crank.frame_a.r_0[1];
//   engine.cylinder2.Crank.frame_b.r_0[1] = engine.cylinder3.CrankAngle.frame_a.r_0[1];
//   engine.cylinder2.Crank.frame_b.r_0[1] = engine.cylinder3.crank_a.r_0[1];
//   engine.cylinder2.Crank.frame_b.r_0[2] = engine.cylinder2.crank_b.r_0[2];
//   engine.cylinder2.Crank.frame_b.r_0[2] = engine.cylinder3.Crank.frame_a.r_0[2];
//   engine.cylinder2.Crank.frame_b.r_0[2] = engine.cylinder3.CrankAngle.frame_a.r_0[2];
//   engine.cylinder2.Crank.frame_b.r_0[2] = engine.cylinder3.crank_a.r_0[2];
//   engine.cylinder2.Crank.frame_b.r_0[3] = engine.cylinder2.crank_b.r_0[3];
//   engine.cylinder2.Crank.frame_b.r_0[3] = engine.cylinder3.Crank.frame_a.r_0[3];
//   engine.cylinder2.Crank.frame_b.r_0[3] = engine.cylinder3.CrankAngle.frame_a.r_0[3];
//   engine.cylinder2.Crank.frame_b.r_0[3] = engine.cylinder3.crank_a.r_0[3];
//   engine.cylinder3.cylinder_a.t[1] + engine.cylinder2.cylinder_b.t[1] = 0.0;
//   engine.cylinder3.cylinder_a.t[2] + engine.cylinder2.cylinder_b.t[2] = 0.0;
//   engine.cylinder3.cylinder_a.t[3] + engine.cylinder2.cylinder_b.t[3] = 0.0;
//   engine.cylinder3.cylinder_a.f[1] + engine.cylinder2.cylinder_b.f[1] = 0.0;
//   engine.cylinder3.cylinder_a.f[2] + engine.cylinder2.cylinder_b.f[2] = 0.0;
//   engine.cylinder3.cylinder_a.f[3] + engine.cylinder2.cylinder_b.f[3] = 0.0;
//   engine.cylinder2.Mounting.frame_b.R.w[1] = engine.cylinder2.cylinder_b.R.w[1];
//   engine.cylinder2.Mounting.frame_b.R.w[1] = engine.cylinder3.CylinderInclination.frame_a.R.w[1];
//   engine.cylinder2.Mounting.frame_b.R.w[1] = engine.cylinder3.Mounting.frame_a.R.w[1];
//   engine.cylinder2.Mounting.frame_b.R.w[1] = engine.cylinder3.cylinder_a.R.w[1];
//   engine.cylinder2.Mounting.frame_b.R.w[2] = engine.cylinder2.cylinder_b.R.w[2];
//   engine.cylinder2.Mounting.frame_b.R.w[2] = engine.cylinder3.CylinderInclination.frame_a.R.w[2];
//   engine.cylinder2.Mounting.frame_b.R.w[2] = engine.cylinder3.Mounting.frame_a.R.w[2];
//   engine.cylinder2.Mounting.frame_b.R.w[2] = engine.cylinder3.cylinder_a.R.w[2];
//   engine.cylinder2.Mounting.frame_b.R.w[3] = engine.cylinder2.cylinder_b.R.w[3];
//   engine.cylinder2.Mounting.frame_b.R.w[3] = engine.cylinder3.CylinderInclination.frame_a.R.w[3];
//   engine.cylinder2.Mounting.frame_b.R.w[3] = engine.cylinder3.Mounting.frame_a.R.w[3];
//   engine.cylinder2.Mounting.frame_b.R.w[3] = engine.cylinder3.cylinder_a.R.w[3];
//   engine.cylinder2.Mounting.frame_b.R.T[1,1] = engine.cylinder2.cylinder_b.R.T[1,1];
//   engine.cylinder2.Mounting.frame_b.R.T[1,1] = engine.cylinder3.CylinderInclination.frame_a.R.T[1,1];
//   engine.cylinder2.Mounting.frame_b.R.T[1,1] = engine.cylinder3.Mounting.frame_a.R.T[1,1];
//   engine.cylinder2.Mounting.frame_b.R.T[1,1] = engine.cylinder3.cylinder_a.R.T[1,1];
//   engine.cylinder2.Mounting.frame_b.R.T[1,2] = engine.cylinder2.cylinder_b.R.T[1,2];
//   engine.cylinder2.Mounting.frame_b.R.T[1,2] = engine.cylinder3.CylinderInclination.frame_a.R.T[1,2];
//   engine.cylinder2.Mounting.frame_b.R.T[1,2] = engine.cylinder3.Mounting.frame_a.R.T[1,2];
//   engine.cylinder2.Mounting.frame_b.R.T[1,2] = engine.cylinder3.cylinder_a.R.T[1,2];
//   engine.cylinder2.Mounting.frame_b.R.T[1,3] = engine.cylinder2.cylinder_b.R.T[1,3];
//   engine.cylinder2.Mounting.frame_b.R.T[1,3] = engine.cylinder3.CylinderInclination.frame_a.R.T[1,3];
//   engine.cylinder2.Mounting.frame_b.R.T[1,3] = engine.cylinder3.Mounting.frame_a.R.T[1,3];
//   engine.cylinder2.Mounting.frame_b.R.T[1,3] = engine.cylinder3.cylinder_a.R.T[1,3];
//   engine.cylinder2.Mounting.frame_b.R.T[2,1] = engine.cylinder2.cylinder_b.R.T[2,1];
//   engine.cylinder2.Mounting.frame_b.R.T[2,1] = engine.cylinder3.CylinderInclination.frame_a.R.T[2,1];
//   engine.cylinder2.Mounting.frame_b.R.T[2,1] = engine.cylinder3.Mounting.frame_a.R.T[2,1];
//   engine.cylinder2.Mounting.frame_b.R.T[2,1] = engine.cylinder3.cylinder_a.R.T[2,1];
//   engine.cylinder2.Mounting.frame_b.R.T[2,2] = engine.cylinder2.cylinder_b.R.T[2,2];
//   engine.cylinder2.Mounting.frame_b.R.T[2,2] = engine.cylinder3.CylinderInclination.frame_a.R.T[2,2];
//   engine.cylinder2.Mounting.frame_b.R.T[2,2] = engine.cylinder3.Mounting.frame_a.R.T[2,2];
//   engine.cylinder2.Mounting.frame_b.R.T[2,2] = engine.cylinder3.cylinder_a.R.T[2,2];
//   engine.cylinder2.Mounting.frame_b.R.T[2,3] = engine.cylinder2.cylinder_b.R.T[2,3];
//   engine.cylinder2.Mounting.frame_b.R.T[2,3] = engine.cylinder3.CylinderInclination.frame_a.R.T[2,3];
//   engine.cylinder2.Mounting.frame_b.R.T[2,3] = engine.cylinder3.Mounting.frame_a.R.T[2,3];
//   engine.cylinder2.Mounting.frame_b.R.T[2,3] = engine.cylinder3.cylinder_a.R.T[2,3];
//   engine.cylinder2.Mounting.frame_b.R.T[3,1] = engine.cylinder2.cylinder_b.R.T[3,1];
//   engine.cylinder2.Mounting.frame_b.R.T[3,1] = engine.cylinder3.CylinderInclination.frame_a.R.T[3,1];
//   engine.cylinder2.Mounting.frame_b.R.T[3,1] = engine.cylinder3.Mounting.frame_a.R.T[3,1];
//   engine.cylinder2.Mounting.frame_b.R.T[3,1] = engine.cylinder3.cylinder_a.R.T[3,1];
//   engine.cylinder2.Mounting.frame_b.R.T[3,2] = engine.cylinder2.cylinder_b.R.T[3,2];
//   engine.cylinder2.Mounting.frame_b.R.T[3,2] = engine.cylinder3.CylinderInclination.frame_a.R.T[3,2];
//   engine.cylinder2.Mounting.frame_b.R.T[3,2] = engine.cylinder3.Mounting.frame_a.R.T[3,2];
//   engine.cylinder2.Mounting.frame_b.R.T[3,2] = engine.cylinder3.cylinder_a.R.T[3,2];
//   engine.cylinder2.Mounting.frame_b.R.T[3,3] = engine.cylinder2.cylinder_b.R.T[3,3];
//   engine.cylinder2.Mounting.frame_b.R.T[3,3] = engine.cylinder3.CylinderInclination.frame_a.R.T[3,3];
//   engine.cylinder2.Mounting.frame_b.R.T[3,3] = engine.cylinder3.Mounting.frame_a.R.T[3,3];
//   engine.cylinder2.Mounting.frame_b.R.T[3,3] = engine.cylinder3.cylinder_a.R.T[3,3];
//   engine.cylinder2.Mounting.frame_b.r_0[1] = engine.cylinder2.cylinder_b.r_0[1];
//   engine.cylinder2.Mounting.frame_b.r_0[1] = engine.cylinder3.CylinderInclination.frame_a.r_0[1];
//   engine.cylinder2.Mounting.frame_b.r_0[1] = engine.cylinder3.Mounting.frame_a.r_0[1];
//   engine.cylinder2.Mounting.frame_b.r_0[1] = engine.cylinder3.cylinder_a.r_0[1];
//   engine.cylinder2.Mounting.frame_b.r_0[2] = engine.cylinder2.cylinder_b.r_0[2];
//   engine.cylinder2.Mounting.frame_b.r_0[2] = engine.cylinder3.CylinderInclination.frame_a.r_0[2];
//   engine.cylinder2.Mounting.frame_b.r_0[2] = engine.cylinder3.Mounting.frame_a.r_0[2];
//   engine.cylinder2.Mounting.frame_b.r_0[2] = engine.cylinder3.cylinder_a.r_0[2];
//   engine.cylinder2.Mounting.frame_b.r_0[3] = engine.cylinder2.cylinder_b.r_0[3];
//   engine.cylinder2.Mounting.frame_b.r_0[3] = engine.cylinder3.CylinderInclination.frame_a.r_0[3];
//   engine.cylinder2.Mounting.frame_b.r_0[3] = engine.cylinder3.Mounting.frame_a.r_0[3];
//   engine.cylinder2.Mounting.frame_b.r_0[3] = engine.cylinder3.cylinder_a.r_0[3];
//   engine.cylinder2.cylinder_a.t[1] + engine.cylinder1.cylinder_b.t[1] = 0.0;
//   engine.cylinder2.cylinder_a.t[2] + engine.cylinder1.cylinder_b.t[2] = 0.0;
//   engine.cylinder2.cylinder_a.t[3] + engine.cylinder1.cylinder_b.t[3] = 0.0;
//   engine.cylinder2.cylinder_a.f[1] + engine.cylinder1.cylinder_b.f[1] = 0.0;
//   engine.cylinder2.cylinder_a.f[2] + engine.cylinder1.cylinder_b.f[2] = 0.0;
//   engine.cylinder2.cylinder_a.f[3] + engine.cylinder1.cylinder_b.f[3] = 0.0;
//   engine.cylinder1.Mounting.frame_b.R.w[1] = engine.cylinder1.cylinder_b.R.w[1];
//   engine.cylinder1.Mounting.frame_b.R.w[1] = engine.cylinder2.CylinderInclination.frame_a.R.w[1];
//   engine.cylinder1.Mounting.frame_b.R.w[1] = engine.cylinder2.Mounting.frame_a.R.w[1];
//   engine.cylinder1.Mounting.frame_b.R.w[1] = engine.cylinder2.cylinder_a.R.w[1];
//   engine.cylinder1.Mounting.frame_b.R.w[2] = engine.cylinder1.cylinder_b.R.w[2];
//   engine.cylinder1.Mounting.frame_b.R.w[2] = engine.cylinder2.CylinderInclination.frame_a.R.w[2];
//   engine.cylinder1.Mounting.frame_b.R.w[2] = engine.cylinder2.Mounting.frame_a.R.w[2];
//   engine.cylinder1.Mounting.frame_b.R.w[2] = engine.cylinder2.cylinder_a.R.w[2];
//   engine.cylinder1.Mounting.frame_b.R.w[3] = engine.cylinder1.cylinder_b.R.w[3];
//   engine.cylinder1.Mounting.frame_b.R.w[3] = engine.cylinder2.CylinderInclination.frame_a.R.w[3];
//   engine.cylinder1.Mounting.frame_b.R.w[3] = engine.cylinder2.Mounting.frame_a.R.w[3];
//   engine.cylinder1.Mounting.frame_b.R.w[3] = engine.cylinder2.cylinder_a.R.w[3];
//   engine.cylinder1.Mounting.frame_b.R.T[1,1] = engine.cylinder1.cylinder_b.R.T[1,1];
//   engine.cylinder1.Mounting.frame_b.R.T[1,1] = engine.cylinder2.CylinderInclination.frame_a.R.T[1,1];
//   engine.cylinder1.Mounting.frame_b.R.T[1,1] = engine.cylinder2.Mounting.frame_a.R.T[1,1];
//   engine.cylinder1.Mounting.frame_b.R.T[1,1] = engine.cylinder2.cylinder_a.R.T[1,1];
//   engine.cylinder1.Mounting.frame_b.R.T[1,2] = engine.cylinder1.cylinder_b.R.T[1,2];
//   engine.cylinder1.Mounting.frame_b.R.T[1,2] = engine.cylinder2.CylinderInclination.frame_a.R.T[1,2];
//   engine.cylinder1.Mounting.frame_b.R.T[1,2] = engine.cylinder2.Mounting.frame_a.R.T[1,2];
//   engine.cylinder1.Mounting.frame_b.R.T[1,2] = engine.cylinder2.cylinder_a.R.T[1,2];
//   engine.cylinder1.Mounting.frame_b.R.T[1,3] = engine.cylinder1.cylinder_b.R.T[1,3];
//   engine.cylinder1.Mounting.frame_b.R.T[1,3] = engine.cylinder2.CylinderInclination.frame_a.R.T[1,3];
//   engine.cylinder1.Mounting.frame_b.R.T[1,3] = engine.cylinder2.Mounting.frame_a.R.T[1,3];
//   engine.cylinder1.Mounting.frame_b.R.T[1,3] = engine.cylinder2.cylinder_a.R.T[1,3];
//   engine.cylinder1.Mounting.frame_b.R.T[2,1] = engine.cylinder1.cylinder_b.R.T[2,1];
//   engine.cylinder1.Mounting.frame_b.R.T[2,1] = engine.cylinder2.CylinderInclination.frame_a.R.T[2,1];
//   engine.cylinder1.Mounting.frame_b.R.T[2,1] = engine.cylinder2.Mounting.frame_a.R.T[2,1];
//   engine.cylinder1.Mounting.frame_b.R.T[2,1] = engine.cylinder2.cylinder_a.R.T[2,1];
//   engine.cylinder1.Mounting.frame_b.R.T[2,2] = engine.cylinder1.cylinder_b.R.T[2,2];
//   engine.cylinder1.Mounting.frame_b.R.T[2,2] = engine.cylinder2.CylinderInclination.frame_a.R.T[2,2];
//   engine.cylinder1.Mounting.frame_b.R.T[2,2] = engine.cylinder2.Mounting.frame_a.R.T[2,2];
//   engine.cylinder1.Mounting.frame_b.R.T[2,2] = engine.cylinder2.cylinder_a.R.T[2,2];
//   engine.cylinder1.Mounting.frame_b.R.T[2,3] = engine.cylinder1.cylinder_b.R.T[2,3];
//   engine.cylinder1.Mounting.frame_b.R.T[2,3] = engine.cylinder2.CylinderInclination.frame_a.R.T[2,3];
//   engine.cylinder1.Mounting.frame_b.R.T[2,3] = engine.cylinder2.Mounting.frame_a.R.T[2,3];
//   engine.cylinder1.Mounting.frame_b.R.T[2,3] = engine.cylinder2.cylinder_a.R.T[2,3];
//   engine.cylinder1.Mounting.frame_b.R.T[3,1] = engine.cylinder1.cylinder_b.R.T[3,1];
//   engine.cylinder1.Mounting.frame_b.R.T[3,1] = engine.cylinder2.CylinderInclination.frame_a.R.T[3,1];
//   engine.cylinder1.Mounting.frame_b.R.T[3,1] = engine.cylinder2.Mounting.frame_a.R.T[3,1];
//   engine.cylinder1.Mounting.frame_b.R.T[3,1] = engine.cylinder2.cylinder_a.R.T[3,1];
//   engine.cylinder1.Mounting.frame_b.R.T[3,2] = engine.cylinder1.cylinder_b.R.T[3,2];
//   engine.cylinder1.Mounting.frame_b.R.T[3,2] = engine.cylinder2.CylinderInclination.frame_a.R.T[3,2];
//   engine.cylinder1.Mounting.frame_b.R.T[3,2] = engine.cylinder2.Mounting.frame_a.R.T[3,2];
//   engine.cylinder1.Mounting.frame_b.R.T[3,2] = engine.cylinder2.cylinder_a.R.T[3,2];
//   engine.cylinder1.Mounting.frame_b.R.T[3,3] = engine.cylinder1.cylinder_b.R.T[3,3];
//   engine.cylinder1.Mounting.frame_b.R.T[3,3] = engine.cylinder2.CylinderInclination.frame_a.R.T[3,3];
//   engine.cylinder1.Mounting.frame_b.R.T[3,3] = engine.cylinder2.Mounting.frame_a.R.T[3,3];
//   engine.cylinder1.Mounting.frame_b.R.T[3,3] = engine.cylinder2.cylinder_a.R.T[3,3];
//   engine.cylinder1.Mounting.frame_b.r_0[1] = engine.cylinder1.cylinder_b.r_0[1];
//   engine.cylinder1.Mounting.frame_b.r_0[1] = engine.cylinder2.CylinderInclination.frame_a.r_0[1];
//   engine.cylinder1.Mounting.frame_b.r_0[1] = engine.cylinder2.Mounting.frame_a.r_0[1];
//   engine.cylinder1.Mounting.frame_b.r_0[1] = engine.cylinder2.cylinder_a.r_0[1];
//   engine.cylinder1.Mounting.frame_b.r_0[2] = engine.cylinder1.cylinder_b.r_0[2];
//   engine.cylinder1.Mounting.frame_b.r_0[2] = engine.cylinder2.CylinderInclination.frame_a.r_0[2];
//   engine.cylinder1.Mounting.frame_b.r_0[2] = engine.cylinder2.Mounting.frame_a.r_0[2];
//   engine.cylinder1.Mounting.frame_b.r_0[2] = engine.cylinder2.cylinder_a.r_0[2];
//   engine.cylinder1.Mounting.frame_b.r_0[3] = engine.cylinder1.cylinder_b.r_0[3];
//   engine.cylinder1.Mounting.frame_b.r_0[3] = engine.cylinder2.CylinderInclination.frame_a.r_0[3];
//   engine.cylinder1.Mounting.frame_b.r_0[3] = engine.cylinder2.Mounting.frame_a.r_0[3];
//   engine.cylinder1.Mounting.frame_b.r_0[3] = engine.cylinder2.cylinder_a.r_0[3];
//   engine.cylinder1.crank_b.t[1] + engine.cylinder2.crank_a.t[1] = 0.0;
//   engine.cylinder1.crank_b.t[2] + engine.cylinder2.crank_a.t[2] = 0.0;
//   engine.cylinder1.crank_b.t[3] + engine.cylinder2.crank_a.t[3] = 0.0;
//   engine.cylinder1.crank_b.f[1] + engine.cylinder2.crank_a.f[1] = 0.0;
//   engine.cylinder1.crank_b.f[2] + engine.cylinder2.crank_a.f[2] = 0.0;
//   engine.cylinder1.crank_b.f[3] + engine.cylinder2.crank_a.f[3] = 0.0;
//   engine.cylinder1.Crank.frame_b.R.w[1] = engine.cylinder1.crank_b.R.w[1];
//   engine.cylinder1.Crank.frame_b.R.w[1] = engine.cylinder2.Crank.frame_a.R.w[1];
//   engine.cylinder1.Crank.frame_b.R.w[1] = engine.cylinder2.CrankAngle.frame_a.R.w[1];
//   engine.cylinder1.Crank.frame_b.R.w[1] = engine.cylinder2.crank_a.R.w[1];
//   engine.cylinder1.Crank.frame_b.R.w[2] = engine.cylinder1.crank_b.R.w[2];
//   engine.cylinder1.Crank.frame_b.R.w[2] = engine.cylinder2.Crank.frame_a.R.w[2];
//   engine.cylinder1.Crank.frame_b.R.w[2] = engine.cylinder2.CrankAngle.frame_a.R.w[2];
//   engine.cylinder1.Crank.frame_b.R.w[2] = engine.cylinder2.crank_a.R.w[2];
//   engine.cylinder1.Crank.frame_b.R.w[3] = engine.cylinder1.crank_b.R.w[3];
//   engine.cylinder1.Crank.frame_b.R.w[3] = engine.cylinder2.Crank.frame_a.R.w[3];
//   engine.cylinder1.Crank.frame_b.R.w[3] = engine.cylinder2.CrankAngle.frame_a.R.w[3];
//   engine.cylinder1.Crank.frame_b.R.w[3] = engine.cylinder2.crank_a.R.w[3];
//   engine.cylinder1.Crank.frame_b.R.T[1,1] = engine.cylinder1.crank_b.R.T[1,1];
//   engine.cylinder1.Crank.frame_b.R.T[1,1] = engine.cylinder2.Crank.frame_a.R.T[1,1];
//   engine.cylinder1.Crank.frame_b.R.T[1,1] = engine.cylinder2.CrankAngle.frame_a.R.T[1,1];
//   engine.cylinder1.Crank.frame_b.R.T[1,1] = engine.cylinder2.crank_a.R.T[1,1];
//   engine.cylinder1.Crank.frame_b.R.T[1,2] = engine.cylinder1.crank_b.R.T[1,2];
//   engine.cylinder1.Crank.frame_b.R.T[1,2] = engine.cylinder2.Crank.frame_a.R.T[1,2];
//   engine.cylinder1.Crank.frame_b.R.T[1,2] = engine.cylinder2.CrankAngle.frame_a.R.T[1,2];
//   engine.cylinder1.Crank.frame_b.R.T[1,2] = engine.cylinder2.crank_a.R.T[1,2];
//   engine.cylinder1.Crank.frame_b.R.T[1,3] = engine.cylinder1.crank_b.R.T[1,3];
//   engine.cylinder1.Crank.frame_b.R.T[1,3] = engine.cylinder2.Crank.frame_a.R.T[1,3];
//   engine.cylinder1.Crank.frame_b.R.T[1,3] = engine.cylinder2.CrankAngle.frame_a.R.T[1,3];
//   engine.cylinder1.Crank.frame_b.R.T[1,3] = engine.cylinder2.crank_a.R.T[1,3];
//   engine.cylinder1.Crank.frame_b.R.T[2,1] = engine.cylinder1.crank_b.R.T[2,1];
//   engine.cylinder1.Crank.frame_b.R.T[2,1] = engine.cylinder2.Crank.frame_a.R.T[2,1];
//   engine.cylinder1.Crank.frame_b.R.T[2,1] = engine.cylinder2.CrankAngle.frame_a.R.T[2,1];
//   engine.cylinder1.Crank.frame_b.R.T[2,1] = engine.cylinder2.crank_a.R.T[2,1];
//   engine.cylinder1.Crank.frame_b.R.T[2,2] = engine.cylinder1.crank_b.R.T[2,2];
//   engine.cylinder1.Crank.frame_b.R.T[2,2] = engine.cylinder2.Crank.frame_a.R.T[2,2];
//   engine.cylinder1.Crank.frame_b.R.T[2,2] = engine.cylinder2.CrankAngle.frame_a.R.T[2,2];
//   engine.cylinder1.Crank.frame_b.R.T[2,2] = engine.cylinder2.crank_a.R.T[2,2];
//   engine.cylinder1.Crank.frame_b.R.T[2,3] = engine.cylinder1.crank_b.R.T[2,3];
//   engine.cylinder1.Crank.frame_b.R.T[2,3] = engine.cylinder2.Crank.frame_a.R.T[2,3];
//   engine.cylinder1.Crank.frame_b.R.T[2,3] = engine.cylinder2.CrankAngle.frame_a.R.T[2,3];
//   engine.cylinder1.Crank.frame_b.R.T[2,3] = engine.cylinder2.crank_a.R.T[2,3];
//   engine.cylinder1.Crank.frame_b.R.T[3,1] = engine.cylinder1.crank_b.R.T[3,1];
//   engine.cylinder1.Crank.frame_b.R.T[3,1] = engine.cylinder2.Crank.frame_a.R.T[3,1];
//   engine.cylinder1.Crank.frame_b.R.T[3,1] = engine.cylinder2.CrankAngle.frame_a.R.T[3,1];
//   engine.cylinder1.Crank.frame_b.R.T[3,1] = engine.cylinder2.crank_a.R.T[3,1];
//   engine.cylinder1.Crank.frame_b.R.T[3,2] = engine.cylinder1.crank_b.R.T[3,2];
//   engine.cylinder1.Crank.frame_b.R.T[3,2] = engine.cylinder2.Crank.frame_a.R.T[3,2];
//   engine.cylinder1.Crank.frame_b.R.T[3,2] = engine.cylinder2.CrankAngle.frame_a.R.T[3,2];
//   engine.cylinder1.Crank.frame_b.R.T[3,2] = engine.cylinder2.crank_a.R.T[3,2];
//   engine.cylinder1.Crank.frame_b.R.T[3,3] = engine.cylinder1.crank_b.R.T[3,3];
//   engine.cylinder1.Crank.frame_b.R.T[3,3] = engine.cylinder2.Crank.frame_a.R.T[3,3];
//   engine.cylinder1.Crank.frame_b.R.T[3,3] = engine.cylinder2.CrankAngle.frame_a.R.T[3,3];
//   engine.cylinder1.Crank.frame_b.R.T[3,3] = engine.cylinder2.crank_a.R.T[3,3];
//   engine.cylinder1.Crank.frame_b.r_0[1] = engine.cylinder1.crank_b.r_0[1];
//   engine.cylinder1.Crank.frame_b.r_0[1] = engine.cylinder2.Crank.frame_a.r_0[1];
//   engine.cylinder1.Crank.frame_b.r_0[1] = engine.cylinder2.CrankAngle.frame_a.r_0[1];
//   engine.cylinder1.Crank.frame_b.r_0[1] = engine.cylinder2.crank_a.r_0[1];
//   engine.cylinder1.Crank.frame_b.r_0[2] = engine.cylinder1.crank_b.r_0[2];
//   engine.cylinder1.Crank.frame_b.r_0[2] = engine.cylinder2.Crank.frame_a.r_0[2];
//   engine.cylinder1.Crank.frame_b.r_0[2] = engine.cylinder2.CrankAngle.frame_a.r_0[2];
//   engine.cylinder1.Crank.frame_b.r_0[2] = engine.cylinder2.crank_a.r_0[2];
//   engine.cylinder1.Crank.frame_b.r_0[3] = engine.cylinder1.crank_b.r_0[3];
//   engine.cylinder1.Crank.frame_b.r_0[3] = engine.cylinder2.Crank.frame_a.r_0[3];
//   engine.cylinder1.Crank.frame_b.r_0[3] = engine.cylinder2.CrankAngle.frame_a.r_0[3];
//   engine.cylinder1.Crank.frame_b.r_0[3] = engine.cylinder2.crank_a.r_0[3];
//   (-engine.crank.frame_a.t[1]) + (engine.crank.frameTranslation.frame_a.t[1] + engine.crank.body.frame_a.t[1]) = 0.0;
//   (-engine.crank.frame_a.t[2]) + (engine.crank.frameTranslation.frame_a.t[2] + engine.crank.body.frame_a.t[2]) = 0.0;
//   (-engine.crank.frame_a.t[3]) + (engine.crank.frameTranslation.frame_a.t[3] + engine.crank.body.frame_a.t[3]) = 0.0;
//   (-engine.crank.frame_a.f[1]) + (engine.crank.frameTranslation.frame_a.f[1] + engine.crank.body.frame_a.f[1]) = 0.0;
//   (-engine.crank.frame_a.f[2]) + (engine.crank.frameTranslation.frame_a.f[2] + engine.crank.body.frame_a.f[2]) = 0.0;
//   (-engine.crank.frame_a.f[3]) + (engine.crank.frameTranslation.frame_a.f[3] + engine.crank.body.frame_a.f[3]) = 0.0;
//   (-engine.crank.frame_b.t[1]) + engine.crank.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.crank.frame_b.t[2]) + engine.crank.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.crank.frame_b.t[3]) + engine.crank.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.crank.frame_b.f[1]) + engine.crank.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.crank.frame_b.f[2]) + engine.crank.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.crank.frame_b.f[3]) + engine.crank.frameTranslation.frame_b.f[3] = 0.0;
//   engine.bearing.internalAxis.flange.tau + (-engine.bearing.axis.tau) = 0.0;
//   engine.bearing.fixed.flange.tau + (-engine.bearing.support.tau) = 0.0;
//   engine.bearing.fixed.flange.phi = engine.bearing.support.phi;
//   engine.bearing.support.tau = 0.0;
//   engine.cylinder6.Crank.frame_b.t[1] + (-engine.cylinder6.crank_b.t[1]) = 0.0;
//   engine.cylinder6.Crank.frame_b.t[2] + (-engine.cylinder6.crank_b.t[2]) = 0.0;
//   engine.cylinder6.Crank.frame_b.t[3] + (-engine.cylinder6.crank_b.t[3]) = 0.0;
//   engine.cylinder6.Crank.frame_b.f[1] + (-engine.cylinder6.crank_b.f[1]) = 0.0;
//   engine.cylinder6.Crank.frame_b.f[2] + (-engine.cylinder6.crank_b.f[2]) = 0.0;
//   engine.cylinder6.Crank.frame_b.f[3] + (-engine.cylinder6.crank_b.f[3]) = 0.0;
//   engine.cylinder6.Crank.frame_b.R.w[1] = engine.cylinder6.crank_b.R.w[1];
//   engine.cylinder6.Crank.frame_b.R.w[2] = engine.cylinder6.crank_b.R.w[2];
//   engine.cylinder6.Crank.frame_b.R.w[3] = engine.cylinder6.crank_b.R.w[3];
//   engine.cylinder6.Crank.frame_b.R.T[1,1] = engine.cylinder6.crank_b.R.T[1,1];
//   engine.cylinder6.Crank.frame_b.R.T[1,2] = engine.cylinder6.crank_b.R.T[1,2];
//   engine.cylinder6.Crank.frame_b.R.T[1,3] = engine.cylinder6.crank_b.R.T[1,3];
//   engine.cylinder6.Crank.frame_b.R.T[2,1] = engine.cylinder6.crank_b.R.T[2,1];
//   engine.cylinder6.Crank.frame_b.R.T[2,2] = engine.cylinder6.crank_b.R.T[2,2];
//   engine.cylinder6.Crank.frame_b.R.T[2,3] = engine.cylinder6.crank_b.R.T[2,3];
//   engine.cylinder6.Crank.frame_b.R.T[3,1] = engine.cylinder6.crank_b.R.T[3,1];
//   engine.cylinder6.Crank.frame_b.R.T[3,2] = engine.cylinder6.crank_b.R.T[3,2];
//   engine.cylinder6.Crank.frame_b.R.T[3,3] = engine.cylinder6.crank_b.R.T[3,3];
//   engine.cylinder6.Crank.frame_b.r_0[1] = engine.cylinder6.crank_b.r_0[1];
//   engine.cylinder6.Crank.frame_b.r_0[2] = engine.cylinder6.crank_b.r_0[2];
//   engine.cylinder6.Crank.frame_b.r_0[3] = engine.cylinder6.crank_b.r_0[3];
//   engine.cylinder6.CrankAngle.frame_a.t[1] + ((-engine.cylinder6.crank_a.t[1]) + engine.cylinder6.Crank.frame_a.t[1]) = 0.0;
//   engine.cylinder6.CrankAngle.frame_a.t[2] + ((-engine.cylinder6.crank_a.t[2]) + engine.cylinder6.Crank.frame_a.t[2]) = 0.0;
//   engine.cylinder6.CrankAngle.frame_a.t[3] + ((-engine.cylinder6.crank_a.t[3]) + engine.cylinder6.Crank.frame_a.t[3]) = 0.0;
//   engine.cylinder6.CrankAngle.frame_a.f[1] + ((-engine.cylinder6.crank_a.f[1]) + engine.cylinder6.Crank.frame_a.f[1]) = 0.0;
//   engine.cylinder6.CrankAngle.frame_a.f[2] + ((-engine.cylinder6.crank_a.f[2]) + engine.cylinder6.Crank.frame_a.f[2]) = 0.0;
//   engine.cylinder6.CrankAngle.frame_a.f[3] + ((-engine.cylinder6.crank_a.f[3]) + engine.cylinder6.Crank.frame_a.f[3]) = 0.0;
//   (-engine.cylinder6.cylinder_b.t[1]) + engine.cylinder6.Mounting.frame_b.t[1] = 0.0;
//   (-engine.cylinder6.cylinder_b.t[2]) + engine.cylinder6.Mounting.frame_b.t[2] = 0.0;
//   (-engine.cylinder6.cylinder_b.t[3]) + engine.cylinder6.Mounting.frame_b.t[3] = 0.0;
//   (-engine.cylinder6.cylinder_b.f[1]) + engine.cylinder6.Mounting.frame_b.f[1] = 0.0;
//   (-engine.cylinder6.cylinder_b.f[2]) + engine.cylinder6.Mounting.frame_b.f[2] = 0.0;
//   (-engine.cylinder6.cylinder_b.f[3]) + engine.cylinder6.Mounting.frame_b.f[3] = 0.0;
//   engine.cylinder6.Mounting.frame_b.R.w[1] = engine.cylinder6.cylinder_b.R.w[1];
//   engine.cylinder6.Mounting.frame_b.R.w[2] = engine.cylinder6.cylinder_b.R.w[2];
//   engine.cylinder6.Mounting.frame_b.R.w[3] = engine.cylinder6.cylinder_b.R.w[3];
//   engine.cylinder6.Mounting.frame_b.R.T[1,1] = engine.cylinder6.cylinder_b.R.T[1,1];
//   engine.cylinder6.Mounting.frame_b.R.T[1,2] = engine.cylinder6.cylinder_b.R.T[1,2];
//   engine.cylinder6.Mounting.frame_b.R.T[1,3] = engine.cylinder6.cylinder_b.R.T[1,3];
//   engine.cylinder6.Mounting.frame_b.R.T[2,1] = engine.cylinder6.cylinder_b.R.T[2,1];
//   engine.cylinder6.Mounting.frame_b.R.T[2,2] = engine.cylinder6.cylinder_b.R.T[2,2];
//   engine.cylinder6.Mounting.frame_b.R.T[2,3] = engine.cylinder6.cylinder_b.R.T[2,3];
//   engine.cylinder6.Mounting.frame_b.R.T[3,1] = engine.cylinder6.cylinder_b.R.T[3,1];
//   engine.cylinder6.Mounting.frame_b.R.T[3,2] = engine.cylinder6.cylinder_b.R.T[3,2];
//   engine.cylinder6.Mounting.frame_b.R.T[3,3] = engine.cylinder6.cylinder_b.R.T[3,3];
//   engine.cylinder6.Mounting.frame_b.r_0[1] = engine.cylinder6.cylinder_b.r_0[1];
//   engine.cylinder6.Mounting.frame_b.r_0[2] = engine.cylinder6.cylinder_b.r_0[2];
//   engine.cylinder6.Mounting.frame_b.r_0[3] = engine.cylinder6.cylinder_b.r_0[3];
//   (-engine.cylinder6.cylinder_a.t[1]) + (engine.cylinder6.CylinderInclination.frame_a.t[1] + engine.cylinder6.Mounting.frame_a.t[1]) = 0.0;
//   (-engine.cylinder6.cylinder_a.t[2]) + (engine.cylinder6.CylinderInclination.frame_a.t[2] + engine.cylinder6.Mounting.frame_a.t[2]) = 0.0;
//   (-engine.cylinder6.cylinder_a.t[3]) + (engine.cylinder6.CylinderInclination.frame_a.t[3] + engine.cylinder6.Mounting.frame_a.t[3]) = 0.0;
//   (-engine.cylinder6.cylinder_a.f[1]) + (engine.cylinder6.CylinderInclination.frame_a.f[1] + engine.cylinder6.Mounting.frame_a.f[1]) = 0.0;
//   (-engine.cylinder6.cylinder_a.f[2]) + (engine.cylinder6.CylinderInclination.frame_a.f[2] + engine.cylinder6.Mounting.frame_a.f[2]) = 0.0;
//   (-engine.cylinder6.cylinder_a.f[3]) + (engine.cylinder6.CylinderInclination.frame_a.f[3] + engine.cylinder6.Mounting.frame_a.f[3]) = 0.0;
//   engine.cylinder6.CrankShape.frame_a.t[1] + (engine.cylinder6.CrankAngle.frame_b.t[1] + engine.cylinder6.Mid.frame_a.t[1]) = 0.0;
//   engine.cylinder6.CrankShape.frame_a.t[2] + (engine.cylinder6.CrankAngle.frame_b.t[2] + engine.cylinder6.Mid.frame_a.t[2]) = 0.0;
//   engine.cylinder6.CrankShape.frame_a.t[3] + (engine.cylinder6.CrankAngle.frame_b.t[3] + engine.cylinder6.Mid.frame_a.t[3]) = 0.0;
//   engine.cylinder6.CrankShape.frame_a.f[1] + (engine.cylinder6.CrankAngle.frame_b.f[1] + engine.cylinder6.Mid.frame_a.f[1]) = 0.0;
//   engine.cylinder6.CrankShape.frame_a.f[2] + (engine.cylinder6.CrankAngle.frame_b.f[2] + engine.cylinder6.Mid.frame_a.f[2]) = 0.0;
//   engine.cylinder6.CrankShape.frame_a.f[3] + (engine.cylinder6.CrankAngle.frame_b.f[3] + engine.cylinder6.Mid.frame_a.f[3]) = 0.0;
//   engine.cylinder6.CrankAngle.frame_b.R.w[1] = engine.cylinder6.CrankShape.frame_a.R.w[1];
//   engine.cylinder6.CrankAngle.frame_b.R.w[1] = engine.cylinder6.Mid.frame_a.R.w[1];
//   engine.cylinder6.CrankAngle.frame_b.R.w[2] = engine.cylinder6.CrankShape.frame_a.R.w[2];
//   engine.cylinder6.CrankAngle.frame_b.R.w[2] = engine.cylinder6.Mid.frame_a.R.w[2];
//   engine.cylinder6.CrankAngle.frame_b.R.w[3] = engine.cylinder6.CrankShape.frame_a.R.w[3];
//   engine.cylinder6.CrankAngle.frame_b.R.w[3] = engine.cylinder6.Mid.frame_a.R.w[3];
//   engine.cylinder6.CrankAngle.frame_b.R.T[1,1] = engine.cylinder6.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder6.CrankAngle.frame_b.R.T[1,1] = engine.cylinder6.Mid.frame_a.R.T[1,1];
//   engine.cylinder6.CrankAngle.frame_b.R.T[1,2] = engine.cylinder6.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder6.CrankAngle.frame_b.R.T[1,2] = engine.cylinder6.Mid.frame_a.R.T[1,2];
//   engine.cylinder6.CrankAngle.frame_b.R.T[1,3] = engine.cylinder6.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder6.CrankAngle.frame_b.R.T[1,3] = engine.cylinder6.Mid.frame_a.R.T[1,3];
//   engine.cylinder6.CrankAngle.frame_b.R.T[2,1] = engine.cylinder6.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder6.CrankAngle.frame_b.R.T[2,1] = engine.cylinder6.Mid.frame_a.R.T[2,1];
//   engine.cylinder6.CrankAngle.frame_b.R.T[2,2] = engine.cylinder6.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder6.CrankAngle.frame_b.R.T[2,2] = engine.cylinder6.Mid.frame_a.R.T[2,2];
//   engine.cylinder6.CrankAngle.frame_b.R.T[2,3] = engine.cylinder6.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder6.CrankAngle.frame_b.R.T[2,3] = engine.cylinder6.Mid.frame_a.R.T[2,3];
//   engine.cylinder6.CrankAngle.frame_b.R.T[3,1] = engine.cylinder6.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder6.CrankAngle.frame_b.R.T[3,1] = engine.cylinder6.Mid.frame_a.R.T[3,1];
//   engine.cylinder6.CrankAngle.frame_b.R.T[3,2] = engine.cylinder6.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder6.CrankAngle.frame_b.R.T[3,2] = engine.cylinder6.Mid.frame_a.R.T[3,2];
//   engine.cylinder6.CrankAngle.frame_b.R.T[3,3] = engine.cylinder6.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder6.CrankAngle.frame_b.R.T[3,3] = engine.cylinder6.Mid.frame_a.R.T[3,3];
//   engine.cylinder6.CrankAngle.frame_b.r_0[1] = engine.cylinder6.CrankShape.frame_a.r_0[1];
//   engine.cylinder6.CrankAngle.frame_b.r_0[1] = engine.cylinder6.Mid.frame_a.r_0[1];
//   engine.cylinder6.CrankAngle.frame_b.r_0[2] = engine.cylinder6.CrankShape.frame_a.r_0[2];
//   engine.cylinder6.CrankAngle.frame_b.r_0[2] = engine.cylinder6.Mid.frame_a.r_0[2];
//   engine.cylinder6.CrankAngle.frame_b.r_0[3] = engine.cylinder6.CrankShape.frame_a.r_0[3];
//   engine.cylinder6.CrankAngle.frame_b.r_0[3] = engine.cylinder6.Mid.frame_a.r_0[3];
//   engine.cylinder6.jointRRP.frame_b.t[1] + engine.cylinder6.CylinderInclination.frame_b.t[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_b.t[2] + engine.cylinder6.CylinderInclination.frame_b.t[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_b.t[3] + engine.cylinder6.CylinderInclination.frame_b.t[3] = 0.0;
//   engine.cylinder6.jointRRP.frame_b.f[1] + engine.cylinder6.CylinderInclination.frame_b.f[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_b.f[2] + engine.cylinder6.CylinderInclination.frame_b.f[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_b.f[3] + engine.cylinder6.CylinderInclination.frame_b.f[3] = 0.0;
//   engine.cylinder6.CylinderInclination.frame_b.R.w[1] = engine.cylinder6.jointRRP.frame_b.R.w[1];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.w[1];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.w[1];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[2] = engine.cylinder6.jointRRP.frame_b.R.w[2];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.w[2];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.w[2];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[3] = engine.cylinder6.jointRRP.frame_b.R.w[3];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.w[3];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.w[3];
//   engine.cylinder6.CylinderInclination.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.frame_b.R.T[1,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[1,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.frame_b.R.T[1,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[1,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.frame_b.R.T[1,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[1,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.frame_b.R.T[2,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[2,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.frame_b.R.T[2,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[2,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.frame_b.R.T[2,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[2,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.frame_b.R.T[3,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[3,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.frame_b.R.T[3,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[3,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.frame_b.R.T[3,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.frame_b.R.T[3,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder6.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[1] = engine.cylinder6.jointRRP.frame_b.r_0[1];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.frame_b.r_0[1];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0[1];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.r_0[1];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[2] = engine.cylinder6.jointRRP.frame_b.r_0[2];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.frame_b.r_0[2];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0[2];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.r_0[2];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[3] = engine.cylinder6.jointRRP.frame_b.r_0[3];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.frame_b.r_0[3];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.r_0[3];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.r_0[3];
//   engine.cylinder6.CylinderInclination.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3];
//   engine.cylinder6.jointRRP.frame_ib.t[1] + engine.cylinder6.Piston.frame_b.t[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_ib.t[2] + engine.cylinder6.Piston.frame_b.t[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_ib.t[3] + engine.cylinder6.Piston.frame_b.t[3] = 0.0;
//   engine.cylinder6.jointRRP.frame_ib.f[1] + engine.cylinder6.Piston.frame_b.f[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_ib.f[2] + engine.cylinder6.Piston.frame_b.f[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_ib.f[3] + engine.cylinder6.Piston.frame_b.f[3] = 0.0;
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder6.Piston.frame_b.R.w[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder6.jointRRP.frame_ib.R.w[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.w[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder6.Piston.frame_b.R.w[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder6.jointRRP.frame_ib.R.w[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.w[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder6.Piston.frame_b.R.w[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder6.jointRRP.frame_ib.R.w[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.w[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.w[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.Piston.frame_b.R.T[1,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.frame_ib.R.T[1,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[1,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.Piston.frame_b.R.T[1,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.frame_ib.R.T[1,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[1,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.Piston.frame_b.R.T[1,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.frame_ib.R.T[1,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[1,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.Piston.frame_b.R.T[2,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.frame_ib.R.T[2,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[2,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.Piston.frame_b.R.T[2,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.frame_ib.R.T[2,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[2,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.Piston.frame_b.R.T[2,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.frame_ib.R.T[2,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[2,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.Piston.frame_b.R.T[3,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.frame_ib.R.T[3,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[3,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.Piston.frame_b.R.T[3,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.frame_ib.R.T[3,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[3,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.Piston.frame_b.R.T[3,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.frame_ib.R.T[3,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.frame_ib.R.T[3,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder6.Piston.frame_b.r_0[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder6.jointRRP.frame_ib.r_0[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.frame_ib.r_0[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0[1];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder6.Piston.frame_b.r_0[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder6.jointRRP.frame_ib.r_0[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.frame_ib.r_0[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0[2];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder6.Piston.frame_b.r_0[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder6.jointRRP.frame_ib.r_0[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.frame_ib.r_0[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.r_0[3];
//   engine.cylinder6.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.r_0[3];
//   engine.cylinder6.jointRRP.bearing.f + engine.cylinder6.gasForce.flange_b.f = 0.0;
//   engine.cylinder6.gasForce.flange_b.s = engine.cylinder6.jointRRP.bearing.s;
//   engine.cylinder6.gasForce.flange_b.s = engine.cylinder6.jointRRP.jointUSP.bearing.s;
//   engine.cylinder6.gasForce.flange_b.s = engine.cylinder6.jointRRP.jointUSP.prismatic.bearing.s;
//   engine.cylinder6.gasForce.flange_a.f + engine.cylinder6.jointRRP.axis.f = 0.0;
//   engine.cylinder6.gasForce.flange_a.s = engine.cylinder6.jointRRP.axis.s;
//   engine.cylinder6.gasForce.flange_a.s = engine.cylinder6.jointRRP.jointUSP.axis.s;
//   engine.cylinder6.gasForce.flange_a.s = engine.cylinder6.jointRRP.jointUSP.prismatic.axis.s;
//   engine.cylinder6.Mid.frame_b.t[1] + engine.cylinder6.jointRRP.frame_a.t[1] = 0.0;
//   engine.cylinder6.Mid.frame_b.t[2] + engine.cylinder6.jointRRP.frame_a.t[2] = 0.0;
//   engine.cylinder6.Mid.frame_b.t[3] + engine.cylinder6.jointRRP.frame_a.t[3] = 0.0;
//   engine.cylinder6.Mid.frame_b.f[1] + engine.cylinder6.jointRRP.frame_a.f[1] = 0.0;
//   engine.cylinder6.Mid.frame_b.f[2] + engine.cylinder6.jointRRP.frame_a.f[2] = 0.0;
//   engine.cylinder6.Mid.frame_b.f[3] + engine.cylinder6.jointRRP.frame_a.f[3] = 0.0;
//   engine.cylinder6.Mid.frame_b.R.w[1] = engine.cylinder6.jointRRP.frame_a.R.w[1];
//   engine.cylinder6.Mid.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.w[1];
//   engine.cylinder6.Mid.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.w[1];
//   engine.cylinder6.Mid.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1];
//   engine.cylinder6.Mid.frame_b.R.w[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[1];
//   engine.cylinder6.Mid.frame_b.R.w[2] = engine.cylinder6.jointRRP.frame_a.R.w[2];
//   engine.cylinder6.Mid.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.w[2];
//   engine.cylinder6.Mid.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.w[2];
//   engine.cylinder6.Mid.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2];
//   engine.cylinder6.Mid.frame_b.R.w[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[2];
//   engine.cylinder6.Mid.frame_b.R.w[3] = engine.cylinder6.jointRRP.frame_a.R.w[3];
//   engine.cylinder6.Mid.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.w[3];
//   engine.cylinder6.Mid.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.w[3];
//   engine.cylinder6.Mid.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3];
//   engine.cylinder6.Mid.frame_b.R.w[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.w[3];
//   engine.cylinder6.Mid.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.frame_a.R.T[1,1];
//   engine.cylinder6.Mid.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[1,1];
//   engine.cylinder6.Mid.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder6.Mid.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder6.Mid.frame_b.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[1,1];
//   engine.cylinder6.Mid.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.frame_a.R.T[1,2];
//   engine.cylinder6.Mid.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[1,2];
//   engine.cylinder6.Mid.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder6.Mid.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder6.Mid.frame_b.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[1,2];
//   engine.cylinder6.Mid.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.frame_a.R.T[1,3];
//   engine.cylinder6.Mid.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[1,3];
//   engine.cylinder6.Mid.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder6.Mid.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder6.Mid.frame_b.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[1,3];
//   engine.cylinder6.Mid.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.frame_a.R.T[2,1];
//   engine.cylinder6.Mid.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[2,1];
//   engine.cylinder6.Mid.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder6.Mid.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder6.Mid.frame_b.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[2,1];
//   engine.cylinder6.Mid.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.frame_a.R.T[2,2];
//   engine.cylinder6.Mid.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[2,2];
//   engine.cylinder6.Mid.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder6.Mid.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder6.Mid.frame_b.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[2,2];
//   engine.cylinder6.Mid.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.frame_a.R.T[2,3];
//   engine.cylinder6.Mid.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[2,3];
//   engine.cylinder6.Mid.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder6.Mid.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder6.Mid.frame_b.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[2,3];
//   engine.cylinder6.Mid.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.frame_a.R.T[3,1];
//   engine.cylinder6.Mid.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[3,1];
//   engine.cylinder6.Mid.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder6.Mid.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder6.Mid.frame_b.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[3,1];
//   engine.cylinder6.Mid.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.frame_a.R.T[3,2];
//   engine.cylinder6.Mid.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[3,2];
//   engine.cylinder6.Mid.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder6.Mid.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder6.Mid.frame_b.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[3,2];
//   engine.cylinder6.Mid.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.frame_a.R.T[3,3];
//   engine.cylinder6.Mid.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.frame_a.R.T[3,3];
//   engine.cylinder6.Mid.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder6.Mid.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder6.Mid.frame_b.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.R.T[3,3];
//   engine.cylinder6.Mid.frame_b.r_0[1] = engine.cylinder6.jointRRP.frame_a.r_0[1];
//   engine.cylinder6.Mid.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.frame_a.r_0[1];
//   engine.cylinder6.Mid.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.r_0[1];
//   engine.cylinder6.Mid.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1];
//   engine.cylinder6.Mid.frame_b.r_0[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder6.Mid.frame_b.r_0[2] = engine.cylinder6.jointRRP.frame_a.r_0[2];
//   engine.cylinder6.Mid.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.frame_a.r_0[2];
//   engine.cylinder6.Mid.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.r_0[2];
//   engine.cylinder6.Mid.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2];
//   engine.cylinder6.Mid.frame_b.r_0[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder6.Mid.frame_b.r_0[3] = engine.cylinder6.jointRRP.frame_a.r_0[3];
//   engine.cylinder6.Mid.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.frame_a.r_0[3];
//   engine.cylinder6.Mid.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.r_0[3];
//   engine.cylinder6.Mid.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3];
//   engine.cylinder6.Mid.frame_b.r_0[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder6.jointRRP.frame_ia.t[1] + engine.cylinder6.Rod.frame_a.t[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_ia.t[2] + engine.cylinder6.Rod.frame_a.t[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_ia.t[3] + engine.cylinder6.Rod.frame_a.t[3] = 0.0;
//   engine.cylinder6.jointRRP.frame_ia.f[1] + engine.cylinder6.Rod.frame_a.f[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_ia.f[2] + engine.cylinder6.Rod.frame_a.f[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_ia.f[3] + engine.cylinder6.Rod.frame_a.f[3] = 0.0;
//   engine.cylinder6.Rod.body.frame_a.R.w[1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder6.Rod.body.frame_a.R.w[1] = engine.cylinder6.Rod.frame_a.R.w[1];
//   engine.cylinder6.Rod.body.frame_a.R.w[1] = engine.cylinder6.jointRRP.frame_ia.R.w[1];
//   engine.cylinder6.Rod.body.frame_a.R.w[1] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.w[1];
//   engine.cylinder6.Rod.body.frame_a.R.w[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.w[1];
//   engine.cylinder6.Rod.body.frame_a.R.w[2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder6.Rod.body.frame_a.R.w[2] = engine.cylinder6.Rod.frame_a.R.w[2];
//   engine.cylinder6.Rod.body.frame_a.R.w[2] = engine.cylinder6.jointRRP.frame_ia.R.w[2];
//   engine.cylinder6.Rod.body.frame_a.R.w[2] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.w[2];
//   engine.cylinder6.Rod.body.frame_a.R.w[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.w[2];
//   engine.cylinder6.Rod.body.frame_a.R.w[3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.w[3];
//   engine.cylinder6.Rod.body.frame_a.R.w[3] = engine.cylinder6.Rod.frame_a.R.w[3];
//   engine.cylinder6.Rod.body.frame_a.R.w[3] = engine.cylinder6.jointRRP.frame_ia.R.w[3];
//   engine.cylinder6.Rod.body.frame_a.R.w[3] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.w[3];
//   engine.cylinder6.Rod.body.frame_a.R.w[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.w[3];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,1] = engine.cylinder6.Rod.frame_a.R.T[1,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,1] = engine.cylinder6.jointRRP.frame_ia.R.T[1,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[1,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,2] = engine.cylinder6.Rod.frame_a.R.T[1,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,2] = engine.cylinder6.jointRRP.frame_ia.R.T[1,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[1,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,3] = engine.cylinder6.Rod.frame_a.R.T[1,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,3] = engine.cylinder6.jointRRP.frame_ia.R.T[1,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[1,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,1] = engine.cylinder6.Rod.frame_a.R.T[2,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,1] = engine.cylinder6.jointRRP.frame_ia.R.T[2,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[2,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,2] = engine.cylinder6.Rod.frame_a.R.T[2,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,2] = engine.cylinder6.jointRRP.frame_ia.R.T[2,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[2,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,3] = engine.cylinder6.Rod.frame_a.R.T[2,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,3] = engine.cylinder6.jointRRP.frame_ia.R.T[2,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[2,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,1] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,1] = engine.cylinder6.Rod.frame_a.R.T[3,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,1] = engine.cylinder6.jointRRP.frame_ia.R.T[3,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[3,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,2] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,2] = engine.cylinder6.Rod.frame_a.R.T[3,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,2] = engine.cylinder6.jointRRP.frame_ia.R.T[3,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[3,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,3] = engine.cylinder6.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,3] = engine.cylinder6.Rod.frame_a.R.T[3,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,3] = engine.cylinder6.jointRRP.frame_ia.R.T[3,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.frame_ia.R.T[3,3];
//   engine.cylinder6.Rod.body.frame_a.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3];
//   engine.cylinder6.Rod.body.frame_a.r_0[1] = engine.cylinder6.Rod.frameTranslation.frame_a.r_0[1];
//   engine.cylinder6.Rod.body.frame_a.r_0[1] = engine.cylinder6.Rod.frame_a.r_0[1];
//   engine.cylinder6.Rod.body.frame_a.r_0[1] = engine.cylinder6.jointRRP.frame_ia.r_0[1];
//   engine.cylinder6.Rod.body.frame_a.r_0[1] = engine.cylinder6.jointRRP.jointUSP.frame_ia.r_0[1];
//   engine.cylinder6.Rod.body.frame_a.r_0[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[1];
//   engine.cylinder6.Rod.body.frame_a.r_0[2] = engine.cylinder6.Rod.frameTranslation.frame_a.r_0[2];
//   engine.cylinder6.Rod.body.frame_a.r_0[2] = engine.cylinder6.Rod.frame_a.r_0[2];
//   engine.cylinder6.Rod.body.frame_a.r_0[2] = engine.cylinder6.jointRRP.frame_ia.r_0[2];
//   engine.cylinder6.Rod.body.frame_a.r_0[2] = engine.cylinder6.jointRRP.jointUSP.frame_ia.r_0[2];
//   engine.cylinder6.Rod.body.frame_a.r_0[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[2];
//   engine.cylinder6.Rod.body.frame_a.r_0[3] = engine.cylinder6.Rod.frameTranslation.frame_a.r_0[3];
//   engine.cylinder6.Rod.body.frame_a.r_0[3] = engine.cylinder6.Rod.frame_a.r_0[3];
//   engine.cylinder6.Rod.body.frame_a.r_0[3] = engine.cylinder6.jointRRP.frame_ia.r_0[3];
//   engine.cylinder6.Rod.body.frame_a.r_0[3] = engine.cylinder6.jointRRP.jointUSP.frame_ia.r_0[3];
//   engine.cylinder6.Rod.body.frame_a.r_0[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.r_0[3];
//   engine.cylinder6.crank_b.t[3] = 0.0;
//   engine.cylinder6.crank_b.t[2] = 0.0;
//   engine.cylinder6.crank_b.t[1] = 0.0;
//   engine.cylinder6.crank_b.f[3] = 0.0;
//   engine.cylinder6.crank_b.f[2] = 0.0;
//   engine.cylinder6.crank_b.f[1] = 0.0;
//   engine.cylinder6.cylinder_b.t[3] = 0.0;
//   engine.cylinder6.cylinder_b.t[2] = 0.0;
//   engine.cylinder6.cylinder_b.t[1] = 0.0;
//   engine.cylinder6.cylinder_b.f[3] = 0.0;
//   engine.cylinder6.cylinder_b.f[2] = 0.0;
//   engine.cylinder6.cylinder_b.f[1] = 0.0;
//   (-engine.cylinder6.Piston.frame_a.t[1]) + (engine.cylinder6.Piston.frameTranslation.frame_a.t[1] + engine.cylinder6.Piston.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder6.Piston.frame_a.t[2]) + (engine.cylinder6.Piston.frameTranslation.frame_a.t[2] + engine.cylinder6.Piston.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder6.Piston.frame_a.t[3]) + (engine.cylinder6.Piston.frameTranslation.frame_a.t[3] + engine.cylinder6.Piston.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder6.Piston.frame_a.f[1]) + (engine.cylinder6.Piston.frameTranslation.frame_a.f[1] + engine.cylinder6.Piston.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder6.Piston.frame_a.f[2]) + (engine.cylinder6.Piston.frameTranslation.frame_a.f[2] + engine.cylinder6.Piston.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder6.Piston.frame_a.f[3]) + (engine.cylinder6.Piston.frameTranslation.frame_a.f[3] + engine.cylinder6.Piston.body.frame_a.f[3]) = 0.0;
//   engine.cylinder6.Piston.body.frame_a.R.w[1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder6.Piston.body.frame_a.R.w[1] = engine.cylinder6.Piston.frame_a.R.w[1];
//   engine.cylinder6.Piston.body.frame_a.R.w[2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder6.Piston.body.frame_a.R.w[2] = engine.cylinder6.Piston.frame_a.R.w[2];
//   engine.cylinder6.Piston.body.frame_a.R.w[3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.w[3];
//   engine.cylinder6.Piston.body.frame_a.R.w[3] = engine.cylinder6.Piston.frame_a.R.w[3];
//   engine.cylinder6.Piston.body.frame_a.R.T[1,1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder6.Piston.body.frame_a.R.T[1,1] = engine.cylinder6.Piston.frame_a.R.T[1,1];
//   engine.cylinder6.Piston.body.frame_a.R.T[1,2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder6.Piston.body.frame_a.R.T[1,2] = engine.cylinder6.Piston.frame_a.R.T[1,2];
//   engine.cylinder6.Piston.body.frame_a.R.T[1,3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder6.Piston.body.frame_a.R.T[1,3] = engine.cylinder6.Piston.frame_a.R.T[1,3];
//   engine.cylinder6.Piston.body.frame_a.R.T[2,1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder6.Piston.body.frame_a.R.T[2,1] = engine.cylinder6.Piston.frame_a.R.T[2,1];
//   engine.cylinder6.Piston.body.frame_a.R.T[2,2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder6.Piston.body.frame_a.R.T[2,2] = engine.cylinder6.Piston.frame_a.R.T[2,2];
//   engine.cylinder6.Piston.body.frame_a.R.T[2,3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder6.Piston.body.frame_a.R.T[2,3] = engine.cylinder6.Piston.frame_a.R.T[2,3];
//   engine.cylinder6.Piston.body.frame_a.R.T[3,1] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder6.Piston.body.frame_a.R.T[3,1] = engine.cylinder6.Piston.frame_a.R.T[3,1];
//   engine.cylinder6.Piston.body.frame_a.R.T[3,2] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder6.Piston.body.frame_a.R.T[3,2] = engine.cylinder6.Piston.frame_a.R.T[3,2];
//   engine.cylinder6.Piston.body.frame_a.R.T[3,3] = engine.cylinder6.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder6.Piston.body.frame_a.R.T[3,3] = engine.cylinder6.Piston.frame_a.R.T[3,3];
//   engine.cylinder6.Piston.body.frame_a.r_0[1] = engine.cylinder6.Piston.frameTranslation.frame_a.r_0[1];
//   engine.cylinder6.Piston.body.frame_a.r_0[1] = engine.cylinder6.Piston.frame_a.r_0[1];
//   engine.cylinder6.Piston.body.frame_a.r_0[2] = engine.cylinder6.Piston.frameTranslation.frame_a.r_0[2];
//   engine.cylinder6.Piston.body.frame_a.r_0[2] = engine.cylinder6.Piston.frame_a.r_0[2];
//   engine.cylinder6.Piston.body.frame_a.r_0[3] = engine.cylinder6.Piston.frameTranslation.frame_a.r_0[3];
//   engine.cylinder6.Piston.body.frame_a.r_0[3] = engine.cylinder6.Piston.frame_a.r_0[3];
//   (-engine.cylinder6.Piston.frame_b.t[1]) + engine.cylinder6.Piston.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder6.Piston.frame_b.t[2]) + engine.cylinder6.Piston.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder6.Piston.frame_b.t[3]) + engine.cylinder6.Piston.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder6.Piston.frame_b.f[1]) + engine.cylinder6.Piston.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder6.Piston.frame_b.f[2]) + engine.cylinder6.Piston.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder6.Piston.frame_b.f[3]) + engine.cylinder6.Piston.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder6.Piston.frame_a.t[3] = 0.0;
//   engine.cylinder6.Piston.frame_a.t[2] = 0.0;
//   engine.cylinder6.Piston.frame_a.t[1] = 0.0;
//   engine.cylinder6.Piston.frame_a.f[3] = 0.0;
//   engine.cylinder6.Piston.frame_a.f[2] = 0.0;
//   engine.cylinder6.Piston.frame_a.f[1] = 0.0;
//   (-engine.cylinder6.Rod.frame_a.t[1]) + (engine.cylinder6.Rod.frameTranslation.frame_a.t[1] + engine.cylinder6.Rod.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder6.Rod.frame_a.t[2]) + (engine.cylinder6.Rod.frameTranslation.frame_a.t[2] + engine.cylinder6.Rod.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder6.Rod.frame_a.t[3]) + (engine.cylinder6.Rod.frameTranslation.frame_a.t[3] + engine.cylinder6.Rod.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder6.Rod.frame_a.f[1]) + (engine.cylinder6.Rod.frameTranslation.frame_a.f[1] + engine.cylinder6.Rod.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder6.Rod.frame_a.f[2]) + (engine.cylinder6.Rod.frameTranslation.frame_a.f[2] + engine.cylinder6.Rod.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder6.Rod.frame_a.f[3]) + (engine.cylinder6.Rod.frameTranslation.frame_a.f[3] + engine.cylinder6.Rod.body.frame_a.f[3]) = 0.0;
//   (-engine.cylinder6.Rod.frame_b.t[1]) + engine.cylinder6.Rod.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder6.Rod.frame_b.t[2]) + engine.cylinder6.Rod.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder6.Rod.frame_b.t[3]) + engine.cylinder6.Rod.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder6.Rod.frame_b.f[1]) + engine.cylinder6.Rod.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder6.Rod.frame_b.f[2]) + engine.cylinder6.Rod.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder6.Rod.frame_b.f[3]) + engine.cylinder6.Rod.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder6.Rod.frame_b.R.w[1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder6.Rod.frame_b.R.w[2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder6.Rod.frame_b.R.w[3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder6.Rod.frame_b.R.T[1,1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder6.Rod.frame_b.R.T[1,2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder6.Rod.frame_b.R.T[1,3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder6.Rod.frame_b.R.T[2,1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder6.Rod.frame_b.R.T[2,2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder6.Rod.frame_b.R.T[2,3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder6.Rod.frame_b.R.T[3,1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder6.Rod.frame_b.R.T[3,2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder6.Rod.frame_b.R.T[3,3];
//   engine.cylinder6.Rod.frameTranslation.frame_b.r_0[1] = engine.cylinder6.Rod.frame_b.r_0[1];
//   engine.cylinder6.Rod.frameTranslation.frame_b.r_0[2] = engine.cylinder6.Rod.frame_b.r_0[2];
//   engine.cylinder6.Rod.frameTranslation.frame_b.r_0[3] = engine.cylinder6.Rod.frame_b.r_0[3];
//   engine.cylinder6.Rod.frame_b.t[3] = 0.0;
//   engine.cylinder6.Rod.frame_b.t[2] = 0.0;
//   engine.cylinder6.Rod.frame_b.t[1] = 0.0;
//   engine.cylinder6.Rod.frame_b.f[3] = 0.0;
//   engine.cylinder6.Rod.frame_b.f[2] = 0.0;
//   engine.cylinder6.Rod.frame_b.f[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.bearing.f + (-engine.cylinder6.jointRRP.bearing.f) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.axis.f + (-engine.cylinder6.jointRRP.axis.f) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ib.t[1] + (-engine.cylinder6.jointRRP.frame_ib.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ib.t[2] + (-engine.cylinder6.jointRRP.frame_ib.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ib.t[3] + (-engine.cylinder6.jointRRP.frame_ib.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ib.f[1] + (-engine.cylinder6.jointRRP.frame_ib.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ib.f[2] + (-engine.cylinder6.jointRRP.frame_ib.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ib.f[3] + (-engine.cylinder6.jointRRP.frame_ib.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_im.t[1] + (-engine.cylinder6.jointRRP.frame_im.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_im.t[2] + (-engine.cylinder6.jointRRP.frame_im.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_im.t[3] + (-engine.cylinder6.jointRRP.frame_im.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_im.f[1] + (-engine.cylinder6.jointRRP.frame_im.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_im.f[2] + (-engine.cylinder6.jointRRP.frame_im.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_im.f[3] + (-engine.cylinder6.jointRRP.frame_im.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.frame_im.R.w[1] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.w[1];
//   engine.cylinder6.jointRRP.frame_im.R.w[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.w[1];
//   engine.cylinder6.jointRRP.frame_im.R.w[1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[1];
//   engine.cylinder6.jointRRP.frame_im.R.w[2] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.w[2];
//   engine.cylinder6.jointRRP.frame_im.R.w[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.w[2];
//   engine.cylinder6.jointRRP.frame_im.R.w[2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[2];
//   engine.cylinder6.jointRRP.frame_im.R.w[3] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.w[3];
//   engine.cylinder6.jointRRP.frame_im.R.w[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.w[3];
//   engine.cylinder6.jointRRP.frame_im.R.w[3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.w[3];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[1,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[1,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[1,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[1,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[1,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[1,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[1,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[2,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[2,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[2,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[2,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[2,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[2,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[2,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[3,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[3,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,1];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[3,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[3,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,2];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.frame_im.R.T[3,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.R.T[3,3];
//   engine.cylinder6.jointRRP.frame_im.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.R.T[3,3];
//   engine.cylinder6.jointRRP.frame_im.r_0[1] = engine.cylinder6.jointRRP.jointUSP.frame_im.r_0[1];
//   engine.cylinder6.jointRRP.frame_im.r_0[1] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[1];
//   engine.cylinder6.jointRRP.frame_im.r_0[1] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0[1];
//   engine.cylinder6.jointRRP.frame_im.r_0[2] = engine.cylinder6.jointRRP.jointUSP.frame_im.r_0[2];
//   engine.cylinder6.jointRRP.frame_im.r_0[2] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[2];
//   engine.cylinder6.jointRRP.frame_im.r_0[2] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0[2];
//   engine.cylinder6.jointRRP.frame_im.r_0[3] = engine.cylinder6.jointRRP.jointUSP.frame_im.r_0[3];
//   engine.cylinder6.jointRRP.frame_im.r_0[3] = engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.r_0[3];
//   engine.cylinder6.jointRRP.frame_im.r_0[3] = engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.r_0[3];
//   engine.cylinder6.jointRRP.jointUSP.frame_ia.t[1] + (-engine.cylinder6.jointRRP.frame_ia.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ia.t[2] + (-engine.cylinder6.jointRRP.frame_ia.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ia.t[3] + (-engine.cylinder6.jointRRP.frame_ia.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ia.f[1] + (-engine.cylinder6.jointRRP.frame_ia.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ia.f[2] + (-engine.cylinder6.jointRRP.frame_ia.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_ia.f[3] + (-engine.cylinder6.jointRRP.frame_ia.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_b.t[1] + (-engine.cylinder6.jointRRP.frame_b.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_b.t[2] + (-engine.cylinder6.jointRRP.frame_b.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_b.t[3] + (-engine.cylinder6.jointRRP.frame_b.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_b.f[1] + (-engine.cylinder6.jointRRP.frame_b.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_b.f[2] + (-engine.cylinder6.jointRRP.frame_b.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_b.f[3] + (-engine.cylinder6.jointRRP.frame_b.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_a.t[1] + (-engine.cylinder6.jointRRP.frame_a.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_a.t[2] + (-engine.cylinder6.jointRRP.frame_a.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_a.t[3] + (-engine.cylinder6.jointRRP.frame_a.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_a.f[1] + (-engine.cylinder6.jointRRP.frame_a.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_a.f[2] + (-engine.cylinder6.jointRRP.frame_a.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.frame_a.f[3] + (-engine.cylinder6.jointRRP.frame_a.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.r_rel[1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.r_rel[2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.r_rel[3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3];
//   engine.cylinder6.jointRRP.jointUSP.prismatic.bearing.f + (-engine.cylinder6.jointRRP.jointUSP.bearing.f) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.axis.f + (-engine.cylinder6.jointRRP.jointUSP.axis.f) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.position_b[1].y = engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[1];
//   engine.cylinder6.jointRRP.jointUSP.position_b[2].y = engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[2];
//   engine.cylinder6.jointRRP.jointUSP.position_b[3].y = engine.cylinder6.jointRRP.jointUSP.prismatic.position_b[3];
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_ia.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_ia.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.t[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_ia.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_ia.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_ia.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod1.frame_ia.f[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_ia.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_im.t[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_im.t[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.t[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_im.t[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_im.f[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_im.f[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.rod2.frame_b.f[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_b.f[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_im.f[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[1] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_b.t[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[2] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_b.t[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[3] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.t[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_b.t[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[1] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_b.f[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[2] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_b.f[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[3] + (engine.cylinder6.jointRRP.jointUSP.prismatic.frame_a.f[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_b.f[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_a.t[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_a.t[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.t[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_a.t[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[1] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_a.f[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[2] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_a.f[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[3] + (engine.cylinder6.jointRRP.jointUSP.rod1.frame_a.f[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_a.f[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_ib.t[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_ib.t[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.t[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_ib.t[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[1] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[1] + (-engine.cylinder6.jointRRP.jointUSP.frame_ib.f[1])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[2] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[2] + (-engine.cylinder6.jointRRP.jointUSP.frame_ib.f[2])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.prismatic.frame_b.f[3] + (engine.cylinder6.jointRRP.jointUSP.rod2.frame_a.f[3] + (-engine.cylinder6.jointRRP.jointUSP.frame_ib.f[3])) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1] + engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2] + engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3] + engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1] + engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2] + engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3] + engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3] = engine.cylinder6.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_b.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.t[3]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[1]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[2]) = 0.0;
//   engine.cylinder6.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] + (-engine.cylinder6.jointRRP.jointUSP.relativePosition.frame_a.f[3]) = 0.0;
//   engine.cylinder6.jointRRP.frame_im.t[3] = 0.0;
//   engine.cylinder6.jointRRP.frame_im.t[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_im.t[1] = 0.0;
//   engine.cylinder6.jointRRP.frame_im.f[3] = 0.0;
//   engine.cylinder6.jointRRP.frame_im.f[2] = 0.0;
//   engine.cylinder6.jointRRP.frame_im.f[1] = 0.0;
//   engine.cylinder5.Crank.frame_b.t[1] + (-engine.cylinder5.crank_b.t[1]) = 0.0;
//   engine.cylinder5.Crank.frame_b.t[2] + (-engine.cylinder5.crank_b.t[2]) = 0.0;
//   engine.cylinder5.Crank.frame_b.t[3] + (-engine.cylinder5.crank_b.t[3]) = 0.0;
//   engine.cylinder5.Crank.frame_b.f[1] + (-engine.cylinder5.crank_b.f[1]) = 0.0;
//   engine.cylinder5.Crank.frame_b.f[2] + (-engine.cylinder5.crank_b.f[2]) = 0.0;
//   engine.cylinder5.Crank.frame_b.f[3] + (-engine.cylinder5.crank_b.f[3]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_a.t[1] + ((-engine.cylinder5.crank_a.t[1]) + engine.cylinder5.Crank.frame_a.t[1]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_a.t[2] + ((-engine.cylinder5.crank_a.t[2]) + engine.cylinder5.Crank.frame_a.t[2]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_a.t[3] + ((-engine.cylinder5.crank_a.t[3]) + engine.cylinder5.Crank.frame_a.t[3]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_a.f[1] + ((-engine.cylinder5.crank_a.f[1]) + engine.cylinder5.Crank.frame_a.f[1]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_a.f[2] + ((-engine.cylinder5.crank_a.f[2]) + engine.cylinder5.Crank.frame_a.f[2]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_a.f[3] + ((-engine.cylinder5.crank_a.f[3]) + engine.cylinder5.Crank.frame_a.f[3]) = 0.0;
//   (-engine.cylinder5.cylinder_b.t[1]) + engine.cylinder5.Mounting.frame_b.t[1] = 0.0;
//   (-engine.cylinder5.cylinder_b.t[2]) + engine.cylinder5.Mounting.frame_b.t[2] = 0.0;
//   (-engine.cylinder5.cylinder_b.t[3]) + engine.cylinder5.Mounting.frame_b.t[3] = 0.0;
//   (-engine.cylinder5.cylinder_b.f[1]) + engine.cylinder5.Mounting.frame_b.f[1] = 0.0;
//   (-engine.cylinder5.cylinder_b.f[2]) + engine.cylinder5.Mounting.frame_b.f[2] = 0.0;
//   (-engine.cylinder5.cylinder_b.f[3]) + engine.cylinder5.Mounting.frame_b.f[3] = 0.0;
//   (-engine.cylinder5.cylinder_a.t[1]) + (engine.cylinder5.CylinderInclination.frame_a.t[1] + engine.cylinder5.Mounting.frame_a.t[1]) = 0.0;
//   (-engine.cylinder5.cylinder_a.t[2]) + (engine.cylinder5.CylinderInclination.frame_a.t[2] + engine.cylinder5.Mounting.frame_a.t[2]) = 0.0;
//   (-engine.cylinder5.cylinder_a.t[3]) + (engine.cylinder5.CylinderInclination.frame_a.t[3] + engine.cylinder5.Mounting.frame_a.t[3]) = 0.0;
//   (-engine.cylinder5.cylinder_a.f[1]) + (engine.cylinder5.CylinderInclination.frame_a.f[1] + engine.cylinder5.Mounting.frame_a.f[1]) = 0.0;
//   (-engine.cylinder5.cylinder_a.f[2]) + (engine.cylinder5.CylinderInclination.frame_a.f[2] + engine.cylinder5.Mounting.frame_a.f[2]) = 0.0;
//   (-engine.cylinder5.cylinder_a.f[3]) + (engine.cylinder5.CylinderInclination.frame_a.f[3] + engine.cylinder5.Mounting.frame_a.f[3]) = 0.0;
//   engine.cylinder5.CrankShape.frame_a.t[1] + (engine.cylinder5.CrankAngle.frame_b.t[1] + engine.cylinder5.Mid.frame_a.t[1]) = 0.0;
//   engine.cylinder5.CrankShape.frame_a.t[2] + (engine.cylinder5.CrankAngle.frame_b.t[2] + engine.cylinder5.Mid.frame_a.t[2]) = 0.0;
//   engine.cylinder5.CrankShape.frame_a.t[3] + (engine.cylinder5.CrankAngle.frame_b.t[3] + engine.cylinder5.Mid.frame_a.t[3]) = 0.0;
//   engine.cylinder5.CrankShape.frame_a.f[1] + (engine.cylinder5.CrankAngle.frame_b.f[1] + engine.cylinder5.Mid.frame_a.f[1]) = 0.0;
//   engine.cylinder5.CrankShape.frame_a.f[2] + (engine.cylinder5.CrankAngle.frame_b.f[2] + engine.cylinder5.Mid.frame_a.f[2]) = 0.0;
//   engine.cylinder5.CrankShape.frame_a.f[3] + (engine.cylinder5.CrankAngle.frame_b.f[3] + engine.cylinder5.Mid.frame_a.f[3]) = 0.0;
//   engine.cylinder5.CrankAngle.frame_b.R.w[1] = engine.cylinder5.CrankShape.frame_a.R.w[1];
//   engine.cylinder5.CrankAngle.frame_b.R.w[1] = engine.cylinder5.Mid.frame_a.R.w[1];
//   engine.cylinder5.CrankAngle.frame_b.R.w[2] = engine.cylinder5.CrankShape.frame_a.R.w[2];
//   engine.cylinder5.CrankAngle.frame_b.R.w[2] = engine.cylinder5.Mid.frame_a.R.w[2];
//   engine.cylinder5.CrankAngle.frame_b.R.w[3] = engine.cylinder5.CrankShape.frame_a.R.w[3];
//   engine.cylinder5.CrankAngle.frame_b.R.w[3] = engine.cylinder5.Mid.frame_a.R.w[3];
//   engine.cylinder5.CrankAngle.frame_b.R.T[1,1] = engine.cylinder5.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder5.CrankAngle.frame_b.R.T[1,1] = engine.cylinder5.Mid.frame_a.R.T[1,1];
//   engine.cylinder5.CrankAngle.frame_b.R.T[1,2] = engine.cylinder5.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder5.CrankAngle.frame_b.R.T[1,2] = engine.cylinder5.Mid.frame_a.R.T[1,2];
//   engine.cylinder5.CrankAngle.frame_b.R.T[1,3] = engine.cylinder5.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder5.CrankAngle.frame_b.R.T[1,3] = engine.cylinder5.Mid.frame_a.R.T[1,3];
//   engine.cylinder5.CrankAngle.frame_b.R.T[2,1] = engine.cylinder5.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder5.CrankAngle.frame_b.R.T[2,1] = engine.cylinder5.Mid.frame_a.R.T[2,1];
//   engine.cylinder5.CrankAngle.frame_b.R.T[2,2] = engine.cylinder5.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder5.CrankAngle.frame_b.R.T[2,2] = engine.cylinder5.Mid.frame_a.R.T[2,2];
//   engine.cylinder5.CrankAngle.frame_b.R.T[2,3] = engine.cylinder5.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder5.CrankAngle.frame_b.R.T[2,3] = engine.cylinder5.Mid.frame_a.R.T[2,3];
//   engine.cylinder5.CrankAngle.frame_b.R.T[3,1] = engine.cylinder5.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder5.CrankAngle.frame_b.R.T[3,1] = engine.cylinder5.Mid.frame_a.R.T[3,1];
//   engine.cylinder5.CrankAngle.frame_b.R.T[3,2] = engine.cylinder5.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder5.CrankAngle.frame_b.R.T[3,2] = engine.cylinder5.Mid.frame_a.R.T[3,2];
//   engine.cylinder5.CrankAngle.frame_b.R.T[3,3] = engine.cylinder5.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder5.CrankAngle.frame_b.R.T[3,3] = engine.cylinder5.Mid.frame_a.R.T[3,3];
//   engine.cylinder5.CrankAngle.frame_b.r_0[1] = engine.cylinder5.CrankShape.frame_a.r_0[1];
//   engine.cylinder5.CrankAngle.frame_b.r_0[1] = engine.cylinder5.Mid.frame_a.r_0[1];
//   engine.cylinder5.CrankAngle.frame_b.r_0[2] = engine.cylinder5.CrankShape.frame_a.r_0[2];
//   engine.cylinder5.CrankAngle.frame_b.r_0[2] = engine.cylinder5.Mid.frame_a.r_0[2];
//   engine.cylinder5.CrankAngle.frame_b.r_0[3] = engine.cylinder5.CrankShape.frame_a.r_0[3];
//   engine.cylinder5.CrankAngle.frame_b.r_0[3] = engine.cylinder5.Mid.frame_a.r_0[3];
//   engine.cylinder5.jointRRP.frame_b.t[1] + engine.cylinder5.CylinderInclination.frame_b.t[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_b.t[2] + engine.cylinder5.CylinderInclination.frame_b.t[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_b.t[3] + engine.cylinder5.CylinderInclination.frame_b.t[3] = 0.0;
//   engine.cylinder5.jointRRP.frame_b.f[1] + engine.cylinder5.CylinderInclination.frame_b.f[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_b.f[2] + engine.cylinder5.CylinderInclination.frame_b.f[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_b.f[3] + engine.cylinder5.CylinderInclination.frame_b.f[3] = 0.0;
//   engine.cylinder5.CylinderInclination.frame_b.R.w[1] = engine.cylinder5.jointRRP.frame_b.R.w[1];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.w[1];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.w[1];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[2] = engine.cylinder5.jointRRP.frame_b.R.w[2];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.w[2];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.w[2];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[3] = engine.cylinder5.jointRRP.frame_b.R.w[3];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.w[3];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.w[3];
//   engine.cylinder5.CylinderInclination.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.frame_b.R.T[1,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[1,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.frame_b.R.T[1,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[1,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.frame_b.R.T[1,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[1,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.frame_b.R.T[2,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[2,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.frame_b.R.T[2,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[2,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.frame_b.R.T[2,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[2,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.frame_b.R.T[3,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[3,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.frame_b.R.T[3,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[3,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.frame_b.R.T[3,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.frame_b.R.T[3,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder5.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[1] = engine.cylinder5.jointRRP.frame_b.r_0[1];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.frame_b.r_0[1];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0[1];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.r_0[1];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[2] = engine.cylinder5.jointRRP.frame_b.r_0[2];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.frame_b.r_0[2];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0[2];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.r_0[2];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[3] = engine.cylinder5.jointRRP.frame_b.r_0[3];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.frame_b.r_0[3];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.r_0[3];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.r_0[3];
//   engine.cylinder5.CylinderInclination.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3];
//   engine.cylinder5.jointRRP.frame_ib.t[1] + engine.cylinder5.Piston.frame_b.t[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_ib.t[2] + engine.cylinder5.Piston.frame_b.t[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_ib.t[3] + engine.cylinder5.Piston.frame_b.t[3] = 0.0;
//   engine.cylinder5.jointRRP.frame_ib.f[1] + engine.cylinder5.Piston.frame_b.f[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_ib.f[2] + engine.cylinder5.Piston.frame_b.f[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_ib.f[3] + engine.cylinder5.Piston.frame_b.f[3] = 0.0;
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder5.Piston.frame_b.R.w[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder5.jointRRP.frame_ib.R.w[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.w[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder5.Piston.frame_b.R.w[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder5.jointRRP.frame_ib.R.w[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.w[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder5.Piston.frame_b.R.w[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder5.jointRRP.frame_ib.R.w[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.w[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.w[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.Piston.frame_b.R.T[1,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.frame_ib.R.T[1,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[1,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.Piston.frame_b.R.T[1,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.frame_ib.R.T[1,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[1,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.Piston.frame_b.R.T[1,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.frame_ib.R.T[1,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[1,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.Piston.frame_b.R.T[2,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.frame_ib.R.T[2,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[2,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.Piston.frame_b.R.T[2,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.frame_ib.R.T[2,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[2,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.Piston.frame_b.R.T[2,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.frame_ib.R.T[2,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[2,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.Piston.frame_b.R.T[3,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.frame_ib.R.T[3,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[3,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.Piston.frame_b.R.T[3,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.frame_ib.R.T[3,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[3,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.Piston.frame_b.R.T[3,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.frame_ib.R.T[3,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.frame_ib.R.T[3,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder5.Piston.frame_b.r_0[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder5.jointRRP.frame_ib.r_0[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.frame_ib.r_0[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0[1];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder5.Piston.frame_b.r_0[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder5.jointRRP.frame_ib.r_0[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.frame_ib.r_0[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0[2];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder5.Piston.frame_b.r_0[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder5.jointRRP.frame_ib.r_0[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.frame_ib.r_0[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.r_0[3];
//   engine.cylinder5.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.r_0[3];
//   engine.cylinder5.jointRRP.bearing.f + engine.cylinder5.gasForce.flange_b.f = 0.0;
//   engine.cylinder5.gasForce.flange_b.s = engine.cylinder5.jointRRP.bearing.s;
//   engine.cylinder5.gasForce.flange_b.s = engine.cylinder5.jointRRP.jointUSP.bearing.s;
//   engine.cylinder5.gasForce.flange_b.s = engine.cylinder5.jointRRP.jointUSP.prismatic.bearing.s;
//   engine.cylinder5.gasForce.flange_a.f + engine.cylinder5.jointRRP.axis.f = 0.0;
//   engine.cylinder5.gasForce.flange_a.s = engine.cylinder5.jointRRP.axis.s;
//   engine.cylinder5.gasForce.flange_a.s = engine.cylinder5.jointRRP.jointUSP.axis.s;
//   engine.cylinder5.gasForce.flange_a.s = engine.cylinder5.jointRRP.jointUSP.prismatic.axis.s;
//   engine.cylinder5.Mid.frame_b.t[1] + engine.cylinder5.jointRRP.frame_a.t[1] = 0.0;
//   engine.cylinder5.Mid.frame_b.t[2] + engine.cylinder5.jointRRP.frame_a.t[2] = 0.0;
//   engine.cylinder5.Mid.frame_b.t[3] + engine.cylinder5.jointRRP.frame_a.t[3] = 0.0;
//   engine.cylinder5.Mid.frame_b.f[1] + engine.cylinder5.jointRRP.frame_a.f[1] = 0.0;
//   engine.cylinder5.Mid.frame_b.f[2] + engine.cylinder5.jointRRP.frame_a.f[2] = 0.0;
//   engine.cylinder5.Mid.frame_b.f[3] + engine.cylinder5.jointRRP.frame_a.f[3] = 0.0;
//   engine.cylinder5.Mid.frame_b.R.w[1] = engine.cylinder5.jointRRP.frame_a.R.w[1];
//   engine.cylinder5.Mid.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.w[1];
//   engine.cylinder5.Mid.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.w[1];
//   engine.cylinder5.Mid.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1];
//   engine.cylinder5.Mid.frame_b.R.w[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[1];
//   engine.cylinder5.Mid.frame_b.R.w[2] = engine.cylinder5.jointRRP.frame_a.R.w[2];
//   engine.cylinder5.Mid.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.w[2];
//   engine.cylinder5.Mid.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.w[2];
//   engine.cylinder5.Mid.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2];
//   engine.cylinder5.Mid.frame_b.R.w[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[2];
//   engine.cylinder5.Mid.frame_b.R.w[3] = engine.cylinder5.jointRRP.frame_a.R.w[3];
//   engine.cylinder5.Mid.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.w[3];
//   engine.cylinder5.Mid.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.w[3];
//   engine.cylinder5.Mid.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3];
//   engine.cylinder5.Mid.frame_b.R.w[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.w[3];
//   engine.cylinder5.Mid.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.frame_a.R.T[1,1];
//   engine.cylinder5.Mid.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[1,1];
//   engine.cylinder5.Mid.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder5.Mid.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder5.Mid.frame_b.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[1,1];
//   engine.cylinder5.Mid.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.frame_a.R.T[1,2];
//   engine.cylinder5.Mid.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[1,2];
//   engine.cylinder5.Mid.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder5.Mid.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder5.Mid.frame_b.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[1,2];
//   engine.cylinder5.Mid.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.frame_a.R.T[1,3];
//   engine.cylinder5.Mid.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[1,3];
//   engine.cylinder5.Mid.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder5.Mid.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder5.Mid.frame_b.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[1,3];
//   engine.cylinder5.Mid.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.frame_a.R.T[2,1];
//   engine.cylinder5.Mid.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[2,1];
//   engine.cylinder5.Mid.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder5.Mid.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder5.Mid.frame_b.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[2,1];
//   engine.cylinder5.Mid.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.frame_a.R.T[2,2];
//   engine.cylinder5.Mid.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[2,2];
//   engine.cylinder5.Mid.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder5.Mid.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder5.Mid.frame_b.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[2,2];
//   engine.cylinder5.Mid.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.frame_a.R.T[2,3];
//   engine.cylinder5.Mid.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[2,3];
//   engine.cylinder5.Mid.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder5.Mid.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder5.Mid.frame_b.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[2,3];
//   engine.cylinder5.Mid.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.frame_a.R.T[3,1];
//   engine.cylinder5.Mid.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[3,1];
//   engine.cylinder5.Mid.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder5.Mid.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder5.Mid.frame_b.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[3,1];
//   engine.cylinder5.Mid.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.frame_a.R.T[3,2];
//   engine.cylinder5.Mid.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[3,2];
//   engine.cylinder5.Mid.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder5.Mid.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder5.Mid.frame_b.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[3,2];
//   engine.cylinder5.Mid.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.frame_a.R.T[3,3];
//   engine.cylinder5.Mid.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.frame_a.R.T[3,3];
//   engine.cylinder5.Mid.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder5.Mid.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder5.Mid.frame_b.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.R.T[3,3];
//   engine.cylinder5.Mid.frame_b.r_0[1] = engine.cylinder5.jointRRP.frame_a.r_0[1];
//   engine.cylinder5.Mid.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.frame_a.r_0[1];
//   engine.cylinder5.Mid.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.r_0[1];
//   engine.cylinder5.Mid.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1];
//   engine.cylinder5.Mid.frame_b.r_0[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder5.Mid.frame_b.r_0[2] = engine.cylinder5.jointRRP.frame_a.r_0[2];
//   engine.cylinder5.Mid.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.frame_a.r_0[2];
//   engine.cylinder5.Mid.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.r_0[2];
//   engine.cylinder5.Mid.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2];
//   engine.cylinder5.Mid.frame_b.r_0[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder5.Mid.frame_b.r_0[3] = engine.cylinder5.jointRRP.frame_a.r_0[3];
//   engine.cylinder5.Mid.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.frame_a.r_0[3];
//   engine.cylinder5.Mid.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.r_0[3];
//   engine.cylinder5.Mid.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3];
//   engine.cylinder5.Mid.frame_b.r_0[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder5.jointRRP.frame_ia.t[1] + engine.cylinder5.Rod.frame_a.t[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_ia.t[2] + engine.cylinder5.Rod.frame_a.t[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_ia.t[3] + engine.cylinder5.Rod.frame_a.t[3] = 0.0;
//   engine.cylinder5.jointRRP.frame_ia.f[1] + engine.cylinder5.Rod.frame_a.f[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_ia.f[2] + engine.cylinder5.Rod.frame_a.f[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_ia.f[3] + engine.cylinder5.Rod.frame_a.f[3] = 0.0;
//   engine.cylinder5.Rod.body.frame_a.R.w[1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder5.Rod.body.frame_a.R.w[1] = engine.cylinder5.Rod.frame_a.R.w[1];
//   engine.cylinder5.Rod.body.frame_a.R.w[1] = engine.cylinder5.jointRRP.frame_ia.R.w[1];
//   engine.cylinder5.Rod.body.frame_a.R.w[1] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.w[1];
//   engine.cylinder5.Rod.body.frame_a.R.w[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.w[1];
//   engine.cylinder5.Rod.body.frame_a.R.w[2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder5.Rod.body.frame_a.R.w[2] = engine.cylinder5.Rod.frame_a.R.w[2];
//   engine.cylinder5.Rod.body.frame_a.R.w[2] = engine.cylinder5.jointRRP.frame_ia.R.w[2];
//   engine.cylinder5.Rod.body.frame_a.R.w[2] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.w[2];
//   engine.cylinder5.Rod.body.frame_a.R.w[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.w[2];
//   engine.cylinder5.Rod.body.frame_a.R.w[3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.w[3];
//   engine.cylinder5.Rod.body.frame_a.R.w[3] = engine.cylinder5.Rod.frame_a.R.w[3];
//   engine.cylinder5.Rod.body.frame_a.R.w[3] = engine.cylinder5.jointRRP.frame_ia.R.w[3];
//   engine.cylinder5.Rod.body.frame_a.R.w[3] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.w[3];
//   engine.cylinder5.Rod.body.frame_a.R.w[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.w[3];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,1] = engine.cylinder5.Rod.frame_a.R.T[1,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,1] = engine.cylinder5.jointRRP.frame_ia.R.T[1,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[1,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,2] = engine.cylinder5.Rod.frame_a.R.T[1,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,2] = engine.cylinder5.jointRRP.frame_ia.R.T[1,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[1,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,3] = engine.cylinder5.Rod.frame_a.R.T[1,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,3] = engine.cylinder5.jointRRP.frame_ia.R.T[1,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[1,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,1] = engine.cylinder5.Rod.frame_a.R.T[2,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,1] = engine.cylinder5.jointRRP.frame_ia.R.T[2,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[2,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,2] = engine.cylinder5.Rod.frame_a.R.T[2,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,2] = engine.cylinder5.jointRRP.frame_ia.R.T[2,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[2,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,3] = engine.cylinder5.Rod.frame_a.R.T[2,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,3] = engine.cylinder5.jointRRP.frame_ia.R.T[2,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[2,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,1] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,1] = engine.cylinder5.Rod.frame_a.R.T[3,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,1] = engine.cylinder5.jointRRP.frame_ia.R.T[3,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[3,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,2] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,2] = engine.cylinder5.Rod.frame_a.R.T[3,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,2] = engine.cylinder5.jointRRP.frame_ia.R.T[3,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[3,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,3] = engine.cylinder5.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,3] = engine.cylinder5.Rod.frame_a.R.T[3,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,3] = engine.cylinder5.jointRRP.frame_ia.R.T[3,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.frame_ia.R.T[3,3];
//   engine.cylinder5.Rod.body.frame_a.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3];
//   engine.cylinder5.Rod.body.frame_a.r_0[1] = engine.cylinder5.Rod.frameTranslation.frame_a.r_0[1];
//   engine.cylinder5.Rod.body.frame_a.r_0[1] = engine.cylinder5.Rod.frame_a.r_0[1];
//   engine.cylinder5.Rod.body.frame_a.r_0[1] = engine.cylinder5.jointRRP.frame_ia.r_0[1];
//   engine.cylinder5.Rod.body.frame_a.r_0[1] = engine.cylinder5.jointRRP.jointUSP.frame_ia.r_0[1];
//   engine.cylinder5.Rod.body.frame_a.r_0[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[1];
//   engine.cylinder5.Rod.body.frame_a.r_0[2] = engine.cylinder5.Rod.frameTranslation.frame_a.r_0[2];
//   engine.cylinder5.Rod.body.frame_a.r_0[2] = engine.cylinder5.Rod.frame_a.r_0[2];
//   engine.cylinder5.Rod.body.frame_a.r_0[2] = engine.cylinder5.jointRRP.frame_ia.r_0[2];
//   engine.cylinder5.Rod.body.frame_a.r_0[2] = engine.cylinder5.jointRRP.jointUSP.frame_ia.r_0[2];
//   engine.cylinder5.Rod.body.frame_a.r_0[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[2];
//   engine.cylinder5.Rod.body.frame_a.r_0[3] = engine.cylinder5.Rod.frameTranslation.frame_a.r_0[3];
//   engine.cylinder5.Rod.body.frame_a.r_0[3] = engine.cylinder5.Rod.frame_a.r_0[3];
//   engine.cylinder5.Rod.body.frame_a.r_0[3] = engine.cylinder5.jointRRP.frame_ia.r_0[3];
//   engine.cylinder5.Rod.body.frame_a.r_0[3] = engine.cylinder5.jointRRP.jointUSP.frame_ia.r_0[3];
//   engine.cylinder5.Rod.body.frame_a.r_0[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.r_0[3];
//   (-engine.cylinder5.Piston.frame_a.t[1]) + (engine.cylinder5.Piston.frameTranslation.frame_a.t[1] + engine.cylinder5.Piston.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder5.Piston.frame_a.t[2]) + (engine.cylinder5.Piston.frameTranslation.frame_a.t[2] + engine.cylinder5.Piston.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder5.Piston.frame_a.t[3]) + (engine.cylinder5.Piston.frameTranslation.frame_a.t[3] + engine.cylinder5.Piston.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder5.Piston.frame_a.f[1]) + (engine.cylinder5.Piston.frameTranslation.frame_a.f[1] + engine.cylinder5.Piston.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder5.Piston.frame_a.f[2]) + (engine.cylinder5.Piston.frameTranslation.frame_a.f[2] + engine.cylinder5.Piston.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder5.Piston.frame_a.f[3]) + (engine.cylinder5.Piston.frameTranslation.frame_a.f[3] + engine.cylinder5.Piston.body.frame_a.f[3]) = 0.0;
//   engine.cylinder5.Piston.body.frame_a.R.w[1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder5.Piston.body.frame_a.R.w[1] = engine.cylinder5.Piston.frame_a.R.w[1];
//   engine.cylinder5.Piston.body.frame_a.R.w[2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder5.Piston.body.frame_a.R.w[2] = engine.cylinder5.Piston.frame_a.R.w[2];
//   engine.cylinder5.Piston.body.frame_a.R.w[3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.w[3];
//   engine.cylinder5.Piston.body.frame_a.R.w[3] = engine.cylinder5.Piston.frame_a.R.w[3];
//   engine.cylinder5.Piston.body.frame_a.R.T[1,1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder5.Piston.body.frame_a.R.T[1,1] = engine.cylinder5.Piston.frame_a.R.T[1,1];
//   engine.cylinder5.Piston.body.frame_a.R.T[1,2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder5.Piston.body.frame_a.R.T[1,2] = engine.cylinder5.Piston.frame_a.R.T[1,2];
//   engine.cylinder5.Piston.body.frame_a.R.T[1,3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder5.Piston.body.frame_a.R.T[1,3] = engine.cylinder5.Piston.frame_a.R.T[1,3];
//   engine.cylinder5.Piston.body.frame_a.R.T[2,1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder5.Piston.body.frame_a.R.T[2,1] = engine.cylinder5.Piston.frame_a.R.T[2,1];
//   engine.cylinder5.Piston.body.frame_a.R.T[2,2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder5.Piston.body.frame_a.R.T[2,2] = engine.cylinder5.Piston.frame_a.R.T[2,2];
//   engine.cylinder5.Piston.body.frame_a.R.T[2,3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder5.Piston.body.frame_a.R.T[2,3] = engine.cylinder5.Piston.frame_a.R.T[2,3];
//   engine.cylinder5.Piston.body.frame_a.R.T[3,1] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder5.Piston.body.frame_a.R.T[3,1] = engine.cylinder5.Piston.frame_a.R.T[3,1];
//   engine.cylinder5.Piston.body.frame_a.R.T[3,2] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder5.Piston.body.frame_a.R.T[3,2] = engine.cylinder5.Piston.frame_a.R.T[3,2];
//   engine.cylinder5.Piston.body.frame_a.R.T[3,3] = engine.cylinder5.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder5.Piston.body.frame_a.R.T[3,3] = engine.cylinder5.Piston.frame_a.R.T[3,3];
//   engine.cylinder5.Piston.body.frame_a.r_0[1] = engine.cylinder5.Piston.frameTranslation.frame_a.r_0[1];
//   engine.cylinder5.Piston.body.frame_a.r_0[1] = engine.cylinder5.Piston.frame_a.r_0[1];
//   engine.cylinder5.Piston.body.frame_a.r_0[2] = engine.cylinder5.Piston.frameTranslation.frame_a.r_0[2];
//   engine.cylinder5.Piston.body.frame_a.r_0[2] = engine.cylinder5.Piston.frame_a.r_0[2];
//   engine.cylinder5.Piston.body.frame_a.r_0[3] = engine.cylinder5.Piston.frameTranslation.frame_a.r_0[3];
//   engine.cylinder5.Piston.body.frame_a.r_0[3] = engine.cylinder5.Piston.frame_a.r_0[3];
//   (-engine.cylinder5.Piston.frame_b.t[1]) + engine.cylinder5.Piston.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder5.Piston.frame_b.t[2]) + engine.cylinder5.Piston.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder5.Piston.frame_b.t[3]) + engine.cylinder5.Piston.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder5.Piston.frame_b.f[1]) + engine.cylinder5.Piston.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder5.Piston.frame_b.f[2]) + engine.cylinder5.Piston.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder5.Piston.frame_b.f[3]) + engine.cylinder5.Piston.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder5.Piston.frame_a.t[3] = 0.0;
//   engine.cylinder5.Piston.frame_a.t[2] = 0.0;
//   engine.cylinder5.Piston.frame_a.t[1] = 0.0;
//   engine.cylinder5.Piston.frame_a.f[3] = 0.0;
//   engine.cylinder5.Piston.frame_a.f[2] = 0.0;
//   engine.cylinder5.Piston.frame_a.f[1] = 0.0;
//   (-engine.cylinder5.Rod.frame_a.t[1]) + (engine.cylinder5.Rod.frameTranslation.frame_a.t[1] + engine.cylinder5.Rod.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder5.Rod.frame_a.t[2]) + (engine.cylinder5.Rod.frameTranslation.frame_a.t[2] + engine.cylinder5.Rod.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder5.Rod.frame_a.t[3]) + (engine.cylinder5.Rod.frameTranslation.frame_a.t[3] + engine.cylinder5.Rod.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder5.Rod.frame_a.f[1]) + (engine.cylinder5.Rod.frameTranslation.frame_a.f[1] + engine.cylinder5.Rod.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder5.Rod.frame_a.f[2]) + (engine.cylinder5.Rod.frameTranslation.frame_a.f[2] + engine.cylinder5.Rod.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder5.Rod.frame_a.f[3]) + (engine.cylinder5.Rod.frameTranslation.frame_a.f[3] + engine.cylinder5.Rod.body.frame_a.f[3]) = 0.0;
//   (-engine.cylinder5.Rod.frame_b.t[1]) + engine.cylinder5.Rod.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder5.Rod.frame_b.t[2]) + engine.cylinder5.Rod.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder5.Rod.frame_b.t[3]) + engine.cylinder5.Rod.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder5.Rod.frame_b.f[1]) + engine.cylinder5.Rod.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder5.Rod.frame_b.f[2]) + engine.cylinder5.Rod.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder5.Rod.frame_b.f[3]) + engine.cylinder5.Rod.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder5.Rod.frame_b.R.w[1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder5.Rod.frame_b.R.w[2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder5.Rod.frame_b.R.w[3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder5.Rod.frame_b.R.T[1,1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder5.Rod.frame_b.R.T[1,2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder5.Rod.frame_b.R.T[1,3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder5.Rod.frame_b.R.T[2,1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder5.Rod.frame_b.R.T[2,2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder5.Rod.frame_b.R.T[2,3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder5.Rod.frame_b.R.T[3,1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder5.Rod.frame_b.R.T[3,2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder5.Rod.frame_b.R.T[3,3];
//   engine.cylinder5.Rod.frameTranslation.frame_b.r_0[1] = engine.cylinder5.Rod.frame_b.r_0[1];
//   engine.cylinder5.Rod.frameTranslation.frame_b.r_0[2] = engine.cylinder5.Rod.frame_b.r_0[2];
//   engine.cylinder5.Rod.frameTranslation.frame_b.r_0[3] = engine.cylinder5.Rod.frame_b.r_0[3];
//   engine.cylinder5.Rod.frame_b.t[3] = 0.0;
//   engine.cylinder5.Rod.frame_b.t[2] = 0.0;
//   engine.cylinder5.Rod.frame_b.t[1] = 0.0;
//   engine.cylinder5.Rod.frame_b.f[3] = 0.0;
//   engine.cylinder5.Rod.frame_b.f[2] = 0.0;
//   engine.cylinder5.Rod.frame_b.f[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.bearing.f + (-engine.cylinder5.jointRRP.bearing.f) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.axis.f + (-engine.cylinder5.jointRRP.axis.f) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ib.t[1] + (-engine.cylinder5.jointRRP.frame_ib.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ib.t[2] + (-engine.cylinder5.jointRRP.frame_ib.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ib.t[3] + (-engine.cylinder5.jointRRP.frame_ib.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ib.f[1] + (-engine.cylinder5.jointRRP.frame_ib.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ib.f[2] + (-engine.cylinder5.jointRRP.frame_ib.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ib.f[3] + (-engine.cylinder5.jointRRP.frame_ib.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_im.t[1] + (-engine.cylinder5.jointRRP.frame_im.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_im.t[2] + (-engine.cylinder5.jointRRP.frame_im.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_im.t[3] + (-engine.cylinder5.jointRRP.frame_im.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_im.f[1] + (-engine.cylinder5.jointRRP.frame_im.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_im.f[2] + (-engine.cylinder5.jointRRP.frame_im.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_im.f[3] + (-engine.cylinder5.jointRRP.frame_im.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.frame_im.R.w[1] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.w[1];
//   engine.cylinder5.jointRRP.frame_im.R.w[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.w[1];
//   engine.cylinder5.jointRRP.frame_im.R.w[1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[1];
//   engine.cylinder5.jointRRP.frame_im.R.w[2] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.w[2];
//   engine.cylinder5.jointRRP.frame_im.R.w[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.w[2];
//   engine.cylinder5.jointRRP.frame_im.R.w[2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[2];
//   engine.cylinder5.jointRRP.frame_im.R.w[3] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.w[3];
//   engine.cylinder5.jointRRP.frame_im.R.w[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.w[3];
//   engine.cylinder5.jointRRP.frame_im.R.w[3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.w[3];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[1,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[1,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[1,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[1,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[1,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[1,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[1,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[2,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[2,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[2,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[2,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[2,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[2,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[2,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[3,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[3,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,1];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[3,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[3,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,2];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.frame_im.R.T[3,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.R.T[3,3];
//   engine.cylinder5.jointRRP.frame_im.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.R.T[3,3];
//   engine.cylinder5.jointRRP.frame_im.r_0[1] = engine.cylinder5.jointRRP.jointUSP.frame_im.r_0[1];
//   engine.cylinder5.jointRRP.frame_im.r_0[1] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[1];
//   engine.cylinder5.jointRRP.frame_im.r_0[1] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0[1];
//   engine.cylinder5.jointRRP.frame_im.r_0[2] = engine.cylinder5.jointRRP.jointUSP.frame_im.r_0[2];
//   engine.cylinder5.jointRRP.frame_im.r_0[2] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[2];
//   engine.cylinder5.jointRRP.frame_im.r_0[2] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0[2];
//   engine.cylinder5.jointRRP.frame_im.r_0[3] = engine.cylinder5.jointRRP.jointUSP.frame_im.r_0[3];
//   engine.cylinder5.jointRRP.frame_im.r_0[3] = engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.r_0[3];
//   engine.cylinder5.jointRRP.frame_im.r_0[3] = engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.r_0[3];
//   engine.cylinder5.jointRRP.jointUSP.frame_ia.t[1] + (-engine.cylinder5.jointRRP.frame_ia.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ia.t[2] + (-engine.cylinder5.jointRRP.frame_ia.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ia.t[3] + (-engine.cylinder5.jointRRP.frame_ia.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ia.f[1] + (-engine.cylinder5.jointRRP.frame_ia.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ia.f[2] + (-engine.cylinder5.jointRRP.frame_ia.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_ia.f[3] + (-engine.cylinder5.jointRRP.frame_ia.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_b.t[1] + (-engine.cylinder5.jointRRP.frame_b.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_b.t[2] + (-engine.cylinder5.jointRRP.frame_b.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_b.t[3] + (-engine.cylinder5.jointRRP.frame_b.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_b.f[1] + (-engine.cylinder5.jointRRP.frame_b.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_b.f[2] + (-engine.cylinder5.jointRRP.frame_b.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_b.f[3] + (-engine.cylinder5.jointRRP.frame_b.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_a.t[1] + (-engine.cylinder5.jointRRP.frame_a.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_a.t[2] + (-engine.cylinder5.jointRRP.frame_a.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_a.t[3] + (-engine.cylinder5.jointRRP.frame_a.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_a.f[1] + (-engine.cylinder5.jointRRP.frame_a.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_a.f[2] + (-engine.cylinder5.jointRRP.frame_a.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.frame_a.f[3] + (-engine.cylinder5.jointRRP.frame_a.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.r_rel[1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.r_rel[2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.r_rel[3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3];
//   engine.cylinder5.jointRRP.jointUSP.prismatic.bearing.f + (-engine.cylinder5.jointRRP.jointUSP.bearing.f) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.axis.f + (-engine.cylinder5.jointRRP.jointUSP.axis.f) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.position_b[1].y = engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[1];
//   engine.cylinder5.jointRRP.jointUSP.position_b[2].y = engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[2];
//   engine.cylinder5.jointRRP.jointUSP.position_b[3].y = engine.cylinder5.jointRRP.jointUSP.prismatic.position_b[3];
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_ia.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_ia.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.t[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_ia.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_ia.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_ia.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod1.frame_ia.f[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_ia.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_im.t[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_im.t[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.t[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_im.t[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_im.f[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_im.f[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.rod2.frame_b.f[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_b.f[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_im.f[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[1] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_b.t[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[2] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_b.t[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[3] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.t[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_b.t[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[1] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_b.f[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[2] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_b.f[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[3] + (engine.cylinder5.jointRRP.jointUSP.prismatic.frame_a.f[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_b.f[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_a.t[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_a.t[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.t[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_a.t[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[1] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_a.f[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[2] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_a.f[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[3] + (engine.cylinder5.jointRRP.jointUSP.rod1.frame_a.f[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_a.f[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_ib.t[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_ib.t[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.t[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_ib.t[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[1] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[1] + (-engine.cylinder5.jointRRP.jointUSP.frame_ib.f[1])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[2] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[2] + (-engine.cylinder5.jointRRP.jointUSP.frame_ib.f[2])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.prismatic.frame_b.f[3] + (engine.cylinder5.jointRRP.jointUSP.rod2.frame_a.f[3] + (-engine.cylinder5.jointRRP.jointUSP.frame_ib.f[3])) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1] + engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2] + engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3] + engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1] + engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2] + engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3] + engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3] = engine.cylinder5.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_b.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.t[3]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[1]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[2]) = 0.0;
//   engine.cylinder5.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] + (-engine.cylinder5.jointRRP.jointUSP.relativePosition.frame_a.f[3]) = 0.0;
//   engine.cylinder5.jointRRP.frame_im.t[3] = 0.0;
//   engine.cylinder5.jointRRP.frame_im.t[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_im.t[1] = 0.0;
//   engine.cylinder5.jointRRP.frame_im.f[3] = 0.0;
//   engine.cylinder5.jointRRP.frame_im.f[2] = 0.0;
//   engine.cylinder5.jointRRP.frame_im.f[1] = 0.0;
//   engine.cylinder4.Crank.frame_b.t[1] + (-engine.cylinder4.crank_b.t[1]) = 0.0;
//   engine.cylinder4.Crank.frame_b.t[2] + (-engine.cylinder4.crank_b.t[2]) = 0.0;
//   engine.cylinder4.Crank.frame_b.t[3] + (-engine.cylinder4.crank_b.t[3]) = 0.0;
//   engine.cylinder4.Crank.frame_b.f[1] + (-engine.cylinder4.crank_b.f[1]) = 0.0;
//   engine.cylinder4.Crank.frame_b.f[2] + (-engine.cylinder4.crank_b.f[2]) = 0.0;
//   engine.cylinder4.Crank.frame_b.f[3] + (-engine.cylinder4.crank_b.f[3]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_a.t[1] + ((-engine.cylinder4.crank_a.t[1]) + engine.cylinder4.Crank.frame_a.t[1]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_a.t[2] + ((-engine.cylinder4.crank_a.t[2]) + engine.cylinder4.Crank.frame_a.t[2]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_a.t[3] + ((-engine.cylinder4.crank_a.t[3]) + engine.cylinder4.Crank.frame_a.t[3]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_a.f[1] + ((-engine.cylinder4.crank_a.f[1]) + engine.cylinder4.Crank.frame_a.f[1]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_a.f[2] + ((-engine.cylinder4.crank_a.f[2]) + engine.cylinder4.Crank.frame_a.f[2]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_a.f[3] + ((-engine.cylinder4.crank_a.f[3]) + engine.cylinder4.Crank.frame_a.f[3]) = 0.0;
//   (-engine.cylinder4.cylinder_b.t[1]) + engine.cylinder4.Mounting.frame_b.t[1] = 0.0;
//   (-engine.cylinder4.cylinder_b.t[2]) + engine.cylinder4.Mounting.frame_b.t[2] = 0.0;
//   (-engine.cylinder4.cylinder_b.t[3]) + engine.cylinder4.Mounting.frame_b.t[3] = 0.0;
//   (-engine.cylinder4.cylinder_b.f[1]) + engine.cylinder4.Mounting.frame_b.f[1] = 0.0;
//   (-engine.cylinder4.cylinder_b.f[2]) + engine.cylinder4.Mounting.frame_b.f[2] = 0.0;
//   (-engine.cylinder4.cylinder_b.f[3]) + engine.cylinder4.Mounting.frame_b.f[3] = 0.0;
//   (-engine.cylinder4.cylinder_a.t[1]) + (engine.cylinder4.CylinderInclination.frame_a.t[1] + engine.cylinder4.Mounting.frame_a.t[1]) = 0.0;
//   (-engine.cylinder4.cylinder_a.t[2]) + (engine.cylinder4.CylinderInclination.frame_a.t[2] + engine.cylinder4.Mounting.frame_a.t[2]) = 0.0;
//   (-engine.cylinder4.cylinder_a.t[3]) + (engine.cylinder4.CylinderInclination.frame_a.t[3] + engine.cylinder4.Mounting.frame_a.t[3]) = 0.0;
//   (-engine.cylinder4.cylinder_a.f[1]) + (engine.cylinder4.CylinderInclination.frame_a.f[1] + engine.cylinder4.Mounting.frame_a.f[1]) = 0.0;
//   (-engine.cylinder4.cylinder_a.f[2]) + (engine.cylinder4.CylinderInclination.frame_a.f[2] + engine.cylinder4.Mounting.frame_a.f[2]) = 0.0;
//   (-engine.cylinder4.cylinder_a.f[3]) + (engine.cylinder4.CylinderInclination.frame_a.f[3] + engine.cylinder4.Mounting.frame_a.f[3]) = 0.0;
//   engine.cylinder4.CrankShape.frame_a.t[1] + (engine.cylinder4.CrankAngle.frame_b.t[1] + engine.cylinder4.Mid.frame_a.t[1]) = 0.0;
//   engine.cylinder4.CrankShape.frame_a.t[2] + (engine.cylinder4.CrankAngle.frame_b.t[2] + engine.cylinder4.Mid.frame_a.t[2]) = 0.0;
//   engine.cylinder4.CrankShape.frame_a.t[3] + (engine.cylinder4.CrankAngle.frame_b.t[3] + engine.cylinder4.Mid.frame_a.t[3]) = 0.0;
//   engine.cylinder4.CrankShape.frame_a.f[1] + (engine.cylinder4.CrankAngle.frame_b.f[1] + engine.cylinder4.Mid.frame_a.f[1]) = 0.0;
//   engine.cylinder4.CrankShape.frame_a.f[2] + (engine.cylinder4.CrankAngle.frame_b.f[2] + engine.cylinder4.Mid.frame_a.f[2]) = 0.0;
//   engine.cylinder4.CrankShape.frame_a.f[3] + (engine.cylinder4.CrankAngle.frame_b.f[3] + engine.cylinder4.Mid.frame_a.f[3]) = 0.0;
//   engine.cylinder4.CrankAngle.frame_b.R.w[1] = engine.cylinder4.CrankShape.frame_a.R.w[1];
//   engine.cylinder4.CrankAngle.frame_b.R.w[1] = engine.cylinder4.Mid.frame_a.R.w[1];
//   engine.cylinder4.CrankAngle.frame_b.R.w[2] = engine.cylinder4.CrankShape.frame_a.R.w[2];
//   engine.cylinder4.CrankAngle.frame_b.R.w[2] = engine.cylinder4.Mid.frame_a.R.w[2];
//   engine.cylinder4.CrankAngle.frame_b.R.w[3] = engine.cylinder4.CrankShape.frame_a.R.w[3];
//   engine.cylinder4.CrankAngle.frame_b.R.w[3] = engine.cylinder4.Mid.frame_a.R.w[3];
//   engine.cylinder4.CrankAngle.frame_b.R.T[1,1] = engine.cylinder4.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder4.CrankAngle.frame_b.R.T[1,1] = engine.cylinder4.Mid.frame_a.R.T[1,1];
//   engine.cylinder4.CrankAngle.frame_b.R.T[1,2] = engine.cylinder4.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder4.CrankAngle.frame_b.R.T[1,2] = engine.cylinder4.Mid.frame_a.R.T[1,2];
//   engine.cylinder4.CrankAngle.frame_b.R.T[1,3] = engine.cylinder4.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder4.CrankAngle.frame_b.R.T[1,3] = engine.cylinder4.Mid.frame_a.R.T[1,3];
//   engine.cylinder4.CrankAngle.frame_b.R.T[2,1] = engine.cylinder4.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder4.CrankAngle.frame_b.R.T[2,1] = engine.cylinder4.Mid.frame_a.R.T[2,1];
//   engine.cylinder4.CrankAngle.frame_b.R.T[2,2] = engine.cylinder4.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder4.CrankAngle.frame_b.R.T[2,2] = engine.cylinder4.Mid.frame_a.R.T[2,2];
//   engine.cylinder4.CrankAngle.frame_b.R.T[2,3] = engine.cylinder4.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder4.CrankAngle.frame_b.R.T[2,3] = engine.cylinder4.Mid.frame_a.R.T[2,3];
//   engine.cylinder4.CrankAngle.frame_b.R.T[3,1] = engine.cylinder4.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder4.CrankAngle.frame_b.R.T[3,1] = engine.cylinder4.Mid.frame_a.R.T[3,1];
//   engine.cylinder4.CrankAngle.frame_b.R.T[3,2] = engine.cylinder4.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder4.CrankAngle.frame_b.R.T[3,2] = engine.cylinder4.Mid.frame_a.R.T[3,2];
//   engine.cylinder4.CrankAngle.frame_b.R.T[3,3] = engine.cylinder4.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder4.CrankAngle.frame_b.R.T[3,3] = engine.cylinder4.Mid.frame_a.R.T[3,3];
//   engine.cylinder4.CrankAngle.frame_b.r_0[1] = engine.cylinder4.CrankShape.frame_a.r_0[1];
//   engine.cylinder4.CrankAngle.frame_b.r_0[1] = engine.cylinder4.Mid.frame_a.r_0[1];
//   engine.cylinder4.CrankAngle.frame_b.r_0[2] = engine.cylinder4.CrankShape.frame_a.r_0[2];
//   engine.cylinder4.CrankAngle.frame_b.r_0[2] = engine.cylinder4.Mid.frame_a.r_0[2];
//   engine.cylinder4.CrankAngle.frame_b.r_0[3] = engine.cylinder4.CrankShape.frame_a.r_0[3];
//   engine.cylinder4.CrankAngle.frame_b.r_0[3] = engine.cylinder4.Mid.frame_a.r_0[3];
//   engine.cylinder4.jointRRP.frame_b.t[1] + engine.cylinder4.CylinderInclination.frame_b.t[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_b.t[2] + engine.cylinder4.CylinderInclination.frame_b.t[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_b.t[3] + engine.cylinder4.CylinderInclination.frame_b.t[3] = 0.0;
//   engine.cylinder4.jointRRP.frame_b.f[1] + engine.cylinder4.CylinderInclination.frame_b.f[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_b.f[2] + engine.cylinder4.CylinderInclination.frame_b.f[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_b.f[3] + engine.cylinder4.CylinderInclination.frame_b.f[3] = 0.0;
//   engine.cylinder4.CylinderInclination.frame_b.R.w[1] = engine.cylinder4.jointRRP.frame_b.R.w[1];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.w[1];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.w[1];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[2] = engine.cylinder4.jointRRP.frame_b.R.w[2];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.w[2];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.w[2];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[3] = engine.cylinder4.jointRRP.frame_b.R.w[3];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.w[3];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.w[3];
//   engine.cylinder4.CylinderInclination.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.frame_b.R.T[1,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[1,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.frame_b.R.T[1,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[1,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.frame_b.R.T[1,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[1,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.frame_b.R.T[2,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[2,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.frame_b.R.T[2,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[2,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.frame_b.R.T[2,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[2,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.frame_b.R.T[3,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[3,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.frame_b.R.T[3,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[3,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.frame_b.R.T[3,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.frame_b.R.T[3,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder4.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[1] = engine.cylinder4.jointRRP.frame_b.r_0[1];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.frame_b.r_0[1];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0[1];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.r_0[1];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[2] = engine.cylinder4.jointRRP.frame_b.r_0[2];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.frame_b.r_0[2];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0[2];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.r_0[2];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[3] = engine.cylinder4.jointRRP.frame_b.r_0[3];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.frame_b.r_0[3];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.r_0[3];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.r_0[3];
//   engine.cylinder4.CylinderInclination.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3];
//   engine.cylinder4.jointRRP.frame_ib.t[1] + engine.cylinder4.Piston.frame_b.t[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_ib.t[2] + engine.cylinder4.Piston.frame_b.t[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_ib.t[3] + engine.cylinder4.Piston.frame_b.t[3] = 0.0;
//   engine.cylinder4.jointRRP.frame_ib.f[1] + engine.cylinder4.Piston.frame_b.f[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_ib.f[2] + engine.cylinder4.Piston.frame_b.f[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_ib.f[3] + engine.cylinder4.Piston.frame_b.f[3] = 0.0;
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder4.Piston.frame_b.R.w[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder4.jointRRP.frame_ib.R.w[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.w[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder4.Piston.frame_b.R.w[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder4.jointRRP.frame_ib.R.w[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.w[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder4.Piston.frame_b.R.w[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder4.jointRRP.frame_ib.R.w[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.w[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.w[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.Piston.frame_b.R.T[1,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.frame_ib.R.T[1,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[1,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.Piston.frame_b.R.T[1,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.frame_ib.R.T[1,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[1,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.Piston.frame_b.R.T[1,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.frame_ib.R.T[1,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[1,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.Piston.frame_b.R.T[2,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.frame_ib.R.T[2,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[2,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.Piston.frame_b.R.T[2,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.frame_ib.R.T[2,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[2,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.Piston.frame_b.R.T[2,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.frame_ib.R.T[2,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[2,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.Piston.frame_b.R.T[3,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.frame_ib.R.T[3,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[3,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.Piston.frame_b.R.T[3,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.frame_ib.R.T[3,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[3,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.Piston.frame_b.R.T[3,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.frame_ib.R.T[3,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.frame_ib.R.T[3,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder4.Piston.frame_b.r_0[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder4.jointRRP.frame_ib.r_0[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.frame_ib.r_0[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0[1];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder4.Piston.frame_b.r_0[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder4.jointRRP.frame_ib.r_0[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.frame_ib.r_0[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0[2];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder4.Piston.frame_b.r_0[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder4.jointRRP.frame_ib.r_0[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.frame_ib.r_0[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.r_0[3];
//   engine.cylinder4.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.r_0[3];
//   engine.cylinder4.jointRRP.bearing.f + engine.cylinder4.gasForce.flange_b.f = 0.0;
//   engine.cylinder4.gasForce.flange_b.s = engine.cylinder4.jointRRP.bearing.s;
//   engine.cylinder4.gasForce.flange_b.s = engine.cylinder4.jointRRP.jointUSP.bearing.s;
//   engine.cylinder4.gasForce.flange_b.s = engine.cylinder4.jointRRP.jointUSP.prismatic.bearing.s;
//   engine.cylinder4.gasForce.flange_a.f + engine.cylinder4.jointRRP.axis.f = 0.0;
//   engine.cylinder4.gasForce.flange_a.s = engine.cylinder4.jointRRP.axis.s;
//   engine.cylinder4.gasForce.flange_a.s = engine.cylinder4.jointRRP.jointUSP.axis.s;
//   engine.cylinder4.gasForce.flange_a.s = engine.cylinder4.jointRRP.jointUSP.prismatic.axis.s;
//   engine.cylinder4.Mid.frame_b.t[1] + engine.cylinder4.jointRRP.frame_a.t[1] = 0.0;
//   engine.cylinder4.Mid.frame_b.t[2] + engine.cylinder4.jointRRP.frame_a.t[2] = 0.0;
//   engine.cylinder4.Mid.frame_b.t[3] + engine.cylinder4.jointRRP.frame_a.t[3] = 0.0;
//   engine.cylinder4.Mid.frame_b.f[1] + engine.cylinder4.jointRRP.frame_a.f[1] = 0.0;
//   engine.cylinder4.Mid.frame_b.f[2] + engine.cylinder4.jointRRP.frame_a.f[2] = 0.0;
//   engine.cylinder4.Mid.frame_b.f[3] + engine.cylinder4.jointRRP.frame_a.f[3] = 0.0;
//   engine.cylinder4.Mid.frame_b.R.w[1] = engine.cylinder4.jointRRP.frame_a.R.w[1];
//   engine.cylinder4.Mid.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.w[1];
//   engine.cylinder4.Mid.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.w[1];
//   engine.cylinder4.Mid.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1];
//   engine.cylinder4.Mid.frame_b.R.w[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[1];
//   engine.cylinder4.Mid.frame_b.R.w[2] = engine.cylinder4.jointRRP.frame_a.R.w[2];
//   engine.cylinder4.Mid.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.w[2];
//   engine.cylinder4.Mid.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.w[2];
//   engine.cylinder4.Mid.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2];
//   engine.cylinder4.Mid.frame_b.R.w[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[2];
//   engine.cylinder4.Mid.frame_b.R.w[3] = engine.cylinder4.jointRRP.frame_a.R.w[3];
//   engine.cylinder4.Mid.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.w[3];
//   engine.cylinder4.Mid.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.w[3];
//   engine.cylinder4.Mid.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3];
//   engine.cylinder4.Mid.frame_b.R.w[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.w[3];
//   engine.cylinder4.Mid.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.frame_a.R.T[1,1];
//   engine.cylinder4.Mid.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[1,1];
//   engine.cylinder4.Mid.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder4.Mid.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder4.Mid.frame_b.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[1,1];
//   engine.cylinder4.Mid.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.frame_a.R.T[1,2];
//   engine.cylinder4.Mid.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[1,2];
//   engine.cylinder4.Mid.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder4.Mid.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder4.Mid.frame_b.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[1,2];
//   engine.cylinder4.Mid.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.frame_a.R.T[1,3];
//   engine.cylinder4.Mid.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[1,3];
//   engine.cylinder4.Mid.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder4.Mid.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder4.Mid.frame_b.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[1,3];
//   engine.cylinder4.Mid.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.frame_a.R.T[2,1];
//   engine.cylinder4.Mid.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[2,1];
//   engine.cylinder4.Mid.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder4.Mid.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder4.Mid.frame_b.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[2,1];
//   engine.cylinder4.Mid.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.frame_a.R.T[2,2];
//   engine.cylinder4.Mid.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[2,2];
//   engine.cylinder4.Mid.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder4.Mid.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder4.Mid.frame_b.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[2,2];
//   engine.cylinder4.Mid.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.frame_a.R.T[2,3];
//   engine.cylinder4.Mid.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[2,3];
//   engine.cylinder4.Mid.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder4.Mid.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder4.Mid.frame_b.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[2,3];
//   engine.cylinder4.Mid.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.frame_a.R.T[3,1];
//   engine.cylinder4.Mid.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[3,1];
//   engine.cylinder4.Mid.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder4.Mid.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder4.Mid.frame_b.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[3,1];
//   engine.cylinder4.Mid.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.frame_a.R.T[3,2];
//   engine.cylinder4.Mid.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[3,2];
//   engine.cylinder4.Mid.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder4.Mid.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder4.Mid.frame_b.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[3,2];
//   engine.cylinder4.Mid.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.frame_a.R.T[3,3];
//   engine.cylinder4.Mid.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.frame_a.R.T[3,3];
//   engine.cylinder4.Mid.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder4.Mid.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder4.Mid.frame_b.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.R.T[3,3];
//   engine.cylinder4.Mid.frame_b.r_0[1] = engine.cylinder4.jointRRP.frame_a.r_0[1];
//   engine.cylinder4.Mid.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.frame_a.r_0[1];
//   engine.cylinder4.Mid.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.r_0[1];
//   engine.cylinder4.Mid.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1];
//   engine.cylinder4.Mid.frame_b.r_0[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder4.Mid.frame_b.r_0[2] = engine.cylinder4.jointRRP.frame_a.r_0[2];
//   engine.cylinder4.Mid.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.frame_a.r_0[2];
//   engine.cylinder4.Mid.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.r_0[2];
//   engine.cylinder4.Mid.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2];
//   engine.cylinder4.Mid.frame_b.r_0[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder4.Mid.frame_b.r_0[3] = engine.cylinder4.jointRRP.frame_a.r_0[3];
//   engine.cylinder4.Mid.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.frame_a.r_0[3];
//   engine.cylinder4.Mid.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.r_0[3];
//   engine.cylinder4.Mid.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3];
//   engine.cylinder4.Mid.frame_b.r_0[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder4.jointRRP.frame_ia.t[1] + engine.cylinder4.Rod.frame_a.t[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_ia.t[2] + engine.cylinder4.Rod.frame_a.t[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_ia.t[3] + engine.cylinder4.Rod.frame_a.t[3] = 0.0;
//   engine.cylinder4.jointRRP.frame_ia.f[1] + engine.cylinder4.Rod.frame_a.f[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_ia.f[2] + engine.cylinder4.Rod.frame_a.f[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_ia.f[3] + engine.cylinder4.Rod.frame_a.f[3] = 0.0;
//   engine.cylinder4.Rod.body.frame_a.R.w[1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder4.Rod.body.frame_a.R.w[1] = engine.cylinder4.Rod.frame_a.R.w[1];
//   engine.cylinder4.Rod.body.frame_a.R.w[1] = engine.cylinder4.jointRRP.frame_ia.R.w[1];
//   engine.cylinder4.Rod.body.frame_a.R.w[1] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.w[1];
//   engine.cylinder4.Rod.body.frame_a.R.w[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.w[1];
//   engine.cylinder4.Rod.body.frame_a.R.w[2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder4.Rod.body.frame_a.R.w[2] = engine.cylinder4.Rod.frame_a.R.w[2];
//   engine.cylinder4.Rod.body.frame_a.R.w[2] = engine.cylinder4.jointRRP.frame_ia.R.w[2];
//   engine.cylinder4.Rod.body.frame_a.R.w[2] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.w[2];
//   engine.cylinder4.Rod.body.frame_a.R.w[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.w[2];
//   engine.cylinder4.Rod.body.frame_a.R.w[3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.w[3];
//   engine.cylinder4.Rod.body.frame_a.R.w[3] = engine.cylinder4.Rod.frame_a.R.w[3];
//   engine.cylinder4.Rod.body.frame_a.R.w[3] = engine.cylinder4.jointRRP.frame_ia.R.w[3];
//   engine.cylinder4.Rod.body.frame_a.R.w[3] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.w[3];
//   engine.cylinder4.Rod.body.frame_a.R.w[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.w[3];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,1] = engine.cylinder4.Rod.frame_a.R.T[1,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,1] = engine.cylinder4.jointRRP.frame_ia.R.T[1,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[1,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,2] = engine.cylinder4.Rod.frame_a.R.T[1,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,2] = engine.cylinder4.jointRRP.frame_ia.R.T[1,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[1,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,3] = engine.cylinder4.Rod.frame_a.R.T[1,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,3] = engine.cylinder4.jointRRP.frame_ia.R.T[1,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[1,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,1] = engine.cylinder4.Rod.frame_a.R.T[2,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,1] = engine.cylinder4.jointRRP.frame_ia.R.T[2,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[2,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,2] = engine.cylinder4.Rod.frame_a.R.T[2,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,2] = engine.cylinder4.jointRRP.frame_ia.R.T[2,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[2,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,3] = engine.cylinder4.Rod.frame_a.R.T[2,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,3] = engine.cylinder4.jointRRP.frame_ia.R.T[2,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[2,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,1] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,1] = engine.cylinder4.Rod.frame_a.R.T[3,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,1] = engine.cylinder4.jointRRP.frame_ia.R.T[3,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[3,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,2] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,2] = engine.cylinder4.Rod.frame_a.R.T[3,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,2] = engine.cylinder4.jointRRP.frame_ia.R.T[3,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[3,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,3] = engine.cylinder4.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,3] = engine.cylinder4.Rod.frame_a.R.T[3,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,3] = engine.cylinder4.jointRRP.frame_ia.R.T[3,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.frame_ia.R.T[3,3];
//   engine.cylinder4.Rod.body.frame_a.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3];
//   engine.cylinder4.Rod.body.frame_a.r_0[1] = engine.cylinder4.Rod.frameTranslation.frame_a.r_0[1];
//   engine.cylinder4.Rod.body.frame_a.r_0[1] = engine.cylinder4.Rod.frame_a.r_0[1];
//   engine.cylinder4.Rod.body.frame_a.r_0[1] = engine.cylinder4.jointRRP.frame_ia.r_0[1];
//   engine.cylinder4.Rod.body.frame_a.r_0[1] = engine.cylinder4.jointRRP.jointUSP.frame_ia.r_0[1];
//   engine.cylinder4.Rod.body.frame_a.r_0[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[1];
//   engine.cylinder4.Rod.body.frame_a.r_0[2] = engine.cylinder4.Rod.frameTranslation.frame_a.r_0[2];
//   engine.cylinder4.Rod.body.frame_a.r_0[2] = engine.cylinder4.Rod.frame_a.r_0[2];
//   engine.cylinder4.Rod.body.frame_a.r_0[2] = engine.cylinder4.jointRRP.frame_ia.r_0[2];
//   engine.cylinder4.Rod.body.frame_a.r_0[2] = engine.cylinder4.jointRRP.jointUSP.frame_ia.r_0[2];
//   engine.cylinder4.Rod.body.frame_a.r_0[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[2];
//   engine.cylinder4.Rod.body.frame_a.r_0[3] = engine.cylinder4.Rod.frameTranslation.frame_a.r_0[3];
//   engine.cylinder4.Rod.body.frame_a.r_0[3] = engine.cylinder4.Rod.frame_a.r_0[3];
//   engine.cylinder4.Rod.body.frame_a.r_0[3] = engine.cylinder4.jointRRP.frame_ia.r_0[3];
//   engine.cylinder4.Rod.body.frame_a.r_0[3] = engine.cylinder4.jointRRP.jointUSP.frame_ia.r_0[3];
//   engine.cylinder4.Rod.body.frame_a.r_0[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.r_0[3];
//   (-engine.cylinder4.Piston.frame_a.t[1]) + (engine.cylinder4.Piston.frameTranslation.frame_a.t[1] + engine.cylinder4.Piston.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder4.Piston.frame_a.t[2]) + (engine.cylinder4.Piston.frameTranslation.frame_a.t[2] + engine.cylinder4.Piston.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder4.Piston.frame_a.t[3]) + (engine.cylinder4.Piston.frameTranslation.frame_a.t[3] + engine.cylinder4.Piston.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder4.Piston.frame_a.f[1]) + (engine.cylinder4.Piston.frameTranslation.frame_a.f[1] + engine.cylinder4.Piston.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder4.Piston.frame_a.f[2]) + (engine.cylinder4.Piston.frameTranslation.frame_a.f[2] + engine.cylinder4.Piston.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder4.Piston.frame_a.f[3]) + (engine.cylinder4.Piston.frameTranslation.frame_a.f[3] + engine.cylinder4.Piston.body.frame_a.f[3]) = 0.0;
//   engine.cylinder4.Piston.body.frame_a.R.w[1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder4.Piston.body.frame_a.R.w[1] = engine.cylinder4.Piston.frame_a.R.w[1];
//   engine.cylinder4.Piston.body.frame_a.R.w[2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder4.Piston.body.frame_a.R.w[2] = engine.cylinder4.Piston.frame_a.R.w[2];
//   engine.cylinder4.Piston.body.frame_a.R.w[3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.w[3];
//   engine.cylinder4.Piston.body.frame_a.R.w[3] = engine.cylinder4.Piston.frame_a.R.w[3];
//   engine.cylinder4.Piston.body.frame_a.R.T[1,1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder4.Piston.body.frame_a.R.T[1,1] = engine.cylinder4.Piston.frame_a.R.T[1,1];
//   engine.cylinder4.Piston.body.frame_a.R.T[1,2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder4.Piston.body.frame_a.R.T[1,2] = engine.cylinder4.Piston.frame_a.R.T[1,2];
//   engine.cylinder4.Piston.body.frame_a.R.T[1,3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder4.Piston.body.frame_a.R.T[1,3] = engine.cylinder4.Piston.frame_a.R.T[1,3];
//   engine.cylinder4.Piston.body.frame_a.R.T[2,1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder4.Piston.body.frame_a.R.T[2,1] = engine.cylinder4.Piston.frame_a.R.T[2,1];
//   engine.cylinder4.Piston.body.frame_a.R.T[2,2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder4.Piston.body.frame_a.R.T[2,2] = engine.cylinder4.Piston.frame_a.R.T[2,2];
//   engine.cylinder4.Piston.body.frame_a.R.T[2,3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder4.Piston.body.frame_a.R.T[2,3] = engine.cylinder4.Piston.frame_a.R.T[2,3];
//   engine.cylinder4.Piston.body.frame_a.R.T[3,1] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder4.Piston.body.frame_a.R.T[3,1] = engine.cylinder4.Piston.frame_a.R.T[3,1];
//   engine.cylinder4.Piston.body.frame_a.R.T[3,2] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder4.Piston.body.frame_a.R.T[3,2] = engine.cylinder4.Piston.frame_a.R.T[3,2];
//   engine.cylinder4.Piston.body.frame_a.R.T[3,3] = engine.cylinder4.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder4.Piston.body.frame_a.R.T[3,3] = engine.cylinder4.Piston.frame_a.R.T[3,3];
//   engine.cylinder4.Piston.body.frame_a.r_0[1] = engine.cylinder4.Piston.frameTranslation.frame_a.r_0[1];
//   engine.cylinder4.Piston.body.frame_a.r_0[1] = engine.cylinder4.Piston.frame_a.r_0[1];
//   engine.cylinder4.Piston.body.frame_a.r_0[2] = engine.cylinder4.Piston.frameTranslation.frame_a.r_0[2];
//   engine.cylinder4.Piston.body.frame_a.r_0[2] = engine.cylinder4.Piston.frame_a.r_0[2];
//   engine.cylinder4.Piston.body.frame_a.r_0[3] = engine.cylinder4.Piston.frameTranslation.frame_a.r_0[3];
//   engine.cylinder4.Piston.body.frame_a.r_0[3] = engine.cylinder4.Piston.frame_a.r_0[3];
//   (-engine.cylinder4.Piston.frame_b.t[1]) + engine.cylinder4.Piston.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder4.Piston.frame_b.t[2]) + engine.cylinder4.Piston.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder4.Piston.frame_b.t[3]) + engine.cylinder4.Piston.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder4.Piston.frame_b.f[1]) + engine.cylinder4.Piston.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder4.Piston.frame_b.f[2]) + engine.cylinder4.Piston.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder4.Piston.frame_b.f[3]) + engine.cylinder4.Piston.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder4.Piston.frame_a.t[3] = 0.0;
//   engine.cylinder4.Piston.frame_a.t[2] = 0.0;
//   engine.cylinder4.Piston.frame_a.t[1] = 0.0;
//   engine.cylinder4.Piston.frame_a.f[3] = 0.0;
//   engine.cylinder4.Piston.frame_a.f[2] = 0.0;
//   engine.cylinder4.Piston.frame_a.f[1] = 0.0;
//   (-engine.cylinder4.Rod.frame_a.t[1]) + (engine.cylinder4.Rod.frameTranslation.frame_a.t[1] + engine.cylinder4.Rod.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder4.Rod.frame_a.t[2]) + (engine.cylinder4.Rod.frameTranslation.frame_a.t[2] + engine.cylinder4.Rod.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder4.Rod.frame_a.t[3]) + (engine.cylinder4.Rod.frameTranslation.frame_a.t[3] + engine.cylinder4.Rod.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder4.Rod.frame_a.f[1]) + (engine.cylinder4.Rod.frameTranslation.frame_a.f[1] + engine.cylinder4.Rod.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder4.Rod.frame_a.f[2]) + (engine.cylinder4.Rod.frameTranslation.frame_a.f[2] + engine.cylinder4.Rod.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder4.Rod.frame_a.f[3]) + (engine.cylinder4.Rod.frameTranslation.frame_a.f[3] + engine.cylinder4.Rod.body.frame_a.f[3]) = 0.0;
//   (-engine.cylinder4.Rod.frame_b.t[1]) + engine.cylinder4.Rod.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder4.Rod.frame_b.t[2]) + engine.cylinder4.Rod.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder4.Rod.frame_b.t[3]) + engine.cylinder4.Rod.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder4.Rod.frame_b.f[1]) + engine.cylinder4.Rod.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder4.Rod.frame_b.f[2]) + engine.cylinder4.Rod.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder4.Rod.frame_b.f[3]) + engine.cylinder4.Rod.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder4.Rod.frame_b.R.w[1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder4.Rod.frame_b.R.w[2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder4.Rod.frame_b.R.w[3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder4.Rod.frame_b.R.T[1,1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder4.Rod.frame_b.R.T[1,2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder4.Rod.frame_b.R.T[1,3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder4.Rod.frame_b.R.T[2,1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder4.Rod.frame_b.R.T[2,2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder4.Rod.frame_b.R.T[2,3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder4.Rod.frame_b.R.T[3,1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder4.Rod.frame_b.R.T[3,2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder4.Rod.frame_b.R.T[3,3];
//   engine.cylinder4.Rod.frameTranslation.frame_b.r_0[1] = engine.cylinder4.Rod.frame_b.r_0[1];
//   engine.cylinder4.Rod.frameTranslation.frame_b.r_0[2] = engine.cylinder4.Rod.frame_b.r_0[2];
//   engine.cylinder4.Rod.frameTranslation.frame_b.r_0[3] = engine.cylinder4.Rod.frame_b.r_0[3];
//   engine.cylinder4.Rod.frame_b.t[3] = 0.0;
//   engine.cylinder4.Rod.frame_b.t[2] = 0.0;
//   engine.cylinder4.Rod.frame_b.t[1] = 0.0;
//   engine.cylinder4.Rod.frame_b.f[3] = 0.0;
//   engine.cylinder4.Rod.frame_b.f[2] = 0.0;
//   engine.cylinder4.Rod.frame_b.f[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.bearing.f + (-engine.cylinder4.jointRRP.bearing.f) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.axis.f + (-engine.cylinder4.jointRRP.axis.f) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ib.t[1] + (-engine.cylinder4.jointRRP.frame_ib.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ib.t[2] + (-engine.cylinder4.jointRRP.frame_ib.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ib.t[3] + (-engine.cylinder4.jointRRP.frame_ib.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ib.f[1] + (-engine.cylinder4.jointRRP.frame_ib.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ib.f[2] + (-engine.cylinder4.jointRRP.frame_ib.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ib.f[3] + (-engine.cylinder4.jointRRP.frame_ib.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_im.t[1] + (-engine.cylinder4.jointRRP.frame_im.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_im.t[2] + (-engine.cylinder4.jointRRP.frame_im.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_im.t[3] + (-engine.cylinder4.jointRRP.frame_im.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_im.f[1] + (-engine.cylinder4.jointRRP.frame_im.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_im.f[2] + (-engine.cylinder4.jointRRP.frame_im.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_im.f[3] + (-engine.cylinder4.jointRRP.frame_im.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.frame_im.R.w[1] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.w[1];
//   engine.cylinder4.jointRRP.frame_im.R.w[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.w[1];
//   engine.cylinder4.jointRRP.frame_im.R.w[1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[1];
//   engine.cylinder4.jointRRP.frame_im.R.w[2] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.w[2];
//   engine.cylinder4.jointRRP.frame_im.R.w[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.w[2];
//   engine.cylinder4.jointRRP.frame_im.R.w[2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[2];
//   engine.cylinder4.jointRRP.frame_im.R.w[3] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.w[3];
//   engine.cylinder4.jointRRP.frame_im.R.w[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.w[3];
//   engine.cylinder4.jointRRP.frame_im.R.w[3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.w[3];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[1,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[1,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[1,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[1,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[1,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[1,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[1,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[2,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[2,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[2,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[2,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[2,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[2,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[2,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[3,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[3,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,1];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[3,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[3,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,2];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.frame_im.R.T[3,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.R.T[3,3];
//   engine.cylinder4.jointRRP.frame_im.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.R.T[3,3];
//   engine.cylinder4.jointRRP.frame_im.r_0[1] = engine.cylinder4.jointRRP.jointUSP.frame_im.r_0[1];
//   engine.cylinder4.jointRRP.frame_im.r_0[1] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[1];
//   engine.cylinder4.jointRRP.frame_im.r_0[1] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0[1];
//   engine.cylinder4.jointRRP.frame_im.r_0[2] = engine.cylinder4.jointRRP.jointUSP.frame_im.r_0[2];
//   engine.cylinder4.jointRRP.frame_im.r_0[2] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[2];
//   engine.cylinder4.jointRRP.frame_im.r_0[2] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0[2];
//   engine.cylinder4.jointRRP.frame_im.r_0[3] = engine.cylinder4.jointRRP.jointUSP.frame_im.r_0[3];
//   engine.cylinder4.jointRRP.frame_im.r_0[3] = engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.r_0[3];
//   engine.cylinder4.jointRRP.frame_im.r_0[3] = engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.r_0[3];
//   engine.cylinder4.jointRRP.jointUSP.frame_ia.t[1] + (-engine.cylinder4.jointRRP.frame_ia.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ia.t[2] + (-engine.cylinder4.jointRRP.frame_ia.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ia.t[3] + (-engine.cylinder4.jointRRP.frame_ia.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ia.f[1] + (-engine.cylinder4.jointRRP.frame_ia.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ia.f[2] + (-engine.cylinder4.jointRRP.frame_ia.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_ia.f[3] + (-engine.cylinder4.jointRRP.frame_ia.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_b.t[1] + (-engine.cylinder4.jointRRP.frame_b.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_b.t[2] + (-engine.cylinder4.jointRRP.frame_b.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_b.t[3] + (-engine.cylinder4.jointRRP.frame_b.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_b.f[1] + (-engine.cylinder4.jointRRP.frame_b.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_b.f[2] + (-engine.cylinder4.jointRRP.frame_b.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_b.f[3] + (-engine.cylinder4.jointRRP.frame_b.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_a.t[1] + (-engine.cylinder4.jointRRP.frame_a.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_a.t[2] + (-engine.cylinder4.jointRRP.frame_a.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_a.t[3] + (-engine.cylinder4.jointRRP.frame_a.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_a.f[1] + (-engine.cylinder4.jointRRP.frame_a.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_a.f[2] + (-engine.cylinder4.jointRRP.frame_a.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.frame_a.f[3] + (-engine.cylinder4.jointRRP.frame_a.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.r_rel[1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.r_rel[2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.r_rel[3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3];
//   engine.cylinder4.jointRRP.jointUSP.prismatic.bearing.f + (-engine.cylinder4.jointRRP.jointUSP.bearing.f) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.axis.f + (-engine.cylinder4.jointRRP.jointUSP.axis.f) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.position_b[1].y = engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[1];
//   engine.cylinder4.jointRRP.jointUSP.position_b[2].y = engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[2];
//   engine.cylinder4.jointRRP.jointUSP.position_b[3].y = engine.cylinder4.jointRRP.jointUSP.prismatic.position_b[3];
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_ia.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_ia.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.t[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_ia.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_ia.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_ia.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod1.frame_ia.f[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_ia.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_im.t[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_im.t[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.t[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_im.t[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_im.f[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_im.f[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.rod2.frame_b.f[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_b.f[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_im.f[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[1] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_b.t[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[2] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_b.t[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[3] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.t[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_b.t[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[1] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_b.f[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[2] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_b.f[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[3] + (engine.cylinder4.jointRRP.jointUSP.prismatic.frame_a.f[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_b.f[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_a.t[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_a.t[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.t[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_a.t[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[1] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_a.f[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[2] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_a.f[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[3] + (engine.cylinder4.jointRRP.jointUSP.rod1.frame_a.f[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_a.f[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_ib.t[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_ib.t[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.t[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_ib.t[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[1] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[1] + (-engine.cylinder4.jointRRP.jointUSP.frame_ib.f[1])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[2] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[2] + (-engine.cylinder4.jointRRP.jointUSP.frame_ib.f[2])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.prismatic.frame_b.f[3] + (engine.cylinder4.jointRRP.jointUSP.rod2.frame_a.f[3] + (-engine.cylinder4.jointRRP.jointUSP.frame_ib.f[3])) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1] + engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2] + engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3] + engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1] + engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2] + engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3] + engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3] = engine.cylinder4.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_b.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.t[3]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[1]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[2]) = 0.0;
//   engine.cylinder4.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] + (-engine.cylinder4.jointRRP.jointUSP.relativePosition.frame_a.f[3]) = 0.0;
//   engine.cylinder4.jointRRP.frame_im.t[3] = 0.0;
//   engine.cylinder4.jointRRP.frame_im.t[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_im.t[1] = 0.0;
//   engine.cylinder4.jointRRP.frame_im.f[3] = 0.0;
//   engine.cylinder4.jointRRP.frame_im.f[2] = 0.0;
//   engine.cylinder4.jointRRP.frame_im.f[1] = 0.0;
//   engine.cylinder3.Crank.frame_b.t[1] + (-engine.cylinder3.crank_b.t[1]) = 0.0;
//   engine.cylinder3.Crank.frame_b.t[2] + (-engine.cylinder3.crank_b.t[2]) = 0.0;
//   engine.cylinder3.Crank.frame_b.t[3] + (-engine.cylinder3.crank_b.t[3]) = 0.0;
//   engine.cylinder3.Crank.frame_b.f[1] + (-engine.cylinder3.crank_b.f[1]) = 0.0;
//   engine.cylinder3.Crank.frame_b.f[2] + (-engine.cylinder3.crank_b.f[2]) = 0.0;
//   engine.cylinder3.Crank.frame_b.f[3] + (-engine.cylinder3.crank_b.f[3]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_a.t[1] + ((-engine.cylinder3.crank_a.t[1]) + engine.cylinder3.Crank.frame_a.t[1]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_a.t[2] + ((-engine.cylinder3.crank_a.t[2]) + engine.cylinder3.Crank.frame_a.t[2]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_a.t[3] + ((-engine.cylinder3.crank_a.t[3]) + engine.cylinder3.Crank.frame_a.t[3]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_a.f[1] + ((-engine.cylinder3.crank_a.f[1]) + engine.cylinder3.Crank.frame_a.f[1]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_a.f[2] + ((-engine.cylinder3.crank_a.f[2]) + engine.cylinder3.Crank.frame_a.f[2]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_a.f[3] + ((-engine.cylinder3.crank_a.f[3]) + engine.cylinder3.Crank.frame_a.f[3]) = 0.0;
//   (-engine.cylinder3.cylinder_b.t[1]) + engine.cylinder3.Mounting.frame_b.t[1] = 0.0;
//   (-engine.cylinder3.cylinder_b.t[2]) + engine.cylinder3.Mounting.frame_b.t[2] = 0.0;
//   (-engine.cylinder3.cylinder_b.t[3]) + engine.cylinder3.Mounting.frame_b.t[3] = 0.0;
//   (-engine.cylinder3.cylinder_b.f[1]) + engine.cylinder3.Mounting.frame_b.f[1] = 0.0;
//   (-engine.cylinder3.cylinder_b.f[2]) + engine.cylinder3.Mounting.frame_b.f[2] = 0.0;
//   (-engine.cylinder3.cylinder_b.f[3]) + engine.cylinder3.Mounting.frame_b.f[3] = 0.0;
//   (-engine.cylinder3.cylinder_a.t[1]) + (engine.cylinder3.CylinderInclination.frame_a.t[1] + engine.cylinder3.Mounting.frame_a.t[1]) = 0.0;
//   (-engine.cylinder3.cylinder_a.t[2]) + (engine.cylinder3.CylinderInclination.frame_a.t[2] + engine.cylinder3.Mounting.frame_a.t[2]) = 0.0;
//   (-engine.cylinder3.cylinder_a.t[3]) + (engine.cylinder3.CylinderInclination.frame_a.t[3] + engine.cylinder3.Mounting.frame_a.t[3]) = 0.0;
//   (-engine.cylinder3.cylinder_a.f[1]) + (engine.cylinder3.CylinderInclination.frame_a.f[1] + engine.cylinder3.Mounting.frame_a.f[1]) = 0.0;
//   (-engine.cylinder3.cylinder_a.f[2]) + (engine.cylinder3.CylinderInclination.frame_a.f[2] + engine.cylinder3.Mounting.frame_a.f[2]) = 0.0;
//   (-engine.cylinder3.cylinder_a.f[3]) + (engine.cylinder3.CylinderInclination.frame_a.f[3] + engine.cylinder3.Mounting.frame_a.f[3]) = 0.0;
//   engine.cylinder3.CrankShape.frame_a.t[1] + (engine.cylinder3.CrankAngle.frame_b.t[1] + engine.cylinder3.Mid.frame_a.t[1]) = 0.0;
//   engine.cylinder3.CrankShape.frame_a.t[2] + (engine.cylinder3.CrankAngle.frame_b.t[2] + engine.cylinder3.Mid.frame_a.t[2]) = 0.0;
//   engine.cylinder3.CrankShape.frame_a.t[3] + (engine.cylinder3.CrankAngle.frame_b.t[3] + engine.cylinder3.Mid.frame_a.t[3]) = 0.0;
//   engine.cylinder3.CrankShape.frame_a.f[1] + (engine.cylinder3.CrankAngle.frame_b.f[1] + engine.cylinder3.Mid.frame_a.f[1]) = 0.0;
//   engine.cylinder3.CrankShape.frame_a.f[2] + (engine.cylinder3.CrankAngle.frame_b.f[2] + engine.cylinder3.Mid.frame_a.f[2]) = 0.0;
//   engine.cylinder3.CrankShape.frame_a.f[3] + (engine.cylinder3.CrankAngle.frame_b.f[3] + engine.cylinder3.Mid.frame_a.f[3]) = 0.0;
//   engine.cylinder3.CrankAngle.frame_b.R.w[1] = engine.cylinder3.CrankShape.frame_a.R.w[1];
//   engine.cylinder3.CrankAngle.frame_b.R.w[1] = engine.cylinder3.Mid.frame_a.R.w[1];
//   engine.cylinder3.CrankAngle.frame_b.R.w[2] = engine.cylinder3.CrankShape.frame_a.R.w[2];
//   engine.cylinder3.CrankAngle.frame_b.R.w[2] = engine.cylinder3.Mid.frame_a.R.w[2];
//   engine.cylinder3.CrankAngle.frame_b.R.w[3] = engine.cylinder3.CrankShape.frame_a.R.w[3];
//   engine.cylinder3.CrankAngle.frame_b.R.w[3] = engine.cylinder3.Mid.frame_a.R.w[3];
//   engine.cylinder3.CrankAngle.frame_b.R.T[1,1] = engine.cylinder3.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder3.CrankAngle.frame_b.R.T[1,1] = engine.cylinder3.Mid.frame_a.R.T[1,1];
//   engine.cylinder3.CrankAngle.frame_b.R.T[1,2] = engine.cylinder3.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder3.CrankAngle.frame_b.R.T[1,2] = engine.cylinder3.Mid.frame_a.R.T[1,2];
//   engine.cylinder3.CrankAngle.frame_b.R.T[1,3] = engine.cylinder3.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder3.CrankAngle.frame_b.R.T[1,3] = engine.cylinder3.Mid.frame_a.R.T[1,3];
//   engine.cylinder3.CrankAngle.frame_b.R.T[2,1] = engine.cylinder3.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder3.CrankAngle.frame_b.R.T[2,1] = engine.cylinder3.Mid.frame_a.R.T[2,1];
//   engine.cylinder3.CrankAngle.frame_b.R.T[2,2] = engine.cylinder3.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder3.CrankAngle.frame_b.R.T[2,2] = engine.cylinder3.Mid.frame_a.R.T[2,2];
//   engine.cylinder3.CrankAngle.frame_b.R.T[2,3] = engine.cylinder3.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder3.CrankAngle.frame_b.R.T[2,3] = engine.cylinder3.Mid.frame_a.R.T[2,3];
//   engine.cylinder3.CrankAngle.frame_b.R.T[3,1] = engine.cylinder3.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder3.CrankAngle.frame_b.R.T[3,1] = engine.cylinder3.Mid.frame_a.R.T[3,1];
//   engine.cylinder3.CrankAngle.frame_b.R.T[3,2] = engine.cylinder3.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder3.CrankAngle.frame_b.R.T[3,2] = engine.cylinder3.Mid.frame_a.R.T[3,2];
//   engine.cylinder3.CrankAngle.frame_b.R.T[3,3] = engine.cylinder3.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder3.CrankAngle.frame_b.R.T[3,3] = engine.cylinder3.Mid.frame_a.R.T[3,3];
//   engine.cylinder3.CrankAngle.frame_b.r_0[1] = engine.cylinder3.CrankShape.frame_a.r_0[1];
//   engine.cylinder3.CrankAngle.frame_b.r_0[1] = engine.cylinder3.Mid.frame_a.r_0[1];
//   engine.cylinder3.CrankAngle.frame_b.r_0[2] = engine.cylinder3.CrankShape.frame_a.r_0[2];
//   engine.cylinder3.CrankAngle.frame_b.r_0[2] = engine.cylinder3.Mid.frame_a.r_0[2];
//   engine.cylinder3.CrankAngle.frame_b.r_0[3] = engine.cylinder3.CrankShape.frame_a.r_0[3];
//   engine.cylinder3.CrankAngle.frame_b.r_0[3] = engine.cylinder3.Mid.frame_a.r_0[3];
//   engine.cylinder3.jointRRP.frame_b.t[1] + engine.cylinder3.CylinderInclination.frame_b.t[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_b.t[2] + engine.cylinder3.CylinderInclination.frame_b.t[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_b.t[3] + engine.cylinder3.CylinderInclination.frame_b.t[3] = 0.0;
//   engine.cylinder3.jointRRP.frame_b.f[1] + engine.cylinder3.CylinderInclination.frame_b.f[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_b.f[2] + engine.cylinder3.CylinderInclination.frame_b.f[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_b.f[3] + engine.cylinder3.CylinderInclination.frame_b.f[3] = 0.0;
//   engine.cylinder3.CylinderInclination.frame_b.R.w[1] = engine.cylinder3.jointRRP.frame_b.R.w[1];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.w[1];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.w[1];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[2] = engine.cylinder3.jointRRP.frame_b.R.w[2];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.w[2];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.w[2];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[3] = engine.cylinder3.jointRRP.frame_b.R.w[3];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.w[3];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.w[3];
//   engine.cylinder3.CylinderInclination.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.frame_b.R.T[1,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[1,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.frame_b.R.T[1,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[1,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.frame_b.R.T[1,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[1,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.frame_b.R.T[2,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[2,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.frame_b.R.T[2,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[2,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.frame_b.R.T[2,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[2,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.frame_b.R.T[3,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[3,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.frame_b.R.T[3,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[3,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.frame_b.R.T[3,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.frame_b.R.T[3,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder3.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[1] = engine.cylinder3.jointRRP.frame_b.r_0[1];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.frame_b.r_0[1];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0[1];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.r_0[1];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[2] = engine.cylinder3.jointRRP.frame_b.r_0[2];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.frame_b.r_0[2];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0[2];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.r_0[2];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[3] = engine.cylinder3.jointRRP.frame_b.r_0[3];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.frame_b.r_0[3];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.r_0[3];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.r_0[3];
//   engine.cylinder3.CylinderInclination.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3];
//   engine.cylinder3.jointRRP.frame_ib.t[1] + engine.cylinder3.Piston.frame_b.t[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_ib.t[2] + engine.cylinder3.Piston.frame_b.t[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_ib.t[3] + engine.cylinder3.Piston.frame_b.t[3] = 0.0;
//   engine.cylinder3.jointRRP.frame_ib.f[1] + engine.cylinder3.Piston.frame_b.f[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_ib.f[2] + engine.cylinder3.Piston.frame_b.f[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_ib.f[3] + engine.cylinder3.Piston.frame_b.f[3] = 0.0;
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder3.Piston.frame_b.R.w[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder3.jointRRP.frame_ib.R.w[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.w[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder3.Piston.frame_b.R.w[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder3.jointRRP.frame_ib.R.w[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.w[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder3.Piston.frame_b.R.w[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder3.jointRRP.frame_ib.R.w[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.w[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.w[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.Piston.frame_b.R.T[1,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.frame_ib.R.T[1,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[1,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.Piston.frame_b.R.T[1,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.frame_ib.R.T[1,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[1,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.Piston.frame_b.R.T[1,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.frame_ib.R.T[1,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[1,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.Piston.frame_b.R.T[2,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.frame_ib.R.T[2,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[2,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.Piston.frame_b.R.T[2,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.frame_ib.R.T[2,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[2,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.Piston.frame_b.R.T[2,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.frame_ib.R.T[2,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[2,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.Piston.frame_b.R.T[3,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.frame_ib.R.T[3,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[3,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.Piston.frame_b.R.T[3,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.frame_ib.R.T[3,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[3,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.Piston.frame_b.R.T[3,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.frame_ib.R.T[3,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.frame_ib.R.T[3,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder3.Piston.frame_b.r_0[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder3.jointRRP.frame_ib.r_0[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.frame_ib.r_0[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0[1];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder3.Piston.frame_b.r_0[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder3.jointRRP.frame_ib.r_0[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.frame_ib.r_0[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0[2];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder3.Piston.frame_b.r_0[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder3.jointRRP.frame_ib.r_0[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.frame_ib.r_0[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.r_0[3];
//   engine.cylinder3.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.r_0[3];
//   engine.cylinder3.jointRRP.bearing.f + engine.cylinder3.gasForce.flange_b.f = 0.0;
//   engine.cylinder3.gasForce.flange_b.s = engine.cylinder3.jointRRP.bearing.s;
//   engine.cylinder3.gasForce.flange_b.s = engine.cylinder3.jointRRP.jointUSP.bearing.s;
//   engine.cylinder3.gasForce.flange_b.s = engine.cylinder3.jointRRP.jointUSP.prismatic.bearing.s;
//   engine.cylinder3.gasForce.flange_a.f + engine.cylinder3.jointRRP.axis.f = 0.0;
//   engine.cylinder3.gasForce.flange_a.s = engine.cylinder3.jointRRP.axis.s;
//   engine.cylinder3.gasForce.flange_a.s = engine.cylinder3.jointRRP.jointUSP.axis.s;
//   engine.cylinder3.gasForce.flange_a.s = engine.cylinder3.jointRRP.jointUSP.prismatic.axis.s;
//   engine.cylinder3.Mid.frame_b.t[1] + engine.cylinder3.jointRRP.frame_a.t[1] = 0.0;
//   engine.cylinder3.Mid.frame_b.t[2] + engine.cylinder3.jointRRP.frame_a.t[2] = 0.0;
//   engine.cylinder3.Mid.frame_b.t[3] + engine.cylinder3.jointRRP.frame_a.t[3] = 0.0;
//   engine.cylinder3.Mid.frame_b.f[1] + engine.cylinder3.jointRRP.frame_a.f[1] = 0.0;
//   engine.cylinder3.Mid.frame_b.f[2] + engine.cylinder3.jointRRP.frame_a.f[2] = 0.0;
//   engine.cylinder3.Mid.frame_b.f[3] + engine.cylinder3.jointRRP.frame_a.f[3] = 0.0;
//   engine.cylinder3.Mid.frame_b.R.w[1] = engine.cylinder3.jointRRP.frame_a.R.w[1];
//   engine.cylinder3.Mid.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.w[1];
//   engine.cylinder3.Mid.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.w[1];
//   engine.cylinder3.Mid.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1];
//   engine.cylinder3.Mid.frame_b.R.w[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[1];
//   engine.cylinder3.Mid.frame_b.R.w[2] = engine.cylinder3.jointRRP.frame_a.R.w[2];
//   engine.cylinder3.Mid.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.w[2];
//   engine.cylinder3.Mid.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.w[2];
//   engine.cylinder3.Mid.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2];
//   engine.cylinder3.Mid.frame_b.R.w[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[2];
//   engine.cylinder3.Mid.frame_b.R.w[3] = engine.cylinder3.jointRRP.frame_a.R.w[3];
//   engine.cylinder3.Mid.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.w[3];
//   engine.cylinder3.Mid.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.w[3];
//   engine.cylinder3.Mid.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3];
//   engine.cylinder3.Mid.frame_b.R.w[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.w[3];
//   engine.cylinder3.Mid.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.frame_a.R.T[1,1];
//   engine.cylinder3.Mid.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[1,1];
//   engine.cylinder3.Mid.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder3.Mid.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder3.Mid.frame_b.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[1,1];
//   engine.cylinder3.Mid.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.frame_a.R.T[1,2];
//   engine.cylinder3.Mid.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[1,2];
//   engine.cylinder3.Mid.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder3.Mid.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder3.Mid.frame_b.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[1,2];
//   engine.cylinder3.Mid.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.frame_a.R.T[1,3];
//   engine.cylinder3.Mid.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[1,3];
//   engine.cylinder3.Mid.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder3.Mid.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder3.Mid.frame_b.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[1,3];
//   engine.cylinder3.Mid.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.frame_a.R.T[2,1];
//   engine.cylinder3.Mid.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[2,1];
//   engine.cylinder3.Mid.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder3.Mid.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder3.Mid.frame_b.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[2,1];
//   engine.cylinder3.Mid.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.frame_a.R.T[2,2];
//   engine.cylinder3.Mid.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[2,2];
//   engine.cylinder3.Mid.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder3.Mid.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder3.Mid.frame_b.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[2,2];
//   engine.cylinder3.Mid.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.frame_a.R.T[2,3];
//   engine.cylinder3.Mid.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[2,3];
//   engine.cylinder3.Mid.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder3.Mid.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder3.Mid.frame_b.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[2,3];
//   engine.cylinder3.Mid.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.frame_a.R.T[3,1];
//   engine.cylinder3.Mid.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[3,1];
//   engine.cylinder3.Mid.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder3.Mid.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder3.Mid.frame_b.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[3,1];
//   engine.cylinder3.Mid.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.frame_a.R.T[3,2];
//   engine.cylinder3.Mid.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[3,2];
//   engine.cylinder3.Mid.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder3.Mid.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder3.Mid.frame_b.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[3,2];
//   engine.cylinder3.Mid.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.frame_a.R.T[3,3];
//   engine.cylinder3.Mid.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.frame_a.R.T[3,3];
//   engine.cylinder3.Mid.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder3.Mid.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder3.Mid.frame_b.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.R.T[3,3];
//   engine.cylinder3.Mid.frame_b.r_0[1] = engine.cylinder3.jointRRP.frame_a.r_0[1];
//   engine.cylinder3.Mid.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.frame_a.r_0[1];
//   engine.cylinder3.Mid.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.r_0[1];
//   engine.cylinder3.Mid.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1];
//   engine.cylinder3.Mid.frame_b.r_0[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder3.Mid.frame_b.r_0[2] = engine.cylinder3.jointRRP.frame_a.r_0[2];
//   engine.cylinder3.Mid.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.frame_a.r_0[2];
//   engine.cylinder3.Mid.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.r_0[2];
//   engine.cylinder3.Mid.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2];
//   engine.cylinder3.Mid.frame_b.r_0[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder3.Mid.frame_b.r_0[3] = engine.cylinder3.jointRRP.frame_a.r_0[3];
//   engine.cylinder3.Mid.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.frame_a.r_0[3];
//   engine.cylinder3.Mid.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.r_0[3];
//   engine.cylinder3.Mid.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3];
//   engine.cylinder3.Mid.frame_b.r_0[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder3.jointRRP.frame_ia.t[1] + engine.cylinder3.Rod.frame_a.t[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_ia.t[2] + engine.cylinder3.Rod.frame_a.t[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_ia.t[3] + engine.cylinder3.Rod.frame_a.t[3] = 0.0;
//   engine.cylinder3.jointRRP.frame_ia.f[1] + engine.cylinder3.Rod.frame_a.f[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_ia.f[2] + engine.cylinder3.Rod.frame_a.f[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_ia.f[3] + engine.cylinder3.Rod.frame_a.f[3] = 0.0;
//   engine.cylinder3.Rod.body.frame_a.R.w[1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder3.Rod.body.frame_a.R.w[1] = engine.cylinder3.Rod.frame_a.R.w[1];
//   engine.cylinder3.Rod.body.frame_a.R.w[1] = engine.cylinder3.jointRRP.frame_ia.R.w[1];
//   engine.cylinder3.Rod.body.frame_a.R.w[1] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.w[1];
//   engine.cylinder3.Rod.body.frame_a.R.w[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.w[1];
//   engine.cylinder3.Rod.body.frame_a.R.w[2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder3.Rod.body.frame_a.R.w[2] = engine.cylinder3.Rod.frame_a.R.w[2];
//   engine.cylinder3.Rod.body.frame_a.R.w[2] = engine.cylinder3.jointRRP.frame_ia.R.w[2];
//   engine.cylinder3.Rod.body.frame_a.R.w[2] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.w[2];
//   engine.cylinder3.Rod.body.frame_a.R.w[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.w[2];
//   engine.cylinder3.Rod.body.frame_a.R.w[3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.w[3];
//   engine.cylinder3.Rod.body.frame_a.R.w[3] = engine.cylinder3.Rod.frame_a.R.w[3];
//   engine.cylinder3.Rod.body.frame_a.R.w[3] = engine.cylinder3.jointRRP.frame_ia.R.w[3];
//   engine.cylinder3.Rod.body.frame_a.R.w[3] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.w[3];
//   engine.cylinder3.Rod.body.frame_a.R.w[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.w[3];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,1] = engine.cylinder3.Rod.frame_a.R.T[1,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,1] = engine.cylinder3.jointRRP.frame_ia.R.T[1,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[1,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,2] = engine.cylinder3.Rod.frame_a.R.T[1,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,2] = engine.cylinder3.jointRRP.frame_ia.R.T[1,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[1,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,3] = engine.cylinder3.Rod.frame_a.R.T[1,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,3] = engine.cylinder3.jointRRP.frame_ia.R.T[1,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[1,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,1] = engine.cylinder3.Rod.frame_a.R.T[2,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,1] = engine.cylinder3.jointRRP.frame_ia.R.T[2,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[2,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,2] = engine.cylinder3.Rod.frame_a.R.T[2,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,2] = engine.cylinder3.jointRRP.frame_ia.R.T[2,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[2,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,3] = engine.cylinder3.Rod.frame_a.R.T[2,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,3] = engine.cylinder3.jointRRP.frame_ia.R.T[2,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[2,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,1] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,1] = engine.cylinder3.Rod.frame_a.R.T[3,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,1] = engine.cylinder3.jointRRP.frame_ia.R.T[3,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[3,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,2] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,2] = engine.cylinder3.Rod.frame_a.R.T[3,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,2] = engine.cylinder3.jointRRP.frame_ia.R.T[3,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[3,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,3] = engine.cylinder3.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,3] = engine.cylinder3.Rod.frame_a.R.T[3,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,3] = engine.cylinder3.jointRRP.frame_ia.R.T[3,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.frame_ia.R.T[3,3];
//   engine.cylinder3.Rod.body.frame_a.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3];
//   engine.cylinder3.Rod.body.frame_a.r_0[1] = engine.cylinder3.Rod.frameTranslation.frame_a.r_0[1];
//   engine.cylinder3.Rod.body.frame_a.r_0[1] = engine.cylinder3.Rod.frame_a.r_0[1];
//   engine.cylinder3.Rod.body.frame_a.r_0[1] = engine.cylinder3.jointRRP.frame_ia.r_0[1];
//   engine.cylinder3.Rod.body.frame_a.r_0[1] = engine.cylinder3.jointRRP.jointUSP.frame_ia.r_0[1];
//   engine.cylinder3.Rod.body.frame_a.r_0[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[1];
//   engine.cylinder3.Rod.body.frame_a.r_0[2] = engine.cylinder3.Rod.frameTranslation.frame_a.r_0[2];
//   engine.cylinder3.Rod.body.frame_a.r_0[2] = engine.cylinder3.Rod.frame_a.r_0[2];
//   engine.cylinder3.Rod.body.frame_a.r_0[2] = engine.cylinder3.jointRRP.frame_ia.r_0[2];
//   engine.cylinder3.Rod.body.frame_a.r_0[2] = engine.cylinder3.jointRRP.jointUSP.frame_ia.r_0[2];
//   engine.cylinder3.Rod.body.frame_a.r_0[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[2];
//   engine.cylinder3.Rod.body.frame_a.r_0[3] = engine.cylinder3.Rod.frameTranslation.frame_a.r_0[3];
//   engine.cylinder3.Rod.body.frame_a.r_0[3] = engine.cylinder3.Rod.frame_a.r_0[3];
//   engine.cylinder3.Rod.body.frame_a.r_0[3] = engine.cylinder3.jointRRP.frame_ia.r_0[3];
//   engine.cylinder3.Rod.body.frame_a.r_0[3] = engine.cylinder3.jointRRP.jointUSP.frame_ia.r_0[3];
//   engine.cylinder3.Rod.body.frame_a.r_0[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.r_0[3];
//   (-engine.cylinder3.Piston.frame_a.t[1]) + (engine.cylinder3.Piston.frameTranslation.frame_a.t[1] + engine.cylinder3.Piston.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder3.Piston.frame_a.t[2]) + (engine.cylinder3.Piston.frameTranslation.frame_a.t[2] + engine.cylinder3.Piston.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder3.Piston.frame_a.t[3]) + (engine.cylinder3.Piston.frameTranslation.frame_a.t[3] + engine.cylinder3.Piston.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder3.Piston.frame_a.f[1]) + (engine.cylinder3.Piston.frameTranslation.frame_a.f[1] + engine.cylinder3.Piston.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder3.Piston.frame_a.f[2]) + (engine.cylinder3.Piston.frameTranslation.frame_a.f[2] + engine.cylinder3.Piston.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder3.Piston.frame_a.f[3]) + (engine.cylinder3.Piston.frameTranslation.frame_a.f[3] + engine.cylinder3.Piston.body.frame_a.f[3]) = 0.0;
//   engine.cylinder3.Piston.body.frame_a.R.w[1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder3.Piston.body.frame_a.R.w[1] = engine.cylinder3.Piston.frame_a.R.w[1];
//   engine.cylinder3.Piston.body.frame_a.R.w[2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder3.Piston.body.frame_a.R.w[2] = engine.cylinder3.Piston.frame_a.R.w[2];
//   engine.cylinder3.Piston.body.frame_a.R.w[3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.w[3];
//   engine.cylinder3.Piston.body.frame_a.R.w[3] = engine.cylinder3.Piston.frame_a.R.w[3];
//   engine.cylinder3.Piston.body.frame_a.R.T[1,1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder3.Piston.body.frame_a.R.T[1,1] = engine.cylinder3.Piston.frame_a.R.T[1,1];
//   engine.cylinder3.Piston.body.frame_a.R.T[1,2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder3.Piston.body.frame_a.R.T[1,2] = engine.cylinder3.Piston.frame_a.R.T[1,2];
//   engine.cylinder3.Piston.body.frame_a.R.T[1,3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder3.Piston.body.frame_a.R.T[1,3] = engine.cylinder3.Piston.frame_a.R.T[1,3];
//   engine.cylinder3.Piston.body.frame_a.R.T[2,1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder3.Piston.body.frame_a.R.T[2,1] = engine.cylinder3.Piston.frame_a.R.T[2,1];
//   engine.cylinder3.Piston.body.frame_a.R.T[2,2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder3.Piston.body.frame_a.R.T[2,2] = engine.cylinder3.Piston.frame_a.R.T[2,2];
//   engine.cylinder3.Piston.body.frame_a.R.T[2,3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder3.Piston.body.frame_a.R.T[2,3] = engine.cylinder3.Piston.frame_a.R.T[2,3];
//   engine.cylinder3.Piston.body.frame_a.R.T[3,1] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder3.Piston.body.frame_a.R.T[3,1] = engine.cylinder3.Piston.frame_a.R.T[3,1];
//   engine.cylinder3.Piston.body.frame_a.R.T[3,2] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder3.Piston.body.frame_a.R.T[3,2] = engine.cylinder3.Piston.frame_a.R.T[3,2];
//   engine.cylinder3.Piston.body.frame_a.R.T[3,3] = engine.cylinder3.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder3.Piston.body.frame_a.R.T[3,3] = engine.cylinder3.Piston.frame_a.R.T[3,3];
//   engine.cylinder3.Piston.body.frame_a.r_0[1] = engine.cylinder3.Piston.frameTranslation.frame_a.r_0[1];
//   engine.cylinder3.Piston.body.frame_a.r_0[1] = engine.cylinder3.Piston.frame_a.r_0[1];
//   engine.cylinder3.Piston.body.frame_a.r_0[2] = engine.cylinder3.Piston.frameTranslation.frame_a.r_0[2];
//   engine.cylinder3.Piston.body.frame_a.r_0[2] = engine.cylinder3.Piston.frame_a.r_0[2];
//   engine.cylinder3.Piston.body.frame_a.r_0[3] = engine.cylinder3.Piston.frameTranslation.frame_a.r_0[3];
//   engine.cylinder3.Piston.body.frame_a.r_0[3] = engine.cylinder3.Piston.frame_a.r_0[3];
//   (-engine.cylinder3.Piston.frame_b.t[1]) + engine.cylinder3.Piston.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder3.Piston.frame_b.t[2]) + engine.cylinder3.Piston.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder3.Piston.frame_b.t[3]) + engine.cylinder3.Piston.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder3.Piston.frame_b.f[1]) + engine.cylinder3.Piston.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder3.Piston.frame_b.f[2]) + engine.cylinder3.Piston.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder3.Piston.frame_b.f[3]) + engine.cylinder3.Piston.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder3.Piston.frame_a.t[3] = 0.0;
//   engine.cylinder3.Piston.frame_a.t[2] = 0.0;
//   engine.cylinder3.Piston.frame_a.t[1] = 0.0;
//   engine.cylinder3.Piston.frame_a.f[3] = 0.0;
//   engine.cylinder3.Piston.frame_a.f[2] = 0.0;
//   engine.cylinder3.Piston.frame_a.f[1] = 0.0;
//   (-engine.cylinder3.Rod.frame_a.t[1]) + (engine.cylinder3.Rod.frameTranslation.frame_a.t[1] + engine.cylinder3.Rod.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder3.Rod.frame_a.t[2]) + (engine.cylinder3.Rod.frameTranslation.frame_a.t[2] + engine.cylinder3.Rod.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder3.Rod.frame_a.t[3]) + (engine.cylinder3.Rod.frameTranslation.frame_a.t[3] + engine.cylinder3.Rod.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder3.Rod.frame_a.f[1]) + (engine.cylinder3.Rod.frameTranslation.frame_a.f[1] + engine.cylinder3.Rod.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder3.Rod.frame_a.f[2]) + (engine.cylinder3.Rod.frameTranslation.frame_a.f[2] + engine.cylinder3.Rod.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder3.Rod.frame_a.f[3]) + (engine.cylinder3.Rod.frameTranslation.frame_a.f[3] + engine.cylinder3.Rod.body.frame_a.f[3]) = 0.0;
//   (-engine.cylinder3.Rod.frame_b.t[1]) + engine.cylinder3.Rod.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder3.Rod.frame_b.t[2]) + engine.cylinder3.Rod.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder3.Rod.frame_b.t[3]) + engine.cylinder3.Rod.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder3.Rod.frame_b.f[1]) + engine.cylinder3.Rod.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder3.Rod.frame_b.f[2]) + engine.cylinder3.Rod.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder3.Rod.frame_b.f[3]) + engine.cylinder3.Rod.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder3.Rod.frame_b.R.w[1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder3.Rod.frame_b.R.w[2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder3.Rod.frame_b.R.w[3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder3.Rod.frame_b.R.T[1,1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder3.Rod.frame_b.R.T[1,2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder3.Rod.frame_b.R.T[1,3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder3.Rod.frame_b.R.T[2,1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder3.Rod.frame_b.R.T[2,2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder3.Rod.frame_b.R.T[2,3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder3.Rod.frame_b.R.T[3,1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder3.Rod.frame_b.R.T[3,2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder3.Rod.frame_b.R.T[3,3];
//   engine.cylinder3.Rod.frameTranslation.frame_b.r_0[1] = engine.cylinder3.Rod.frame_b.r_0[1];
//   engine.cylinder3.Rod.frameTranslation.frame_b.r_0[2] = engine.cylinder3.Rod.frame_b.r_0[2];
//   engine.cylinder3.Rod.frameTranslation.frame_b.r_0[3] = engine.cylinder3.Rod.frame_b.r_0[3];
//   engine.cylinder3.Rod.frame_b.t[3] = 0.0;
//   engine.cylinder3.Rod.frame_b.t[2] = 0.0;
//   engine.cylinder3.Rod.frame_b.t[1] = 0.0;
//   engine.cylinder3.Rod.frame_b.f[3] = 0.0;
//   engine.cylinder3.Rod.frame_b.f[2] = 0.0;
//   engine.cylinder3.Rod.frame_b.f[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.bearing.f + (-engine.cylinder3.jointRRP.bearing.f) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.axis.f + (-engine.cylinder3.jointRRP.axis.f) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ib.t[1] + (-engine.cylinder3.jointRRP.frame_ib.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ib.t[2] + (-engine.cylinder3.jointRRP.frame_ib.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ib.t[3] + (-engine.cylinder3.jointRRP.frame_ib.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ib.f[1] + (-engine.cylinder3.jointRRP.frame_ib.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ib.f[2] + (-engine.cylinder3.jointRRP.frame_ib.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ib.f[3] + (-engine.cylinder3.jointRRP.frame_ib.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_im.t[1] + (-engine.cylinder3.jointRRP.frame_im.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_im.t[2] + (-engine.cylinder3.jointRRP.frame_im.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_im.t[3] + (-engine.cylinder3.jointRRP.frame_im.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_im.f[1] + (-engine.cylinder3.jointRRP.frame_im.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_im.f[2] + (-engine.cylinder3.jointRRP.frame_im.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_im.f[3] + (-engine.cylinder3.jointRRP.frame_im.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.frame_im.R.w[1] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.w[1];
//   engine.cylinder3.jointRRP.frame_im.R.w[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.w[1];
//   engine.cylinder3.jointRRP.frame_im.R.w[1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[1];
//   engine.cylinder3.jointRRP.frame_im.R.w[2] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.w[2];
//   engine.cylinder3.jointRRP.frame_im.R.w[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.w[2];
//   engine.cylinder3.jointRRP.frame_im.R.w[2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[2];
//   engine.cylinder3.jointRRP.frame_im.R.w[3] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.w[3];
//   engine.cylinder3.jointRRP.frame_im.R.w[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.w[3];
//   engine.cylinder3.jointRRP.frame_im.R.w[3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.w[3];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[1,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[1,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[1,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[1,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[1,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[1,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[1,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[2,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[2,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[2,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[2,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[2,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[2,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[2,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[3,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[3,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,1];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[3,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[3,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,2];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.frame_im.R.T[3,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.R.T[3,3];
//   engine.cylinder3.jointRRP.frame_im.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.R.T[3,3];
//   engine.cylinder3.jointRRP.frame_im.r_0[1] = engine.cylinder3.jointRRP.jointUSP.frame_im.r_0[1];
//   engine.cylinder3.jointRRP.frame_im.r_0[1] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[1];
//   engine.cylinder3.jointRRP.frame_im.r_0[1] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0[1];
//   engine.cylinder3.jointRRP.frame_im.r_0[2] = engine.cylinder3.jointRRP.jointUSP.frame_im.r_0[2];
//   engine.cylinder3.jointRRP.frame_im.r_0[2] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[2];
//   engine.cylinder3.jointRRP.frame_im.r_0[2] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0[2];
//   engine.cylinder3.jointRRP.frame_im.r_0[3] = engine.cylinder3.jointRRP.jointUSP.frame_im.r_0[3];
//   engine.cylinder3.jointRRP.frame_im.r_0[3] = engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.r_0[3];
//   engine.cylinder3.jointRRP.frame_im.r_0[3] = engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.r_0[3];
//   engine.cylinder3.jointRRP.jointUSP.frame_ia.t[1] + (-engine.cylinder3.jointRRP.frame_ia.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ia.t[2] + (-engine.cylinder3.jointRRP.frame_ia.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ia.t[3] + (-engine.cylinder3.jointRRP.frame_ia.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ia.f[1] + (-engine.cylinder3.jointRRP.frame_ia.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ia.f[2] + (-engine.cylinder3.jointRRP.frame_ia.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_ia.f[3] + (-engine.cylinder3.jointRRP.frame_ia.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_b.t[1] + (-engine.cylinder3.jointRRP.frame_b.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_b.t[2] + (-engine.cylinder3.jointRRP.frame_b.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_b.t[3] + (-engine.cylinder3.jointRRP.frame_b.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_b.f[1] + (-engine.cylinder3.jointRRP.frame_b.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_b.f[2] + (-engine.cylinder3.jointRRP.frame_b.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_b.f[3] + (-engine.cylinder3.jointRRP.frame_b.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_a.t[1] + (-engine.cylinder3.jointRRP.frame_a.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_a.t[2] + (-engine.cylinder3.jointRRP.frame_a.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_a.t[3] + (-engine.cylinder3.jointRRP.frame_a.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_a.f[1] + (-engine.cylinder3.jointRRP.frame_a.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_a.f[2] + (-engine.cylinder3.jointRRP.frame_a.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.frame_a.f[3] + (-engine.cylinder3.jointRRP.frame_a.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.r_rel[1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.r_rel[2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.r_rel[3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3];
//   engine.cylinder3.jointRRP.jointUSP.prismatic.bearing.f + (-engine.cylinder3.jointRRP.jointUSP.bearing.f) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.axis.f + (-engine.cylinder3.jointRRP.jointUSP.axis.f) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.position_b[1].y = engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[1];
//   engine.cylinder3.jointRRP.jointUSP.position_b[2].y = engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[2];
//   engine.cylinder3.jointRRP.jointUSP.position_b[3].y = engine.cylinder3.jointRRP.jointUSP.prismatic.position_b[3];
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_ia.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_ia.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.t[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_ia.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_ia.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_ia.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod1.frame_ia.f[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_ia.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_im.t[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_im.t[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.t[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_im.t[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_im.f[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_im.f[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.rod2.frame_b.f[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_b.f[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_im.f[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[1] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_b.t[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[2] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_b.t[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[3] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.t[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_b.t[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[1] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_b.f[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[2] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_b.f[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[3] + (engine.cylinder3.jointRRP.jointUSP.prismatic.frame_a.f[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_b.f[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_a.t[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_a.t[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.t[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_a.t[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[1] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_a.f[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[2] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_a.f[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[3] + (engine.cylinder3.jointRRP.jointUSP.rod1.frame_a.f[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_a.f[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_ib.t[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_ib.t[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.t[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_ib.t[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[1] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[1] + (-engine.cylinder3.jointRRP.jointUSP.frame_ib.f[1])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[2] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[2] + (-engine.cylinder3.jointRRP.jointUSP.frame_ib.f[2])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.prismatic.frame_b.f[3] + (engine.cylinder3.jointRRP.jointUSP.rod2.frame_a.f[3] + (-engine.cylinder3.jointRRP.jointUSP.frame_ib.f[3])) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1] + engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2] + engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3] + engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1] + engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2] + engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3] + engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3] = engine.cylinder3.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_b.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.t[3]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[1]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[2]) = 0.0;
//   engine.cylinder3.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] + (-engine.cylinder3.jointRRP.jointUSP.relativePosition.frame_a.f[3]) = 0.0;
//   engine.cylinder3.jointRRP.frame_im.t[3] = 0.0;
//   engine.cylinder3.jointRRP.frame_im.t[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_im.t[1] = 0.0;
//   engine.cylinder3.jointRRP.frame_im.f[3] = 0.0;
//   engine.cylinder3.jointRRP.frame_im.f[2] = 0.0;
//   engine.cylinder3.jointRRP.frame_im.f[1] = 0.0;
//   engine.cylinder2.Crank.frame_b.t[1] + (-engine.cylinder2.crank_b.t[1]) = 0.0;
//   engine.cylinder2.Crank.frame_b.t[2] + (-engine.cylinder2.crank_b.t[2]) = 0.0;
//   engine.cylinder2.Crank.frame_b.t[3] + (-engine.cylinder2.crank_b.t[3]) = 0.0;
//   engine.cylinder2.Crank.frame_b.f[1] + (-engine.cylinder2.crank_b.f[1]) = 0.0;
//   engine.cylinder2.Crank.frame_b.f[2] + (-engine.cylinder2.crank_b.f[2]) = 0.0;
//   engine.cylinder2.Crank.frame_b.f[3] + (-engine.cylinder2.crank_b.f[3]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_a.t[1] + ((-engine.cylinder2.crank_a.t[1]) + engine.cylinder2.Crank.frame_a.t[1]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_a.t[2] + ((-engine.cylinder2.crank_a.t[2]) + engine.cylinder2.Crank.frame_a.t[2]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_a.t[3] + ((-engine.cylinder2.crank_a.t[3]) + engine.cylinder2.Crank.frame_a.t[3]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_a.f[1] + ((-engine.cylinder2.crank_a.f[1]) + engine.cylinder2.Crank.frame_a.f[1]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_a.f[2] + ((-engine.cylinder2.crank_a.f[2]) + engine.cylinder2.Crank.frame_a.f[2]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_a.f[3] + ((-engine.cylinder2.crank_a.f[3]) + engine.cylinder2.Crank.frame_a.f[3]) = 0.0;
//   (-engine.cylinder2.cylinder_b.t[1]) + engine.cylinder2.Mounting.frame_b.t[1] = 0.0;
//   (-engine.cylinder2.cylinder_b.t[2]) + engine.cylinder2.Mounting.frame_b.t[2] = 0.0;
//   (-engine.cylinder2.cylinder_b.t[3]) + engine.cylinder2.Mounting.frame_b.t[3] = 0.0;
//   (-engine.cylinder2.cylinder_b.f[1]) + engine.cylinder2.Mounting.frame_b.f[1] = 0.0;
//   (-engine.cylinder2.cylinder_b.f[2]) + engine.cylinder2.Mounting.frame_b.f[2] = 0.0;
//   (-engine.cylinder2.cylinder_b.f[3]) + engine.cylinder2.Mounting.frame_b.f[3] = 0.0;
//   (-engine.cylinder2.cylinder_a.t[1]) + (engine.cylinder2.CylinderInclination.frame_a.t[1] + engine.cylinder2.Mounting.frame_a.t[1]) = 0.0;
//   (-engine.cylinder2.cylinder_a.t[2]) + (engine.cylinder2.CylinderInclination.frame_a.t[2] + engine.cylinder2.Mounting.frame_a.t[2]) = 0.0;
//   (-engine.cylinder2.cylinder_a.t[3]) + (engine.cylinder2.CylinderInclination.frame_a.t[3] + engine.cylinder2.Mounting.frame_a.t[3]) = 0.0;
//   (-engine.cylinder2.cylinder_a.f[1]) + (engine.cylinder2.CylinderInclination.frame_a.f[1] + engine.cylinder2.Mounting.frame_a.f[1]) = 0.0;
//   (-engine.cylinder2.cylinder_a.f[2]) + (engine.cylinder2.CylinderInclination.frame_a.f[2] + engine.cylinder2.Mounting.frame_a.f[2]) = 0.0;
//   (-engine.cylinder2.cylinder_a.f[3]) + (engine.cylinder2.CylinderInclination.frame_a.f[3] + engine.cylinder2.Mounting.frame_a.f[3]) = 0.0;
//   engine.cylinder2.CrankShape.frame_a.t[1] + (engine.cylinder2.CrankAngle.frame_b.t[1] + engine.cylinder2.Mid.frame_a.t[1]) = 0.0;
//   engine.cylinder2.CrankShape.frame_a.t[2] + (engine.cylinder2.CrankAngle.frame_b.t[2] + engine.cylinder2.Mid.frame_a.t[2]) = 0.0;
//   engine.cylinder2.CrankShape.frame_a.t[3] + (engine.cylinder2.CrankAngle.frame_b.t[3] + engine.cylinder2.Mid.frame_a.t[3]) = 0.0;
//   engine.cylinder2.CrankShape.frame_a.f[1] + (engine.cylinder2.CrankAngle.frame_b.f[1] + engine.cylinder2.Mid.frame_a.f[1]) = 0.0;
//   engine.cylinder2.CrankShape.frame_a.f[2] + (engine.cylinder2.CrankAngle.frame_b.f[2] + engine.cylinder2.Mid.frame_a.f[2]) = 0.0;
//   engine.cylinder2.CrankShape.frame_a.f[3] + (engine.cylinder2.CrankAngle.frame_b.f[3] + engine.cylinder2.Mid.frame_a.f[3]) = 0.0;
//   engine.cylinder2.CrankAngle.frame_b.R.w[1] = engine.cylinder2.CrankShape.frame_a.R.w[1];
//   engine.cylinder2.CrankAngle.frame_b.R.w[1] = engine.cylinder2.Mid.frame_a.R.w[1];
//   engine.cylinder2.CrankAngle.frame_b.R.w[2] = engine.cylinder2.CrankShape.frame_a.R.w[2];
//   engine.cylinder2.CrankAngle.frame_b.R.w[2] = engine.cylinder2.Mid.frame_a.R.w[2];
//   engine.cylinder2.CrankAngle.frame_b.R.w[3] = engine.cylinder2.CrankShape.frame_a.R.w[3];
//   engine.cylinder2.CrankAngle.frame_b.R.w[3] = engine.cylinder2.Mid.frame_a.R.w[3];
//   engine.cylinder2.CrankAngle.frame_b.R.T[1,1] = engine.cylinder2.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder2.CrankAngle.frame_b.R.T[1,1] = engine.cylinder2.Mid.frame_a.R.T[1,1];
//   engine.cylinder2.CrankAngle.frame_b.R.T[1,2] = engine.cylinder2.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder2.CrankAngle.frame_b.R.T[1,2] = engine.cylinder2.Mid.frame_a.R.T[1,2];
//   engine.cylinder2.CrankAngle.frame_b.R.T[1,3] = engine.cylinder2.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder2.CrankAngle.frame_b.R.T[1,3] = engine.cylinder2.Mid.frame_a.R.T[1,3];
//   engine.cylinder2.CrankAngle.frame_b.R.T[2,1] = engine.cylinder2.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder2.CrankAngle.frame_b.R.T[2,1] = engine.cylinder2.Mid.frame_a.R.T[2,1];
//   engine.cylinder2.CrankAngle.frame_b.R.T[2,2] = engine.cylinder2.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder2.CrankAngle.frame_b.R.T[2,2] = engine.cylinder2.Mid.frame_a.R.T[2,2];
//   engine.cylinder2.CrankAngle.frame_b.R.T[2,3] = engine.cylinder2.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder2.CrankAngle.frame_b.R.T[2,3] = engine.cylinder2.Mid.frame_a.R.T[2,3];
//   engine.cylinder2.CrankAngle.frame_b.R.T[3,1] = engine.cylinder2.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder2.CrankAngle.frame_b.R.T[3,1] = engine.cylinder2.Mid.frame_a.R.T[3,1];
//   engine.cylinder2.CrankAngle.frame_b.R.T[3,2] = engine.cylinder2.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder2.CrankAngle.frame_b.R.T[3,2] = engine.cylinder2.Mid.frame_a.R.T[3,2];
//   engine.cylinder2.CrankAngle.frame_b.R.T[3,3] = engine.cylinder2.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder2.CrankAngle.frame_b.R.T[3,3] = engine.cylinder2.Mid.frame_a.R.T[3,3];
//   engine.cylinder2.CrankAngle.frame_b.r_0[1] = engine.cylinder2.CrankShape.frame_a.r_0[1];
//   engine.cylinder2.CrankAngle.frame_b.r_0[1] = engine.cylinder2.Mid.frame_a.r_0[1];
//   engine.cylinder2.CrankAngle.frame_b.r_0[2] = engine.cylinder2.CrankShape.frame_a.r_0[2];
//   engine.cylinder2.CrankAngle.frame_b.r_0[2] = engine.cylinder2.Mid.frame_a.r_0[2];
//   engine.cylinder2.CrankAngle.frame_b.r_0[3] = engine.cylinder2.CrankShape.frame_a.r_0[3];
//   engine.cylinder2.CrankAngle.frame_b.r_0[3] = engine.cylinder2.Mid.frame_a.r_0[3];
//   engine.cylinder2.jointRRP.frame_b.t[1] + engine.cylinder2.CylinderInclination.frame_b.t[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_b.t[2] + engine.cylinder2.CylinderInclination.frame_b.t[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_b.t[3] + engine.cylinder2.CylinderInclination.frame_b.t[3] = 0.0;
//   engine.cylinder2.jointRRP.frame_b.f[1] + engine.cylinder2.CylinderInclination.frame_b.f[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_b.f[2] + engine.cylinder2.CylinderInclination.frame_b.f[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_b.f[3] + engine.cylinder2.CylinderInclination.frame_b.f[3] = 0.0;
//   engine.cylinder2.CylinderInclination.frame_b.R.w[1] = engine.cylinder2.jointRRP.frame_b.R.w[1];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.w[1];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.w[1];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[2] = engine.cylinder2.jointRRP.frame_b.R.w[2];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.w[2];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.w[2];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[3] = engine.cylinder2.jointRRP.frame_b.R.w[3];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.w[3];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.w[3];
//   engine.cylinder2.CylinderInclination.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.frame_b.R.T[1,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[1,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.frame_b.R.T[1,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[1,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.frame_b.R.T[1,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[1,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.frame_b.R.T[2,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[2,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.frame_b.R.T[2,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[2,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.frame_b.R.T[2,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[2,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.frame_b.R.T[3,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[3,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.frame_b.R.T[3,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[3,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.frame_b.R.T[3,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.frame_b.R.T[3,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder2.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[1] = engine.cylinder2.jointRRP.frame_b.r_0[1];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.frame_b.r_0[1];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0[1];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.r_0[1];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[2] = engine.cylinder2.jointRRP.frame_b.r_0[2];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.frame_b.r_0[2];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0[2];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.r_0[2];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[3] = engine.cylinder2.jointRRP.frame_b.r_0[3];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.frame_b.r_0[3];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.r_0[3];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.r_0[3];
//   engine.cylinder2.CylinderInclination.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3];
//   engine.cylinder2.jointRRP.frame_ib.t[1] + engine.cylinder2.Piston.frame_b.t[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_ib.t[2] + engine.cylinder2.Piston.frame_b.t[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_ib.t[3] + engine.cylinder2.Piston.frame_b.t[3] = 0.0;
//   engine.cylinder2.jointRRP.frame_ib.f[1] + engine.cylinder2.Piston.frame_b.f[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_ib.f[2] + engine.cylinder2.Piston.frame_b.f[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_ib.f[3] + engine.cylinder2.Piston.frame_b.f[3] = 0.0;
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder2.Piston.frame_b.R.w[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder2.jointRRP.frame_ib.R.w[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.w[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder2.Piston.frame_b.R.w[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder2.jointRRP.frame_ib.R.w[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.w[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder2.Piston.frame_b.R.w[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder2.jointRRP.frame_ib.R.w[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.w[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.w[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.Piston.frame_b.R.T[1,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.frame_ib.R.T[1,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[1,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.Piston.frame_b.R.T[1,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.frame_ib.R.T[1,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[1,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.Piston.frame_b.R.T[1,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.frame_ib.R.T[1,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[1,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.Piston.frame_b.R.T[2,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.frame_ib.R.T[2,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[2,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.Piston.frame_b.R.T[2,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.frame_ib.R.T[2,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[2,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.Piston.frame_b.R.T[2,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.frame_ib.R.T[2,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[2,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.Piston.frame_b.R.T[3,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.frame_ib.R.T[3,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[3,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.Piston.frame_b.R.T[3,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.frame_ib.R.T[3,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[3,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.Piston.frame_b.R.T[3,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.frame_ib.R.T[3,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.frame_ib.R.T[3,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder2.Piston.frame_b.r_0[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder2.jointRRP.frame_ib.r_0[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.frame_ib.r_0[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0[1];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder2.Piston.frame_b.r_0[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder2.jointRRP.frame_ib.r_0[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.frame_ib.r_0[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0[2];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder2.Piston.frame_b.r_0[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder2.jointRRP.frame_ib.r_0[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.frame_ib.r_0[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.r_0[3];
//   engine.cylinder2.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.r_0[3];
//   engine.cylinder2.jointRRP.bearing.f + engine.cylinder2.gasForce.flange_b.f = 0.0;
//   engine.cylinder2.gasForce.flange_b.s = engine.cylinder2.jointRRP.bearing.s;
//   engine.cylinder2.gasForce.flange_b.s = engine.cylinder2.jointRRP.jointUSP.bearing.s;
//   engine.cylinder2.gasForce.flange_b.s = engine.cylinder2.jointRRP.jointUSP.prismatic.bearing.s;
//   engine.cylinder2.gasForce.flange_a.f + engine.cylinder2.jointRRP.axis.f = 0.0;
//   engine.cylinder2.gasForce.flange_a.s = engine.cylinder2.jointRRP.axis.s;
//   engine.cylinder2.gasForce.flange_a.s = engine.cylinder2.jointRRP.jointUSP.axis.s;
//   engine.cylinder2.gasForce.flange_a.s = engine.cylinder2.jointRRP.jointUSP.prismatic.axis.s;
//   engine.cylinder2.Mid.frame_b.t[1] + engine.cylinder2.jointRRP.frame_a.t[1] = 0.0;
//   engine.cylinder2.Mid.frame_b.t[2] + engine.cylinder2.jointRRP.frame_a.t[2] = 0.0;
//   engine.cylinder2.Mid.frame_b.t[3] + engine.cylinder2.jointRRP.frame_a.t[3] = 0.0;
//   engine.cylinder2.Mid.frame_b.f[1] + engine.cylinder2.jointRRP.frame_a.f[1] = 0.0;
//   engine.cylinder2.Mid.frame_b.f[2] + engine.cylinder2.jointRRP.frame_a.f[2] = 0.0;
//   engine.cylinder2.Mid.frame_b.f[3] + engine.cylinder2.jointRRP.frame_a.f[3] = 0.0;
//   engine.cylinder2.Mid.frame_b.R.w[1] = engine.cylinder2.jointRRP.frame_a.R.w[1];
//   engine.cylinder2.Mid.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.w[1];
//   engine.cylinder2.Mid.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.w[1];
//   engine.cylinder2.Mid.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1];
//   engine.cylinder2.Mid.frame_b.R.w[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[1];
//   engine.cylinder2.Mid.frame_b.R.w[2] = engine.cylinder2.jointRRP.frame_a.R.w[2];
//   engine.cylinder2.Mid.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.w[2];
//   engine.cylinder2.Mid.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.w[2];
//   engine.cylinder2.Mid.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2];
//   engine.cylinder2.Mid.frame_b.R.w[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[2];
//   engine.cylinder2.Mid.frame_b.R.w[3] = engine.cylinder2.jointRRP.frame_a.R.w[3];
//   engine.cylinder2.Mid.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.w[3];
//   engine.cylinder2.Mid.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.w[3];
//   engine.cylinder2.Mid.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3];
//   engine.cylinder2.Mid.frame_b.R.w[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.w[3];
//   engine.cylinder2.Mid.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.frame_a.R.T[1,1];
//   engine.cylinder2.Mid.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[1,1];
//   engine.cylinder2.Mid.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder2.Mid.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder2.Mid.frame_b.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[1,1];
//   engine.cylinder2.Mid.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.frame_a.R.T[1,2];
//   engine.cylinder2.Mid.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[1,2];
//   engine.cylinder2.Mid.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder2.Mid.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder2.Mid.frame_b.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[1,2];
//   engine.cylinder2.Mid.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.frame_a.R.T[1,3];
//   engine.cylinder2.Mid.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[1,3];
//   engine.cylinder2.Mid.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder2.Mid.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder2.Mid.frame_b.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[1,3];
//   engine.cylinder2.Mid.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.frame_a.R.T[2,1];
//   engine.cylinder2.Mid.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[2,1];
//   engine.cylinder2.Mid.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder2.Mid.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder2.Mid.frame_b.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[2,1];
//   engine.cylinder2.Mid.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.frame_a.R.T[2,2];
//   engine.cylinder2.Mid.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[2,2];
//   engine.cylinder2.Mid.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder2.Mid.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder2.Mid.frame_b.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[2,2];
//   engine.cylinder2.Mid.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.frame_a.R.T[2,3];
//   engine.cylinder2.Mid.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[2,3];
//   engine.cylinder2.Mid.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder2.Mid.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder2.Mid.frame_b.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[2,3];
//   engine.cylinder2.Mid.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.frame_a.R.T[3,1];
//   engine.cylinder2.Mid.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[3,1];
//   engine.cylinder2.Mid.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder2.Mid.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder2.Mid.frame_b.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[3,1];
//   engine.cylinder2.Mid.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.frame_a.R.T[3,2];
//   engine.cylinder2.Mid.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[3,2];
//   engine.cylinder2.Mid.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder2.Mid.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder2.Mid.frame_b.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[3,2];
//   engine.cylinder2.Mid.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.frame_a.R.T[3,3];
//   engine.cylinder2.Mid.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.frame_a.R.T[3,3];
//   engine.cylinder2.Mid.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder2.Mid.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder2.Mid.frame_b.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.R.T[3,3];
//   engine.cylinder2.Mid.frame_b.r_0[1] = engine.cylinder2.jointRRP.frame_a.r_0[1];
//   engine.cylinder2.Mid.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.frame_a.r_0[1];
//   engine.cylinder2.Mid.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.r_0[1];
//   engine.cylinder2.Mid.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1];
//   engine.cylinder2.Mid.frame_b.r_0[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder2.Mid.frame_b.r_0[2] = engine.cylinder2.jointRRP.frame_a.r_0[2];
//   engine.cylinder2.Mid.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.frame_a.r_0[2];
//   engine.cylinder2.Mid.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.r_0[2];
//   engine.cylinder2.Mid.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2];
//   engine.cylinder2.Mid.frame_b.r_0[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder2.Mid.frame_b.r_0[3] = engine.cylinder2.jointRRP.frame_a.r_0[3];
//   engine.cylinder2.Mid.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.frame_a.r_0[3];
//   engine.cylinder2.Mid.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.r_0[3];
//   engine.cylinder2.Mid.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3];
//   engine.cylinder2.Mid.frame_b.r_0[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder2.jointRRP.frame_ia.t[1] + engine.cylinder2.Rod.frame_a.t[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_ia.t[2] + engine.cylinder2.Rod.frame_a.t[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_ia.t[3] + engine.cylinder2.Rod.frame_a.t[3] = 0.0;
//   engine.cylinder2.jointRRP.frame_ia.f[1] + engine.cylinder2.Rod.frame_a.f[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_ia.f[2] + engine.cylinder2.Rod.frame_a.f[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_ia.f[3] + engine.cylinder2.Rod.frame_a.f[3] = 0.0;
//   engine.cylinder2.Rod.body.frame_a.R.w[1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder2.Rod.body.frame_a.R.w[1] = engine.cylinder2.Rod.frame_a.R.w[1];
//   engine.cylinder2.Rod.body.frame_a.R.w[1] = engine.cylinder2.jointRRP.frame_ia.R.w[1];
//   engine.cylinder2.Rod.body.frame_a.R.w[1] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.w[1];
//   engine.cylinder2.Rod.body.frame_a.R.w[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.w[1];
//   engine.cylinder2.Rod.body.frame_a.R.w[2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder2.Rod.body.frame_a.R.w[2] = engine.cylinder2.Rod.frame_a.R.w[2];
//   engine.cylinder2.Rod.body.frame_a.R.w[2] = engine.cylinder2.jointRRP.frame_ia.R.w[2];
//   engine.cylinder2.Rod.body.frame_a.R.w[2] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.w[2];
//   engine.cylinder2.Rod.body.frame_a.R.w[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.w[2];
//   engine.cylinder2.Rod.body.frame_a.R.w[3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.w[3];
//   engine.cylinder2.Rod.body.frame_a.R.w[3] = engine.cylinder2.Rod.frame_a.R.w[3];
//   engine.cylinder2.Rod.body.frame_a.R.w[3] = engine.cylinder2.jointRRP.frame_ia.R.w[3];
//   engine.cylinder2.Rod.body.frame_a.R.w[3] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.w[3];
//   engine.cylinder2.Rod.body.frame_a.R.w[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.w[3];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,1] = engine.cylinder2.Rod.frame_a.R.T[1,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,1] = engine.cylinder2.jointRRP.frame_ia.R.T[1,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[1,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,2] = engine.cylinder2.Rod.frame_a.R.T[1,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,2] = engine.cylinder2.jointRRP.frame_ia.R.T[1,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[1,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,3] = engine.cylinder2.Rod.frame_a.R.T[1,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,3] = engine.cylinder2.jointRRP.frame_ia.R.T[1,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[1,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,1] = engine.cylinder2.Rod.frame_a.R.T[2,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,1] = engine.cylinder2.jointRRP.frame_ia.R.T[2,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[2,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,2] = engine.cylinder2.Rod.frame_a.R.T[2,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,2] = engine.cylinder2.jointRRP.frame_ia.R.T[2,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[2,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,3] = engine.cylinder2.Rod.frame_a.R.T[2,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,3] = engine.cylinder2.jointRRP.frame_ia.R.T[2,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[2,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,1] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,1] = engine.cylinder2.Rod.frame_a.R.T[3,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,1] = engine.cylinder2.jointRRP.frame_ia.R.T[3,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[3,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,2] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,2] = engine.cylinder2.Rod.frame_a.R.T[3,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,2] = engine.cylinder2.jointRRP.frame_ia.R.T[3,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[3,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,3] = engine.cylinder2.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,3] = engine.cylinder2.Rod.frame_a.R.T[3,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,3] = engine.cylinder2.jointRRP.frame_ia.R.T[3,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.frame_ia.R.T[3,3];
//   engine.cylinder2.Rod.body.frame_a.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3];
//   engine.cylinder2.Rod.body.frame_a.r_0[1] = engine.cylinder2.Rod.frameTranslation.frame_a.r_0[1];
//   engine.cylinder2.Rod.body.frame_a.r_0[1] = engine.cylinder2.Rod.frame_a.r_0[1];
//   engine.cylinder2.Rod.body.frame_a.r_0[1] = engine.cylinder2.jointRRP.frame_ia.r_0[1];
//   engine.cylinder2.Rod.body.frame_a.r_0[1] = engine.cylinder2.jointRRP.jointUSP.frame_ia.r_0[1];
//   engine.cylinder2.Rod.body.frame_a.r_0[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[1];
//   engine.cylinder2.Rod.body.frame_a.r_0[2] = engine.cylinder2.Rod.frameTranslation.frame_a.r_0[2];
//   engine.cylinder2.Rod.body.frame_a.r_0[2] = engine.cylinder2.Rod.frame_a.r_0[2];
//   engine.cylinder2.Rod.body.frame_a.r_0[2] = engine.cylinder2.jointRRP.frame_ia.r_0[2];
//   engine.cylinder2.Rod.body.frame_a.r_0[2] = engine.cylinder2.jointRRP.jointUSP.frame_ia.r_0[2];
//   engine.cylinder2.Rod.body.frame_a.r_0[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[2];
//   engine.cylinder2.Rod.body.frame_a.r_0[3] = engine.cylinder2.Rod.frameTranslation.frame_a.r_0[3];
//   engine.cylinder2.Rod.body.frame_a.r_0[3] = engine.cylinder2.Rod.frame_a.r_0[3];
//   engine.cylinder2.Rod.body.frame_a.r_0[3] = engine.cylinder2.jointRRP.frame_ia.r_0[3];
//   engine.cylinder2.Rod.body.frame_a.r_0[3] = engine.cylinder2.jointRRP.jointUSP.frame_ia.r_0[3];
//   engine.cylinder2.Rod.body.frame_a.r_0[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.r_0[3];
//   (-engine.cylinder2.Piston.frame_a.t[1]) + (engine.cylinder2.Piston.frameTranslation.frame_a.t[1] + engine.cylinder2.Piston.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder2.Piston.frame_a.t[2]) + (engine.cylinder2.Piston.frameTranslation.frame_a.t[2] + engine.cylinder2.Piston.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder2.Piston.frame_a.t[3]) + (engine.cylinder2.Piston.frameTranslation.frame_a.t[3] + engine.cylinder2.Piston.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder2.Piston.frame_a.f[1]) + (engine.cylinder2.Piston.frameTranslation.frame_a.f[1] + engine.cylinder2.Piston.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder2.Piston.frame_a.f[2]) + (engine.cylinder2.Piston.frameTranslation.frame_a.f[2] + engine.cylinder2.Piston.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder2.Piston.frame_a.f[3]) + (engine.cylinder2.Piston.frameTranslation.frame_a.f[3] + engine.cylinder2.Piston.body.frame_a.f[3]) = 0.0;
//   engine.cylinder2.Piston.body.frame_a.R.w[1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder2.Piston.body.frame_a.R.w[1] = engine.cylinder2.Piston.frame_a.R.w[1];
//   engine.cylinder2.Piston.body.frame_a.R.w[2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder2.Piston.body.frame_a.R.w[2] = engine.cylinder2.Piston.frame_a.R.w[2];
//   engine.cylinder2.Piston.body.frame_a.R.w[3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.w[3];
//   engine.cylinder2.Piston.body.frame_a.R.w[3] = engine.cylinder2.Piston.frame_a.R.w[3];
//   engine.cylinder2.Piston.body.frame_a.R.T[1,1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder2.Piston.body.frame_a.R.T[1,1] = engine.cylinder2.Piston.frame_a.R.T[1,1];
//   engine.cylinder2.Piston.body.frame_a.R.T[1,2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder2.Piston.body.frame_a.R.T[1,2] = engine.cylinder2.Piston.frame_a.R.T[1,2];
//   engine.cylinder2.Piston.body.frame_a.R.T[1,3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder2.Piston.body.frame_a.R.T[1,3] = engine.cylinder2.Piston.frame_a.R.T[1,3];
//   engine.cylinder2.Piston.body.frame_a.R.T[2,1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder2.Piston.body.frame_a.R.T[2,1] = engine.cylinder2.Piston.frame_a.R.T[2,1];
//   engine.cylinder2.Piston.body.frame_a.R.T[2,2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder2.Piston.body.frame_a.R.T[2,2] = engine.cylinder2.Piston.frame_a.R.T[2,2];
//   engine.cylinder2.Piston.body.frame_a.R.T[2,3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder2.Piston.body.frame_a.R.T[2,3] = engine.cylinder2.Piston.frame_a.R.T[2,3];
//   engine.cylinder2.Piston.body.frame_a.R.T[3,1] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder2.Piston.body.frame_a.R.T[3,1] = engine.cylinder2.Piston.frame_a.R.T[3,1];
//   engine.cylinder2.Piston.body.frame_a.R.T[3,2] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder2.Piston.body.frame_a.R.T[3,2] = engine.cylinder2.Piston.frame_a.R.T[3,2];
//   engine.cylinder2.Piston.body.frame_a.R.T[3,3] = engine.cylinder2.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder2.Piston.body.frame_a.R.T[3,3] = engine.cylinder2.Piston.frame_a.R.T[3,3];
//   engine.cylinder2.Piston.body.frame_a.r_0[1] = engine.cylinder2.Piston.frameTranslation.frame_a.r_0[1];
//   engine.cylinder2.Piston.body.frame_a.r_0[1] = engine.cylinder2.Piston.frame_a.r_0[1];
//   engine.cylinder2.Piston.body.frame_a.r_0[2] = engine.cylinder2.Piston.frameTranslation.frame_a.r_0[2];
//   engine.cylinder2.Piston.body.frame_a.r_0[2] = engine.cylinder2.Piston.frame_a.r_0[2];
//   engine.cylinder2.Piston.body.frame_a.r_0[3] = engine.cylinder2.Piston.frameTranslation.frame_a.r_0[3];
//   engine.cylinder2.Piston.body.frame_a.r_0[3] = engine.cylinder2.Piston.frame_a.r_0[3];
//   (-engine.cylinder2.Piston.frame_b.t[1]) + engine.cylinder2.Piston.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder2.Piston.frame_b.t[2]) + engine.cylinder2.Piston.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder2.Piston.frame_b.t[3]) + engine.cylinder2.Piston.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder2.Piston.frame_b.f[1]) + engine.cylinder2.Piston.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder2.Piston.frame_b.f[2]) + engine.cylinder2.Piston.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder2.Piston.frame_b.f[3]) + engine.cylinder2.Piston.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder2.Piston.frame_a.t[3] = 0.0;
//   engine.cylinder2.Piston.frame_a.t[2] = 0.0;
//   engine.cylinder2.Piston.frame_a.t[1] = 0.0;
//   engine.cylinder2.Piston.frame_a.f[3] = 0.0;
//   engine.cylinder2.Piston.frame_a.f[2] = 0.0;
//   engine.cylinder2.Piston.frame_a.f[1] = 0.0;
//   (-engine.cylinder2.Rod.frame_a.t[1]) + (engine.cylinder2.Rod.frameTranslation.frame_a.t[1] + engine.cylinder2.Rod.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder2.Rod.frame_a.t[2]) + (engine.cylinder2.Rod.frameTranslation.frame_a.t[2] + engine.cylinder2.Rod.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder2.Rod.frame_a.t[3]) + (engine.cylinder2.Rod.frameTranslation.frame_a.t[3] + engine.cylinder2.Rod.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder2.Rod.frame_a.f[1]) + (engine.cylinder2.Rod.frameTranslation.frame_a.f[1] + engine.cylinder2.Rod.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder2.Rod.frame_a.f[2]) + (engine.cylinder2.Rod.frameTranslation.frame_a.f[2] + engine.cylinder2.Rod.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder2.Rod.frame_a.f[3]) + (engine.cylinder2.Rod.frameTranslation.frame_a.f[3] + engine.cylinder2.Rod.body.frame_a.f[3]) = 0.0;
//   (-engine.cylinder2.Rod.frame_b.t[1]) + engine.cylinder2.Rod.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder2.Rod.frame_b.t[2]) + engine.cylinder2.Rod.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder2.Rod.frame_b.t[3]) + engine.cylinder2.Rod.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder2.Rod.frame_b.f[1]) + engine.cylinder2.Rod.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder2.Rod.frame_b.f[2]) + engine.cylinder2.Rod.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder2.Rod.frame_b.f[3]) + engine.cylinder2.Rod.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder2.Rod.frame_b.R.w[1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder2.Rod.frame_b.R.w[2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder2.Rod.frame_b.R.w[3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder2.Rod.frame_b.R.T[1,1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder2.Rod.frame_b.R.T[1,2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder2.Rod.frame_b.R.T[1,3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder2.Rod.frame_b.R.T[2,1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder2.Rod.frame_b.R.T[2,2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder2.Rod.frame_b.R.T[2,3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder2.Rod.frame_b.R.T[3,1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder2.Rod.frame_b.R.T[3,2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder2.Rod.frame_b.R.T[3,3];
//   engine.cylinder2.Rod.frameTranslation.frame_b.r_0[1] = engine.cylinder2.Rod.frame_b.r_0[1];
//   engine.cylinder2.Rod.frameTranslation.frame_b.r_0[2] = engine.cylinder2.Rod.frame_b.r_0[2];
//   engine.cylinder2.Rod.frameTranslation.frame_b.r_0[3] = engine.cylinder2.Rod.frame_b.r_0[3];
//   engine.cylinder2.Rod.frame_b.t[3] = 0.0;
//   engine.cylinder2.Rod.frame_b.t[2] = 0.0;
//   engine.cylinder2.Rod.frame_b.t[1] = 0.0;
//   engine.cylinder2.Rod.frame_b.f[3] = 0.0;
//   engine.cylinder2.Rod.frame_b.f[2] = 0.0;
//   engine.cylinder2.Rod.frame_b.f[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.bearing.f + (-engine.cylinder2.jointRRP.bearing.f) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.axis.f + (-engine.cylinder2.jointRRP.axis.f) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ib.t[1] + (-engine.cylinder2.jointRRP.frame_ib.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ib.t[2] + (-engine.cylinder2.jointRRP.frame_ib.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ib.t[3] + (-engine.cylinder2.jointRRP.frame_ib.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ib.f[1] + (-engine.cylinder2.jointRRP.frame_ib.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ib.f[2] + (-engine.cylinder2.jointRRP.frame_ib.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ib.f[3] + (-engine.cylinder2.jointRRP.frame_ib.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_im.t[1] + (-engine.cylinder2.jointRRP.frame_im.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_im.t[2] + (-engine.cylinder2.jointRRP.frame_im.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_im.t[3] + (-engine.cylinder2.jointRRP.frame_im.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_im.f[1] + (-engine.cylinder2.jointRRP.frame_im.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_im.f[2] + (-engine.cylinder2.jointRRP.frame_im.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_im.f[3] + (-engine.cylinder2.jointRRP.frame_im.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.frame_im.R.w[1] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.w[1];
//   engine.cylinder2.jointRRP.frame_im.R.w[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.w[1];
//   engine.cylinder2.jointRRP.frame_im.R.w[1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[1];
//   engine.cylinder2.jointRRP.frame_im.R.w[2] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.w[2];
//   engine.cylinder2.jointRRP.frame_im.R.w[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.w[2];
//   engine.cylinder2.jointRRP.frame_im.R.w[2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[2];
//   engine.cylinder2.jointRRP.frame_im.R.w[3] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.w[3];
//   engine.cylinder2.jointRRP.frame_im.R.w[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.w[3];
//   engine.cylinder2.jointRRP.frame_im.R.w[3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.w[3];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[1,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[1,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[1,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[1,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[1,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[1,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[1,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[2,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[2,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[2,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[2,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[2,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[2,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[2,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[3,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[3,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,1];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[3,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[3,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,2];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.frame_im.R.T[3,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.R.T[3,3];
//   engine.cylinder2.jointRRP.frame_im.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.R.T[3,3];
//   engine.cylinder2.jointRRP.frame_im.r_0[1] = engine.cylinder2.jointRRP.jointUSP.frame_im.r_0[1];
//   engine.cylinder2.jointRRP.frame_im.r_0[1] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[1];
//   engine.cylinder2.jointRRP.frame_im.r_0[1] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0[1];
//   engine.cylinder2.jointRRP.frame_im.r_0[2] = engine.cylinder2.jointRRP.jointUSP.frame_im.r_0[2];
//   engine.cylinder2.jointRRP.frame_im.r_0[2] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[2];
//   engine.cylinder2.jointRRP.frame_im.r_0[2] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0[2];
//   engine.cylinder2.jointRRP.frame_im.r_0[3] = engine.cylinder2.jointRRP.jointUSP.frame_im.r_0[3];
//   engine.cylinder2.jointRRP.frame_im.r_0[3] = engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.r_0[3];
//   engine.cylinder2.jointRRP.frame_im.r_0[3] = engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.r_0[3];
//   engine.cylinder2.jointRRP.jointUSP.frame_ia.t[1] + (-engine.cylinder2.jointRRP.frame_ia.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ia.t[2] + (-engine.cylinder2.jointRRP.frame_ia.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ia.t[3] + (-engine.cylinder2.jointRRP.frame_ia.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ia.f[1] + (-engine.cylinder2.jointRRP.frame_ia.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ia.f[2] + (-engine.cylinder2.jointRRP.frame_ia.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_ia.f[3] + (-engine.cylinder2.jointRRP.frame_ia.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_b.t[1] + (-engine.cylinder2.jointRRP.frame_b.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_b.t[2] + (-engine.cylinder2.jointRRP.frame_b.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_b.t[3] + (-engine.cylinder2.jointRRP.frame_b.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_b.f[1] + (-engine.cylinder2.jointRRP.frame_b.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_b.f[2] + (-engine.cylinder2.jointRRP.frame_b.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_b.f[3] + (-engine.cylinder2.jointRRP.frame_b.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_a.t[1] + (-engine.cylinder2.jointRRP.frame_a.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_a.t[2] + (-engine.cylinder2.jointRRP.frame_a.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_a.t[3] + (-engine.cylinder2.jointRRP.frame_a.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_a.f[1] + (-engine.cylinder2.jointRRP.frame_a.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_a.f[2] + (-engine.cylinder2.jointRRP.frame_a.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.frame_a.f[3] + (-engine.cylinder2.jointRRP.frame_a.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.r_rel[1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.r_rel[2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.r_rel[3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3];
//   engine.cylinder2.jointRRP.jointUSP.prismatic.bearing.f + (-engine.cylinder2.jointRRP.jointUSP.bearing.f) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.axis.f + (-engine.cylinder2.jointRRP.jointUSP.axis.f) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.position_b[1].y = engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[1];
//   engine.cylinder2.jointRRP.jointUSP.position_b[2].y = engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[2];
//   engine.cylinder2.jointRRP.jointUSP.position_b[3].y = engine.cylinder2.jointRRP.jointUSP.prismatic.position_b[3];
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_ia.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_ia.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.t[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_ia.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_ia.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_ia.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod1.frame_ia.f[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_ia.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_im.t[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_im.t[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.t[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_im.t[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_im.f[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_im.f[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.rod2.frame_b.f[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_b.f[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_im.f[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[1] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_b.t[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[2] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_b.t[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[3] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.t[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_b.t[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[1] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_b.f[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[2] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_b.f[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[3] + (engine.cylinder2.jointRRP.jointUSP.prismatic.frame_a.f[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_b.f[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_a.t[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_a.t[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.t[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_a.t[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[1] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_a.f[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[2] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_a.f[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[3] + (engine.cylinder2.jointRRP.jointUSP.rod1.frame_a.f[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_a.f[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_ib.t[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_ib.t[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.t[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_ib.t[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[1] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[1] + (-engine.cylinder2.jointRRP.jointUSP.frame_ib.f[1])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[2] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[2] + (-engine.cylinder2.jointRRP.jointUSP.frame_ib.f[2])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.prismatic.frame_b.f[3] + (engine.cylinder2.jointRRP.jointUSP.rod2.frame_a.f[3] + (-engine.cylinder2.jointRRP.jointUSP.frame_ib.f[3])) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1] + engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2] + engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3] + engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1] + engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2] + engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3] + engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3] = engine.cylinder2.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_b.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.t[3]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[1]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[2]) = 0.0;
//   engine.cylinder2.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] + (-engine.cylinder2.jointRRP.jointUSP.relativePosition.frame_a.f[3]) = 0.0;
//   engine.cylinder2.jointRRP.frame_im.t[3] = 0.0;
//   engine.cylinder2.jointRRP.frame_im.t[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_im.t[1] = 0.0;
//   engine.cylinder2.jointRRP.frame_im.f[3] = 0.0;
//   engine.cylinder2.jointRRP.frame_im.f[2] = 0.0;
//   engine.cylinder2.jointRRP.frame_im.f[1] = 0.0;
//   engine.cylinder1.Crank.frame_b.t[1] + (-engine.cylinder1.crank_b.t[1]) = 0.0;
//   engine.cylinder1.Crank.frame_b.t[2] + (-engine.cylinder1.crank_b.t[2]) = 0.0;
//   engine.cylinder1.Crank.frame_b.t[3] + (-engine.cylinder1.crank_b.t[3]) = 0.0;
//   engine.cylinder1.Crank.frame_b.f[1] + (-engine.cylinder1.crank_b.f[1]) = 0.0;
//   engine.cylinder1.Crank.frame_b.f[2] + (-engine.cylinder1.crank_b.f[2]) = 0.0;
//   engine.cylinder1.Crank.frame_b.f[3] + (-engine.cylinder1.crank_b.f[3]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_a.t[1] + ((-engine.cylinder1.crank_a.t[1]) + engine.cylinder1.Crank.frame_a.t[1]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_a.t[2] + ((-engine.cylinder1.crank_a.t[2]) + engine.cylinder1.Crank.frame_a.t[2]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_a.t[3] + ((-engine.cylinder1.crank_a.t[3]) + engine.cylinder1.Crank.frame_a.t[3]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_a.f[1] + ((-engine.cylinder1.crank_a.f[1]) + engine.cylinder1.Crank.frame_a.f[1]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_a.f[2] + ((-engine.cylinder1.crank_a.f[2]) + engine.cylinder1.Crank.frame_a.f[2]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_a.f[3] + ((-engine.cylinder1.crank_a.f[3]) + engine.cylinder1.Crank.frame_a.f[3]) = 0.0;
//   (-engine.cylinder1.cylinder_b.t[1]) + engine.cylinder1.Mounting.frame_b.t[1] = 0.0;
//   (-engine.cylinder1.cylinder_b.t[2]) + engine.cylinder1.Mounting.frame_b.t[2] = 0.0;
//   (-engine.cylinder1.cylinder_b.t[3]) + engine.cylinder1.Mounting.frame_b.t[3] = 0.0;
//   (-engine.cylinder1.cylinder_b.f[1]) + engine.cylinder1.Mounting.frame_b.f[1] = 0.0;
//   (-engine.cylinder1.cylinder_b.f[2]) + engine.cylinder1.Mounting.frame_b.f[2] = 0.0;
//   (-engine.cylinder1.cylinder_b.f[3]) + engine.cylinder1.Mounting.frame_b.f[3] = 0.0;
//   (-engine.cylinder1.cylinder_a.t[1]) + (engine.cylinder1.CylinderInclination.frame_a.t[1] + engine.cylinder1.Mounting.frame_a.t[1]) = 0.0;
//   (-engine.cylinder1.cylinder_a.t[2]) + (engine.cylinder1.CylinderInclination.frame_a.t[2] + engine.cylinder1.Mounting.frame_a.t[2]) = 0.0;
//   (-engine.cylinder1.cylinder_a.t[3]) + (engine.cylinder1.CylinderInclination.frame_a.t[3] + engine.cylinder1.Mounting.frame_a.t[3]) = 0.0;
//   (-engine.cylinder1.cylinder_a.f[1]) + (engine.cylinder1.CylinderInclination.frame_a.f[1] + engine.cylinder1.Mounting.frame_a.f[1]) = 0.0;
//   (-engine.cylinder1.cylinder_a.f[2]) + (engine.cylinder1.CylinderInclination.frame_a.f[2] + engine.cylinder1.Mounting.frame_a.f[2]) = 0.0;
//   (-engine.cylinder1.cylinder_a.f[3]) + (engine.cylinder1.CylinderInclination.frame_a.f[3] + engine.cylinder1.Mounting.frame_a.f[3]) = 0.0;
//   engine.cylinder1.CrankShape.frame_a.t[1] + (engine.cylinder1.CrankAngle.frame_b.t[1] + engine.cylinder1.Mid.frame_a.t[1]) = 0.0;
//   engine.cylinder1.CrankShape.frame_a.t[2] + (engine.cylinder1.CrankAngle.frame_b.t[2] + engine.cylinder1.Mid.frame_a.t[2]) = 0.0;
//   engine.cylinder1.CrankShape.frame_a.t[3] + (engine.cylinder1.CrankAngle.frame_b.t[3] + engine.cylinder1.Mid.frame_a.t[3]) = 0.0;
//   engine.cylinder1.CrankShape.frame_a.f[1] + (engine.cylinder1.CrankAngle.frame_b.f[1] + engine.cylinder1.Mid.frame_a.f[1]) = 0.0;
//   engine.cylinder1.CrankShape.frame_a.f[2] + (engine.cylinder1.CrankAngle.frame_b.f[2] + engine.cylinder1.Mid.frame_a.f[2]) = 0.0;
//   engine.cylinder1.CrankShape.frame_a.f[3] + (engine.cylinder1.CrankAngle.frame_b.f[3] + engine.cylinder1.Mid.frame_a.f[3]) = 0.0;
//   engine.cylinder1.CrankAngle.frame_b.R.w[1] = engine.cylinder1.CrankShape.frame_a.R.w[1];
//   engine.cylinder1.CrankAngle.frame_b.R.w[1] = engine.cylinder1.Mid.frame_a.R.w[1];
//   engine.cylinder1.CrankAngle.frame_b.R.w[2] = engine.cylinder1.CrankShape.frame_a.R.w[2];
//   engine.cylinder1.CrankAngle.frame_b.R.w[2] = engine.cylinder1.Mid.frame_a.R.w[2];
//   engine.cylinder1.CrankAngle.frame_b.R.w[3] = engine.cylinder1.CrankShape.frame_a.R.w[3];
//   engine.cylinder1.CrankAngle.frame_b.R.w[3] = engine.cylinder1.Mid.frame_a.R.w[3];
//   engine.cylinder1.CrankAngle.frame_b.R.T[1,1] = engine.cylinder1.CrankShape.frame_a.R.T[1,1];
//   engine.cylinder1.CrankAngle.frame_b.R.T[1,1] = engine.cylinder1.Mid.frame_a.R.T[1,1];
//   engine.cylinder1.CrankAngle.frame_b.R.T[1,2] = engine.cylinder1.CrankShape.frame_a.R.T[1,2];
//   engine.cylinder1.CrankAngle.frame_b.R.T[1,2] = engine.cylinder1.Mid.frame_a.R.T[1,2];
//   engine.cylinder1.CrankAngle.frame_b.R.T[1,3] = engine.cylinder1.CrankShape.frame_a.R.T[1,3];
//   engine.cylinder1.CrankAngle.frame_b.R.T[1,3] = engine.cylinder1.Mid.frame_a.R.T[1,3];
//   engine.cylinder1.CrankAngle.frame_b.R.T[2,1] = engine.cylinder1.CrankShape.frame_a.R.T[2,1];
//   engine.cylinder1.CrankAngle.frame_b.R.T[2,1] = engine.cylinder1.Mid.frame_a.R.T[2,1];
//   engine.cylinder1.CrankAngle.frame_b.R.T[2,2] = engine.cylinder1.CrankShape.frame_a.R.T[2,2];
//   engine.cylinder1.CrankAngle.frame_b.R.T[2,2] = engine.cylinder1.Mid.frame_a.R.T[2,2];
//   engine.cylinder1.CrankAngle.frame_b.R.T[2,3] = engine.cylinder1.CrankShape.frame_a.R.T[2,3];
//   engine.cylinder1.CrankAngle.frame_b.R.T[2,3] = engine.cylinder1.Mid.frame_a.R.T[2,3];
//   engine.cylinder1.CrankAngle.frame_b.R.T[3,1] = engine.cylinder1.CrankShape.frame_a.R.T[3,1];
//   engine.cylinder1.CrankAngle.frame_b.R.T[3,1] = engine.cylinder1.Mid.frame_a.R.T[3,1];
//   engine.cylinder1.CrankAngle.frame_b.R.T[3,2] = engine.cylinder1.CrankShape.frame_a.R.T[3,2];
//   engine.cylinder1.CrankAngle.frame_b.R.T[3,2] = engine.cylinder1.Mid.frame_a.R.T[3,2];
//   engine.cylinder1.CrankAngle.frame_b.R.T[3,3] = engine.cylinder1.CrankShape.frame_a.R.T[3,3];
//   engine.cylinder1.CrankAngle.frame_b.R.T[3,3] = engine.cylinder1.Mid.frame_a.R.T[3,3];
//   engine.cylinder1.CrankAngle.frame_b.r_0[1] = engine.cylinder1.CrankShape.frame_a.r_0[1];
//   engine.cylinder1.CrankAngle.frame_b.r_0[1] = engine.cylinder1.Mid.frame_a.r_0[1];
//   engine.cylinder1.CrankAngle.frame_b.r_0[2] = engine.cylinder1.CrankShape.frame_a.r_0[2];
//   engine.cylinder1.CrankAngle.frame_b.r_0[2] = engine.cylinder1.Mid.frame_a.r_0[2];
//   engine.cylinder1.CrankAngle.frame_b.r_0[3] = engine.cylinder1.CrankShape.frame_a.r_0[3];
//   engine.cylinder1.CrankAngle.frame_b.r_0[3] = engine.cylinder1.Mid.frame_a.r_0[3];
//   engine.cylinder1.jointRRP.frame_b.t[1] + engine.cylinder1.CylinderInclination.frame_b.t[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_b.t[2] + engine.cylinder1.CylinderInclination.frame_b.t[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_b.t[3] + engine.cylinder1.CylinderInclination.frame_b.t[3] = 0.0;
//   engine.cylinder1.jointRRP.frame_b.f[1] + engine.cylinder1.CylinderInclination.frame_b.f[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_b.f[2] + engine.cylinder1.CylinderInclination.frame_b.f[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_b.f[3] + engine.cylinder1.CylinderInclination.frame_b.f[3] = 0.0;
//   engine.cylinder1.CylinderInclination.frame_b.R.w[1] = engine.cylinder1.jointRRP.frame_b.R.w[1];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.w[1];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[1];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.w[1];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[1];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[2] = engine.cylinder1.jointRRP.frame_b.R.w[2];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.w[2];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[2];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.w[2];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[2];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[3] = engine.cylinder1.jointRRP.frame_b.R.w[3];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.w[3];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.w[3];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.w[3];
//   engine.cylinder1.CylinderInclination.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.w[3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.frame_b.R.T[1,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[1,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.frame_b.R.T[1,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[1,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.frame_b.R.T[1,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[1,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[1,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[1,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.frame_b.R.T[2,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[2,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.frame_b.R.T[2,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[2,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.frame_b.R.T[2,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[2,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[2,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[2,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.frame_b.R.T[3,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[3,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,1];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.frame_b.R.T[3,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[3,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,2];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.frame_b.R.T[3,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.frame_b.R.T[3,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.R.T[3,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder1.CylinderInclination.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.R.T[3,3];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[1] = engine.cylinder1.jointRRP.frame_b.r_0[1];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.frame_b.r_0[1];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0[1];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.r_0[1];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[1];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[2] = engine.cylinder1.jointRRP.frame_b.r_0[2];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.frame_b.r_0[2];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0[2];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.r_0[2];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[2];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[3] = engine.cylinder1.jointRRP.frame_b.r_0[3];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.frame_b.r_0[3];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.r_0[3];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.r_0[3];
//   engine.cylinder1.CylinderInclination.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.r_0[3];
//   engine.cylinder1.jointRRP.frame_ib.t[1] + engine.cylinder1.Piston.frame_b.t[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_ib.t[2] + engine.cylinder1.Piston.frame_b.t[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_ib.t[3] + engine.cylinder1.Piston.frame_b.t[3] = 0.0;
//   engine.cylinder1.jointRRP.frame_ib.f[1] + engine.cylinder1.Piston.frame_b.f[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_ib.f[2] + engine.cylinder1.Piston.frame_b.f[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_ib.f[3] + engine.cylinder1.Piston.frame_b.f[3] = 0.0;
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder1.Piston.frame_b.R.w[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder1.jointRRP.frame_ib.R.w[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.w[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder1.Piston.frame_b.R.w[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder1.jointRRP.frame_ib.R.w[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.w[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder1.Piston.frame_b.R.w[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder1.jointRRP.frame_ib.R.w[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.w[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.w[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.w[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.Piston.frame_b.R.T[1,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.frame_ib.R.T[1,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[1,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.Piston.frame_b.R.T[1,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.frame_ib.R.T[1,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[1,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.Piston.frame_b.R.T[1,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.frame_ib.R.T[1,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[1,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[1,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[1,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.Piston.frame_b.R.T[2,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.frame_ib.R.T[2,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[2,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.Piston.frame_b.R.T[2,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.frame_ib.R.T[2,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[2,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.Piston.frame_b.R.T[2,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.frame_ib.R.T[2,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[2,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[2,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[2,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.Piston.frame_b.R.T[3,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.frame_ib.R.T[3,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[3,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.Piston.frame_b.R.T[3,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.frame_ib.R.T[3,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[3,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.Piston.frame_b.R.T[3,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.frame_ib.R.T[3,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.frame_ib.R.T[3,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.R.T[3,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.R.T[3,3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder1.Piston.frame_b.r_0[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder1.jointRRP.frame_ib.r_0[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.frame_ib.r_0[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0[1];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder1.Piston.frame_b.r_0[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder1.jointRRP.frame_ib.r_0[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.frame_ib.r_0[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0[2];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder1.Piston.frame_b.r_0[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder1.jointRRP.frame_ib.r_0[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.frame_ib.r_0[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.r_0[3];
//   engine.cylinder1.Piston.frameTranslation.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.r_0[3];
//   engine.cylinder1.jointRRP.bearing.f + engine.cylinder1.gasForce.flange_b.f = 0.0;
//   engine.cylinder1.gasForce.flange_b.s = engine.cylinder1.jointRRP.bearing.s;
//   engine.cylinder1.gasForce.flange_b.s = engine.cylinder1.jointRRP.jointUSP.bearing.s;
//   engine.cylinder1.gasForce.flange_b.s = engine.cylinder1.jointRRP.jointUSP.prismatic.bearing.s;
//   engine.cylinder1.gasForce.flange_a.f + engine.cylinder1.jointRRP.axis.f = 0.0;
//   engine.cylinder1.gasForce.flange_a.s = engine.cylinder1.jointRRP.axis.s;
//   engine.cylinder1.gasForce.flange_a.s = engine.cylinder1.jointRRP.jointUSP.axis.s;
//   engine.cylinder1.gasForce.flange_a.s = engine.cylinder1.jointRRP.jointUSP.prismatic.axis.s;
//   engine.cylinder1.Mid.frame_b.t[1] + engine.cylinder1.jointRRP.frame_a.t[1] = 0.0;
//   engine.cylinder1.Mid.frame_b.t[2] + engine.cylinder1.jointRRP.frame_a.t[2] = 0.0;
//   engine.cylinder1.Mid.frame_b.t[3] + engine.cylinder1.jointRRP.frame_a.t[3] = 0.0;
//   engine.cylinder1.Mid.frame_b.f[1] + engine.cylinder1.jointRRP.frame_a.f[1] = 0.0;
//   engine.cylinder1.Mid.frame_b.f[2] + engine.cylinder1.jointRRP.frame_a.f[2] = 0.0;
//   engine.cylinder1.Mid.frame_b.f[3] + engine.cylinder1.jointRRP.frame_a.f[3] = 0.0;
//   engine.cylinder1.Mid.frame_b.R.w[1] = engine.cylinder1.jointRRP.frame_a.R.w[1];
//   engine.cylinder1.Mid.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.w[1];
//   engine.cylinder1.Mid.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.w[1];
//   engine.cylinder1.Mid.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[1];
//   engine.cylinder1.Mid.frame_b.R.w[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[1];
//   engine.cylinder1.Mid.frame_b.R.w[2] = engine.cylinder1.jointRRP.frame_a.R.w[2];
//   engine.cylinder1.Mid.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.w[2];
//   engine.cylinder1.Mid.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.w[2];
//   engine.cylinder1.Mid.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[2];
//   engine.cylinder1.Mid.frame_b.R.w[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[2];
//   engine.cylinder1.Mid.frame_b.R.w[3] = engine.cylinder1.jointRRP.frame_a.R.w[3];
//   engine.cylinder1.Mid.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.w[3];
//   engine.cylinder1.Mid.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.w[3];
//   engine.cylinder1.Mid.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.w[3];
//   engine.cylinder1.Mid.frame_b.R.w[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.w[3];
//   engine.cylinder1.Mid.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.frame_a.R.T[1,1];
//   engine.cylinder1.Mid.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[1,1];
//   engine.cylinder1.Mid.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder1.Mid.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,1];
//   engine.cylinder1.Mid.frame_b.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[1,1];
//   engine.cylinder1.Mid.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.frame_a.R.T[1,2];
//   engine.cylinder1.Mid.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[1,2];
//   engine.cylinder1.Mid.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder1.Mid.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,2];
//   engine.cylinder1.Mid.frame_b.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[1,2];
//   engine.cylinder1.Mid.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.frame_a.R.T[1,3];
//   engine.cylinder1.Mid.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[1,3];
//   engine.cylinder1.Mid.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder1.Mid.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[1,3];
//   engine.cylinder1.Mid.frame_b.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[1,3];
//   engine.cylinder1.Mid.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.frame_a.R.T[2,1];
//   engine.cylinder1.Mid.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[2,1];
//   engine.cylinder1.Mid.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder1.Mid.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,1];
//   engine.cylinder1.Mid.frame_b.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[2,1];
//   engine.cylinder1.Mid.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.frame_a.R.T[2,2];
//   engine.cylinder1.Mid.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[2,2];
//   engine.cylinder1.Mid.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder1.Mid.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,2];
//   engine.cylinder1.Mid.frame_b.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[2,2];
//   engine.cylinder1.Mid.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.frame_a.R.T[2,3];
//   engine.cylinder1.Mid.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[2,3];
//   engine.cylinder1.Mid.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder1.Mid.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[2,3];
//   engine.cylinder1.Mid.frame_b.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[2,3];
//   engine.cylinder1.Mid.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.frame_a.R.T[3,1];
//   engine.cylinder1.Mid.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[3,1];
//   engine.cylinder1.Mid.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder1.Mid.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,1];
//   engine.cylinder1.Mid.frame_b.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[3,1];
//   engine.cylinder1.Mid.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.frame_a.R.T[3,2];
//   engine.cylinder1.Mid.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[3,2];
//   engine.cylinder1.Mid.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder1.Mid.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,2];
//   engine.cylinder1.Mid.frame_b.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[3,2];
//   engine.cylinder1.Mid.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.frame_a.R.T[3,3];
//   engine.cylinder1.Mid.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.frame_a.R.T[3,3];
//   engine.cylinder1.Mid.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder1.Mid.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.R.T[3,3];
//   engine.cylinder1.Mid.frame_b.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.R.T[3,3];
//   engine.cylinder1.Mid.frame_b.r_0[1] = engine.cylinder1.jointRRP.frame_a.r_0[1];
//   engine.cylinder1.Mid.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.frame_a.r_0[1];
//   engine.cylinder1.Mid.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.r_0[1];
//   engine.cylinder1.Mid.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[1];
//   engine.cylinder1.Mid.frame_b.r_0[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[1];
//   engine.cylinder1.Mid.frame_b.r_0[2] = engine.cylinder1.jointRRP.frame_a.r_0[2];
//   engine.cylinder1.Mid.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.frame_a.r_0[2];
//   engine.cylinder1.Mid.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.r_0[2];
//   engine.cylinder1.Mid.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[2];
//   engine.cylinder1.Mid.frame_b.r_0[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[2];
//   engine.cylinder1.Mid.frame_b.r_0[3] = engine.cylinder1.jointRRP.frame_a.r_0[3];
//   engine.cylinder1.Mid.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.frame_a.r_0[3];
//   engine.cylinder1.Mid.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.r_0[3];
//   engine.cylinder1.Mid.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.r_0[3];
//   engine.cylinder1.Mid.frame_b.r_0[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.r_0[3];
//   engine.cylinder1.jointRRP.frame_ia.t[1] + engine.cylinder1.Rod.frame_a.t[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_ia.t[2] + engine.cylinder1.Rod.frame_a.t[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_ia.t[3] + engine.cylinder1.Rod.frame_a.t[3] = 0.0;
//   engine.cylinder1.jointRRP.frame_ia.f[1] + engine.cylinder1.Rod.frame_a.f[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_ia.f[2] + engine.cylinder1.Rod.frame_a.f[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_ia.f[3] + engine.cylinder1.Rod.frame_a.f[3] = 0.0;
//   engine.cylinder1.Rod.body.frame_a.R.w[1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.w[1];
//   engine.cylinder1.Rod.body.frame_a.R.w[1] = engine.cylinder1.Rod.frame_a.R.w[1];
//   engine.cylinder1.Rod.body.frame_a.R.w[1] = engine.cylinder1.jointRRP.frame_ia.R.w[1];
//   engine.cylinder1.Rod.body.frame_a.R.w[1] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.w[1];
//   engine.cylinder1.Rod.body.frame_a.R.w[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.w[1];
//   engine.cylinder1.Rod.body.frame_a.R.w[2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.w[2];
//   engine.cylinder1.Rod.body.frame_a.R.w[2] = engine.cylinder1.Rod.frame_a.R.w[2];
//   engine.cylinder1.Rod.body.frame_a.R.w[2] = engine.cylinder1.jointRRP.frame_ia.R.w[2];
//   engine.cylinder1.Rod.body.frame_a.R.w[2] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.w[2];
//   engine.cylinder1.Rod.body.frame_a.R.w[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.w[2];
//   engine.cylinder1.Rod.body.frame_a.R.w[3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.w[3];
//   engine.cylinder1.Rod.body.frame_a.R.w[3] = engine.cylinder1.Rod.frame_a.R.w[3];
//   engine.cylinder1.Rod.body.frame_a.R.w[3] = engine.cylinder1.jointRRP.frame_ia.R.w[3];
//   engine.cylinder1.Rod.body.frame_a.R.w[3] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.w[3];
//   engine.cylinder1.Rod.body.frame_a.R.w[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.w[3];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,1] = engine.cylinder1.Rod.frame_a.R.T[1,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,1] = engine.cylinder1.jointRRP.frame_ia.R.T[1,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[1,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[1,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,2] = engine.cylinder1.Rod.frame_a.R.T[1,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,2] = engine.cylinder1.jointRRP.frame_ia.R.T[1,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[1,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[1,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,3] = engine.cylinder1.Rod.frame_a.R.T[1,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,3] = engine.cylinder1.jointRRP.frame_ia.R.T[1,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[1,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[1,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,1] = engine.cylinder1.Rod.frame_a.R.T[2,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,1] = engine.cylinder1.jointRRP.frame_ia.R.T[2,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[2,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[2,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,2] = engine.cylinder1.Rod.frame_a.R.T[2,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,2] = engine.cylinder1.jointRRP.frame_ia.R.T[2,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[2,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[2,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,3] = engine.cylinder1.Rod.frame_a.R.T[2,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,3] = engine.cylinder1.jointRRP.frame_ia.R.T[2,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[2,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[2,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,1] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,1] = engine.cylinder1.Rod.frame_a.R.T[3,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,1] = engine.cylinder1.jointRRP.frame_ia.R.T[3,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[3,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[3,1];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,2] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,2] = engine.cylinder1.Rod.frame_a.R.T[3,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,2] = engine.cylinder1.jointRRP.frame_ia.R.T[3,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[3,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[3,2];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,3] = engine.cylinder1.Rod.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,3] = engine.cylinder1.Rod.frame_a.R.T[3,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,3] = engine.cylinder1.jointRRP.frame_ia.R.T[3,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.frame_ia.R.T[3,3];
//   engine.cylinder1.Rod.body.frame_a.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.R.T[3,3];
//   engine.cylinder1.Rod.body.frame_a.r_0[1] = engine.cylinder1.Rod.frameTranslation.frame_a.r_0[1];
//   engine.cylinder1.Rod.body.frame_a.r_0[1] = engine.cylinder1.Rod.frame_a.r_0[1];
//   engine.cylinder1.Rod.body.frame_a.r_0[1] = engine.cylinder1.jointRRP.frame_ia.r_0[1];
//   engine.cylinder1.Rod.body.frame_a.r_0[1] = engine.cylinder1.jointRRP.jointUSP.frame_ia.r_0[1];
//   engine.cylinder1.Rod.body.frame_a.r_0[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[1];
//   engine.cylinder1.Rod.body.frame_a.r_0[2] = engine.cylinder1.Rod.frameTranslation.frame_a.r_0[2];
//   engine.cylinder1.Rod.body.frame_a.r_0[2] = engine.cylinder1.Rod.frame_a.r_0[2];
//   engine.cylinder1.Rod.body.frame_a.r_0[2] = engine.cylinder1.jointRRP.frame_ia.r_0[2];
//   engine.cylinder1.Rod.body.frame_a.r_0[2] = engine.cylinder1.jointRRP.jointUSP.frame_ia.r_0[2];
//   engine.cylinder1.Rod.body.frame_a.r_0[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[2];
//   engine.cylinder1.Rod.body.frame_a.r_0[3] = engine.cylinder1.Rod.frameTranslation.frame_a.r_0[3];
//   engine.cylinder1.Rod.body.frame_a.r_0[3] = engine.cylinder1.Rod.frame_a.r_0[3];
//   engine.cylinder1.Rod.body.frame_a.r_0[3] = engine.cylinder1.jointRRP.frame_ia.r_0[3];
//   engine.cylinder1.Rod.body.frame_a.r_0[3] = engine.cylinder1.jointRRP.jointUSP.frame_ia.r_0[3];
//   engine.cylinder1.Rod.body.frame_a.r_0[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.r_0[3];
//   (-engine.cylinder1.Piston.frame_a.t[1]) + (engine.cylinder1.Piston.frameTranslation.frame_a.t[1] + engine.cylinder1.Piston.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder1.Piston.frame_a.t[2]) + (engine.cylinder1.Piston.frameTranslation.frame_a.t[2] + engine.cylinder1.Piston.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder1.Piston.frame_a.t[3]) + (engine.cylinder1.Piston.frameTranslation.frame_a.t[3] + engine.cylinder1.Piston.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder1.Piston.frame_a.f[1]) + (engine.cylinder1.Piston.frameTranslation.frame_a.f[1] + engine.cylinder1.Piston.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder1.Piston.frame_a.f[2]) + (engine.cylinder1.Piston.frameTranslation.frame_a.f[2] + engine.cylinder1.Piston.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder1.Piston.frame_a.f[3]) + (engine.cylinder1.Piston.frameTranslation.frame_a.f[3] + engine.cylinder1.Piston.body.frame_a.f[3]) = 0.0;
//   engine.cylinder1.Piston.body.frame_a.R.w[1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.w[1];
//   engine.cylinder1.Piston.body.frame_a.R.w[1] = engine.cylinder1.Piston.frame_a.R.w[1];
//   engine.cylinder1.Piston.body.frame_a.R.w[2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.w[2];
//   engine.cylinder1.Piston.body.frame_a.R.w[2] = engine.cylinder1.Piston.frame_a.R.w[2];
//   engine.cylinder1.Piston.body.frame_a.R.w[3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.w[3];
//   engine.cylinder1.Piston.body.frame_a.R.w[3] = engine.cylinder1.Piston.frame_a.R.w[3];
//   engine.cylinder1.Piston.body.frame_a.R.T[1,1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,1];
//   engine.cylinder1.Piston.body.frame_a.R.T[1,1] = engine.cylinder1.Piston.frame_a.R.T[1,1];
//   engine.cylinder1.Piston.body.frame_a.R.T[1,2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,2];
//   engine.cylinder1.Piston.body.frame_a.R.T[1,2] = engine.cylinder1.Piston.frame_a.R.T[1,2];
//   engine.cylinder1.Piston.body.frame_a.R.T[1,3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[1,3];
//   engine.cylinder1.Piston.body.frame_a.R.T[1,3] = engine.cylinder1.Piston.frame_a.R.T[1,3];
//   engine.cylinder1.Piston.body.frame_a.R.T[2,1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,1];
//   engine.cylinder1.Piston.body.frame_a.R.T[2,1] = engine.cylinder1.Piston.frame_a.R.T[2,1];
//   engine.cylinder1.Piston.body.frame_a.R.T[2,2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,2];
//   engine.cylinder1.Piston.body.frame_a.R.T[2,2] = engine.cylinder1.Piston.frame_a.R.T[2,2];
//   engine.cylinder1.Piston.body.frame_a.R.T[2,3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[2,3];
//   engine.cylinder1.Piston.body.frame_a.R.T[2,3] = engine.cylinder1.Piston.frame_a.R.T[2,3];
//   engine.cylinder1.Piston.body.frame_a.R.T[3,1] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,1];
//   engine.cylinder1.Piston.body.frame_a.R.T[3,1] = engine.cylinder1.Piston.frame_a.R.T[3,1];
//   engine.cylinder1.Piston.body.frame_a.R.T[3,2] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,2];
//   engine.cylinder1.Piston.body.frame_a.R.T[3,2] = engine.cylinder1.Piston.frame_a.R.T[3,2];
//   engine.cylinder1.Piston.body.frame_a.R.T[3,3] = engine.cylinder1.Piston.frameTranslation.frame_a.R.T[3,3];
//   engine.cylinder1.Piston.body.frame_a.R.T[3,3] = engine.cylinder1.Piston.frame_a.R.T[3,3];
//   engine.cylinder1.Piston.body.frame_a.r_0[1] = engine.cylinder1.Piston.frameTranslation.frame_a.r_0[1];
//   engine.cylinder1.Piston.body.frame_a.r_0[1] = engine.cylinder1.Piston.frame_a.r_0[1];
//   engine.cylinder1.Piston.body.frame_a.r_0[2] = engine.cylinder1.Piston.frameTranslation.frame_a.r_0[2];
//   engine.cylinder1.Piston.body.frame_a.r_0[2] = engine.cylinder1.Piston.frame_a.r_0[2];
//   engine.cylinder1.Piston.body.frame_a.r_0[3] = engine.cylinder1.Piston.frameTranslation.frame_a.r_0[3];
//   engine.cylinder1.Piston.body.frame_a.r_0[3] = engine.cylinder1.Piston.frame_a.r_0[3];
//   (-engine.cylinder1.Piston.frame_b.t[1]) + engine.cylinder1.Piston.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder1.Piston.frame_b.t[2]) + engine.cylinder1.Piston.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder1.Piston.frame_b.t[3]) + engine.cylinder1.Piston.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder1.Piston.frame_b.f[1]) + engine.cylinder1.Piston.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder1.Piston.frame_b.f[2]) + engine.cylinder1.Piston.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder1.Piston.frame_b.f[3]) + engine.cylinder1.Piston.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder1.Piston.frame_a.t[3] = 0.0;
//   engine.cylinder1.Piston.frame_a.t[2] = 0.0;
//   engine.cylinder1.Piston.frame_a.t[1] = 0.0;
//   engine.cylinder1.Piston.frame_a.f[3] = 0.0;
//   engine.cylinder1.Piston.frame_a.f[2] = 0.0;
//   engine.cylinder1.Piston.frame_a.f[1] = 0.0;
//   (-engine.cylinder1.Rod.frame_a.t[1]) + (engine.cylinder1.Rod.frameTranslation.frame_a.t[1] + engine.cylinder1.Rod.body.frame_a.t[1]) = 0.0;
//   (-engine.cylinder1.Rod.frame_a.t[2]) + (engine.cylinder1.Rod.frameTranslation.frame_a.t[2] + engine.cylinder1.Rod.body.frame_a.t[2]) = 0.0;
//   (-engine.cylinder1.Rod.frame_a.t[3]) + (engine.cylinder1.Rod.frameTranslation.frame_a.t[3] + engine.cylinder1.Rod.body.frame_a.t[3]) = 0.0;
//   (-engine.cylinder1.Rod.frame_a.f[1]) + (engine.cylinder1.Rod.frameTranslation.frame_a.f[1] + engine.cylinder1.Rod.body.frame_a.f[1]) = 0.0;
//   (-engine.cylinder1.Rod.frame_a.f[2]) + (engine.cylinder1.Rod.frameTranslation.frame_a.f[2] + engine.cylinder1.Rod.body.frame_a.f[2]) = 0.0;
//   (-engine.cylinder1.Rod.frame_a.f[3]) + (engine.cylinder1.Rod.frameTranslation.frame_a.f[3] + engine.cylinder1.Rod.body.frame_a.f[3]) = 0.0;
//   (-engine.cylinder1.Rod.frame_b.t[1]) + engine.cylinder1.Rod.frameTranslation.frame_b.t[1] = 0.0;
//   (-engine.cylinder1.Rod.frame_b.t[2]) + engine.cylinder1.Rod.frameTranslation.frame_b.t[2] = 0.0;
//   (-engine.cylinder1.Rod.frame_b.t[3]) + engine.cylinder1.Rod.frameTranslation.frame_b.t[3] = 0.0;
//   (-engine.cylinder1.Rod.frame_b.f[1]) + engine.cylinder1.Rod.frameTranslation.frame_b.f[1] = 0.0;
//   (-engine.cylinder1.Rod.frame_b.f[2]) + engine.cylinder1.Rod.frameTranslation.frame_b.f[2] = 0.0;
//   (-engine.cylinder1.Rod.frame_b.f[3]) + engine.cylinder1.Rod.frameTranslation.frame_b.f[3] = 0.0;
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.w[1] = engine.cylinder1.Rod.frame_b.R.w[1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.w[2] = engine.cylinder1.Rod.frame_b.R.w[2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.w[3] = engine.cylinder1.Rod.frame_b.R.w[3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,1] = engine.cylinder1.Rod.frame_b.R.T[1,1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,2] = engine.cylinder1.Rod.frame_b.R.T[1,2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[1,3] = engine.cylinder1.Rod.frame_b.R.T[1,3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,1] = engine.cylinder1.Rod.frame_b.R.T[2,1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,2] = engine.cylinder1.Rod.frame_b.R.T[2,2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[2,3] = engine.cylinder1.Rod.frame_b.R.T[2,3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,1] = engine.cylinder1.Rod.frame_b.R.T[3,1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,2] = engine.cylinder1.Rod.frame_b.R.T[3,2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.R.T[3,3] = engine.cylinder1.Rod.frame_b.R.T[3,3];
//   engine.cylinder1.Rod.frameTranslation.frame_b.r_0[1] = engine.cylinder1.Rod.frame_b.r_0[1];
//   engine.cylinder1.Rod.frameTranslation.frame_b.r_0[2] = engine.cylinder1.Rod.frame_b.r_0[2];
//   engine.cylinder1.Rod.frameTranslation.frame_b.r_0[3] = engine.cylinder1.Rod.frame_b.r_0[3];
//   engine.cylinder1.Rod.frame_b.t[3] = 0.0;
//   engine.cylinder1.Rod.frame_b.t[2] = 0.0;
//   engine.cylinder1.Rod.frame_b.t[1] = 0.0;
//   engine.cylinder1.Rod.frame_b.f[3] = 0.0;
//   engine.cylinder1.Rod.frame_b.f[2] = 0.0;
//   engine.cylinder1.Rod.frame_b.f[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.bearing.f + (-engine.cylinder1.jointRRP.bearing.f) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.axis.f + (-engine.cylinder1.jointRRP.axis.f) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ib.t[1] + (-engine.cylinder1.jointRRP.frame_ib.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ib.t[2] + (-engine.cylinder1.jointRRP.frame_ib.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ib.t[3] + (-engine.cylinder1.jointRRP.frame_ib.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ib.f[1] + (-engine.cylinder1.jointRRP.frame_ib.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ib.f[2] + (-engine.cylinder1.jointRRP.frame_ib.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ib.f[3] + (-engine.cylinder1.jointRRP.frame_ib.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_im.t[1] + (-engine.cylinder1.jointRRP.frame_im.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_im.t[2] + (-engine.cylinder1.jointRRP.frame_im.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_im.t[3] + (-engine.cylinder1.jointRRP.frame_im.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_im.f[1] + (-engine.cylinder1.jointRRP.frame_im.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_im.f[2] + (-engine.cylinder1.jointRRP.frame_im.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_im.f[3] + (-engine.cylinder1.jointRRP.frame_im.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.frame_im.R.w[1] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.w[1];
//   engine.cylinder1.jointRRP.frame_im.R.w[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.w[1];
//   engine.cylinder1.jointRRP.frame_im.R.w[1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[1];
//   engine.cylinder1.jointRRP.frame_im.R.w[2] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.w[2];
//   engine.cylinder1.jointRRP.frame_im.R.w[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.w[2];
//   engine.cylinder1.jointRRP.frame_im.R.w[2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[2];
//   engine.cylinder1.jointRRP.frame_im.R.w[3] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.w[3];
//   engine.cylinder1.jointRRP.frame_im.R.w[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.w[3];
//   engine.cylinder1.jointRRP.frame_im.R.w[3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.w[3];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[1,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[1,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[1,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[1,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[1,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[1,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[1,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[2,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[2,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[2,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[2,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[2,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[2,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[2,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[3,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[3,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,1];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[3,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[3,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,2];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.frame_im.R.T[3,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.R.T[3,3];
//   engine.cylinder1.jointRRP.frame_im.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.R.T[3,3];
//   engine.cylinder1.jointRRP.frame_im.r_0[1] = engine.cylinder1.jointRRP.jointUSP.frame_im.r_0[1];
//   engine.cylinder1.jointRRP.frame_im.r_0[1] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[1];
//   engine.cylinder1.jointRRP.frame_im.r_0[1] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0[1];
//   engine.cylinder1.jointRRP.frame_im.r_0[2] = engine.cylinder1.jointRRP.jointUSP.frame_im.r_0[2];
//   engine.cylinder1.jointRRP.frame_im.r_0[2] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[2];
//   engine.cylinder1.jointRRP.frame_im.r_0[2] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0[2];
//   engine.cylinder1.jointRRP.frame_im.r_0[3] = engine.cylinder1.jointRRP.jointUSP.frame_im.r_0[3];
//   engine.cylinder1.jointRRP.frame_im.r_0[3] = engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.r_0[3];
//   engine.cylinder1.jointRRP.frame_im.r_0[3] = engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.r_0[3];
//   engine.cylinder1.jointRRP.jointUSP.frame_ia.t[1] + (-engine.cylinder1.jointRRP.frame_ia.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ia.t[2] + (-engine.cylinder1.jointRRP.frame_ia.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ia.t[3] + (-engine.cylinder1.jointRRP.frame_ia.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ia.f[1] + (-engine.cylinder1.jointRRP.frame_ia.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ia.f[2] + (-engine.cylinder1.jointRRP.frame_ia.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_ia.f[3] + (-engine.cylinder1.jointRRP.frame_ia.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_b.t[1] + (-engine.cylinder1.jointRRP.frame_b.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_b.t[2] + (-engine.cylinder1.jointRRP.frame_b.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_b.t[3] + (-engine.cylinder1.jointRRP.frame_b.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_b.f[1] + (-engine.cylinder1.jointRRP.frame_b.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_b.f[2] + (-engine.cylinder1.jointRRP.frame_b.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_b.f[3] + (-engine.cylinder1.jointRRP.frame_b.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_a.t[1] + (-engine.cylinder1.jointRRP.frame_a.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_a.t[2] + (-engine.cylinder1.jointRRP.frame_a.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_a.t[3] + (-engine.cylinder1.jointRRP.frame_a.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_a.f[1] + (-engine.cylinder1.jointRRP.frame_a.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_a.f[2] + (-engine.cylinder1.jointRRP.frame_a.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.frame_a.f[3] + (-engine.cylinder1.jointRRP.frame_a.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.r_rel[1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[1];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.r_rel[2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[2];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.r_rel[3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.position_a[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.r_rel[3];
//   engine.cylinder1.jointRRP.jointUSP.prismatic.bearing.f + (-engine.cylinder1.jointRRP.jointUSP.bearing.f) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.axis.f + (-engine.cylinder1.jointRRP.jointUSP.axis.f) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.position_b[1].y = engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[1];
//   engine.cylinder1.jointRRP.jointUSP.position_b[2].y = engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[2];
//   engine.cylinder1.jointRRP.jointUSP.position_b[3].y = engine.cylinder1.jointRRP.jointUSP.prismatic.position_b[3];
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_ia.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_ia.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.t[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_ia.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_ia.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_ia.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod1.frame_ia.f[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_ia.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_im.t[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_im.t[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.t[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.t[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_im.t[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_im.f[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_im.f[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.rod2.frame_b.f[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_b.f[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_im.f[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[1] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_b.t[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[2] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_b.t[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[3] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.t[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_b.t[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[1] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_b.f[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[2] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_b.f[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[3] + (engine.cylinder1.jointRRP.jointUSP.prismatic.frame_a.f[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_b.f[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_a.t[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_a.t[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.t[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_a.t[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[1] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_a.f[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[2] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_a.f[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[3] + (engine.cylinder1.jointRRP.jointUSP.rod1.frame_a.f[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_a.f[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[1] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_ib.t[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[2] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_ib.t[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.t[3] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.t[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_ib.t[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[1] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[1] + (-engine.cylinder1.jointRRP.jointUSP.frame_ib.f[1])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[2] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[2] + (-engine.cylinder1.jointRRP.jointUSP.frame_ib.f[2])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.prismatic.frame_b.f[3] + (engine.cylinder1.jointRRP.jointUSP.rod2.frame_a.f[3] + (-engine.cylinder1.jointRRP.jointUSP.frame_ib.f[3])) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[1] + engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[2] + engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.t[3] + engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.t[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[1] + engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[1] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[2] + engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[2] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.f[3] + engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.f[3] = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[1];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[2];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.w[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.w[3];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,1];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,2];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[1,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[1,3];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,1];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,2];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[2,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[2,3];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,1];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,2];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.R.T[3,3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.R.T[3,3];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[1] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[1];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[2] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[2];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_resolve.r_0[3] = engine.cylinder1.jointRRP.jointUSP.relativePosition.zeroPosition.frame_resolve.r_0[3];
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[1] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[2] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.t[3] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[1] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[2] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_b.f[3] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_b.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[1] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[2] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.t[3] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.t[3]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[1] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[1]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[2] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[2]) = 0.0;
//   engine.cylinder1.jointRRP.jointUSP.relativePosition.relativePosition.frame_a.f[3] + (-engine.cylinder1.jointRRP.jointUSP.relativePosition.frame_a.f[3]) = 0.0;
//   engine.cylinder1.jointRRP.frame_im.t[3] = 0.0;
//   engine.cylinder1.jointRRP.frame_im.t[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_im.t[1] = 0.0;
//   engine.cylinder1.jointRRP.frame_im.f[3] = 0.0;
//   engine.cylinder1.jointRRP.frame_im.f[2] = 0.0;
//   engine.cylinder1.jointRRP.frame_im.f[1] = 0.0;
// end Modelica.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.Examples.Loops.EngineV6_analytic has 9073 equation(s) and 9491 variable(s).
// 7058 of these are trivial equation(s).
// "
// ""
// 0
// endResult
