// name:     Modelica3.x.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint
// keywords: multibody, balancing, instantiation
// status:   correct
// teardown_command: rm -f *.so *.dll *.log *.c* *.makefile *.libs
// 
//  Modelica MultiBody 3.x: instantiation and balance checking
//

loadFile("_Rotational3DEffectsTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint);
getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length \"Return length of a vectorReturn length of a vector (better as norm(), if further symbolic processing is performed)\"
//   input Real[:] v \"Vector\";
//   output Real result \"Length of vector v\";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize \"Return normalized vector such that length = 1Return normalized vector such that length = 1 and prevent zero-division for zero vector\"
//   input Real[:] v \"Vector\";
//   input Real eps = 1e-013 \"if |v| < eps then result = v/eps\";
//   output Real[size(v,1)] result \"Input vector v normalized to length=1\";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = atan2(u1, u2);
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = cos(u);
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation \"Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation\"
//   input Real[3, 3] T;
//   input Real(quantity=\"AngularVelocity\", unit=\"rad/s\")[3] w;
//   output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint \"Return the constraint residues to express that two frames have the same orientation\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
//   output Real[3] residue \"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\";
// algorithm
//   residue := {atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2 \"Compute angular velocity resolved in frame 2 from quaternions orientation object and its derivative\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[4] der_Q(unit = \"1/s\") \"Derivative of Q\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {2.0 * (Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]),2.0 * (-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]),2.0 * (Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4])};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T \"Return quaternions orientation object Q from transformation matrix T\"
//   input Real[3, 3] T \"Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for Q (there are 2 solutions; the one close to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)\";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04;
// algorithm
//   c1 := 1.0 + T[1,1] + -T[2,2] - T[3,3];
//   c2 := 1.0 + T[2,2] + -T[1,1] - T[3,3];
//   c3 := 1.0 + T[3,3] + -T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04 or c4 > c1 and c4 > c2 and c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 and c1 > c3 and c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 and c2 > c3 and c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation \"Return quaternions orientation object that does not rotate a frame\"
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint \"Return residues of orientation constraints (shall be zero)\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   output Real[1] residue \"Residue constraint (shall be zero)\";
// algorithm
//   residue := {Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0 + -1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation \"Return absolute orientation object from another absolute and a relative orientation object\"
//   input Real[3, 3] T1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Real[3, 3] T_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3, 3] T2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation \"Return rotation object to rotate around one frame axis\"
//   input Integer axis(min = 1, max = 3) \"Rotate around 'axis' of frame 1\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,cos(angle),sin(angle);0.0,-sin(angle),cos(angle)] else if axis == 2 then <matrix>[cos(angle),0.0,-sin(angle);0.0,1.0,0.0;sin(angle),0.0,cos(angle)] else <matrix>[cos(angle),sin(angle),0.0;-sin(angle),cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy \"Return orientation object from n_x and n_y vectors\"
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 1e-010 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-006 then {n_y[1],n_y[2],n_y[3]} else if abs(e_x[1]) > 1e-006 then {0.0,1.0,0.0} else {1.0,0.0,0.0};
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation \"Return orientation object of a planar rotation\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := <matrix>[e[1] * e[1] + cos(angle) * (1.0 - e[1] * e[1]),(e[1] * e[2] + cos(angle) * -e[1] * e[2]) - -sin(angle) * e[3],(e[1] * e[3] + cos(angle) * -e[1] * e[3]) - sin(angle) * e[2];(e[2] * e[1] + cos(angle) * -e[2] * e[1]) - sin(angle) * e[3],e[2] * e[2] + cos(angle) * (1.0 - e[2] * e[2]),(e[2] * e[3] + cos(angle) * -e[2] * e[3]) - -sin(angle) * e[1];(e[3] * e[1] + cos(angle) * -e[3] * e[1]) - -sin(angle) * e[2],(e[3] * e[2] + cos(angle) * -e[3] * e[2]) - sin(angle) * e[1],e[3] * e[3] + cos(angle) * (1.0 - e[3] * e[3])];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1 \"Transform vector from frame 2 to frame 1\"
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2 \"Transform vector from frame 1 to frame 2\"
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.absoluteRotation \"Return absolute orientation object from another absolute and a relative orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   R2 := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[R_rel.T[1,1] * R1.T[1,1] + R_rel.T[1,2] * R1.T[2,1] + R_rel.T[1,3] * R1.T[3,1],R_rel.T[1,1] * R1.T[1,2] + R_rel.T[1,2] * R1.T[2,2] + R_rel.T[1,3] * R1.T[3,2],R_rel.T[1,1] * R1.T[1,3] + R_rel.T[1,2] * R1.T[2,3] + R_rel.T[1,3] * R1.T[3,3];R_rel.T[2,1] * R1.T[1,1] + R_rel.T[2,2] * R1.T[2,1] + R_rel.T[2,3] * R1.T[3,1],R_rel.T[2,1] * R1.T[1,2] + R_rel.T[2,2] * R1.T[2,2] + R_rel.T[2,3] * R1.T[3,2],R_rel.T[2,1] * R1.T[1,3] + R_rel.T[2,2] * R1.T[2,3] + R_rel.T[2,3] * R1.T[3,3];R_rel.T[3,1] * R1.T[1,1] + R_rel.T[3,2] * R1.T[2,1] + R_rel.T[3,3] * R1.T[3,1],R_rel.T[3,1] * R1.T[1,2] + R_rel.T[3,2] * R1.T[2,2] + R_rel.T[3,3] * R1.T[3,2],R_rel.T[3,1] * R1.T[1,3] + R_rel.T[3,2] * R1.T[2,3] + R_rel.T[3,3] * R1.T[3,3]],Modelica.Mechanics.MultiBody.Frames.resolve2(R_rel,{R1.w[1],R1.w[2],R1.w[3]}) + {R_rel.w[1],R_rel.w[2],R_rel.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2 \"Return angular velocity resolved in frame 2 from orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations \"Return fixed rotation object to rotate in sequence around fixed angles along 3 axes\"
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence'\";
//   input Real[3] der_angles(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angles)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles \"Return the 3 angles to rotate in sequence around 3 axes to construct the given orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real guessAngle1(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Select angles[1] such that |angles[1] - guessAngle1| is a minimum\";
//   output Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi\";
//   protected Real[3] e1_1(unit = \"1\") \"First rotation axis, resolved in frame 1\";
//   protected Real[3] e2_1a(unit = \"1\") \"Second rotation axis, resolved in frame 1a\";
//   protected Real[3] e3_1(unit = \"1\") \"Third rotation axis, resolved in frame 1\";
//   protected Real[3] e3_2(unit = \"1\") \"Third rotation axis, resolved in frame 2\";
//   protected Real A \"Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real B \"Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real angle_1a(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 1 for angles[1]\";
//   protected Real angle_1b(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 2 for angles[1]\";
//   protected Real[3, 3] T_1a \"Orientation object to rotate frame 1 into frame 1a\";
// algorithm
//   assert( sequence[1] <> sequence[2] and sequence[2] <> sequence[3], \"input argument 'sequence[1:3]' is not valid\");
//   e1_1 := if sequence[1] == 1 then {1.0,0.0,0.0} else if sequence[1] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   e2_1a := if sequence[2] == 1 then {1.0,0.0,0.0} else if sequence[2] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := if sequence[3] == 1 then {1.0,0.0,0.0} else if sequence[3] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 1e-012 and abs(B) <= 1e-012 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := atan2(A,-B);
//     angle_1b := atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis \"Return unit vector for x-, y-, or z-axis\"
//   input Integer axis(min = 1, max = 3) \"Axis vector to be returned\";
//   output Real[3] e(unit = \"1\") \"Unit axis vector\";
// algorithm
//   e := if axis == 1 then {1.0,0.0,0.0} else if axis == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q \"Return orientation object R from quaternion orientation object Q\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity from frame 2 with respect to frame 1, resolved in frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) + -1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) + -1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) + -1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_nxy \"Return fixed orientation object from n_x and n_y vectors\"
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 1e-010 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-006 then {n_y[1],n_y[2],n_y[3]} else if abs(e_x[1]) > 1e-006 then {0.0,1.0,0.0} else {1.0,0.0,0.0};
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation \"Return orientation object that does not rotate a frame\"
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object such that frame 1 and frame 2 are identical\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotation \"Return orientation object of a planar rotation\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   input Real der_angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angle)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e[1] * e[1] + cos(angle) * (1.0 - e[1] * e[1]),(e[1] * e[2] + cos(angle) * -e[1] * e[2]) - -sin(angle) * e[3],(e[1] * e[3] + cos(angle) * -e[1] * e[3]) - sin(angle) * e[2];(e[2] * e[1] + cos(angle) * -e[2] * e[1]) - sin(angle) * e[3],e[2] * e[2] + cos(angle) * (1.0 - e[2] * e[2]),(e[2] * e[3] + cos(angle) * -e[2] * e[3]) - -sin(angle) * e[1];(e[3] * e[1] + cos(angle) * -e[3] * e[1]) - -sin(angle) * e[2],(e[3] * e[2] + cos(angle) * -e[3] * e[2]) - sin(angle) * e[1],e[3] * e[3] + cos(angle) * (1.0 - e[3] * e[3])],{der_angle * e[1],der_angle * e[2],der_angle * e[3]});
// end Modelica.Mechanics.MultiBody.Frames.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle \"Return angle of a planar rotation, given the rotation axis and the representations of a vector in frame 1 and frame 2\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)\";
//   input Real[3] v1 \"A vector v resolved in frame 1 (shall not be parallel to e)\";
//   input Real[3] v2 \"Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)\";
//   output Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi\";
// algorithm
//   angle := atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3] - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1 \"Transform vector from frame 2 to frame 1\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2 \"Transform vector from frame 1 to frame 2\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveDyade1 \"Transform second order tensor from frame 2 to frame 1\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3, 3] D2 \"Second order tensor resolved in frame 2\";
//   output Real[3, 3] D1 \"Second order tensor resolved in frame 1\";
// algorithm
//   D1 := <matrix>[(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,1] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,1] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,1],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,2] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,2] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,2],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,3] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,3] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,3];(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,1] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,1] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,1],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,2] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,2] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,2],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,3] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,3] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,3];(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,1] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,1] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,1],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,2] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,2] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,2],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,3] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,3] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.resolveDyade1;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q \"Return quaternion orientation object Q from orientation object R\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration \"Gravity field acceleration depending on field type and position\"
//   input Real[3] r(quantity = \"Length\", unit = \"m\") \"Position vector from world frame to actual point, resolved in world frame\";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType \"Type of gravity field\";
//   input Real[3] g(quantity = \"Acceleration\", unit = \"m/s2\") \"Constant gravity acceleration, resolved in world frame, if gravityType=1\";
//   input Real mue(unit = \"m3/s2\") \"Field constant of point gravity field, if gravityType=2\";
//   output Real[3] gravity(quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration at point r, resolved in world frame\";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(r[1] * mue) / (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0 * Modelica.Math.Vectors.length({r[1],r[2],r[3]})),(r[2] * mue) / (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0 * Modelica.Math.Vectors.length({r[1],r[2],r[3]})),(r[3] * mue) / (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0 * Modelica.Math.Vectors.length({r[1],r[2],r[3]}))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// class Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint
//   Real world.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean world.enableAnimation = true \"= true, if animation of all components is enabled\";
//   parameter Boolean world.animateWorld = true \"= true, if world coordinate system shall be visualized\";
//   parameter Boolean world.animateGravity = true \"= true, if gravity field shall be visualized (acceleration vector or field center)\";
//   parameter String world.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String world.label2 = \"y\" \"Label of vertical axis in icon\";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity \"Type of gravity field\";
//   parameter Real world.g(quantity = \"Acceleration\", unit = \"m/s2\") = 0.0 \"Constant gravity acceleration\";
//   parameter Real world.n[1](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[2](unit = \"1\") = -1.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[3](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.mue(unit = \"m3/s2\", min = 0.0) = 398600000000000 \"Gravity field constant (default = field constant of earth)\";
//   parameter Boolean world.driveTrainMechanics3D = true \"= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account\";
//   parameter Boolean world.axisShowLabels = true \"= true, if labels shall be shown\";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of z-arrow\";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of z-arrow\";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of z-arrow\";
//   parameter Real world.gravityArrowTail[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   parameter Real world.gravitySphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 12742000.0 \"Diameter of sphere representing gravity center (default = mean diameter of earth)\";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   parameter Real world.nominalLength(quantity = \"Length\", unit = \"m\") = 1.0 \"\\\"Nominal\\\" length of multi-body system\";
//   parameter Real world.defaultWidthFraction = 20.0 \"Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)\";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 \"Default for arrow diameter of a coordinate system as a fraction of axis length\";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 \"Default reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real world.defaultN_to_m(unit = \"N/m\", min = 0.0) = 1000.0 \"Default scaling of force arrows (length = force/defaultN_to_m)\";
//   parameter Real world.defaultNm_to_m(unit = \"N.m/m\", min = 0.0) = 1000.0 \"Default scaling of torque arrows (length = torque/defaultNm_to_m)\";
//   protected parameter Integer world.ndim = if world.enableAnimation and world.animateWorld then 1 else 0;
//   protected parameter Integer world.ndim2 = if world.enableAnimation and world.animateWorld and world.axisShowLabels then 1 else 0;
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation and world.animateGravity and world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter Real world.axisLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.nominalLength / 2.0 \"Length of world axes arrows\";
//   parameter Real world.defaultAxisLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 5.0 \"Default for length of a frame axis (but not world frame)\";
//   parameter Real world.defaultJointLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a joint\";
//   parameter Real world.defaultJointWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape representing a joint\";
//   parameter Real world.defaultForceLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a force (e.g. damper)\";
//   parameter Real world.defaultForceWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape represening a force (e.g. spring, bushing)\";
//   parameter Real world.defaultBodyDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 9.0 \"Default for diameter of sphere representing the center of mass of a body\";
//   parameter Real world.defaultArrowDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 40.0 \"Default for arrow diameter (e.g., of forces, torques, sensors)\";
//   parameter Real world.axisDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction \"Diameter of world axes arrows\";
//   parameter Real world.gravityArrowLength(quantity = \"Length\", unit = \"m\") = world.axisLength / 2.0 \"Length of gravity arrow\";
//   protected parameter Real world.labelStart(quantity = \"Length\", unit = \"m\") = 1.05 * world.axisLength;
//   protected parameter Real world.headLength(quantity = \"Length\", unit = \"m\") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineWidth(quantity = \"Length\", unit = \"m\") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   parameter Real world.gravityArrowDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction \"Diameter of gravity arrow\";
//   protected parameter Real world.lineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.axisLength - world.headLength);
//   input Real world.x_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r_lines[1](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[1](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of cylinders\";
//   input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of cylinders\";
//   input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of cylinders\";
//   input Real world.x_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1,1];
//   protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1,2];
//   protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1,3];
//   protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2,1];
//   protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2,2];
//   protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2,3];
//   protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3,1];
//   protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3,2];
//   protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3,3];
//   protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1,1];
//   protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1,2];
//   protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1,3];
//   protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2,1];
//   protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2,2];
//   protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2,3];
//   protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3,1];
//   protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3,2];
//   protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3,3];
//   protected Real world.x_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[1];
//   protected Real world.x_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[2];
//   protected Real world.x_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[3];
//   protected parameter Integer world.x_label.n = 2 \"Number of cylinders\";
//   parameter String world.x_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real world.x_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-010) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-010) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-010) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
//   protected Real world.x_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
//   protected Real world.x_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
//   protected Real world.x_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real world.x_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real world.x_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[1].Form;
//   output Real world.x_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].Material;
//   protected output Real world.x_label.cylinders[1].Extra;
//   parameter String world.x_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real world.x_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-010) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-010) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-010) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
//   protected Real world.x_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
//   protected Real world.x_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
//   protected Real world.x_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real world.x_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real world.x_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[2].Form;
//   output Real world.x_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].Material;
//   protected output Real world.x_label.cylinders[2].Extra;
//   input Real world.y_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[2](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[2](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[1](unit = \"1\") = -1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[2](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 0.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 0.75 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] \"Color of cylinders\";
//   input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] \"Color of cylinders\";
//   input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] \"Color of cylinders\";
//   input Real world.y_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1,1];
//   protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1,2];
//   protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1,3];
//   protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2,1];
//   protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2,2];
//   protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2,3];
//   protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3,1];
//   protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3,2];
//   protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3,3];
//   protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1,1];
//   protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1,2];
//   protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1,3];
//   protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2,1];
//   protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2,2];
//   protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2,3];
//   protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3,1];
//   protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3,2];
//   protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3,3];
//   protected Real world.y_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[1];
//   protected Real world.y_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[2];
//   protected Real world.y_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[3];
//   protected parameter Integer world.y_label.n = 2 \"Number of cylinders\";
//   parameter String world.y_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real world.y_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-010) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-010) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-010) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
//   protected Real world.y_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
//   protected Real world.y_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
//   protected Real world.y_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real world.y_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real world.y_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[1].Form;
//   output Real world.y_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].Material;
//   protected output Real world.y_label.cylinders[1].Extra;
//   parameter String world.y_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real world.y_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-010) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-010) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-010) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
//   protected Real world.y_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
//   protected Real world.y_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
//   protected Real world.y_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real world.y_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real world.y_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[2].Form;
//   output Real world.y_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].Material;
//   protected output Real world.y_label.cylinders[2].Extra;
//   input Real world.z_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[3](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[3](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] \"Color of cylinders\";
//   input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] \"Color of cylinders\";
//   input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] \"Color of cylinders\";
//   input Real world.z_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1,1];
//   protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1,2];
//   protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1,3];
//   protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2,1];
//   protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2,2];
//   protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2,3];
//   protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3,1];
//   protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3,2];
//   protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3,3];
//   protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1,1];
//   protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1,2];
//   protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1,3];
//   protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2,1];
//   protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2,2];
//   protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2,3];
//   protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3,1];
//   protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3,2];
//   protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3,3];
//   protected Real world.z_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[1];
//   protected Real world.z_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[2];
//   protected Real world.z_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[3];
//   protected parameter Integer world.z_label.n = 3 \"Number of cylinders\";
//   parameter String world.z_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real world.z_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-010) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-010) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-010) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
//   protected Real world.z_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
//   protected Real world.z_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
//   protected Real world.z_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real world.z_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real world.z_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[1].Form;
//   output Real world.z_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].Material;
//   protected output Real world.z_label.cylinders[1].Extra;
//   parameter String world.z_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real world.z_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-010) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-010) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-010) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
//   protected Real world.z_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
//   protected Real world.z_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
//   protected Real world.z_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real world.z_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real world.z_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[2].Form;
//   output Real world.z_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].Material;
//   protected output Real world.z_label.cylinders[2].Extra;
//   parameter String world.z_label.cylinders[3].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[3].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[3].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[3].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[3].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[3].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real world.z_label.cylinders[3].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-010) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-010) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-010) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
//   protected Real world.z_label.cylinders[3].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
//   protected Real world.z_label.cylinders[3].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
//   protected Real world.z_label.cylinders[3].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real world.z_label.cylinders[3].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real world.z_label.cylinders[3].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[3].Form;
//   output Real world.z_label.cylinders[3].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[3].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].Material;
//   protected output Real world.z_label.cylinders[3].Extra;
//   protected parameter Real world.gravityHeadLength(quantity = \"Length\", unit = \"m\") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   parameter String world.x_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.x_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.x_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.x_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
//   protected Real world.x_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-010) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-010) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-010) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.n_z_aux[1](unit = \"1\") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
//   protected Real world.x_arrowLine.n_z_aux[2](unit = \"1\") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
//   protected Real world.x_arrowLine.n_z_aux[3](unit = \"1\") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
//   protected Real world.x_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
//   protected Real world.x_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
//   protected Real world.x_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
//   protected output Real world.x_arrowLine.Form;
//   output Real world.x_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.Material;
//   protected output Real world.x_arrowLine.Extra;
//   parameter String world.x_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.x_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.x_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.x_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
//   protected Real world.x_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-010) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-010) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-010) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.n_z_aux[1](unit = \"1\") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
//   protected Real world.x_arrowHead.n_z_aux[2](unit = \"1\") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
//   protected Real world.x_arrowHead.n_z_aux[3](unit = \"1\") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
//   protected Real world.x_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
//   protected Real world.x_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
//   protected Real world.x_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
//   protected output Real world.x_arrowHead.Form;
//   output Real world.x_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.Material;
//   protected output Real world.x_arrowHead.Extra;
//   parameter String world.y_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.y_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.y_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.y_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
//   protected Real world.y_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-010) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-010) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-010) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.n_z_aux[1](unit = \"1\") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
//   protected Real world.y_arrowLine.n_z_aux[2](unit = \"1\") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
//   protected Real world.y_arrowLine.n_z_aux[3](unit = \"1\") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
//   protected Real world.y_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
//   protected Real world.y_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
//   protected Real world.y_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
//   protected output Real world.y_arrowLine.Form;
//   output Real world.y_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.Material;
//   protected output Real world.y_arrowLine.Extra;
//   parameter String world.y_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.y_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.y_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.y_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
//   protected Real world.y_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-010) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-010) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-010) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.n_z_aux[1](unit = \"1\") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
//   protected Real world.y_arrowHead.n_z_aux[2](unit = \"1\") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
//   protected Real world.y_arrowHead.n_z_aux[3](unit = \"1\") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
//   protected Real world.y_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
//   protected Real world.y_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
//   protected Real world.y_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
//   protected output Real world.y_arrowHead.Form;
//   output Real world.y_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.Material;
//   protected output Real world.y_arrowHead.Extra;
//   parameter String world.z_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.z_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.z_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.z_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
//   protected Real world.z_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-010) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-010) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-010) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.n_z_aux[1](unit = \"1\") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
//   protected Real world.z_arrowLine.n_z_aux[2](unit = \"1\") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
//   protected Real world.z_arrowLine.n_z_aux[3](unit = \"1\") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
//   protected Real world.z_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
//   protected Real world.z_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
//   protected Real world.z_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
//   protected output Real world.z_arrowLine.Form;
//   output Real world.z_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.Material;
//   protected output Real world.z_arrowLine.Extra;
//   parameter String world.z_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.z_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.z_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.z_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
//   protected Real world.z_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-010) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-010) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-010) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.n_z_aux[1](unit = \"1\") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
//   protected Real world.z_arrowHead.n_z_aux[2](unit = \"1\") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
//   protected Real world.z_arrowHead.n_z_aux[3](unit = \"1\") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
//   protected Real world.z_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
//   protected Real world.z_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
//   protected Real world.z_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
//   protected output Real world.z_arrowHead.Form;
//   output Real world.z_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.Material;
//   protected output Real world.z_arrowHead.Extra;
//   parameter String world.gravityArrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.gravityArrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[1](unit = \"1\") = world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[2](unit = \"1\") = world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[3](unit = \"1\") = world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.length(quantity = \"Length\", unit = \"m\") = world.gravityLineLength \"Length of visual object\";
//   input Real world.gravityArrowLine.width(quantity = \"Length\", unit = \"m\") = world.gravityArrowDiameter \"Width of visual object\";
//   input Real world.gravityArrowLine.height(quantity = \"Length\", unit = \"m\") = world.gravityArrowDiameter \"Height of visual object\";
//   input Real world.gravityArrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.gravityArrowLine.color[1] = Real(world.gravityArrowColor[1]) \"Color of shape\";
//   input Real world.gravityArrowLine.color[2] = Real(world.gravityArrowColor[2]) \"Color of shape\";
//   input Real world.gravityArrowLine.color[3] = Real(world.gravityArrowColor[3]) \"Color of shape\";
//   input Real world.gravityArrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.gravityArrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.gravityArrowLine.lengthDirection[1],world.gravityArrowLine.lengthDirection[2],world.gravityArrowLine.lengthDirection[3]});
//   protected Real world.gravityArrowLine.e_x[1](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-010) then 1.0 else world.gravityArrowLine.lengthDirection[1] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[2](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-010) then 0.0 else world.gravityArrowLine.lengthDirection[2] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[3](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-010) then 0.0 else world.gravityArrowLine.lengthDirection[3] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.n_z_aux[1](unit = \"1\") = world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[3] - world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[2];
//   protected Real world.gravityArrowLine.n_z_aux[2](unit = \"1\") = world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[1] - world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[3];
//   protected Real world.gravityArrowLine.n_z_aux[3](unit = \"1\") = world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[2] - world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[1];
//   protected Real world.gravityArrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[1];
//   protected Real world.gravityArrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[2];
//   protected Real world.gravityArrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[3];
//   protected output Real world.gravityArrowLine.Form;
//   output Real world.gravityArrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.gravityArrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.Material;
//   protected output Real world.gravityArrowLine.Extra;
//   parameter String world.gravityArrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.gravityArrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = ({world.gravityArrowTail[1],world.gravityArrowTail[2],world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-013) * world.gravityLineLength)[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = ({world.gravityArrowTail[1],world.gravityArrowTail[2],world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-013) * world.gravityLineLength)[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = ({world.gravityArrowTail[1],world.gravityArrowTail[2],world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-013) * world.gravityLineLength)[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[1](unit = \"1\") = world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[2](unit = \"1\") = world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[3](unit = \"1\") = world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.length(quantity = \"Length\", unit = \"m\") = world.gravityHeadLength \"Length of visual object\";
//   input Real world.gravityArrowHead.width(quantity = \"Length\", unit = \"m\") = world.gravityHeadWidth \"Width of visual object\";
//   input Real world.gravityArrowHead.height(quantity = \"Length\", unit = \"m\") = world.gravityHeadWidth \"Height of visual object\";
//   input Real world.gravityArrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.gravityArrowHead.color[1] = Real(world.gravityArrowColor[1]) \"Color of shape\";
//   input Real world.gravityArrowHead.color[2] = Real(world.gravityArrowColor[2]) \"Color of shape\";
//   input Real world.gravityArrowHead.color[3] = Real(world.gravityArrowColor[3]) \"Color of shape\";
//   input Real world.gravityArrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.gravityArrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.gravityArrowHead.lengthDirection[1],world.gravityArrowHead.lengthDirection[2],world.gravityArrowHead.lengthDirection[3]});
//   protected Real world.gravityArrowHead.e_x[1](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-010) then 1.0 else world.gravityArrowHead.lengthDirection[1] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[2](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-010) then 0.0 else world.gravityArrowHead.lengthDirection[2] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[3](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-010) then 0.0 else world.gravityArrowHead.lengthDirection[3] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.n_z_aux[1](unit = \"1\") = world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[3] - world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[2];
//   protected Real world.gravityArrowHead.n_z_aux[2](unit = \"1\") = world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[1] - world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[3];
//   protected Real world.gravityArrowHead.n_z_aux[3](unit = \"1\") = world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[2] - world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[1];
//   protected Real world.gravityArrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[1];
//   protected Real world.gravityArrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[2];
//   protected Real world.gravityArrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-006) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[3];
//   protected output Real world.gravityArrowHead.Form;
//   output Real world.gravityArrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.gravityArrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.Material;
//   protected output Real world.gravityArrowHead.Extra;
//   Real gearConstraint.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.bearing.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.bearing.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.bearing.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.bearing.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.bearing.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.bearing.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.bearing.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.bearing.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.bearing.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.bearing.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.bearing.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.bearing.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.bearing.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Real gearConstraint.ratio(start = 2.0) = 10.0 \"Gear speed ratio\";
//   parameter Real gearConstraint.n_a[1](unit = \"1\") = 1.0 \"Axis of rotation of shaft a (same coordinates in frame_a, frame_b, bearing)\";
//   parameter Real gearConstraint.n_a[2](unit = \"1\") = 0.0 \"Axis of rotation of shaft a (same coordinates in frame_a, frame_b, bearing)\";
//   parameter Real gearConstraint.n_a[3](unit = \"1\") = 0.0 \"Axis of rotation of shaft a (same coordinates in frame_a, frame_b, bearing)\";
//   parameter Real gearConstraint.n_b[1](unit = \"1\") = 1.0 \"Axis of rotation of shaft b (same coordinates in frame_a, frame_b, bearing)\";
//   parameter Real gearConstraint.n_b[2](unit = \"1\") = 0.0 \"Axis of rotation of shaft b (same coordinates in frame_a, frame_b, bearing)\";
//   parameter Real gearConstraint.n_b[3](unit = \"1\") = 0.0 \"Axis of rotation of shaft b (same coordinates in frame_a, frame_b, bearing)\";
//   parameter Real gearConstraint.r_a[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame bearing to frame_a resolved in bearing\";
//   parameter Real gearConstraint.r_a[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame bearing to frame_a resolved in bearing\";
//   parameter Real gearConstraint.r_a[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame bearing to frame_a resolved in bearing\";
//   parameter Real gearConstraint.r_b[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame bearing to frame_b resolved in bearing\";
//   parameter Real gearConstraint.r_b[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame bearing to frame_b resolved in bearing\";
//   parameter Real gearConstraint.r_b[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame bearing to frame_b resolved in bearing\";
//   parameter Boolean gearConstraint.idealGear.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real gearConstraint.idealGear.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.idealGear.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.idealGear.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.idealGear.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real gearConstraint.idealGear.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   parameter Real gearConstraint.idealGear.ratio(start = 1.0) = gearConstraint.ratio \"Transmission ratio (flange_a.phi/flange_b.phi)\";
//   Real gearConstraint.idealGear.phi_a(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Angle between left shaft flange and support\";
//   Real gearConstraint.idealGear.phi_b(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Angle between right shaft flange and support\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_a.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean gearConstraint.actuatedRevolute_a.useAxisFlange = true \"= true, if axis flange is enabled\";
//   parameter Boolean gearConstraint.actuatedRevolute_a.animation = false \"= true, if animation shall be enabled (show axis as cylinder)\";
//   parameter Real gearConstraint.actuatedRevolute_a.n[1](unit = \"1\") = gearConstraint.n_a[1] \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real gearConstraint.actuatedRevolute_a.n[2](unit = \"1\") = gearConstraint.n_a[2] \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real gearConstraint.actuatedRevolute_a.n[3](unit = \"1\") = gearConstraint.n_a[3] \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   constant Real gearConstraint.actuatedRevolute_a.phi_offset(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Relative angle offset (angle = phi_offset + phi)\";
//   parameter Real gearConstraint.actuatedRevolute_a.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Length of cylinder representing the joint axis\";
//   parameter Real gearConstraint.actuatedRevolute_a.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Diameter of cylinder representing the joint axis\";
//   input Integer gearConstraint.actuatedRevolute_a.cylinderColor[1](min = 0, max = 255) = 255 \"Color of cylinder representing the joint axis\";
//   input Integer gearConstraint.actuatedRevolute_a.cylinderColor[2](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Integer gearConstraint.actuatedRevolute_a.cylinderColor[3](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Real gearConstraint.actuatedRevolute_a.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) gearConstraint.actuatedRevolute_a.stateSelect = StateSelect.prefer \"Priority to use joint angle phi and w=der(phi) as states\";
//   Real gearConstraint.actuatedRevolute_a.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Second derivative of angle phi (relative angular acceleration)\";
//   Real gearConstraint.actuatedRevolute_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Driving torque in direction of axis of rotation\";
//   Real gearConstraint.actuatedRevolute_a.angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"= phi_offset + phi\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_a.R_rel.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real gearConstraint.actuatedRevolute_a.fixed.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real gearConstraint.actuatedRevolute_a.fixed.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_a.fixed.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.actuatedRevolute_a.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_a.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.actuatedRevolute_a.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_a.support.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected parameter Real gearConstraint.actuatedRevolute_a.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({gearConstraint.actuatedRevolute_a.n[1],gearConstraint.actuatedRevolute_a.n[2],gearConstraint.actuatedRevolute_a.n[3]},1e-013)[1] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real gearConstraint.actuatedRevolute_a.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({gearConstraint.actuatedRevolute_a.n[1],gearConstraint.actuatedRevolute_a.n[2],gearConstraint.actuatedRevolute_a.n[3]},1e-013)[2] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real gearConstraint.actuatedRevolute_a.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({gearConstraint.actuatedRevolute_a.n[1],gearConstraint.actuatedRevolute_a.n[2],gearConstraint.actuatedRevolute_a.n[3]},1e-013)[3] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   Real gearConstraint.actuatedRevolute_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative rotation angle from frame_a to frame_b\";
//   Real gearConstraint.actuatedRevolute_a.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.prefer) \"First derivative of angle phi (relative angular velocity)\";
//   input Real gearConstraint.actuatedRevolute_a.internalAxis.tau(quantity = \"Torque\", unit = \"N.m\") = gearConstraint.actuatedRevolute_a.tau \"External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)\";
//   Real gearConstraint.actuatedRevolute_a.internalAxis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"External support angle (= flange.phi)\";
//   Real gearConstraint.actuatedRevolute_a.internalAxis.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_a.internalAxis.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.actuatedRevolute_b.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean gearConstraint.actuatedRevolute_b.useAxisFlange = true \"= true, if axis flange is enabled\";
//   parameter Boolean gearConstraint.actuatedRevolute_b.animation = false \"= true, if animation shall be enabled (show axis as cylinder)\";
//   parameter Real gearConstraint.actuatedRevolute_b.n[1](unit = \"1\") = gearConstraint.n_b[1] \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real gearConstraint.actuatedRevolute_b.n[2](unit = \"1\") = gearConstraint.n_b[2] \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real gearConstraint.actuatedRevolute_b.n[3](unit = \"1\") = gearConstraint.n_b[3] \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   constant Real gearConstraint.actuatedRevolute_b.phi_offset(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Relative angle offset (angle = phi_offset + phi)\";
//   parameter Real gearConstraint.actuatedRevolute_b.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Length of cylinder representing the joint axis\";
//   parameter Real gearConstraint.actuatedRevolute_b.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Diameter of cylinder representing the joint axis\";
//   input Integer gearConstraint.actuatedRevolute_b.cylinderColor[1](min = 0, max = 255) = 255 \"Color of cylinder representing the joint axis\";
//   input Integer gearConstraint.actuatedRevolute_b.cylinderColor[2](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Integer gearConstraint.actuatedRevolute_b.cylinderColor[3](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Real gearConstraint.actuatedRevolute_b.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) gearConstraint.actuatedRevolute_b.stateSelect = StateSelect.prefer \"Priority to use joint angle phi and w=der(phi) as states\";
//   Real gearConstraint.actuatedRevolute_b.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Second derivative of angle phi (relative angular acceleration)\";
//   Real gearConstraint.actuatedRevolute_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Driving torque in direction of axis of rotation\";
//   Real gearConstraint.actuatedRevolute_b.angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"= phi_offset + phi\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.actuatedRevolute_b.R_rel.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real gearConstraint.actuatedRevolute_b.fixed.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real gearConstraint.actuatedRevolute_b.fixed.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_b.fixed.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.actuatedRevolute_b.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_b.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.actuatedRevolute_b.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_b.support.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected parameter Real gearConstraint.actuatedRevolute_b.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({gearConstraint.actuatedRevolute_b.n[1],gearConstraint.actuatedRevolute_b.n[2],gearConstraint.actuatedRevolute_b.n[3]},1e-013)[1] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real gearConstraint.actuatedRevolute_b.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({gearConstraint.actuatedRevolute_b.n[1],gearConstraint.actuatedRevolute_b.n[2],gearConstraint.actuatedRevolute_b.n[3]},1e-013)[2] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real gearConstraint.actuatedRevolute_b.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({gearConstraint.actuatedRevolute_b.n[1],gearConstraint.actuatedRevolute_b.n[2],gearConstraint.actuatedRevolute_b.n[3]},1e-013)[3] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   Real gearConstraint.actuatedRevolute_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative rotation angle from frame_a to frame_b\";
//   Real gearConstraint.actuatedRevolute_b.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.prefer) \"First derivative of angle phi (relative angular velocity)\";
//   input Real gearConstraint.actuatedRevolute_b.internalAxis.tau(quantity = \"Torque\", unit = \"N.m\") = gearConstraint.actuatedRevolute_b.tau \"External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)\";
//   Real gearConstraint.actuatedRevolute_b.internalAxis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"External support angle (= flange.phi)\";
//   Real gearConstraint.actuatedRevolute_b.internalAxis.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real gearConstraint.actuatedRevolute_b.internalAxis.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real gearConstraint.fixedTranslation2.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean gearConstraint.fixedTranslation2.animation = false \"= true, if animation shall be enabled\";
//   parameter Real gearConstraint.fixedTranslation2.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = gearConstraint.r_a[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = gearConstraint.r_a[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = gearConstraint.r_a[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String gearConstraint.fixedTranslation2.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real gearConstraint.fixedTranslation2.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.extra = 0.0 \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer gearConstraint.fixedTranslation2.color[1](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer gearConstraint.fixedTranslation2.color[2](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer gearConstraint.fixedTranslation2.color[3](min = 0, max = 255) = 155 \" Color of shape\";
//   input Real gearConstraint.fixedTranslation2.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real gearConstraint.fixedTranslation2.lengthDirection[1](unit = \"1\") = gearConstraint.fixedTranslation2.r[1] - gearConstraint.fixedTranslation2.r_shape[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.lengthDirection[2](unit = \"1\") = gearConstraint.fixedTranslation2.r[2] - gearConstraint.fixedTranslation2.r_shape[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.lengthDirection[3](unit = \"1\") = gearConstraint.fixedTranslation2.r[3] - gearConstraint.fixedTranslation2.r_shape[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation2.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({gearConstraint.fixedTranslation2.r[1] - gearConstraint.fixedTranslation2.r_shape[1],gearConstraint.fixedTranslation2.r[2] - gearConstraint.fixedTranslation2.r_shape[2],gearConstraint.fixedTranslation2.r[3] - gearConstraint.fixedTranslation2.r_shape[3]}) \" Length of shape\";
//   parameter Real gearConstraint.fixedTranslation2.width(quantity = \"Length\", unit = \"m\", min = 0.0) = gearConstraint.fixedTranslation2.length / world.defaultWidthFraction \" Width of shape\";
//   parameter Real gearConstraint.fixedTranslation2.height(quantity = \"Length\", unit = \"m\", min = 0.0) = gearConstraint.fixedTranslation2.width \" Height of shape.\";
//   Real gearConstraint.fixedTranslation1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real gearConstraint.fixedTranslation1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean gearConstraint.fixedTranslation1.animation = false \"= true, if animation shall be enabled\";
//   parameter Real gearConstraint.fixedTranslation1.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = gearConstraint.r_b[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = gearConstraint.r_b[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = gearConstraint.r_b[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String gearConstraint.fixedTranslation1.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real gearConstraint.fixedTranslation1.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.extra = 0.0 \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer gearConstraint.fixedTranslation1.color[1](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer gearConstraint.fixedTranslation1.color[2](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer gearConstraint.fixedTranslation1.color[3](min = 0, max = 255) = 155 \" Color of shape\";
//   input Real gearConstraint.fixedTranslation1.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real gearConstraint.fixedTranslation1.lengthDirection[1](unit = \"1\") = gearConstraint.fixedTranslation1.r[1] - gearConstraint.fixedTranslation1.r_shape[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.lengthDirection[2](unit = \"1\") = gearConstraint.fixedTranslation1.r[2] - gearConstraint.fixedTranslation1.r_shape[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.lengthDirection[3](unit = \"1\") = gearConstraint.fixedTranslation1.r[3] - gearConstraint.fixedTranslation1.r_shape[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real gearConstraint.fixedTranslation1.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({gearConstraint.fixedTranslation1.r[1] - gearConstraint.fixedTranslation1.r_shape[1],gearConstraint.fixedTranslation1.r[2] - gearConstraint.fixedTranslation1.r_shape[2],gearConstraint.fixedTranslation1.r[3] - gearConstraint.fixedTranslation1.r_shape[3]}) \" Length of shape\";
//   parameter Real gearConstraint.fixedTranslation1.width(quantity = \"Length\", unit = \"m\", min = 0.0) = gearConstraint.fixedTranslation1.length / world.defaultWidthFraction \" Width of shape\";
//   parameter Real gearConstraint.fixedTranslation1.height(quantity = \"Length\", unit = \"m\", min = 0.0) = gearConstraint.fixedTranslation1.width \" Height of shape.\";
//   Real cyl1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean cyl1.animation = true \"= true, if animation shall be enabled (show cylinder between frame_a and frame_b)\";
//   parameter Real cyl1.r[1](quantity = \"Length\", unit = \"m\", start = 0.1) = 0.4 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real cyl1.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real cyl1.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real cyl1.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real cyl1.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real cyl1.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real cyl1.innerDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0 \"Inner diameter of cylinder (0 <= innerDiameter <= Diameter)\";
//   parameter Real cyl1.density(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7700.0 \"Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)\";
//   input Integer cyl1.color[1](min = 0, max = 255) = 0 \"Color of cylinder\";
//   input Integer cyl1.color[2](min = 0, max = 255) = 128 \"Color of cylinder\";
//   input Integer cyl1.color[3](min = 0, max = 255) = 0 \"Color of cylinder\";
//   input Real cyl1.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   Real cyl1.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl1.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl1.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl1.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl1.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl1.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl1.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl1.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl1.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean cyl1.angles_fixed = false \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real cyl1.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl1.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl1.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer cyl1.sequence_start[1](min = 1, max = 3) = 1 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl1.sequence_start[2](min = 1, max = 3) = 2 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl1.sequence_start[3](min = 1, max = 3) = 3 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean cyl1.w_0_fixed = false \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real cyl1.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl1.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl1.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean cyl1.z_0_fixed = false \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real cyl1.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl1.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl1.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Boolean cyl1.enforceStates = false \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean cyl1.useQuaternions = true \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer cyl1.sequence_angleStates[1](min = 1, max = 3) = 1 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl1.sequence_angleStates[2](min = 1, max = 3) = 2 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl1.sequence_angleStates[3](min = 1, max = 3) = 3 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   constant Real cyl1.pi = 3.14159265358979;
//   final parameter Real cyl1.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl1.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl1.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real cyl1.lengthDirection[1](unit = \"1\") = cyl1.r[1] - cyl1.r_shape[1] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real cyl1.lengthDirection[2](unit = \"1\") = cyl1.r[2] - cyl1.r_shape[2] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real cyl1.lengthDirection[3](unit = \"1\") = cyl1.r[3] - cyl1.r_shape[3] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real cyl1.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({cyl1.r[1] - cyl1.r_shape[1],cyl1.r[2] - cyl1.r_shape[2],cyl1.r[3] - cyl1.r_shape[3]}) \"Length of cylinder\";
//   final parameter Real cyl1.innerRadius(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl1.innerDiameter / 2.0 \"Inner-Radius of cylinder\";
//   parameter Real cyl1.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.1 \"Diameter of cylinder\";
//   final parameter Real cyl1.r_CM[1](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({cyl1.r[1],cyl1.r[2],cyl1.r[3]},1e-013) * cyl1.length) / 2.0)[1] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real cyl1.r_CM[2](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({cyl1.r[1],cyl1.r[2],cyl1.r[3]},1e-013) * cyl1.length) / 2.0)[2] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real cyl1.r_CM[3](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({cyl1.r[1],cyl1.r[2],cyl1.r[3]},1e-013) * cyl1.length) / 2.0)[3] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real cyl1.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.14159265358979 * (cyl1.density * (cyl1.length * cyl1.innerRadius ^ 2.0)) \"Mass of hole of cylinder\";
//   final parameter Real cyl1.radius(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl1.diameter / 2.0 \"Radius of cylinder\";
//   final parameter Real cyl1.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.14159265358979 * (cyl1.density * (cyl1.length * cyl1.radius ^ 2.0)) \"Mass of cylinder without hole\";
//   final parameter Real cyl1.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.mo * (cyl1.length ^ 2.0 / 12.0 + 0.25 * cyl1.radius ^ 2.0) - cyl1.mi * (cyl1.length ^ 2.0 / 12.0 + 0.25 * cyl1.innerRadius ^ 2.0) \"Inertia with respect to axis through center of mass, perpendicular to cylinder axis\";
//   final parameter Real cyl1.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = cyl1.mo - cyl1.mi \"Mass of cylinder\";
//   final parameter Real cyl1.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[1,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[1,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[1,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[2,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[2,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[2,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[3,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[3,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl1.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl1.R,{{(cyl1.mo * cyl1.radius ^ 2.0) / 2.0 + ((-cyl1.mi) * cyl1.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl1.I22,0.0},{0.0,0.0,cyl1.I22}})[3,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   Real cyl1.body.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.body.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.body.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.body.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.body.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.body.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.body.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean cyl1.body.animation = false \"= true, if animation shall be enabled (show cylinder and sphere)\";
//   parameter Real cyl1.body.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl1.r_CM[1] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real cyl1.body.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl1.r_CM[2] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real cyl1.body.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl1.r_CM[3] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real cyl1.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = cyl1.m \"Mass of rigid body\";
//   parameter Real cyl1.body.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = cyl1.I[1,1] \" (1,1) element of inertia tensor\";
//   parameter Real cyl1.body.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = cyl1.I[2,2] \" (2,2) element of inertia tensor\";
//   parameter Real cyl1.body.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = cyl1.I[3,3] \" (3,3) element of inertia tensor\";
//   parameter Real cyl1.body.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+060) = cyl1.I[2,1] \" (2,1) element of inertia tensor\";
//   parameter Real cyl1.body.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+060) = cyl1.I[3,1] \" (3,1) element of inertia tensor\";
//   parameter Real cyl1.body.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+060) = cyl1.I[3,2] \" (3,2) element of inertia tensor\";
//   Real cyl1.body.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl1.body.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl1.body.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl1.body.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl1.body.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl1.body.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl1.body.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl1.body.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl1.body.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean cyl1.body.angles_fixed = cyl1.angles_fixed \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real cyl1.body.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = cyl1.angles_start[1] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl1.body.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = cyl1.angles_start[2] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl1.body.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = cyl1.angles_start[3] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer cyl1.body.sequence_start[1](min = 1, max = 3) = cyl1.sequence_start[1] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl1.body.sequence_start[2](min = 1, max = 3) = cyl1.sequence_start[2] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl1.body.sequence_start[3](min = 1, max = 3) = cyl1.sequence_start[3] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean cyl1.body.w_0_fixed = cyl1.w_0_fixed \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real cyl1.body.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = cyl1.w_0_start[1] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl1.body.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = cyl1.w_0_start[2] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl1.body.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = cyl1.w_0_start[3] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean cyl1.body.z_0_fixed = cyl1.z_0_fixed \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real cyl1.body.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = cyl1.z_0_start[1] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl1.body.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = cyl1.z_0_start[2] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl1.body.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = cyl1.z_0_start[3] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl1.body.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultBodyDiameter \"Diameter of sphere\";
//   input Integer cyl1.body.sphereColor[1](min = 0, max = 255) = 0 \"Color of sphere\";
//   input Integer cyl1.body.sphereColor[2](min = 0, max = 255) = 128 \"Color of sphere\";
//   input Integer cyl1.body.sphereColor[3](min = 0, max = 255) = 255 \"Color of sphere\";
//   input Integer cyl1.body.cylinderColor[1](min = 0, max = 255) = cyl1.body.sphereColor[1] \"Color of cylinder\";
//   input Integer cyl1.body.cylinderColor[2](min = 0, max = 255) = cyl1.body.sphereColor[2] \"Color of cylinder\";
//   input Integer cyl1.body.cylinderColor[3](min = 0, max = 255) = cyl1.body.sphereColor[3] \"Color of cylinder\";
//   input Real cyl1.body.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean cyl1.body.enforceStates = cyl1.enforceStates \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean cyl1.body.useQuaternions = cyl1.useQuaternions \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer cyl1.body.sequence_angleStates[1](min = 1, max = 3) = cyl1.sequence_angleStates[1] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl1.body.sequence_angleStates[2](min = 1, max = 3) = cyl1.sequence_angleStates[2] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl1.body.sequence_angleStates[3](min = 1, max = 3) = cyl1.sequence_angleStates[3] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real cyl1.body.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.w_0_start[1],cyl1.body.w_0_start[2],cyl1.body.w_0_start[3]})[1], fixed = cyl1.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real cyl1.body.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.w_0_start[1],cyl1.body.w_0_start[2],cyl1.body.w_0_start[3]})[2], fixed = cyl1.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real cyl1.body.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.w_0_start[1],cyl1.body.w_0_start[2],cyl1.body.w_0_start[3]})[3], fixed = cyl1.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real cyl1.body.g_0[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real cyl1.body.g_0[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real cyl1.body.g_0[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   protected Real cyl1.body.Q[1](start = cyl1.body.Q_start[1], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real cyl1.body.Q[2](start = cyl1.body.Q_start[2], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real cyl1.body.Q[3](start = cyl1.body.Q_start[3], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real cyl1.body.Q[4](start = cyl1.body.Q_start[4], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected parameter Real cyl1.body.phi_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if cyl1.body.sequence_start[1] == cyl1.body.sequence_angleStates[1] and cyl1.body.sequence_start[2] == cyl1.body.sequence_angleStates[2] and cyl1.body.sequence_start[3] == cyl1.body.sequence_angleStates[3] then cyl1.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(cyl1.body.R_start,{cyl1.body.sequence_angleStates[1],cyl1.body.sequence_angleStates[2],cyl1.body.sequence_angleStates[3]},0)[1] \"Potential angle states at initial time\";
//   protected parameter Real cyl1.body.phi_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if cyl1.body.sequence_start[1] == cyl1.body.sequence_angleStates[1] and cyl1.body.sequence_start[2] == cyl1.body.sequence_angleStates[2] and cyl1.body.sequence_start[3] == cyl1.body.sequence_angleStates[3] then cyl1.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(cyl1.body.R_start,{cyl1.body.sequence_angleStates[1],cyl1.body.sequence_angleStates[2],cyl1.body.sequence_angleStates[3]},0)[2] \"Potential angle states at initial time\";
//   protected parameter Real cyl1.body.phi_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if cyl1.body.sequence_start[1] == cyl1.body.sequence_angleStates[1] and cyl1.body.sequence_start[2] == cyl1.body.sequence_angleStates[2] and cyl1.body.sequence_start[3] == cyl1.body.sequence_angleStates[3] then cyl1.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(cyl1.body.R_start,{cyl1.body.sequence_angleStates[1],cyl1.body.sequence_angleStates[2],cyl1.body.sequence_angleStates[3]},0)[3] \"Potential angle states at initial time\";
//   protected Real cyl1.body.phi[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = cyl1.body.phi_start[1], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real cyl1.body.phi[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = cyl1.body.phi_start[2], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real cyl1.body.phi[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = cyl1.body.phi_start[3], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real cyl1.body.phi_d[1](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real cyl1.body.phi_d[2](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real cyl1.body.phi_d[3](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real cyl1.body.phi_dd[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real cyl1.body.phi_dd[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real cyl1.body.phi_dd[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   final parameter Real cyl1.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_11 \"inertia tensor\";
//   final parameter Real cyl1.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_21 \"inertia tensor\";
//   final parameter Real cyl1.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_31 \"inertia tensor\";
//   final parameter Real cyl1.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_21 \"inertia tensor\";
//   final parameter Real cyl1.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_22 \"inertia tensor\";
//   final parameter Real cyl1.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_32 \"inertia tensor\";
//   final parameter Real cyl1.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_31 \"inertia tensor\";
//   final parameter Real cyl1.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_32 \"inertia tensor\";
//   final parameter Real cyl1.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl1.body.I_33 \"inertia tensor\";
//   final parameter Real cyl1.body.R_start.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl1.body.R_start.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl1.body.R_start.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl1.body.R_start.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real cyl1.body.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl1.body.sphereDiameter / 3.0 \"Diameter of cylinder\";
//   final parameter Real cyl1.body.z_a_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.z_0_start[1],cyl1.body.z_0_start[2],cyl1.body.z_0_start[3]})[1] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real cyl1.body.z_a_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.z_0_start[1],cyl1.body.z_0_start[2],cyl1.body.z_0_start[3]})[2] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real cyl1.body.z_a_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.z_0_start[1],cyl1.body.z_0_start[2],cyl1.body.z_0_start[3]})[3] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   Real cyl1.body.z_a[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.z_0_start[1],cyl1.body.z_0_start[2],cyl1.body.z_0_start[3]})[1], fixed = cyl1.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real cyl1.body.z_a[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.z_0_start[1],cyl1.body.z_0_start[2],cyl1.body.z_0_start[3]})[2], fixed = cyl1.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real cyl1.body.z_a[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.R_start,{cyl1.body.z_0_start[1],cyl1.body.z_0_start[2],cyl1.body.z_0_start[3]})[3], fixed = cyl1.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   protected parameter Real cyl1.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl1.body.R_start,{0.0,0.0,0.0,1.0})[1] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real cyl1.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl1.body.R_start,{0.0,0.0,0.0,1.0})[2] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real cyl1.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl1.body.R_start,{0.0,0.0,0.0,1.0})[3] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real cyl1.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl1.body.R_start,{0.0,0.0,0.0,1.0})[4] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   Real cyl1.frameTranslation.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frameTranslation.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frameTranslation.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frameTranslation.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frameTranslation.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frameTranslation.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frameTranslation.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl1.frameTranslation.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frameTranslation.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frameTranslation.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl1.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl1.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean cyl1.frameTranslation.animation = cyl1.animation \"= true, if animation shall be enabled\";
//   parameter Real cyl1.frameTranslation.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl1.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl1.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl1.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String cyl1.frameTranslation.shapeType = \"pipecylinder\" \" Type of shape\";
//   parameter Real cyl1.frameTranslation.r_shape[1](quantity = \"Length\", unit = \"m\") = cyl1.r_shape[1] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.r_shape[2](quantity = \"Length\", unit = \"m\") = cyl1.r_shape[2] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.r_shape[3](quantity = \"Length\", unit = \"m\") = cyl1.r_shape[3] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.extra = cyl1.innerDiameter / cyl1.diameter \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer cyl1.frameTranslation.color[1](min = 0, max = 255) = cyl1.color[1] \" Color of shape\";
//   input Integer cyl1.frameTranslation.color[2](min = 0, max = 255) = cyl1.color[2] \" Color of shape\";
//   input Integer cyl1.frameTranslation.color[3](min = 0, max = 255) = cyl1.color[3] \" Color of shape\";
//   input Real cyl1.frameTranslation.specularCoefficient = cyl1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real cyl1.frameTranslation.lengthDirection[1](unit = \"1\") = cyl1.lengthDirection[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.lengthDirection[2](unit = \"1\") = cyl1.lengthDirection[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.lengthDirection[3](unit = \"1\") = cyl1.lengthDirection[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real cyl1.frameTranslation.length(quantity = \"Length\", unit = \"m\") = cyl1.length \" Length of shape\";
//   parameter Real cyl1.frameTranslation.width(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl1.diameter \" Width of shape\";
//   parameter Real cyl1.frameTranslation.height(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl1.diameter \" Height of shape.\";
//   parameter String cyl1.frameTranslation.shape.shapeType = cyl1.frameTranslation.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real cyl1.frameTranslation.shape.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real cyl1.frameTranslation.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real cyl1.frameTranslation.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real cyl1.frameTranslation.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real cyl1.frameTranslation.shape.r[1](quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real cyl1.frameTranslation.shape.r[2](quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real cyl1.frameTranslation.shape.r[3](quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real cyl1.frameTranslation.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.lengthDirection[1](unit = \"1\") = cyl1.frameTranslation.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.lengthDirection[2](unit = \"1\") = cyl1.frameTranslation.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.lengthDirection[3](unit = \"1\") = cyl1.frameTranslation.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.widthDirection[1](unit = \"1\") = cyl1.frameTranslation.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.widthDirection[2](unit = \"1\") = cyl1.frameTranslation.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.widthDirection[3](unit = \"1\") = cyl1.frameTranslation.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real cyl1.frameTranslation.shape.length(quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.length \"Length of visual object\";
//   input Real cyl1.frameTranslation.shape.width(quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.width \"Width of visual object\";
//   input Real cyl1.frameTranslation.shape.height(quantity = \"Length\", unit = \"m\") = cyl1.frameTranslation.height \"Height of visual object\";
//   input Real cyl1.frameTranslation.shape.extra = cyl1.frameTranslation.extra \"Additional size data for some of the shape types\";
//   input Real cyl1.frameTranslation.shape.color[1] = Real(cyl1.frameTranslation.color[1]) \"Color of shape\";
//   input Real cyl1.frameTranslation.shape.color[2] = Real(cyl1.frameTranslation.color[2]) \"Color of shape\";
//   input Real cyl1.frameTranslation.shape.color[3] = Real(cyl1.frameTranslation.color[3]) \"Color of shape\";
//   input Real cyl1.frameTranslation.shape.specularCoefficient = cyl1.frameTranslation.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real cyl1.frameTranslation.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({cyl1.frameTranslation.shape.lengthDirection[1],cyl1.frameTranslation.shape.lengthDirection[2],cyl1.frameTranslation.shape.lengthDirection[3]});
//   protected Real cyl1.frameTranslation.shape.e_x[1](unit = \"1\") = if noEvent(cyl1.frameTranslation.shape.abs_n_x < 1e-010) then 1.0 else cyl1.frameTranslation.shape.lengthDirection[1] / cyl1.frameTranslation.shape.abs_n_x;
//   protected Real cyl1.frameTranslation.shape.e_x[2](unit = \"1\") = if noEvent(cyl1.frameTranslation.shape.abs_n_x < 1e-010) then 0.0 else cyl1.frameTranslation.shape.lengthDirection[2] / cyl1.frameTranslation.shape.abs_n_x;
//   protected Real cyl1.frameTranslation.shape.e_x[3](unit = \"1\") = if noEvent(cyl1.frameTranslation.shape.abs_n_x < 1e-010) then 0.0 else cyl1.frameTranslation.shape.lengthDirection[3] / cyl1.frameTranslation.shape.abs_n_x;
//   protected Real cyl1.frameTranslation.shape.n_z_aux[1](unit = \"1\") = cyl1.frameTranslation.shape.e_x[2] * cyl1.frameTranslation.shape.widthDirection[3] - cyl1.frameTranslation.shape.e_x[3] * cyl1.frameTranslation.shape.widthDirection[2];
//   protected Real cyl1.frameTranslation.shape.n_z_aux[2](unit = \"1\") = cyl1.frameTranslation.shape.e_x[3] * cyl1.frameTranslation.shape.widthDirection[1] - cyl1.frameTranslation.shape.e_x[1] * cyl1.frameTranslation.shape.widthDirection[3];
//   protected Real cyl1.frameTranslation.shape.n_z_aux[3](unit = \"1\") = cyl1.frameTranslation.shape.e_x[1] * cyl1.frameTranslation.shape.widthDirection[2] - cyl1.frameTranslation.shape.e_x[2] * cyl1.frameTranslation.shape.widthDirection[1];
//   protected Real cyl1.frameTranslation.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({cyl1.frameTranslation.shape.e_x[1],cyl1.frameTranslation.shape.e_x[2],cyl1.frameTranslation.shape.e_x[3]},if noEvent(cyl1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (cyl1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + cyl1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {cyl1.frameTranslation.shape.widthDirection[1],cyl1.frameTranslation.shape.widthDirection[2],cyl1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(cyl1.frameTranslation.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{cyl1.frameTranslation.shape.e_x[1],cyl1.frameTranslation.shape.e_x[2],cyl1.frameTranslation.shape.e_x[3]})[1];
//   protected Real cyl1.frameTranslation.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({cyl1.frameTranslation.shape.e_x[1],cyl1.frameTranslation.shape.e_x[2],cyl1.frameTranslation.shape.e_x[3]},if noEvent(cyl1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (cyl1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + cyl1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {cyl1.frameTranslation.shape.widthDirection[1],cyl1.frameTranslation.shape.widthDirection[2],cyl1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(cyl1.frameTranslation.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{cyl1.frameTranslation.shape.e_x[1],cyl1.frameTranslation.shape.e_x[2],cyl1.frameTranslation.shape.e_x[3]})[2];
//   protected Real cyl1.frameTranslation.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({cyl1.frameTranslation.shape.e_x[1],cyl1.frameTranslation.shape.e_x[2],cyl1.frameTranslation.shape.e_x[3]},if noEvent(cyl1.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (cyl1.frameTranslation.shape.n_z_aux[2] ^ 2.0 + cyl1.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {cyl1.frameTranslation.shape.widthDirection[1],cyl1.frameTranslation.shape.widthDirection[2],cyl1.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(cyl1.frameTranslation.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{cyl1.frameTranslation.shape.e_x[1],cyl1.frameTranslation.shape.e_x[2],cyl1.frameTranslation.shape.e_x[3]})[3];
//   protected output Real cyl1.frameTranslation.shape.Form;
//   output Real cyl1.frameTranslation.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real cyl1.frameTranslation.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real cyl1.frameTranslation.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real cyl1.frameTranslation.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real cyl1.frameTranslation.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real cyl1.frameTranslation.shape.Material;
//   protected output Real cyl1.frameTranslation.shape.Extra;
//   Real cyl2.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean cyl2.animation = true \"= true, if animation shall be enabled (show cylinder between frame_a and frame_b)\";
//   parameter Real cyl2.r[1](quantity = \"Length\", unit = \"m\", start = 0.1) = 0.4 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real cyl2.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real cyl2.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real cyl2.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real cyl2.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real cyl2.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real cyl2.innerDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0 \"Inner diameter of cylinder (0 <= innerDiameter <= Diameter)\";
//   parameter Real cyl2.density(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7700.0 \"Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)\";
//   input Integer cyl2.color[1](min = 0, max = 255) = 0 \"Color of cylinder\";
//   input Integer cyl2.color[2](min = 0, max = 255) = 128 \"Color of cylinder\";
//   input Integer cyl2.color[3](min = 0, max = 255) = 255 \"Color of cylinder\";
//   input Real cyl2.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   Real cyl2.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl2.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl2.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl2.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl2.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl2.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl2.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl2.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl2.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean cyl2.angles_fixed = false \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real cyl2.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl2.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl2.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer cyl2.sequence_start[1](min = 1, max = 3) = 1 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl2.sequence_start[2](min = 1, max = 3) = 2 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl2.sequence_start[3](min = 1, max = 3) = 3 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean cyl2.w_0_fixed = false \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real cyl2.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl2.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl2.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean cyl2.z_0_fixed = false \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real cyl2.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl2.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl2.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Boolean cyl2.enforceStates = false \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean cyl2.useQuaternions = true \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer cyl2.sequence_angleStates[1](min = 1, max = 3) = 1 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl2.sequence_angleStates[2](min = 1, max = 3) = 2 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl2.sequence_angleStates[3](min = 1, max = 3) = 3 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   constant Real cyl2.pi = 3.14159265358979;
//   final parameter Real cyl2.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl2.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl2.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real cyl2.lengthDirection[1](unit = \"1\") = cyl2.r[1] - cyl2.r_shape[1] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real cyl2.lengthDirection[2](unit = \"1\") = cyl2.r[2] - cyl2.r_shape[2] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real cyl2.lengthDirection[3](unit = \"1\") = cyl2.r[3] - cyl2.r_shape[3] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real cyl2.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({cyl2.r[1] - cyl2.r_shape[1],cyl2.r[2] - cyl2.r_shape[2],cyl2.r[3] - cyl2.r_shape[3]}) \"Length of cylinder\";
//   final parameter Real cyl2.innerRadius(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl2.innerDiameter / 2.0 \"Inner-Radius of cylinder\";
//   parameter Real cyl2.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.2 \"Diameter of cylinder\";
//   final parameter Real cyl2.r_CM[1](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({cyl2.r[1],cyl2.r[2],cyl2.r[3]},1e-013) * cyl2.length) / 2.0)[1] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real cyl2.r_CM[2](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({cyl2.r[1],cyl2.r[2],cyl2.r[3]},1e-013) * cyl2.length) / 2.0)[2] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real cyl2.r_CM[3](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({cyl2.r[1],cyl2.r[2],cyl2.r[3]},1e-013) * cyl2.length) / 2.0)[3] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real cyl2.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.14159265358979 * (cyl2.density * (cyl2.length * cyl2.innerRadius ^ 2.0)) \"Mass of hole of cylinder\";
//   final parameter Real cyl2.radius(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl2.diameter / 2.0 \"Radius of cylinder\";
//   final parameter Real cyl2.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.14159265358979 * (cyl2.density * (cyl2.length * cyl2.radius ^ 2.0)) \"Mass of cylinder without hole\";
//   final parameter Real cyl2.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.mo * (cyl2.length ^ 2.0 / 12.0 + 0.25 * cyl2.radius ^ 2.0) - cyl2.mi * (cyl2.length ^ 2.0 / 12.0 + 0.25 * cyl2.innerRadius ^ 2.0) \"Inertia with respect to axis through center of mass, perpendicular to cylinder axis\";
//   final parameter Real cyl2.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = cyl2.mo - cyl2.mi \"Mass of cylinder\";
//   final parameter Real cyl2.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[1,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[1,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[1,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[2,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[2,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[2,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[3,1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[3,2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real cyl2.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(cyl2.R,{{(cyl2.mo * cyl2.radius ^ 2.0) / 2.0 + ((-cyl2.mi) * cyl2.innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,cyl2.I22,0.0},{0.0,0.0,cyl2.I22}})[3,3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   Real cyl2.body.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.body.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.body.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.body.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.body.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.body.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.body.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean cyl2.body.animation = false \"= true, if animation shall be enabled (show cylinder and sphere)\";
//   parameter Real cyl2.body.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl2.r_CM[1] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real cyl2.body.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl2.r_CM[2] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real cyl2.body.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl2.r_CM[3] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real cyl2.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = cyl2.m \"Mass of rigid body\";
//   parameter Real cyl2.body.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = cyl2.I[1,1] \" (1,1) element of inertia tensor\";
//   parameter Real cyl2.body.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = cyl2.I[2,2] \" (2,2) element of inertia tensor\";
//   parameter Real cyl2.body.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = cyl2.I[3,3] \" (3,3) element of inertia tensor\";
//   parameter Real cyl2.body.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+060) = cyl2.I[2,1] \" (2,1) element of inertia tensor\";
//   parameter Real cyl2.body.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+060) = cyl2.I[3,1] \" (3,1) element of inertia tensor\";
//   parameter Real cyl2.body.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+060) = cyl2.I[3,2] \" (3,2) element of inertia tensor\";
//   Real cyl2.body.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl2.body.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl2.body.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real cyl2.body.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl2.body.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl2.body.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real cyl2.body.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl2.body.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real cyl2.body.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean cyl2.body.angles_fixed = cyl2.angles_fixed \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real cyl2.body.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = cyl2.angles_start[1] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl2.body.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = cyl2.angles_start[2] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real cyl2.body.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = cyl2.angles_start[3] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer cyl2.body.sequence_start[1](min = 1, max = 3) = cyl2.sequence_start[1] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl2.body.sequence_start[2](min = 1, max = 3) = cyl2.sequence_start[2] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer cyl2.body.sequence_start[3](min = 1, max = 3) = cyl2.sequence_start[3] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean cyl2.body.w_0_fixed = cyl2.w_0_fixed \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real cyl2.body.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = cyl2.w_0_start[1] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl2.body.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = cyl2.w_0_start[2] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real cyl2.body.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = cyl2.w_0_start[3] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean cyl2.body.z_0_fixed = cyl2.z_0_fixed \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real cyl2.body.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = cyl2.z_0_start[1] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl2.body.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = cyl2.z_0_start[2] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl2.body.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = cyl2.z_0_start[3] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real cyl2.body.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultBodyDiameter \"Diameter of sphere\";
//   input Integer cyl2.body.sphereColor[1](min = 0, max = 255) = 0 \"Color of sphere\";
//   input Integer cyl2.body.sphereColor[2](min = 0, max = 255) = 128 \"Color of sphere\";
//   input Integer cyl2.body.sphereColor[3](min = 0, max = 255) = 255 \"Color of sphere\";
//   input Integer cyl2.body.cylinderColor[1](min = 0, max = 255) = cyl2.body.sphereColor[1] \"Color of cylinder\";
//   input Integer cyl2.body.cylinderColor[2](min = 0, max = 255) = cyl2.body.sphereColor[2] \"Color of cylinder\";
//   input Integer cyl2.body.cylinderColor[3](min = 0, max = 255) = cyl2.body.sphereColor[3] \"Color of cylinder\";
//   input Real cyl2.body.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean cyl2.body.enforceStates = cyl2.enforceStates \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean cyl2.body.useQuaternions = cyl2.useQuaternions \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer cyl2.body.sequence_angleStates[1](min = 1, max = 3) = cyl2.sequence_angleStates[1] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl2.body.sequence_angleStates[2](min = 1, max = 3) = cyl2.sequence_angleStates[2] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer cyl2.body.sequence_angleStates[3](min = 1, max = 3) = cyl2.sequence_angleStates[3] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real cyl2.body.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.w_0_start[1],cyl2.body.w_0_start[2],cyl2.body.w_0_start[3]})[1], fixed = cyl2.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real cyl2.body.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.w_0_start[1],cyl2.body.w_0_start[2],cyl2.body.w_0_start[3]})[2], fixed = cyl2.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real cyl2.body.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.w_0_start[1],cyl2.body.w_0_start[2],cyl2.body.w_0_start[3]})[3], fixed = cyl2.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real cyl2.body.g_0[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real cyl2.body.g_0[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real cyl2.body.g_0[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   protected Real cyl2.body.Q[1](start = cyl2.body.Q_start[1], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real cyl2.body.Q[2](start = cyl2.body.Q_start[2], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real cyl2.body.Q[3](start = cyl2.body.Q_start[3], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real cyl2.body.Q[4](start = cyl2.body.Q_start[4], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected parameter Real cyl2.body.phi_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if cyl2.body.sequence_start[1] == cyl2.body.sequence_angleStates[1] and cyl2.body.sequence_start[2] == cyl2.body.sequence_angleStates[2] and cyl2.body.sequence_start[3] == cyl2.body.sequence_angleStates[3] then cyl2.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(cyl2.body.R_start,{cyl2.body.sequence_angleStates[1],cyl2.body.sequence_angleStates[2],cyl2.body.sequence_angleStates[3]},0)[1] \"Potential angle states at initial time\";
//   protected parameter Real cyl2.body.phi_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if cyl2.body.sequence_start[1] == cyl2.body.sequence_angleStates[1] and cyl2.body.sequence_start[2] == cyl2.body.sequence_angleStates[2] and cyl2.body.sequence_start[3] == cyl2.body.sequence_angleStates[3] then cyl2.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(cyl2.body.R_start,{cyl2.body.sequence_angleStates[1],cyl2.body.sequence_angleStates[2],cyl2.body.sequence_angleStates[3]},0)[2] \"Potential angle states at initial time\";
//   protected parameter Real cyl2.body.phi_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if cyl2.body.sequence_start[1] == cyl2.body.sequence_angleStates[1] and cyl2.body.sequence_start[2] == cyl2.body.sequence_angleStates[2] and cyl2.body.sequence_start[3] == cyl2.body.sequence_angleStates[3] then cyl2.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(cyl2.body.R_start,{cyl2.body.sequence_angleStates[1],cyl2.body.sequence_angleStates[2],cyl2.body.sequence_angleStates[3]},0)[3] \"Potential angle states at initial time\";
//   protected Real cyl2.body.phi[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = cyl2.body.phi_start[1], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real cyl2.body.phi[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = cyl2.body.phi_start[2], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real cyl2.body.phi[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = cyl2.body.phi_start[3], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real cyl2.body.phi_d[1](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real cyl2.body.phi_d[2](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real cyl2.body.phi_d[3](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real cyl2.body.phi_dd[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real cyl2.body.phi_dd[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real cyl2.body.phi_dd[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   final parameter Real cyl2.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_11 \"inertia tensor\";
//   final parameter Real cyl2.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_21 \"inertia tensor\";
//   final parameter Real cyl2.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_31 \"inertia tensor\";
//   final parameter Real cyl2.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_21 \"inertia tensor\";
//   final parameter Real cyl2.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_22 \"inertia tensor\";
//   final parameter Real cyl2.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_32 \"inertia tensor\";
//   final parameter Real cyl2.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_31 \"inertia tensor\";
//   final parameter Real cyl2.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_32 \"inertia tensor\";
//   final parameter Real cyl2.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = cyl2.body.I_33 \"inertia tensor\";
//   final parameter Real cyl2.body.R_start.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real cyl2.body.R_start.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl2.body.R_start.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real cyl2.body.R_start.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real cyl2.body.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl2.body.sphereDiameter / 3.0 \"Diameter of cylinder\";
//   final parameter Real cyl2.body.z_a_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.z_0_start[1],cyl2.body.z_0_start[2],cyl2.body.z_0_start[3]})[1] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real cyl2.body.z_a_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.z_0_start[1],cyl2.body.z_0_start[2],cyl2.body.z_0_start[3]})[2] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real cyl2.body.z_a_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.z_0_start[1],cyl2.body.z_0_start[2],cyl2.body.z_0_start[3]})[3] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   Real cyl2.body.z_a[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.z_0_start[1],cyl2.body.z_0_start[2],cyl2.body.z_0_start[3]})[1], fixed = cyl2.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real cyl2.body.z_a[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.z_0_start[1],cyl2.body.z_0_start[2],cyl2.body.z_0_start[3]})[2], fixed = cyl2.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real cyl2.body.z_a[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.R_start,{cyl2.body.z_0_start[1],cyl2.body.z_0_start[2],cyl2.body.z_0_start[3]})[3], fixed = cyl2.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   protected parameter Real cyl2.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl2.body.R_start,{0.0,0.0,0.0,1.0})[1] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real cyl2.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl2.body.R_start,{0.0,0.0,0.0,1.0})[2] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real cyl2.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl2.body.R_start,{0.0,0.0,0.0,1.0})[3] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real cyl2.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(cyl2.body.R_start,{0.0,0.0,0.0,1.0})[4] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   Real cyl2.frameTranslation.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frameTranslation.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frameTranslation.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frameTranslation.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frameTranslation.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frameTranslation.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frameTranslation.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real cyl2.frameTranslation.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frameTranslation.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frameTranslation.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real cyl2.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real cyl2.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean cyl2.frameTranslation.animation = cyl2.animation \"= true, if animation shall be enabled\";
//   parameter Real cyl2.frameTranslation.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl2.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl2.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = cyl2.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String cyl2.frameTranslation.shapeType = \"pipecylinder\" \" Type of shape\";
//   parameter Real cyl2.frameTranslation.r_shape[1](quantity = \"Length\", unit = \"m\") = cyl2.r_shape[1] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.r_shape[2](quantity = \"Length\", unit = \"m\") = cyl2.r_shape[2] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.r_shape[3](quantity = \"Length\", unit = \"m\") = cyl2.r_shape[3] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.extra = cyl2.innerDiameter / cyl2.diameter \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer cyl2.frameTranslation.color[1](min = 0, max = 255) = cyl2.color[1] \" Color of shape\";
//   input Integer cyl2.frameTranslation.color[2](min = 0, max = 255) = cyl2.color[2] \" Color of shape\";
//   input Integer cyl2.frameTranslation.color[3](min = 0, max = 255) = cyl2.color[3] \" Color of shape\";
//   input Real cyl2.frameTranslation.specularCoefficient = cyl2.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real cyl2.frameTranslation.lengthDirection[1](unit = \"1\") = cyl2.lengthDirection[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.lengthDirection[2](unit = \"1\") = cyl2.lengthDirection[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.lengthDirection[3](unit = \"1\") = cyl2.lengthDirection[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real cyl2.frameTranslation.length(quantity = \"Length\", unit = \"m\") = cyl2.length \" Length of shape\";
//   parameter Real cyl2.frameTranslation.width(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl2.diameter \" Width of shape\";
//   parameter Real cyl2.frameTranslation.height(quantity = \"Length\", unit = \"m\", min = 0.0) = cyl2.diameter \" Height of shape.\";
//   parameter String cyl2.frameTranslation.shape.shapeType = cyl2.frameTranslation.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real cyl2.frameTranslation.shape.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real cyl2.frameTranslation.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real cyl2.frameTranslation.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real cyl2.frameTranslation.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real cyl2.frameTranslation.shape.r[1](quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real cyl2.frameTranslation.shape.r[2](quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real cyl2.frameTranslation.shape.r[3](quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real cyl2.frameTranslation.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.lengthDirection[1](unit = \"1\") = cyl2.frameTranslation.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.lengthDirection[2](unit = \"1\") = cyl2.frameTranslation.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.lengthDirection[3](unit = \"1\") = cyl2.frameTranslation.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.widthDirection[1](unit = \"1\") = cyl2.frameTranslation.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.widthDirection[2](unit = \"1\") = cyl2.frameTranslation.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.widthDirection[3](unit = \"1\") = cyl2.frameTranslation.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real cyl2.frameTranslation.shape.length(quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.length \"Length of visual object\";
//   input Real cyl2.frameTranslation.shape.width(quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.width \"Width of visual object\";
//   input Real cyl2.frameTranslation.shape.height(quantity = \"Length\", unit = \"m\") = cyl2.frameTranslation.height \"Height of visual object\";
//   input Real cyl2.frameTranslation.shape.extra = cyl2.frameTranslation.extra \"Additional size data for some of the shape types\";
//   input Real cyl2.frameTranslation.shape.color[1] = Real(cyl2.frameTranslation.color[1]) \"Color of shape\";
//   input Real cyl2.frameTranslation.shape.color[2] = Real(cyl2.frameTranslation.color[2]) \"Color of shape\";
//   input Real cyl2.frameTranslation.shape.color[3] = Real(cyl2.frameTranslation.color[3]) \"Color of shape\";
//   input Real cyl2.frameTranslation.shape.specularCoefficient = cyl2.frameTranslation.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real cyl2.frameTranslation.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({cyl2.frameTranslation.shape.lengthDirection[1],cyl2.frameTranslation.shape.lengthDirection[2],cyl2.frameTranslation.shape.lengthDirection[3]});
//   protected Real cyl2.frameTranslation.shape.e_x[1](unit = \"1\") = if noEvent(cyl2.frameTranslation.shape.abs_n_x < 1e-010) then 1.0 else cyl2.frameTranslation.shape.lengthDirection[1] / cyl2.frameTranslation.shape.abs_n_x;
//   protected Real cyl2.frameTranslation.shape.e_x[2](unit = \"1\") = if noEvent(cyl2.frameTranslation.shape.abs_n_x < 1e-010) then 0.0 else cyl2.frameTranslation.shape.lengthDirection[2] / cyl2.frameTranslation.shape.abs_n_x;
//   protected Real cyl2.frameTranslation.shape.e_x[3](unit = \"1\") = if noEvent(cyl2.frameTranslation.shape.abs_n_x < 1e-010) then 0.0 else cyl2.frameTranslation.shape.lengthDirection[3] / cyl2.frameTranslation.shape.abs_n_x;
//   protected Real cyl2.frameTranslation.shape.n_z_aux[1](unit = \"1\") = cyl2.frameTranslation.shape.e_x[2] * cyl2.frameTranslation.shape.widthDirection[3] - cyl2.frameTranslation.shape.e_x[3] * cyl2.frameTranslation.shape.widthDirection[2];
//   protected Real cyl2.frameTranslation.shape.n_z_aux[2](unit = \"1\") = cyl2.frameTranslation.shape.e_x[3] * cyl2.frameTranslation.shape.widthDirection[1] - cyl2.frameTranslation.shape.e_x[1] * cyl2.frameTranslation.shape.widthDirection[3];
//   protected Real cyl2.frameTranslation.shape.n_z_aux[3](unit = \"1\") = cyl2.frameTranslation.shape.e_x[1] * cyl2.frameTranslation.shape.widthDirection[2] - cyl2.frameTranslation.shape.e_x[2] * cyl2.frameTranslation.shape.widthDirection[1];
//   protected Real cyl2.frameTranslation.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({cyl2.frameTranslation.shape.e_x[1],cyl2.frameTranslation.shape.e_x[2],cyl2.frameTranslation.shape.e_x[3]},if noEvent(cyl2.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (cyl2.frameTranslation.shape.n_z_aux[2] ^ 2.0 + cyl2.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {cyl2.frameTranslation.shape.widthDirection[1],cyl2.frameTranslation.shape.widthDirection[2],cyl2.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(cyl2.frameTranslation.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{cyl2.frameTranslation.shape.e_x[1],cyl2.frameTranslation.shape.e_x[2],cyl2.frameTranslation.shape.e_x[3]})[1];
//   protected Real cyl2.frameTranslation.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({cyl2.frameTranslation.shape.e_x[1],cyl2.frameTranslation.shape.e_x[2],cyl2.frameTranslation.shape.e_x[3]},if noEvent(cyl2.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (cyl2.frameTranslation.shape.n_z_aux[2] ^ 2.0 + cyl2.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {cyl2.frameTranslation.shape.widthDirection[1],cyl2.frameTranslation.shape.widthDirection[2],cyl2.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(cyl2.frameTranslation.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{cyl2.frameTranslation.shape.e_x[1],cyl2.frameTranslation.shape.e_x[2],cyl2.frameTranslation.shape.e_x[3]})[2];
//   protected Real cyl2.frameTranslation.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({cyl2.frameTranslation.shape.e_x[1],cyl2.frameTranslation.shape.e_x[2],cyl2.frameTranslation.shape.e_x[3]},if noEvent(cyl2.frameTranslation.shape.n_z_aux[1] ^ 2.0 + (cyl2.frameTranslation.shape.n_z_aux[2] ^ 2.0 + cyl2.frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {cyl2.frameTranslation.shape.widthDirection[1],cyl2.frameTranslation.shape.widthDirection[2],cyl2.frameTranslation.shape.widthDirection[3]} else if noEvent(abs(cyl2.frameTranslation.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{cyl2.frameTranslation.shape.e_x[1],cyl2.frameTranslation.shape.e_x[2],cyl2.frameTranslation.shape.e_x[3]})[3];
//   protected output Real cyl2.frameTranslation.shape.Form;
//   output Real cyl2.frameTranslation.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real cyl2.frameTranslation.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real cyl2.frameTranslation.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real cyl2.frameTranslation.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real cyl2.frameTranslation.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real cyl2.frameTranslation.shape.Material;
//   protected output Real cyl2.frameTranslation.shape.Extra;
//   Real torque1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real torque1.torque[1](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque1.torque[2](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque1.torque[3](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   parameter Boolean torque1.animation = true \"= true, if animation shall be enabled\";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) torque1.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_b \"Frame in which input force is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)\";
//   parameter Real torque1.Nm_to_m(unit = \"N.m/m\") = world.defaultNm_to_m \" Torque arrow scaling (length = torque/Nm_to_m)\";
//   input Real torque1.torqueDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultArrowDiameter \" Diameter of torque arrow\";
//   input Real torque1.connectionLineDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = torque1.torqueDiameter \" Diameter of line connecting frame_a and frame_b\";
//   input Integer torque1.torqueColor[1](min = 0, max = 255) = 0 \" Color of torque arrow\";
//   input Integer torque1.torqueColor[2](min = 0, max = 255) = 128 \" Color of torque arrow\";
//   input Integer torque1.torqueColor[3](min = 0, max = 255) = 0 \" Color of torque arrow\";
//   input Integer torque1.connectionLineColor[1](min = 0, max = 255) = 255 \" Color of line connecting frame_a and frame_b\";
//   input Integer torque1.connectionLineColor[2](min = 0, max = 255) = 255 \" Color of line connecting frame_a and frame_b\";
//   input Integer torque1.connectionLineColor[3](min = 0, max = 255) = 0 \" Color of line connecting frame_a and frame_b\";
//   input Real torque1.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque1.t_in_m[1](quantity = \"Length\", unit = \"m\") = torque1.frame_b.t[1] / torque1.Nm_to_m \"Torque mapped from Nm to m for animation\";
//   protected Real torque1.t_in_m[2](quantity = \"Length\", unit = \"m\") = torque1.frame_b.t[2] / torque1.Nm_to_m \"Torque mapped from Nm to m for animation\";
//   protected Real torque1.t_in_m[3](quantity = \"Length\", unit = \"m\") = torque1.frame_b.t[3] / torque1.Nm_to_m \"Torque mapped from Nm to m for animation\";
//   Real torque1.basicTorque.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_resolve.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_resolve.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_resolve.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.basicTorque.frame_resolve.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_resolve.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_resolve.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.basicTorque.frame_resolve.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_resolve.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_resolve.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.basicTorque.frame_resolve.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_resolve.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.basicTorque.frame_resolve.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real torque1.basicTorque.torque[1](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque1.basicTorque.torque[2](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque1.basicTorque.torque[3](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) torque1.basicTorque.resolveInFrame = torque1.resolveInFrame \"Frame in which torque is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)\";
//   Real torque1.basicTorque.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from origin of frame_a to origin of frame_b resolved in world frame\";
//   Real torque1.basicTorque.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from origin of frame_a to origin of frame_b resolved in world frame\";
//   Real torque1.basicTorque.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from origin of frame_a to origin of frame_b resolved in world frame\";
//   Real torque1.basicTorque.t_b_0[1](quantity = \"Torque\", unit = \"N.m\") \"frame_b.t resoved in world frame\";
//   Real torque1.basicTorque.t_b_0[2](quantity = \"Torque\", unit = \"N.m\") \"frame_b.t resoved in world frame\";
//   Real torque1.basicTorque.t_b_0[3](quantity = \"Torque\", unit = \"N.m\") \"frame_b.t resoved in world frame\";
//   Real torque1.zeroPosition.frame_resolve.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.zeroPosition.frame_resolve.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.zeroPosition.frame_resolve.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.zeroPosition.frame_resolve.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque1.zeroPosition.frame_resolve.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.zeroPosition.frame_resolve.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.zeroPosition.frame_resolve.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque1.zeroPosition.frame_resolve.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.zeroPosition.frame_resolve.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque1.zeroPosition.frame_resolve.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real torque1.torqueArrow.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.r[1](quantity = \"Length\", unit = \"m\") = torque1.frame_b.r_0[1] \"Position vector from origin of world frame to origin of arrow frame, resolved in world frame\";
//   input Real torque1.torqueArrow.r[2](quantity = \"Length\", unit = \"m\") = torque1.frame_b.r_0[2] \"Position vector from origin of world frame to origin of arrow frame, resolved in world frame\";
//   input Real torque1.torqueArrow.r[3](quantity = \"Length\", unit = \"m\") = torque1.frame_b.r_0[3] \"Position vector from origin of world frame to origin of arrow frame, resolved in world frame\";
//   input Real torque1.torqueArrow.r_tail[1](quantity = \"Length\", unit = \"m\") = torque1.t_in_m[1] \"Position vector from origin of arrow frame to double arrow tail, resolved in arrow frame\";
//   input Real torque1.torqueArrow.r_tail[2](quantity = \"Length\", unit = \"m\") = torque1.t_in_m[2] \"Position vector from origin of arrow frame to double arrow tail, resolved in arrow frame\";
//   input Real torque1.torqueArrow.r_tail[3](quantity = \"Length\", unit = \"m\") = torque1.t_in_m[3] \"Position vector from origin of arrow frame to double arrow tail, resolved in arrow frame\";
//   input Real torque1.torqueArrow.r_head[1](quantity = \"Length\", unit = \"m\") = -torque1.t_in_m[1] \"Position vector from double arrow tail to the head of the double arrow, resolved in arrow frame\";
//   input Real torque1.torqueArrow.r_head[2](quantity = \"Length\", unit = \"m\") = -torque1.t_in_m[2] \"Position vector from double arrow tail to the head of the double arrow, resolved in arrow frame\";
//   input Real torque1.torqueArrow.r_head[3](quantity = \"Length\", unit = \"m\") = -torque1.t_in_m[3] \"Position vector from double arrow tail to the head of the double arrow, resolved in arrow frame\";
//   input Real torque1.torqueArrow.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = torque1.torqueDiameter \"Diameter of arrow line\";
//   input Integer torque1.torqueArrow.color[1](min = 0, max = 255) = torque1.torqueColor[1] \"Color of double arrow\";
//   input Integer torque1.torqueArrow.color[2](min = 0, max = 255) = torque1.torqueColor[2] \"Color of double arrow\";
//   input Integer torque1.torqueArrow.color[3](min = 0, max = 255) = torque1.torqueColor[3] \"Color of double arrow\";
//   input Real torque1.torqueArrow.specularCoefficient = torque1.specularCoefficient \"Material property describing the reflecting of ambient light (= 0 means, that light is completely absorbed)\";
//   protected Real torque1.torqueArrow.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({torque1.torqueArrow.r_head[1],torque1.torqueArrow.r_head[2],torque1.torqueArrow.r_head[3]}) \"Length of arrow\";
//   protected Real torque1.torqueArrow.headLength(quantity = \"Length\", unit = \"m\") = max(0.0,min(torque1.torqueArrow.length,4.0 * torque1.torqueArrow.diameter));
//   protected Real torque1.torqueArrow.headWidth(quantity = \"Length\", unit = \"m\") = max(0.0,3.0 * torque1.torqueArrow.diameter);
//   parameter String torque1.torqueArrow.arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque1.torqueArrow.arrowLine.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowLine.r[1](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.r[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowLine.r[2](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.r[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowLine.r[3](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.r[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.r_tail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.r_tail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.r_tail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.lengthDirection[1](unit = \"1\") = torque1.torqueArrow.r_head[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.lengthDirection[2](unit = \"1\") = torque1.torqueArrow.r_head[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.lengthDirection[3](unit = \"1\") = torque1.torqueArrow.r_head[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowLine.length(quantity = \"Length\", unit = \"m\") = max(0.0,torque1.torqueArrow.length + -6.0 * torque1.torqueArrow.diameter) \"Length of visual object\";
//   input Real torque1.torqueArrow.arrowLine.width(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.diameter \"Width of visual object\";
//   input Real torque1.torqueArrow.arrowLine.height(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.diameter \"Height of visual object\";
//   input Real torque1.torqueArrow.arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque1.torqueArrow.arrowLine.color[1] = Real(torque1.torqueArrow.color[1]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowLine.color[2] = Real(torque1.torqueArrow.color[2]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowLine.color[3] = Real(torque1.torqueArrow.color[3]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowLine.specularCoefficient = torque1.torqueArrow.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque1.torqueArrow.arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque1.torqueArrow.arrowLine.lengthDirection[1],torque1.torqueArrow.arrowLine.lengthDirection[2],torque1.torqueArrow.arrowLine.lengthDirection[3]});
//   protected Real torque1.torqueArrow.arrowLine.e_x[1](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowLine.abs_n_x < 1e-010) then 1.0 else torque1.torqueArrow.arrowLine.lengthDirection[1] / torque1.torqueArrow.arrowLine.abs_n_x;
//   protected Real torque1.torqueArrow.arrowLine.e_x[2](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowLine.abs_n_x < 1e-010) then 0.0 else torque1.torqueArrow.arrowLine.lengthDirection[2] / torque1.torqueArrow.arrowLine.abs_n_x;
//   protected Real torque1.torqueArrow.arrowLine.e_x[3](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowLine.abs_n_x < 1e-010) then 0.0 else torque1.torqueArrow.arrowLine.lengthDirection[3] / torque1.torqueArrow.arrowLine.abs_n_x;
//   protected Real torque1.torqueArrow.arrowLine.n_z_aux[1](unit = \"1\") = torque1.torqueArrow.arrowLine.e_x[2] * torque1.torqueArrow.arrowLine.widthDirection[3] - torque1.torqueArrow.arrowLine.e_x[3] * torque1.torqueArrow.arrowLine.widthDirection[2];
//   protected Real torque1.torqueArrow.arrowLine.n_z_aux[2](unit = \"1\") = torque1.torqueArrow.arrowLine.e_x[3] * torque1.torqueArrow.arrowLine.widthDirection[1] - torque1.torqueArrow.arrowLine.e_x[1] * torque1.torqueArrow.arrowLine.widthDirection[3];
//   protected Real torque1.torqueArrow.arrowLine.n_z_aux[3](unit = \"1\") = torque1.torqueArrow.arrowLine.e_x[1] * torque1.torqueArrow.arrowLine.widthDirection[2] - torque1.torqueArrow.arrowLine.e_x[2] * torque1.torqueArrow.arrowLine.widthDirection[1];
//   protected Real torque1.torqueArrow.arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowLine.e_x[1],torque1.torqueArrow.arrowLine.e_x[2],torque1.torqueArrow.arrowLine.e_x[3]},if noEvent(torque1.torqueArrow.arrowLine.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowLine.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowLine.widthDirection[1],torque1.torqueArrow.arrowLine.widthDirection[2],torque1.torqueArrow.arrowLine.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowLine.e_x[1],torque1.torqueArrow.arrowLine.e_x[2],torque1.torqueArrow.arrowLine.e_x[3]})[1];
//   protected Real torque1.torqueArrow.arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowLine.e_x[1],torque1.torqueArrow.arrowLine.e_x[2],torque1.torqueArrow.arrowLine.e_x[3]},if noEvent(torque1.torqueArrow.arrowLine.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowLine.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowLine.widthDirection[1],torque1.torqueArrow.arrowLine.widthDirection[2],torque1.torqueArrow.arrowLine.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowLine.e_x[1],torque1.torqueArrow.arrowLine.e_x[2],torque1.torqueArrow.arrowLine.e_x[3]})[2];
//   protected Real torque1.torqueArrow.arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowLine.e_x[1],torque1.torqueArrow.arrowLine.e_x[2],torque1.torqueArrow.arrowLine.e_x[3]},if noEvent(torque1.torqueArrow.arrowLine.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowLine.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowLine.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowLine.widthDirection[1],torque1.torqueArrow.arrowLine.widthDirection[2],torque1.torqueArrow.arrowLine.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowLine.e_x[1],torque1.torqueArrow.arrowLine.e_x[2],torque1.torqueArrow.arrowLine.e_x[3]})[3];
//   protected output Real torque1.torqueArrow.arrowLine.Form;
//   output Real torque1.torqueArrow.arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque1.torqueArrow.arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowLine.Material;
//   protected output Real torque1.torqueArrow.arrowLine.Extra;
//   parameter String torque1.torqueArrow.arrowHead1.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowHead1.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowHead1.r[1](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.arrowLine.rvisobj[1] + torque1.torqueArrow.arrowLine.length * torque1.torqueArrow.arrowLine.rxvisobj[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowHead1.r[2](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.arrowLine.rvisobj[2] + torque1.torqueArrow.arrowLine.length * torque1.torqueArrow.arrowLine.rxvisobj[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowHead1.r[3](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.arrowLine.rvisobj[3] + torque1.torqueArrow.arrowLine.length * torque1.torqueArrow.arrowLine.rxvisobj[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowHead1.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.lengthDirection[1](unit = \"1\") = torque1.torqueArrow.r_head[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.lengthDirection[2](unit = \"1\") = torque1.torqueArrow.r_head[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.lengthDirection[3](unit = \"1\") = torque1.torqueArrow.r_head[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead1.length(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.headLength \"Length of visual object\";
//   input Real torque1.torqueArrow.arrowHead1.width(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.headWidth \"Width of visual object\";
//   input Real torque1.torqueArrow.arrowHead1.height(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.headWidth \"Height of visual object\";
//   input Real torque1.torqueArrow.arrowHead1.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque1.torqueArrow.arrowHead1.color[1] = Real(torque1.torqueArrow.color[1]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowHead1.color[2] = Real(torque1.torqueArrow.color[2]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowHead1.color[3] = Real(torque1.torqueArrow.color[3]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowHead1.specularCoefficient = torque1.torqueArrow.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque1.torqueArrow.arrowHead1.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque1.torqueArrow.arrowHead1.lengthDirection[1],torque1.torqueArrow.arrowHead1.lengthDirection[2],torque1.torqueArrow.arrowHead1.lengthDirection[3]});
//   protected Real torque1.torqueArrow.arrowHead1.e_x[1](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowHead1.abs_n_x < 1e-010) then 1.0 else torque1.torqueArrow.arrowHead1.lengthDirection[1] / torque1.torqueArrow.arrowHead1.abs_n_x;
//   protected Real torque1.torqueArrow.arrowHead1.e_x[2](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowHead1.abs_n_x < 1e-010) then 0.0 else torque1.torqueArrow.arrowHead1.lengthDirection[2] / torque1.torqueArrow.arrowHead1.abs_n_x;
//   protected Real torque1.torqueArrow.arrowHead1.e_x[3](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowHead1.abs_n_x < 1e-010) then 0.0 else torque1.torqueArrow.arrowHead1.lengthDirection[3] / torque1.torqueArrow.arrowHead1.abs_n_x;
//   protected Real torque1.torqueArrow.arrowHead1.n_z_aux[1](unit = \"1\") = torque1.torqueArrow.arrowHead1.e_x[2] * torque1.torqueArrow.arrowHead1.widthDirection[3] - torque1.torqueArrow.arrowHead1.e_x[3] * torque1.torqueArrow.arrowHead1.widthDirection[2];
//   protected Real torque1.torqueArrow.arrowHead1.n_z_aux[2](unit = \"1\") = torque1.torqueArrow.arrowHead1.e_x[3] * torque1.torqueArrow.arrowHead1.widthDirection[1] - torque1.torqueArrow.arrowHead1.e_x[1] * torque1.torqueArrow.arrowHead1.widthDirection[3];
//   protected Real torque1.torqueArrow.arrowHead1.n_z_aux[3](unit = \"1\") = torque1.torqueArrow.arrowHead1.e_x[1] * torque1.torqueArrow.arrowHead1.widthDirection[2] - torque1.torqueArrow.arrowHead1.e_x[2] * torque1.torqueArrow.arrowHead1.widthDirection[1];
//   protected Real torque1.torqueArrow.arrowHead1.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowHead1.e_x[1],torque1.torqueArrow.arrowHead1.e_x[2],torque1.torqueArrow.arrowHead1.e_x[3]},if noEvent(torque1.torqueArrow.arrowHead1.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowHead1.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowHead1.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowHead1.widthDirection[1],torque1.torqueArrow.arrowHead1.widthDirection[2],torque1.torqueArrow.arrowHead1.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowHead1.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowHead1.e_x[1],torque1.torqueArrow.arrowHead1.e_x[2],torque1.torqueArrow.arrowHead1.e_x[3]})[1];
//   protected Real torque1.torqueArrow.arrowHead1.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowHead1.e_x[1],torque1.torqueArrow.arrowHead1.e_x[2],torque1.torqueArrow.arrowHead1.e_x[3]},if noEvent(torque1.torqueArrow.arrowHead1.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowHead1.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowHead1.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowHead1.widthDirection[1],torque1.torqueArrow.arrowHead1.widthDirection[2],torque1.torqueArrow.arrowHead1.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowHead1.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowHead1.e_x[1],torque1.torqueArrow.arrowHead1.e_x[2],torque1.torqueArrow.arrowHead1.e_x[3]})[2];
//   protected Real torque1.torqueArrow.arrowHead1.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowHead1.e_x[1],torque1.torqueArrow.arrowHead1.e_x[2],torque1.torqueArrow.arrowHead1.e_x[3]},if noEvent(torque1.torqueArrow.arrowHead1.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowHead1.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowHead1.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowHead1.widthDirection[1],torque1.torqueArrow.arrowHead1.widthDirection[2],torque1.torqueArrow.arrowHead1.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowHead1.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowHead1.e_x[1],torque1.torqueArrow.arrowHead1.e_x[2],torque1.torqueArrow.arrowHead1.e_x[3]})[3];
//   protected output Real torque1.torqueArrow.arrowHead1.Form;
//   output Real torque1.torqueArrow.arrowHead1.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead1.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque1.torqueArrow.arrowHead1.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowHead1.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowHead1.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowHead1.Material;
//   protected output Real torque1.torqueArrow.arrowHead1.Extra;
//   parameter String torque1.torqueArrow.arrowHead2.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowHead2.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.torqueArrow.arrowHead2.r[1](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.arrowLine.rvisobj[1] + (torque1.torqueArrow.arrowLine.length + 0.5 * torque1.torqueArrow.arrowHead1.length) * torque1.torqueArrow.arrowLine.rxvisobj[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowHead2.r[2](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.arrowLine.rvisobj[2] + (torque1.torqueArrow.arrowLine.length + 0.5 * torque1.torqueArrow.arrowHead1.length) * torque1.torqueArrow.arrowLine.rxvisobj[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowHead2.r[3](quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.arrowLine.rvisobj[3] + (torque1.torqueArrow.arrowLine.length + 0.5 * torque1.torqueArrow.arrowHead1.length) * torque1.torqueArrow.arrowLine.rxvisobj[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.torqueArrow.arrowHead2.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.lengthDirection[1](unit = \"1\") = torque1.torqueArrow.r_head[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.lengthDirection[2](unit = \"1\") = torque1.torqueArrow.r_head[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.lengthDirection[3](unit = \"1\") = torque1.torqueArrow.r_head[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.torqueArrow.arrowHead2.length(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.headLength \"Length of visual object\";
//   input Real torque1.torqueArrow.arrowHead2.width(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.headWidth \"Width of visual object\";
//   input Real torque1.torqueArrow.arrowHead2.height(quantity = \"Length\", unit = \"m\") = torque1.torqueArrow.headWidth \"Height of visual object\";
//   input Real torque1.torqueArrow.arrowHead2.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque1.torqueArrow.arrowHead2.color[1] = Real(torque1.torqueArrow.color[1]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowHead2.color[2] = Real(torque1.torqueArrow.color[2]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowHead2.color[3] = Real(torque1.torqueArrow.color[3]) \"Color of shape\";
//   input Real torque1.torqueArrow.arrowHead2.specularCoefficient = torque1.torqueArrow.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque1.torqueArrow.arrowHead2.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque1.torqueArrow.arrowHead2.lengthDirection[1],torque1.torqueArrow.arrowHead2.lengthDirection[2],torque1.torqueArrow.arrowHead2.lengthDirection[3]});
//   protected Real torque1.torqueArrow.arrowHead2.e_x[1](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowHead2.abs_n_x < 1e-010) then 1.0 else torque1.torqueArrow.arrowHead2.lengthDirection[1] / torque1.torqueArrow.arrowHead2.abs_n_x;
//   protected Real torque1.torqueArrow.arrowHead2.e_x[2](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowHead2.abs_n_x < 1e-010) then 0.0 else torque1.torqueArrow.arrowHead2.lengthDirection[2] / torque1.torqueArrow.arrowHead2.abs_n_x;
//   protected Real torque1.torqueArrow.arrowHead2.e_x[3](unit = \"1\") = if noEvent(torque1.torqueArrow.arrowHead2.abs_n_x < 1e-010) then 0.0 else torque1.torqueArrow.arrowHead2.lengthDirection[3] / torque1.torqueArrow.arrowHead2.abs_n_x;
//   protected Real torque1.torqueArrow.arrowHead2.n_z_aux[1](unit = \"1\") = torque1.torqueArrow.arrowHead2.e_x[2] * torque1.torqueArrow.arrowHead2.widthDirection[3] - torque1.torqueArrow.arrowHead2.e_x[3] * torque1.torqueArrow.arrowHead2.widthDirection[2];
//   protected Real torque1.torqueArrow.arrowHead2.n_z_aux[2](unit = \"1\") = torque1.torqueArrow.arrowHead2.e_x[3] * torque1.torqueArrow.arrowHead2.widthDirection[1] - torque1.torqueArrow.arrowHead2.e_x[1] * torque1.torqueArrow.arrowHead2.widthDirection[3];
//   protected Real torque1.torqueArrow.arrowHead2.n_z_aux[3](unit = \"1\") = torque1.torqueArrow.arrowHead2.e_x[1] * torque1.torqueArrow.arrowHead2.widthDirection[2] - torque1.torqueArrow.arrowHead2.e_x[2] * torque1.torqueArrow.arrowHead2.widthDirection[1];
//   protected Real torque1.torqueArrow.arrowHead2.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowHead2.e_x[1],torque1.torqueArrow.arrowHead2.e_x[2],torque1.torqueArrow.arrowHead2.e_x[3]},if noEvent(torque1.torqueArrow.arrowHead2.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowHead2.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowHead2.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowHead2.widthDirection[1],torque1.torqueArrow.arrowHead2.widthDirection[2],torque1.torqueArrow.arrowHead2.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowHead2.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowHead2.e_x[1],torque1.torqueArrow.arrowHead2.e_x[2],torque1.torqueArrow.arrowHead2.e_x[3]})[1];
//   protected Real torque1.torqueArrow.arrowHead2.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowHead2.e_x[1],torque1.torqueArrow.arrowHead2.e_x[2],torque1.torqueArrow.arrowHead2.e_x[3]},if noEvent(torque1.torqueArrow.arrowHead2.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowHead2.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowHead2.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowHead2.widthDirection[1],torque1.torqueArrow.arrowHead2.widthDirection[2],torque1.torqueArrow.arrowHead2.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowHead2.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowHead2.e_x[1],torque1.torqueArrow.arrowHead2.e_x[2],torque1.torqueArrow.arrowHead2.e_x[3]})[2];
//   protected Real torque1.torqueArrow.arrowHead2.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.torqueArrow.arrowHead2.e_x[1],torque1.torqueArrow.arrowHead2.e_x[2],torque1.torqueArrow.arrowHead2.e_x[3]},if noEvent(torque1.torqueArrow.arrowHead2.n_z_aux[1] ^ 2.0 + (torque1.torqueArrow.arrowHead2.n_z_aux[2] ^ 2.0 + torque1.torqueArrow.arrowHead2.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.torqueArrow.arrowHead2.widthDirection[1],torque1.torqueArrow.arrowHead2.widthDirection[2],torque1.torqueArrow.arrowHead2.widthDirection[3]} else if noEvent(abs(torque1.torqueArrow.arrowHead2.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.torqueArrow.arrowHead2.e_x[1],torque1.torqueArrow.arrowHead2.e_x[2],torque1.torqueArrow.arrowHead2.e_x[3]})[3];
//   protected output Real torque1.torqueArrow.arrowHead2.Form;
//   output Real torque1.torqueArrow.arrowHead2.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.torqueArrow.arrowHead2.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque1.torqueArrow.arrowHead2.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowHead2.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowHead2.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.torqueArrow.arrowHead2.Material;
//   protected output Real torque1.torqueArrow.arrowHead2.Extra;
//   parameter String torque1.connectionLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque1.connectionLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque1.connectionLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.connectionLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.connectionLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque1.connectionLine.r[1](quantity = \"Length\", unit = \"m\") = torque1.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.connectionLine.r[2](quantity = \"Length\", unit = \"m\") = torque1.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.connectionLine.r[3](quantity = \"Length\", unit = \"m\") = torque1.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque1.connectionLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.connectionLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.connectionLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque1.connectionLine.lengthDirection[1](unit = \"1\") = torque1.basicTorque.r_0[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.connectionLine.lengthDirection[2](unit = \"1\") = torque1.basicTorque.r_0[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.connectionLine.lengthDirection[3](unit = \"1\") = torque1.basicTorque.r_0[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque1.connectionLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.connectionLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.connectionLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque1.connectionLine.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({torque1.basicTorque.r_0[1],torque1.basicTorque.r_0[2],torque1.basicTorque.r_0[3]}) \"Length of visual object\";
//   input Real torque1.connectionLine.width(quantity = \"Length\", unit = \"m\") = torque1.connectionLineDiameter \"Width of visual object\";
//   input Real torque1.connectionLine.height(quantity = \"Length\", unit = \"m\") = torque1.connectionLineDiameter \"Height of visual object\";
//   input Real torque1.connectionLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque1.connectionLine.color[1] = Real(torque1.connectionLineColor[1]) \"Color of shape\";
//   input Real torque1.connectionLine.color[2] = Real(torque1.connectionLineColor[2]) \"Color of shape\";
//   input Real torque1.connectionLine.color[3] = Real(torque1.connectionLineColor[3]) \"Color of shape\";
//   input Real torque1.connectionLine.specularCoefficient = torque1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque1.connectionLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque1.connectionLine.lengthDirection[1],torque1.connectionLine.lengthDirection[2],torque1.connectionLine.lengthDirection[3]});
//   protected Real torque1.connectionLine.e_x[1](unit = \"1\") = if noEvent(torque1.connectionLine.abs_n_x < 1e-010) then 1.0 else torque1.connectionLine.lengthDirection[1] / torque1.connectionLine.abs_n_x;
//   protected Real torque1.connectionLine.e_x[2](unit = \"1\") = if noEvent(torque1.connectionLine.abs_n_x < 1e-010) then 0.0 else torque1.connectionLine.lengthDirection[2] / torque1.connectionLine.abs_n_x;
//   protected Real torque1.connectionLine.e_x[3](unit = \"1\") = if noEvent(torque1.connectionLine.abs_n_x < 1e-010) then 0.0 else torque1.connectionLine.lengthDirection[3] / torque1.connectionLine.abs_n_x;
//   protected Real torque1.connectionLine.n_z_aux[1](unit = \"1\") = torque1.connectionLine.e_x[2] * torque1.connectionLine.widthDirection[3] - torque1.connectionLine.e_x[3] * torque1.connectionLine.widthDirection[2];
//   protected Real torque1.connectionLine.n_z_aux[2](unit = \"1\") = torque1.connectionLine.e_x[3] * torque1.connectionLine.widthDirection[1] - torque1.connectionLine.e_x[1] * torque1.connectionLine.widthDirection[3];
//   protected Real torque1.connectionLine.n_z_aux[3](unit = \"1\") = torque1.connectionLine.e_x[1] * torque1.connectionLine.widthDirection[2] - torque1.connectionLine.e_x[2] * torque1.connectionLine.widthDirection[1];
//   protected Real torque1.connectionLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.connectionLine.e_x[1],torque1.connectionLine.e_x[2],torque1.connectionLine.e_x[3]},if noEvent(torque1.connectionLine.n_z_aux[1] ^ 2.0 + (torque1.connectionLine.n_z_aux[2] ^ 2.0 + torque1.connectionLine.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.connectionLine.widthDirection[1],torque1.connectionLine.widthDirection[2],torque1.connectionLine.widthDirection[3]} else if noEvent(abs(torque1.connectionLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.connectionLine.e_x[1],torque1.connectionLine.e_x[2],torque1.connectionLine.e_x[3]})[1];
//   protected Real torque1.connectionLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.connectionLine.e_x[1],torque1.connectionLine.e_x[2],torque1.connectionLine.e_x[3]},if noEvent(torque1.connectionLine.n_z_aux[1] ^ 2.0 + (torque1.connectionLine.n_z_aux[2] ^ 2.0 + torque1.connectionLine.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.connectionLine.widthDirection[1],torque1.connectionLine.widthDirection[2],torque1.connectionLine.widthDirection[3]} else if noEvent(abs(torque1.connectionLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.connectionLine.e_x[1],torque1.connectionLine.e_x[2],torque1.connectionLine.e_x[3]})[2];
//   protected Real torque1.connectionLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque1.connectionLine.e_x[1],torque1.connectionLine.e_x[2],torque1.connectionLine.e_x[3]},if noEvent(torque1.connectionLine.n_z_aux[1] ^ 2.0 + (torque1.connectionLine.n_z_aux[2] ^ 2.0 + torque1.connectionLine.n_z_aux[3] ^ 2.0) > 1e-006) then {torque1.connectionLine.widthDirection[1],torque1.connectionLine.widthDirection[2],torque1.connectionLine.widthDirection[3]} else if noEvent(abs(torque1.connectionLine.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{torque1.connectionLine.e_x[1],torque1.connectionLine.e_x[2],torque1.connectionLine.e_x[3]})[3];
//   protected output Real torque1.connectionLine.Form;
//   output Real torque1.connectionLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.connectionLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.connectionLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.connectionLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.connectionLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.connectionLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque1.connectionLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.connectionLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque1.connectionLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque1.connectionLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.connectionLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.connectionLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque1.connectionLine.Material;
//   protected output Real torque1.connectionLine.Extra;
//   output Real sine[1].y \"Connector of Real output signal\";
//   parameter Real sine[1].amplitude = 2.0 \"Amplitude of sine wave\";
//   parameter Real sine[1].freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine[1].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine[1].offset = 0.0 \"Offset of output signal\";
//   parameter Real sine[1].startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine[1].pi = 3.14159265358979;
//   output Real sine[2].y \"Connector of Real output signal\";
//   parameter Real sine[2].amplitude = 0.0 \"Amplitude of sine wave\";
//   parameter Real sine[2].freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine[2].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine[2].offset = 0.0 \"Offset of output signal\";
//   parameter Real sine[2].startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine[2].pi = 3.14159265358979;
//   output Real sine[3].y \"Connector of Real output signal\";
//   parameter Real sine[3].amplitude = 0.0 \"Amplitude of sine wave\";
//   parameter Real sine[3].freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine[3].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine[3].offset = 0.0 \"Offset of output signal\";
//   parameter Real sine[3].startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine[3].pi = 3.14159265358979;
//   Real fixed.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real fixed.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real fixed.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real fixed.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real fixed.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real fixed.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real fixed.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real fixed.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real fixed.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real fixed.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real fixed.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real fixed.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean fixed.animation = true \"= true, if animation shall be enabled\";
//   parameter Real fixed.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from world frame to frame_b, resolved in world frame\";
//   parameter Real fixed.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from world frame to frame_b, resolved in world frame\";
//   parameter Real fixed.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from world frame to frame_b, resolved in world frame\";
//   parameter String fixed.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real fixed.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from world frame to shape origin, resolved in world frame\";
//   parameter Real fixed.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from world frame to shape origin, resolved in world frame\";
//   parameter Real fixed.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from world frame to shape origin, resolved in world frame\";
//   parameter Real fixed.widthDirection[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector in width direction of shape, resolved in world frame\";
//   parameter Real fixed.widthDirection[2](quantity = \"Length\", unit = \"m\") = 1.0 \" Vector in width direction of shape, resolved in world frame\";
//   parameter Real fixed.widthDirection[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector in width direction of shape, resolved in world frame\";
//   parameter Real fixed.extra = 0.0 \" Additional parameter for cone, pipe etc. (see docu of Visualizers.Advanced.Shape)\";
//   input Integer fixed.color[1](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer fixed.color[2](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer fixed.color[3](min = 0, max = 255) = 155 \" Color of shape\";
//   input Real fixed.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real fixed.lengthDirection[1](quantity = \"Length\", unit = \"m\") = fixed.r[1] - fixed.r_shape[1] \" Vector in length direction of shape, resolved in world frame\";
//   parameter Real fixed.lengthDirection[2](quantity = \"Length\", unit = \"m\") = fixed.r[2] - fixed.r_shape[2] \" Vector in length direction of shape, resolved in world frame\";
//   parameter Real fixed.lengthDirection[3](quantity = \"Length\", unit = \"m\") = fixed.r[3] - fixed.r_shape[3] \" Vector in length direction of shape, resolved in world frame\";
//   parameter Real fixed.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({fixed.r[1] - fixed.r_shape[1],fixed.r[2] - fixed.r_shape[2],fixed.r[3] - fixed.r_shape[3]}) \" Length of shape\";
//   parameter Real fixed.width(quantity = \"Length\", unit = \"m\", min = 0.0) = fixed.length / world.defaultWidthFraction \" Width of shape\";
//   parameter Real fixed.height(quantity = \"Length\", unit = \"m\", min = 0.0) = fixed.width \" Height of shape\";
//   parameter String fixed.shape.shapeType = fixed.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real fixed.shape.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real fixed.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real fixed.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real fixed.shape.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real fixed.shape.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real fixed.shape.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real fixed.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = fixed.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real fixed.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = fixed.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real fixed.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = fixed.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real fixed.shape.lengthDirection[1](unit = \"1\") = fixed.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real fixed.shape.lengthDirection[2](unit = \"1\") = fixed.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real fixed.shape.lengthDirection[3](unit = \"1\") = fixed.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real fixed.shape.widthDirection[1](unit = \"1\") = fixed.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real fixed.shape.widthDirection[2](unit = \"1\") = fixed.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real fixed.shape.widthDirection[3](unit = \"1\") = fixed.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real fixed.shape.length(quantity = \"Length\", unit = \"m\") = fixed.length \"Length of visual object\";
//   input Real fixed.shape.width(quantity = \"Length\", unit = \"m\") = fixed.width \"Width of visual object\";
//   input Real fixed.shape.height(quantity = \"Length\", unit = \"m\") = fixed.height \"Height of visual object\";
//   input Real fixed.shape.extra = fixed.extra \"Additional size data for some of the shape types\";
//   input Real fixed.shape.color[1] = Real(fixed.color[1]) \"Color of shape\";
//   input Real fixed.shape.color[2] = Real(fixed.color[2]) \"Color of shape\";
//   input Real fixed.shape.color[3] = Real(fixed.color[3]) \"Color of shape\";
//   input Real fixed.shape.specularCoefficient = fixed.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real fixed.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({fixed.shape.lengthDirection[1],fixed.shape.lengthDirection[2],fixed.shape.lengthDirection[3]});
//   protected Real fixed.shape.e_x[1](unit = \"1\") = if noEvent(fixed.shape.abs_n_x < 1e-010) then 1.0 else fixed.shape.lengthDirection[1] / fixed.shape.abs_n_x;
//   protected Real fixed.shape.e_x[2](unit = \"1\") = if noEvent(fixed.shape.abs_n_x < 1e-010) then 0.0 else fixed.shape.lengthDirection[2] / fixed.shape.abs_n_x;
//   protected Real fixed.shape.e_x[3](unit = \"1\") = if noEvent(fixed.shape.abs_n_x < 1e-010) then 0.0 else fixed.shape.lengthDirection[3] / fixed.shape.abs_n_x;
//   protected Real fixed.shape.n_z_aux[1](unit = \"1\") = fixed.shape.e_x[2] * fixed.shape.widthDirection[3] - fixed.shape.e_x[3] * fixed.shape.widthDirection[2];
//   protected Real fixed.shape.n_z_aux[2](unit = \"1\") = fixed.shape.e_x[3] * fixed.shape.widthDirection[1] - fixed.shape.e_x[1] * fixed.shape.widthDirection[3];
//   protected Real fixed.shape.n_z_aux[3](unit = \"1\") = fixed.shape.e_x[1] * fixed.shape.widthDirection[2] - fixed.shape.e_x[2] * fixed.shape.widthDirection[1];
//   protected Real fixed.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]},if noEvent(fixed.shape.n_z_aux[1] ^ 2.0 + (fixed.shape.n_z_aux[2] ^ 2.0 + fixed.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {fixed.shape.widthDirection[1],fixed.shape.widthDirection[2],fixed.shape.widthDirection[3]} else if noEvent(abs(fixed.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]})[1];
//   protected Real fixed.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]},if noEvent(fixed.shape.n_z_aux[1] ^ 2.0 + (fixed.shape.n_z_aux[2] ^ 2.0 + fixed.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {fixed.shape.widthDirection[1],fixed.shape.widthDirection[2],fixed.shape.widthDirection[3]} else if noEvent(abs(fixed.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]})[2];
//   protected Real fixed.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]},if noEvent(fixed.shape.n_z_aux[1] ^ 2.0 + (fixed.shape.n_z_aux[2] ^ 2.0 + fixed.shape.n_z_aux[3] ^ 2.0) > 1e-006) then {fixed.shape.widthDirection[1],fixed.shape.widthDirection[2],fixed.shape.widthDirection[3]} else if noEvent(abs(fixed.shape.e_x[1]) > 1e-006) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-013),{fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]})[3];
//   protected output Real fixed.shape.Form;
//   output Real fixed.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real fixed.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real fixed.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real fixed.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real fixed.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real fixed.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real fixed.shape.Material;
//   protected output Real fixed.shape.Extra;
//   Real inertia1.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real inertia1.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real inertia1.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real inertia1.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Real inertia1.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0, start = 1.0) = cyl1.I[1,1] \"Moment of inertia\";
//   parameter enumeration(never, avoid, default, prefer, always) inertia1.stateSelect = StateSelect.default \"Priority to use phi and w as states\";
//   Real inertia1.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", fixed = false) \"Absolute angular acceleration of component (= der(w))\";
//   Real inertia1.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", fixed = true, StateSelect = StateSelect.default) \"Absolute rotation angle of component\";
//   Real inertia1.w(quantity = \"AngularVelocity\", unit = \"rad/s\", fixed = true, StateSelect = StateSelect.default) \"Absolute angular velocity of component (= der(phi))\";
//   parameter Boolean idealGear.useSupport = true \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real idealGear.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real idealGear.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real idealGear.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real idealGear.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real idealGear.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   parameter Real idealGear.ratio(start = 1.0) = 10.0 \"Transmission ratio (flange_a.phi/flange_b.phi)\";
//   Real idealGear.phi_a(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Angle between left shaft flange and support\";
//   Real idealGear.phi_b(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Angle between right shaft flange and support\";
//   Real idealGear.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = idealGear.phi_support \"Absolute rotation angle of the support/housing\";
//   Real idealGear.support.tau(quantity = \"Torque\", unit = \"N.m\") = (-idealGear.flange_a.tau) - idealGear.flange_b.tau \"Reaction torque in the support/housing\";
//   Real inertia2.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real inertia2.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real inertia2.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real inertia2.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Real inertia2.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0, start = 1.0) = cyl2.I[1,1] \"Moment of inertia\";
//   parameter enumeration(never, avoid, default, prefer, always) inertia2.stateSelect = StateSelect.default \"Priority to use phi and w as states\";
//   Real inertia2.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Absolute angular acceleration of component (= der(w))\";
//   Real inertia2.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", StateSelect = StateSelect.default) \"Absolute rotation angle of component\";
//   Real inertia2.w(quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.default) \"Absolute angular velocity of component (= der(phi))\";
//   parameter Boolean torque2.useSupport = true \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real torque2.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real torque2.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real torque2.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   input Real torque2.tau \"Accelerating torque acting at flange (= -flange.tau)\";
//   Real torque2.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = torque2.phi_support \"Absolute rotation angle of the support/housing\";
//   Real torque2.support.tau(quantity = \"Torque\", unit = \"N.m\") = -torque2.flange.tau \"Reaction torque in the support/housing\";
//   parameter Real mounting1D.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   parameter Real mounting1D.n[1](unit = \"1\") = 1.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D.n[2](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D.n[3](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   Real mounting1D.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real mounting1D.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real mounting1D.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real mounting1D.housing.t[1](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D.flange_b.tau) * mounting1D.n[1];
//   input Real mounting1D.housing.t[2](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D.flange_b.tau) * mounting1D.n[2];
//   input Real mounting1D.housing.t[3](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D.flange_b.tau) * mounting1D.n[3];
//   Real mounting1D.housing.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.housing.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.housing.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.housing.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.housing.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.housing.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.housing.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.housing.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.housing.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.housing.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.housing.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.housing.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
// equation
//   world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[1].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[1].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[1].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[1].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[2].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[2].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[2].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[2].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[1].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[1].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[1].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[1].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[2].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[2].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[2].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[2].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[1].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[1].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[1].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[1].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[2].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[2].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[2].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[2].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[3].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[3].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[3].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[3].Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   world.x_arrowLine.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.y_arrowLine.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.z_arrowLine.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   world.gravityArrowLine.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowLine.shapeType);
//   world.gravityArrowLine.rxvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_x[1] + world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_x[3];
//   world.gravityArrowLine.rxvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_x[1] + world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_x[3];
//   world.gravityArrowLine.rxvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_x[1] + world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_x[3];
//   world.gravityArrowLine.ryvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_y[1] + world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_y[3];
//   world.gravityArrowLine.ryvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_y[1] + world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_y[3];
//   world.gravityArrowLine.ryvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_y[1] + world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_y[3];
//   world.gravityArrowLine.rvisobj = world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowLine.R.T[1,1],world.gravityArrowLine.R.T[1,2],world.gravityArrowLine.R.T[1,3]},{world.gravityArrowLine.R.T[2,1],world.gravityArrowLine.R.T[2,2],world.gravityArrowLine.R.T[2,3]},{world.gravityArrowLine.R.T[3,1],world.gravityArrowLine.R.T[3,2],world.gravityArrowLine.R.T[3,3]}},{world.gravityArrowLine.r_shape[1],world.gravityArrowLine.r_shape[2],world.gravityArrowLine.r_shape[3]});
//   world.gravityArrowLine.size[1] = world.gravityArrowLine.length;
//   world.gravityArrowLine.size[2] = world.gravityArrowLine.width;
//   world.gravityArrowLine.size[3] = world.gravityArrowLine.height;
//   world.gravityArrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowLine.color[1] / 255.0,world.gravityArrowLine.color[2] / 255.0,world.gravityArrowLine.color[3] / 255.0,world.gravityArrowLine.specularCoefficient);
//   world.gravityArrowLine.Extra = world.gravityArrowLine.extra;
//   world.gravityArrowHead.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowHead.shapeType);
//   world.gravityArrowHead.rxvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_x[1] + world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_x[3];
//   world.gravityArrowHead.rxvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_x[1] + world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_x[3];
//   world.gravityArrowHead.rxvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_x[1] + world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_x[3];
//   world.gravityArrowHead.ryvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_y[1] + world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_y[3];
//   world.gravityArrowHead.ryvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_y[1] + world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_y[3];
//   world.gravityArrowHead.ryvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_y[1] + world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_y[3];
//   world.gravityArrowHead.rvisobj = world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowHead.R.T[1,1],world.gravityArrowHead.R.T[1,2],world.gravityArrowHead.R.T[1,3]},{world.gravityArrowHead.R.T[2,1],world.gravityArrowHead.R.T[2,2],world.gravityArrowHead.R.T[2,3]},{world.gravityArrowHead.R.T[3,1],world.gravityArrowHead.R.T[3,2],world.gravityArrowHead.R.T[3,3]}},{world.gravityArrowHead.r_shape[1],world.gravityArrowHead.r_shape[2],world.gravityArrowHead.r_shape[3]});
//   world.gravityArrowHead.size[1] = world.gravityArrowHead.length;
//   world.gravityArrowHead.size[2] = world.gravityArrowHead.width;
//   world.gravityArrowHead.size[3] = world.gravityArrowHead.height;
//   world.gravityArrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowHead.color[1] / 255.0,world.gravityArrowHead.color[2] / 255.0,world.gravityArrowHead.color[3] / 255.0,world.gravityArrowHead.specularCoefficient);
//   world.gravityArrowHead.Extra = world.gravityArrowHead.extra;
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-010,\"Parameter n of World object is wrong (lenght(n) > 0 required)\");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   gearConstraint.idealGear.phi_a = gearConstraint.idealGear.flange_a.phi - gearConstraint.idealGear.phi_support;
//   gearConstraint.idealGear.phi_b = gearConstraint.idealGear.flange_b.phi - gearConstraint.idealGear.phi_support;
//   gearConstraint.idealGear.phi_a = gearConstraint.idealGear.ratio * gearConstraint.idealGear.phi_b;
//   0.0 = gearConstraint.idealGear.ratio * gearConstraint.idealGear.flange_a.tau + gearConstraint.idealGear.flange_b.tau;
//   gearConstraint.idealGear.phi_support = 0.0;
//   gearConstraint.actuatedRevolute_a.fixed.flange.phi = gearConstraint.actuatedRevolute_a.fixed.phi0;
//   gearConstraint.actuatedRevolute_a.internalAxis.flange.tau = gearConstraint.actuatedRevolute_a.internalAxis.tau;
//   gearConstraint.actuatedRevolute_a.internalAxis.flange.phi = gearConstraint.actuatedRevolute_a.internalAxis.phi;
//   assert(true,\"Connector frame_a of revolute joint is not connected\");
//   assert(true,\"Connector frame_b of revolute joint is not connected\");
//   gearConstraint.actuatedRevolute_a.angle = gearConstraint.actuatedRevolute_a.phi;
//   gearConstraint.actuatedRevolute_a.w = der(gearConstraint.actuatedRevolute_a.phi);
//   gearConstraint.actuatedRevolute_a.a = der(gearConstraint.actuatedRevolute_a.w);
//   gearConstraint.actuatedRevolute_a.frame_b.r_0[1] = gearConstraint.actuatedRevolute_a.frame_a.r_0[1];
//   gearConstraint.actuatedRevolute_a.frame_b.r_0[2] = gearConstraint.actuatedRevolute_a.frame_a.r_0[2];
//   gearConstraint.actuatedRevolute_a.frame_b.r_0[3] = gearConstraint.actuatedRevolute_a.frame_a.r_0[3];
//   gearConstraint.actuatedRevolute_a.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({gearConstraint.actuatedRevolute_a.e[1],gearConstraint.actuatedRevolute_a.e[2],gearConstraint.actuatedRevolute_a.e[3]},gearConstraint.actuatedRevolute_a.phi,gearConstraint.actuatedRevolute_a.w);
//   gearConstraint.actuatedRevolute_a.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(gearConstraint.actuatedRevolute_a.frame_a.R,gearConstraint.actuatedRevolute_a.R_rel);
//   gearConstraint.actuatedRevolute_a.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(gearConstraint.actuatedRevolute_a.R_rel,{gearConstraint.actuatedRevolute_a.frame_b.f[1],gearConstraint.actuatedRevolute_a.frame_b.f[2],gearConstraint.actuatedRevolute_a.frame_b.f[3]});
//   gearConstraint.actuatedRevolute_a.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(gearConstraint.actuatedRevolute_a.R_rel,{gearConstraint.actuatedRevolute_a.frame_b.t[1],gearConstraint.actuatedRevolute_a.frame_b.t[2],gearConstraint.actuatedRevolute_a.frame_b.t[3]});
//   gearConstraint.actuatedRevolute_a.tau = (-gearConstraint.actuatedRevolute_a.frame_b.t[1]) * gearConstraint.actuatedRevolute_a.e[1] + ((-gearConstraint.actuatedRevolute_a.frame_b.t[2]) * gearConstraint.actuatedRevolute_a.e[2] + (-gearConstraint.actuatedRevolute_a.frame_b.t[3]) * gearConstraint.actuatedRevolute_a.e[3]);
//   gearConstraint.actuatedRevolute_a.phi = gearConstraint.actuatedRevolute_a.internalAxis.phi;
//   gearConstraint.actuatedRevolute_b.fixed.flange.phi = gearConstraint.actuatedRevolute_b.fixed.phi0;
//   gearConstraint.actuatedRevolute_b.internalAxis.flange.tau = gearConstraint.actuatedRevolute_b.internalAxis.tau;
//   gearConstraint.actuatedRevolute_b.internalAxis.flange.phi = gearConstraint.actuatedRevolute_b.internalAxis.phi;
//   assert(true,\"Connector frame_a of revolute joint is not connected\");
//   assert(true,\"Connector frame_b of revolute joint is not connected\");
//   gearConstraint.actuatedRevolute_b.angle = gearConstraint.actuatedRevolute_b.phi;
//   gearConstraint.actuatedRevolute_b.w = der(gearConstraint.actuatedRevolute_b.phi);
//   gearConstraint.actuatedRevolute_b.a = der(gearConstraint.actuatedRevolute_b.w);
//   gearConstraint.actuatedRevolute_b.frame_b.r_0[1] = gearConstraint.actuatedRevolute_b.frame_a.r_0[1];
//   gearConstraint.actuatedRevolute_b.frame_b.r_0[2] = gearConstraint.actuatedRevolute_b.frame_a.r_0[2];
//   gearConstraint.actuatedRevolute_b.frame_b.r_0[3] = gearConstraint.actuatedRevolute_b.frame_a.r_0[3];
//   gearConstraint.actuatedRevolute_b.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({gearConstraint.actuatedRevolute_b.e[1],gearConstraint.actuatedRevolute_b.e[2],gearConstraint.actuatedRevolute_b.e[3]},gearConstraint.actuatedRevolute_b.phi,gearConstraint.actuatedRevolute_b.w);
//   gearConstraint.actuatedRevolute_b.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(gearConstraint.actuatedRevolute_b.frame_a.R,gearConstraint.actuatedRevolute_b.R_rel);
//   gearConstraint.actuatedRevolute_b.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(gearConstraint.actuatedRevolute_b.R_rel,{gearConstraint.actuatedRevolute_b.frame_b.f[1],gearConstraint.actuatedRevolute_b.frame_b.f[2],gearConstraint.actuatedRevolute_b.frame_b.f[3]});
//   gearConstraint.actuatedRevolute_b.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(gearConstraint.actuatedRevolute_b.R_rel,{gearConstraint.actuatedRevolute_b.frame_b.t[1],gearConstraint.actuatedRevolute_b.frame_b.t[2],gearConstraint.actuatedRevolute_b.frame_b.t[3]});
//   gearConstraint.actuatedRevolute_b.tau = (-gearConstraint.actuatedRevolute_b.frame_b.t[1]) * gearConstraint.actuatedRevolute_b.e[1] + ((-gearConstraint.actuatedRevolute_b.frame_b.t[2]) * gearConstraint.actuatedRevolute_b.e[2] + (-gearConstraint.actuatedRevolute_b.frame_b.t[3]) * gearConstraint.actuatedRevolute_b.e[3]);
//   gearConstraint.actuatedRevolute_b.phi = gearConstraint.actuatedRevolute_b.internalAxis.phi;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   gearConstraint.fixedTranslation2.frame_b.r_0 = gearConstraint.fixedTranslation2.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(gearConstraint.fixedTranslation2.frame_a.R,{gearConstraint.fixedTranslation2.r[1],gearConstraint.fixedTranslation2.r[2],gearConstraint.fixedTranslation2.r[3]});
//   gearConstraint.fixedTranslation2.frame_b.R.T[1,1] = gearConstraint.fixedTranslation2.frame_a.R.T[1,1];
//   gearConstraint.fixedTranslation2.frame_b.R.T[1,2] = gearConstraint.fixedTranslation2.frame_a.R.T[1,2];
//   gearConstraint.fixedTranslation2.frame_b.R.T[1,3] = gearConstraint.fixedTranslation2.frame_a.R.T[1,3];
//   gearConstraint.fixedTranslation2.frame_b.R.T[2,1] = gearConstraint.fixedTranslation2.frame_a.R.T[2,1];
//   gearConstraint.fixedTranslation2.frame_b.R.T[2,2] = gearConstraint.fixedTranslation2.frame_a.R.T[2,2];
//   gearConstraint.fixedTranslation2.frame_b.R.T[2,3] = gearConstraint.fixedTranslation2.frame_a.R.T[2,3];
//   gearConstraint.fixedTranslation2.frame_b.R.T[3,1] = gearConstraint.fixedTranslation2.frame_a.R.T[3,1];
//   gearConstraint.fixedTranslation2.frame_b.R.T[3,2] = gearConstraint.fixedTranslation2.frame_a.R.T[3,2];
//   gearConstraint.fixedTranslation2.frame_b.R.T[3,3] = gearConstraint.fixedTranslation2.frame_a.R.T[3,3];
//   gearConstraint.fixedTranslation2.frame_b.R.w[1] = gearConstraint.fixedTranslation2.frame_a.R.w[1];
//   gearConstraint.fixedTranslation2.frame_b.R.w[2] = gearConstraint.fixedTranslation2.frame_a.R.w[2];
//   gearConstraint.fixedTranslation2.frame_b.R.w[3] = gearConstraint.fixedTranslation2.frame_a.R.w[3];
//   0.0 = gearConstraint.fixedTranslation2.frame_a.f[1] + gearConstraint.fixedTranslation2.frame_b.f[1];
//   0.0 = gearConstraint.fixedTranslation2.frame_a.f[2] + gearConstraint.fixedTranslation2.frame_b.f[2];
//   0.0 = gearConstraint.fixedTranslation2.frame_a.f[3] + gearConstraint.fixedTranslation2.frame_b.f[3];
//   0.0 = gearConstraint.fixedTranslation2.frame_a.t[1] + gearConstraint.fixedTranslation2.frame_b.t[1] + (gearConstraint.fixedTranslation2.r[2] * gearConstraint.fixedTranslation2.frame_b.f[3] - gearConstraint.fixedTranslation2.r[3] * gearConstraint.fixedTranslation2.frame_b.f[2]);
//   0.0 = gearConstraint.fixedTranslation2.frame_a.t[2] + gearConstraint.fixedTranslation2.frame_b.t[2] + (gearConstraint.fixedTranslation2.r[3] * gearConstraint.fixedTranslation2.frame_b.f[1] - gearConstraint.fixedTranslation2.r[1] * gearConstraint.fixedTranslation2.frame_b.f[3]);
//   0.0 = gearConstraint.fixedTranslation2.frame_a.t[3] + gearConstraint.fixedTranslation2.frame_b.t[3] + (gearConstraint.fixedTranslation2.r[1] * gearConstraint.fixedTranslation2.frame_b.f[2] - gearConstraint.fixedTranslation2.r[2] * gearConstraint.fixedTranslation2.frame_b.f[1]);
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   gearConstraint.fixedTranslation1.frame_b.r_0 = gearConstraint.fixedTranslation1.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(gearConstraint.fixedTranslation1.frame_a.R,{gearConstraint.fixedTranslation1.r[1],gearConstraint.fixedTranslation1.r[2],gearConstraint.fixedTranslation1.r[3]});
//   gearConstraint.fixedTranslation1.frame_b.R.T[1,1] = gearConstraint.fixedTranslation1.frame_a.R.T[1,1];
//   gearConstraint.fixedTranslation1.frame_b.R.T[1,2] = gearConstraint.fixedTranslation1.frame_a.R.T[1,2];
//   gearConstraint.fixedTranslation1.frame_b.R.T[1,3] = gearConstraint.fixedTranslation1.frame_a.R.T[1,3];
//   gearConstraint.fixedTranslation1.frame_b.R.T[2,1] = gearConstraint.fixedTranslation1.frame_a.R.T[2,1];
//   gearConstraint.fixedTranslation1.frame_b.R.T[2,2] = gearConstraint.fixedTranslation1.frame_a.R.T[2,2];
//   gearConstraint.fixedTranslation1.frame_b.R.T[2,3] = gearConstraint.fixedTranslation1.frame_a.R.T[2,3];
//   gearConstraint.fixedTranslation1.frame_b.R.T[3,1] = gearConstraint.fixedTranslation1.frame_a.R.T[3,1];
//   gearConstraint.fixedTranslation1.frame_b.R.T[3,2] = gearConstraint.fixedTranslation1.frame_a.R.T[3,2];
//   gearConstraint.fixedTranslation1.frame_b.R.T[3,3] = gearConstraint.fixedTranslation1.frame_a.R.T[3,3];
//   gearConstraint.fixedTranslation1.frame_b.R.w[1] = gearConstraint.fixedTranslation1.frame_a.R.w[1];
//   gearConstraint.fixedTranslation1.frame_b.R.w[2] = gearConstraint.fixedTranslation1.frame_a.R.w[2];
//   gearConstraint.fixedTranslation1.frame_b.R.w[3] = gearConstraint.fixedTranslation1.frame_a.R.w[3];
//   0.0 = gearConstraint.fixedTranslation1.frame_a.f[1] + gearConstraint.fixedTranslation1.frame_b.f[1];
//   0.0 = gearConstraint.fixedTranslation1.frame_a.f[2] + gearConstraint.fixedTranslation1.frame_b.f[2];
//   0.0 = gearConstraint.fixedTranslation1.frame_a.f[3] + gearConstraint.fixedTranslation1.frame_b.f[3];
//   0.0 = gearConstraint.fixedTranslation1.frame_a.t[1] + gearConstraint.fixedTranslation1.frame_b.t[1] + (gearConstraint.fixedTranslation1.r[2] * gearConstraint.fixedTranslation1.frame_b.f[3] - gearConstraint.fixedTranslation1.r[3] * gearConstraint.fixedTranslation1.frame_b.f[2]);
//   0.0 = gearConstraint.fixedTranslation1.frame_a.t[2] + gearConstraint.fixedTranslation1.frame_b.t[2] + (gearConstraint.fixedTranslation1.r[3] * gearConstraint.fixedTranslation1.frame_b.f[1] - gearConstraint.fixedTranslation1.r[1] * gearConstraint.fixedTranslation1.frame_b.f[3]);
//   0.0 = gearConstraint.fixedTranslation1.frame_a.t[3] + gearConstraint.fixedTranslation1.frame_b.t[3] + (gearConstraint.fixedTranslation1.r[1] * gearConstraint.fixedTranslation1.frame_b.f[2] - gearConstraint.fixedTranslation1.r[2] * gearConstraint.fixedTranslation1.frame_b.f[1]);
//   assert(true,\"Connector bearing of component is not connected\");
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   cyl1.body.r_0[1] = cyl1.body.frame_a.r_0[1];
//   cyl1.body.r_0[2] = cyl1.body.frame_a.r_0[2];
//   cyl1.body.r_0[3] = cyl1.body.frame_a.r_0[3];
//   if true then
//   cyl1.body.Q[1] = 0.0;
//   cyl1.body.Q[2] = 0.0;
//   cyl1.body.Q[3] = 0.0;
//   cyl1.body.Q[4] = 1.0;
//   cyl1.body.phi[1] = 0.0;
//   cyl1.body.phi[2] = 0.0;
//   cyl1.body.phi[3] = 0.0;
//   cyl1.body.phi_d[1] = 0.0;
//   cyl1.body.phi_d[2] = 0.0;
//   cyl1.body.phi_d[3] = 0.0;
//   cyl1.body.phi_dd[1] = 0.0;
//   cyl1.body.phi_dd[2] = 0.0;
//   cyl1.body.phi_dd[3] = 0.0;
//   elseif cyl1.body.useQuaternions then
//   cyl1.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({cyl1.body.Q[1],cyl1.body.Q[2],cyl1.body.Q[3],cyl1.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({cyl1.body.Q[1],cyl1.body.Q[2],cyl1.body.Q[3],cyl1.body.Q[4]},{der(cyl1.body.Q[1]),der(cyl1.body.Q[2]),der(cyl1.body.Q[3]),der(cyl1.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({cyl1.body.Q[1],cyl1.body.Q[2],cyl1.body.Q[3],cyl1.body.Q[4]});
//   cyl1.body.phi[1] = 0.0;
//   cyl1.body.phi[2] = 0.0;
//   cyl1.body.phi[3] = 0.0;
//   cyl1.body.phi_d[1] = 0.0;
//   cyl1.body.phi_d[2] = 0.0;
//   cyl1.body.phi_d[3] = 0.0;
//   cyl1.body.phi_dd[1] = 0.0;
//   cyl1.body.phi_dd[2] = 0.0;
//   cyl1.body.phi_dd[3] = 0.0;
//   else
//   cyl1.body.phi_d[1] = der(cyl1.body.phi[1]);
//   cyl1.body.phi_d[2] = der(cyl1.body.phi[2]);
//   cyl1.body.phi_d[3] = der(cyl1.body.phi[3]);
//   cyl1.body.phi_dd[1] = der(cyl1.body.phi_d[1]);
//   cyl1.body.phi_dd[2] = der(cyl1.body.phi_d[2]);
//   cyl1.body.phi_dd[3] = der(cyl1.body.phi_d[3]);
//   cyl1.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({cyl1.body.sequence_angleStates[1],cyl1.body.sequence_angleStates[2],cyl1.body.sequence_angleStates[3]},{cyl1.body.phi[1],cyl1.body.phi[2],cyl1.body.phi[3]},{cyl1.body.phi_d[1],cyl1.body.phi_d[2],cyl1.body.phi_d[3]});
//   cyl1.body.Q[1] = 0.0;
//   cyl1.body.Q[2] = 0.0;
//   cyl1.body.Q[3] = 0.0;
//   cyl1.body.Q[4] = 1.0;
//   end if;
//   cyl1.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration({cyl1.body.frame_a.r_0[1],cyl1.body.frame_a.r_0[2],cyl1.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(cyl1.body.frame_a.R,{cyl1.body.r_CM[1],cyl1.body.r_CM[2],cyl1.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-013),world.mue);
//   cyl1.body.v_0[1] = der(cyl1.body.frame_a.r_0[1]);
//   cyl1.body.v_0[2] = der(cyl1.body.frame_a.r_0[2]);
//   cyl1.body.v_0[3] = der(cyl1.body.frame_a.r_0[3]);
//   cyl1.body.a_0[1] = der(cyl1.body.v_0[1]);
//   cyl1.body.a_0[2] = der(cyl1.body.v_0[2]);
//   cyl1.body.a_0[3] = der(cyl1.body.v_0[3]);
//   cyl1.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(cyl1.body.frame_a.R);
//   cyl1.body.z_a[1] = der(cyl1.body.w_a[1]);
//   cyl1.body.z_a[2] = der(cyl1.body.w_a[2]);
//   cyl1.body.z_a[3] = der(cyl1.body.w_a[3]);
//   cyl1.body.frame_a.f = cyl1.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(cyl1.body.frame_a.R,{cyl1.body.a_0[1] - cyl1.body.g_0[1],cyl1.body.a_0[2] - cyl1.body.g_0[2],cyl1.body.a_0[3] - cyl1.body.g_0[3]}) + {cyl1.body.z_a[2] * cyl1.body.r_CM[3] - cyl1.body.z_a[3] * cyl1.body.r_CM[2],cyl1.body.z_a[3] * cyl1.body.r_CM[1] - cyl1.body.z_a[1] * cyl1.body.r_CM[3],cyl1.body.z_a[1] * cyl1.body.r_CM[2] - cyl1.body.z_a[2] * cyl1.body.r_CM[1]} + {cyl1.body.w_a[2] * (cyl1.body.w_a[1] * cyl1.body.r_CM[2] - cyl1.body.w_a[2] * cyl1.body.r_CM[1]) - cyl1.body.w_a[3] * (cyl1.body.w_a[3] * cyl1.body.r_CM[1] - cyl1.body.w_a[1] * cyl1.body.r_CM[3]),cyl1.body.w_a[3] * (cyl1.body.w_a[2] * cyl1.body.r_CM[3] - cyl1.body.w_a[3] * cyl1.body.r_CM[2]) - cyl1.body.w_a[1] * (cyl1.body.w_a[1] * cyl1.body.r_CM[2] - cyl1.body.w_a[2] * cyl1.body.r_CM[1]),cyl1.body.w_a[1] * (cyl1.body.w_a[3] * cyl1.body.r_CM[1] - cyl1.body.w_a[1] * cyl1.body.r_CM[3]) - cyl1.body.w_a[2] * (cyl1.body.w_a[2] * cyl1.body.r_CM[3] - cyl1.body.w_a[3] * cyl1.body.r_CM[2])});
//   cyl1.body.frame_a.t[1] = cyl1.body.I[1,1] * cyl1.body.z_a[1] + cyl1.body.I[1,2] * cyl1.body.z_a[2] + cyl1.body.I[1,3] * cyl1.body.z_a[3] + (cyl1.body.w_a[2] * (cyl1.body.I[3,1] * cyl1.body.w_a[1] + cyl1.body.I[3,2] * cyl1.body.w_a[2] + cyl1.body.I[3,3] * cyl1.body.w_a[3]) - cyl1.body.w_a[3] * (cyl1.body.I[2,1] * cyl1.body.w_a[1] + cyl1.body.I[2,2] * cyl1.body.w_a[2] + cyl1.body.I[2,3] * cyl1.body.w_a[3])) + (cyl1.body.r_CM[2] * cyl1.body.frame_a.f[3] - cyl1.body.r_CM[3] * cyl1.body.frame_a.f[2]);
//   cyl1.body.frame_a.t[2] = cyl1.body.I[2,1] * cyl1.body.z_a[1] + cyl1.body.I[2,2] * cyl1.body.z_a[2] + cyl1.body.I[2,3] * cyl1.body.z_a[3] + (cyl1.body.w_a[3] * (cyl1.body.I[1,1] * cyl1.body.w_a[1] + cyl1.body.I[1,2] * cyl1.body.w_a[2] + cyl1.body.I[1,3] * cyl1.body.w_a[3]) - cyl1.body.w_a[1] * (cyl1.body.I[3,1] * cyl1.body.w_a[1] + cyl1.body.I[3,2] * cyl1.body.w_a[2] + cyl1.body.I[3,3] * cyl1.body.w_a[3])) + (cyl1.body.r_CM[3] * cyl1.body.frame_a.f[1] - cyl1.body.r_CM[1] * cyl1.body.frame_a.f[3]);
//   cyl1.body.frame_a.t[3] = cyl1.body.I[3,1] * cyl1.body.z_a[1] + cyl1.body.I[3,2] * cyl1.body.z_a[2] + cyl1.body.I[3,3] * cyl1.body.z_a[3] + (cyl1.body.w_a[1] * (cyl1.body.I[2,1] * cyl1.body.w_a[1] + cyl1.body.I[2,2] * cyl1.body.w_a[2] + cyl1.body.I[2,3] * cyl1.body.w_a[3]) - cyl1.body.w_a[2] * (cyl1.body.I[1,1] * cyl1.body.w_a[1] + cyl1.body.I[1,2] * cyl1.body.w_a[2] + cyl1.body.I[1,3] * cyl1.body.w_a[3])) + (cyl1.body.r_CM[1] * cyl1.body.frame_a.f[2] - cyl1.body.r_CM[2] * cyl1.body.frame_a.f[1]);
//   cyl1.frameTranslation.shape.R.T[1,1] = cyl1.frameTranslation.frame_a.R.T[1,1];
//   cyl1.frameTranslation.shape.R.T[1,2] = cyl1.frameTranslation.frame_a.R.T[1,2];
//   cyl1.frameTranslation.shape.R.T[1,3] = cyl1.frameTranslation.frame_a.R.T[1,3];
//   cyl1.frameTranslation.shape.R.T[2,1] = cyl1.frameTranslation.frame_a.R.T[2,1];
//   cyl1.frameTranslation.shape.R.T[2,2] = cyl1.frameTranslation.frame_a.R.T[2,2];
//   cyl1.frameTranslation.shape.R.T[2,3] = cyl1.frameTranslation.frame_a.R.T[2,3];
//   cyl1.frameTranslation.shape.R.T[3,1] = cyl1.frameTranslation.frame_a.R.T[3,1];
//   cyl1.frameTranslation.shape.R.T[3,2] = cyl1.frameTranslation.frame_a.R.T[3,2];
//   cyl1.frameTranslation.shape.R.T[3,3] = cyl1.frameTranslation.frame_a.R.T[3,3];
//   cyl1.frameTranslation.shape.R.w[1] = cyl1.frameTranslation.frame_a.R.w[1];
//   cyl1.frameTranslation.shape.R.w[2] = cyl1.frameTranslation.frame_a.R.w[2];
//   cyl1.frameTranslation.shape.R.w[3] = cyl1.frameTranslation.frame_a.R.w[3];
//   cyl1.frameTranslation.shape.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(cyl1.frameTranslation.shape.shapeType);
//   cyl1.frameTranslation.shape.rxvisobj[1] = cyl1.frameTranslation.shape.R.T[1,1] * cyl1.frameTranslation.shape.e_x[1] + cyl1.frameTranslation.shape.R.T[2,1] * cyl1.frameTranslation.shape.e_x[2] + cyl1.frameTranslation.shape.R.T[3,1] * cyl1.frameTranslation.shape.e_x[3];
//   cyl1.frameTranslation.shape.rxvisobj[2] = cyl1.frameTranslation.shape.R.T[1,2] * cyl1.frameTranslation.shape.e_x[1] + cyl1.frameTranslation.shape.R.T[2,2] * cyl1.frameTranslation.shape.e_x[2] + cyl1.frameTranslation.shape.R.T[3,2] * cyl1.frameTranslation.shape.e_x[3];
//   cyl1.frameTranslation.shape.rxvisobj[3] = cyl1.frameTranslation.shape.R.T[1,3] * cyl1.frameTranslation.shape.e_x[1] + cyl1.frameTranslation.shape.R.T[2,3] * cyl1.frameTranslation.shape.e_x[2] + cyl1.frameTranslation.shape.R.T[3,3] * cyl1.frameTranslation.shape.e_x[3];
//   cyl1.frameTranslation.shape.ryvisobj[1] = cyl1.frameTranslation.shape.R.T[1,1] * cyl1.frameTranslation.shape.e_y[1] + cyl1.frameTranslation.shape.R.T[2,1] * cyl1.frameTranslation.shape.e_y[2] + cyl1.frameTranslation.shape.R.T[3,1] * cyl1.frameTranslation.shape.e_y[3];
//   cyl1.frameTranslation.shape.ryvisobj[2] = cyl1.frameTranslation.shape.R.T[1,2] * cyl1.frameTranslation.shape.e_y[1] + cyl1.frameTranslation.shape.R.T[2,2] * cyl1.frameTranslation.shape.e_y[2] + cyl1.frameTranslation.shape.R.T[3,2] * cyl1.frameTranslation.shape.e_y[3];
//   cyl1.frameTranslation.shape.ryvisobj[3] = cyl1.frameTranslation.shape.R.T[1,3] * cyl1.frameTranslation.shape.e_y[1] + cyl1.frameTranslation.shape.R.T[2,3] * cyl1.frameTranslation.shape.e_y[2] + cyl1.frameTranslation.shape.R.T[3,3] * cyl1.frameTranslation.shape.e_y[3];
//   cyl1.frameTranslation.shape.rvisobj = cyl1.frameTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{cyl1.frameTranslation.shape.R.T[1,1],cyl1.frameTranslation.shape.R.T[1,2],cyl1.frameTranslation.shape.R.T[1,3]},{cyl1.frameTranslation.shape.R.T[2,1],cyl1.frameTranslation.shape.R.T[2,2],cyl1.frameTranslation.shape.R.T[2,3]},{cyl1.frameTranslation.shape.R.T[3,1],cyl1.frameTranslation.shape.R.T[3,2],cyl1.frameTranslation.shape.R.T[3,3]}},{cyl1.frameTranslation.shape.r_shape[1],cyl1.frameTranslation.shape.r_shape[2],cyl1.frameTranslation.shape.r_shape[3]});
//   cyl1.frameTranslation.shape.size[1] = cyl1.frameTranslation.shape.length;
//   cyl1.frameTranslation.shape.size[2] = cyl1.frameTranslation.shape.width;
//   cyl1.frameTranslation.shape.size[3] = cyl1.frameTranslation.shape.height;
//   cyl1.frameTranslation.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(cyl1.frameTranslation.shape.color[1] / 255.0,cyl1.frameTranslation.shape.color[2] / 255.0,cyl1.frameTranslation.shape.color[3] / 255.0,cyl1.frameTranslation.shape.specularCoefficient);
//   cyl1.frameTranslation.shape.Extra = cyl1.frameTranslation.shape.extra;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   cyl1.frameTranslation.frame_b.r_0 = cyl1.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(cyl1.frameTranslation.frame_a.R,{cyl1.frameTranslation.r[1],cyl1.frameTranslation.r[2],cyl1.frameTranslation.r[3]});
//   cyl1.frameTranslation.frame_b.R.T[1,1] = cyl1.frameTranslation.frame_a.R.T[1,1];
//   cyl1.frameTranslation.frame_b.R.T[1,2] = cyl1.frameTranslation.frame_a.R.T[1,2];
//   cyl1.frameTranslation.frame_b.R.T[1,3] = cyl1.frameTranslation.frame_a.R.T[1,3];
//   cyl1.frameTranslation.frame_b.R.T[2,1] = cyl1.frameTranslation.frame_a.R.T[2,1];
//   cyl1.frameTranslation.frame_b.R.T[2,2] = cyl1.frameTranslation.frame_a.R.T[2,2];
//   cyl1.frameTranslation.frame_b.R.T[2,3] = cyl1.frameTranslation.frame_a.R.T[2,3];
//   cyl1.frameTranslation.frame_b.R.T[3,1] = cyl1.frameTranslation.frame_a.R.T[3,1];
//   cyl1.frameTranslation.frame_b.R.T[3,2] = cyl1.frameTranslation.frame_a.R.T[3,2];
//   cyl1.frameTranslation.frame_b.R.T[3,3] = cyl1.frameTranslation.frame_a.R.T[3,3];
//   cyl1.frameTranslation.frame_b.R.w[1] = cyl1.frameTranslation.frame_a.R.w[1];
//   cyl1.frameTranslation.frame_b.R.w[2] = cyl1.frameTranslation.frame_a.R.w[2];
//   cyl1.frameTranslation.frame_b.R.w[3] = cyl1.frameTranslation.frame_a.R.w[3];
//   0.0 = cyl1.frameTranslation.frame_a.f[1] + cyl1.frameTranslation.frame_b.f[1];
//   0.0 = cyl1.frameTranslation.frame_a.f[2] + cyl1.frameTranslation.frame_b.f[2];
//   0.0 = cyl1.frameTranslation.frame_a.f[3] + cyl1.frameTranslation.frame_b.f[3];
//   0.0 = cyl1.frameTranslation.frame_a.t[1] + cyl1.frameTranslation.frame_b.t[1] + (cyl1.frameTranslation.r[2] * cyl1.frameTranslation.frame_b.f[3] - cyl1.frameTranslation.r[3] * cyl1.frameTranslation.frame_b.f[2]);
//   0.0 = cyl1.frameTranslation.frame_a.t[2] + cyl1.frameTranslation.frame_b.t[2] + (cyl1.frameTranslation.r[3] * cyl1.frameTranslation.frame_b.f[1] - cyl1.frameTranslation.r[1] * cyl1.frameTranslation.frame_b.f[3]);
//   0.0 = cyl1.frameTranslation.frame_a.t[3] + cyl1.frameTranslation.frame_b.t[3] + (cyl1.frameTranslation.r[1] * cyl1.frameTranslation.frame_b.f[2] - cyl1.frameTranslation.r[2] * cyl1.frameTranslation.frame_b.f[1]);
//   cyl1.r_0[1] = cyl1.frame_a.r_0[1];
//   cyl1.r_0[2] = cyl1.frame_a.r_0[2];
//   cyl1.r_0[3] = cyl1.frame_a.r_0[3];
//   cyl1.v_0[1] = der(cyl1.r_0[1]);
//   cyl1.v_0[2] = der(cyl1.r_0[2]);
//   cyl1.v_0[3] = der(cyl1.r_0[3]);
//   cyl1.a_0[1] = der(cyl1.v_0[1]);
//   cyl1.a_0[2] = der(cyl1.v_0[2]);
//   cyl1.a_0[3] = der(cyl1.v_0[3]);
//   assert(cyl1.innerDiameter < cyl1.diameter,\"parameter innerDiameter is greater as parameter diameter.\");
//   cyl2.body.r_0[1] = cyl2.body.frame_a.r_0[1];
//   cyl2.body.r_0[2] = cyl2.body.frame_a.r_0[2];
//   cyl2.body.r_0[3] = cyl2.body.frame_a.r_0[3];
//   if true then
//   cyl2.body.Q[1] = 0.0;
//   cyl2.body.Q[2] = 0.0;
//   cyl2.body.Q[3] = 0.0;
//   cyl2.body.Q[4] = 1.0;
//   cyl2.body.phi[1] = 0.0;
//   cyl2.body.phi[2] = 0.0;
//   cyl2.body.phi[3] = 0.0;
//   cyl2.body.phi_d[1] = 0.0;
//   cyl2.body.phi_d[2] = 0.0;
//   cyl2.body.phi_d[3] = 0.0;
//   cyl2.body.phi_dd[1] = 0.0;
//   cyl2.body.phi_dd[2] = 0.0;
//   cyl2.body.phi_dd[3] = 0.0;
//   elseif cyl2.body.useQuaternions then
//   cyl2.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({cyl2.body.Q[1],cyl2.body.Q[2],cyl2.body.Q[3],cyl2.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({cyl2.body.Q[1],cyl2.body.Q[2],cyl2.body.Q[3],cyl2.body.Q[4]},{der(cyl2.body.Q[1]),der(cyl2.body.Q[2]),der(cyl2.body.Q[3]),der(cyl2.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({cyl2.body.Q[1],cyl2.body.Q[2],cyl2.body.Q[3],cyl2.body.Q[4]});
//   cyl2.body.phi[1] = 0.0;
//   cyl2.body.phi[2] = 0.0;
//   cyl2.body.phi[3] = 0.0;
//   cyl2.body.phi_d[1] = 0.0;
//   cyl2.body.phi_d[2] = 0.0;
//   cyl2.body.phi_d[3] = 0.0;
//   cyl2.body.phi_dd[1] = 0.0;
//   cyl2.body.phi_dd[2] = 0.0;
//   cyl2.body.phi_dd[3] = 0.0;
//   else
//   cyl2.body.phi_d[1] = der(cyl2.body.phi[1]);
//   cyl2.body.phi_d[2] = der(cyl2.body.phi[2]);
//   cyl2.body.phi_d[3] = der(cyl2.body.phi[3]);
//   cyl2.body.phi_dd[1] = der(cyl2.body.phi_d[1]);
//   cyl2.body.phi_dd[2] = der(cyl2.body.phi_d[2]);
//   cyl2.body.phi_dd[3] = der(cyl2.body.phi_d[3]);
//   cyl2.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({cyl2.body.sequence_angleStates[1],cyl2.body.sequence_angleStates[2],cyl2.body.sequence_angleStates[3]},{cyl2.body.phi[1],cyl2.body.phi[2],cyl2.body.phi[3]},{cyl2.body.phi_d[1],cyl2.body.phi_d[2],cyl2.body.phi_d[3]});
//   cyl2.body.Q[1] = 0.0;
//   cyl2.body.Q[2] = 0.0;
//   cyl2.body.Q[3] = 0.0;
//   cyl2.body.Q[4] = 1.0;
//   end if;
//   cyl2.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration({cyl2.body.frame_a.r_0[1],cyl2.body.frame_a.r_0[2],cyl2.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(cyl2.body.frame_a.R,{cyl2.body.r_CM[1],cyl2.body.r_CM[2],cyl2.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-013),world.mue);
//   cyl2.body.v_0[1] = der(cyl2.body.frame_a.r_0[1]);
//   cyl2.body.v_0[2] = der(cyl2.body.frame_a.r_0[2]);
//   cyl2.body.v_0[3] = der(cyl2.body.frame_a.r_0[3]);
//   cyl2.body.a_0[1] = der(cyl2.body.v_0[1]);
//   cyl2.body.a_0[2] = der(cyl2.body.v_0[2]);
//   cyl2.body.a_0[3] = der(cyl2.body.v_0[3]);
//   cyl2.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(cyl2.body.frame_a.R);
//   cyl2.body.z_a[1] = der(cyl2.body.w_a[1]);
//   cyl2.body.z_a[2] = der(cyl2.body.w_a[2]);
//   cyl2.body.z_a[3] = der(cyl2.body.w_a[3]);
//   cyl2.body.frame_a.f = cyl2.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(cyl2.body.frame_a.R,{cyl2.body.a_0[1] - cyl2.body.g_0[1],cyl2.body.a_0[2] - cyl2.body.g_0[2],cyl2.body.a_0[3] - cyl2.body.g_0[3]}) + {cyl2.body.z_a[2] * cyl2.body.r_CM[3] - cyl2.body.z_a[3] * cyl2.body.r_CM[2],cyl2.body.z_a[3] * cyl2.body.r_CM[1] - cyl2.body.z_a[1] * cyl2.body.r_CM[3],cyl2.body.z_a[1] * cyl2.body.r_CM[2] - cyl2.body.z_a[2] * cyl2.body.r_CM[1]} + {cyl2.body.w_a[2] * (cyl2.body.w_a[1] * cyl2.body.r_CM[2] - cyl2.body.w_a[2] * cyl2.body.r_CM[1]) - cyl2.body.w_a[3] * (cyl2.body.w_a[3] * cyl2.body.r_CM[1] - cyl2.body.w_a[1] * cyl2.body.r_CM[3]),cyl2.body.w_a[3] * (cyl2.body.w_a[2] * cyl2.body.r_CM[3] - cyl2.body.w_a[3] * cyl2.body.r_CM[2]) - cyl2.body.w_a[1] * (cyl2.body.w_a[1] * cyl2.body.r_CM[2] - cyl2.body.w_a[2] * cyl2.body.r_CM[1]),cyl2.body.w_a[1] * (cyl2.body.w_a[3] * cyl2.body.r_CM[1] - cyl2.body.w_a[1] * cyl2.body.r_CM[3]) - cyl2.body.w_a[2] * (cyl2.body.w_a[2] * cyl2.body.r_CM[3] - cyl2.body.w_a[3] * cyl2.body.r_CM[2])});
//   cyl2.body.frame_a.t[1] = cyl2.body.I[1,1] * cyl2.body.z_a[1] + cyl2.body.I[1,2] * cyl2.body.z_a[2] + cyl2.body.I[1,3] * cyl2.body.z_a[3] + (cyl2.body.w_a[2] * (cyl2.body.I[3,1] * cyl2.body.w_a[1] + cyl2.body.I[3,2] * cyl2.body.w_a[2] + cyl2.body.I[3,3] * cyl2.body.w_a[3]) - cyl2.body.w_a[3] * (cyl2.body.I[2,1] * cyl2.body.w_a[1] + cyl2.body.I[2,2] * cyl2.body.w_a[2] + cyl2.body.I[2,3] * cyl2.body.w_a[3])) + (cyl2.body.r_CM[2] * cyl2.body.frame_a.f[3] - cyl2.body.r_CM[3] * cyl2.body.frame_a.f[2]);
//   cyl2.body.frame_a.t[2] = cyl2.body.I[2,1] * cyl2.body.z_a[1] + cyl2.body.I[2,2] * cyl2.body.z_a[2] + cyl2.body.I[2,3] * cyl2.body.z_a[3] + (cyl2.body.w_a[3] * (cyl2.body.I[1,1] * cyl2.body.w_a[1] + cyl2.body.I[1,2] * cyl2.body.w_a[2] + cyl2.body.I[1,3] * cyl2.body.w_a[3]) - cyl2.body.w_a[1] * (cyl2.body.I[3,1] * cyl2.body.w_a[1] + cyl2.body.I[3,2] * cyl2.body.w_a[2] + cyl2.body.I[3,3] * cyl2.body.w_a[3])) + (cyl2.body.r_CM[3] * cyl2.body.frame_a.f[1] - cyl2.body.r_CM[1] * cyl2.body.frame_a.f[3]);
//   cyl2.body.frame_a.t[3] = cyl2.body.I[3,1] * cyl2.body.z_a[1] + cyl2.body.I[3,2] * cyl2.body.z_a[2] + cyl2.body.I[3,3] * cyl2.body.z_a[3] + (cyl2.body.w_a[1] * (cyl2.body.I[2,1] * cyl2.body.w_a[1] + cyl2.body.I[2,2] * cyl2.body.w_a[2] + cyl2.body.I[2,3] * cyl2.body.w_a[3]) - cyl2.body.w_a[2] * (cyl2.body.I[1,1] * cyl2.body.w_a[1] + cyl2.body.I[1,2] * cyl2.body.w_a[2] + cyl2.body.I[1,3] * cyl2.body.w_a[3])) + (cyl2.body.r_CM[1] * cyl2.body.frame_a.f[2] - cyl2.body.r_CM[2] * cyl2.body.frame_a.f[1]);
//   cyl2.frameTranslation.shape.R.T[1,1] = cyl2.frameTranslation.frame_a.R.T[1,1];
//   cyl2.frameTranslation.shape.R.T[1,2] = cyl2.frameTranslation.frame_a.R.T[1,2];
//   cyl2.frameTranslation.shape.R.T[1,3] = cyl2.frameTranslation.frame_a.R.T[1,3];
//   cyl2.frameTranslation.shape.R.T[2,1] = cyl2.frameTranslation.frame_a.R.T[2,1];
//   cyl2.frameTranslation.shape.R.T[2,2] = cyl2.frameTranslation.frame_a.R.T[2,2];
//   cyl2.frameTranslation.shape.R.T[2,3] = cyl2.frameTranslation.frame_a.R.T[2,3];
//   cyl2.frameTranslation.shape.R.T[3,1] = cyl2.frameTranslation.frame_a.R.T[3,1];
//   cyl2.frameTranslation.shape.R.T[3,2] = cyl2.frameTranslation.frame_a.R.T[3,2];
//   cyl2.frameTranslation.shape.R.T[3,3] = cyl2.frameTranslation.frame_a.R.T[3,3];
//   cyl2.frameTranslation.shape.R.w[1] = cyl2.frameTranslation.frame_a.R.w[1];
//   cyl2.frameTranslation.shape.R.w[2] = cyl2.frameTranslation.frame_a.R.w[2];
//   cyl2.frameTranslation.shape.R.w[3] = cyl2.frameTranslation.frame_a.R.w[3];
//   cyl2.frameTranslation.shape.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(cyl2.frameTranslation.shape.shapeType);
//   cyl2.frameTranslation.shape.rxvisobj[1] = cyl2.frameTranslation.shape.R.T[1,1] * cyl2.frameTranslation.shape.e_x[1] + cyl2.frameTranslation.shape.R.T[2,1] * cyl2.frameTranslation.shape.e_x[2] + cyl2.frameTranslation.shape.R.T[3,1] * cyl2.frameTranslation.shape.e_x[3];
//   cyl2.frameTranslation.shape.rxvisobj[2] = cyl2.frameTranslation.shape.R.T[1,2] * cyl2.frameTranslation.shape.e_x[1] + cyl2.frameTranslation.shape.R.T[2,2] * cyl2.frameTranslation.shape.e_x[2] + cyl2.frameTranslation.shape.R.T[3,2] * cyl2.frameTranslation.shape.e_x[3];
//   cyl2.frameTranslation.shape.rxvisobj[3] = cyl2.frameTranslation.shape.R.T[1,3] * cyl2.frameTranslation.shape.e_x[1] + cyl2.frameTranslation.shape.R.T[2,3] * cyl2.frameTranslation.shape.e_x[2] + cyl2.frameTranslation.shape.R.T[3,3] * cyl2.frameTranslation.shape.e_x[3];
//   cyl2.frameTranslation.shape.ryvisobj[1] = cyl2.frameTranslation.shape.R.T[1,1] * cyl2.frameTranslation.shape.e_y[1] + cyl2.frameTranslation.shape.R.T[2,1] * cyl2.frameTranslation.shape.e_y[2] + cyl2.frameTranslation.shape.R.T[3,1] * cyl2.frameTranslation.shape.e_y[3];
//   cyl2.frameTranslation.shape.ryvisobj[2] = cyl2.frameTranslation.shape.R.T[1,2] * cyl2.frameTranslation.shape.e_y[1] + cyl2.frameTranslation.shape.R.T[2,2] * cyl2.frameTranslation.shape.e_y[2] + cyl2.frameTranslation.shape.R.T[3,2] * cyl2.frameTranslation.shape.e_y[3];
//   cyl2.frameTranslation.shape.ryvisobj[3] = cyl2.frameTranslation.shape.R.T[1,3] * cyl2.frameTranslation.shape.e_y[1] + cyl2.frameTranslation.shape.R.T[2,3] * cyl2.frameTranslation.shape.e_y[2] + cyl2.frameTranslation.shape.R.T[3,3] * cyl2.frameTranslation.shape.e_y[3];
//   cyl2.frameTranslation.shape.rvisobj = cyl2.frameTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{cyl2.frameTranslation.shape.R.T[1,1],cyl2.frameTranslation.shape.R.T[1,2],cyl2.frameTranslation.shape.R.T[1,3]},{cyl2.frameTranslation.shape.R.T[2,1],cyl2.frameTranslation.shape.R.T[2,2],cyl2.frameTranslation.shape.R.T[2,3]},{cyl2.frameTranslation.shape.R.T[3,1],cyl2.frameTranslation.shape.R.T[3,2],cyl2.frameTranslation.shape.R.T[3,3]}},{cyl2.frameTranslation.shape.r_shape[1],cyl2.frameTranslation.shape.r_shape[2],cyl2.frameTranslation.shape.r_shape[3]});
//   cyl2.frameTranslation.shape.size[1] = cyl2.frameTranslation.shape.length;
//   cyl2.frameTranslation.shape.size[2] = cyl2.frameTranslation.shape.width;
//   cyl2.frameTranslation.shape.size[3] = cyl2.frameTranslation.shape.height;
//   cyl2.frameTranslation.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(cyl2.frameTranslation.shape.color[1] / 255.0,cyl2.frameTranslation.shape.color[2] / 255.0,cyl2.frameTranslation.shape.color[3] / 255.0,cyl2.frameTranslation.shape.specularCoefficient);
//   cyl2.frameTranslation.shape.Extra = cyl2.frameTranslation.shape.extra;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   cyl2.frameTranslation.frame_b.r_0 = cyl2.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(cyl2.frameTranslation.frame_a.R,{cyl2.frameTranslation.r[1],cyl2.frameTranslation.r[2],cyl2.frameTranslation.r[3]});
//   cyl2.frameTranslation.frame_b.R.T[1,1] = cyl2.frameTranslation.frame_a.R.T[1,1];
//   cyl2.frameTranslation.frame_b.R.T[1,2] = cyl2.frameTranslation.frame_a.R.T[1,2];
//   cyl2.frameTranslation.frame_b.R.T[1,3] = cyl2.frameTranslation.frame_a.R.T[1,3];
//   cyl2.frameTranslation.frame_b.R.T[2,1] = cyl2.frameTranslation.frame_a.R.T[2,1];
//   cyl2.frameTranslation.frame_b.R.T[2,2] = cyl2.frameTranslation.frame_a.R.T[2,2];
//   cyl2.frameTranslation.frame_b.R.T[2,3] = cyl2.frameTranslation.frame_a.R.T[2,3];
//   cyl2.frameTranslation.frame_b.R.T[3,1] = cyl2.frameTranslation.frame_a.R.T[3,1];
//   cyl2.frameTranslation.frame_b.R.T[3,2] = cyl2.frameTranslation.frame_a.R.T[3,2];
//   cyl2.frameTranslation.frame_b.R.T[3,3] = cyl2.frameTranslation.frame_a.R.T[3,3];
//   cyl2.frameTranslation.frame_b.R.w[1] = cyl2.frameTranslation.frame_a.R.w[1];
//   cyl2.frameTranslation.frame_b.R.w[2] = cyl2.frameTranslation.frame_a.R.w[2];
//   cyl2.frameTranslation.frame_b.R.w[3] = cyl2.frameTranslation.frame_a.R.w[3];
//   0.0 = cyl2.frameTranslation.frame_a.f[1] + cyl2.frameTranslation.frame_b.f[1];
//   0.0 = cyl2.frameTranslation.frame_a.f[2] + cyl2.frameTranslation.frame_b.f[2];
//   0.0 = cyl2.frameTranslation.frame_a.f[3] + cyl2.frameTranslation.frame_b.f[3];
//   0.0 = cyl2.frameTranslation.frame_a.t[1] + cyl2.frameTranslation.frame_b.t[1] + (cyl2.frameTranslation.r[2] * cyl2.frameTranslation.frame_b.f[3] - cyl2.frameTranslation.r[3] * cyl2.frameTranslation.frame_b.f[2]);
//   0.0 = cyl2.frameTranslation.frame_a.t[2] + cyl2.frameTranslation.frame_b.t[2] + (cyl2.frameTranslation.r[3] * cyl2.frameTranslation.frame_b.f[1] - cyl2.frameTranslation.r[1] * cyl2.frameTranslation.frame_b.f[3]);
//   0.0 = cyl2.frameTranslation.frame_a.t[3] + cyl2.frameTranslation.frame_b.t[3] + (cyl2.frameTranslation.r[1] * cyl2.frameTranslation.frame_b.f[2] - cyl2.frameTranslation.r[2] * cyl2.frameTranslation.frame_b.f[1]);
//   cyl2.r_0[1] = cyl2.frame_a.r_0[1];
//   cyl2.r_0[2] = cyl2.frame_a.r_0[2];
//   cyl2.r_0[3] = cyl2.frame_a.r_0[3];
//   cyl2.v_0[1] = der(cyl2.r_0[1]);
//   cyl2.v_0[2] = der(cyl2.r_0[2]);
//   cyl2.v_0[3] = der(cyl2.r_0[3]);
//   cyl2.a_0[1] = der(cyl2.v_0[1]);
//   cyl2.a_0[2] = der(cyl2.v_0[2]);
//   cyl2.a_0[3] = der(cyl2.v_0[3]);
//   assert(cyl2.innerDiameter < cyl2.diameter,\"parameter innerDiameter is greater as parameter diameter.\");
//   assert(true,\"Connector frame_resolve must be connected at least once and frame_resolve.r_0/.R must be set\");
//   torque1.basicTorque.frame_resolve.f[1] = 0.0;
//   torque1.basicTorque.frame_resolve.f[2] = 0.0;
//   torque1.basicTorque.frame_resolve.f[3] = 0.0;
//   torque1.basicTorque.frame_resolve.t[1] = 0.0;
//   torque1.basicTorque.frame_resolve.t[2] = 0.0;
//   torque1.basicTorque.frame_resolve.t[3] = 0.0;
//   torque1.basicTorque.r_0[1] = torque1.basicTorque.frame_b.r_0[1] - torque1.basicTorque.frame_a.r_0[1];
//   torque1.basicTorque.r_0[2] = torque1.basicTorque.frame_b.r_0[2] - torque1.basicTorque.frame_a.r_0[2];
//   torque1.basicTorque.r_0[3] = torque1.basicTorque.frame_b.r_0[3] - torque1.basicTorque.frame_a.r_0[3];
//   torque1.basicTorque.frame_a.f[1] = 0.0;
//   torque1.basicTorque.frame_a.f[2] = 0.0;
//   torque1.basicTorque.frame_a.f[3] = 0.0;
//   torque1.basicTorque.frame_b.f[1] = 0.0;
//   torque1.basicTorque.frame_b.f[2] = 0.0;
//   torque1.basicTorque.frame_b.f[3] = 0.0;
//   torque1.basicTorque.t_b_0 = -Modelica.Mechanics.MultiBody.Frames.resolve1(torque1.basicTorque.frame_b.R,{torque1.basicTorque.torque[1],torque1.basicTorque.torque[2],torque1.basicTorque.torque[3]});
//   torque1.basicTorque.frame_b.t[1] = -torque1.basicTorque.torque[1];
//   torque1.basicTorque.frame_b.t[2] = -torque1.basicTorque.torque[2];
//   torque1.basicTorque.frame_b.t[3] = -torque1.basicTorque.torque[3];
//   {0.0,0.0,0.0} = torque1.basicTorque.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve2(torque1.basicTorque.frame_a.R,{torque1.basicTorque.t_b_0[1],torque1.basicTorque.t_b_0[2],torque1.basicTorque.t_b_0[3]});
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   torque1.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   torque1.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   torque1.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   torque1.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   torque1.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   torque1.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   torque1.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   torque1.torqueArrow.R.T[1,1] = torque1.frame_b.R.T[1,1];
//   torque1.torqueArrow.R.T[1,2] = torque1.frame_b.R.T[1,2];
//   torque1.torqueArrow.R.T[1,3] = torque1.frame_b.R.T[1,3];
//   torque1.torqueArrow.R.T[2,1] = torque1.frame_b.R.T[2,1];
//   torque1.torqueArrow.R.T[2,2] = torque1.frame_b.R.T[2,2];
//   torque1.torqueArrow.R.T[2,3] = torque1.frame_b.R.T[2,3];
//   torque1.torqueArrow.R.T[3,1] = torque1.frame_b.R.T[3,1];
//   torque1.torqueArrow.R.T[3,2] = torque1.frame_b.R.T[3,2];
//   torque1.torqueArrow.R.T[3,3] = torque1.frame_b.R.T[3,3];
//   torque1.torqueArrow.R.w[1] = torque1.frame_b.R.w[1];
//   torque1.torqueArrow.R.w[2] = torque1.frame_b.R.w[2];
//   torque1.torqueArrow.R.w[3] = torque1.frame_b.R.w[3];
//   torque1.torqueArrow.arrowLine.R.T[1,1] = torque1.torqueArrow.R.T[1,1];
//   torque1.torqueArrow.arrowLine.R.T[1,2] = torque1.torqueArrow.R.T[1,2];
//   torque1.torqueArrow.arrowLine.R.T[1,3] = torque1.torqueArrow.R.T[1,3];
//   torque1.torqueArrow.arrowLine.R.T[2,1] = torque1.torqueArrow.R.T[2,1];
//   torque1.torqueArrow.arrowLine.R.T[2,2] = torque1.torqueArrow.R.T[2,2];
//   torque1.torqueArrow.arrowLine.R.T[2,3] = torque1.torqueArrow.R.T[2,3];
//   torque1.torqueArrow.arrowLine.R.T[3,1] = torque1.torqueArrow.R.T[3,1];
//   torque1.torqueArrow.arrowLine.R.T[3,2] = torque1.torqueArrow.R.T[3,2];
//   torque1.torqueArrow.arrowLine.R.T[3,3] = torque1.torqueArrow.R.T[3,3];
//   torque1.torqueArrow.arrowLine.R.w[1] = torque1.torqueArrow.R.w[1];
//   torque1.torqueArrow.arrowLine.R.w[2] = torque1.torqueArrow.R.w[2];
//   torque1.torqueArrow.arrowLine.R.w[3] = torque1.torqueArrow.R.w[3];
//   torque1.torqueArrow.arrowLine.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque1.torqueArrow.arrowLine.shapeType);
//   torque1.torqueArrow.arrowLine.rxvisobj[1] = torque1.torqueArrow.arrowLine.R.T[1,1] * torque1.torqueArrow.arrowLine.e_x[1] + torque1.torqueArrow.arrowLine.R.T[2,1] * torque1.torqueArrow.arrowLine.e_x[2] + torque1.torqueArrow.arrowLine.R.T[3,1] * torque1.torqueArrow.arrowLine.e_x[3];
//   torque1.torqueArrow.arrowLine.rxvisobj[2] = torque1.torqueArrow.arrowLine.R.T[1,2] * torque1.torqueArrow.arrowLine.e_x[1] + torque1.torqueArrow.arrowLine.R.T[2,2] * torque1.torqueArrow.arrowLine.e_x[2] + torque1.torqueArrow.arrowLine.R.T[3,2] * torque1.torqueArrow.arrowLine.e_x[3];
//   torque1.torqueArrow.arrowLine.rxvisobj[3] = torque1.torqueArrow.arrowLine.R.T[1,3] * torque1.torqueArrow.arrowLine.e_x[1] + torque1.torqueArrow.arrowLine.R.T[2,3] * torque1.torqueArrow.arrowLine.e_x[2] + torque1.torqueArrow.arrowLine.R.T[3,3] * torque1.torqueArrow.arrowLine.e_x[3];
//   torque1.torqueArrow.arrowLine.ryvisobj[1] = torque1.torqueArrow.arrowLine.R.T[1,1] * torque1.torqueArrow.arrowLine.e_y[1] + torque1.torqueArrow.arrowLine.R.T[2,1] * torque1.torqueArrow.arrowLine.e_y[2] + torque1.torqueArrow.arrowLine.R.T[3,1] * torque1.torqueArrow.arrowLine.e_y[3];
//   torque1.torqueArrow.arrowLine.ryvisobj[2] = torque1.torqueArrow.arrowLine.R.T[1,2] * torque1.torqueArrow.arrowLine.e_y[1] + torque1.torqueArrow.arrowLine.R.T[2,2] * torque1.torqueArrow.arrowLine.e_y[2] + torque1.torqueArrow.arrowLine.R.T[3,2] * torque1.torqueArrow.arrowLine.e_y[3];
//   torque1.torqueArrow.arrowLine.ryvisobj[3] = torque1.torqueArrow.arrowLine.R.T[1,3] * torque1.torqueArrow.arrowLine.e_y[1] + torque1.torqueArrow.arrowLine.R.T[2,3] * torque1.torqueArrow.arrowLine.e_y[2] + torque1.torqueArrow.arrowLine.R.T[3,3] * torque1.torqueArrow.arrowLine.e_y[3];
//   torque1.torqueArrow.arrowLine.rvisobj = torque1.torqueArrow.arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque1.torqueArrow.arrowLine.R.T[1,1],torque1.torqueArrow.arrowLine.R.T[1,2],torque1.torqueArrow.arrowLine.R.T[1,3]},{torque1.torqueArrow.arrowLine.R.T[2,1],torque1.torqueArrow.arrowLine.R.T[2,2],torque1.torqueArrow.arrowLine.R.T[2,3]},{torque1.torqueArrow.arrowLine.R.T[3,1],torque1.torqueArrow.arrowLine.R.T[3,2],torque1.torqueArrow.arrowLine.R.T[3,3]}},{torque1.torqueArrow.arrowLine.r_shape[1],torque1.torqueArrow.arrowLine.r_shape[2],torque1.torqueArrow.arrowLine.r_shape[3]});
//   torque1.torqueArrow.arrowLine.size[1] = torque1.torqueArrow.arrowLine.length;
//   torque1.torqueArrow.arrowLine.size[2] = torque1.torqueArrow.arrowLine.width;
//   torque1.torqueArrow.arrowLine.size[3] = torque1.torqueArrow.arrowLine.height;
//   torque1.torqueArrow.arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque1.torqueArrow.arrowLine.color[1] / 255.0,torque1.torqueArrow.arrowLine.color[2] / 255.0,torque1.torqueArrow.arrowLine.color[3] / 255.0,torque1.torqueArrow.arrowLine.specularCoefficient);
//   torque1.torqueArrow.arrowLine.Extra = torque1.torqueArrow.arrowLine.extra;
//   torque1.torqueArrow.arrowHead1.R.T[1,1] = torque1.torqueArrow.R.T[1,1];
//   torque1.torqueArrow.arrowHead1.R.T[1,2] = torque1.torqueArrow.R.T[1,2];
//   torque1.torqueArrow.arrowHead1.R.T[1,3] = torque1.torqueArrow.R.T[1,3];
//   torque1.torqueArrow.arrowHead1.R.T[2,1] = torque1.torqueArrow.R.T[2,1];
//   torque1.torqueArrow.arrowHead1.R.T[2,2] = torque1.torqueArrow.R.T[2,2];
//   torque1.torqueArrow.arrowHead1.R.T[2,3] = torque1.torqueArrow.R.T[2,3];
//   torque1.torqueArrow.arrowHead1.R.T[3,1] = torque1.torqueArrow.R.T[3,1];
//   torque1.torqueArrow.arrowHead1.R.T[3,2] = torque1.torqueArrow.R.T[3,2];
//   torque1.torqueArrow.arrowHead1.R.T[3,3] = torque1.torqueArrow.R.T[3,3];
//   torque1.torqueArrow.arrowHead1.R.w[1] = torque1.torqueArrow.R.w[1];
//   torque1.torqueArrow.arrowHead1.R.w[2] = torque1.torqueArrow.R.w[2];
//   torque1.torqueArrow.arrowHead1.R.w[3] = torque1.torqueArrow.R.w[3];
//   torque1.torqueArrow.arrowHead1.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque1.torqueArrow.arrowHead1.shapeType);
//   torque1.torqueArrow.arrowHead1.rxvisobj[1] = torque1.torqueArrow.arrowHead1.R.T[1,1] * torque1.torqueArrow.arrowHead1.e_x[1] + torque1.torqueArrow.arrowHead1.R.T[2,1] * torque1.torqueArrow.arrowHead1.e_x[2] + torque1.torqueArrow.arrowHead1.R.T[3,1] * torque1.torqueArrow.arrowHead1.e_x[3];
//   torque1.torqueArrow.arrowHead1.rxvisobj[2] = torque1.torqueArrow.arrowHead1.R.T[1,2] * torque1.torqueArrow.arrowHead1.e_x[1] + torque1.torqueArrow.arrowHead1.R.T[2,2] * torque1.torqueArrow.arrowHead1.e_x[2] + torque1.torqueArrow.arrowHead1.R.T[3,2] * torque1.torqueArrow.arrowHead1.e_x[3];
//   torque1.torqueArrow.arrowHead1.rxvisobj[3] = torque1.torqueArrow.arrowHead1.R.T[1,3] * torque1.torqueArrow.arrowHead1.e_x[1] + torque1.torqueArrow.arrowHead1.R.T[2,3] * torque1.torqueArrow.arrowHead1.e_x[2] + torque1.torqueArrow.arrowHead1.R.T[3,3] * torque1.torqueArrow.arrowHead1.e_x[3];
//   torque1.torqueArrow.arrowHead1.ryvisobj[1] = torque1.torqueArrow.arrowHead1.R.T[1,1] * torque1.torqueArrow.arrowHead1.e_y[1] + torque1.torqueArrow.arrowHead1.R.T[2,1] * torque1.torqueArrow.arrowHead1.e_y[2] + torque1.torqueArrow.arrowHead1.R.T[3,1] * torque1.torqueArrow.arrowHead1.e_y[3];
//   torque1.torqueArrow.arrowHead1.ryvisobj[2] = torque1.torqueArrow.arrowHead1.R.T[1,2] * torque1.torqueArrow.arrowHead1.e_y[1] + torque1.torqueArrow.arrowHead1.R.T[2,2] * torque1.torqueArrow.arrowHead1.e_y[2] + torque1.torqueArrow.arrowHead1.R.T[3,2] * torque1.torqueArrow.arrowHead1.e_y[3];
//   torque1.torqueArrow.arrowHead1.ryvisobj[3] = torque1.torqueArrow.arrowHead1.R.T[1,3] * torque1.torqueArrow.arrowHead1.e_y[1] + torque1.torqueArrow.arrowHead1.R.T[2,3] * torque1.torqueArrow.arrowHead1.e_y[2] + torque1.torqueArrow.arrowHead1.R.T[3,3] * torque1.torqueArrow.arrowHead1.e_y[3];
//   torque1.torqueArrow.arrowHead1.rvisobj = torque1.torqueArrow.arrowHead1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque1.torqueArrow.arrowHead1.R.T[1,1],torque1.torqueArrow.arrowHead1.R.T[1,2],torque1.torqueArrow.arrowHead1.R.T[1,3]},{torque1.torqueArrow.arrowHead1.R.T[2,1],torque1.torqueArrow.arrowHead1.R.T[2,2],torque1.torqueArrow.arrowHead1.R.T[2,3]},{torque1.torqueArrow.arrowHead1.R.T[3,1],torque1.torqueArrow.arrowHead1.R.T[3,2],torque1.torqueArrow.arrowHead1.R.T[3,3]}},{torque1.torqueArrow.arrowHead1.r_shape[1],torque1.torqueArrow.arrowHead1.r_shape[2],torque1.torqueArrow.arrowHead1.r_shape[3]});
//   torque1.torqueArrow.arrowHead1.size[1] = torque1.torqueArrow.arrowHead1.length;
//   torque1.torqueArrow.arrowHead1.size[2] = torque1.torqueArrow.arrowHead1.width;
//   torque1.torqueArrow.arrowHead1.size[3] = torque1.torqueArrow.arrowHead1.height;
//   torque1.torqueArrow.arrowHead1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque1.torqueArrow.arrowHead1.color[1] / 255.0,torque1.torqueArrow.arrowHead1.color[2] / 255.0,torque1.torqueArrow.arrowHead1.color[3] / 255.0,torque1.torqueArrow.arrowHead1.specularCoefficient);
//   torque1.torqueArrow.arrowHead1.Extra = torque1.torqueArrow.arrowHead1.extra;
//   torque1.torqueArrow.arrowHead2.R.T[1,1] = torque1.torqueArrow.R.T[1,1];
//   torque1.torqueArrow.arrowHead2.R.T[1,2] = torque1.torqueArrow.R.T[1,2];
//   torque1.torqueArrow.arrowHead2.R.T[1,3] = torque1.torqueArrow.R.T[1,3];
//   torque1.torqueArrow.arrowHead2.R.T[2,1] = torque1.torqueArrow.R.T[2,1];
//   torque1.torqueArrow.arrowHead2.R.T[2,2] = torque1.torqueArrow.R.T[2,2];
//   torque1.torqueArrow.arrowHead2.R.T[2,3] = torque1.torqueArrow.R.T[2,3];
//   torque1.torqueArrow.arrowHead2.R.T[3,1] = torque1.torqueArrow.R.T[3,1];
//   torque1.torqueArrow.arrowHead2.R.T[3,2] = torque1.torqueArrow.R.T[3,2];
//   torque1.torqueArrow.arrowHead2.R.T[3,3] = torque1.torqueArrow.R.T[3,3];
//   torque1.torqueArrow.arrowHead2.R.w[1] = torque1.torqueArrow.R.w[1];
//   torque1.torqueArrow.arrowHead2.R.w[2] = torque1.torqueArrow.R.w[2];
//   torque1.torqueArrow.arrowHead2.R.w[3] = torque1.torqueArrow.R.w[3];
//   torque1.torqueArrow.arrowHead2.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque1.torqueArrow.arrowHead2.shapeType);
//   torque1.torqueArrow.arrowHead2.rxvisobj[1] = torque1.torqueArrow.arrowHead2.R.T[1,1] * torque1.torqueArrow.arrowHead2.e_x[1] + torque1.torqueArrow.arrowHead2.R.T[2,1] * torque1.torqueArrow.arrowHead2.e_x[2] + torque1.torqueArrow.arrowHead2.R.T[3,1] * torque1.torqueArrow.arrowHead2.e_x[3];
//   torque1.torqueArrow.arrowHead2.rxvisobj[2] = torque1.torqueArrow.arrowHead2.R.T[1,2] * torque1.torqueArrow.arrowHead2.e_x[1] + torque1.torqueArrow.arrowHead2.R.T[2,2] * torque1.torqueArrow.arrowHead2.e_x[2] + torque1.torqueArrow.arrowHead2.R.T[3,2] * torque1.torqueArrow.arrowHead2.e_x[3];
//   torque1.torqueArrow.arrowHead2.rxvisobj[3] = torque1.torqueArrow.arrowHead2.R.T[1,3] * torque1.torqueArrow.arrowHead2.e_x[1] + torque1.torqueArrow.arrowHead2.R.T[2,3] * torque1.torqueArrow.arrowHead2.e_x[2] + torque1.torqueArrow.arrowHead2.R.T[3,3] * torque1.torqueArrow.arrowHead2.e_x[3];
//   torque1.torqueArrow.arrowHead2.ryvisobj[1] = torque1.torqueArrow.arrowHead2.R.T[1,1] * torque1.torqueArrow.arrowHead2.e_y[1] + torque1.torqueArrow.arrowHead2.R.T[2,1] * torque1.torqueArrow.arrowHead2.e_y[2] + torque1.torqueArrow.arrowHead2.R.T[3,1] * torque1.torqueArrow.arrowHead2.e_y[3];
//   torque1.torqueArrow.arrowHead2.ryvisobj[2] = torque1.torqueArrow.arrowHead2.R.T[1,2] * torque1.torqueArrow.arrowHead2.e_y[1] + torque1.torqueArrow.arrowHead2.R.T[2,2] * torque1.torqueArrow.arrowHead2.e_y[2] + torque1.torqueArrow.arrowHead2.R.T[3,2] * torque1.torqueArrow.arrowHead2.e_y[3];
//   torque1.torqueArrow.arrowHead2.ryvisobj[3] = torque1.torqueArrow.arrowHead2.R.T[1,3] * torque1.torqueArrow.arrowHead2.e_y[1] + torque1.torqueArrow.arrowHead2.R.T[2,3] * torque1.torqueArrow.arrowHead2.e_y[2] + torque1.torqueArrow.arrowHead2.R.T[3,3] * torque1.torqueArrow.arrowHead2.e_y[3];
//   torque1.torqueArrow.arrowHead2.rvisobj = torque1.torqueArrow.arrowHead2.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque1.torqueArrow.arrowHead2.R.T[1,1],torque1.torqueArrow.arrowHead2.R.T[1,2],torque1.torqueArrow.arrowHead2.R.T[1,3]},{torque1.torqueArrow.arrowHead2.R.T[2,1],torque1.torqueArrow.arrowHead2.R.T[2,2],torque1.torqueArrow.arrowHead2.R.T[2,3]},{torque1.torqueArrow.arrowHead2.R.T[3,1],torque1.torqueArrow.arrowHead2.R.T[3,2],torque1.torqueArrow.arrowHead2.R.T[3,3]}},{torque1.torqueArrow.arrowHead2.r_shape[1],torque1.torqueArrow.arrowHead2.r_shape[2],torque1.torqueArrow.arrowHead2.r_shape[3]});
//   torque1.torqueArrow.arrowHead2.size[1] = torque1.torqueArrow.arrowHead2.length;
//   torque1.torqueArrow.arrowHead2.size[2] = torque1.torqueArrow.arrowHead2.width;
//   torque1.torqueArrow.arrowHead2.size[3] = torque1.torqueArrow.arrowHead2.height;
//   torque1.torqueArrow.arrowHead2.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque1.torqueArrow.arrowHead2.color[1] / 255.0,torque1.torqueArrow.arrowHead2.color[2] / 255.0,torque1.torqueArrow.arrowHead2.color[3] / 255.0,torque1.torqueArrow.arrowHead2.specularCoefficient);
//   torque1.torqueArrow.arrowHead2.Extra = torque1.torqueArrow.arrowHead2.extra;
//   torque1.connectionLine.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque1.connectionLine.shapeType);
//   torque1.connectionLine.rxvisobj[1] = torque1.connectionLine.R.T[1,1] * torque1.connectionLine.e_x[1] + torque1.connectionLine.R.T[2,1] * torque1.connectionLine.e_x[2] + torque1.connectionLine.R.T[3,1] * torque1.connectionLine.e_x[3];
//   torque1.connectionLine.rxvisobj[2] = torque1.connectionLine.R.T[1,2] * torque1.connectionLine.e_x[1] + torque1.connectionLine.R.T[2,2] * torque1.connectionLine.e_x[2] + torque1.connectionLine.R.T[3,2] * torque1.connectionLine.e_x[3];
//   torque1.connectionLine.rxvisobj[3] = torque1.connectionLine.R.T[1,3] * torque1.connectionLine.e_x[1] + torque1.connectionLine.R.T[2,3] * torque1.connectionLine.e_x[2] + torque1.connectionLine.R.T[3,3] * torque1.connectionLine.e_x[3];
//   torque1.connectionLine.ryvisobj[1] = torque1.connectionLine.R.T[1,1] * torque1.connectionLine.e_y[1] + torque1.connectionLine.R.T[2,1] * torque1.connectionLine.e_y[2] + torque1.connectionLine.R.T[3,1] * torque1.connectionLine.e_y[3];
//   torque1.connectionLine.ryvisobj[2] = torque1.connectionLine.R.T[1,2] * torque1.connectionLine.e_y[1] + torque1.connectionLine.R.T[2,2] * torque1.connectionLine.e_y[2] + torque1.connectionLine.R.T[3,2] * torque1.connectionLine.e_y[3];
//   torque1.connectionLine.ryvisobj[3] = torque1.connectionLine.R.T[1,3] * torque1.connectionLine.e_y[1] + torque1.connectionLine.R.T[2,3] * torque1.connectionLine.e_y[2] + torque1.connectionLine.R.T[3,3] * torque1.connectionLine.e_y[3];
//   torque1.connectionLine.rvisobj = torque1.connectionLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque1.connectionLine.R.T[1,1],torque1.connectionLine.R.T[1,2],torque1.connectionLine.R.T[1,3]},{torque1.connectionLine.R.T[2,1],torque1.connectionLine.R.T[2,2],torque1.connectionLine.R.T[2,3]},{torque1.connectionLine.R.T[3,1],torque1.connectionLine.R.T[3,2],torque1.connectionLine.R.T[3,3]}},{torque1.connectionLine.r_shape[1],torque1.connectionLine.r_shape[2],torque1.connectionLine.r_shape[3]});
//   torque1.connectionLine.size[1] = torque1.connectionLine.length;
//   torque1.connectionLine.size[2] = torque1.connectionLine.width;
//   torque1.connectionLine.size[3] = torque1.connectionLine.height;
//   torque1.connectionLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque1.connectionLine.color[1] / 255.0,torque1.connectionLine.color[2] / 255.0,torque1.connectionLine.color[3] / 255.0,torque1.connectionLine.specularCoefficient);
//   torque1.connectionLine.Extra = torque1.connectionLine.extra;
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   sine[1].y = sine[1].offset + (if time < sine[1].startTime then 0.0 else sine[1].amplitude * sin(6.28318530717959 * (sine[1].freqHz * (time - sine[1].startTime)) + sine[1].phase));
//   sine[2].y = sine[2].offset + (if time < sine[2].startTime then 0.0 else sine[2].amplitude * sin(6.28318530717959 * (sine[2].freqHz * (time - sine[2].startTime)) + sine[2].phase));
//   sine[3].y = sine[3].offset + (if time < sine[3].startTime then 0.0 else sine[3].amplitude * sin(6.28318530717959 * (sine[3].freqHz * (time - sine[3].startTime)) + sine[3].phase));
//   fixed.shape.Form = 9.87e+025 + 1e+020 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixed.shape.shapeType);
//   fixed.shape.rxvisobj[1] = fixed.shape.R.T[1,1] * fixed.shape.e_x[1] + fixed.shape.R.T[2,1] * fixed.shape.e_x[2] + fixed.shape.R.T[3,1] * fixed.shape.e_x[3];
//   fixed.shape.rxvisobj[2] = fixed.shape.R.T[1,2] * fixed.shape.e_x[1] + fixed.shape.R.T[2,2] * fixed.shape.e_x[2] + fixed.shape.R.T[3,2] * fixed.shape.e_x[3];
//   fixed.shape.rxvisobj[3] = fixed.shape.R.T[1,3] * fixed.shape.e_x[1] + fixed.shape.R.T[2,3] * fixed.shape.e_x[2] + fixed.shape.R.T[3,3] * fixed.shape.e_x[3];
//   fixed.shape.ryvisobj[1] = fixed.shape.R.T[1,1] * fixed.shape.e_y[1] + fixed.shape.R.T[2,1] * fixed.shape.e_y[2] + fixed.shape.R.T[3,1] * fixed.shape.e_y[3];
//   fixed.shape.ryvisobj[2] = fixed.shape.R.T[1,2] * fixed.shape.e_y[1] + fixed.shape.R.T[2,2] * fixed.shape.e_y[2] + fixed.shape.R.T[3,2] * fixed.shape.e_y[3];
//   fixed.shape.ryvisobj[3] = fixed.shape.R.T[1,3] * fixed.shape.e_y[1] + fixed.shape.R.T[2,3] * fixed.shape.e_y[2] + fixed.shape.R.T[3,3] * fixed.shape.e_y[3];
//   fixed.shape.rvisobj = fixed.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixed.shape.R.T[1,1],fixed.shape.R.T[1,2],fixed.shape.R.T[1,3]},{fixed.shape.R.T[2,1],fixed.shape.R.T[2,2],fixed.shape.R.T[2,3]},{fixed.shape.R.T[3,1],fixed.shape.R.T[3,2],fixed.shape.R.T[3,3]}},{fixed.shape.r_shape[1],fixed.shape.r_shape[2],fixed.shape.r_shape[3]});
//   fixed.shape.size[1] = fixed.shape.length;
//   fixed.shape.size[2] = fixed.shape.width;
//   fixed.shape.size[3] = fixed.shape.height;
//   fixed.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixed.shape.color[1] / 255.0,fixed.shape.color[2] / 255.0,fixed.shape.color[3] / 255.0,fixed.shape.specularCoefficient);
//   fixed.shape.Extra = fixed.shape.extra;
//   fixed.frame_b.r_0[1] = fixed.r[1];
//   fixed.frame_b.r_0[2] = fixed.r[2];
//   fixed.frame_b.r_0[3] = fixed.r[3];
//   fixed.frame_b.R.w[3] = 0.0;
//   fixed.frame_b.R.w[2] = 0.0;
//   fixed.frame_b.R.w[1] = 0.0;
//   fixed.frame_b.R.T[3,3] = 1.0;
//   fixed.frame_b.R.T[3,2] = 0.0;
//   fixed.frame_b.R.T[3,1] = 0.0;
//   fixed.frame_b.R.T[2,3] = 0.0;
//   fixed.frame_b.R.T[2,2] = 1.0;
//   fixed.frame_b.R.T[2,1] = 0.0;
//   fixed.frame_b.R.T[1,3] = 0.0;
//   fixed.frame_b.R.T[1,2] = 0.0;
//   fixed.frame_b.R.T[1,1] = 1.0;
//   inertia1.phi = inertia1.flange_a.phi;
//   inertia1.phi = inertia1.flange_b.phi;
//   inertia1.w = der(inertia1.phi);
//   inertia1.a = der(inertia1.w);
//   inertia1.J * inertia1.a = inertia1.flange_a.tau + inertia1.flange_b.tau;
//   idealGear.phi_a = idealGear.flange_a.phi - idealGear.phi_support;
//   idealGear.phi_b = idealGear.flange_b.phi - idealGear.phi_support;
//   idealGear.phi_a = idealGear.ratio * idealGear.phi_b;
//   0.0 = idealGear.ratio * idealGear.flange_a.tau + idealGear.flange_b.tau;
//   inertia2.phi = inertia2.flange_a.phi;
//   inertia2.phi = inertia2.flange_b.phi;
//   inertia2.w = der(inertia2.phi);
//   inertia2.a = der(inertia2.w);
//   inertia2.J * inertia2.a = inertia2.flange_a.tau + inertia2.flange_b.tau;
//   torque2.flange.tau = -torque2.tau;
//   mounting1D.housing.frame_a.f[1] = 0.0;
//   mounting1D.housing.frame_a.f[2] = 0.0;
//   mounting1D.housing.frame_a.f[3] = 0.0;
//   mounting1D.housing.frame_a.t[1] = mounting1D.housing.t[1];
//   mounting1D.housing.frame_a.t[2] = mounting1D.housing.t[2];
//   mounting1D.housing.frame_a.t[3] = mounting1D.housing.t[3];
//   mounting1D.flange_b.phi = mounting1D.phi0;
//   world.frame_b.t[1] + gearConstraint.bearing.t[1] + torque1.frame_a.t[1] = 0.0;
//   world.frame_b.t[2] + gearConstraint.bearing.t[2] + torque1.frame_a.t[2] = 0.0;
//   world.frame_b.t[3] + gearConstraint.bearing.t[3] + torque1.frame_a.t[3] = 0.0;
//   world.frame_b.f[1] + gearConstraint.bearing.f[1] + torque1.frame_a.f[1] = 0.0;
//   world.frame_b.f[2] + gearConstraint.bearing.f[2] + torque1.frame_a.f[2] = 0.0;
//   world.frame_b.f[3] + gearConstraint.bearing.f[3] + torque1.frame_a.f[3] = 0.0;
//   gearConstraint.frame_a.t[1] + cyl1.frame_b.t[1] = 0.0;
//   gearConstraint.frame_a.t[2] + cyl1.frame_b.t[2] = 0.0;
//   gearConstraint.frame_a.t[3] + cyl1.frame_b.t[3] = 0.0;
//   gearConstraint.frame_a.f[1] + cyl1.frame_b.f[1] = 0.0;
//   gearConstraint.frame_a.f[2] + cyl1.frame_b.f[2] = 0.0;
//   gearConstraint.frame_a.f[3] + cyl1.frame_b.f[3] = 0.0;
//   gearConstraint.frame_b.t[1] + cyl2.frame_a.t[1] = 0.0;
//   gearConstraint.frame_b.t[2] + cyl2.frame_a.t[2] = 0.0;
//   gearConstraint.frame_b.t[3] + cyl2.frame_a.t[3] = 0.0;
//   gearConstraint.frame_b.f[1] + cyl2.frame_a.f[1] = 0.0;
//   gearConstraint.frame_b.f[2] + cyl2.frame_a.f[2] = 0.0;
//   gearConstraint.frame_b.f[3] + cyl2.frame_a.f[3] = 0.0;
//   gearConstraint.idealGear.flange_a.tau + gearConstraint.actuatedRevolute_a.axis.tau = 0.0;
//   gearConstraint.idealGear.flange_b.tau + gearConstraint.actuatedRevolute_b.axis.tau = 0.0;
//   gearConstraint.actuatedRevolute_a.frame_a.t[1] + gearConstraint.fixedTranslation2.frame_b.t[1] = 0.0;
//   gearConstraint.actuatedRevolute_a.frame_a.t[2] + gearConstraint.fixedTranslation2.frame_b.t[2] = 0.0;
//   gearConstraint.actuatedRevolute_a.frame_a.t[3] + gearConstraint.fixedTranslation2.frame_b.t[3] = 0.0;
//   gearConstraint.actuatedRevolute_a.frame_a.f[1] + gearConstraint.fixedTranslation2.frame_b.f[1] = 0.0;
//   gearConstraint.actuatedRevolute_a.frame_a.f[2] + gearConstraint.fixedTranslation2.frame_b.f[2] = 0.0;
//   gearConstraint.actuatedRevolute_a.frame_a.f[3] + gearConstraint.fixedTranslation2.frame_b.f[3] = 0.0;
//   (-gearConstraint.frame_a.t[1]) + gearConstraint.actuatedRevolute_a.frame_b.t[1] = 0.0;
//   (-gearConstraint.frame_a.t[2]) + gearConstraint.actuatedRevolute_a.frame_b.t[2] = 0.0;
//   (-gearConstraint.frame_a.t[3]) + gearConstraint.actuatedRevolute_a.frame_b.t[3] = 0.0;
//   (-gearConstraint.frame_a.f[1]) + gearConstraint.actuatedRevolute_a.frame_b.f[1] = 0.0;
//   (-gearConstraint.frame_a.f[2]) + gearConstraint.actuatedRevolute_a.frame_b.f[2] = 0.0;
//   (-gearConstraint.frame_a.f[3]) + gearConstraint.actuatedRevolute_a.frame_b.f[3] = 0.0;
//   gearConstraint.actuatedRevolute_a.fixed.flange.tau + (-gearConstraint.actuatedRevolute_a.support.tau) = 0.0;
//   gearConstraint.actuatedRevolute_a.support.tau = 0.0;
//   (-gearConstraint.actuatedRevolute_a.axis.tau) + gearConstraint.actuatedRevolute_a.internalAxis.flange.tau = 0.0;
//   gearConstraint.actuatedRevolute_a.fixed.flange.phi = gearConstraint.actuatedRevolute_a.support.phi;
//   gearConstraint.actuatedRevolute_a.axis.phi = gearConstraint.actuatedRevolute_a.internalAxis.flange.phi;
//   gearConstraint.actuatedRevolute_b.frame_a.t[1] + gearConstraint.fixedTranslation1.frame_b.t[1] = 0.0;
//   gearConstraint.actuatedRevolute_b.frame_a.t[2] + gearConstraint.fixedTranslation1.frame_b.t[2] = 0.0;
//   gearConstraint.actuatedRevolute_b.frame_a.t[3] + gearConstraint.fixedTranslation1.frame_b.t[3] = 0.0;
//   gearConstraint.actuatedRevolute_b.frame_a.f[1] + gearConstraint.fixedTranslation1.frame_b.f[1] = 0.0;
//   gearConstraint.actuatedRevolute_b.frame_a.f[2] + gearConstraint.fixedTranslation1.frame_b.f[2] = 0.0;
//   gearConstraint.actuatedRevolute_b.frame_a.f[3] + gearConstraint.fixedTranslation1.frame_b.f[3] = 0.0;
//   (-gearConstraint.frame_b.t[1]) + gearConstraint.actuatedRevolute_b.frame_b.t[1] = 0.0;
//   (-gearConstraint.frame_b.t[2]) + gearConstraint.actuatedRevolute_b.frame_b.t[2] = 0.0;
//   (-gearConstraint.frame_b.t[3]) + gearConstraint.actuatedRevolute_b.frame_b.t[3] = 0.0;
//   (-gearConstraint.frame_b.f[1]) + gearConstraint.actuatedRevolute_b.frame_b.f[1] = 0.0;
//   (-gearConstraint.frame_b.f[2]) + gearConstraint.actuatedRevolute_b.frame_b.f[2] = 0.0;
//   (-gearConstraint.frame_b.f[3]) + gearConstraint.actuatedRevolute_b.frame_b.f[3] = 0.0;
//   gearConstraint.actuatedRevolute_b.fixed.flange.tau + (-gearConstraint.actuatedRevolute_b.support.tau) = 0.0;
//   gearConstraint.actuatedRevolute_b.support.tau = 0.0;
//   (-gearConstraint.actuatedRevolute_b.axis.tau) + gearConstraint.actuatedRevolute_b.internalAxis.flange.tau = 0.0;
//   gearConstraint.actuatedRevolute_b.fixed.flange.phi = gearConstraint.actuatedRevolute_b.support.phi;
//   gearConstraint.actuatedRevolute_b.axis.phi = gearConstraint.actuatedRevolute_b.internalAxis.flange.phi;
//   (-gearConstraint.bearing.t[1]) + gearConstraint.fixedTranslation2.frame_a.t[1] + gearConstraint.fixedTranslation1.frame_a.t[1] = 0.0;
//   (-gearConstraint.bearing.t[2]) + gearConstraint.fixedTranslation2.frame_a.t[2] + gearConstraint.fixedTranslation1.frame_a.t[2] = 0.0;
//   (-gearConstraint.bearing.t[3]) + gearConstraint.fixedTranslation2.frame_a.t[3] + gearConstraint.fixedTranslation1.frame_a.t[3] = 0.0;
//   (-gearConstraint.bearing.f[1]) + gearConstraint.fixedTranslation2.frame_a.f[1] + gearConstraint.fixedTranslation1.frame_a.f[1] = 0.0;
//   (-gearConstraint.bearing.f[2]) + gearConstraint.fixedTranslation2.frame_a.f[2] + gearConstraint.fixedTranslation1.frame_a.f[2] = 0.0;
//   (-gearConstraint.bearing.f[3]) + gearConstraint.fixedTranslation2.frame_a.f[3] + gearConstraint.fixedTranslation1.frame_a.f[3] = 0.0;
//   gearConstraint.actuatedRevolute_a.axis.phi = gearConstraint.idealGear.flange_a.phi;
//   gearConstraint.actuatedRevolute_b.axis.phi = gearConstraint.idealGear.flange_b.phi;
//   gearConstraint.actuatedRevolute_a.frame_a.r_0[3] = gearConstraint.fixedTranslation2.frame_b.r_0[3];
//   gearConstraint.actuatedRevolute_a.frame_a.r_0[2] = gearConstraint.fixedTranslation2.frame_b.r_0[2];
//   gearConstraint.actuatedRevolute_a.frame_a.r_0[1] = gearConstraint.fixedTranslation2.frame_b.r_0[1];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[3,3] = gearConstraint.fixedTranslation2.frame_b.R.T[3,3];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[3,2] = gearConstraint.fixedTranslation2.frame_b.R.T[3,2];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[3,1] = gearConstraint.fixedTranslation2.frame_b.R.T[3,1];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[2,3] = gearConstraint.fixedTranslation2.frame_b.R.T[2,3];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[2,2] = gearConstraint.fixedTranslation2.frame_b.R.T[2,2];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[2,1] = gearConstraint.fixedTranslation2.frame_b.R.T[2,1];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[1,3] = gearConstraint.fixedTranslation2.frame_b.R.T[1,3];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[1,2] = gearConstraint.fixedTranslation2.frame_b.R.T[1,2];
//   gearConstraint.actuatedRevolute_a.frame_a.R.T[1,1] = gearConstraint.fixedTranslation2.frame_b.R.T[1,1];
//   gearConstraint.actuatedRevolute_a.frame_a.R.w[3] = gearConstraint.fixedTranslation2.frame_b.R.w[3];
//   gearConstraint.actuatedRevolute_a.frame_a.R.w[2] = gearConstraint.fixedTranslation2.frame_b.R.w[2];
//   gearConstraint.actuatedRevolute_a.frame_a.R.w[1] = gearConstraint.fixedTranslation2.frame_b.R.w[1];
//   gearConstraint.bearing.r_0[3] = gearConstraint.fixedTranslation1.frame_a.r_0[3];
//   gearConstraint.bearing.r_0[3] = gearConstraint.fixedTranslation2.frame_a.r_0[3];
//   gearConstraint.bearing.r_0[2] = gearConstraint.fixedTranslation1.frame_a.r_0[2];
//   gearConstraint.bearing.r_0[2] = gearConstraint.fixedTranslation2.frame_a.r_0[2];
//   gearConstraint.bearing.r_0[1] = gearConstraint.fixedTranslation1.frame_a.r_0[1];
//   gearConstraint.bearing.r_0[1] = gearConstraint.fixedTranslation2.frame_a.r_0[1];
//   gearConstraint.bearing.R.T[3,3] = gearConstraint.fixedTranslation1.frame_a.R.T[3,3];
//   gearConstraint.bearing.R.T[3,3] = gearConstraint.fixedTranslation2.frame_a.R.T[3,3];
//   gearConstraint.bearing.R.T[3,2] = gearConstraint.fixedTranslation1.frame_a.R.T[3,2];
//   gearConstraint.bearing.R.T[3,2] = gearConstraint.fixedTranslation2.frame_a.R.T[3,2];
//   gearConstraint.bearing.R.T[3,1] = gearConstraint.fixedTranslation1.frame_a.R.T[3,1];
//   gearConstraint.bearing.R.T[3,1] = gearConstraint.fixedTranslation2.frame_a.R.T[3,1];
//   gearConstraint.bearing.R.T[2,3] = gearConstraint.fixedTranslation1.frame_a.R.T[2,3];
//   gearConstraint.bearing.R.T[2,3] = gearConstraint.fixedTranslation2.frame_a.R.T[2,3];
//   gearConstraint.bearing.R.T[2,2] = gearConstraint.fixedTranslation1.frame_a.R.T[2,2];
//   gearConstraint.bearing.R.T[2,2] = gearConstraint.fixedTranslation2.frame_a.R.T[2,2];
//   gearConstraint.bearing.R.T[2,1] = gearConstraint.fixedTranslation1.frame_a.R.T[2,1];
//   gearConstraint.bearing.R.T[2,1] = gearConstraint.fixedTranslation2.frame_a.R.T[2,1];
//   gearConstraint.bearing.R.T[1,3] = gearConstraint.fixedTranslation1.frame_a.R.T[1,3];
//   gearConstraint.bearing.R.T[1,3] = gearConstraint.fixedTranslation2.frame_a.R.T[1,3];
//   gearConstraint.bearing.R.T[1,2] = gearConstraint.fixedTranslation1.frame_a.R.T[1,2];
//   gearConstraint.bearing.R.T[1,2] = gearConstraint.fixedTranslation2.frame_a.R.T[1,2];
//   gearConstraint.bearing.R.T[1,1] = gearConstraint.fixedTranslation1.frame_a.R.T[1,1];
//   gearConstraint.bearing.R.T[1,1] = gearConstraint.fixedTranslation2.frame_a.R.T[1,1];
//   gearConstraint.bearing.R.w[3] = gearConstraint.fixedTranslation1.frame_a.R.w[3];
//   gearConstraint.bearing.R.w[3] = gearConstraint.fixedTranslation2.frame_a.R.w[3];
//   gearConstraint.bearing.R.w[2] = gearConstraint.fixedTranslation1.frame_a.R.w[2];
//   gearConstraint.bearing.R.w[2] = gearConstraint.fixedTranslation2.frame_a.R.w[2];
//   gearConstraint.bearing.R.w[1] = gearConstraint.fixedTranslation1.frame_a.R.w[1];
//   gearConstraint.bearing.R.w[1] = gearConstraint.fixedTranslation2.frame_a.R.w[1];
//   gearConstraint.actuatedRevolute_b.frame_a.r_0[3] = gearConstraint.fixedTranslation1.frame_b.r_0[3];
//   gearConstraint.actuatedRevolute_b.frame_a.r_0[2] = gearConstraint.fixedTranslation1.frame_b.r_0[2];
//   gearConstraint.actuatedRevolute_b.frame_a.r_0[1] = gearConstraint.fixedTranslation1.frame_b.r_0[1];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[3,3] = gearConstraint.fixedTranslation1.frame_b.R.T[3,3];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[3,2] = gearConstraint.fixedTranslation1.frame_b.R.T[3,2];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[3,1] = gearConstraint.fixedTranslation1.frame_b.R.T[3,1];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[2,3] = gearConstraint.fixedTranslation1.frame_b.R.T[2,3];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[2,2] = gearConstraint.fixedTranslation1.frame_b.R.T[2,2];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[2,1] = gearConstraint.fixedTranslation1.frame_b.R.T[2,1];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[1,3] = gearConstraint.fixedTranslation1.frame_b.R.T[1,3];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[1,2] = gearConstraint.fixedTranslation1.frame_b.R.T[1,2];
//   gearConstraint.actuatedRevolute_b.frame_a.R.T[1,1] = gearConstraint.fixedTranslation1.frame_b.R.T[1,1];
//   gearConstraint.actuatedRevolute_b.frame_a.R.w[3] = gearConstraint.fixedTranslation1.frame_b.R.w[3];
//   gearConstraint.actuatedRevolute_b.frame_a.R.w[2] = gearConstraint.fixedTranslation1.frame_b.R.w[2];
//   gearConstraint.actuatedRevolute_b.frame_a.R.w[1] = gearConstraint.fixedTranslation1.frame_b.R.w[1];
//   gearConstraint.actuatedRevolute_a.frame_b.r_0[3] = gearConstraint.frame_a.r_0[3];
//   gearConstraint.actuatedRevolute_a.frame_b.r_0[2] = gearConstraint.frame_a.r_0[2];
//   gearConstraint.actuatedRevolute_a.frame_b.r_0[1] = gearConstraint.frame_a.r_0[1];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[3,3] = gearConstraint.frame_a.R.T[3,3];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[3,2] = gearConstraint.frame_a.R.T[3,2];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[3,1] = gearConstraint.frame_a.R.T[3,1];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[2,3] = gearConstraint.frame_a.R.T[2,3];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[2,2] = gearConstraint.frame_a.R.T[2,2];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[2,1] = gearConstraint.frame_a.R.T[2,1];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[1,3] = gearConstraint.frame_a.R.T[1,3];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[1,2] = gearConstraint.frame_a.R.T[1,2];
//   gearConstraint.actuatedRevolute_a.frame_b.R.T[1,1] = gearConstraint.frame_a.R.T[1,1];
//   gearConstraint.actuatedRevolute_a.frame_b.R.w[3] = gearConstraint.frame_a.R.w[3];
//   gearConstraint.actuatedRevolute_a.frame_b.R.w[2] = gearConstraint.frame_a.R.w[2];
//   gearConstraint.actuatedRevolute_a.frame_b.R.w[1] = gearConstraint.frame_a.R.w[1];
//   gearConstraint.actuatedRevolute_b.frame_b.r_0[3] = gearConstraint.frame_b.r_0[3];
//   gearConstraint.actuatedRevolute_b.frame_b.r_0[2] = gearConstraint.frame_b.r_0[2];
//   gearConstraint.actuatedRevolute_b.frame_b.r_0[1] = gearConstraint.frame_b.r_0[1];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[3,3] = gearConstraint.frame_b.R.T[3,3];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[3,2] = gearConstraint.frame_b.R.T[3,2];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[3,1] = gearConstraint.frame_b.R.T[3,1];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[2,3] = gearConstraint.frame_b.R.T[2,3];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[2,2] = gearConstraint.frame_b.R.T[2,2];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[2,1] = gearConstraint.frame_b.R.T[2,1];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[1,3] = gearConstraint.frame_b.R.T[1,3];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[1,2] = gearConstraint.frame_b.R.T[1,2];
//   gearConstraint.actuatedRevolute_b.frame_b.R.T[1,1] = gearConstraint.frame_b.R.T[1,1];
//   gearConstraint.actuatedRevolute_b.frame_b.R.w[3] = gearConstraint.frame_b.R.w[3];
//   gearConstraint.actuatedRevolute_b.frame_b.R.w[2] = gearConstraint.frame_b.R.w[2];
//   gearConstraint.actuatedRevolute_b.frame_b.R.w[1] = gearConstraint.frame_b.R.w[1];
//   cyl1.frame_a.t[1] + torque1.frame_b.t[1] = 0.0;
//   cyl1.frame_a.t[2] + torque1.frame_b.t[2] = 0.0;
//   cyl1.frame_a.t[3] + torque1.frame_b.t[3] = 0.0;
//   cyl1.frame_a.f[1] + torque1.frame_b.f[1] = 0.0;
//   cyl1.frame_a.f[2] + torque1.frame_b.f[2] = 0.0;
//   cyl1.frame_a.f[3] + torque1.frame_b.f[3] = 0.0;
//   (-cyl1.frame_a.t[1]) + cyl1.body.frame_a.t[1] + cyl1.frameTranslation.frame_a.t[1] = 0.0;
//   (-cyl1.frame_a.t[2]) + cyl1.body.frame_a.t[2] + cyl1.frameTranslation.frame_a.t[2] = 0.0;
//   (-cyl1.frame_a.t[3]) + cyl1.body.frame_a.t[3] + cyl1.frameTranslation.frame_a.t[3] = 0.0;
//   (-cyl1.frame_a.f[1]) + cyl1.body.frame_a.f[1] + cyl1.frameTranslation.frame_a.f[1] = 0.0;
//   (-cyl1.frame_a.f[2]) + cyl1.body.frame_a.f[2] + cyl1.frameTranslation.frame_a.f[2] = 0.0;
//   (-cyl1.frame_a.f[3]) + cyl1.body.frame_a.f[3] + cyl1.frameTranslation.frame_a.f[3] = 0.0;
//   (-cyl1.frame_b.t[1]) + cyl1.frameTranslation.frame_b.t[1] = 0.0;
//   (-cyl1.frame_b.t[2]) + cyl1.frameTranslation.frame_b.t[2] = 0.0;
//   (-cyl1.frame_b.t[3]) + cyl1.frameTranslation.frame_b.t[3] = 0.0;
//   (-cyl1.frame_b.f[1]) + cyl1.frameTranslation.frame_b.f[1] = 0.0;
//   (-cyl1.frame_b.f[2]) + cyl1.frameTranslation.frame_b.f[2] = 0.0;
//   (-cyl1.frame_b.f[3]) + cyl1.frameTranslation.frame_b.f[3] = 0.0;
//   cyl1.body.frame_a.r_0[3] = cyl1.frameTranslation.frame_a.r_0[3];
//   cyl1.body.frame_a.r_0[3] = cyl1.frame_a.r_0[3];
//   cyl1.body.frame_a.r_0[2] = cyl1.frameTranslation.frame_a.r_0[2];
//   cyl1.body.frame_a.r_0[2] = cyl1.frame_a.r_0[2];
//   cyl1.body.frame_a.r_0[1] = cyl1.frameTranslation.frame_a.r_0[1];
//   cyl1.body.frame_a.r_0[1] = cyl1.frame_a.r_0[1];
//   cyl1.body.frame_a.R.T[3,3] = cyl1.frameTranslation.frame_a.R.T[3,3];
//   cyl1.body.frame_a.R.T[3,3] = cyl1.frame_a.R.T[3,3];
//   cyl1.body.frame_a.R.T[3,2] = cyl1.frameTranslation.frame_a.R.T[3,2];
//   cyl1.body.frame_a.R.T[3,2] = cyl1.frame_a.R.T[3,2];
//   cyl1.body.frame_a.R.T[3,1] = cyl1.frameTranslation.frame_a.R.T[3,1];
//   cyl1.body.frame_a.R.T[3,1] = cyl1.frame_a.R.T[3,1];
//   cyl1.body.frame_a.R.T[2,3] = cyl1.frameTranslation.frame_a.R.T[2,3];
//   cyl1.body.frame_a.R.T[2,3] = cyl1.frame_a.R.T[2,3];
//   cyl1.body.frame_a.R.T[2,2] = cyl1.frameTranslation.frame_a.R.T[2,2];
//   cyl1.body.frame_a.R.T[2,2] = cyl1.frame_a.R.T[2,2];
//   cyl1.body.frame_a.R.T[2,1] = cyl1.frameTranslation.frame_a.R.T[2,1];
//   cyl1.body.frame_a.R.T[2,1] = cyl1.frame_a.R.T[2,1];
//   cyl1.body.frame_a.R.T[1,3] = cyl1.frameTranslation.frame_a.R.T[1,3];
//   cyl1.body.frame_a.R.T[1,3] = cyl1.frame_a.R.T[1,3];
//   cyl1.body.frame_a.R.T[1,2] = cyl1.frameTranslation.frame_a.R.T[1,2];
//   cyl1.body.frame_a.R.T[1,2] = cyl1.frame_a.R.T[1,2];
//   cyl1.body.frame_a.R.T[1,1] = cyl1.frameTranslation.frame_a.R.T[1,1];
//   cyl1.body.frame_a.R.T[1,1] = cyl1.frame_a.R.T[1,1];
//   cyl1.body.frame_a.R.w[3] = cyl1.frameTranslation.frame_a.R.w[3];
//   cyl1.body.frame_a.R.w[3] = cyl1.frame_a.R.w[3];
//   cyl1.body.frame_a.R.w[2] = cyl1.frameTranslation.frame_a.R.w[2];
//   cyl1.body.frame_a.R.w[2] = cyl1.frame_a.R.w[2];
//   cyl1.body.frame_a.R.w[1] = cyl1.frameTranslation.frame_a.R.w[1];
//   cyl1.body.frame_a.R.w[1] = cyl1.frame_a.R.w[1];
//   cyl1.frameTranslation.frame_b.r_0[3] = cyl1.frame_b.r_0[3];
//   cyl1.frameTranslation.frame_b.r_0[2] = cyl1.frame_b.r_0[2];
//   cyl1.frameTranslation.frame_b.r_0[1] = cyl1.frame_b.r_0[1];
//   cyl1.frameTranslation.frame_b.R.T[3,3] = cyl1.frame_b.R.T[3,3];
//   cyl1.frameTranslation.frame_b.R.T[3,2] = cyl1.frame_b.R.T[3,2];
//   cyl1.frameTranslation.frame_b.R.T[3,1] = cyl1.frame_b.R.T[3,1];
//   cyl1.frameTranslation.frame_b.R.T[2,3] = cyl1.frame_b.R.T[2,3];
//   cyl1.frameTranslation.frame_b.R.T[2,2] = cyl1.frame_b.R.T[2,2];
//   cyl1.frameTranslation.frame_b.R.T[2,1] = cyl1.frame_b.R.T[2,1];
//   cyl1.frameTranslation.frame_b.R.T[1,3] = cyl1.frame_b.R.T[1,3];
//   cyl1.frameTranslation.frame_b.R.T[1,2] = cyl1.frame_b.R.T[1,2];
//   cyl1.frameTranslation.frame_b.R.T[1,1] = cyl1.frame_b.R.T[1,1];
//   cyl1.frameTranslation.frame_b.R.w[3] = cyl1.frame_b.R.w[3];
//   cyl1.frameTranslation.frame_b.R.w[2] = cyl1.frame_b.R.w[2];
//   cyl1.frameTranslation.frame_b.R.w[1] = cyl1.frame_b.R.w[1];
//   cyl2.frame_b.t[1] = 0.0;
//   cyl2.frame_b.t[2] = 0.0;
//   cyl2.frame_b.t[3] = 0.0;
//   cyl2.frame_b.f[1] = 0.0;
//   cyl2.frame_b.f[2] = 0.0;
//   cyl2.frame_b.f[3] = 0.0;
//   (-cyl2.frame_a.t[1]) + cyl2.body.frame_a.t[1] + cyl2.frameTranslation.frame_a.t[1] = 0.0;
//   (-cyl2.frame_a.t[2]) + cyl2.body.frame_a.t[2] + cyl2.frameTranslation.frame_a.t[2] = 0.0;
//   (-cyl2.frame_a.t[3]) + cyl2.body.frame_a.t[3] + cyl2.frameTranslation.frame_a.t[3] = 0.0;
//   (-cyl2.frame_a.f[1]) + cyl2.body.frame_a.f[1] + cyl2.frameTranslation.frame_a.f[1] = 0.0;
//   (-cyl2.frame_a.f[2]) + cyl2.body.frame_a.f[2] + cyl2.frameTranslation.frame_a.f[2] = 0.0;
//   (-cyl2.frame_a.f[3]) + cyl2.body.frame_a.f[3] + cyl2.frameTranslation.frame_a.f[3] = 0.0;
//   (-cyl2.frame_b.t[1]) + cyl2.frameTranslation.frame_b.t[1] = 0.0;
//   (-cyl2.frame_b.t[2]) + cyl2.frameTranslation.frame_b.t[2] = 0.0;
//   (-cyl2.frame_b.t[3]) + cyl2.frameTranslation.frame_b.t[3] = 0.0;
//   (-cyl2.frame_b.f[1]) + cyl2.frameTranslation.frame_b.f[1] = 0.0;
//   (-cyl2.frame_b.f[2]) + cyl2.frameTranslation.frame_b.f[2] = 0.0;
//   (-cyl2.frame_b.f[3]) + cyl2.frameTranslation.frame_b.f[3] = 0.0;
//   cyl2.body.frame_a.r_0[3] = cyl2.frameTranslation.frame_a.r_0[3];
//   cyl2.body.frame_a.r_0[3] = cyl2.frame_a.r_0[3];
//   cyl2.body.frame_a.r_0[2] = cyl2.frameTranslation.frame_a.r_0[2];
//   cyl2.body.frame_a.r_0[2] = cyl2.frame_a.r_0[2];
//   cyl2.body.frame_a.r_0[1] = cyl2.frameTranslation.frame_a.r_0[1];
//   cyl2.body.frame_a.r_0[1] = cyl2.frame_a.r_0[1];
//   cyl2.body.frame_a.R.T[3,3] = cyl2.frameTranslation.frame_a.R.T[3,3];
//   cyl2.body.frame_a.R.T[3,3] = cyl2.frame_a.R.T[3,3];
//   cyl2.body.frame_a.R.T[3,2] = cyl2.frameTranslation.frame_a.R.T[3,2];
//   cyl2.body.frame_a.R.T[3,2] = cyl2.frame_a.R.T[3,2];
//   cyl2.body.frame_a.R.T[3,1] = cyl2.frameTranslation.frame_a.R.T[3,1];
//   cyl2.body.frame_a.R.T[3,1] = cyl2.frame_a.R.T[3,1];
//   cyl2.body.frame_a.R.T[2,3] = cyl2.frameTranslation.frame_a.R.T[2,3];
//   cyl2.body.frame_a.R.T[2,3] = cyl2.frame_a.R.T[2,3];
//   cyl2.body.frame_a.R.T[2,2] = cyl2.frameTranslation.frame_a.R.T[2,2];
//   cyl2.body.frame_a.R.T[2,2] = cyl2.frame_a.R.T[2,2];
//   cyl2.body.frame_a.R.T[2,1] = cyl2.frameTranslation.frame_a.R.T[2,1];
//   cyl2.body.frame_a.R.T[2,1] = cyl2.frame_a.R.T[2,1];
//   cyl2.body.frame_a.R.T[1,3] = cyl2.frameTranslation.frame_a.R.T[1,3];
//   cyl2.body.frame_a.R.T[1,3] = cyl2.frame_a.R.T[1,3];
//   cyl2.body.frame_a.R.T[1,2] = cyl2.frameTranslation.frame_a.R.T[1,2];
//   cyl2.body.frame_a.R.T[1,2] = cyl2.frame_a.R.T[1,2];
//   cyl2.body.frame_a.R.T[1,1] = cyl2.frameTranslation.frame_a.R.T[1,1];
//   cyl2.body.frame_a.R.T[1,1] = cyl2.frame_a.R.T[1,1];
//   cyl2.body.frame_a.R.w[3] = cyl2.frameTranslation.frame_a.R.w[3];
//   cyl2.body.frame_a.R.w[3] = cyl2.frame_a.R.w[3];
//   cyl2.body.frame_a.R.w[2] = cyl2.frameTranslation.frame_a.R.w[2];
//   cyl2.body.frame_a.R.w[2] = cyl2.frame_a.R.w[2];
//   cyl2.body.frame_a.R.w[1] = cyl2.frameTranslation.frame_a.R.w[1];
//   cyl2.body.frame_a.R.w[1] = cyl2.frame_a.R.w[1];
//   cyl2.frameTranslation.frame_b.r_0[3] = cyl2.frame_b.r_0[3];
//   cyl2.frameTranslation.frame_b.r_0[2] = cyl2.frame_b.r_0[2];
//   cyl2.frameTranslation.frame_b.r_0[1] = cyl2.frame_b.r_0[1];
//   cyl2.frameTranslation.frame_b.R.T[3,3] = cyl2.frame_b.R.T[3,3];
//   cyl2.frameTranslation.frame_b.R.T[3,2] = cyl2.frame_b.R.T[3,2];
//   cyl2.frameTranslation.frame_b.R.T[3,1] = cyl2.frame_b.R.T[3,1];
//   cyl2.frameTranslation.frame_b.R.T[2,3] = cyl2.frame_b.R.T[2,3];
//   cyl2.frameTranslation.frame_b.R.T[2,2] = cyl2.frame_b.R.T[2,2];
//   cyl2.frameTranslation.frame_b.R.T[2,1] = cyl2.frame_b.R.T[2,1];
//   cyl2.frameTranslation.frame_b.R.T[1,3] = cyl2.frame_b.R.T[1,3];
//   cyl2.frameTranslation.frame_b.R.T[1,2] = cyl2.frame_b.R.T[1,2];
//   cyl2.frameTranslation.frame_b.R.T[1,1] = cyl2.frame_b.R.T[1,1];
//   cyl2.frameTranslation.frame_b.R.w[3] = cyl2.frame_b.R.w[3];
//   cyl2.frameTranslation.frame_b.R.w[2] = cyl2.frame_b.R.w[2];
//   cyl2.frameTranslation.frame_b.R.w[1] = cyl2.frame_b.R.w[1];
//   (-torque1.frame_a.t[1]) + torque1.basicTorque.frame_a.t[1] = 0.0;
//   (-torque1.frame_a.t[2]) + torque1.basicTorque.frame_a.t[2] = 0.0;
//   (-torque1.frame_a.t[3]) + torque1.basicTorque.frame_a.t[3] = 0.0;
//   (-torque1.frame_a.f[1]) + torque1.basicTorque.frame_a.f[1] = 0.0;
//   (-torque1.frame_a.f[2]) + torque1.basicTorque.frame_a.f[2] = 0.0;
//   (-torque1.frame_a.f[3]) + torque1.basicTorque.frame_a.f[3] = 0.0;
//   (-torque1.frame_b.t[1]) + torque1.basicTorque.frame_b.t[1] = 0.0;
//   (-torque1.frame_b.t[2]) + torque1.basicTorque.frame_b.t[2] = 0.0;
//   (-torque1.frame_b.t[3]) + torque1.basicTorque.frame_b.t[3] = 0.0;
//   (-torque1.frame_b.f[1]) + torque1.basicTorque.frame_b.f[1] = 0.0;
//   (-torque1.frame_b.f[2]) + torque1.basicTorque.frame_b.f[2] = 0.0;
//   (-torque1.frame_b.f[3]) + torque1.basicTorque.frame_b.f[3] = 0.0;
//   torque1.basicTorque.frame_resolve.t[1] + torque1.zeroPosition.frame_resolve.t[1] = 0.0;
//   torque1.basicTorque.frame_resolve.t[2] + torque1.zeroPosition.frame_resolve.t[2] = 0.0;
//   torque1.basicTorque.frame_resolve.t[3] + torque1.zeroPosition.frame_resolve.t[3] = 0.0;
//   torque1.basicTorque.frame_resolve.f[1] + torque1.zeroPosition.frame_resolve.f[1] = 0.0;
//   torque1.basicTorque.frame_resolve.f[2] + torque1.zeroPosition.frame_resolve.f[2] = 0.0;
//   torque1.basicTorque.frame_resolve.f[3] + torque1.zeroPosition.frame_resolve.f[3] = 0.0;
//   torque1.basicTorque.frame_a.r_0[3] = torque1.frame_a.r_0[3];
//   torque1.basicTorque.frame_a.r_0[2] = torque1.frame_a.r_0[2];
//   torque1.basicTorque.frame_a.r_0[1] = torque1.frame_a.r_0[1];
//   torque1.basicTorque.frame_a.R.T[3,3] = torque1.frame_a.R.T[3,3];
//   torque1.basicTorque.frame_a.R.T[3,2] = torque1.frame_a.R.T[3,2];
//   torque1.basicTorque.frame_a.R.T[3,1] = torque1.frame_a.R.T[3,1];
//   torque1.basicTorque.frame_a.R.T[2,3] = torque1.frame_a.R.T[2,3];
//   torque1.basicTorque.frame_a.R.T[2,2] = torque1.frame_a.R.T[2,2];
//   torque1.basicTorque.frame_a.R.T[2,1] = torque1.frame_a.R.T[2,1];
//   torque1.basicTorque.frame_a.R.T[1,3] = torque1.frame_a.R.T[1,3];
//   torque1.basicTorque.frame_a.R.T[1,2] = torque1.frame_a.R.T[1,2];
//   torque1.basicTorque.frame_a.R.T[1,1] = torque1.frame_a.R.T[1,1];
//   torque1.basicTorque.frame_a.R.w[3] = torque1.frame_a.R.w[3];
//   torque1.basicTorque.frame_a.R.w[2] = torque1.frame_a.R.w[2];
//   torque1.basicTorque.frame_a.R.w[1] = torque1.frame_a.R.w[1];
//   torque1.basicTorque.frame_b.r_0[3] = torque1.frame_b.r_0[3];
//   torque1.basicTorque.frame_b.r_0[2] = torque1.frame_b.r_0[2];
//   torque1.basicTorque.frame_b.r_0[1] = torque1.frame_b.r_0[1];
//   torque1.basicTorque.frame_b.R.T[3,3] = torque1.frame_b.R.T[3,3];
//   torque1.basicTorque.frame_b.R.T[3,2] = torque1.frame_b.R.T[3,2];
//   torque1.basicTorque.frame_b.R.T[3,1] = torque1.frame_b.R.T[3,1];
//   torque1.basicTorque.frame_b.R.T[2,3] = torque1.frame_b.R.T[2,3];
//   torque1.basicTorque.frame_b.R.T[2,2] = torque1.frame_b.R.T[2,2];
//   torque1.basicTorque.frame_b.R.T[2,1] = torque1.frame_b.R.T[2,1];
//   torque1.basicTorque.frame_b.R.T[1,3] = torque1.frame_b.R.T[1,3];
//   torque1.basicTorque.frame_b.R.T[1,2] = torque1.frame_b.R.T[1,2];
//   torque1.basicTorque.frame_b.R.T[1,1] = torque1.frame_b.R.T[1,1];
//   torque1.basicTorque.frame_b.R.w[3] = torque1.frame_b.R.w[3];
//   torque1.basicTorque.frame_b.R.w[2] = torque1.frame_b.R.w[2];
//   torque1.basicTorque.frame_b.R.w[1] = torque1.frame_b.R.w[1];
//   torque1.basicTorque.torque[3] = torque1.torque[3];
//   torque1.basicTorque.torque[2] = torque1.torque[2];
//   torque1.basicTorque.torque[1] = torque1.torque[1];
//   torque1.basicTorque.frame_resolve.r_0[3] = torque1.zeroPosition.frame_resolve.r_0[3];
//   torque1.basicTorque.frame_resolve.r_0[2] = torque1.zeroPosition.frame_resolve.r_0[2];
//   torque1.basicTorque.frame_resolve.r_0[1] = torque1.zeroPosition.frame_resolve.r_0[1];
//   torque1.basicTorque.frame_resolve.R.T[3,3] = torque1.zeroPosition.frame_resolve.R.T[3,3];
//   torque1.basicTorque.frame_resolve.R.T[3,2] = torque1.zeroPosition.frame_resolve.R.T[3,2];
//   torque1.basicTorque.frame_resolve.R.T[3,1] = torque1.zeroPosition.frame_resolve.R.T[3,1];
//   torque1.basicTorque.frame_resolve.R.T[2,3] = torque1.zeroPosition.frame_resolve.R.T[2,3];
//   torque1.basicTorque.frame_resolve.R.T[2,2] = torque1.zeroPosition.frame_resolve.R.T[2,2];
//   torque1.basicTorque.frame_resolve.R.T[2,1] = torque1.zeroPosition.frame_resolve.R.T[2,1];
//   torque1.basicTorque.frame_resolve.R.T[1,3] = torque1.zeroPosition.frame_resolve.R.T[1,3];
//   torque1.basicTorque.frame_resolve.R.T[1,2] = torque1.zeroPosition.frame_resolve.R.T[1,2];
//   torque1.basicTorque.frame_resolve.R.T[1,1] = torque1.zeroPosition.frame_resolve.R.T[1,1];
//   torque1.basicTorque.frame_resolve.R.w[3] = torque1.zeroPosition.frame_resolve.R.w[3];
//   torque1.basicTorque.frame_resolve.R.w[2] = torque1.zeroPosition.frame_resolve.R.w[2];
//   torque1.basicTorque.frame_resolve.R.w[1] = torque1.zeroPosition.frame_resolve.R.w[1];
//   fixed.frame_b.t[1] + mounting1D.frame_a.t[1] = 0.0;
//   fixed.frame_b.t[2] + mounting1D.frame_a.t[2] = 0.0;
//   fixed.frame_b.t[3] + mounting1D.frame_a.t[3] = 0.0;
//   fixed.frame_b.f[1] + mounting1D.frame_a.f[1] = 0.0;
//   fixed.frame_b.f[2] + mounting1D.frame_a.f[2] = 0.0;
//   fixed.frame_b.f[3] + mounting1D.frame_a.f[3] = 0.0;
//   inertia1.flange_a.tau + torque2.flange.tau = 0.0;
//   inertia1.flange_b.tau + idealGear.flange_a.tau = 0.0;
//   idealGear.flange_b.tau + inertia2.flange_a.tau = 0.0;
//   idealGear.support.tau + torque2.support.tau + mounting1D.flange_b.tau = 0.0;
//   inertia2.flange_b.tau = 0.0;
//   (-mounting1D.frame_a.t[1]) + mounting1D.housing.frame_a.t[1] = 0.0;
//   (-mounting1D.frame_a.t[2]) + mounting1D.housing.frame_a.t[2] = 0.0;
//   (-mounting1D.frame_a.t[3]) + mounting1D.housing.frame_a.t[3] = 0.0;
//   (-mounting1D.frame_a.f[1]) + mounting1D.housing.frame_a.f[1] = 0.0;
//   (-mounting1D.frame_a.f[2]) + mounting1D.housing.frame_a.f[2] = 0.0;
//   (-mounting1D.frame_a.f[3]) + mounting1D.housing.frame_a.f[3] = 0.0;
//   mounting1D.frame_a.r_0[3] = mounting1D.housing.frame_a.r_0[3];
//   mounting1D.frame_a.r_0[2] = mounting1D.housing.frame_a.r_0[2];
//   mounting1D.frame_a.r_0[1] = mounting1D.housing.frame_a.r_0[1];
//   mounting1D.frame_a.R.T[3,3] = mounting1D.housing.frame_a.R.T[3,3];
//   mounting1D.frame_a.R.T[3,2] = mounting1D.housing.frame_a.R.T[3,2];
//   mounting1D.frame_a.R.T[3,1] = mounting1D.housing.frame_a.R.T[3,1];
//   mounting1D.frame_a.R.T[2,3] = mounting1D.housing.frame_a.R.T[2,3];
//   mounting1D.frame_a.R.T[2,2] = mounting1D.housing.frame_a.R.T[2,2];
//   mounting1D.frame_a.R.T[2,1] = mounting1D.housing.frame_a.R.T[2,1];
//   mounting1D.frame_a.R.T[1,3] = mounting1D.housing.frame_a.R.T[1,3];
//   mounting1D.frame_a.R.T[1,2] = mounting1D.housing.frame_a.R.T[1,2];
//   mounting1D.frame_a.R.T[1,1] = mounting1D.housing.frame_a.R.T[1,1];
//   mounting1D.frame_a.R.w[3] = mounting1D.housing.frame_a.R.w[3];
//   mounting1D.frame_a.R.w[2] = mounting1D.housing.frame_a.R.w[2];
//   mounting1D.frame_a.R.w[1] = mounting1D.housing.frame_a.R.w[1];
//   gearConstraint.bearing.r_0[3] = torque1.frame_a.r_0[3];
//   gearConstraint.bearing.r_0[3] = world.frame_b.r_0[3];
//   gearConstraint.bearing.r_0[2] = torque1.frame_a.r_0[2];
//   gearConstraint.bearing.r_0[2] = world.frame_b.r_0[2];
//   gearConstraint.bearing.r_0[1] = torque1.frame_a.r_0[1];
//   gearConstraint.bearing.r_0[1] = world.frame_b.r_0[1];
//   gearConstraint.bearing.R.T[3,3] = torque1.frame_a.R.T[3,3];
//   gearConstraint.bearing.R.T[3,3] = world.frame_b.R.T[3,3];
//   gearConstraint.bearing.R.T[3,2] = torque1.frame_a.R.T[3,2];
//   gearConstraint.bearing.R.T[3,2] = world.frame_b.R.T[3,2];
//   gearConstraint.bearing.R.T[3,1] = torque1.frame_a.R.T[3,1];
//   gearConstraint.bearing.R.T[3,1] = world.frame_b.R.T[3,1];
//   gearConstraint.bearing.R.T[2,3] = torque1.frame_a.R.T[2,3];
//   gearConstraint.bearing.R.T[2,3] = world.frame_b.R.T[2,3];
//   gearConstraint.bearing.R.T[2,2] = torque1.frame_a.R.T[2,2];
//   gearConstraint.bearing.R.T[2,2] = world.frame_b.R.T[2,2];
//   gearConstraint.bearing.R.T[2,1] = torque1.frame_a.R.T[2,1];
//   gearConstraint.bearing.R.T[2,1] = world.frame_b.R.T[2,1];
//   gearConstraint.bearing.R.T[1,3] = torque1.frame_a.R.T[1,3];
//   gearConstraint.bearing.R.T[1,3] = world.frame_b.R.T[1,3];
//   gearConstraint.bearing.R.T[1,2] = torque1.frame_a.R.T[1,2];
//   gearConstraint.bearing.R.T[1,2] = world.frame_b.R.T[1,2];
//   gearConstraint.bearing.R.T[1,1] = torque1.frame_a.R.T[1,1];
//   gearConstraint.bearing.R.T[1,1] = world.frame_b.R.T[1,1];
//   gearConstraint.bearing.R.w[3] = torque1.frame_a.R.w[3];
//   gearConstraint.bearing.R.w[3] = world.frame_b.R.w[3];
//   gearConstraint.bearing.R.w[2] = torque1.frame_a.R.w[2];
//   gearConstraint.bearing.R.w[2] = world.frame_b.R.w[2];
//   gearConstraint.bearing.R.w[1] = torque1.frame_a.R.w[1];
//   gearConstraint.bearing.R.w[1] = world.frame_b.R.w[1];
//   cyl1.frame_b.r_0[3] = gearConstraint.frame_a.r_0[3];
//   cyl1.frame_b.r_0[2] = gearConstraint.frame_a.r_0[2];
//   cyl1.frame_b.r_0[1] = gearConstraint.frame_a.r_0[1];
//   cyl1.frame_b.R.T[3,3] = gearConstraint.frame_a.R.T[3,3];
//   cyl1.frame_b.R.T[3,2] = gearConstraint.frame_a.R.T[3,2];
//   cyl1.frame_b.R.T[3,1] = gearConstraint.frame_a.R.T[3,1];
//   cyl1.frame_b.R.T[2,3] = gearConstraint.frame_a.R.T[2,3];
//   cyl1.frame_b.R.T[2,2] = gearConstraint.frame_a.R.T[2,2];
//   cyl1.frame_b.R.T[2,1] = gearConstraint.frame_a.R.T[2,1];
//   cyl1.frame_b.R.T[1,3] = gearConstraint.frame_a.R.T[1,3];
//   cyl1.frame_b.R.T[1,2] = gearConstraint.frame_a.R.T[1,2];
//   cyl1.frame_b.R.T[1,1] = gearConstraint.frame_a.R.T[1,1];
//   cyl1.frame_b.R.w[3] = gearConstraint.frame_a.R.w[3];
//   cyl1.frame_b.R.w[2] = gearConstraint.frame_a.R.w[2];
//   cyl1.frame_b.R.w[1] = gearConstraint.frame_a.R.w[1];
//   cyl2.frame_a.r_0[3] = gearConstraint.frame_b.r_0[3];
//   cyl2.frame_a.r_0[2] = gearConstraint.frame_b.r_0[2];
//   cyl2.frame_a.r_0[1] = gearConstraint.frame_b.r_0[1];
//   cyl2.frame_a.R.T[3,3] = gearConstraint.frame_b.R.T[3,3];
//   cyl2.frame_a.R.T[3,2] = gearConstraint.frame_b.R.T[3,2];
//   cyl2.frame_a.R.T[3,1] = gearConstraint.frame_b.R.T[3,1];
//   cyl2.frame_a.R.T[2,3] = gearConstraint.frame_b.R.T[2,3];
//   cyl2.frame_a.R.T[2,2] = gearConstraint.frame_b.R.T[2,2];
//   cyl2.frame_a.R.T[2,1] = gearConstraint.frame_b.R.T[2,1];
//   cyl2.frame_a.R.T[1,3] = gearConstraint.frame_b.R.T[1,3];
//   cyl2.frame_a.R.T[1,2] = gearConstraint.frame_b.R.T[1,2];
//   cyl2.frame_a.R.T[1,1] = gearConstraint.frame_b.R.T[1,1];
//   cyl2.frame_a.R.w[3] = gearConstraint.frame_b.R.w[3];
//   cyl2.frame_a.R.w[2] = gearConstraint.frame_b.R.w[2];
//   cyl2.frame_a.R.w[1] = gearConstraint.frame_b.R.w[1];
//   cyl1.frame_a.r_0[3] = torque1.frame_b.r_0[3];
//   cyl1.frame_a.r_0[2] = torque1.frame_b.r_0[2];
//   cyl1.frame_a.r_0[1] = torque1.frame_b.r_0[1];
//   cyl1.frame_a.R.T[3,3] = torque1.frame_b.R.T[3,3];
//   cyl1.frame_a.R.T[3,2] = torque1.frame_b.R.T[3,2];
//   cyl1.frame_a.R.T[3,1] = torque1.frame_b.R.T[3,1];
//   cyl1.frame_a.R.T[2,3] = torque1.frame_b.R.T[2,3];
//   cyl1.frame_a.R.T[2,2] = torque1.frame_b.R.T[2,2];
//   cyl1.frame_a.R.T[2,1] = torque1.frame_b.R.T[2,1];
//   cyl1.frame_a.R.T[1,3] = torque1.frame_b.R.T[1,3];
//   cyl1.frame_a.R.T[1,2] = torque1.frame_b.R.T[1,2];
//   cyl1.frame_a.R.T[1,1] = torque1.frame_b.R.T[1,1];
//   cyl1.frame_a.R.w[3] = torque1.frame_b.R.w[3];
//   cyl1.frame_a.R.w[2] = torque1.frame_b.R.w[2];
//   cyl1.frame_a.R.w[1] = torque1.frame_b.R.w[1];
//   sine[3].y = torque1.torque[3];
//   sine[2].y = torque1.torque[2];
//   sine[1].y = torque1.torque[1];
//   sine[1].y = torque2.tau;
//   idealGear.flange_a.phi = inertia1.flange_b.phi;
//   idealGear.flange_b.phi = inertia2.flange_a.phi;
//   inertia1.flange_a.phi = torque2.flange.phi;
//   idealGear.support.phi = mounting1D.flange_b.phi;
//   idealGear.support.phi = torque2.support.phi;
//   fixed.frame_b.r_0[3] = mounting1D.frame_a.r_0[3];
//   fixed.frame_b.r_0[2] = mounting1D.frame_a.r_0[2];
//   fixed.frame_b.r_0[1] = mounting1D.frame_a.r_0[1];
//   fixed.frame_b.R.T[3,3] = mounting1D.frame_a.R.T[3,3];
//   fixed.frame_b.R.T[3,2] = mounting1D.frame_a.R.T[3,2];
//   fixed.frame_b.R.T[3,1] = mounting1D.frame_a.R.T[3,1];
//   fixed.frame_b.R.T[2,3] = mounting1D.frame_a.R.T[2,3];
//   fixed.frame_b.R.T[2,2] = mounting1D.frame_a.R.T[2,2];
//   fixed.frame_b.R.T[2,1] = mounting1D.frame_a.R.T[2,1];
//   fixed.frame_b.R.T[1,3] = mounting1D.frame_a.R.T[1,3];
//   fixed.frame_b.R.T[1,2] = mounting1D.frame_a.R.T[1,2];
//   fixed.frame_b.R.T[1,1] = mounting1D.frame_a.R.T[1,1];
//   fixed.frame_b.R.w[3] = mounting1D.frame_a.R.w[3];
//   fixed.frame_b.R.w[2] = mounting1D.frame_a.R.w[2];
//   fixed.frame_b.R.w[1] = mounting1D.frame_a.R.w[1];
// end Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.GearConstraint has 2379 equation(s) and 2379 variable(s).
// 1586 of these are trivial equation(s).
// "
// ""
// endResult
