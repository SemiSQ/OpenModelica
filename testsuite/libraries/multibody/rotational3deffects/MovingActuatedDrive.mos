// name:     Modelica3.x.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive
// keywords: multibody, balancing, instantiation
// status:   correct
// teardown_command: rm -f *.so *.dll *.log *.c* *.makefile *.libs
// 
//  Modelica MultiBody 3.x: instantiation and balance checking
//

loadFile("_Rotational3DEffectsTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive);
getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length
//   input Real[:] v \"Vector\";
//   output Real result \"Length of vector v\";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize
//   input Real[:] v \"Vector\";
//   input Real eps = 1e-13 \"if |v| < eps then result = v/eps\";
//   output Real[size(v,1)] result \"Input vector v normalized to length=1\";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
// external \"C\";
// end Modelica.Math.asin;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
// external \"C\";
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
// external \"C\";
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
// external \"C\";
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation \"Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation\"
// input Real[3, 3] T;
// input Real(quantity=\"AngularVelocity\", unit=\"rad/s\")[3] w;
// output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
//   output Real[3] residue \"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\";
// algorithm
//   residue := {atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[4] der_Q(unit = \"1/s\") \"Derivative of Q\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {2.0 * (Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]),2.0 * (-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]),2.0 * (Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4])};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T
//   input Real[3, 3] T \"Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for Q (there are 2 solutions; the one close to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)\";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04;
// algorithm
//   c1 := (1.0 + T[1,1]) - T[2,2] - T[3,3];
//   c2 := (1.0 + T[2,2]) - T[1,1] - T[3,3];
//   c3 := (1.0 + T[3,3]) - T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04 OR c4 > c1 AND c4 > c2 AND c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 AND c1 > c3 AND c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 AND c2 > c3 AND c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   output Real[1] residue \"Residue constraint (shall be zero)\";
// algorithm
//   residue := {(Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation
//   input Real[3, 3] T1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Real[3, 3] T_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3, 3] T2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation
//   input Integer axis(min = 1, max = 3) \"Rotate around 'axis' of frame 1\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,cos(angle),sin(angle);0.0,-sin(angle),cos(angle)] else if axis == 2 then <matrix>[cos(angle),0.0,-sin(angle);0.0,1.0,0.0;sin(angle),0.0,cos(angle)] else <matrix>[cos(angle),sin(angle),0.0;-sin(angle),cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := <matrix>[e[1] ^ 2.0 + cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + cos(angle) * -e[1] * e[2]) - -sin(angle) * e[3],(e[1] * e[3] + cos(angle) * -e[1] * e[3]) - sin(angle) * e[2];(e[2] * e[1] + cos(angle) * -e[2] * e[1]) - sin(angle) * e[3],e[2] ^ 2.0 + cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + cos(angle) * -e[2] * e[3]) - -sin(angle) * e[1];(e[3] * e[1] + cos(angle) * -e[3] * e[1]) - -sin(angle) * e[2],(e[3] * e[2] + cos(angle) * -e[3] * e[2]) - sin(angle) * e[1],e[3] ^ 2.0 + cos(angle) * (1.0 - e[3] ^ 2.0)];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.absoluteRotation
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   R2 := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[R_rel.T[1,1] * R1.T[1,1] + R_rel.T[1,2] * R1.T[2,1] + R_rel.T[1,3] * R1.T[3,1],R_rel.T[1,1] * R1.T[1,2] + R_rel.T[1,2] * R1.T[2,2] + R_rel.T[1,3] * R1.T[3,2],R_rel.T[1,1] * R1.T[1,3] + R_rel.T[1,2] * R1.T[2,3] + R_rel.T[1,3] * R1.T[3,3];R_rel.T[2,1] * R1.T[1,1] + R_rel.T[2,2] * R1.T[2,1] + R_rel.T[2,3] * R1.T[3,1],R_rel.T[2,1] * R1.T[1,2] + R_rel.T[2,2] * R1.T[2,2] + R_rel.T[2,3] * R1.T[3,2],R_rel.T[2,1] * R1.T[1,3] + R_rel.T[2,2] * R1.T[2,3] + R_rel.T[2,3] * R1.T[3,3];R_rel.T[3,1] * R1.T[1,1] + R_rel.T[3,2] * R1.T[2,1] + R_rel.T[3,3] * R1.T[3,1],R_rel.T[3,1] * R1.T[1,2] + R_rel.T[3,2] * R1.T[2,2] + R_rel.T[3,3] * R1.T[3,2],R_rel.T[3,1] * R1.T[1,3] + R_rel.T[3,2] * R1.T[2,3] + R_rel.T[3,3] * R1.T[3,3]],Modelica.Mechanics.MultiBody.Frames.resolve2(R_rel,{R1.w[1],R1.w[2],R1.w[3]}) + {R_rel.w[1],R_rel.w[2],R_rel.w[3]});
// end Modelica.Mechanics.MultiBody.Frames.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence'\";
//   input Real[3] der_angles(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angles)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real guessAngle1(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Select angles[1] such that |angles[1] - guessAngle1| is a minimum\";
//   output Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi\";
//   protected Real[3] e1_1(unit = \"1\") \"First rotation axis, resolved in frame 1\";
//   protected Real[3] e2_1a(unit = \"1\") \"Second rotation axis, resolved in frame 1a\";
//   protected Real[3] e3_1(unit = \"1\") \"Third rotation axis, resolved in frame 1\";
//   protected Real[3] e3_2(unit = \"1\") \"Third rotation axis, resolved in frame 2\";
//   protected Real A \"Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real B \"Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real angle_1a(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 1 for angles[1]\";
//   protected Real angle_1b(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 2 for angles[1]\";
//   protected Real[3, 3] T_1a \"Orientation object to rotate frame 1 into frame 1a\";
// algorithm
//   assert( sequence[1] <> sequence[2] AND sequence[2] <> sequence[3], \"input argument 'sequence[1:3]' is not valid\");
//   e1_1 := /*/tp:REAL[3]/*/(if sequence[1] == 1 then {1,0,0} else if sequence[1] == 2 then {0,1,0} else {0,0,1});
//   e2_1a := /*/tp:REAL[3]/*/(if sequence[2] == 1 then {1,0,0} else if sequence[2] == 2 then {0,1,0} else {0,0,1});
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := /*/tp:REAL[3]/*/(if sequence[3] == 1 then {1,0,0} else if sequence[3] == 2 then {0,1,0} else {0,0,1});
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 1e-12 AND abs(B) <= 1e-12 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := atan2(A,-B);
//     angle_1b := atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis
//   input Integer axis(min = 1, max = 3) \"Axis vector to be returned\";
//   output Real[3] e(unit = \"1\") \"Unit axis vector\";
// algorithm
//   e := /*/tp:REAL[3]/*/(if axis == 1 then {1,0,0} else if axis == 2 then {0,1,0} else {0,0,1});
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity from frame 2 with respect to frame 1, resolved in frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) - 1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) - 1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object such that frame 1 and frame 2 are identical\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotation
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   input Real der_angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angle)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e[1] ^ 2.0 + cos(angle) * (1.0 - e[1] ^ 2.0),(e[1] * e[2] + cos(angle) * -e[1] * e[2]) - -sin(angle) * e[3],(e[1] * e[3] + cos(angle) * -e[1] * e[3]) - sin(angle) * e[2];(e[2] * e[1] + cos(angle) * -e[2] * e[1]) - sin(angle) * e[3],e[2] ^ 2.0 + cos(angle) * (1.0 - e[2] ^ 2.0),(e[2] * e[3] + cos(angle) * -e[2] * e[3]) - -sin(angle) * e[1];(e[3] * e[1] + cos(angle) * -e[3] * e[1]) - -sin(angle) * e[2],(e[3] * e[2] + cos(angle) * -e[3] * e[2]) - sin(angle) * e[1],e[3] ^ 2.0 + cos(angle) * (1.0 - e[3] ^ 2.0)],{der_angle * e[1],der_angle * e[2],der_angle * e[3]});
// end Modelica.Mechanics.MultiBody.Frames.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)\";
//   input Real[3] v1 \"A vector v resolved in frame 1 (shall not be parallel to e)\";
//   input Real[3] v2 \"Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)\";
//   output Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi\";
// algorithm
//   angle := atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],(v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3]) - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration
//   input Real[3] r(quantity = \"Length\", unit = \"m\") \"Position vector from world frame to actual point, resolved in world frame\";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType \"Type of gravity field\";
//   input Real[3] g(quantity = \"Acceleration\", unit = \"m/s2\") \"Constant gravity acceleration, resolved in world frame, if gravityType=1\";
//   input Real mue(unit = \"m3/s2\") \"Field constant of point gravity field, if gravityType=2\";
//   output Real[3] gravity(quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration at point r, resolved in world frame\";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial
//   input Real material1;
//   input Real material2;
//   input Real material3;
//   input Real sp;
//   output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape
//   input String shapeType;
//   output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// class Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive
//   Real world.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean world.enableAnimation = true \"= true, if animation of all components is enabled\";
//   parameter Boolean world.animateWorld = true \"= true, if world coordinate system shall be visualized\";
//   parameter Boolean world.animateGravity = true \"= true, if gravity field shall be visualized (acceleration vector or field center)\";
//   parameter String world.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String world.label2 = \"y\" \"Label of vertical axis in icon\";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity \"Type of gravity field\";
//   parameter Real world.g(quantity = \"Acceleration\", unit = \"m/s2\") = 0.0 \"Constant gravity acceleration\";
//   parameter Real world.n[1](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[2](unit = \"1\") = -1.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[3](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.mue(unit = \"m3/s2\", min = 0.0) = 398600000000000.0 \"Gravity field constant (default = field constant of earth)\";
//   parameter Boolean world.driveTrainMechanics3D = true \"= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account\";
//   parameter Boolean world.axisShowLabels = true \"= true, if labels shall be shown\";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of z-arrow\";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of z-arrow\";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of z-arrow\";
//   parameter Real world.gravityArrowTail[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   parameter Real world.gravitySphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 12742000.0 \"Diameter of sphere representing gravity center (default = mean diameter of earth)\";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   parameter Real world.nominalLength(quantity = \"Length\", unit = \"m\") = 1.0 \"\\\"Nominal\\\" length of multi-body system\";
//   parameter Real world.defaultWidthFraction = 20.0 \"Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)\";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 \"Default for arrow diameter of a coordinate system as a fraction of axis length\";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 \"Default reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real world.defaultN_to_m(unit = \"N/m\", min = 0.0) = 1000.0 \"Default scaling of force arrows (length = force/defaultN_to_m)\";
//   parameter Real world.defaultNm_to_m(unit = \"N.m/m\", min = 0.0) = 1000.0 \"Default scaling of torque arrows (length = torque/defaultNm_to_m)\";
//   protected parameter Integer world.ndim = if world.enableAnimation AND world.animateWorld then 1 else 0;
//   parameter String world.x_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.x_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.x_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.x_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
//   protected Real world.x_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.n_z_aux[1](unit = \"1\") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
//   protected Real world.x_arrowLine.n_z_aux[2](unit = \"1\") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
//   protected Real world.x_arrowLine.n_z_aux[3](unit = \"1\") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
//   protected Real world.x_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
//   protected Real world.x_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
//   protected Real world.x_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
//   protected output Real world.x_arrowLine.Form;
//   output Real world.x_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.Material;
//   protected output Real world.x_arrowLine.Extra;
//   parameter String world.x_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.x_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.x_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.x_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
//   protected Real world.x_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.n_z_aux[1](unit = \"1\") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
//   protected Real world.x_arrowHead.n_z_aux[2](unit = \"1\") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
//   protected Real world.x_arrowHead.n_z_aux[3](unit = \"1\") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
//   protected Real world.x_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
//   protected Real world.x_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
//   protected Real world.x_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
//   protected output Real world.x_arrowHead.Form;
//   output Real world.x_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.Material;
//   protected output Real world.x_arrowHead.Extra;
//   parameter String world.y_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.y_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.y_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.y_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
//   protected Real world.y_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.n_z_aux[1](unit = \"1\") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
//   protected Real world.y_arrowLine.n_z_aux[2](unit = \"1\") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
//   protected Real world.y_arrowLine.n_z_aux[3](unit = \"1\") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
//   protected Real world.y_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
//   protected Real world.y_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
//   protected Real world.y_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
//   protected output Real world.y_arrowLine.Form;
//   output Real world.y_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.Material;
//   protected output Real world.y_arrowLine.Extra;
//   parameter String world.y_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.y_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.y_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.y_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
//   protected Real world.y_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.n_z_aux[1](unit = \"1\") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
//   protected Real world.y_arrowHead.n_z_aux[2](unit = \"1\") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
//   protected Real world.y_arrowHead.n_z_aux[3](unit = \"1\") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
//   protected Real world.y_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
//   protected Real world.y_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
//   protected Real world.y_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
//   protected output Real world.y_arrowHead.Form;
//   output Real world.y_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.Material;
//   protected output Real world.y_arrowHead.Extra;
//   parameter String world.z_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.z_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.z_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.z_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
//   protected Real world.z_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.n_z_aux[1](unit = \"1\") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
//   protected Real world.z_arrowLine.n_z_aux[2](unit = \"1\") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
//   protected Real world.z_arrowLine.n_z_aux[3](unit = \"1\") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
//   protected Real world.z_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
//   protected Real world.z_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
//   protected Real world.z_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
//   protected output Real world.z_arrowLine.Form;
//   output Real world.z_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.Material;
//   protected output Real world.z_arrowLine.Extra;
//   parameter String world.z_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.z_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.z_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.z_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
//   protected Real world.z_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.n_z_aux[1](unit = \"1\") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
//   protected Real world.z_arrowHead.n_z_aux[2](unit = \"1\") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
//   protected Real world.z_arrowHead.n_z_aux[3](unit = \"1\") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
//   protected Real world.z_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
//   protected Real world.z_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
//   protected Real world.z_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
//   protected output Real world.z_arrowHead.Form;
//   output Real world.z_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.Material;
//   protected output Real world.z_arrowHead.Extra;
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation AND world.animateGravity AND world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter String world.gravityArrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.gravityArrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[1](unit = \"1\") = world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[2](unit = \"1\") = world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[3](unit = \"1\") = world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.length(quantity = \"Length\", unit = \"m\") = world.gravityLineLength \"Length of visual object\";
//   input Real world.gravityArrowLine.width(quantity = \"Length\", unit = \"m\") = world.gravityArrowDiameter \"Width of visual object\";
//   input Real world.gravityArrowLine.height(quantity = \"Length\", unit = \"m\") = world.gravityArrowDiameter \"Height of visual object\";
//   input Real world.gravityArrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.gravityArrowLine.color[1] = Real(world.gravityArrowColor[1]) \"Color of shape\";
//   input Real world.gravityArrowLine.color[2] = Real(world.gravityArrowColor[2]) \"Color of shape\";
//   input Real world.gravityArrowLine.color[3] = Real(world.gravityArrowColor[3]) \"Color of shape\";
//   input Real world.gravityArrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.gravityArrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.gravityArrowLine.lengthDirection[1],world.gravityArrowLine.lengthDirection[2],world.gravityArrowLine.lengthDirection[3]});
//   protected Real world.gravityArrowLine.e_x[1](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 1.0 else world.gravityArrowLine.lengthDirection[1] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[2](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[2] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[3](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[3] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.n_z_aux[1](unit = \"1\") = world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[3] - world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[2];
//   protected Real world.gravityArrowLine.n_z_aux[2](unit = \"1\") = world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[1] - world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[3];
//   protected Real world.gravityArrowLine.n_z_aux[3](unit = \"1\") = world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[2] - world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[1];
//   protected Real world.gravityArrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[1];
//   protected Real world.gravityArrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[2];
//   protected Real world.gravityArrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[3];
//   protected output Real world.gravityArrowLine.Form;
//   output Real world.gravityArrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.gravityArrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.Material;
//   protected output Real world.gravityArrowLine.Extra;
//   parameter String world.gravityArrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.gravityArrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[1] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[1] * world.gravityLineLength \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[2] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[2] * world.gravityLineLength \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[3] + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13)[3] * world.gravityLineLength \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[1](unit = \"1\") = world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[2](unit = \"1\") = world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[3](unit = \"1\") = world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.length(quantity = \"Length\", unit = \"m\") = world.gravityHeadLength \"Length of visual object\";
//   input Real world.gravityArrowHead.width(quantity = \"Length\", unit = \"m\") = world.gravityHeadWidth \"Width of visual object\";
//   input Real world.gravityArrowHead.height(quantity = \"Length\", unit = \"m\") = world.gravityHeadWidth \"Height of visual object\";
//   input Real world.gravityArrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.gravityArrowHead.color[1] = Real(world.gravityArrowColor[1]) \"Color of shape\";
//   input Real world.gravityArrowHead.color[2] = Real(world.gravityArrowColor[2]) \"Color of shape\";
//   input Real world.gravityArrowHead.color[3] = Real(world.gravityArrowColor[3]) \"Color of shape\";
//   input Real world.gravityArrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.gravityArrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.gravityArrowHead.lengthDirection[1],world.gravityArrowHead.lengthDirection[2],world.gravityArrowHead.lengthDirection[3]});
//   protected Real world.gravityArrowHead.e_x[1](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 1.0 else world.gravityArrowHead.lengthDirection[1] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[2](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[2] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[3](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[3] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.n_z_aux[1](unit = \"1\") = world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[3] - world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[2];
//   protected Real world.gravityArrowHead.n_z_aux[2](unit = \"1\") = world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[1] - world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[3];
//   protected Real world.gravityArrowHead.n_z_aux[3](unit = \"1\") = world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[2] - world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[1];
//   protected Real world.gravityArrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[1];
//   protected Real world.gravityArrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[2];
//   protected Real world.gravityArrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[3];
//   protected output Real world.gravityArrowHead.Form;
//   output Real world.gravityArrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.gravityArrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.Material;
//   protected output Real world.gravityArrowHead.Extra;
//   protected parameter Integer world.ndim2 = if world.enableAnimation AND world.animateWorld AND world.axisShowLabels then 1 else 0;
//   input Real world.x_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r_lines[1](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[1](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of cylinders\";
//   input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of cylinders\";
//   input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of cylinders\";
//   input Real world.x_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][1];
//   protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][2];
//   protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][3];
//   protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][1];
//   protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][2];
//   protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][3];
//   protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][1];
//   protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][2];
//   protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][3];
//   protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][1];
//   protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][2];
//   protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][3];
//   protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][1];
//   protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][2];
//   protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][3];
//   protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][1];
//   protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][2];
//   protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][3];
//   protected Real world.x_label.r_abs[1](quantity = \"Length\", unit = \"m\") = world.x_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[1];
//   protected Real world.x_label.r_abs[2](quantity = \"Length\", unit = \"m\") = world.x_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[2];
//   protected Real world.x_label.r_abs[3](quantity = \"Length\", unit = \"m\") = world.x_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]})[3];
//   parameter String world.x_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = world.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = world.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = world.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real world.x_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
//   protected Real world.x_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
//   protected Real world.x_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
//   protected Real world.x_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real world.x_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real world.x_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[1].Form;
//   output Real world.x_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].Material;
//   protected output Real world.x_label.cylinders[1].Extra;
//   parameter String world.x_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = world.x_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = world.x_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = world.x_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real world.x_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
//   protected Real world.x_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
//   protected Real world.x_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
//   protected Real world.x_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real world.x_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real world.x_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[2].Form;
//   output Real world.x_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].Material;
//   protected output Real world.x_label.cylinders[2].Extra;
//   protected parameter Integer world.x_label.n = 2 \"Number of cylinders\";
//   input Real world.y_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[2](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[2](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[1](unit = \"1\") = -1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[2](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 1.5 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = 1.5 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = 0.5 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.75 * world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] \"Color of cylinders\";
//   input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] \"Color of cylinders\";
//   input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] \"Color of cylinders\";
//   input Real world.y_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][1];
//   protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][2];
//   protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][3];
//   protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][1];
//   protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][2];
//   protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][3];
//   protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][1];
//   protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][2];
//   protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][3];
//   protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][1];
//   protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][2];
//   protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][3];
//   protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][1];
//   protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][2];
//   protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][3];
//   protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][1];
//   protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][2];
//   protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][3];
//   protected Real world.y_label.r_abs[1](quantity = \"Length\", unit = \"m\") = world.y_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[1];
//   protected Real world.y_label.r_abs[2](quantity = \"Length\", unit = \"m\") = world.y_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[2];
//   protected Real world.y_label.r_abs[3](quantity = \"Length\", unit = \"m\") = world.y_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]})[3];
//   parameter String world.y_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = world.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = world.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = world.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real world.y_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
//   protected Real world.y_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
//   protected Real world.y_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
//   protected Real world.y_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real world.y_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real world.y_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[1].Form;
//   output Real world.y_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].Material;
//   protected output Real world.y_label.cylinders[1].Extra;
//   parameter String world.y_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = world.y_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = world.y_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = world.y_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real world.y_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
//   protected Real world.y_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
//   protected Real world.y_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
//   protected Real world.y_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real world.y_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real world.y_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[2].Form;
//   output Real world.y_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].Material;
//   protected output Real world.y_label.cylinders[2].Extra;
//   protected parameter Integer world.y_label.n = 2 \"Number of cylinders\";
//   input Real world.z_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[3](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[3](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] \"Color of cylinders\";
//   input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] \"Color of cylinders\";
//   input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] \"Color of cylinders\";
//   input Real world.z_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][1];
//   protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][2];
//   protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][3];
//   protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][1];
//   protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][2];
//   protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][3];
//   protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][1];
//   protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][2];
//   protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][3];
//   protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][1];
//   protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][2];
//   protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][3];
//   protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][1];
//   protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][2];
//   protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][3];
//   protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][1];
//   protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][2];
//   protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][3];
//   protected Real world.z_label.r_abs[1](quantity = \"Length\", unit = \"m\") = world.z_label.r[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[1];
//   protected Real world.z_label.r_abs[2](quantity = \"Length\", unit = \"m\") = world.z_label.r[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[2];
//   protected Real world.z_label.r_abs[3](quantity = \"Length\", unit = \"m\") = world.z_label.r[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]})[3];
//   parameter String world.z_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real world.z_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
//   protected Real world.z_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
//   protected Real world.z_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
//   protected Real world.z_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real world.z_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real world.z_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[1].Form;
//   output Real world.z_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].Material;
//   protected output Real world.z_label.cylinders[1].Extra;
//   parameter String world.z_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real world.z_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
//   protected Real world.z_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
//   protected Real world.z_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
//   protected Real world.z_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real world.z_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real world.z_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[2].Form;
//   output Real world.z_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].Material;
//   protected output Real world.z_label.cylinders[2].Extra;
//   parameter String world.z_label.cylinders[3].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[3].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].r[1](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[1] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[2](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[2] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[3](quantity = \"Length\", unit = \"m\") = world.z_label.r_abs[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0})[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[3].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[3].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[3].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[3].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real world.z_label.cylinders[3].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
//   protected Real world.z_label.cylinders[3].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
//   protected Real world.z_label.cylinders[3].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
//   protected Real world.z_label.cylinders[3].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real world.z_label.cylinders[3].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real world.z_label.cylinders[3].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[3].Form;
//   output Real world.z_label.cylinders[3].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[3].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].Material;
//   protected output Real world.z_label.cylinders[3].Extra;
//   protected parameter Integer world.z_label.n = 3 \"Number of cylinders\";
//   parameter Real world.axisLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.nominalLength / 2.0 \"Length of world axes arrows\";
//   parameter Real world.defaultAxisLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 5.0 \"Default for length of a frame axis (but not world frame)\";
//   parameter Real world.defaultJointLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a joint\";
//   parameter Real world.defaultJointWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape representing a joint\";
//   parameter Real world.defaultForceLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a force (e.g. damper)\";
//   parameter Real world.defaultForceWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape represening a force (e.g. spring, bushing)\";
//   parameter Real world.defaultBodyDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 9.0 \"Default for diameter of sphere representing the center of mass of a body\";
//   parameter Real world.defaultArrowDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 40.0 \"Default for arrow diameter (e.g., of forces, torques, sensors)\";
//   parameter Real world.axisDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction \"Diameter of world axes arrows\";
//   parameter Real world.gravityArrowLength(quantity = \"Length\", unit = \"m\") = world.axisLength / 2.0 \"Length of gravity arrow\";
//   protected parameter Real world.labelStart(quantity = \"Length\", unit = \"m\") = 1.05 * world.axisLength;
//   protected parameter Real world.headLength(quantity = \"Length\", unit = \"m\") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineWidth(quantity = \"Length\", unit = \"m\") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   parameter Real world.gravityArrowDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction \"Diameter of gravity arrow\";
//   protected parameter Real world.lineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.axisLength - world.headLength);
//   protected parameter Real world.gravityHeadLength(quantity = \"Length\", unit = \"m\") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   Real bodyCylinder.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean bodyCylinder.animation = true \"= true, if animation shall be enabled (show shape between frame_a and frame_b and optionally a sphere at the center of mass)\";
//   parameter Boolean bodyCylinder.animateSphere = false \"= true, if mass shall be animated as sphere provided animation=true\";
//   parameter Real bodyCylinder.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.5 \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real bodyCylinder.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real bodyCylinder.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real bodyCylinder.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real bodyCylinder.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real bodyCylinder.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real bodyCylinder.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 0.0 \"Mass of rigid body\";
//   parameter Real bodyCylinder.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = 2.0 \" (1,1) element of inertia tensor\";
//   parameter Real bodyCylinder.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = 0.0 \" (2,2) element of inertia tensor\";
//   parameter Real bodyCylinder.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = 0.0 \" (3,3) element of inertia tensor\";
//   parameter Real bodyCylinder.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = 0.0 \" (2,1) element of inertia tensor\";
//   parameter Real bodyCylinder.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = 0.0 \" (3,1) element of inertia tensor\";
//   parameter Real bodyCylinder.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = 0.0 \" (3,2) element of inertia tensor\";
//   Real bodyCylinder.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real bodyCylinder.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real bodyCylinder.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real bodyCylinder.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real bodyCylinder.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real bodyCylinder.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real bodyCylinder.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real bodyCylinder.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real bodyCylinder.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean bodyCylinder.angles_fixed = false \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real bodyCylinder.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real bodyCylinder.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real bodyCylinder.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer bodyCylinder.sequence_start[1](min = 1, max = 3) = 1 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer bodyCylinder.sequence_start[2](min = 1, max = 3) = 2 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer bodyCylinder.sequence_start[3](min = 1, max = 3) = 3 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean bodyCylinder.w_0_fixed = false \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real bodyCylinder.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real bodyCylinder.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real bodyCylinder.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean bodyCylinder.z_0_fixed = false \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real bodyCylinder.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real bodyCylinder.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real bodyCylinder.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter String bodyCylinder.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real bodyCylinder.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.1 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real bodyCylinder.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real bodyCylinder.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real bodyCylinder.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.extra = 0.0 \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer bodyCylinder.color[1](min = 0, max = 255) = 0 \" Color of shape\";
//   input Integer bodyCylinder.color[2](min = 0, max = 255) = 128 \" Color of shape\";
//   input Integer bodyCylinder.color[3](min = 0, max = 255) = 255 \" Color of shape\";
//   input Integer bodyCylinder.sphereColor[1](min = 0, max = 255) = bodyCylinder.color[1] \" Color of sphere of mass\";
//   input Integer bodyCylinder.sphereColor[2](min = 0, max = 255) = bodyCylinder.color[2] \" Color of sphere of mass\";
//   input Integer bodyCylinder.sphereColor[3](min = 0, max = 255) = bodyCylinder.color[3] \" Color of sphere of mass\";
//   input Real bodyCylinder.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean bodyCylinder.enforceStates = false \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean bodyCylinder.useQuaternions = true \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer bodyCylinder.sequence_angleStates[1](min = 1, max = 3) = 1 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer bodyCylinder.sequence_angleStates[2](min = 1, max = 3) = 2 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer bodyCylinder.sequence_angleStates[3](min = 1, max = 3) = 3 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real bodyCylinder.frameTranslation.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frameTranslation.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frameTranslation.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frameTranslation.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frameTranslation.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean bodyCylinder.frameTranslation.animation = false \"= true, if animation shall be enabled\";
//   parameter Real bodyCylinder.frameTranslation.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = bodyCylinder.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = bodyCylinder.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = bodyCylinder.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String bodyCylinder.frameTranslation.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real bodyCylinder.frameTranslation.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.extra = 0.0 \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer bodyCylinder.frameTranslation.color[1](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer bodyCylinder.frameTranslation.color[2](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer bodyCylinder.frameTranslation.color[3](min = 0, max = 255) = 155 \" Color of shape\";
//   input Real bodyCylinder.frameTranslation.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real bodyCylinder.frameTranslation.lengthDirection[1](unit = \"1\") = bodyCylinder.frameTranslation.r[1] - bodyCylinder.frameTranslation.r_shape[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.lengthDirection[2](unit = \"1\") = bodyCylinder.frameTranslation.r[2] - bodyCylinder.frameTranslation.r_shape[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.lengthDirection[3](unit = \"1\") = bodyCylinder.frameTranslation.r[3] - bodyCylinder.frameTranslation.r_shape[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.frameTranslation.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({bodyCylinder.frameTranslation.r[1] - bodyCylinder.frameTranslation.r_shape[1],bodyCylinder.frameTranslation.r[2] - bodyCylinder.frameTranslation.r_shape[2],bodyCylinder.frameTranslation.r[3] - bodyCylinder.frameTranslation.r_shape[3]}) \" Length of shape\";
//   parameter Real bodyCylinder.frameTranslation.width(quantity = \"Length\", unit = \"m\", min = 0.0) = bodyCylinder.frameTranslation.length / world.defaultWidthFraction \" Width of shape\";
//   parameter Real bodyCylinder.frameTranslation.height(quantity = \"Length\", unit = \"m\", min = 0.0) = bodyCylinder.frameTranslation.width \" Height of shape.\";
//   Real bodyCylinder.body.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.body.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.body.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real bodyCylinder.body.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real bodyCylinder.body.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.body.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.body.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real bodyCylinder.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real bodyCylinder.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real bodyCylinder.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean bodyCylinder.body.animation = false \"= true, if animation shall be enabled (show cylinder and sphere)\";
//   parameter Real bodyCylinder.body.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = bodyCylinder.r_CM[1] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real bodyCylinder.body.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = bodyCylinder.r_CM[2] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real bodyCylinder.body.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = bodyCylinder.r_CM[3] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real bodyCylinder.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = bodyCylinder.m \"Mass of rigid body\";
//   parameter Real bodyCylinder.body.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = bodyCylinder.I_11 \" (1,1) element of inertia tensor\";
//   parameter Real bodyCylinder.body.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = bodyCylinder.I_22 \" (2,2) element of inertia tensor\";
//   parameter Real bodyCylinder.body.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = bodyCylinder.I_33 \" (3,3) element of inertia tensor\";
//   parameter Real bodyCylinder.body.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = bodyCylinder.I_21 \" (2,1) element of inertia tensor\";
//   parameter Real bodyCylinder.body.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = bodyCylinder.I_31 \" (3,1) element of inertia tensor\";
//   parameter Real bodyCylinder.body.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = bodyCylinder.I_32 \" (3,2) element of inertia tensor\";
//   Real bodyCylinder.body.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real bodyCylinder.body.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real bodyCylinder.body.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real bodyCylinder.body.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real bodyCylinder.body.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real bodyCylinder.body.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real bodyCylinder.body.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real bodyCylinder.body.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real bodyCylinder.body.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean bodyCylinder.body.angles_fixed = bodyCylinder.angles_fixed \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real bodyCylinder.body.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = bodyCylinder.angles_start[1] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real bodyCylinder.body.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = bodyCylinder.angles_start[2] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real bodyCylinder.body.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = bodyCylinder.angles_start[3] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer bodyCylinder.body.sequence_start[1](min = 1, max = 3) = bodyCylinder.sequence_start[1] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer bodyCylinder.body.sequence_start[2](min = 1, max = 3) = bodyCylinder.sequence_start[2] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer bodyCylinder.body.sequence_start[3](min = 1, max = 3) = bodyCylinder.sequence_start[3] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean bodyCylinder.body.w_0_fixed = bodyCylinder.w_0_fixed \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real bodyCylinder.body.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = bodyCylinder.w_0_start[1] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real bodyCylinder.body.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = bodyCylinder.w_0_start[2] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real bodyCylinder.body.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = bodyCylinder.w_0_start[3] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean bodyCylinder.body.z_0_fixed = bodyCylinder.z_0_fixed \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real bodyCylinder.body.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = bodyCylinder.z_0_start[1] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real bodyCylinder.body.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = bodyCylinder.z_0_start[2] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real bodyCylinder.body.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = bodyCylinder.z_0_start[3] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real bodyCylinder.body.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultBodyDiameter \"Diameter of sphere\";
//   input Integer bodyCylinder.body.sphereColor[1](min = 0, max = 255) = 0 \"Color of sphere\";
//   input Integer bodyCylinder.body.sphereColor[2](min = 0, max = 255) = 128 \"Color of sphere\";
//   input Integer bodyCylinder.body.sphereColor[3](min = 0, max = 255) = 255 \"Color of sphere\";
//   input Integer bodyCylinder.body.cylinderColor[1](min = 0, max = 255) = bodyCylinder.body.sphereColor[1] \"Color of cylinder\";
//   input Integer bodyCylinder.body.cylinderColor[2](min = 0, max = 255) = bodyCylinder.body.sphereColor[2] \"Color of cylinder\";
//   input Integer bodyCylinder.body.cylinderColor[3](min = 0, max = 255) = bodyCylinder.body.sphereColor[3] \"Color of cylinder\";
//   input Real bodyCylinder.body.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean bodyCylinder.body.enforceStates = bodyCylinder.enforceStates \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean bodyCylinder.body.useQuaternions = bodyCylinder.useQuaternions \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer bodyCylinder.body.sequence_angleStates[1](min = 1, max = 3) = bodyCylinder.sequence_angleStates[1] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer bodyCylinder.body.sequence_angleStates[2](min = 1, max = 3) = bodyCylinder.sequence_angleStates[2] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer bodyCylinder.body.sequence_angleStates[3](min = 1, max = 3) = bodyCylinder.sequence_angleStates[3] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real bodyCylinder.body.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.w_0_start[1],bodyCylinder.body.w_0_start[2],bodyCylinder.body.w_0_start[3]})[1], fixed = bodyCylinder.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real bodyCylinder.body.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.w_0_start[1],bodyCylinder.body.w_0_start[2],bodyCylinder.body.w_0_start[3]})[2], fixed = bodyCylinder.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real bodyCylinder.body.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.w_0_start[1],bodyCylinder.body.w_0_start[2],bodyCylinder.body.w_0_start[3]})[3], fixed = bodyCylinder.body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real bodyCylinder.body.z_a[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.z_0_start[1],bodyCylinder.body.z_0_start[2],bodyCylinder.body.z_0_start[3]})[1], fixed = bodyCylinder.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real bodyCylinder.body.z_a[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.z_0_start[1],bodyCylinder.body.z_0_start[2],bodyCylinder.body.z_0_start[3]})[2], fixed = bodyCylinder.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real bodyCylinder.body.z_a[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.z_0_start[1],bodyCylinder.body.z_0_start[2],bodyCylinder.body.z_0_start[3]})[3], fixed = bodyCylinder.body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real bodyCylinder.body.g_0[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real bodyCylinder.body.g_0[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real bodyCylinder.body.g_0[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   protected Real bodyCylinder.body.Q[1](start = bodyCylinder.body.Q_start[1], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real bodyCylinder.body.Q[2](start = bodyCylinder.body.Q_start[2], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real bodyCylinder.body.Q[3](start = bodyCylinder.body.Q_start[3], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real bodyCylinder.body.Q[4](start = bodyCylinder.body.Q_start[4], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real bodyCylinder.body.phi[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = bodyCylinder.body.phi_start[1], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real bodyCylinder.body.phi[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = bodyCylinder.body.phi_start[2], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real bodyCylinder.body.phi[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = bodyCylinder.body.phi_start[3], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real bodyCylinder.body.phi_d[1](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real bodyCylinder.body.phi_d[2](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real bodyCylinder.body.phi_d[3](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real bodyCylinder.body.phi_dd[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real bodyCylinder.body.phi_dd[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real bodyCylinder.body.phi_dd[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   parameter Real bodyCylinder.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_11 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_21 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_31 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_21 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_22 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_32 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_31 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_32 \"inertia tensor\";
//   parameter Real bodyCylinder.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = bodyCylinder.body.I_33 \"inertia tensor\";
//   parameter Real bodyCylinder.body.R_start.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   parameter Real bodyCylinder.body.R_start.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real bodyCylinder.body.R_start.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real bodyCylinder.body.R_start.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real bodyCylinder.body.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = bodyCylinder.body.sphereDiameter / 3.0 \"Diameter of cylinder\";
//   parameter Real bodyCylinder.body.z_a_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.z_0_start[1],bodyCylinder.body.z_0_start[2],bodyCylinder.body.z_0_start[3]})[1] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   parameter Real bodyCylinder.body.z_a_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.z_0_start[1],bodyCylinder.body.z_0_start[2],bodyCylinder.body.z_0_start[3]})[2] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   parameter Real bodyCylinder.body.z_a_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.R_start,{bodyCylinder.body.z_0_start[1],bodyCylinder.body.z_0_start[2],bodyCylinder.body.z_0_start[3]})[3] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   protected parameter Real bodyCylinder.body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(bodyCylinder.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real bodyCylinder.body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(bodyCylinder.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real bodyCylinder.body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(bodyCylinder.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real bodyCylinder.body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(bodyCylinder.body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real bodyCylinder.body.phi_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if bodyCylinder.body.sequence_start[1] == bodyCylinder.body.sequence_angleStates[1] AND bodyCylinder.body.sequence_start[2] == bodyCylinder.body.sequence_angleStates[2] AND bodyCylinder.body.sequence_start[3] == bodyCylinder.body.sequence_angleStates[3] then bodyCylinder.body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(bodyCylinder.body.R_start,{bodyCylinder.body.sequence_angleStates[1],bodyCylinder.body.sequence_angleStates[2],bodyCylinder.body.sequence_angleStates[3]},0.0)[1] \"Potential angle states at initial time\";
//   protected parameter Real bodyCylinder.body.phi_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if bodyCylinder.body.sequence_start[1] == bodyCylinder.body.sequence_angleStates[1] AND bodyCylinder.body.sequence_start[2] == bodyCylinder.body.sequence_angleStates[2] AND bodyCylinder.body.sequence_start[3] == bodyCylinder.body.sequence_angleStates[3] then bodyCylinder.body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(bodyCylinder.body.R_start,{bodyCylinder.body.sequence_angleStates[1],bodyCylinder.body.sequence_angleStates[2],bodyCylinder.body.sequence_angleStates[3]},0.0)[2] \"Potential angle states at initial time\";
//   protected parameter Real bodyCylinder.body.phi_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if bodyCylinder.body.sequence_start[1] == bodyCylinder.body.sequence_angleStates[1] AND bodyCylinder.body.sequence_start[2] == bodyCylinder.body.sequence_angleStates[2] AND bodyCylinder.body.sequence_start[3] == bodyCylinder.body.sequence_angleStates[3] then bodyCylinder.body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(bodyCylinder.body.R_start,{bodyCylinder.body.sequence_angleStates[1],bodyCylinder.body.sequence_angleStates[2],bodyCylinder.body.sequence_angleStates[3]},0.0)[3] \"Potential angle states at initial time\";
//   parameter String bodyCylinder.shape1.shapeType = bodyCylinder.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real bodyCylinder.shape1.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real bodyCylinder.shape1.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real bodyCylinder.shape1.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real bodyCylinder.shape1.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real bodyCylinder.shape1.r[1](quantity = \"Length\", unit = \"m\") = bodyCylinder.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real bodyCylinder.shape1.r[2](quantity = \"Length\", unit = \"m\") = bodyCylinder.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real bodyCylinder.shape1.r[3](quantity = \"Length\", unit = \"m\") = bodyCylinder.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real bodyCylinder.shape1.r_shape[1](quantity = \"Length\", unit = \"m\") = bodyCylinder.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real bodyCylinder.shape1.r_shape[2](quantity = \"Length\", unit = \"m\") = bodyCylinder.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real bodyCylinder.shape1.r_shape[3](quantity = \"Length\", unit = \"m\") = bodyCylinder.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real bodyCylinder.shape1.lengthDirection[1](unit = \"1\") = bodyCylinder.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real bodyCylinder.shape1.lengthDirection[2](unit = \"1\") = bodyCylinder.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real bodyCylinder.shape1.lengthDirection[3](unit = \"1\") = bodyCylinder.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real bodyCylinder.shape1.widthDirection[1](unit = \"1\") = bodyCylinder.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real bodyCylinder.shape1.widthDirection[2](unit = \"1\") = bodyCylinder.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real bodyCylinder.shape1.widthDirection[3](unit = \"1\") = bodyCylinder.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real bodyCylinder.shape1.length(quantity = \"Length\", unit = \"m\") = bodyCylinder.length \"Length of visual object\";
//   input Real bodyCylinder.shape1.width(quantity = \"Length\", unit = \"m\") = bodyCylinder.width \"Width of visual object\";
//   input Real bodyCylinder.shape1.height(quantity = \"Length\", unit = \"m\") = bodyCylinder.height \"Height of visual object\";
//   input Real bodyCylinder.shape1.extra = bodyCylinder.extra \"Additional size data for some of the shape types\";
//   input Real bodyCylinder.shape1.color[1] = Real(bodyCylinder.color[1]) \"Color of shape\";
//   input Real bodyCylinder.shape1.color[2] = Real(bodyCylinder.color[2]) \"Color of shape\";
//   input Real bodyCylinder.shape1.color[3] = Real(bodyCylinder.color[3]) \"Color of shape\";
//   input Real bodyCylinder.shape1.specularCoefficient = bodyCylinder.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real bodyCylinder.shape1.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({bodyCylinder.shape1.lengthDirection[1],bodyCylinder.shape1.lengthDirection[2],bodyCylinder.shape1.lengthDirection[3]});
//   protected Real bodyCylinder.shape1.e_x[1](unit = \"1\") = if noEvent(bodyCylinder.shape1.abs_n_x < 1e-10) then 1.0 else bodyCylinder.shape1.lengthDirection[1] / bodyCylinder.shape1.abs_n_x;
//   protected Real bodyCylinder.shape1.e_x[2](unit = \"1\") = if noEvent(bodyCylinder.shape1.abs_n_x < 1e-10) then 0.0 else bodyCylinder.shape1.lengthDirection[2] / bodyCylinder.shape1.abs_n_x;
//   protected Real bodyCylinder.shape1.e_x[3](unit = \"1\") = if noEvent(bodyCylinder.shape1.abs_n_x < 1e-10) then 0.0 else bodyCylinder.shape1.lengthDirection[3] / bodyCylinder.shape1.abs_n_x;
//   protected Real bodyCylinder.shape1.n_z_aux[1](unit = \"1\") = bodyCylinder.shape1.e_x[2] * bodyCylinder.shape1.widthDirection[3] - bodyCylinder.shape1.e_x[3] * bodyCylinder.shape1.widthDirection[2];
//   protected Real bodyCylinder.shape1.n_z_aux[2](unit = \"1\") = bodyCylinder.shape1.e_x[3] * bodyCylinder.shape1.widthDirection[1] - bodyCylinder.shape1.e_x[1] * bodyCylinder.shape1.widthDirection[3];
//   protected Real bodyCylinder.shape1.n_z_aux[3](unit = \"1\") = bodyCylinder.shape1.e_x[1] * bodyCylinder.shape1.widthDirection[2] - bodyCylinder.shape1.e_x[2] * bodyCylinder.shape1.widthDirection[1];
//   protected Real bodyCylinder.shape1.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({bodyCylinder.shape1.e_x[1],bodyCylinder.shape1.e_x[2],bodyCylinder.shape1.e_x[3]},if noEvent(bodyCylinder.shape1.n_z_aux[1] ^ 2.0 + (bodyCylinder.shape1.n_z_aux[2] ^ 2.0 + bodyCylinder.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {bodyCylinder.shape1.widthDirection[1],bodyCylinder.shape1.widthDirection[2],bodyCylinder.shape1.widthDirection[3]} else if noEvent(abs(bodyCylinder.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{bodyCylinder.shape1.e_x[1],bodyCylinder.shape1.e_x[2],bodyCylinder.shape1.e_x[3]})[1];
//   protected Real bodyCylinder.shape1.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({bodyCylinder.shape1.e_x[1],bodyCylinder.shape1.e_x[2],bodyCylinder.shape1.e_x[3]},if noEvent(bodyCylinder.shape1.n_z_aux[1] ^ 2.0 + (bodyCylinder.shape1.n_z_aux[2] ^ 2.0 + bodyCylinder.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {bodyCylinder.shape1.widthDirection[1],bodyCylinder.shape1.widthDirection[2],bodyCylinder.shape1.widthDirection[3]} else if noEvent(abs(bodyCylinder.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{bodyCylinder.shape1.e_x[1],bodyCylinder.shape1.e_x[2],bodyCylinder.shape1.e_x[3]})[2];
//   protected Real bodyCylinder.shape1.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({bodyCylinder.shape1.e_x[1],bodyCylinder.shape1.e_x[2],bodyCylinder.shape1.e_x[3]},if noEvent(bodyCylinder.shape1.n_z_aux[1] ^ 2.0 + (bodyCylinder.shape1.n_z_aux[2] ^ 2.0 + bodyCylinder.shape1.n_z_aux[3] ^ 2.0) > 1e-06) then {bodyCylinder.shape1.widthDirection[1],bodyCylinder.shape1.widthDirection[2],bodyCylinder.shape1.widthDirection[3]} else if noEvent(abs(bodyCylinder.shape1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{bodyCylinder.shape1.e_x[1],bodyCylinder.shape1.e_x[2],bodyCylinder.shape1.e_x[3]})[3];
//   protected output Real bodyCylinder.shape1.Form;
//   output Real bodyCylinder.shape1.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real bodyCylinder.shape1.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real bodyCylinder.shape1.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real bodyCylinder.shape1.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real bodyCylinder.shape1.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real bodyCylinder.shape1.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real bodyCylinder.shape1.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real bodyCylinder.shape1.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real bodyCylinder.shape1.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real bodyCylinder.shape1.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real bodyCylinder.shape1.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real bodyCylinder.shape1.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real bodyCylinder.shape1.Material;
//   protected output Real bodyCylinder.shape1.Extra;
//   parameter Real bodyCylinder.lengthDirection[1](unit = \"1\") = bodyCylinder.r[1] - bodyCylinder.r_shape[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.lengthDirection[2](unit = \"1\") = bodyCylinder.r[2] - bodyCylinder.r_shape[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.lengthDirection[3](unit = \"1\") = bodyCylinder.r[3] - bodyCylinder.r_shape[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real bodyCylinder.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({bodyCylinder.r[1] - bodyCylinder.r_shape[1],bodyCylinder.r[2] - bodyCylinder.r_shape[2],bodyCylinder.r[3] - bodyCylinder.r_shape[3]}) \" Length of shape\";
//   parameter Real bodyCylinder.width(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.1 \" Width of shape\";
//   parameter Real bodyCylinder.height(quantity = \"Length\", unit = \"m\", min = 0.0) = bodyCylinder.width \" Height of shape.\";
//   parameter Real bodyCylinder.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 2.0 * bodyCylinder.width \" Diameter of sphere\";
//   Real revolute.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real revolute.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real revolute.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real revolute.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real revolute.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real revolute.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real revolute.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real revolute.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real revolute.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real revolute.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real revolute.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real revolute.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real revolute.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real revolute.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real revolute.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real revolute.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real revolute.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real revolute.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean revolute.useAxisFlange = false \"= true, if axis flange is enabled\";
//   parameter Boolean revolute.animation = true \"= true, if animation shall be enabled (show axis as cylinder)\";
//   parameter Real revolute.n[1](unit = \"1\") = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real revolute.n[2](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real revolute.n[3](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   constant Real revolute.phi_offset(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Relative angle offset (angle = phi_offset + phi)\";
//   parameter Real revolute.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Length of cylinder representing the joint axis\";
//   parameter Real revolute.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Diameter of cylinder representing the joint axis\";
//   input Integer revolute.cylinderColor[1](min = 0, max = 255) = 255 \"Color of cylinder representing the joint axis\";
//   input Integer revolute.cylinderColor[2](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Integer revolute.cylinderColor[3](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Real revolute.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) revolute.stateSelect = StateSelect.prefer \"Priority to use joint angle phi and w=der(phi) as states\";
//   Real revolute.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Relative rotation angle from frame_a to frame_b\";
//   Real revolute.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"First derivative of angle phi (relative angular velocity)\";
//   Real revolute.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0, fixed = false) \"Second derivative of angle phi (relative angular acceleration)\";
//   Real revolute.tau(quantity = \"Torque\", unit = \"N.m\") \"Driving torque in direction of axis of rotation\";
//   Real revolute.angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"= phi_offset + phi\";
//   Real revolute.R_rel.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real revolute.R_rel.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.R_rel.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real revolute.R_rel.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real revolute.fixed.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real revolute.fixed.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real revolute.fixed.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   input Real revolute.internalAxis.tau(quantity = \"Torque\", unit = \"N.m\") = revolute.tau \"External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)\";
//   Real revolute.internalAxis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"External support angle (= flange.phi)\";
//   Real revolute.internalAxis.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real revolute.internalAxis.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Boolean revolute.constantTorque.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real revolute.constantTorque.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real revolute.constantTorque.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real revolute.constantTorque.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   Real revolute.constantTorque.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Angle of flange with respect to support (= flange.phi - support.phi)\";
//   parameter Real revolute.constantTorque.tau_constant(quantity = \"Torque\", unit = \"N.m\") = 0.0 \"Constant torque (if negative, torque is acting as load)\";
//   Real revolute.constantTorque.tau(quantity = \"Torque\", unit = \"N.m\") \"Accelerating torque acting at flange (= -flange.tau)\";
//   parameter String revolute.cylinder.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real revolute.cylinder.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real revolute.cylinder.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real revolute.cylinder.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real revolute.cylinder.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real revolute.cylinder.r[1](quantity = \"Length\", unit = \"m\") = revolute.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real revolute.cylinder.r[2](quantity = \"Length\", unit = \"m\") = revolute.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real revolute.cylinder.r[3](quantity = \"Length\", unit = \"m\") = revolute.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real revolute.cylinder.r_shape[1](quantity = \"Length\", unit = \"m\") = (-revolute.cylinderLength) * revolute.e[1] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real revolute.cylinder.r_shape[2](quantity = \"Length\", unit = \"m\") = (-revolute.cylinderLength) * revolute.e[2] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real revolute.cylinder.r_shape[3](quantity = \"Length\", unit = \"m\") = (-revolute.cylinderLength) * revolute.e[3] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real revolute.cylinder.lengthDirection[1](unit = \"1\") = revolute.e[1] \"Vector in length direction, resolved in object frame\";
//   input Real revolute.cylinder.lengthDirection[2](unit = \"1\") = revolute.e[2] \"Vector in length direction, resolved in object frame\";
//   input Real revolute.cylinder.lengthDirection[3](unit = \"1\") = revolute.e[3] \"Vector in length direction, resolved in object frame\";
//   input Real revolute.cylinder.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real revolute.cylinder.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real revolute.cylinder.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real revolute.cylinder.length(quantity = \"Length\", unit = \"m\") = revolute.cylinderLength \"Length of visual object\";
//   input Real revolute.cylinder.width(quantity = \"Length\", unit = \"m\") = revolute.cylinderDiameter \"Width of visual object\";
//   input Real revolute.cylinder.height(quantity = \"Length\", unit = \"m\") = revolute.cylinderDiameter \"Height of visual object\";
//   input Real revolute.cylinder.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real revolute.cylinder.color[1] = Real(revolute.cylinderColor[1]) \"Color of shape\";
//   input Real revolute.cylinder.color[2] = Real(revolute.cylinderColor[2]) \"Color of shape\";
//   input Real revolute.cylinder.color[3] = Real(revolute.cylinderColor[3]) \"Color of shape\";
//   input Real revolute.cylinder.specularCoefficient = revolute.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real revolute.cylinder.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({revolute.cylinder.lengthDirection[1],revolute.cylinder.lengthDirection[2],revolute.cylinder.lengthDirection[3]});
//   protected Real revolute.cylinder.e_x[1](unit = \"1\") = if noEvent(revolute.cylinder.abs_n_x < 1e-10) then 1.0 else revolute.cylinder.lengthDirection[1] / revolute.cylinder.abs_n_x;
//   protected Real revolute.cylinder.e_x[2](unit = \"1\") = if noEvent(revolute.cylinder.abs_n_x < 1e-10) then 0.0 else revolute.cylinder.lengthDirection[2] / revolute.cylinder.abs_n_x;
//   protected Real revolute.cylinder.e_x[3](unit = \"1\") = if noEvent(revolute.cylinder.abs_n_x < 1e-10) then 0.0 else revolute.cylinder.lengthDirection[3] / revolute.cylinder.abs_n_x;
//   protected Real revolute.cylinder.n_z_aux[1](unit = \"1\") = revolute.cylinder.e_x[2] * revolute.cylinder.widthDirection[3] - revolute.cylinder.e_x[3] * revolute.cylinder.widthDirection[2];
//   protected Real revolute.cylinder.n_z_aux[2](unit = \"1\") = revolute.cylinder.e_x[3] * revolute.cylinder.widthDirection[1] - revolute.cylinder.e_x[1] * revolute.cylinder.widthDirection[3];
//   protected Real revolute.cylinder.n_z_aux[3](unit = \"1\") = revolute.cylinder.e_x[1] * revolute.cylinder.widthDirection[2] - revolute.cylinder.e_x[2] * revolute.cylinder.widthDirection[1];
//   protected Real revolute.cylinder.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({revolute.cylinder.e_x[1],revolute.cylinder.e_x[2],revolute.cylinder.e_x[3]},if noEvent(revolute.cylinder.n_z_aux[1] ^ 2.0 + (revolute.cylinder.n_z_aux[2] ^ 2.0 + revolute.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {revolute.cylinder.widthDirection[1],revolute.cylinder.widthDirection[2],revolute.cylinder.widthDirection[3]} else if noEvent(abs(revolute.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{revolute.cylinder.e_x[1],revolute.cylinder.e_x[2],revolute.cylinder.e_x[3]})[1];
//   protected Real revolute.cylinder.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({revolute.cylinder.e_x[1],revolute.cylinder.e_x[2],revolute.cylinder.e_x[3]},if noEvent(revolute.cylinder.n_z_aux[1] ^ 2.0 + (revolute.cylinder.n_z_aux[2] ^ 2.0 + revolute.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {revolute.cylinder.widthDirection[1],revolute.cylinder.widthDirection[2],revolute.cylinder.widthDirection[3]} else if noEvent(abs(revolute.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{revolute.cylinder.e_x[1],revolute.cylinder.e_x[2],revolute.cylinder.e_x[3]})[2];
//   protected Real revolute.cylinder.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({revolute.cylinder.e_x[1],revolute.cylinder.e_x[2],revolute.cylinder.e_x[3]},if noEvent(revolute.cylinder.n_z_aux[1] ^ 2.0 + (revolute.cylinder.n_z_aux[2] ^ 2.0 + revolute.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {revolute.cylinder.widthDirection[1],revolute.cylinder.widthDirection[2],revolute.cylinder.widthDirection[3]} else if noEvent(abs(revolute.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{revolute.cylinder.e_x[1],revolute.cylinder.e_x[2],revolute.cylinder.e_x[3]})[3];
//   protected output Real revolute.cylinder.Form;
//   output Real revolute.cylinder.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real revolute.cylinder.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real revolute.cylinder.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real revolute.cylinder.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real revolute.cylinder.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real revolute.cylinder.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real revolute.cylinder.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real revolute.cylinder.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real revolute.cylinder.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real revolute.cylinder.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real revolute.cylinder.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real revolute.cylinder.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real revolute.cylinder.Material;
//   protected output Real revolute.cylinder.Extra;
//   protected parameter Real revolute.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({revolute.n[1],revolute.n[2],revolute.n[3]},1e-13)[1] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real revolute.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({revolute.n[1],revolute.n[2],revolute.n[3]},1e-13)[2] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real revolute.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({revolute.n[1],revolute.n[2],revolute.n[3]},1e-13)[3] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   Real torque.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real torque.torque[1](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque.torque[2](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque.torque[3](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   parameter Boolean torque.animation = true \"= true, if animation shall be enabled\";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) torque.resolveInFrame = Modelica.Mechanics.MultiBody.Types.ResolveInFrameAB.frame_b \"Frame in which input force is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)\";
//   parameter Real torque.Nm_to_m(unit = \"N.m/m\") = world.defaultNm_to_m \" Torque arrow scaling (length = torque/Nm_to_m)\";
//   input Real torque.torqueDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultArrowDiameter \" Diameter of torque arrow\";
//   input Real torque.connectionLineDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = torque.torqueDiameter \" Diameter of line connecting frame_a and frame_b\";
//   input Integer torque.torqueColor[1](min = 0, max = 255) = 0 \" Color of torque arrow\";
//   input Integer torque.torqueColor[2](min = 0, max = 255) = 128 \" Color of torque arrow\";
//   input Integer torque.torqueColor[3](min = 0, max = 255) = 0 \" Color of torque arrow\";
//   input Integer torque.connectionLineColor[1](min = 0, max = 255) = 255 \" Color of line connecting frame_a and frame_b\";
//   input Integer torque.connectionLineColor[2](min = 0, max = 255) = 255 \" Color of line connecting frame_a and frame_b\";
//   input Integer torque.connectionLineColor[3](min = 0, max = 255) = 0 \" Color of line connecting frame_a and frame_b\";
//   input Real torque.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque.t_in_m[1](quantity = \"Length\", unit = \"m\") = torque.frame_b.t[1] / torque.Nm_to_m \"Torque mapped from Nm to m for animation\";
//   protected Real torque.t_in_m[2](quantity = \"Length\", unit = \"m\") = torque.frame_b.t[2] / torque.Nm_to_m \"Torque mapped from Nm to m for animation\";
//   protected Real torque.t_in_m[3](quantity = \"Length\", unit = \"m\") = torque.frame_b.t[3] / torque.Nm_to_m \"Torque mapped from Nm to m for animation\";
//   Real torque.basicTorque.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_resolve.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_resolve.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_resolve.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.basicTorque.frame_resolve.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.basicTorque.frame_resolve.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_resolve.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_resolve.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.basicTorque.frame_resolve.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_resolve.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_resolve.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.basicTorque.frame_resolve.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_resolve.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.basicTorque.frame_resolve.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real torque.basicTorque.torque[1](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque.basicTorque.torque[2](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   input Real torque.basicTorque.torque[3](quantity = \"Torque\", unit = \"N.m\") \"x-, y-, z-coordiantes of torque resolved in frame defined by resolveInFrame\";
//   parameter enumeration(world, frame_a, frame_b, frame_resolve) torque.basicTorque.resolveInFrame = torque.resolveInFrame \"Frame in which torque is resolved (1: world, 2: frame_a, 3: frame_b, 4: frame_resolve)\";
//   Real torque.basicTorque.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from origin of frame_a to origin of frame_b resolved in world frame\";
//   Real torque.basicTorque.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from origin of frame_a to origin of frame_b resolved in world frame\";
//   Real torque.basicTorque.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from origin of frame_a to origin of frame_b resolved in world frame\";
//   Real torque.basicTorque.t_b_0[1](quantity = \"Torque\", unit = \"N.m\") \"frame_b.t resoved in world frame\";
//   Real torque.basicTorque.t_b_0[2](quantity = \"Torque\", unit = \"N.m\") \"frame_b.t resoved in world frame\";
//   Real torque.basicTorque.t_b_0[3](quantity = \"Torque\", unit = \"N.m\") \"frame_b.t resoved in world frame\";
//   input Real torque.torqueArrow.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.r[1](quantity = \"Length\", unit = \"m\") = torque.frame_b.r_0[1] \"Position vector from origin of world frame to origin of arrow frame, resolved in world frame\";
//   input Real torque.torqueArrow.r[2](quantity = \"Length\", unit = \"m\") = torque.frame_b.r_0[2] \"Position vector from origin of world frame to origin of arrow frame, resolved in world frame\";
//   input Real torque.torqueArrow.r[3](quantity = \"Length\", unit = \"m\") = torque.frame_b.r_0[3] \"Position vector from origin of world frame to origin of arrow frame, resolved in world frame\";
//   input Real torque.torqueArrow.r_tail[1](quantity = \"Length\", unit = \"m\") = torque.t_in_m[1] \"Position vector from origin of arrow frame to double arrow tail, resolved in arrow frame\";
//   input Real torque.torqueArrow.r_tail[2](quantity = \"Length\", unit = \"m\") = torque.t_in_m[2] \"Position vector from origin of arrow frame to double arrow tail, resolved in arrow frame\";
//   input Real torque.torqueArrow.r_tail[3](quantity = \"Length\", unit = \"m\") = torque.t_in_m[3] \"Position vector from origin of arrow frame to double arrow tail, resolved in arrow frame\";
//   input Real torque.torqueArrow.r_head[1](quantity = \"Length\", unit = \"m\") = -torque.t_in_m[1] \"Position vector from double arrow tail to the head of the double arrow, resolved in arrow frame\";
//   input Real torque.torqueArrow.r_head[2](quantity = \"Length\", unit = \"m\") = -torque.t_in_m[2] \"Position vector from double arrow tail to the head of the double arrow, resolved in arrow frame\";
//   input Real torque.torqueArrow.r_head[3](quantity = \"Length\", unit = \"m\") = -torque.t_in_m[3] \"Position vector from double arrow tail to the head of the double arrow, resolved in arrow frame\";
//   input Real torque.torqueArrow.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = torque.torqueDiameter \"Diameter of arrow line\";
//   input Integer torque.torqueArrow.color[1](min = 0, max = 255) = torque.torqueColor[1] \"Color of double arrow\";
//   input Integer torque.torqueArrow.color[2](min = 0, max = 255) = torque.torqueColor[2] \"Color of double arrow\";
//   input Integer torque.torqueArrow.color[3](min = 0, max = 255) = torque.torqueColor[3] \"Color of double arrow\";
//   input Real torque.torqueArrow.specularCoefficient = torque.specularCoefficient \"Material property describing the reflecting of ambient light (= 0 means, that light is completely absorbed)\";
//   protected Real torque.torqueArrow.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({torque.torqueArrow.r_head[1],torque.torqueArrow.r_head[2],torque.torqueArrow.r_head[3]}) \"Length of arrow\";
//   protected Real torque.torqueArrow.headLength(quantity = \"Length\", unit = \"m\") = max(0.0,min(torque.torqueArrow.length,4.0 * torque.torqueArrow.diameter));
//   protected Real torque.torqueArrow.headWidth(quantity = \"Length\", unit = \"m\") = max(0.0,3.0 * torque.torqueArrow.diameter);
//   parameter String torque.torqueArrow.arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque.torqueArrow.arrowLine.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowLine.r[1](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.r[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowLine.r[2](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.r[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowLine.r[3](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.r[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.r_tail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.r_tail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.r_tail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.lengthDirection[1](unit = \"1\") = torque.torqueArrow.r_head[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.lengthDirection[2](unit = \"1\") = torque.torqueArrow.r_head[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.lengthDirection[3](unit = \"1\") = torque.torqueArrow.r_head[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowLine.length(quantity = \"Length\", unit = \"m\") = max(0.0,torque.torqueArrow.length - 6.0 * torque.torqueArrow.diameter) \"Length of visual object\";
//   input Real torque.torqueArrow.arrowLine.width(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.diameter \"Width of visual object\";
//   input Real torque.torqueArrow.arrowLine.height(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.diameter \"Height of visual object\";
//   input Real torque.torqueArrow.arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque.torqueArrow.arrowLine.color[1] = Real(torque.torqueArrow.color[1]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowLine.color[2] = Real(torque.torqueArrow.color[2]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowLine.color[3] = Real(torque.torqueArrow.color[3]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowLine.specularCoefficient = torque.torqueArrow.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque.torqueArrow.arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque.torqueArrow.arrowLine.lengthDirection[1],torque.torqueArrow.arrowLine.lengthDirection[2],torque.torqueArrow.arrowLine.lengthDirection[3]});
//   protected Real torque.torqueArrow.arrowLine.e_x[1](unit = \"1\") = if noEvent(torque.torqueArrow.arrowLine.abs_n_x < 1e-10) then 1.0 else torque.torqueArrow.arrowLine.lengthDirection[1] / torque.torqueArrow.arrowLine.abs_n_x;
//   protected Real torque.torqueArrow.arrowLine.e_x[2](unit = \"1\") = if noEvent(torque.torqueArrow.arrowLine.abs_n_x < 1e-10) then 0.0 else torque.torqueArrow.arrowLine.lengthDirection[2] / torque.torqueArrow.arrowLine.abs_n_x;
//   protected Real torque.torqueArrow.arrowLine.e_x[3](unit = \"1\") = if noEvent(torque.torqueArrow.arrowLine.abs_n_x < 1e-10) then 0.0 else torque.torqueArrow.arrowLine.lengthDirection[3] / torque.torqueArrow.arrowLine.abs_n_x;
//   protected Real torque.torqueArrow.arrowLine.n_z_aux[1](unit = \"1\") = torque.torqueArrow.arrowLine.e_x[2] * torque.torqueArrow.arrowLine.widthDirection[3] - torque.torqueArrow.arrowLine.e_x[3] * torque.torqueArrow.arrowLine.widthDirection[2];
//   protected Real torque.torqueArrow.arrowLine.n_z_aux[2](unit = \"1\") = torque.torqueArrow.arrowLine.e_x[3] * torque.torqueArrow.arrowLine.widthDirection[1] - torque.torqueArrow.arrowLine.e_x[1] * torque.torqueArrow.arrowLine.widthDirection[3];
//   protected Real torque.torqueArrow.arrowLine.n_z_aux[3](unit = \"1\") = torque.torqueArrow.arrowLine.e_x[1] * torque.torqueArrow.arrowLine.widthDirection[2] - torque.torqueArrow.arrowLine.e_x[2] * torque.torqueArrow.arrowLine.widthDirection[1];
//   protected Real torque.torqueArrow.arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowLine.e_x[1],torque.torqueArrow.arrowLine.e_x[2],torque.torqueArrow.arrowLine.e_x[3]},if noEvent(torque.torqueArrow.arrowLine.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowLine.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowLine.widthDirection[1],torque.torqueArrow.arrowLine.widthDirection[2],torque.torqueArrow.arrowLine.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowLine.e_x[1],torque.torqueArrow.arrowLine.e_x[2],torque.torqueArrow.arrowLine.e_x[3]})[1];
//   protected Real torque.torqueArrow.arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowLine.e_x[1],torque.torqueArrow.arrowLine.e_x[2],torque.torqueArrow.arrowLine.e_x[3]},if noEvent(torque.torqueArrow.arrowLine.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowLine.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowLine.widthDirection[1],torque.torqueArrow.arrowLine.widthDirection[2],torque.torqueArrow.arrowLine.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowLine.e_x[1],torque.torqueArrow.arrowLine.e_x[2],torque.torqueArrow.arrowLine.e_x[3]})[2];
//   protected Real torque.torqueArrow.arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowLine.e_x[1],torque.torqueArrow.arrowLine.e_x[2],torque.torqueArrow.arrowLine.e_x[3]},if noEvent(torque.torqueArrow.arrowLine.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowLine.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowLine.widthDirection[1],torque.torqueArrow.arrowLine.widthDirection[2],torque.torqueArrow.arrowLine.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowLine.e_x[1],torque.torqueArrow.arrowLine.e_x[2],torque.torqueArrow.arrowLine.e_x[3]})[3];
//   protected output Real torque.torqueArrow.arrowLine.Form;
//   output Real torque.torqueArrow.arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.torqueArrow.arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque.torqueArrow.arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowLine.Material;
//   protected output Real torque.torqueArrow.arrowLine.Extra;
//   parameter String torque.torqueArrow.arrowHead1.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque.torqueArrow.arrowHead1.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowHead1.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowHead1.r[1](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.arrowLine.rvisobj[1] + torque.torqueArrow.arrowLine.length * torque.torqueArrow.arrowLine.rxvisobj[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowHead1.r[2](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.arrowLine.rvisobj[2] + torque.torqueArrow.arrowLine.length * torque.torqueArrow.arrowLine.rxvisobj[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowHead1.r[3](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.arrowLine.rvisobj[3] + torque.torqueArrow.arrowLine.length * torque.torqueArrow.arrowLine.rxvisobj[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowHead1.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.lengthDirection[1](unit = \"1\") = torque.torqueArrow.r_head[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.lengthDirection[2](unit = \"1\") = torque.torqueArrow.r_head[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.lengthDirection[3](unit = \"1\") = torque.torqueArrow.r_head[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead1.length(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.headLength \"Length of visual object\";
//   input Real torque.torqueArrow.arrowHead1.width(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.headWidth \"Width of visual object\";
//   input Real torque.torqueArrow.arrowHead1.height(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.headWidth \"Height of visual object\";
//   input Real torque.torqueArrow.arrowHead1.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque.torqueArrow.arrowHead1.color[1] = Real(torque.torqueArrow.color[1]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowHead1.color[2] = Real(torque.torqueArrow.color[2]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowHead1.color[3] = Real(torque.torqueArrow.color[3]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowHead1.specularCoefficient = torque.torqueArrow.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque.torqueArrow.arrowHead1.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque.torqueArrow.arrowHead1.lengthDirection[1],torque.torqueArrow.arrowHead1.lengthDirection[2],torque.torqueArrow.arrowHead1.lengthDirection[3]});
//   protected Real torque.torqueArrow.arrowHead1.e_x[1](unit = \"1\") = if noEvent(torque.torqueArrow.arrowHead1.abs_n_x < 1e-10) then 1.0 else torque.torqueArrow.arrowHead1.lengthDirection[1] / torque.torqueArrow.arrowHead1.abs_n_x;
//   protected Real torque.torqueArrow.arrowHead1.e_x[2](unit = \"1\") = if noEvent(torque.torqueArrow.arrowHead1.abs_n_x < 1e-10) then 0.0 else torque.torqueArrow.arrowHead1.lengthDirection[2] / torque.torqueArrow.arrowHead1.abs_n_x;
//   protected Real torque.torqueArrow.arrowHead1.e_x[3](unit = \"1\") = if noEvent(torque.torqueArrow.arrowHead1.abs_n_x < 1e-10) then 0.0 else torque.torqueArrow.arrowHead1.lengthDirection[3] / torque.torqueArrow.arrowHead1.abs_n_x;
//   protected Real torque.torqueArrow.arrowHead1.n_z_aux[1](unit = \"1\") = torque.torqueArrow.arrowHead1.e_x[2] * torque.torqueArrow.arrowHead1.widthDirection[3] - torque.torqueArrow.arrowHead1.e_x[3] * torque.torqueArrow.arrowHead1.widthDirection[2];
//   protected Real torque.torqueArrow.arrowHead1.n_z_aux[2](unit = \"1\") = torque.torqueArrow.arrowHead1.e_x[3] * torque.torqueArrow.arrowHead1.widthDirection[1] - torque.torqueArrow.arrowHead1.e_x[1] * torque.torqueArrow.arrowHead1.widthDirection[3];
//   protected Real torque.torqueArrow.arrowHead1.n_z_aux[3](unit = \"1\") = torque.torqueArrow.arrowHead1.e_x[1] * torque.torqueArrow.arrowHead1.widthDirection[2] - torque.torqueArrow.arrowHead1.e_x[2] * torque.torqueArrow.arrowHead1.widthDirection[1];
//   protected Real torque.torqueArrow.arrowHead1.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowHead1.e_x[1],torque.torqueArrow.arrowHead1.e_x[2],torque.torqueArrow.arrowHead1.e_x[3]},if noEvent(torque.torqueArrow.arrowHead1.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowHead1.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowHead1.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowHead1.widthDirection[1],torque.torqueArrow.arrowHead1.widthDirection[2],torque.torqueArrow.arrowHead1.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowHead1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowHead1.e_x[1],torque.torqueArrow.arrowHead1.e_x[2],torque.torqueArrow.arrowHead1.e_x[3]})[1];
//   protected Real torque.torqueArrow.arrowHead1.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowHead1.e_x[1],torque.torqueArrow.arrowHead1.e_x[2],torque.torqueArrow.arrowHead1.e_x[3]},if noEvent(torque.torqueArrow.arrowHead1.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowHead1.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowHead1.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowHead1.widthDirection[1],torque.torqueArrow.arrowHead1.widthDirection[2],torque.torqueArrow.arrowHead1.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowHead1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowHead1.e_x[1],torque.torqueArrow.arrowHead1.e_x[2],torque.torqueArrow.arrowHead1.e_x[3]})[2];
//   protected Real torque.torqueArrow.arrowHead1.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowHead1.e_x[1],torque.torqueArrow.arrowHead1.e_x[2],torque.torqueArrow.arrowHead1.e_x[3]},if noEvent(torque.torqueArrow.arrowHead1.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowHead1.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowHead1.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowHead1.widthDirection[1],torque.torqueArrow.arrowHead1.widthDirection[2],torque.torqueArrow.arrowHead1.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowHead1.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowHead1.e_x[1],torque.torqueArrow.arrowHead1.e_x[2],torque.torqueArrow.arrowHead1.e_x[3]})[3];
//   protected output Real torque.torqueArrow.arrowHead1.Form;
//   output Real torque.torqueArrow.arrowHead1.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead1.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque.torqueArrow.arrowHead1.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowHead1.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowHead1.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowHead1.Material;
//   protected output Real torque.torqueArrow.arrowHead1.Extra;
//   parameter String torque.torqueArrow.arrowHead2.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque.torqueArrow.arrowHead2.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowHead2.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.torqueArrow.arrowHead2.r[1](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.arrowLine.rvisobj[1] + (torque.torqueArrow.arrowLine.length + 0.5 * torque.torqueArrow.arrowHead1.length) * torque.torqueArrow.arrowLine.rxvisobj[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowHead2.r[2](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.arrowLine.rvisobj[2] + (torque.torqueArrow.arrowLine.length + 0.5 * torque.torqueArrow.arrowHead1.length) * torque.torqueArrow.arrowLine.rxvisobj[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowHead2.r[3](quantity = \"Length\", unit = \"m\") = torque.torqueArrow.arrowLine.rvisobj[3] + (torque.torqueArrow.arrowLine.length + 0.5 * torque.torqueArrow.arrowHead1.length) * torque.torqueArrow.arrowLine.rxvisobj[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.torqueArrow.arrowHead2.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.lengthDirection[1](unit = \"1\") = torque.torqueArrow.r_head[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.lengthDirection[2](unit = \"1\") = torque.torqueArrow.r_head[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.lengthDirection[3](unit = \"1\") = torque.torqueArrow.r_head[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.torqueArrow.arrowHead2.length(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.headLength \"Length of visual object\";
//   input Real torque.torqueArrow.arrowHead2.width(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.headWidth \"Width of visual object\";
//   input Real torque.torqueArrow.arrowHead2.height(quantity = \"Length\", unit = \"m\") = torque.torqueArrow.headWidth \"Height of visual object\";
//   input Real torque.torqueArrow.arrowHead2.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque.torqueArrow.arrowHead2.color[1] = Real(torque.torqueArrow.color[1]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowHead2.color[2] = Real(torque.torqueArrow.color[2]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowHead2.color[3] = Real(torque.torqueArrow.color[3]) \"Color of shape\";
//   input Real torque.torqueArrow.arrowHead2.specularCoefficient = torque.torqueArrow.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque.torqueArrow.arrowHead2.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque.torqueArrow.arrowHead2.lengthDirection[1],torque.torqueArrow.arrowHead2.lengthDirection[2],torque.torqueArrow.arrowHead2.lengthDirection[3]});
//   protected Real torque.torqueArrow.arrowHead2.e_x[1](unit = \"1\") = if noEvent(torque.torqueArrow.arrowHead2.abs_n_x < 1e-10) then 1.0 else torque.torqueArrow.arrowHead2.lengthDirection[1] / torque.torqueArrow.arrowHead2.abs_n_x;
//   protected Real torque.torqueArrow.arrowHead2.e_x[2](unit = \"1\") = if noEvent(torque.torqueArrow.arrowHead2.abs_n_x < 1e-10) then 0.0 else torque.torqueArrow.arrowHead2.lengthDirection[2] / torque.torqueArrow.arrowHead2.abs_n_x;
//   protected Real torque.torqueArrow.arrowHead2.e_x[3](unit = \"1\") = if noEvent(torque.torqueArrow.arrowHead2.abs_n_x < 1e-10) then 0.0 else torque.torqueArrow.arrowHead2.lengthDirection[3] / torque.torqueArrow.arrowHead2.abs_n_x;
//   protected Real torque.torqueArrow.arrowHead2.n_z_aux[1](unit = \"1\") = torque.torqueArrow.arrowHead2.e_x[2] * torque.torqueArrow.arrowHead2.widthDirection[3] - torque.torqueArrow.arrowHead2.e_x[3] * torque.torqueArrow.arrowHead2.widthDirection[2];
//   protected Real torque.torqueArrow.arrowHead2.n_z_aux[2](unit = \"1\") = torque.torqueArrow.arrowHead2.e_x[3] * torque.torqueArrow.arrowHead2.widthDirection[1] - torque.torqueArrow.arrowHead2.e_x[1] * torque.torqueArrow.arrowHead2.widthDirection[3];
//   protected Real torque.torqueArrow.arrowHead2.n_z_aux[3](unit = \"1\") = torque.torqueArrow.arrowHead2.e_x[1] * torque.torqueArrow.arrowHead2.widthDirection[2] - torque.torqueArrow.arrowHead2.e_x[2] * torque.torqueArrow.arrowHead2.widthDirection[1];
//   protected Real torque.torqueArrow.arrowHead2.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowHead2.e_x[1],torque.torqueArrow.arrowHead2.e_x[2],torque.torqueArrow.arrowHead2.e_x[3]},if noEvent(torque.torqueArrow.arrowHead2.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowHead2.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowHead2.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowHead2.widthDirection[1],torque.torqueArrow.arrowHead2.widthDirection[2],torque.torqueArrow.arrowHead2.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowHead2.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowHead2.e_x[1],torque.torqueArrow.arrowHead2.e_x[2],torque.torqueArrow.arrowHead2.e_x[3]})[1];
//   protected Real torque.torqueArrow.arrowHead2.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowHead2.e_x[1],torque.torqueArrow.arrowHead2.e_x[2],torque.torqueArrow.arrowHead2.e_x[3]},if noEvent(torque.torqueArrow.arrowHead2.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowHead2.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowHead2.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowHead2.widthDirection[1],torque.torqueArrow.arrowHead2.widthDirection[2],torque.torqueArrow.arrowHead2.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowHead2.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowHead2.e_x[1],torque.torqueArrow.arrowHead2.e_x[2],torque.torqueArrow.arrowHead2.e_x[3]})[2];
//   protected Real torque.torqueArrow.arrowHead2.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.torqueArrow.arrowHead2.e_x[1],torque.torqueArrow.arrowHead2.e_x[2],torque.torqueArrow.arrowHead2.e_x[3]},if noEvent(torque.torqueArrow.arrowHead2.n_z_aux[1] ^ 2.0 + (torque.torqueArrow.arrowHead2.n_z_aux[2] ^ 2.0 + torque.torqueArrow.arrowHead2.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.torqueArrow.arrowHead2.widthDirection[1],torque.torqueArrow.arrowHead2.widthDirection[2],torque.torqueArrow.arrowHead2.widthDirection[3]} else if noEvent(abs(torque.torqueArrow.arrowHead2.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.torqueArrow.arrowHead2.e_x[1],torque.torqueArrow.arrowHead2.e_x[2],torque.torqueArrow.arrowHead2.e_x[3]})[3];
//   protected output Real torque.torqueArrow.arrowHead2.Form;
//   output Real torque.torqueArrow.arrowHead2.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.torqueArrow.arrowHead2.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque.torqueArrow.arrowHead2.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowHead2.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowHead2.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.torqueArrow.arrowHead2.Material;
//   protected output Real torque.torqueArrow.arrowHead2.Extra;
//   parameter String torque.connectionLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real torque.connectionLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real torque.connectionLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.connectionLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.connectionLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real torque.connectionLine.r[1](quantity = \"Length\", unit = \"m\") = torque.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.connectionLine.r[2](quantity = \"Length\", unit = \"m\") = torque.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.connectionLine.r[3](quantity = \"Length\", unit = \"m\") = torque.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real torque.connectionLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.connectionLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.connectionLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real torque.connectionLine.lengthDirection[1](unit = \"1\") = torque.basicTorque.r_0[1] \"Vector in length direction, resolved in object frame\";
//   input Real torque.connectionLine.lengthDirection[2](unit = \"1\") = torque.basicTorque.r_0[2] \"Vector in length direction, resolved in object frame\";
//   input Real torque.connectionLine.lengthDirection[3](unit = \"1\") = torque.basicTorque.r_0[3] \"Vector in length direction, resolved in object frame\";
//   input Real torque.connectionLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.connectionLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.connectionLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real torque.connectionLine.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({torque.basicTorque.r_0[1],torque.basicTorque.r_0[2],torque.basicTorque.r_0[3]}) \"Length of visual object\";
//   input Real torque.connectionLine.width(quantity = \"Length\", unit = \"m\") = torque.connectionLineDiameter \"Width of visual object\";
//   input Real torque.connectionLine.height(quantity = \"Length\", unit = \"m\") = torque.connectionLineDiameter \"Height of visual object\";
//   input Real torque.connectionLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real torque.connectionLine.color[1] = Real(torque.connectionLineColor[1]) \"Color of shape\";
//   input Real torque.connectionLine.color[2] = Real(torque.connectionLineColor[2]) \"Color of shape\";
//   input Real torque.connectionLine.color[3] = Real(torque.connectionLineColor[3]) \"Color of shape\";
//   input Real torque.connectionLine.specularCoefficient = torque.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real torque.connectionLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({torque.connectionLine.lengthDirection[1],torque.connectionLine.lengthDirection[2],torque.connectionLine.lengthDirection[3]});
//   protected Real torque.connectionLine.e_x[1](unit = \"1\") = if noEvent(torque.connectionLine.abs_n_x < 1e-10) then 1.0 else torque.connectionLine.lengthDirection[1] / torque.connectionLine.abs_n_x;
//   protected Real torque.connectionLine.e_x[2](unit = \"1\") = if noEvent(torque.connectionLine.abs_n_x < 1e-10) then 0.0 else torque.connectionLine.lengthDirection[2] / torque.connectionLine.abs_n_x;
//   protected Real torque.connectionLine.e_x[3](unit = \"1\") = if noEvent(torque.connectionLine.abs_n_x < 1e-10) then 0.0 else torque.connectionLine.lengthDirection[3] / torque.connectionLine.abs_n_x;
//   protected Real torque.connectionLine.n_z_aux[1](unit = \"1\") = torque.connectionLine.e_x[2] * torque.connectionLine.widthDirection[3] - torque.connectionLine.e_x[3] * torque.connectionLine.widthDirection[2];
//   protected Real torque.connectionLine.n_z_aux[2](unit = \"1\") = torque.connectionLine.e_x[3] * torque.connectionLine.widthDirection[1] - torque.connectionLine.e_x[1] * torque.connectionLine.widthDirection[3];
//   protected Real torque.connectionLine.n_z_aux[3](unit = \"1\") = torque.connectionLine.e_x[1] * torque.connectionLine.widthDirection[2] - torque.connectionLine.e_x[2] * torque.connectionLine.widthDirection[1];
//   protected Real torque.connectionLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.connectionLine.e_x[1],torque.connectionLine.e_x[2],torque.connectionLine.e_x[3]},if noEvent(torque.connectionLine.n_z_aux[1] ^ 2.0 + (torque.connectionLine.n_z_aux[2] ^ 2.0 + torque.connectionLine.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.connectionLine.widthDirection[1],torque.connectionLine.widthDirection[2],torque.connectionLine.widthDirection[3]} else if noEvent(abs(torque.connectionLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.connectionLine.e_x[1],torque.connectionLine.e_x[2],torque.connectionLine.e_x[3]})[1];
//   protected Real torque.connectionLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.connectionLine.e_x[1],torque.connectionLine.e_x[2],torque.connectionLine.e_x[3]},if noEvent(torque.connectionLine.n_z_aux[1] ^ 2.0 + (torque.connectionLine.n_z_aux[2] ^ 2.0 + torque.connectionLine.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.connectionLine.widthDirection[1],torque.connectionLine.widthDirection[2],torque.connectionLine.widthDirection[3]} else if noEvent(abs(torque.connectionLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.connectionLine.e_x[1],torque.connectionLine.e_x[2],torque.connectionLine.e_x[3]})[2];
//   protected Real torque.connectionLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({torque.connectionLine.e_x[1],torque.connectionLine.e_x[2],torque.connectionLine.e_x[3]},if noEvent(torque.connectionLine.n_z_aux[1] ^ 2.0 + (torque.connectionLine.n_z_aux[2] ^ 2.0 + torque.connectionLine.n_z_aux[3] ^ 2.0) > 1e-06) then {torque.connectionLine.widthDirection[1],torque.connectionLine.widthDirection[2],torque.connectionLine.widthDirection[3]} else if noEvent(abs(torque.connectionLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{torque.connectionLine.e_x[1],torque.connectionLine.e_x[2],torque.connectionLine.e_x[3]})[3];
//   protected output Real torque.connectionLine.Form;
//   output Real torque.connectionLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.connectionLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.connectionLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real torque.connectionLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.connectionLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.connectionLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real torque.connectionLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.connectionLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real torque.connectionLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real torque.connectionLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.connectionLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.connectionLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real torque.connectionLine.Material;
//   protected output Real torque.connectionLine.Extra;
//   Real torque.zeroPosition.frame_resolve.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.zeroPosition.frame_resolve.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.zeroPosition.frame_resolve.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real torque.zeroPosition.frame_resolve.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.zeroPosition.frame_resolve.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.zeroPosition.frame_resolve.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real torque.zeroPosition.frame_resolve.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.zeroPosition.frame_resolve.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.zeroPosition.frame_resolve.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real torque.zeroPosition.frame_resolve.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.zeroPosition.frame_resolve.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real torque.zeroPosition.frame_resolve.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   output Real sine1[1].y \"Connector of Real output signal\";
//   parameter Real sine1[1].amplitude = 1.0 \"Amplitude of sine wave\";
//   parameter Real sine1[1].freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine1[1].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine1[1].offset = 0.0 \"Offset of output signal\";
//   parameter Real sine1[1].startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine1[1].pi = 3.14159265358979;
//   output Real sine1[2].y \"Connector of Real output signal\";
//   parameter Real sine1[2].amplitude = 0.0 \"Amplitude of sine wave\";
//   parameter Real sine1[2].freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine1[2].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine1[2].offset = 0.0 \"Offset of output signal\";
//   parameter Real sine1[2].startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine1[2].pi = 3.14159265358979;
//   output Real sine1[3].y \"Connector of Real output signal\";
//   parameter Real sine1[3].amplitude = 0.0 \"Amplitude of sine wave\";
//   parameter Real sine1[3].freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine1[3].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine1[3].offset = 0.0 \"Offset of output signal\";
//   parameter Real sine1[3].startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine1[3].pi = 3.14159265358979;
//   parameter Boolean rotor1D.animation = true \"= true, if animation shall be enabled (show rotor as cylinder)\";
//   parameter Real rotor1D.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0, start = 1.0) = 2.0 \"Moment of inertia of rotor around its axis of rotation\";
//   parameter Real rotor1D.n[1](unit = \"1\") = 1.0 \"Axis of rotation resolved in frame_a\";
//   parameter Real rotor1D.n[2](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a\";
//   parameter Real rotor1D.n[3](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a\";
//   parameter Real rotor1D.r_center[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of frame_a to center of cylinder\";
//   parameter Real rotor1D.r_center[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of frame_a to center of cylinder\";
//   parameter Real rotor1D.r_center[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of frame_a to center of cylinder\";
//   parameter Real rotor1D.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = 2.0 * world.defaultJointLength \"Length of cylinder representing the rotor\";
//   parameter Real rotor1D.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 2.0 * world.defaultJointWidth \"Diameter of cylinder representing the rotor\";
//   input Integer rotor1D.cylinderColor[1](min = 0, max = 255) = 155 \"Color of cylinder representing the rotor\";
//   input Integer rotor1D.cylinderColor[2](min = 0, max = 255) = 155 \"Color of cylinder representing the rotor\";
//   input Integer rotor1D.cylinderColor[3](min = 0, max = 255) = 155 \"Color of cylinder representing the rotor\";
//   input Real rotor1D.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) rotor1D.stateSelect = StateSelect.default \"Priority to use rotor angle (phi) and rotor speed (w) as states\";
//   parameter Boolean rotor1D.exact = true \"= true, if exact calculations; false if influence of bearing on rotor acceleration is neglected to avoid an algebraic loop\";
//   Real rotor1D.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, fixed = true, StateSelect = StateSelect.default) \"Rotation angle of rotor with respect to frame_a (= flange_a.phi = flange_b.phi)\";
//   Real rotor1D.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, fixed = true, StateSelect = StateSelect.default) \"Angular velocity of rotor with respect to frame_a\";
//   Real rotor1D.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Angular acceleration of rotor with respect to frame_a\";
//   Real rotor1D.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rotor1D.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real rotor1D.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rotor1D.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real rotor1D.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real rotor1D.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real rotor1D.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real rotor1D.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real rotor1D.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real rotor1D.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real rotor1D.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real rotor1D.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real rotor1D.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real rotor1D.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real rotor1D.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real rotor1D.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean rotor1D.rotorWith3DEffects.animation = rotor1D.animation \"= true, if animation shall be enabled (show rotor as cylinder)\";
//   parameter Real rotor1D.rotorWith3DEffects.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = rotor1D.J \"Moment of inertia of rotor around its axis of rotation\";
//   parameter Real rotor1D.rotorWith3DEffects.n[1](unit = \"1\") = rotor1D.n[1] \"Axis of rotation resolved in frame_a\";
//   parameter Real rotor1D.rotorWith3DEffects.n[2](unit = \"1\") = rotor1D.n[2] \"Axis of rotation resolved in frame_a\";
//   parameter Real rotor1D.rotorWith3DEffects.n[3](unit = \"1\") = rotor1D.n[3] \"Axis of rotation resolved in frame_a\";
//   parameter Real rotor1D.rotorWith3DEffects.r_center[1](quantity = \"Length\", unit = \"m\") = rotor1D.r_center[1] \"Position vector from origin of frame_a to center of cylinder\";
//   parameter Real rotor1D.rotorWith3DEffects.r_center[2](quantity = \"Length\", unit = \"m\") = rotor1D.r_center[2] \"Position vector from origin of frame_a to center of cylinder\";
//   parameter Real rotor1D.rotorWith3DEffects.r_center[3](quantity = \"Length\", unit = \"m\") = rotor1D.r_center[3] \"Position vector from origin of frame_a to center of cylinder\";
//   parameter Real rotor1D.rotorWith3DEffects.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = rotor1D.cylinderLength \"Length of cylinder representing the rotor\";
//   parameter Real rotor1D.rotorWith3DEffects.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = rotor1D.cylinderDiameter \"Diameter of cylinder representing the rotor\";
//   input Integer rotor1D.rotorWith3DEffects.cylinderColor[1](min = 0, max = 255) = rotor1D.cylinderColor[1] \"Color of cylinder representing the rotor\";
//   input Integer rotor1D.rotorWith3DEffects.cylinderColor[2](min = 0, max = 255) = rotor1D.cylinderColor[2] \"Color of cylinder representing the rotor\";
//   input Integer rotor1D.rotorWith3DEffects.cylinderColor[3](min = 0, max = 255) = rotor1D.cylinderColor[3] \"Color of cylinder representing the rotor\";
//   input Real rotor1D.rotorWith3DEffects.specularCoefficient = rotor1D.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) rotor1D.rotorWith3DEffects.stateSelect = StateSelect.default \"Priority to use rotor angle (phi) and rotor speed (w) as states\";
//   parameter Boolean rotor1D.rotorWith3DEffects.exact = rotor1D.exact \"= true, if exact calculations; false if influence of bearing on rotor acceleration is neglected to avoid an algebraic loop\";
//   Real rotor1D.rotorWith3DEffects.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame_a, resolved in frame_a\";
//   Real rotor1D.rotorWith3DEffects.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame_a, resolved in frame_a\";
//   Real rotor1D.rotorWith3DEffects.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame_a, resolved in frame_a\";
//   Real rotor1D.rotorWith3DEffects.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, StateSelect = StateSelect.default) \"Rotation angle of rotor with respect to frame_a (= flange_a.phi = flange_b.phi)\";
//   Real rotor1D.rotorWith3DEffects.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.default) \"Angular velocity of rotor with respect to frame_a\";
//   Real rotor1D.rotorWith3DEffects.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Angular acceleration of rotor with respect to frame_a\";
//   Real rotor1D.rotorWith3DEffects.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rotor1D.rotorWith3DEffects.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real rotor1D.rotorWith3DEffects.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rotor1D.rotorWith3DEffects.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real rotor1D.rotorWith3DEffects.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real rotor1D.rotorWith3DEffects.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter String rotor1D.rotorWith3DEffects.cylinder.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.r[1](quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.r[2](quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.r[3](quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.r_shape[1](quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.r_center[1] - rotor1D.rotorWith3DEffects.cylinderLength * rotor1D.rotorWith3DEffects.e[1] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.r_shape[2](quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.r_center[2] - rotor1D.rotorWith3DEffects.cylinderLength * rotor1D.rotorWith3DEffects.e[2] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.r_shape[3](quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.r_center[3] - rotor1D.rotorWith3DEffects.cylinderLength * rotor1D.rotorWith3DEffects.e[3] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.lengthDirection[1](unit = \"1\") = rotor1D.rotorWith3DEffects.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.lengthDirection[2](unit = \"1\") = rotor1D.rotorWith3DEffects.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.lengthDirection[3](unit = \"1\") = rotor1D.rotorWith3DEffects.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.length(quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.cylinderLength \"Length of visual object\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.width(quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.cylinderDiameter \"Width of visual object\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.height(quantity = \"Length\", unit = \"m\") = rotor1D.rotorWith3DEffects.cylinderDiameter \"Height of visual object\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.extra = 1.0 \"Additional size data for some of the shape types\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.color[1] = Real(rotor1D.rotorWith3DEffects.cylinderColor[1]) \"Color of shape\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.color[2] = Real(rotor1D.rotorWith3DEffects.cylinderColor[2]) \"Color of shape\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.color[3] = Real(rotor1D.rotorWith3DEffects.cylinderColor[3]) \"Color of shape\";
//   input Real rotor1D.rotorWith3DEffects.cylinder.specularCoefficient = rotor1D.rotorWith3DEffects.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real rotor1D.rotorWith3DEffects.cylinder.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({rotor1D.rotorWith3DEffects.cylinder.lengthDirection[1],rotor1D.rotorWith3DEffects.cylinder.lengthDirection[2],rotor1D.rotorWith3DEffects.cylinder.lengthDirection[3]});
//   protected Real rotor1D.rotorWith3DEffects.cylinder.e_x[1](unit = \"1\") = if noEvent(rotor1D.rotorWith3DEffects.cylinder.abs_n_x < 1e-10) then 1.0 else rotor1D.rotorWith3DEffects.cylinder.lengthDirection[1] / rotor1D.rotorWith3DEffects.cylinder.abs_n_x;
//   protected Real rotor1D.rotorWith3DEffects.cylinder.e_x[2](unit = \"1\") = if noEvent(rotor1D.rotorWith3DEffects.cylinder.abs_n_x < 1e-10) then 0.0 else rotor1D.rotorWith3DEffects.cylinder.lengthDirection[2] / rotor1D.rotorWith3DEffects.cylinder.abs_n_x;
//   protected Real rotor1D.rotorWith3DEffects.cylinder.e_x[3](unit = \"1\") = if noEvent(rotor1D.rotorWith3DEffects.cylinder.abs_n_x < 1e-10) then 0.0 else rotor1D.rotorWith3DEffects.cylinder.lengthDirection[3] / rotor1D.rotorWith3DEffects.cylinder.abs_n_x;
//   protected Real rotor1D.rotorWith3DEffects.cylinder.n_z_aux[1](unit = \"1\") = rotor1D.rotorWith3DEffects.cylinder.e_x[2] * rotor1D.rotorWith3DEffects.cylinder.widthDirection[3] - rotor1D.rotorWith3DEffects.cylinder.e_x[3] * rotor1D.rotorWith3DEffects.cylinder.widthDirection[2];
//   protected Real rotor1D.rotorWith3DEffects.cylinder.n_z_aux[2](unit = \"1\") = rotor1D.rotorWith3DEffects.cylinder.e_x[3] * rotor1D.rotorWith3DEffects.cylinder.widthDirection[1] - rotor1D.rotorWith3DEffects.cylinder.e_x[1] * rotor1D.rotorWith3DEffects.cylinder.widthDirection[3];
//   protected Real rotor1D.rotorWith3DEffects.cylinder.n_z_aux[3](unit = \"1\") = rotor1D.rotorWith3DEffects.cylinder.e_x[1] * rotor1D.rotorWith3DEffects.cylinder.widthDirection[2] - rotor1D.rotorWith3DEffects.cylinder.e_x[2] * rotor1D.rotorWith3DEffects.cylinder.widthDirection[1];
//   protected Real rotor1D.rotorWith3DEffects.cylinder.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({rotor1D.rotorWith3DEffects.cylinder.e_x[1],rotor1D.rotorWith3DEffects.cylinder.e_x[2],rotor1D.rotorWith3DEffects.cylinder.e_x[3]},if noEvent(rotor1D.rotorWith3DEffects.cylinder.n_z_aux[1] ^ 2.0 + (rotor1D.rotorWith3DEffects.cylinder.n_z_aux[2] ^ 2.0 + rotor1D.rotorWith3DEffects.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {rotor1D.rotorWith3DEffects.cylinder.widthDirection[1],rotor1D.rotorWith3DEffects.cylinder.widthDirection[2],rotor1D.rotorWith3DEffects.cylinder.widthDirection[3]} else if noEvent(abs(rotor1D.rotorWith3DEffects.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{rotor1D.rotorWith3DEffects.cylinder.e_x[1],rotor1D.rotorWith3DEffects.cylinder.e_x[2],rotor1D.rotorWith3DEffects.cylinder.e_x[3]})[1];
//   protected Real rotor1D.rotorWith3DEffects.cylinder.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({rotor1D.rotorWith3DEffects.cylinder.e_x[1],rotor1D.rotorWith3DEffects.cylinder.e_x[2],rotor1D.rotorWith3DEffects.cylinder.e_x[3]},if noEvent(rotor1D.rotorWith3DEffects.cylinder.n_z_aux[1] ^ 2.0 + (rotor1D.rotorWith3DEffects.cylinder.n_z_aux[2] ^ 2.0 + rotor1D.rotorWith3DEffects.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {rotor1D.rotorWith3DEffects.cylinder.widthDirection[1],rotor1D.rotorWith3DEffects.cylinder.widthDirection[2],rotor1D.rotorWith3DEffects.cylinder.widthDirection[3]} else if noEvent(abs(rotor1D.rotorWith3DEffects.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{rotor1D.rotorWith3DEffects.cylinder.e_x[1],rotor1D.rotorWith3DEffects.cylinder.e_x[2],rotor1D.rotorWith3DEffects.cylinder.e_x[3]})[2];
//   protected Real rotor1D.rotorWith3DEffects.cylinder.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({rotor1D.rotorWith3DEffects.cylinder.e_x[1],rotor1D.rotorWith3DEffects.cylinder.e_x[2],rotor1D.rotorWith3DEffects.cylinder.e_x[3]},if noEvent(rotor1D.rotorWith3DEffects.cylinder.n_z_aux[1] ^ 2.0 + (rotor1D.rotorWith3DEffects.cylinder.n_z_aux[2] ^ 2.0 + rotor1D.rotorWith3DEffects.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {rotor1D.rotorWith3DEffects.cylinder.widthDirection[1],rotor1D.rotorWith3DEffects.cylinder.widthDirection[2],rotor1D.rotorWith3DEffects.cylinder.widthDirection[3]} else if noEvent(abs(rotor1D.rotorWith3DEffects.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{rotor1D.rotorWith3DEffects.cylinder.e_x[1],rotor1D.rotorWith3DEffects.cylinder.e_x[2],rotor1D.rotorWith3DEffects.cylinder.e_x[3]})[3];
//   protected output Real rotor1D.rotorWith3DEffects.cylinder.Form;
//   output Real rotor1D.rotorWith3DEffects.cylinder.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real rotor1D.rotorWith3DEffects.cylinder.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real rotor1D.rotorWith3DEffects.cylinder.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real rotor1D.rotorWith3DEffects.cylinder.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real rotor1D.rotorWith3DEffects.cylinder.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real rotor1D.rotorWith3DEffects.cylinder.Material;
//   protected output Real rotor1D.rotorWith3DEffects.cylinder.Extra;
//   protected parameter Real rotor1D.rotorWith3DEffects.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({rotor1D.rotorWith3DEffects.n[1],rotor1D.rotorWith3DEffects.n[2],rotor1D.rotorWith3DEffects.n[3]},1e-13)[1] \"Unit vector in direction of rotor axis, resolved in frame_a\";
//   protected parameter Real rotor1D.rotorWith3DEffects.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({rotor1D.rotorWith3DEffects.n[1],rotor1D.rotorWith3DEffects.n[2],rotor1D.rotorWith3DEffects.n[3]},1e-13)[2] \"Unit vector in direction of rotor axis, resolved in frame_a\";
//   protected parameter Real rotor1D.rotorWith3DEffects.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({rotor1D.rotorWith3DEffects.n[1],rotor1D.rotorWith3DEffects.n[2],rotor1D.rotorWith3DEffects.n[3]},1e-13)[3] \"Unit vector in direction of rotor axis, resolved in frame_a\";
//   protected parameter Real rotor1D.rotorWith3DEffects.nJ[1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = rotor1D.rotorWith3DEffects.J * rotor1D.rotorWith3DEffects.e[1];
//   protected parameter Real rotor1D.rotorWith3DEffects.nJ[2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = rotor1D.rotorWith3DEffects.J * rotor1D.rotorWith3DEffects.e[2];
//   protected parameter Real rotor1D.rotorWith3DEffects.nJ[3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = rotor1D.rotorWith3DEffects.J * rotor1D.rotorWith3DEffects.e[3];
//   protected parameter Real rotor1D.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({rotor1D.n[1],rotor1D.n[2],rotor1D.n[3]},1e-13)[1] \"Unit vector in direction of rotor axis, resolved in frame_a\";
//   protected parameter Real rotor1D.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({rotor1D.n[1],rotor1D.n[2],rotor1D.n[3]},1e-13)[2] \"Unit vector in direction of rotor axis, resolved in frame_a\";
//   protected parameter Real rotor1D.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({rotor1D.n[1],rotor1D.n[2],rotor1D.n[3]},1e-13)[3] \"Unit vector in direction of rotor axis, resolved in frame_a\";
//   parameter Boolean torque1.useSupport = true \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real torque1.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real torque1.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real torque1.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   input Real torque1.tau \"Accelerating torque acting at flange (= -flange.tau)\";
//   Real torque1.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = torque1.phi_support \"Absolute rotation angle of the support/housing\";
//   Real torque1.support.tau(quantity = \"Torque\", unit = \"N.m\") = -torque1.flange.tau \"Reaction torque in the support/housing\";
//   parameter Real mounting1D.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   parameter Real mounting1D.n[1](unit = \"1\") = 1.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D.n[2](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D.n[3](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   Real mounting1D.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real mounting1D.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real mounting1D.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real mounting1D.housing.t[1](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D.flange_b.tau) * mounting1D.n[1];
//   input Real mounting1D.housing.t[2](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D.flange_b.tau) * mounting1D.n[2];
//   input Real mounting1D.housing.t[3](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D.flange_b.tau) * mounting1D.n[3];
//   Real mounting1D.housing.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.housing.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.housing.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D.housing.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D.housing.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.housing.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.housing.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D.housing.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.housing.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.housing.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D.housing.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.housing.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D.housing.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r1.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r1.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r1.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r1.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r1.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r1.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean r1.useAxisFlange = true \"= true, if axis flange is enabled\";
//   parameter Boolean r1.animation = true \"= true, if animation shall be enabled (show axis as cylinder)\";
//   parameter Real r1.n[1](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real r1.n[2](unit = \"1\") = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real r1.n[3](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   constant Real r1.phi_offset(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Relative angle offset (angle = phi_offset + phi)\";
//   parameter Real r1.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Length of cylinder representing the joint axis\";
//   parameter Real r1.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Diameter of cylinder representing the joint axis\";
//   input Integer r1.cylinderColor[1](min = 0, max = 255) = 255 \"Color of cylinder representing the joint axis\";
//   input Integer r1.cylinderColor[2](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Integer r1.cylinderColor[3](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Real r1.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) r1.stateSelect = StateSelect.prefer \"Priority to use joint angle phi and w=der(phi) as states\";
//   Real r1.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative rotation angle from frame_a to frame_b\";
//   Real r1.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.prefer) \"First derivative of angle phi (relative angular velocity)\";
//   Real r1.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Second derivative of angle phi (relative angular acceleration)\";
//   Real r1.tau(quantity = \"Torque\", unit = \"N.m\") \"Driving torque in direction of axis of rotation\";
//   Real r1.angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"= phi_offset + phi\";
//   Real r1.R_rel.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real r1.R_rel.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.R_rel.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r1.R_rel.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real r1.fixed.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real r1.fixed.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r1.fixed.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   input Real r1.internalAxis.tau(quantity = \"Torque\", unit = \"N.m\") = r1.tau \"External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)\";
//   Real r1.internalAxis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"External support angle (= flange.phi)\";
//   Real r1.internalAxis.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r1.internalAxis.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real r1.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r1.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real r1.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r1.support.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter String r1.cylinder.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real r1.cylinder.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real r1.cylinder.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real r1.cylinder.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real r1.cylinder.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real r1.cylinder.r[1](quantity = \"Length\", unit = \"m\") = r1.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real r1.cylinder.r[2](quantity = \"Length\", unit = \"m\") = r1.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real r1.cylinder.r[3](quantity = \"Length\", unit = \"m\") = r1.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real r1.cylinder.r_shape[1](quantity = \"Length\", unit = \"m\") = (-r1.cylinderLength) * r1.e[1] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real r1.cylinder.r_shape[2](quantity = \"Length\", unit = \"m\") = (-r1.cylinderLength) * r1.e[2] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real r1.cylinder.r_shape[3](quantity = \"Length\", unit = \"m\") = (-r1.cylinderLength) * r1.e[3] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real r1.cylinder.lengthDirection[1](unit = \"1\") = r1.e[1] \"Vector in length direction, resolved in object frame\";
//   input Real r1.cylinder.lengthDirection[2](unit = \"1\") = r1.e[2] \"Vector in length direction, resolved in object frame\";
//   input Real r1.cylinder.lengthDirection[3](unit = \"1\") = r1.e[3] \"Vector in length direction, resolved in object frame\";
//   input Real r1.cylinder.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real r1.cylinder.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real r1.cylinder.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real r1.cylinder.length(quantity = \"Length\", unit = \"m\") = r1.cylinderLength \"Length of visual object\";
//   input Real r1.cylinder.width(quantity = \"Length\", unit = \"m\") = r1.cylinderDiameter \"Width of visual object\";
//   input Real r1.cylinder.height(quantity = \"Length\", unit = \"m\") = r1.cylinderDiameter \"Height of visual object\";
//   input Real r1.cylinder.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real r1.cylinder.color[1] = Real(r1.cylinderColor[1]) \"Color of shape\";
//   input Real r1.cylinder.color[2] = Real(r1.cylinderColor[2]) \"Color of shape\";
//   input Real r1.cylinder.color[3] = Real(r1.cylinderColor[3]) \"Color of shape\";
//   input Real r1.cylinder.specularCoefficient = r1.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real r1.cylinder.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({r1.cylinder.lengthDirection[1],r1.cylinder.lengthDirection[2],r1.cylinder.lengthDirection[3]});
//   protected Real r1.cylinder.e_x[1](unit = \"1\") = if noEvent(r1.cylinder.abs_n_x < 1e-10) then 1.0 else r1.cylinder.lengthDirection[1] / r1.cylinder.abs_n_x;
//   protected Real r1.cylinder.e_x[2](unit = \"1\") = if noEvent(r1.cylinder.abs_n_x < 1e-10) then 0.0 else r1.cylinder.lengthDirection[2] / r1.cylinder.abs_n_x;
//   protected Real r1.cylinder.e_x[3](unit = \"1\") = if noEvent(r1.cylinder.abs_n_x < 1e-10) then 0.0 else r1.cylinder.lengthDirection[3] / r1.cylinder.abs_n_x;
//   protected Real r1.cylinder.n_z_aux[1](unit = \"1\") = r1.cylinder.e_x[2] * r1.cylinder.widthDirection[3] - r1.cylinder.e_x[3] * r1.cylinder.widthDirection[2];
//   protected Real r1.cylinder.n_z_aux[2](unit = \"1\") = r1.cylinder.e_x[3] * r1.cylinder.widthDirection[1] - r1.cylinder.e_x[1] * r1.cylinder.widthDirection[3];
//   protected Real r1.cylinder.n_z_aux[3](unit = \"1\") = r1.cylinder.e_x[1] * r1.cylinder.widthDirection[2] - r1.cylinder.e_x[2] * r1.cylinder.widthDirection[1];
//   protected Real r1.cylinder.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({r1.cylinder.e_x[1],r1.cylinder.e_x[2],r1.cylinder.e_x[3]},if noEvent(r1.cylinder.n_z_aux[1] ^ 2.0 + (r1.cylinder.n_z_aux[2] ^ 2.0 + r1.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {r1.cylinder.widthDirection[1],r1.cylinder.widthDirection[2],r1.cylinder.widthDirection[3]} else if noEvent(abs(r1.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{r1.cylinder.e_x[1],r1.cylinder.e_x[2],r1.cylinder.e_x[3]})[1];
//   protected Real r1.cylinder.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({r1.cylinder.e_x[1],r1.cylinder.e_x[2],r1.cylinder.e_x[3]},if noEvent(r1.cylinder.n_z_aux[1] ^ 2.0 + (r1.cylinder.n_z_aux[2] ^ 2.0 + r1.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {r1.cylinder.widthDirection[1],r1.cylinder.widthDirection[2],r1.cylinder.widthDirection[3]} else if noEvent(abs(r1.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{r1.cylinder.e_x[1],r1.cylinder.e_x[2],r1.cylinder.e_x[3]})[2];
//   protected Real r1.cylinder.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({r1.cylinder.e_x[1],r1.cylinder.e_x[2],r1.cylinder.e_x[3]},if noEvent(r1.cylinder.n_z_aux[1] ^ 2.0 + (r1.cylinder.n_z_aux[2] ^ 2.0 + r1.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {r1.cylinder.widthDirection[1],r1.cylinder.widthDirection[2],r1.cylinder.widthDirection[3]} else if noEvent(abs(r1.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{r1.cylinder.e_x[1],r1.cylinder.e_x[2],r1.cylinder.e_x[3]})[3];
//   protected output Real r1.cylinder.Form;
//   output Real r1.cylinder.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real r1.cylinder.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real r1.cylinder.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real r1.cylinder.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real r1.cylinder.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real r1.cylinder.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real r1.cylinder.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real r1.cylinder.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real r1.cylinder.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real r1.cylinder.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real r1.cylinder.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real r1.cylinder.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real r1.cylinder.Material;
//   protected output Real r1.cylinder.Extra;
//   protected parameter Real r1.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({r1.n[1],r1.n[2],r1.n[3]},1e-13)[1] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real r1.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({r1.n[1],r1.n[2],r1.n[3]},1e-13)[2] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real r1.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({r1.n[1],r1.n[2],r1.n[3]},1e-13)[3] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   parameter Boolean position1.useSupport = true \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real position1.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real position1.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real position1.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   parameter Boolean position1.exact = false \"true/false exact treatment/filtering the input signal\";
//   parameter Real position1.f_crit(quantity = \"Frequency\", unit = \"Hz\") = 50.0 \"if exact=false, critical frequency of filter to filter input signal\";
//   Real position1.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", StateSelect = StateSelect.prefer) \"Rotation angle of flange with respect to support\";
//   Real position1.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.prefer) \"If exact=false, Angular velocity of flange with respect to support else dummy\";
//   Real position1.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"If exact=false, Angular acceleration of flange with respect to support else dummy\";
//   input Real position1.phi_ref(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Reference angle of flange with respect to support as input signal\";
//   protected constant Real position1.af = 1.3617 \"s coefficient of Bessel filter\";
//   protected constant Real position1.bf = 0.618 \"s*s coefficient of Bessel filter\";
//   Real position1.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = position1.phi_support \"Absolute rotation angle of the support/housing\";
//   Real position1.support.tau(quantity = \"Torque\", unit = \"N.m\") = -position1.flange.tau \"Reaction torque in the support/housing\";
//   protected parameter Real position1.w_crit(quantity = \"AngularFrequency\", unit = \"rad/s\") = 6.28318530717959 * position1.f_crit \"Critical frequency\";
//   output Real sine2.y \"Connector of Real output signal\";
//   parameter Real sine2.amplitude = 2.0 \"Amplitude of sine wave\";
//   parameter Real sine2.freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine2.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine2.offset = 0.0 \"Offset of output signal\";
//   parameter Real sine2.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine2.pi = 3.14159265358979;
//   parameter Real mounting1D1.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   parameter Real mounting1D1.n[1](unit = \"1\") = 1.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D1.n[2](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D1.n[3](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   Real mounting1D1.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real mounting1D1.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real mounting1D1.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D1.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D1.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D1.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D1.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D1.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D1.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D1.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D1.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real mounting1D1.housing.t[1](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D1.flange_b.tau) * mounting1D1.n[1];
//   input Real mounting1D1.housing.t[2](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D1.flange_b.tau) * mounting1D1.n[2];
//   input Real mounting1D1.housing.t[3](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D1.flange_b.tau) * mounting1D1.n[3];
//   Real mounting1D1.housing.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D1.housing.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D1.housing.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D1.housing.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D1.housing.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D1.housing.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D1.housing.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D1.housing.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D1.housing.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D1.housing.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D1.housing.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D1.housing.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D1.housing.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r2.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r2.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r2.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r2.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r2.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r2.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r2.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r2.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real r2.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r2.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r2.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real r2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real r2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean r2.useAxisFlange = true \"= true, if axis flange is enabled\";
//   parameter Boolean r2.animation = true \"= true, if animation shall be enabled (show axis as cylinder)\";
//   parameter Real r2.n[1](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real r2.n[2](unit = \"1\") = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real r2.n[3](unit = \"1\") = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   constant Real r2.phi_offset(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Relative angle offset (angle = phi_offset + phi)\";
//   parameter Real r2.cylinderLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointLength \"Length of cylinder representing the joint axis\";
//   parameter Real r2.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.defaultJointWidth \"Diameter of cylinder representing the joint axis\";
//   input Integer r2.cylinderColor[1](min = 0, max = 255) = 255 \"Color of cylinder representing the joint axis\";
//   input Integer r2.cylinderColor[2](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Integer r2.cylinderColor[3](min = 0, max = 255) = 0 \"Color of cylinder representing the joint axis\";
//   input Real r2.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter enumeration(never, avoid, default, prefer, always) r2.stateSelect = StateSelect.prefer \"Priority to use joint angle phi and w=der(phi) as states\";
//   Real r2.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative rotation angle from frame_a to frame_b\";
//   Real r2.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.prefer) \"First derivative of angle phi (relative angular velocity)\";
//   Real r2.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"Second derivative of angle phi (relative angular acceleration)\";
//   Real r2.tau(quantity = \"Torque\", unit = \"N.m\") \"Driving torque in direction of axis of rotation\";
//   Real r2.angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"= phi_offset + phi\";
//   Real r2.R_rel.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real r2.R_rel.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.R_rel.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real r2.R_rel.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real r2.fixed.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real r2.fixed.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r2.fixed.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   input Real r2.internalAxis.tau(quantity = \"Torque\", unit = \"N.m\") = r2.tau \"External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)\";
//   Real r2.internalAxis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"External support angle (= flange.phi)\";
//   Real r2.internalAxis.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r2.internalAxis.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real r2.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r2.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real r2.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real r2.support.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter String r2.cylinder.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real r2.cylinder.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real r2.cylinder.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real r2.cylinder.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real r2.cylinder.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real r2.cylinder.r[1](quantity = \"Length\", unit = \"m\") = r2.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real r2.cylinder.r[2](quantity = \"Length\", unit = \"m\") = r2.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real r2.cylinder.r[3](quantity = \"Length\", unit = \"m\") = r2.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real r2.cylinder.r_shape[1](quantity = \"Length\", unit = \"m\") = (-r2.cylinderLength) * r2.e[1] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real r2.cylinder.r_shape[2](quantity = \"Length\", unit = \"m\") = (-r2.cylinderLength) * r2.e[2] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real r2.cylinder.r_shape[3](quantity = \"Length\", unit = \"m\") = (-r2.cylinderLength) * r2.e[3] / 2.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real r2.cylinder.lengthDirection[1](unit = \"1\") = r2.e[1] \"Vector in length direction, resolved in object frame\";
//   input Real r2.cylinder.lengthDirection[2](unit = \"1\") = r2.e[2] \"Vector in length direction, resolved in object frame\";
//   input Real r2.cylinder.lengthDirection[3](unit = \"1\") = r2.e[3] \"Vector in length direction, resolved in object frame\";
//   input Real r2.cylinder.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real r2.cylinder.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real r2.cylinder.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real r2.cylinder.length(quantity = \"Length\", unit = \"m\") = r2.cylinderLength \"Length of visual object\";
//   input Real r2.cylinder.width(quantity = \"Length\", unit = \"m\") = r2.cylinderDiameter \"Width of visual object\";
//   input Real r2.cylinder.height(quantity = \"Length\", unit = \"m\") = r2.cylinderDiameter \"Height of visual object\";
//   input Real r2.cylinder.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real r2.cylinder.color[1] = Real(r2.cylinderColor[1]) \"Color of shape\";
//   input Real r2.cylinder.color[2] = Real(r2.cylinderColor[2]) \"Color of shape\";
//   input Real r2.cylinder.color[3] = Real(r2.cylinderColor[3]) \"Color of shape\";
//   input Real r2.cylinder.specularCoefficient = r2.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real r2.cylinder.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({r2.cylinder.lengthDirection[1],r2.cylinder.lengthDirection[2],r2.cylinder.lengthDirection[3]});
//   protected Real r2.cylinder.e_x[1](unit = \"1\") = if noEvent(r2.cylinder.abs_n_x < 1e-10) then 1.0 else r2.cylinder.lengthDirection[1] / r2.cylinder.abs_n_x;
//   protected Real r2.cylinder.e_x[2](unit = \"1\") = if noEvent(r2.cylinder.abs_n_x < 1e-10) then 0.0 else r2.cylinder.lengthDirection[2] / r2.cylinder.abs_n_x;
//   protected Real r2.cylinder.e_x[3](unit = \"1\") = if noEvent(r2.cylinder.abs_n_x < 1e-10) then 0.0 else r2.cylinder.lengthDirection[3] / r2.cylinder.abs_n_x;
//   protected Real r2.cylinder.n_z_aux[1](unit = \"1\") = r2.cylinder.e_x[2] * r2.cylinder.widthDirection[3] - r2.cylinder.e_x[3] * r2.cylinder.widthDirection[2];
//   protected Real r2.cylinder.n_z_aux[2](unit = \"1\") = r2.cylinder.e_x[3] * r2.cylinder.widthDirection[1] - r2.cylinder.e_x[1] * r2.cylinder.widthDirection[3];
//   protected Real r2.cylinder.n_z_aux[3](unit = \"1\") = r2.cylinder.e_x[1] * r2.cylinder.widthDirection[2] - r2.cylinder.e_x[2] * r2.cylinder.widthDirection[1];
//   protected Real r2.cylinder.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({r2.cylinder.e_x[1],r2.cylinder.e_x[2],r2.cylinder.e_x[3]},if noEvent(r2.cylinder.n_z_aux[1] ^ 2.0 + (r2.cylinder.n_z_aux[2] ^ 2.0 + r2.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {r2.cylinder.widthDirection[1],r2.cylinder.widthDirection[2],r2.cylinder.widthDirection[3]} else if noEvent(abs(r2.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{r2.cylinder.e_x[1],r2.cylinder.e_x[2],r2.cylinder.e_x[3]})[1];
//   protected Real r2.cylinder.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({r2.cylinder.e_x[1],r2.cylinder.e_x[2],r2.cylinder.e_x[3]},if noEvent(r2.cylinder.n_z_aux[1] ^ 2.0 + (r2.cylinder.n_z_aux[2] ^ 2.0 + r2.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {r2.cylinder.widthDirection[1],r2.cylinder.widthDirection[2],r2.cylinder.widthDirection[3]} else if noEvent(abs(r2.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{r2.cylinder.e_x[1],r2.cylinder.e_x[2],r2.cylinder.e_x[3]})[2];
//   protected Real r2.cylinder.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({r2.cylinder.e_x[1],r2.cylinder.e_x[2],r2.cylinder.e_x[3]},if noEvent(r2.cylinder.n_z_aux[1] ^ 2.0 + (r2.cylinder.n_z_aux[2] ^ 2.0 + r2.cylinder.n_z_aux[3] ^ 2.0) > 1e-06) then {r2.cylinder.widthDirection[1],r2.cylinder.widthDirection[2],r2.cylinder.widthDirection[3]} else if noEvent(abs(r2.cylinder.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{r2.cylinder.e_x[1],r2.cylinder.e_x[2],r2.cylinder.e_x[3]})[3];
//   protected output Real r2.cylinder.Form;
//   output Real r2.cylinder.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real r2.cylinder.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real r2.cylinder.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real r2.cylinder.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real r2.cylinder.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real r2.cylinder.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real r2.cylinder.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real r2.cylinder.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real r2.cylinder.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real r2.cylinder.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real r2.cylinder.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real r2.cylinder.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real r2.cylinder.Material;
//   protected output Real r2.cylinder.Extra;
//   protected parameter Real r2.e[1](unit = \"1\") = Modelica.Math.Vectors.normalize({r2.n[1],r2.n[2],r2.n[3]},1e-13)[1] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real r2.e[2](unit = \"1\") = Modelica.Math.Vectors.normalize({r2.n[1],r2.n[2],r2.n[3]},1e-13)[2] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   protected parameter Real r2.e[3](unit = \"1\") = Modelica.Math.Vectors.normalize({r2.n[1],r2.n[2],r2.n[3]},1e-13)[3] \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";
//   parameter Boolean position2.useSupport = true \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real position2.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real position2.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   protected Real position2.phi_support(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute angle of support flange\";
//   parameter Boolean position2.exact = false \"true/false exact treatment/filtering the input signal\";
//   parameter Real position2.f_crit(quantity = \"Frequency\", unit = \"Hz\") = 50.0 \"if exact=false, critical frequency of filter to filter input signal\";
//   Real position2.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", StateSelect = StateSelect.prefer) \"Rotation angle of flange with respect to support\";
//   Real position2.w(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 0.0, StateSelect = StateSelect.prefer) \"If exact=false, Angular velocity of flange with respect to support else dummy\";
//   Real position2.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = 0.0) \"If exact=false, Angular acceleration of flange with respect to support else dummy\";
//   input Real position2.phi_ref(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Reference angle of flange with respect to support as input signal\";
//   protected constant Real position2.af = 1.3617 \"s coefficient of Bessel filter\";
//   protected constant Real position2.bf = 0.618 \"s*s coefficient of Bessel filter\";
//   Real position2.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = position2.phi_support \"Absolute rotation angle of the support/housing\";
//   Real position2.support.tau(quantity = \"Torque\", unit = \"N.m\") = -position2.flange.tau \"Reaction torque in the support/housing\";
//   protected parameter Real position2.w_crit(quantity = \"AngularFrequency\", unit = \"rad/s\") = 6.28318530717959 * position2.f_crit \"Critical frequency\";
//   parameter Real mounting1D2.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   parameter Real mounting1D2.n[1](unit = \"1\") = 1.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D2.n[2](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   parameter Real mounting1D2.n[3](unit = \"1\") = 0.0 \"Axis of rotation = axis of support torque (resolved in frame_a)\";
//   Real mounting1D2.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real mounting1D2.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real mounting1D2.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D2.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D2.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D2.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D2.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D2.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D2.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D2.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D2.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   input Real mounting1D2.housing.t[1](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D2.flange_b.tau) * mounting1D2.n[1];
//   input Real mounting1D2.housing.t[2](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D2.flange_b.tau) * mounting1D2.n[2];
//   input Real mounting1D2.housing.t[3](quantity = \"Torque\", unit = \"N.m\") = (-mounting1D2.flange_b.tau) * mounting1D2.n[3];
//   Real mounting1D2.housing.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D2.housing.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D2.housing.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real mounting1D2.housing.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real mounting1D2.housing.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D2.housing.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D2.housing.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real mounting1D2.housing.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D2.housing.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D2.housing.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real mounting1D2.housing.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D2.housing.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real mounting1D2.housing.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real fixed.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real fixed.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real fixed.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real fixed.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real fixed.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real fixed.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real fixed.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real fixed.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real fixed.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real fixed.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real fixed.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real fixed.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real fixed.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean fixed.animation = true \"= true, if animation shall be enabled\";
//   parameter Real fixed.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from world frame to frame_b, resolved in world frame\";
//   parameter Real fixed.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from world frame to frame_b, resolved in world frame\";
//   parameter Real fixed.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from world frame to frame_b, resolved in world frame\";
//   parameter String fixed.shapeType = \"cylinder\" \" Type of shape\";
//   parameter Real fixed.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from world frame to shape origin, resolved in world frame\";
//   parameter Real fixed.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from world frame to shape origin, resolved in world frame\";
//   parameter Real fixed.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector from world frame to shape origin, resolved in world frame\";
//   parameter Real fixed.widthDirection[1](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector in width direction of shape, resolved in world frame\";
//   parameter Real fixed.widthDirection[2](quantity = \"Length\", unit = \"m\") = 1.0 \" Vector in width direction of shape, resolved in world frame\";
//   parameter Real fixed.widthDirection[3](quantity = \"Length\", unit = \"m\") = 0.0 \" Vector in width direction of shape, resolved in world frame\";
//   parameter Real fixed.extra = 0.0 \" Additional parameter for cone, pipe etc. (see docu of Visualizers.Advanced.Shape)\";
//   input Integer fixed.color[1](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer fixed.color[2](min = 0, max = 255) = 155 \" Color of shape\";
//   input Integer fixed.color[3](min = 0, max = 255) = 155 \" Color of shape\";
//   input Real fixed.specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter String fixed.shape.shapeType = fixed.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real fixed.shape.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real fixed.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real fixed.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real fixed.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real fixed.shape.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real fixed.shape.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real fixed.shape.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real fixed.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = fixed.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real fixed.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = fixed.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real fixed.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = fixed.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real fixed.shape.lengthDirection[1](unit = \"1\") = fixed.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real fixed.shape.lengthDirection[2](unit = \"1\") = fixed.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real fixed.shape.lengthDirection[3](unit = \"1\") = fixed.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real fixed.shape.widthDirection[1](unit = \"1\") = fixed.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real fixed.shape.widthDirection[2](unit = \"1\") = fixed.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real fixed.shape.widthDirection[3](unit = \"1\") = fixed.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real fixed.shape.length(quantity = \"Length\", unit = \"m\") = fixed.length \"Length of visual object\";
//   input Real fixed.shape.width(quantity = \"Length\", unit = \"m\") = fixed.width \"Width of visual object\";
//   input Real fixed.shape.height(quantity = \"Length\", unit = \"m\") = fixed.height \"Height of visual object\";
//   input Real fixed.shape.extra = fixed.extra \"Additional size data for some of the shape types\";
//   input Real fixed.shape.color[1] = Real(fixed.color[1]) \"Color of shape\";
//   input Real fixed.shape.color[2] = Real(fixed.color[2]) \"Color of shape\";
//   input Real fixed.shape.color[3] = Real(fixed.color[3]) \"Color of shape\";
//   input Real fixed.shape.specularCoefficient = fixed.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real fixed.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({fixed.shape.lengthDirection[1],fixed.shape.lengthDirection[2],fixed.shape.lengthDirection[3]});
//   protected Real fixed.shape.e_x[1](unit = \"1\") = if noEvent(fixed.shape.abs_n_x < 1e-10) then 1.0 else fixed.shape.lengthDirection[1] / fixed.shape.abs_n_x;
//   protected Real fixed.shape.e_x[2](unit = \"1\") = if noEvent(fixed.shape.abs_n_x < 1e-10) then 0.0 else fixed.shape.lengthDirection[2] / fixed.shape.abs_n_x;
//   protected Real fixed.shape.e_x[3](unit = \"1\") = if noEvent(fixed.shape.abs_n_x < 1e-10) then 0.0 else fixed.shape.lengthDirection[3] / fixed.shape.abs_n_x;
//   protected Real fixed.shape.n_z_aux[1](unit = \"1\") = fixed.shape.e_x[2] * fixed.shape.widthDirection[3] - fixed.shape.e_x[3] * fixed.shape.widthDirection[2];
//   protected Real fixed.shape.n_z_aux[2](unit = \"1\") = fixed.shape.e_x[3] * fixed.shape.widthDirection[1] - fixed.shape.e_x[1] * fixed.shape.widthDirection[3];
//   protected Real fixed.shape.n_z_aux[3](unit = \"1\") = fixed.shape.e_x[1] * fixed.shape.widthDirection[2] - fixed.shape.e_x[2] * fixed.shape.widthDirection[1];
//   protected Real fixed.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]},if noEvent(fixed.shape.n_z_aux[1] ^ 2.0 + (fixed.shape.n_z_aux[2] ^ 2.0 + fixed.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {fixed.shape.widthDirection[1],fixed.shape.widthDirection[2],fixed.shape.widthDirection[3]} else if noEvent(abs(fixed.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]})[1];
//   protected Real fixed.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]},if noEvent(fixed.shape.n_z_aux[1] ^ 2.0 + (fixed.shape.n_z_aux[2] ^ 2.0 + fixed.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {fixed.shape.widthDirection[1],fixed.shape.widthDirection[2],fixed.shape.widthDirection[3]} else if noEvent(abs(fixed.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]})[2];
//   protected Real fixed.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]},if noEvent(fixed.shape.n_z_aux[1] ^ 2.0 + (fixed.shape.n_z_aux[2] ^ 2.0 + fixed.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {fixed.shape.widthDirection[1],fixed.shape.widthDirection[2],fixed.shape.widthDirection[3]} else if noEvent(abs(fixed.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{fixed.shape.e_x[1],fixed.shape.e_x[2],fixed.shape.e_x[3]})[3];
//   protected output Real fixed.shape.Form;
//   output Real fixed.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real fixed.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real fixed.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real fixed.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real fixed.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real fixed.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real fixed.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real fixed.shape.Material;
//   protected output Real fixed.shape.Extra;
//   parameter Real fixed.lengthDirection[1](quantity = \"Length\", unit = \"m\") = fixed.r[1] - fixed.r_shape[1] \" Vector in length direction of shape, resolved in world frame\";
//   parameter Real fixed.lengthDirection[2](quantity = \"Length\", unit = \"m\") = fixed.r[2] - fixed.r_shape[2] \" Vector in length direction of shape, resolved in world frame\";
//   parameter Real fixed.lengthDirection[3](quantity = \"Length\", unit = \"m\") = fixed.r[3] - fixed.r_shape[3] \" Vector in length direction of shape, resolved in world frame\";
//   parameter Real fixed.length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({fixed.r[1] - fixed.r_shape[1],fixed.r[2] - fixed.r_shape[2],fixed.r[3] - fixed.r_shape[3]}) \" Length of shape\";
//   parameter Real fixed.width(quantity = \"Length\", unit = \"m\", min = 0.0) = fixed.length / world.defaultWidthFraction \" Width of shape\";
//   parameter Real fixed.height(quantity = \"Length\", unit = \"m\", min = 0.0) = fixed.width \" Height of shape\";
// initial equation
//   position1.phi = position1.phi_ref;
//   position2.phi = position2.phi_ref;
// equation
//   world.x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   world.gravityArrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowLine.shapeType);
//   world.gravityArrowLine.rxvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.rxvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.rxvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_x[1] + (world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_x[3]);
//   world.gravityArrowLine.ryvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.ryvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.ryvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_y[1] + (world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_y[3]);
//   world.gravityArrowLine.rvisobj = world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowLine.R.T[1,1],world.gravityArrowLine.R.T[1,2],world.gravityArrowLine.R.T[1,3]},{world.gravityArrowLine.R.T[2,1],world.gravityArrowLine.R.T[2,2],world.gravityArrowLine.R.T[2,3]},{world.gravityArrowLine.R.T[3,1],world.gravityArrowLine.R.T[3,2],world.gravityArrowLine.R.T[3,3]}},{world.gravityArrowLine.r_shape[1],world.gravityArrowLine.r_shape[2],world.gravityArrowLine.r_shape[3]});
//   world.gravityArrowLine.size[1] = world.gravityArrowLine.length;
//   world.gravityArrowLine.size[2] = world.gravityArrowLine.width;
//   world.gravityArrowLine.size[3] = world.gravityArrowLine.height;
//   world.gravityArrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowLine.color[1] / 255.0,world.gravityArrowLine.color[2] / 255.0,world.gravityArrowLine.color[3] / 255.0,world.gravityArrowLine.specularCoefficient);
//   world.gravityArrowLine.Extra = world.gravityArrowLine.extra;
//   world.gravityArrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravityArrowHead.shapeType);
//   world.gravityArrowHead.rxvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.rxvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.rxvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_x[1] + (world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_x[3]);
//   world.gravityArrowHead.ryvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.ryvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.ryvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_y[1] + (world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_y[3]);
//   world.gravityArrowHead.rvisobj = world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowHead.R.T[1,1],world.gravityArrowHead.R.T[1,2],world.gravityArrowHead.R.T[1,3]},{world.gravityArrowHead.R.T[2,1],world.gravityArrowHead.R.T[2,2],world.gravityArrowHead.R.T[2,3]},{world.gravityArrowHead.R.T[3,1],world.gravityArrowHead.R.T[3,2],world.gravityArrowHead.R.T[3,3]}},{world.gravityArrowHead.r_shape[1],world.gravityArrowHead.r_shape[2],world.gravityArrowHead.r_shape[3]});
//   world.gravityArrowHead.size[1] = world.gravityArrowHead.length;
//   world.gravityArrowHead.size[2] = world.gravityArrowHead.width;
//   world.gravityArrowHead.size[3] = world.gravityArrowHead.height;
//   world.gravityArrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravityArrowHead.color[1] / 255.0,world.gravityArrowHead.color[2] / 255.0,world.gravityArrowHead.color[3] / 255.0,world.gravityArrowHead.specularCoefficient);
//   world.gravityArrowHead.Extra = world.gravityArrowHead.extra;
//   world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[1].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[1].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[1].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[2].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[2].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[2].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[1].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[1].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[1].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[2].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[2].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[2].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[1].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[1].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[1].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[2].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[2].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[2].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[3].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[3].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[3].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-10,\"Parameter n of World object is wrong (lenght(n) > 0 required)\");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   bodyCylinder.frameTranslation.frame_b.r_0 = bodyCylinder.frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(bodyCylinder.frameTranslation.frame_a.R,{bodyCylinder.frameTranslation.r[1],bodyCylinder.frameTranslation.r[2],bodyCylinder.frameTranslation.r[3]});
//   bodyCylinder.frameTranslation.frame_b.R.T[1,1] = bodyCylinder.frameTranslation.frame_a.R.T[1,1];
//   bodyCylinder.frameTranslation.frame_b.R.T[1,2] = bodyCylinder.frameTranslation.frame_a.R.T[1,2];
//   bodyCylinder.frameTranslation.frame_b.R.T[1,3] = bodyCylinder.frameTranslation.frame_a.R.T[1,3];
//   bodyCylinder.frameTranslation.frame_b.R.T[2,1] = bodyCylinder.frameTranslation.frame_a.R.T[2,1];
//   bodyCylinder.frameTranslation.frame_b.R.T[2,2] = bodyCylinder.frameTranslation.frame_a.R.T[2,2];
//   bodyCylinder.frameTranslation.frame_b.R.T[2,3] = bodyCylinder.frameTranslation.frame_a.R.T[2,3];
//   bodyCylinder.frameTranslation.frame_b.R.T[3,1] = bodyCylinder.frameTranslation.frame_a.R.T[3,1];
//   bodyCylinder.frameTranslation.frame_b.R.T[3,2] = bodyCylinder.frameTranslation.frame_a.R.T[3,2];
//   bodyCylinder.frameTranslation.frame_b.R.T[3,3] = bodyCylinder.frameTranslation.frame_a.R.T[3,3];
//   bodyCylinder.frameTranslation.frame_b.R.w[1] = bodyCylinder.frameTranslation.frame_a.R.w[1];
//   bodyCylinder.frameTranslation.frame_b.R.w[2] = bodyCylinder.frameTranslation.frame_a.R.w[2];
//   bodyCylinder.frameTranslation.frame_b.R.w[3] = bodyCylinder.frameTranslation.frame_a.R.w[3];
//   0.0 = bodyCylinder.frameTranslation.frame_a.f[1] + bodyCylinder.frameTranslation.frame_b.f[1];
//   0.0 = bodyCylinder.frameTranslation.frame_a.f[2] + bodyCylinder.frameTranslation.frame_b.f[2];
//   0.0 = bodyCylinder.frameTranslation.frame_a.f[3] + bodyCylinder.frameTranslation.frame_b.f[3];
//   0.0 = bodyCylinder.frameTranslation.frame_a.t[1] + (bodyCylinder.frameTranslation.frame_b.t[1] + (bodyCylinder.frameTranslation.r[2] * bodyCylinder.frameTranslation.frame_b.f[3] + (-bodyCylinder.frameTranslation.r[3] * bodyCylinder.frameTranslation.frame_b.f[2])));
//   0.0 = bodyCylinder.frameTranslation.frame_a.t[2] + (bodyCylinder.frameTranslation.frame_b.t[2] + (bodyCylinder.frameTranslation.r[3] * bodyCylinder.frameTranslation.frame_b.f[1] + (-bodyCylinder.frameTranslation.r[1] * bodyCylinder.frameTranslation.frame_b.f[3])));
//   0.0 = bodyCylinder.frameTranslation.frame_a.t[3] + (bodyCylinder.frameTranslation.frame_b.t[3] + (bodyCylinder.frameTranslation.r[1] * bodyCylinder.frameTranslation.frame_b.f[2] + (-bodyCylinder.frameTranslation.r[2] * bodyCylinder.frameTranslation.frame_b.f[1])));
//   bodyCylinder.body.r_0[1] = bodyCylinder.body.frame_a.r_0[1];
//   bodyCylinder.body.r_0[2] = bodyCylinder.body.frame_a.r_0[2];
//   bodyCylinder.body.r_0[3] = bodyCylinder.body.frame_a.r_0[3];
//   if true then
//   bodyCylinder.body.Q[1] = 0.0;
//   bodyCylinder.body.Q[2] = 0.0;
//   bodyCylinder.body.Q[3] = 0.0;
//   bodyCylinder.body.Q[4] = 1.0;
//   bodyCylinder.body.phi[1] = 0.0;
//   bodyCylinder.body.phi[2] = 0.0;
//   bodyCylinder.body.phi[3] = 0.0;
//   bodyCylinder.body.phi_d[1] = 0.0;
//   bodyCylinder.body.phi_d[2] = 0.0;
//   bodyCylinder.body.phi_d[3] = 0.0;
//   bodyCylinder.body.phi_dd[1] = 0.0;
//   bodyCylinder.body.phi_dd[2] = 0.0;
//   bodyCylinder.body.phi_dd[3] = 0.0;
//   elseif bodyCylinder.body.useQuaternions then
//   bodyCylinder.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({bodyCylinder.body.Q[1],bodyCylinder.body.Q[2],bodyCylinder.body.Q[3],bodyCylinder.body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({bodyCylinder.body.Q[1],bodyCylinder.body.Q[2],bodyCylinder.body.Q[3],bodyCylinder.body.Q[4]},{der(bodyCylinder.body.Q[1]),der(bodyCylinder.body.Q[2]),der(bodyCylinder.body.Q[3]),der(bodyCylinder.body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({bodyCylinder.body.Q[1],bodyCylinder.body.Q[2],bodyCylinder.body.Q[3],bodyCylinder.body.Q[4]});
//   bodyCylinder.body.phi[1] = 0.0;
//   bodyCylinder.body.phi[2] = 0.0;
//   bodyCylinder.body.phi[3] = 0.0;
//   bodyCylinder.body.phi_d[1] = 0.0;
//   bodyCylinder.body.phi_d[2] = 0.0;
//   bodyCylinder.body.phi_d[3] = 0.0;
//   bodyCylinder.body.phi_dd[1] = 0.0;
//   bodyCylinder.body.phi_dd[2] = 0.0;
//   bodyCylinder.body.phi_dd[3] = 0.0;
//   else
//   bodyCylinder.body.phi_d[1] = der(bodyCylinder.body.phi[1]);
//   bodyCylinder.body.phi_d[2] = der(bodyCylinder.body.phi[2]);
//   bodyCylinder.body.phi_d[3] = der(bodyCylinder.body.phi[3]);
//   bodyCylinder.body.phi_dd[1] = der(bodyCylinder.body.phi_d[1]);
//   bodyCylinder.body.phi_dd[2] = der(bodyCylinder.body.phi_d[2]);
//   bodyCylinder.body.phi_dd[3] = der(bodyCylinder.body.phi_d[3]);
//   bodyCylinder.body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({bodyCylinder.body.sequence_angleStates[1],bodyCylinder.body.sequence_angleStates[2],bodyCylinder.body.sequence_angleStates[3]},{bodyCylinder.body.phi[1],bodyCylinder.body.phi[2],bodyCylinder.body.phi[3]},{bodyCylinder.body.phi_d[1],bodyCylinder.body.phi_d[2],bodyCylinder.body.phi_d[3]});
//   bodyCylinder.body.Q[1] = 0.0;
//   bodyCylinder.body.Q[2] = 0.0;
//   bodyCylinder.body.Q[3] = 0.0;
//   bodyCylinder.body.Q[4] = 1.0;
//   end if;
//   bodyCylinder.body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration({bodyCylinder.body.frame_a.r_0[1],bodyCylinder.body.frame_a.r_0[2],bodyCylinder.body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(bodyCylinder.body.frame_a.R,{bodyCylinder.body.r_CM[1],bodyCylinder.body.r_CM[2],bodyCylinder.body.r_CM[3]}),world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue);
//   bodyCylinder.body.v_0[1] = der(bodyCylinder.body.frame_a.r_0[1]);
//   bodyCylinder.body.v_0[2] = der(bodyCylinder.body.frame_a.r_0[2]);
//   bodyCylinder.body.v_0[3] = der(bodyCylinder.body.frame_a.r_0[3]);
//   bodyCylinder.body.a_0[1] = der(bodyCylinder.body.v_0[1]);
//   bodyCylinder.body.a_0[2] = der(bodyCylinder.body.v_0[2]);
//   bodyCylinder.body.a_0[3] = der(bodyCylinder.body.v_0[3]);
//   bodyCylinder.body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(bodyCylinder.body.frame_a.R);
//   bodyCylinder.body.z_a[1] = der(bodyCylinder.body.w_a[1]);
//   bodyCylinder.body.z_a[2] = der(bodyCylinder.body.w_a[2]);
//   bodyCylinder.body.z_a[3] = der(bodyCylinder.body.w_a[3]);
//   bodyCylinder.body.frame_a.f = bodyCylinder.body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(bodyCylinder.body.frame_a.R,{bodyCylinder.body.a_0[1] - bodyCylinder.body.g_0[1],bodyCylinder.body.a_0[2] - bodyCylinder.body.g_0[2],bodyCylinder.body.a_0[3] - bodyCylinder.body.g_0[3]}) + {bodyCylinder.body.z_a[2] * bodyCylinder.body.r_CM[3] - bodyCylinder.body.z_a[3] * bodyCylinder.body.r_CM[2],bodyCylinder.body.z_a[3] * bodyCylinder.body.r_CM[1] - bodyCylinder.body.z_a[1] * bodyCylinder.body.r_CM[3],bodyCylinder.body.z_a[1] * bodyCylinder.body.r_CM[2] - bodyCylinder.body.z_a[2] * bodyCylinder.body.r_CM[1]} + {bodyCylinder.body.w_a[2] * (bodyCylinder.body.w_a[1] * bodyCylinder.body.r_CM[2] - bodyCylinder.body.w_a[2] * bodyCylinder.body.r_CM[1]) - bodyCylinder.body.w_a[3] * (bodyCylinder.body.w_a[3] * bodyCylinder.body.r_CM[1] - bodyCylinder.body.w_a[1] * bodyCylinder.body.r_CM[3]),bodyCylinder.body.w_a[3] * (bodyCylinder.body.w_a[2] * bodyCylinder.body.r_CM[3] - bodyCylinder.body.w_a[3] * bodyCylinder.body.r_CM[2]) - bodyCylinder.body.w_a[1] * (bodyCylinder.body.w_a[1] * bodyCylinder.body.r_CM[2] - bodyCylinder.body.w_a[2] * bodyCylinder.body.r_CM[1]),bodyCylinder.body.w_a[1] * (bodyCylinder.body.w_a[3] * bodyCylinder.body.r_CM[1] - bodyCylinder.body.w_a[1] * bodyCylinder.body.r_CM[3]) - bodyCylinder.body.w_a[2] * (bodyCylinder.body.w_a[2] * bodyCylinder.body.r_CM[3] - bodyCylinder.body.w_a[3] * bodyCylinder.body.r_CM[2])});
//   bodyCylinder.body.frame_a.t[1] = bodyCylinder.body.I[1,1] * bodyCylinder.body.z_a[1] + (bodyCylinder.body.I[1,2] * bodyCylinder.body.z_a[2] + (bodyCylinder.body.I[1,3] * bodyCylinder.body.z_a[3] + (bodyCylinder.body.w_a[2] * (bodyCylinder.body.I[3,1] * bodyCylinder.body.w_a[1] + (bodyCylinder.body.I[3,2] * bodyCylinder.body.w_a[2] + bodyCylinder.body.I[3,3] * bodyCylinder.body.w_a[3])) + ((-bodyCylinder.body.w_a[3] * (bodyCylinder.body.I[2,1] * bodyCylinder.body.w_a[1] + (bodyCylinder.body.I[2,2] * bodyCylinder.body.w_a[2] + bodyCylinder.body.I[2,3] * bodyCylinder.body.w_a[3]))) + (bodyCylinder.body.r_CM[2] * bodyCylinder.body.frame_a.f[3] + (-bodyCylinder.body.r_CM[3] * bodyCylinder.body.frame_a.f[2]))))));
//   bodyCylinder.body.frame_a.t[2] = bodyCylinder.body.I[2,1] * bodyCylinder.body.z_a[1] + (bodyCylinder.body.I[2,2] * bodyCylinder.body.z_a[2] + (bodyCylinder.body.I[2,3] * bodyCylinder.body.z_a[3] + (bodyCylinder.body.w_a[3] * (bodyCylinder.body.I[1,1] * bodyCylinder.body.w_a[1] + (bodyCylinder.body.I[1,2] * bodyCylinder.body.w_a[2] + bodyCylinder.body.I[1,3] * bodyCylinder.body.w_a[3])) + ((-bodyCylinder.body.w_a[1] * (bodyCylinder.body.I[3,1] * bodyCylinder.body.w_a[1] + (bodyCylinder.body.I[3,2] * bodyCylinder.body.w_a[2] + bodyCylinder.body.I[3,3] * bodyCylinder.body.w_a[3]))) + (bodyCylinder.body.r_CM[3] * bodyCylinder.body.frame_a.f[1] + (-bodyCylinder.body.r_CM[1] * bodyCylinder.body.frame_a.f[3]))))));
//   bodyCylinder.body.frame_a.t[3] = bodyCylinder.body.I[3,1] * bodyCylinder.body.z_a[1] + (bodyCylinder.body.I[3,2] * bodyCylinder.body.z_a[2] + (bodyCylinder.body.I[3,3] * bodyCylinder.body.z_a[3] + (bodyCylinder.body.w_a[1] * (bodyCylinder.body.I[2,1] * bodyCylinder.body.w_a[1] + (bodyCylinder.body.I[2,2] * bodyCylinder.body.w_a[2] + bodyCylinder.body.I[2,3] * bodyCylinder.body.w_a[3])) + ((-bodyCylinder.body.w_a[2] * (bodyCylinder.body.I[1,1] * bodyCylinder.body.w_a[1] + (bodyCylinder.body.I[1,2] * bodyCylinder.body.w_a[2] + bodyCylinder.body.I[1,3] * bodyCylinder.body.w_a[3]))) + (bodyCylinder.body.r_CM[1] * bodyCylinder.body.frame_a.f[2] + (-bodyCylinder.body.r_CM[2] * bodyCylinder.body.frame_a.f[1]))))));
//   bodyCylinder.shape1.R.T[1,1] = bodyCylinder.frame_a.R.T[1,1];
//   bodyCylinder.shape1.R.T[1,2] = bodyCylinder.frame_a.R.T[1,2];
//   bodyCylinder.shape1.R.T[1,3] = bodyCylinder.frame_a.R.T[1,3];
//   bodyCylinder.shape1.R.T[2,1] = bodyCylinder.frame_a.R.T[2,1];
//   bodyCylinder.shape1.R.T[2,2] = bodyCylinder.frame_a.R.T[2,2];
//   bodyCylinder.shape1.R.T[2,3] = bodyCylinder.frame_a.R.T[2,3];
//   bodyCylinder.shape1.R.T[3,1] = bodyCylinder.frame_a.R.T[3,1];
//   bodyCylinder.shape1.R.T[3,2] = bodyCylinder.frame_a.R.T[3,2];
//   bodyCylinder.shape1.R.T[3,3] = bodyCylinder.frame_a.R.T[3,3];
//   bodyCylinder.shape1.R.w[1] = bodyCylinder.frame_a.R.w[1];
//   bodyCylinder.shape1.R.w[2] = bodyCylinder.frame_a.R.w[2];
//   bodyCylinder.shape1.R.w[3] = bodyCylinder.frame_a.R.w[3];
//   bodyCylinder.shape1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(bodyCylinder.shape1.shapeType);
//   bodyCylinder.shape1.rxvisobj[1] = bodyCylinder.shape1.R.T[1,1] * bodyCylinder.shape1.e_x[1] + (bodyCylinder.shape1.R.T[2,1] * bodyCylinder.shape1.e_x[2] + bodyCylinder.shape1.R.T[3,1] * bodyCylinder.shape1.e_x[3]);
//   bodyCylinder.shape1.rxvisobj[2] = bodyCylinder.shape1.R.T[1,2] * bodyCylinder.shape1.e_x[1] + (bodyCylinder.shape1.R.T[2,2] * bodyCylinder.shape1.e_x[2] + bodyCylinder.shape1.R.T[3,2] * bodyCylinder.shape1.e_x[3]);
//   bodyCylinder.shape1.rxvisobj[3] = bodyCylinder.shape1.R.T[1,3] * bodyCylinder.shape1.e_x[1] + (bodyCylinder.shape1.R.T[2,3] * bodyCylinder.shape1.e_x[2] + bodyCylinder.shape1.R.T[3,3] * bodyCylinder.shape1.e_x[3]);
//   bodyCylinder.shape1.ryvisobj[1] = bodyCylinder.shape1.R.T[1,1] * bodyCylinder.shape1.e_y[1] + (bodyCylinder.shape1.R.T[2,1] * bodyCylinder.shape1.e_y[2] + bodyCylinder.shape1.R.T[3,1] * bodyCylinder.shape1.e_y[3]);
//   bodyCylinder.shape1.ryvisobj[2] = bodyCylinder.shape1.R.T[1,2] * bodyCylinder.shape1.e_y[1] + (bodyCylinder.shape1.R.T[2,2] * bodyCylinder.shape1.e_y[2] + bodyCylinder.shape1.R.T[3,2] * bodyCylinder.shape1.e_y[3]);
//   bodyCylinder.shape1.ryvisobj[3] = bodyCylinder.shape1.R.T[1,3] * bodyCylinder.shape1.e_y[1] + (bodyCylinder.shape1.R.T[2,3] * bodyCylinder.shape1.e_y[2] + bodyCylinder.shape1.R.T[3,3] * bodyCylinder.shape1.e_y[3]);
//   bodyCylinder.shape1.rvisobj = bodyCylinder.shape1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{bodyCylinder.shape1.R.T[1,1],bodyCylinder.shape1.R.T[1,2],bodyCylinder.shape1.R.T[1,3]},{bodyCylinder.shape1.R.T[2,1],bodyCylinder.shape1.R.T[2,2],bodyCylinder.shape1.R.T[2,3]},{bodyCylinder.shape1.R.T[3,1],bodyCylinder.shape1.R.T[3,2],bodyCylinder.shape1.R.T[3,3]}},{bodyCylinder.shape1.r_shape[1],bodyCylinder.shape1.r_shape[2],bodyCylinder.shape1.r_shape[3]});
//   bodyCylinder.shape1.size[1] = bodyCylinder.shape1.length;
//   bodyCylinder.shape1.size[2] = bodyCylinder.shape1.width;
//   bodyCylinder.shape1.size[3] = bodyCylinder.shape1.height;
//   bodyCylinder.shape1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(bodyCylinder.shape1.color[1] / 255.0,bodyCylinder.shape1.color[2] / 255.0,bodyCylinder.shape1.color[3] / 255.0,bodyCylinder.shape1.specularCoefficient);
//   bodyCylinder.shape1.Extra = bodyCylinder.shape1.extra;
//   bodyCylinder.r_0[1] = bodyCylinder.frame_a.r_0[1];
//   bodyCylinder.r_0[2] = bodyCylinder.frame_a.r_0[2];
//   bodyCylinder.r_0[3] = bodyCylinder.frame_a.r_0[3];
//   bodyCylinder.v_0[1] = der(bodyCylinder.r_0[1]);
//   bodyCylinder.v_0[2] = der(bodyCylinder.r_0[2]);
//   bodyCylinder.v_0[3] = der(bodyCylinder.r_0[3]);
//   bodyCylinder.a_0[1] = der(bodyCylinder.v_0[1]);
//   bodyCylinder.a_0[2] = der(bodyCylinder.v_0[2]);
//   bodyCylinder.a_0[3] = der(bodyCylinder.v_0[3]);
//   revolute.fixed.flange.phi = revolute.fixed.phi0;
//   revolute.internalAxis.flange.tau = revolute.internalAxis.tau;
//   revolute.internalAxis.flange.phi = revolute.internalAxis.phi;
//   revolute.constantTorque.tau = -revolute.constantTorque.flange.tau;
//   revolute.constantTorque.tau = revolute.constantTorque.tau_constant;
//   revolute.constantTorque.phi = revolute.constantTorque.flange.phi - revolute.constantTorque.phi_support;
//   revolute.constantTorque.phi_support = 0.0;
//   revolute.cylinder.R.T[1,1] = revolute.frame_a.R.T[1,1];
//   revolute.cylinder.R.T[1,2] = revolute.frame_a.R.T[1,2];
//   revolute.cylinder.R.T[1,3] = revolute.frame_a.R.T[1,3];
//   revolute.cylinder.R.T[2,1] = revolute.frame_a.R.T[2,1];
//   revolute.cylinder.R.T[2,2] = revolute.frame_a.R.T[2,2];
//   revolute.cylinder.R.T[2,3] = revolute.frame_a.R.T[2,3];
//   revolute.cylinder.R.T[3,1] = revolute.frame_a.R.T[3,1];
//   revolute.cylinder.R.T[3,2] = revolute.frame_a.R.T[3,2];
//   revolute.cylinder.R.T[3,3] = revolute.frame_a.R.T[3,3];
//   revolute.cylinder.R.w[1] = revolute.frame_a.R.w[1];
//   revolute.cylinder.R.w[2] = revolute.frame_a.R.w[2];
//   revolute.cylinder.R.w[3] = revolute.frame_a.R.w[3];
//   revolute.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(revolute.cylinder.shapeType);
//   revolute.cylinder.rxvisobj[1] = revolute.cylinder.R.T[1,1] * revolute.cylinder.e_x[1] + (revolute.cylinder.R.T[2,1] * revolute.cylinder.e_x[2] + revolute.cylinder.R.T[3,1] * revolute.cylinder.e_x[3]);
//   revolute.cylinder.rxvisobj[2] = revolute.cylinder.R.T[1,2] * revolute.cylinder.e_x[1] + (revolute.cylinder.R.T[2,2] * revolute.cylinder.e_x[2] + revolute.cylinder.R.T[3,2] * revolute.cylinder.e_x[3]);
//   revolute.cylinder.rxvisobj[3] = revolute.cylinder.R.T[1,3] * revolute.cylinder.e_x[1] + (revolute.cylinder.R.T[2,3] * revolute.cylinder.e_x[2] + revolute.cylinder.R.T[3,3] * revolute.cylinder.e_x[3]);
//   revolute.cylinder.ryvisobj[1] = revolute.cylinder.R.T[1,1] * revolute.cylinder.e_y[1] + (revolute.cylinder.R.T[2,1] * revolute.cylinder.e_y[2] + revolute.cylinder.R.T[3,1] * revolute.cylinder.e_y[3]);
//   revolute.cylinder.ryvisobj[2] = revolute.cylinder.R.T[1,2] * revolute.cylinder.e_y[1] + (revolute.cylinder.R.T[2,2] * revolute.cylinder.e_y[2] + revolute.cylinder.R.T[3,2] * revolute.cylinder.e_y[3]);
//   revolute.cylinder.ryvisobj[3] = revolute.cylinder.R.T[1,3] * revolute.cylinder.e_y[1] + (revolute.cylinder.R.T[2,3] * revolute.cylinder.e_y[2] + revolute.cylinder.R.T[3,3] * revolute.cylinder.e_y[3]);
//   revolute.cylinder.rvisobj = revolute.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{revolute.cylinder.R.T[1,1],revolute.cylinder.R.T[1,2],revolute.cylinder.R.T[1,3]},{revolute.cylinder.R.T[2,1],revolute.cylinder.R.T[2,2],revolute.cylinder.R.T[2,3]},{revolute.cylinder.R.T[3,1],revolute.cylinder.R.T[3,2],revolute.cylinder.R.T[3,3]}},{revolute.cylinder.r_shape[1],revolute.cylinder.r_shape[2],revolute.cylinder.r_shape[3]});
//   revolute.cylinder.size[1] = revolute.cylinder.length;
//   revolute.cylinder.size[2] = revolute.cylinder.width;
//   revolute.cylinder.size[3] = revolute.cylinder.height;
//   revolute.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(revolute.cylinder.color[1] / 255.0,revolute.cylinder.color[2] / 255.0,revolute.cylinder.color[3] / 255.0,revolute.cylinder.specularCoefficient);
//   revolute.cylinder.Extra = revolute.cylinder.extra;
//   assert(true,\"Connector frame_a of revolute joint is not connected\");
//   assert(true,\"Connector frame_b of revolute joint is not connected\");
//   revolute.angle = revolute.phi;
//   revolute.w = der(revolute.phi);
//   revolute.a = der(revolute.w);
//   revolute.frame_b.r_0[1] = revolute.frame_a.r_0[1];
//   revolute.frame_b.r_0[2] = revolute.frame_a.r_0[2];
//   revolute.frame_b.r_0[3] = revolute.frame_a.r_0[3];
//   revolute.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({revolute.e[1],revolute.e[2],revolute.e[3]},revolute.phi,revolute.w);
//   revolute.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(revolute.frame_a.R,revolute.R_rel);
//   revolute.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(revolute.R_rel,{revolute.frame_b.f[1],revolute.frame_b.f[2],revolute.frame_b.f[3]});
//   revolute.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(revolute.R_rel,{revolute.frame_b.t[1],revolute.frame_b.t[2],revolute.frame_b.t[3]});
//   revolute.tau = (-revolute.frame_b.t[1]) * revolute.e[1] + ((-revolute.frame_b.t[2]) * revolute.e[2] + (-revolute.frame_b.t[3]) * revolute.e[3]);
//   revolute.phi = revolute.internalAxis.phi;
//   assert(true,\"Connector frame_resolve must be connected at least once and frame_resolve.r_0/.R must be set\");
//   torque.basicTorque.frame_resolve.f[1] = 0.0;
//   torque.basicTorque.frame_resolve.f[2] = 0.0;
//   torque.basicTorque.frame_resolve.f[3] = 0.0;
//   torque.basicTorque.frame_resolve.t[1] = 0.0;
//   torque.basicTorque.frame_resolve.t[2] = 0.0;
//   torque.basicTorque.frame_resolve.t[3] = 0.0;
//   torque.basicTorque.r_0[1] = torque.basicTorque.frame_b.r_0[1] - torque.basicTorque.frame_a.r_0[1];
//   torque.basicTorque.r_0[2] = torque.basicTorque.frame_b.r_0[2] - torque.basicTorque.frame_a.r_0[2];
//   torque.basicTorque.r_0[3] = torque.basicTorque.frame_b.r_0[3] - torque.basicTorque.frame_a.r_0[3];
//   torque.basicTorque.frame_a.f[1] = 0.0;
//   torque.basicTorque.frame_a.f[2] = 0.0;
//   torque.basicTorque.frame_a.f[3] = 0.0;
//   torque.basicTorque.frame_b.f[1] = 0.0;
//   torque.basicTorque.frame_b.f[2] = 0.0;
//   torque.basicTorque.frame_b.f[3] = 0.0;
//   torque.basicTorque.t_b_0 = -Modelica.Mechanics.MultiBody.Frames.resolve1(torque.basicTorque.frame_b.R,{torque.basicTorque.torque[1],torque.basicTorque.torque[2],torque.basicTorque.torque[3]});
//   torque.basicTorque.frame_b.t[1] = -torque.basicTorque.torque[1];
//   torque.basicTorque.frame_b.t[2] = -torque.basicTorque.torque[2];
//   torque.basicTorque.frame_b.t[3] = -torque.basicTorque.torque[3];
//   {0.0,0.0,0.0} = torque.basicTorque.frame_a.t + Modelica.Mechanics.MultiBody.Frames.resolve2(torque.basicTorque.frame_a.R,{torque.basicTorque.t_b_0[1],torque.basicTorque.t_b_0[2],torque.basicTorque.t_b_0[3]});
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   torque.torqueArrow.R.T[1,1] = torque.frame_b.R.T[1,1];
//   torque.torqueArrow.R.T[1,2] = torque.frame_b.R.T[1,2];
//   torque.torqueArrow.R.T[1,3] = torque.frame_b.R.T[1,3];
//   torque.torqueArrow.R.T[2,1] = torque.frame_b.R.T[2,1];
//   torque.torqueArrow.R.T[2,2] = torque.frame_b.R.T[2,2];
//   torque.torqueArrow.R.T[2,3] = torque.frame_b.R.T[2,3];
//   torque.torqueArrow.R.T[3,1] = torque.frame_b.R.T[3,1];
//   torque.torqueArrow.R.T[3,2] = torque.frame_b.R.T[3,2];
//   torque.torqueArrow.R.T[3,3] = torque.frame_b.R.T[3,3];
//   torque.torqueArrow.R.w[1] = torque.frame_b.R.w[1];
//   torque.torqueArrow.R.w[2] = torque.frame_b.R.w[2];
//   torque.torqueArrow.R.w[3] = torque.frame_b.R.w[3];
//   torque.torqueArrow.arrowLine.R.T[1,1] = torque.torqueArrow.R.T[1,1];
//   torque.torqueArrow.arrowLine.R.T[1,2] = torque.torqueArrow.R.T[1,2];
//   torque.torqueArrow.arrowLine.R.T[1,3] = torque.torqueArrow.R.T[1,3];
//   torque.torqueArrow.arrowLine.R.T[2,1] = torque.torqueArrow.R.T[2,1];
//   torque.torqueArrow.arrowLine.R.T[2,2] = torque.torqueArrow.R.T[2,2];
//   torque.torqueArrow.arrowLine.R.T[2,3] = torque.torqueArrow.R.T[2,3];
//   torque.torqueArrow.arrowLine.R.T[3,1] = torque.torqueArrow.R.T[3,1];
//   torque.torqueArrow.arrowLine.R.T[3,2] = torque.torqueArrow.R.T[3,2];
//   torque.torqueArrow.arrowLine.R.T[3,3] = torque.torqueArrow.R.T[3,3];
//   torque.torqueArrow.arrowLine.R.w[1] = torque.torqueArrow.R.w[1];
//   torque.torqueArrow.arrowLine.R.w[2] = torque.torqueArrow.R.w[2];
//   torque.torqueArrow.arrowLine.R.w[3] = torque.torqueArrow.R.w[3];
//   torque.torqueArrow.arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque.torqueArrow.arrowLine.shapeType);
//   torque.torqueArrow.arrowLine.rxvisobj[1] = torque.torqueArrow.arrowLine.R.T[1,1] * torque.torqueArrow.arrowLine.e_x[1] + (torque.torqueArrow.arrowLine.R.T[2,1] * torque.torqueArrow.arrowLine.e_x[2] + torque.torqueArrow.arrowLine.R.T[3,1] * torque.torqueArrow.arrowLine.e_x[3]);
//   torque.torqueArrow.arrowLine.rxvisobj[2] = torque.torqueArrow.arrowLine.R.T[1,2] * torque.torqueArrow.arrowLine.e_x[1] + (torque.torqueArrow.arrowLine.R.T[2,2] * torque.torqueArrow.arrowLine.e_x[2] + torque.torqueArrow.arrowLine.R.T[3,2] * torque.torqueArrow.arrowLine.e_x[3]);
//   torque.torqueArrow.arrowLine.rxvisobj[3] = torque.torqueArrow.arrowLine.R.T[1,3] * torque.torqueArrow.arrowLine.e_x[1] + (torque.torqueArrow.arrowLine.R.T[2,3] * torque.torqueArrow.arrowLine.e_x[2] + torque.torqueArrow.arrowLine.R.T[3,3] * torque.torqueArrow.arrowLine.e_x[3]);
//   torque.torqueArrow.arrowLine.ryvisobj[1] = torque.torqueArrow.arrowLine.R.T[1,1] * torque.torqueArrow.arrowLine.e_y[1] + (torque.torqueArrow.arrowLine.R.T[2,1] * torque.torqueArrow.arrowLine.e_y[2] + torque.torqueArrow.arrowLine.R.T[3,1] * torque.torqueArrow.arrowLine.e_y[3]);
//   torque.torqueArrow.arrowLine.ryvisobj[2] = torque.torqueArrow.arrowLine.R.T[1,2] * torque.torqueArrow.arrowLine.e_y[1] + (torque.torqueArrow.arrowLine.R.T[2,2] * torque.torqueArrow.arrowLine.e_y[2] + torque.torqueArrow.arrowLine.R.T[3,2] * torque.torqueArrow.arrowLine.e_y[3]);
//   torque.torqueArrow.arrowLine.ryvisobj[3] = torque.torqueArrow.arrowLine.R.T[1,3] * torque.torqueArrow.arrowLine.e_y[1] + (torque.torqueArrow.arrowLine.R.T[2,3] * torque.torqueArrow.arrowLine.e_y[2] + torque.torqueArrow.arrowLine.R.T[3,3] * torque.torqueArrow.arrowLine.e_y[3]);
//   torque.torqueArrow.arrowLine.rvisobj = torque.torqueArrow.arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque.torqueArrow.arrowLine.R.T[1,1],torque.torqueArrow.arrowLine.R.T[1,2],torque.torqueArrow.arrowLine.R.T[1,3]},{torque.torqueArrow.arrowLine.R.T[2,1],torque.torqueArrow.arrowLine.R.T[2,2],torque.torqueArrow.arrowLine.R.T[2,3]},{torque.torqueArrow.arrowLine.R.T[3,1],torque.torqueArrow.arrowLine.R.T[3,2],torque.torqueArrow.arrowLine.R.T[3,3]}},{torque.torqueArrow.arrowLine.r_shape[1],torque.torqueArrow.arrowLine.r_shape[2],torque.torqueArrow.arrowLine.r_shape[3]});
//   torque.torqueArrow.arrowLine.size[1] = torque.torqueArrow.arrowLine.length;
//   torque.torqueArrow.arrowLine.size[2] = torque.torqueArrow.arrowLine.width;
//   torque.torqueArrow.arrowLine.size[3] = torque.torqueArrow.arrowLine.height;
//   torque.torqueArrow.arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque.torqueArrow.arrowLine.color[1] / 255.0,torque.torqueArrow.arrowLine.color[2] / 255.0,torque.torqueArrow.arrowLine.color[3] / 255.0,torque.torqueArrow.arrowLine.specularCoefficient);
//   torque.torqueArrow.arrowLine.Extra = torque.torqueArrow.arrowLine.extra;
//   torque.torqueArrow.arrowHead1.R.T[1,1] = torque.torqueArrow.R.T[1,1];
//   torque.torqueArrow.arrowHead1.R.T[1,2] = torque.torqueArrow.R.T[1,2];
//   torque.torqueArrow.arrowHead1.R.T[1,3] = torque.torqueArrow.R.T[1,3];
//   torque.torqueArrow.arrowHead1.R.T[2,1] = torque.torqueArrow.R.T[2,1];
//   torque.torqueArrow.arrowHead1.R.T[2,2] = torque.torqueArrow.R.T[2,2];
//   torque.torqueArrow.arrowHead1.R.T[2,3] = torque.torqueArrow.R.T[2,3];
//   torque.torqueArrow.arrowHead1.R.T[3,1] = torque.torqueArrow.R.T[3,1];
//   torque.torqueArrow.arrowHead1.R.T[3,2] = torque.torqueArrow.R.T[3,2];
//   torque.torqueArrow.arrowHead1.R.T[3,3] = torque.torqueArrow.R.T[3,3];
//   torque.torqueArrow.arrowHead1.R.w[1] = torque.torqueArrow.R.w[1];
//   torque.torqueArrow.arrowHead1.R.w[2] = torque.torqueArrow.R.w[2];
//   torque.torqueArrow.arrowHead1.R.w[3] = torque.torqueArrow.R.w[3];
//   torque.torqueArrow.arrowHead1.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque.torqueArrow.arrowHead1.shapeType);
//   torque.torqueArrow.arrowHead1.rxvisobj[1] = torque.torqueArrow.arrowHead1.R.T[1,1] * torque.torqueArrow.arrowHead1.e_x[1] + (torque.torqueArrow.arrowHead1.R.T[2,1] * torque.torqueArrow.arrowHead1.e_x[2] + torque.torqueArrow.arrowHead1.R.T[3,1] * torque.torqueArrow.arrowHead1.e_x[3]);
//   torque.torqueArrow.arrowHead1.rxvisobj[2] = torque.torqueArrow.arrowHead1.R.T[1,2] * torque.torqueArrow.arrowHead1.e_x[1] + (torque.torqueArrow.arrowHead1.R.T[2,2] * torque.torqueArrow.arrowHead1.e_x[2] + torque.torqueArrow.arrowHead1.R.T[3,2] * torque.torqueArrow.arrowHead1.e_x[3]);
//   torque.torqueArrow.arrowHead1.rxvisobj[3] = torque.torqueArrow.arrowHead1.R.T[1,3] * torque.torqueArrow.arrowHead1.e_x[1] + (torque.torqueArrow.arrowHead1.R.T[2,3] * torque.torqueArrow.arrowHead1.e_x[2] + torque.torqueArrow.arrowHead1.R.T[3,3] * torque.torqueArrow.arrowHead1.e_x[3]);
//   torque.torqueArrow.arrowHead1.ryvisobj[1] = torque.torqueArrow.arrowHead1.R.T[1,1] * torque.torqueArrow.arrowHead1.e_y[1] + (torque.torqueArrow.arrowHead1.R.T[2,1] * torque.torqueArrow.arrowHead1.e_y[2] + torque.torqueArrow.arrowHead1.R.T[3,1] * torque.torqueArrow.arrowHead1.e_y[3]);
//   torque.torqueArrow.arrowHead1.ryvisobj[2] = torque.torqueArrow.arrowHead1.R.T[1,2] * torque.torqueArrow.arrowHead1.e_y[1] + (torque.torqueArrow.arrowHead1.R.T[2,2] * torque.torqueArrow.arrowHead1.e_y[2] + torque.torqueArrow.arrowHead1.R.T[3,2] * torque.torqueArrow.arrowHead1.e_y[3]);
//   torque.torqueArrow.arrowHead1.ryvisobj[3] = torque.torqueArrow.arrowHead1.R.T[1,3] * torque.torqueArrow.arrowHead1.e_y[1] + (torque.torqueArrow.arrowHead1.R.T[2,3] * torque.torqueArrow.arrowHead1.e_y[2] + torque.torqueArrow.arrowHead1.R.T[3,3] * torque.torqueArrow.arrowHead1.e_y[3]);
//   torque.torqueArrow.arrowHead1.rvisobj = torque.torqueArrow.arrowHead1.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque.torqueArrow.arrowHead1.R.T[1,1],torque.torqueArrow.arrowHead1.R.T[1,2],torque.torqueArrow.arrowHead1.R.T[1,3]},{torque.torqueArrow.arrowHead1.R.T[2,1],torque.torqueArrow.arrowHead1.R.T[2,2],torque.torqueArrow.arrowHead1.R.T[2,3]},{torque.torqueArrow.arrowHead1.R.T[3,1],torque.torqueArrow.arrowHead1.R.T[3,2],torque.torqueArrow.arrowHead1.R.T[3,3]}},{torque.torqueArrow.arrowHead1.r_shape[1],torque.torqueArrow.arrowHead1.r_shape[2],torque.torqueArrow.arrowHead1.r_shape[3]});
//   torque.torqueArrow.arrowHead1.size[1] = torque.torqueArrow.arrowHead1.length;
//   torque.torqueArrow.arrowHead1.size[2] = torque.torqueArrow.arrowHead1.width;
//   torque.torqueArrow.arrowHead1.size[3] = torque.torqueArrow.arrowHead1.height;
//   torque.torqueArrow.arrowHead1.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque.torqueArrow.arrowHead1.color[1] / 255.0,torque.torqueArrow.arrowHead1.color[2] / 255.0,torque.torqueArrow.arrowHead1.color[3] / 255.0,torque.torqueArrow.arrowHead1.specularCoefficient);
//   torque.torqueArrow.arrowHead1.Extra = torque.torqueArrow.arrowHead1.extra;
//   torque.torqueArrow.arrowHead2.R.T[1,1] = torque.torqueArrow.R.T[1,1];
//   torque.torqueArrow.arrowHead2.R.T[1,2] = torque.torqueArrow.R.T[1,2];
//   torque.torqueArrow.arrowHead2.R.T[1,3] = torque.torqueArrow.R.T[1,3];
//   torque.torqueArrow.arrowHead2.R.T[2,1] = torque.torqueArrow.R.T[2,1];
//   torque.torqueArrow.arrowHead2.R.T[2,2] = torque.torqueArrow.R.T[2,2];
//   torque.torqueArrow.arrowHead2.R.T[2,3] = torque.torqueArrow.R.T[2,3];
//   torque.torqueArrow.arrowHead2.R.T[3,1] = torque.torqueArrow.R.T[3,1];
//   torque.torqueArrow.arrowHead2.R.T[3,2] = torque.torqueArrow.R.T[3,2];
//   torque.torqueArrow.arrowHead2.R.T[3,3] = torque.torqueArrow.R.T[3,3];
//   torque.torqueArrow.arrowHead2.R.w[1] = torque.torqueArrow.R.w[1];
//   torque.torqueArrow.arrowHead2.R.w[2] = torque.torqueArrow.R.w[2];
//   torque.torqueArrow.arrowHead2.R.w[3] = torque.torqueArrow.R.w[3];
//   torque.torqueArrow.arrowHead2.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque.torqueArrow.arrowHead2.shapeType);
//   torque.torqueArrow.arrowHead2.rxvisobj[1] = torque.torqueArrow.arrowHead2.R.T[1,1] * torque.torqueArrow.arrowHead2.e_x[1] + (torque.torqueArrow.arrowHead2.R.T[2,1] * torque.torqueArrow.arrowHead2.e_x[2] + torque.torqueArrow.arrowHead2.R.T[3,1] * torque.torqueArrow.arrowHead2.e_x[3]);
//   torque.torqueArrow.arrowHead2.rxvisobj[2] = torque.torqueArrow.arrowHead2.R.T[1,2] * torque.torqueArrow.arrowHead2.e_x[1] + (torque.torqueArrow.arrowHead2.R.T[2,2] * torque.torqueArrow.arrowHead2.e_x[2] + torque.torqueArrow.arrowHead2.R.T[3,2] * torque.torqueArrow.arrowHead2.e_x[3]);
//   torque.torqueArrow.arrowHead2.rxvisobj[3] = torque.torqueArrow.arrowHead2.R.T[1,3] * torque.torqueArrow.arrowHead2.e_x[1] + (torque.torqueArrow.arrowHead2.R.T[2,3] * torque.torqueArrow.arrowHead2.e_x[2] + torque.torqueArrow.arrowHead2.R.T[3,3] * torque.torqueArrow.arrowHead2.e_x[3]);
//   torque.torqueArrow.arrowHead2.ryvisobj[1] = torque.torqueArrow.arrowHead2.R.T[1,1] * torque.torqueArrow.arrowHead2.e_y[1] + (torque.torqueArrow.arrowHead2.R.T[2,1] * torque.torqueArrow.arrowHead2.e_y[2] + torque.torqueArrow.arrowHead2.R.T[3,1] * torque.torqueArrow.arrowHead2.e_y[3]);
//   torque.torqueArrow.arrowHead2.ryvisobj[2] = torque.torqueArrow.arrowHead2.R.T[1,2] * torque.torqueArrow.arrowHead2.e_y[1] + (torque.torqueArrow.arrowHead2.R.T[2,2] * torque.torqueArrow.arrowHead2.e_y[2] + torque.torqueArrow.arrowHead2.R.T[3,2] * torque.torqueArrow.arrowHead2.e_y[3]);
//   torque.torqueArrow.arrowHead2.ryvisobj[3] = torque.torqueArrow.arrowHead2.R.T[1,3] * torque.torqueArrow.arrowHead2.e_y[1] + (torque.torqueArrow.arrowHead2.R.T[2,3] * torque.torqueArrow.arrowHead2.e_y[2] + torque.torqueArrow.arrowHead2.R.T[3,3] * torque.torqueArrow.arrowHead2.e_y[3]);
//   torque.torqueArrow.arrowHead2.rvisobj = torque.torqueArrow.arrowHead2.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque.torqueArrow.arrowHead2.R.T[1,1],torque.torqueArrow.arrowHead2.R.T[1,2],torque.torqueArrow.arrowHead2.R.T[1,3]},{torque.torqueArrow.arrowHead2.R.T[2,1],torque.torqueArrow.arrowHead2.R.T[2,2],torque.torqueArrow.arrowHead2.R.T[2,3]},{torque.torqueArrow.arrowHead2.R.T[3,1],torque.torqueArrow.arrowHead2.R.T[3,2],torque.torqueArrow.arrowHead2.R.T[3,3]}},{torque.torqueArrow.arrowHead2.r_shape[1],torque.torqueArrow.arrowHead2.r_shape[2],torque.torqueArrow.arrowHead2.r_shape[3]});
//   torque.torqueArrow.arrowHead2.size[1] = torque.torqueArrow.arrowHead2.length;
//   torque.torqueArrow.arrowHead2.size[2] = torque.torqueArrow.arrowHead2.width;
//   torque.torqueArrow.arrowHead2.size[3] = torque.torqueArrow.arrowHead2.height;
//   torque.torqueArrow.arrowHead2.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque.torqueArrow.arrowHead2.color[1] / 255.0,torque.torqueArrow.arrowHead2.color[2] / 255.0,torque.torqueArrow.arrowHead2.color[3] / 255.0,torque.torqueArrow.arrowHead2.specularCoefficient);
//   torque.torqueArrow.arrowHead2.Extra = torque.torqueArrow.arrowHead2.extra;
//   torque.connectionLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(torque.connectionLine.shapeType);
//   torque.connectionLine.rxvisobj[1] = torque.connectionLine.R.T[1,1] * torque.connectionLine.e_x[1] + (torque.connectionLine.R.T[2,1] * torque.connectionLine.e_x[2] + torque.connectionLine.R.T[3,1] * torque.connectionLine.e_x[3]);
//   torque.connectionLine.rxvisobj[2] = torque.connectionLine.R.T[1,2] * torque.connectionLine.e_x[1] + (torque.connectionLine.R.T[2,2] * torque.connectionLine.e_x[2] + torque.connectionLine.R.T[3,2] * torque.connectionLine.e_x[3]);
//   torque.connectionLine.rxvisobj[3] = torque.connectionLine.R.T[1,3] * torque.connectionLine.e_x[1] + (torque.connectionLine.R.T[2,3] * torque.connectionLine.e_x[2] + torque.connectionLine.R.T[3,3] * torque.connectionLine.e_x[3]);
//   torque.connectionLine.ryvisobj[1] = torque.connectionLine.R.T[1,1] * torque.connectionLine.e_y[1] + (torque.connectionLine.R.T[2,1] * torque.connectionLine.e_y[2] + torque.connectionLine.R.T[3,1] * torque.connectionLine.e_y[3]);
//   torque.connectionLine.ryvisobj[2] = torque.connectionLine.R.T[1,2] * torque.connectionLine.e_y[1] + (torque.connectionLine.R.T[2,2] * torque.connectionLine.e_y[2] + torque.connectionLine.R.T[3,2] * torque.connectionLine.e_y[3]);
//   torque.connectionLine.ryvisobj[3] = torque.connectionLine.R.T[1,3] * torque.connectionLine.e_y[1] + (torque.connectionLine.R.T[2,3] * torque.connectionLine.e_y[2] + torque.connectionLine.R.T[3,3] * torque.connectionLine.e_y[3]);
//   torque.connectionLine.rvisobj = torque.connectionLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{torque.connectionLine.R.T[1,1],torque.connectionLine.R.T[1,2],torque.connectionLine.R.T[1,3]},{torque.connectionLine.R.T[2,1],torque.connectionLine.R.T[2,2],torque.connectionLine.R.T[2,3]},{torque.connectionLine.R.T[3,1],torque.connectionLine.R.T[3,2],torque.connectionLine.R.T[3,3]}},{torque.connectionLine.r_shape[1],torque.connectionLine.r_shape[2],torque.connectionLine.r_shape[3]});
//   torque.connectionLine.size[1] = torque.connectionLine.length;
//   torque.connectionLine.size[2] = torque.connectionLine.width;
//   torque.connectionLine.size[3] = torque.connectionLine.height;
//   torque.connectionLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(torque.connectionLine.color[1] / 255.0,torque.connectionLine.color[2] / 255.0,torque.connectionLine.color[3] / 255.0,torque.connectionLine.specularCoefficient);
//   torque.connectionLine.Extra = torque.connectionLine.extra;
//   torque.zeroPosition.frame_resolve.R.w[3] = 0.0;
//   torque.zeroPosition.frame_resolve.R.w[2] = 0.0;
//   torque.zeroPosition.frame_resolve.R.w[1] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[3,3] = 1.0;
//   torque.zeroPosition.frame_resolve.R.T[3,2] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[3,1] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[2,3] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[2,2] = 1.0;
//   torque.zeroPosition.frame_resolve.R.T[2,1] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[1,3] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[1,2] = 0.0;
//   torque.zeroPosition.frame_resolve.R.T[1,1] = 1.0;
//   torque.zeroPosition.frame_resolve.r_0[1] = 0.0;
//   torque.zeroPosition.frame_resolve.r_0[2] = 0.0;
//   torque.zeroPosition.frame_resolve.r_0[3] = 0.0;
//   assert(true,\"Connector frame_a of component is not connected\");
//   assert(true,\"Connector frame_b of component is not connected\");
//   sine1[1].y = sine1[1].offset + (if time < sine1[1].startTime then 0.0 else sine1[1].amplitude * sin(6.28318530717959 * (sine1[1].freqHz * (time - sine1[1].startTime)) + sine1[1].phase));
//   sine1[2].y = sine1[2].offset + (if time < sine1[2].startTime then 0.0 else sine1[2].amplitude * sin(6.28318530717959 * (sine1[2].freqHz * (time - sine1[2].startTime)) + sine1[2].phase));
//   sine1[3].y = sine1[3].offset + (if time < sine1[3].startTime then 0.0 else sine1[3].amplitude * sin(6.28318530717959 * (sine1[3].freqHz * (time - sine1[3].startTime)) + sine1[3].phase));
//   rotor1D.rotorWith3DEffects.cylinder.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(rotor1D.rotorWith3DEffects.frame_a.R,Modelica.Mechanics.MultiBody.Frames.planarRotation({rotor1D.rotorWith3DEffects.e[1],rotor1D.rotorWith3DEffects.e[2],rotor1D.rotorWith3DEffects.e[3]},rotor1D.rotorWith3DEffects.phi,0.0));
//   rotor1D.rotorWith3DEffects.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(rotor1D.rotorWith3DEffects.cylinder.shapeType);
//   rotor1D.rotorWith3DEffects.cylinder.rxvisobj[1] = rotor1D.rotorWith3DEffects.cylinder.R.T[1,1] * rotor1D.rotorWith3DEffects.cylinder.e_x[1] + (rotor1D.rotorWith3DEffects.cylinder.R.T[2,1] * rotor1D.rotorWith3DEffects.cylinder.e_x[2] + rotor1D.rotorWith3DEffects.cylinder.R.T[3,1] * rotor1D.rotorWith3DEffects.cylinder.e_x[3]);
//   rotor1D.rotorWith3DEffects.cylinder.rxvisobj[2] = rotor1D.rotorWith3DEffects.cylinder.R.T[1,2] * rotor1D.rotorWith3DEffects.cylinder.e_x[1] + (rotor1D.rotorWith3DEffects.cylinder.R.T[2,2] * rotor1D.rotorWith3DEffects.cylinder.e_x[2] + rotor1D.rotorWith3DEffects.cylinder.R.T[3,2] * rotor1D.rotorWith3DEffects.cylinder.e_x[3]);
//   rotor1D.rotorWith3DEffects.cylinder.rxvisobj[3] = rotor1D.rotorWith3DEffects.cylinder.R.T[1,3] * rotor1D.rotorWith3DEffects.cylinder.e_x[1] + (rotor1D.rotorWith3DEffects.cylinder.R.T[2,3] * rotor1D.rotorWith3DEffects.cylinder.e_x[2] + rotor1D.rotorWith3DEffects.cylinder.R.T[3,3] * rotor1D.rotorWith3DEffects.cylinder.e_x[3]);
//   rotor1D.rotorWith3DEffects.cylinder.ryvisobj[1] = rotor1D.rotorWith3DEffects.cylinder.R.T[1,1] * rotor1D.rotorWith3DEffects.cylinder.e_y[1] + (rotor1D.rotorWith3DEffects.cylinder.R.T[2,1] * rotor1D.rotorWith3DEffects.cylinder.e_y[2] + rotor1D.rotorWith3DEffects.cylinder.R.T[3,1] * rotor1D.rotorWith3DEffects.cylinder.e_y[3]);
//   rotor1D.rotorWith3DEffects.cylinder.ryvisobj[2] = rotor1D.rotorWith3DEffects.cylinder.R.T[1,2] * rotor1D.rotorWith3DEffects.cylinder.e_y[1] + (rotor1D.rotorWith3DEffects.cylinder.R.T[2,2] * rotor1D.rotorWith3DEffects.cylinder.e_y[2] + rotor1D.rotorWith3DEffects.cylinder.R.T[3,2] * rotor1D.rotorWith3DEffects.cylinder.e_y[3]);
//   rotor1D.rotorWith3DEffects.cylinder.ryvisobj[3] = rotor1D.rotorWith3DEffects.cylinder.R.T[1,3] * rotor1D.rotorWith3DEffects.cylinder.e_y[1] + (rotor1D.rotorWith3DEffects.cylinder.R.T[2,3] * rotor1D.rotorWith3DEffects.cylinder.e_y[2] + rotor1D.rotorWith3DEffects.cylinder.R.T[3,3] * rotor1D.rotorWith3DEffects.cylinder.e_y[3]);
//   rotor1D.rotorWith3DEffects.cylinder.rvisobj = rotor1D.rotorWith3DEffects.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{rotor1D.rotorWith3DEffects.cylinder.R.T[1,1],rotor1D.rotorWith3DEffects.cylinder.R.T[1,2],rotor1D.rotorWith3DEffects.cylinder.R.T[1,3]},{rotor1D.rotorWith3DEffects.cylinder.R.T[2,1],rotor1D.rotorWith3DEffects.cylinder.R.T[2,2],rotor1D.rotorWith3DEffects.cylinder.R.T[2,3]},{rotor1D.rotorWith3DEffects.cylinder.R.T[3,1],rotor1D.rotorWith3DEffects.cylinder.R.T[3,2],rotor1D.rotorWith3DEffects.cylinder.R.T[3,3]}},{rotor1D.rotorWith3DEffects.cylinder.r_shape[1],rotor1D.rotorWith3DEffects.cylinder.r_shape[2],rotor1D.rotorWith3DEffects.cylinder.r_shape[3]});
//   rotor1D.rotorWith3DEffects.cylinder.size[1] = rotor1D.rotorWith3DEffects.cylinder.length;
//   rotor1D.rotorWith3DEffects.cylinder.size[2] = rotor1D.rotorWith3DEffects.cylinder.width;
//   rotor1D.rotorWith3DEffects.cylinder.size[3] = rotor1D.rotorWith3DEffects.cylinder.height;
//   rotor1D.rotorWith3DEffects.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(rotor1D.rotorWith3DEffects.cylinder.color[1] / 255.0,rotor1D.rotorWith3DEffects.cylinder.color[2] / 255.0,rotor1D.rotorWith3DEffects.cylinder.color[3] / 255.0,rotor1D.rotorWith3DEffects.cylinder.specularCoefficient);
//   rotor1D.rotorWith3DEffects.cylinder.Extra = rotor1D.rotorWith3DEffects.cylinder.extra;
//   rotor1D.rotorWith3DEffects.phi = rotor1D.rotorWith3DEffects.flange_a.phi;
//   rotor1D.rotorWith3DEffects.phi = rotor1D.rotorWith3DEffects.flange_b.phi;
//   rotor1D.rotorWith3DEffects.w = der(rotor1D.rotorWith3DEffects.phi);
//   rotor1D.rotorWith3DEffects.a = der(rotor1D.rotorWith3DEffects.w);
//   rotor1D.rotorWith3DEffects.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(rotor1D.rotorWith3DEffects.frame_a.R);
//   rotor1D.rotorWith3DEffects.J * rotor1D.rotorWith3DEffects.a = rotor1D.rotorWith3DEffects.flange_a.tau + rotor1D.rotorWith3DEffects.flange_b.tau - (rotor1D.rotorWith3DEffects.nJ[1] * der(rotor1D.rotorWith3DEffects.w_a[1]) + (rotor1D.rotorWith3DEffects.nJ[2] * der(rotor1D.rotorWith3DEffects.w_a[2]) + rotor1D.rotorWith3DEffects.nJ[3] * der(rotor1D.rotorWith3DEffects.w_a[3])));
//   rotor1D.rotorWith3DEffects.frame_a.f[1] = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.f[2] = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.f[3] = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.t[1] = rotor1D.rotorWith3DEffects.w_a[2] * (rotor1D.rotorWith3DEffects.w * rotor1D.rotorWith3DEffects.nJ[3]) - rotor1D.rotorWith3DEffects.w_a[3] * (rotor1D.rotorWith3DEffects.w * rotor1D.rotorWith3DEffects.nJ[2]) - (rotor1D.rotorWith3DEffects.nJ[1] * der(rotor1D.rotorWith3DEffects.w_a[1]) + (rotor1D.rotorWith3DEffects.nJ[2] * der(rotor1D.rotorWith3DEffects.w_a[2]) + rotor1D.rotorWith3DEffects.nJ[3] * der(rotor1D.rotorWith3DEffects.w_a[3]))) * rotor1D.rotorWith3DEffects.e[1];
//   rotor1D.rotorWith3DEffects.frame_a.t[2] = rotor1D.rotorWith3DEffects.w_a[3] * (rotor1D.rotorWith3DEffects.w * rotor1D.rotorWith3DEffects.nJ[1]) - rotor1D.rotorWith3DEffects.w_a[1] * (rotor1D.rotorWith3DEffects.w * rotor1D.rotorWith3DEffects.nJ[3]) - (rotor1D.rotorWith3DEffects.nJ[1] * der(rotor1D.rotorWith3DEffects.w_a[1]) + (rotor1D.rotorWith3DEffects.nJ[2] * der(rotor1D.rotorWith3DEffects.w_a[2]) + rotor1D.rotorWith3DEffects.nJ[3] * der(rotor1D.rotorWith3DEffects.w_a[3]))) * rotor1D.rotorWith3DEffects.e[2];
//   rotor1D.rotorWith3DEffects.frame_a.t[3] = rotor1D.rotorWith3DEffects.w_a[1] * (rotor1D.rotorWith3DEffects.w * rotor1D.rotorWith3DEffects.nJ[2]) - rotor1D.rotorWith3DEffects.w_a[2] * (rotor1D.rotorWith3DEffects.w * rotor1D.rotorWith3DEffects.nJ[1]) - (rotor1D.rotorWith3DEffects.nJ[1] * der(rotor1D.rotorWith3DEffects.w_a[1]) + (rotor1D.rotorWith3DEffects.nJ[2] * der(rotor1D.rotorWith3DEffects.w_a[2]) + rotor1D.rotorWith3DEffects.nJ[3] * der(rotor1D.rotorWith3DEffects.w_a[3]))) * rotor1D.rotorWith3DEffects.e[3];
//   rotor1D.phi = rotor1D.flange_a.phi;
//   rotor1D.w = der(rotor1D.phi);
//   rotor1D.a = der(rotor1D.w);
//   torque1.flange.tau = -torque1.tau;
//   mounting1D.housing.frame_a.f[1] = 0.0;
//   mounting1D.housing.frame_a.f[2] = 0.0;
//   mounting1D.housing.frame_a.f[3] = 0.0;
//   mounting1D.housing.frame_a.t[1] = mounting1D.housing.t[1];
//   mounting1D.housing.frame_a.t[2] = mounting1D.housing.t[2];
//   mounting1D.housing.frame_a.t[3] = mounting1D.housing.t[3];
//   mounting1D.flange_b.phi = mounting1D.phi0;
//   r1.fixed.flange.phi = r1.fixed.phi0;
//   r1.internalAxis.flange.tau = r1.internalAxis.tau;
//   r1.internalAxis.flange.phi = r1.internalAxis.phi;
//   r1.cylinder.R.T[1,1] = r1.frame_a.R.T[1,1];
//   r1.cylinder.R.T[1,2] = r1.frame_a.R.T[1,2];
//   r1.cylinder.R.T[1,3] = r1.frame_a.R.T[1,3];
//   r1.cylinder.R.T[2,1] = r1.frame_a.R.T[2,1];
//   r1.cylinder.R.T[2,2] = r1.frame_a.R.T[2,2];
//   r1.cylinder.R.T[2,3] = r1.frame_a.R.T[2,3];
//   r1.cylinder.R.T[3,1] = r1.frame_a.R.T[3,1];
//   r1.cylinder.R.T[3,2] = r1.frame_a.R.T[3,2];
//   r1.cylinder.R.T[3,3] = r1.frame_a.R.T[3,3];
//   r1.cylinder.R.w[1] = r1.frame_a.R.w[1];
//   r1.cylinder.R.w[2] = r1.frame_a.R.w[2];
//   r1.cylinder.R.w[3] = r1.frame_a.R.w[3];
//   r1.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(r1.cylinder.shapeType);
//   r1.cylinder.rxvisobj[1] = r1.cylinder.R.T[1,1] * r1.cylinder.e_x[1] + (r1.cylinder.R.T[2,1] * r1.cylinder.e_x[2] + r1.cylinder.R.T[3,1] * r1.cylinder.e_x[3]);
//   r1.cylinder.rxvisobj[2] = r1.cylinder.R.T[1,2] * r1.cylinder.e_x[1] + (r1.cylinder.R.T[2,2] * r1.cylinder.e_x[2] + r1.cylinder.R.T[3,2] * r1.cylinder.e_x[3]);
//   r1.cylinder.rxvisobj[3] = r1.cylinder.R.T[1,3] * r1.cylinder.e_x[1] + (r1.cylinder.R.T[2,3] * r1.cylinder.e_x[2] + r1.cylinder.R.T[3,3] * r1.cylinder.e_x[3]);
//   r1.cylinder.ryvisobj[1] = r1.cylinder.R.T[1,1] * r1.cylinder.e_y[1] + (r1.cylinder.R.T[2,1] * r1.cylinder.e_y[2] + r1.cylinder.R.T[3,1] * r1.cylinder.e_y[3]);
//   r1.cylinder.ryvisobj[2] = r1.cylinder.R.T[1,2] * r1.cylinder.e_y[1] + (r1.cylinder.R.T[2,2] * r1.cylinder.e_y[2] + r1.cylinder.R.T[3,2] * r1.cylinder.e_y[3]);
//   r1.cylinder.ryvisobj[3] = r1.cylinder.R.T[1,3] * r1.cylinder.e_y[1] + (r1.cylinder.R.T[2,3] * r1.cylinder.e_y[2] + r1.cylinder.R.T[3,3] * r1.cylinder.e_y[3]);
//   r1.cylinder.rvisobj = r1.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{r1.cylinder.R.T[1,1],r1.cylinder.R.T[1,2],r1.cylinder.R.T[1,3]},{r1.cylinder.R.T[2,1],r1.cylinder.R.T[2,2],r1.cylinder.R.T[2,3]},{r1.cylinder.R.T[3,1],r1.cylinder.R.T[3,2],r1.cylinder.R.T[3,3]}},{r1.cylinder.r_shape[1],r1.cylinder.r_shape[2],r1.cylinder.r_shape[3]});
//   r1.cylinder.size[1] = r1.cylinder.length;
//   r1.cylinder.size[2] = r1.cylinder.width;
//   r1.cylinder.size[3] = r1.cylinder.height;
//   r1.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(r1.cylinder.color[1] / 255.0,r1.cylinder.color[2] / 255.0,r1.cylinder.color[3] / 255.0,r1.cylinder.specularCoefficient);
//   r1.cylinder.Extra = r1.cylinder.extra;
//   assert(true,\"Connector frame_a of revolute joint is not connected\");
//   assert(true,\"Connector frame_b of revolute joint is not connected\");
//   r1.angle = r1.phi;
//   r1.w = der(r1.phi);
//   r1.a = der(r1.w);
//   r1.frame_b.r_0[1] = r1.frame_a.r_0[1];
//   r1.frame_b.r_0[2] = r1.frame_a.r_0[2];
//   r1.frame_b.r_0[3] = r1.frame_a.r_0[3];
//   r1.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({r1.e[1],r1.e[2],r1.e[3]},r1.phi,r1.w);
//   r1.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(r1.frame_a.R,r1.R_rel);
//   r1.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(r1.R_rel,{r1.frame_b.f[1],r1.frame_b.f[2],r1.frame_b.f[3]});
//   r1.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(r1.R_rel,{r1.frame_b.t[1],r1.frame_b.t[2],r1.frame_b.t[3]});
//   r1.tau = (-r1.frame_b.t[1]) * r1.e[1] + ((-r1.frame_b.t[2]) * r1.e[2] + (-r1.frame_b.t[3]) * r1.e[3]);
//   r1.phi = r1.internalAxis.phi;
//   position1.phi = position1.flange.phi - position1.phi_support;
//   position1.w = der(position1.phi);
//   position1.a = der(position1.w);
//   position1.a = (((position1.phi_ref - position1.phi) * position1.w_crit - 1.3617 * position1.w) * position1.w_crit) / 0.618;
//   sine2.y = sine2.offset + (if time < sine2.startTime then 0.0 else sine2.amplitude * sin(6.28318530717959 * (sine2.freqHz * (time - sine2.startTime)) + sine2.phase));
//   mounting1D1.housing.frame_a.f[1] = 0.0;
//   mounting1D1.housing.frame_a.f[2] = 0.0;
//   mounting1D1.housing.frame_a.f[3] = 0.0;
//   mounting1D1.housing.frame_a.t[1] = mounting1D1.housing.t[1];
//   mounting1D1.housing.frame_a.t[2] = mounting1D1.housing.t[2];
//   mounting1D1.housing.frame_a.t[3] = mounting1D1.housing.t[3];
//   mounting1D1.flange_b.phi = mounting1D1.phi0;
//   r2.fixed.flange.phi = r2.fixed.phi0;
//   r2.internalAxis.flange.tau = r2.internalAxis.tau;
//   r2.internalAxis.flange.phi = r2.internalAxis.phi;
//   r2.cylinder.R.T[1,1] = r2.frame_a.R.T[1,1];
//   r2.cylinder.R.T[1,2] = r2.frame_a.R.T[1,2];
//   r2.cylinder.R.T[1,3] = r2.frame_a.R.T[1,3];
//   r2.cylinder.R.T[2,1] = r2.frame_a.R.T[2,1];
//   r2.cylinder.R.T[2,2] = r2.frame_a.R.T[2,2];
//   r2.cylinder.R.T[2,3] = r2.frame_a.R.T[2,3];
//   r2.cylinder.R.T[3,1] = r2.frame_a.R.T[3,1];
//   r2.cylinder.R.T[3,2] = r2.frame_a.R.T[3,2];
//   r2.cylinder.R.T[3,3] = r2.frame_a.R.T[3,3];
//   r2.cylinder.R.w[1] = r2.frame_a.R.w[1];
//   r2.cylinder.R.w[2] = r2.frame_a.R.w[2];
//   r2.cylinder.R.w[3] = r2.frame_a.R.w[3];
//   r2.cylinder.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(r2.cylinder.shapeType);
//   r2.cylinder.rxvisobj[1] = r2.cylinder.R.T[1,1] * r2.cylinder.e_x[1] + (r2.cylinder.R.T[2,1] * r2.cylinder.e_x[2] + r2.cylinder.R.T[3,1] * r2.cylinder.e_x[3]);
//   r2.cylinder.rxvisobj[2] = r2.cylinder.R.T[1,2] * r2.cylinder.e_x[1] + (r2.cylinder.R.T[2,2] * r2.cylinder.e_x[2] + r2.cylinder.R.T[3,2] * r2.cylinder.e_x[3]);
//   r2.cylinder.rxvisobj[3] = r2.cylinder.R.T[1,3] * r2.cylinder.e_x[1] + (r2.cylinder.R.T[2,3] * r2.cylinder.e_x[2] + r2.cylinder.R.T[3,3] * r2.cylinder.e_x[3]);
//   r2.cylinder.ryvisobj[1] = r2.cylinder.R.T[1,1] * r2.cylinder.e_y[1] + (r2.cylinder.R.T[2,1] * r2.cylinder.e_y[2] + r2.cylinder.R.T[3,1] * r2.cylinder.e_y[3]);
//   r2.cylinder.ryvisobj[2] = r2.cylinder.R.T[1,2] * r2.cylinder.e_y[1] + (r2.cylinder.R.T[2,2] * r2.cylinder.e_y[2] + r2.cylinder.R.T[3,2] * r2.cylinder.e_y[3]);
//   r2.cylinder.ryvisobj[3] = r2.cylinder.R.T[1,3] * r2.cylinder.e_y[1] + (r2.cylinder.R.T[2,3] * r2.cylinder.e_y[2] + r2.cylinder.R.T[3,3] * r2.cylinder.e_y[3]);
//   r2.cylinder.rvisobj = r2.cylinder.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{r2.cylinder.R.T[1,1],r2.cylinder.R.T[1,2],r2.cylinder.R.T[1,3]},{r2.cylinder.R.T[2,1],r2.cylinder.R.T[2,2],r2.cylinder.R.T[2,3]},{r2.cylinder.R.T[3,1],r2.cylinder.R.T[3,2],r2.cylinder.R.T[3,3]}},{r2.cylinder.r_shape[1],r2.cylinder.r_shape[2],r2.cylinder.r_shape[3]});
//   r2.cylinder.size[1] = r2.cylinder.length;
//   r2.cylinder.size[2] = r2.cylinder.width;
//   r2.cylinder.size[3] = r2.cylinder.height;
//   r2.cylinder.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(r2.cylinder.color[1] / 255.0,r2.cylinder.color[2] / 255.0,r2.cylinder.color[3] / 255.0,r2.cylinder.specularCoefficient);
//   r2.cylinder.Extra = r2.cylinder.extra;
//   assert(true,\"Connector frame_a of revolute joint is not connected\");
//   assert(true,\"Connector frame_b of revolute joint is not connected\");
//   r2.angle = r2.phi;
//   r2.w = der(r2.phi);
//   r2.a = der(r2.w);
//   r2.frame_b.r_0[1] = r2.frame_a.r_0[1];
//   r2.frame_b.r_0[2] = r2.frame_a.r_0[2];
//   r2.frame_b.r_0[3] = r2.frame_a.r_0[3];
//   r2.R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation({r2.e[1],r2.e[2],r2.e[3]},r2.phi,r2.w);
//   r2.frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(r2.frame_a.R,r2.R_rel);
//   r2.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(r2.R_rel,{r2.frame_b.f[1],r2.frame_b.f[2],r2.frame_b.f[3]});
//   r2.frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(r2.R_rel,{r2.frame_b.t[1],r2.frame_b.t[2],r2.frame_b.t[3]});
//   r2.tau = (-r2.frame_b.t[1]) * r2.e[1] + ((-r2.frame_b.t[2]) * r2.e[2] + (-r2.frame_b.t[3]) * r2.e[3]);
//   r2.phi = r2.internalAxis.phi;
//   position2.phi = position2.flange.phi - position2.phi_support;
//   position2.w = der(position2.phi);
//   position2.a = der(position2.w);
//   position2.a = (((position2.phi_ref - position2.phi) * position2.w_crit - 1.3617 * position2.w) * position2.w_crit) / 0.618;
//   mounting1D2.housing.frame_a.f[1] = 0.0;
//   mounting1D2.housing.frame_a.f[2] = 0.0;
//   mounting1D2.housing.frame_a.f[3] = 0.0;
//   mounting1D2.housing.frame_a.t[1] = mounting1D2.housing.t[1];
//   mounting1D2.housing.frame_a.t[2] = mounting1D2.housing.t[2];
//   mounting1D2.housing.frame_a.t[3] = mounting1D2.housing.t[3];
//   mounting1D2.flange_b.phi = mounting1D2.phi0;
//   fixed.shape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(fixed.shape.shapeType);
//   fixed.shape.rxvisobj[1] = fixed.shape.R.T[1,1] * fixed.shape.e_x[1] + (fixed.shape.R.T[2,1] * fixed.shape.e_x[2] + fixed.shape.R.T[3,1] * fixed.shape.e_x[3]);
//   fixed.shape.rxvisobj[2] = fixed.shape.R.T[1,2] * fixed.shape.e_x[1] + (fixed.shape.R.T[2,2] * fixed.shape.e_x[2] + fixed.shape.R.T[3,2] * fixed.shape.e_x[3]);
//   fixed.shape.rxvisobj[3] = fixed.shape.R.T[1,3] * fixed.shape.e_x[1] + (fixed.shape.R.T[2,3] * fixed.shape.e_x[2] + fixed.shape.R.T[3,3] * fixed.shape.e_x[3]);
//   fixed.shape.ryvisobj[1] = fixed.shape.R.T[1,1] * fixed.shape.e_y[1] + (fixed.shape.R.T[2,1] * fixed.shape.e_y[2] + fixed.shape.R.T[3,1] * fixed.shape.e_y[3]);
//   fixed.shape.ryvisobj[2] = fixed.shape.R.T[1,2] * fixed.shape.e_y[1] + (fixed.shape.R.T[2,2] * fixed.shape.e_y[2] + fixed.shape.R.T[3,2] * fixed.shape.e_y[3]);
//   fixed.shape.ryvisobj[3] = fixed.shape.R.T[1,3] * fixed.shape.e_y[1] + (fixed.shape.R.T[2,3] * fixed.shape.e_y[2] + fixed.shape.R.T[3,3] * fixed.shape.e_y[3]);
//   fixed.shape.rvisobj = fixed.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{fixed.shape.R.T[1,1],fixed.shape.R.T[1,2],fixed.shape.R.T[1,3]},{fixed.shape.R.T[2,1],fixed.shape.R.T[2,2],fixed.shape.R.T[2,3]},{fixed.shape.R.T[3,1],fixed.shape.R.T[3,2],fixed.shape.R.T[3,3]}},{fixed.shape.r_shape[1],fixed.shape.r_shape[2],fixed.shape.r_shape[3]});
//   fixed.shape.size[1] = fixed.shape.length;
//   fixed.shape.size[2] = fixed.shape.width;
//   fixed.shape.size[3] = fixed.shape.height;
//   fixed.shape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(fixed.shape.color[1] / 255.0,fixed.shape.color[2] / 255.0,fixed.shape.color[3] / 255.0,fixed.shape.specularCoefficient);
//   fixed.shape.Extra = fixed.shape.extra;
//   fixed.frame_b.r_0[1] = fixed.r[1];
//   fixed.frame_b.r_0[2] = fixed.r[2];
//   fixed.frame_b.r_0[3] = fixed.r[3];
//   fixed.frame_b.R.w[3] = 0.0;
//   fixed.frame_b.R.w[2] = 0.0;
//   fixed.frame_b.R.w[1] = 0.0;
//   fixed.frame_b.R.T[3,3] = 1.0;
//   fixed.frame_b.R.T[3,2] = 0.0;
//   fixed.frame_b.R.T[3,1] = 0.0;
//   fixed.frame_b.R.T[2,3] = 0.0;
//   fixed.frame_b.R.T[2,2] = 1.0;
//   fixed.frame_b.R.T[2,1] = 0.0;
//   fixed.frame_b.R.T[1,3] = 0.0;
//   fixed.frame_b.R.T[1,2] = 0.0;
//   fixed.frame_b.R.T[1,1] = 1.0;
//   sine1[1].y = torque.torque[1];
//   sine1[1].y = torque1.tau;
//   r2.frame_b.t[1] + (rotor1D.frame_a.t[1] + mounting1D.frame_a.t[1]) = 0.0;
//   r2.frame_b.t[2] + (rotor1D.frame_a.t[2] + mounting1D.frame_a.t[2]) = 0.0;
//   r2.frame_b.t[3] + (rotor1D.frame_a.t[3] + mounting1D.frame_a.t[3]) = 0.0;
//   r2.frame_b.f[1] + (rotor1D.frame_a.f[1] + mounting1D.frame_a.f[1]) = 0.0;
//   r2.frame_b.f[2] + (rotor1D.frame_a.f[2] + mounting1D.frame_a.f[2]) = 0.0;
//   r2.frame_b.f[3] + (rotor1D.frame_a.f[3] + mounting1D.frame_a.f[3]) = 0.0;
//   mounting1D.frame_a.R.w[1] = r2.frame_b.R.w[1];
//   mounting1D.frame_a.R.w[1] = rotor1D.frame_a.R.w[1];
//   mounting1D.frame_a.R.w[2] = r2.frame_b.R.w[2];
//   mounting1D.frame_a.R.w[2] = rotor1D.frame_a.R.w[2];
//   mounting1D.frame_a.R.w[3] = r2.frame_b.R.w[3];
//   mounting1D.frame_a.R.w[3] = rotor1D.frame_a.R.w[3];
//   mounting1D.frame_a.R.T[1,1] = r2.frame_b.R.T[1,1];
//   mounting1D.frame_a.R.T[1,1] = rotor1D.frame_a.R.T[1,1];
//   mounting1D.frame_a.R.T[1,2] = r2.frame_b.R.T[1,2];
//   mounting1D.frame_a.R.T[1,2] = rotor1D.frame_a.R.T[1,2];
//   mounting1D.frame_a.R.T[1,3] = r2.frame_b.R.T[1,3];
//   mounting1D.frame_a.R.T[1,3] = rotor1D.frame_a.R.T[1,3];
//   mounting1D.frame_a.R.T[2,1] = r2.frame_b.R.T[2,1];
//   mounting1D.frame_a.R.T[2,1] = rotor1D.frame_a.R.T[2,1];
//   mounting1D.frame_a.R.T[2,2] = r2.frame_b.R.T[2,2];
//   mounting1D.frame_a.R.T[2,2] = rotor1D.frame_a.R.T[2,2];
//   mounting1D.frame_a.R.T[2,3] = r2.frame_b.R.T[2,3];
//   mounting1D.frame_a.R.T[2,3] = rotor1D.frame_a.R.T[2,3];
//   mounting1D.frame_a.R.T[3,1] = r2.frame_b.R.T[3,1];
//   mounting1D.frame_a.R.T[3,1] = rotor1D.frame_a.R.T[3,1];
//   mounting1D.frame_a.R.T[3,2] = r2.frame_b.R.T[3,2];
//   mounting1D.frame_a.R.T[3,2] = rotor1D.frame_a.R.T[3,2];
//   mounting1D.frame_a.R.T[3,3] = r2.frame_b.R.T[3,3];
//   mounting1D.frame_a.R.T[3,3] = rotor1D.frame_a.R.T[3,3];
//   mounting1D.frame_a.r_0[1] = r2.frame_b.r_0[1];
//   mounting1D.frame_a.r_0[1] = rotor1D.frame_a.r_0[1];
//   mounting1D.frame_a.r_0[2] = r2.frame_b.r_0[2];
//   mounting1D.frame_a.r_0[2] = rotor1D.frame_a.r_0[2];
//   mounting1D.frame_a.r_0[3] = r2.frame_b.r_0[3];
//   mounting1D.frame_a.r_0[3] = rotor1D.frame_a.r_0[3];
//   position1.phi_ref = position2.phi_ref;
//   position1.phi_ref = sine2.y;
//   fixed.frame_b.t[1] + (r2.frame_a.t[1] + mounting1D2.frame_a.t[1]) = 0.0;
//   fixed.frame_b.t[2] + (r2.frame_a.t[2] + mounting1D2.frame_a.t[2]) = 0.0;
//   fixed.frame_b.t[3] + (r2.frame_a.t[3] + mounting1D2.frame_a.t[3]) = 0.0;
//   fixed.frame_b.f[1] + (r2.frame_a.f[1] + mounting1D2.frame_a.f[1]) = 0.0;
//   fixed.frame_b.f[2] + (r2.frame_a.f[2] + mounting1D2.frame_a.f[2]) = 0.0;
//   fixed.frame_b.f[3] + (r2.frame_a.f[3] + mounting1D2.frame_a.f[3]) = 0.0;
//   fixed.frame_b.R.w[1] = mounting1D2.frame_a.R.w[1];
//   fixed.frame_b.R.w[1] = r2.frame_a.R.w[1];
//   fixed.frame_b.R.w[2] = mounting1D2.frame_a.R.w[2];
//   fixed.frame_b.R.w[2] = r2.frame_a.R.w[2];
//   fixed.frame_b.R.w[3] = mounting1D2.frame_a.R.w[3];
//   fixed.frame_b.R.w[3] = r2.frame_a.R.w[3];
//   fixed.frame_b.R.T[1,1] = mounting1D2.frame_a.R.T[1,1];
//   fixed.frame_b.R.T[1,1] = r2.frame_a.R.T[1,1];
//   fixed.frame_b.R.T[1,2] = mounting1D2.frame_a.R.T[1,2];
//   fixed.frame_b.R.T[1,2] = r2.frame_a.R.T[1,2];
//   fixed.frame_b.R.T[1,3] = mounting1D2.frame_a.R.T[1,3];
//   fixed.frame_b.R.T[1,3] = r2.frame_a.R.T[1,3];
//   fixed.frame_b.R.T[2,1] = mounting1D2.frame_a.R.T[2,1];
//   fixed.frame_b.R.T[2,1] = r2.frame_a.R.T[2,1];
//   fixed.frame_b.R.T[2,2] = mounting1D2.frame_a.R.T[2,2];
//   fixed.frame_b.R.T[2,2] = r2.frame_a.R.T[2,2];
//   fixed.frame_b.R.T[2,3] = mounting1D2.frame_a.R.T[2,3];
//   fixed.frame_b.R.T[2,3] = r2.frame_a.R.T[2,3];
//   fixed.frame_b.R.T[3,1] = mounting1D2.frame_a.R.T[3,1];
//   fixed.frame_b.R.T[3,1] = r2.frame_a.R.T[3,1];
//   fixed.frame_b.R.T[3,2] = mounting1D2.frame_a.R.T[3,2];
//   fixed.frame_b.R.T[3,2] = r2.frame_a.R.T[3,2];
//   fixed.frame_b.R.T[3,3] = mounting1D2.frame_a.R.T[3,3];
//   fixed.frame_b.R.T[3,3] = r2.frame_a.R.T[3,3];
//   fixed.frame_b.r_0[1] = mounting1D2.frame_a.r_0[1];
//   fixed.frame_b.r_0[1] = r2.frame_a.r_0[1];
//   fixed.frame_b.r_0[2] = mounting1D2.frame_a.r_0[2];
//   fixed.frame_b.r_0[2] = r2.frame_a.r_0[2];
//   fixed.frame_b.r_0[3] = mounting1D2.frame_a.r_0[3];
//   fixed.frame_b.r_0[3] = r2.frame_a.r_0[3];
//   position2.support.tau + mounting1D2.flange_b.tau = 0.0;
//   mounting1D2.flange_b.phi = position2.support.phi;
//   position2.flange.tau + r2.axis.tau = 0.0;
//   position2.flange.phi = r2.axis.phi;
//   torque.frame_a.t[1] + (r1.frame_b.t[1] + revolute.frame_a.t[1]) = 0.0;
//   torque.frame_a.t[2] + (r1.frame_b.t[2] + revolute.frame_a.t[2]) = 0.0;
//   torque.frame_a.t[3] + (r1.frame_b.t[3] + revolute.frame_a.t[3]) = 0.0;
//   torque.frame_a.f[1] + (r1.frame_b.f[1] + revolute.frame_a.f[1]) = 0.0;
//   torque.frame_a.f[2] + (r1.frame_b.f[2] + revolute.frame_a.f[2]) = 0.0;
//   torque.frame_a.f[3] + (r1.frame_b.f[3] + revolute.frame_a.f[3]) = 0.0;
//   r1.frame_b.R.w[1] = revolute.frame_a.R.w[1];
//   r1.frame_b.R.w[1] = torque.frame_a.R.w[1];
//   r1.frame_b.R.w[2] = revolute.frame_a.R.w[2];
//   r1.frame_b.R.w[2] = torque.frame_a.R.w[2];
//   r1.frame_b.R.w[3] = revolute.frame_a.R.w[3];
//   r1.frame_b.R.w[3] = torque.frame_a.R.w[3];
//   r1.frame_b.R.T[1,1] = revolute.frame_a.R.T[1,1];
//   r1.frame_b.R.T[1,1] = torque.frame_a.R.T[1,1];
//   r1.frame_b.R.T[1,2] = revolute.frame_a.R.T[1,2];
//   r1.frame_b.R.T[1,2] = torque.frame_a.R.T[1,2];
//   r1.frame_b.R.T[1,3] = revolute.frame_a.R.T[1,3];
//   r1.frame_b.R.T[1,3] = torque.frame_a.R.T[1,3];
//   r1.frame_b.R.T[2,1] = revolute.frame_a.R.T[2,1];
//   r1.frame_b.R.T[2,1] = torque.frame_a.R.T[2,1];
//   r1.frame_b.R.T[2,2] = revolute.frame_a.R.T[2,2];
//   r1.frame_b.R.T[2,2] = torque.frame_a.R.T[2,2];
//   r1.frame_b.R.T[2,3] = revolute.frame_a.R.T[2,3];
//   r1.frame_b.R.T[2,3] = torque.frame_a.R.T[2,3];
//   r1.frame_b.R.T[3,1] = revolute.frame_a.R.T[3,1];
//   r1.frame_b.R.T[3,1] = torque.frame_a.R.T[3,1];
//   r1.frame_b.R.T[3,2] = revolute.frame_a.R.T[3,2];
//   r1.frame_b.R.T[3,2] = torque.frame_a.R.T[3,2];
//   r1.frame_b.R.T[3,3] = revolute.frame_a.R.T[3,3];
//   r1.frame_b.R.T[3,3] = torque.frame_a.R.T[3,3];
//   r1.frame_b.r_0[1] = revolute.frame_a.r_0[1];
//   r1.frame_b.r_0[1] = torque.frame_a.r_0[1];
//   r1.frame_b.r_0[2] = revolute.frame_a.r_0[2];
//   r1.frame_b.r_0[2] = torque.frame_a.r_0[2];
//   r1.frame_b.r_0[3] = revolute.frame_a.r_0[3];
//   r1.frame_b.r_0[3] = torque.frame_a.r_0[3];
//   mounting1D1.frame_a.t[1] + (r1.frame_a.t[1] + world.frame_b.t[1]) = 0.0;
//   mounting1D1.frame_a.t[2] + (r1.frame_a.t[2] + world.frame_b.t[2]) = 0.0;
//   mounting1D1.frame_a.t[3] + (r1.frame_a.t[3] + world.frame_b.t[3]) = 0.0;
//   mounting1D1.frame_a.f[1] + (r1.frame_a.f[1] + world.frame_b.f[1]) = 0.0;
//   mounting1D1.frame_a.f[2] + (r1.frame_a.f[2] + world.frame_b.f[2]) = 0.0;
//   mounting1D1.frame_a.f[3] + (r1.frame_a.f[3] + world.frame_b.f[3]) = 0.0;
//   mounting1D1.frame_a.R.w[1] = r1.frame_a.R.w[1];
//   mounting1D1.frame_a.R.w[1] = world.frame_b.R.w[1];
//   mounting1D1.frame_a.R.w[2] = r1.frame_a.R.w[2];
//   mounting1D1.frame_a.R.w[2] = world.frame_b.R.w[2];
//   mounting1D1.frame_a.R.w[3] = r1.frame_a.R.w[3];
//   mounting1D1.frame_a.R.w[3] = world.frame_b.R.w[3];
//   mounting1D1.frame_a.R.T[1,1] = r1.frame_a.R.T[1,1];
//   mounting1D1.frame_a.R.T[1,1] = world.frame_b.R.T[1,1];
//   mounting1D1.frame_a.R.T[1,2] = r1.frame_a.R.T[1,2];
//   mounting1D1.frame_a.R.T[1,2] = world.frame_b.R.T[1,2];
//   mounting1D1.frame_a.R.T[1,3] = r1.frame_a.R.T[1,3];
//   mounting1D1.frame_a.R.T[1,3] = world.frame_b.R.T[1,3];
//   mounting1D1.frame_a.R.T[2,1] = r1.frame_a.R.T[2,1];
//   mounting1D1.frame_a.R.T[2,1] = world.frame_b.R.T[2,1];
//   mounting1D1.frame_a.R.T[2,2] = r1.frame_a.R.T[2,2];
//   mounting1D1.frame_a.R.T[2,2] = world.frame_b.R.T[2,2];
//   mounting1D1.frame_a.R.T[2,3] = r1.frame_a.R.T[2,3];
//   mounting1D1.frame_a.R.T[2,3] = world.frame_b.R.T[2,3];
//   mounting1D1.frame_a.R.T[3,1] = r1.frame_a.R.T[3,1];
//   mounting1D1.frame_a.R.T[3,1] = world.frame_b.R.T[3,1];
//   mounting1D1.frame_a.R.T[3,2] = r1.frame_a.R.T[3,2];
//   mounting1D1.frame_a.R.T[3,2] = world.frame_b.R.T[3,2];
//   mounting1D1.frame_a.R.T[3,3] = r1.frame_a.R.T[3,3];
//   mounting1D1.frame_a.R.T[3,3] = world.frame_b.R.T[3,3];
//   mounting1D1.frame_a.r_0[1] = r1.frame_a.r_0[1];
//   mounting1D1.frame_a.r_0[1] = world.frame_b.r_0[1];
//   mounting1D1.frame_a.r_0[2] = r1.frame_a.r_0[2];
//   mounting1D1.frame_a.r_0[2] = world.frame_b.r_0[2];
//   mounting1D1.frame_a.r_0[3] = r1.frame_a.r_0[3];
//   mounting1D1.frame_a.r_0[3] = world.frame_b.r_0[3];
//   position1.support.tau + mounting1D1.flange_b.tau = 0.0;
//   mounting1D1.flange_b.phi = position1.support.phi;
//   position1.flange.tau + r1.axis.tau = 0.0;
//   position1.flange.phi = r1.axis.phi;
//   mounting1D.flange_b.tau + torque1.support.tau = 0.0;
//   mounting1D.flange_b.phi = torque1.support.phi;
//   torque1.flange.tau + rotor1D.flange_a.tau = 0.0;
//   rotor1D.flange_a.phi = torque1.flange.phi;
//   sine1[2].y = torque.torque[2];
//   sine1[3].y = torque.torque[3];
//   torque.frame_b.t[1] + bodyCylinder.frame_b.t[1] = 0.0;
//   torque.frame_b.t[2] + bodyCylinder.frame_b.t[2] = 0.0;
//   torque.frame_b.t[3] + bodyCylinder.frame_b.t[3] = 0.0;
//   torque.frame_b.f[1] + bodyCylinder.frame_b.f[1] = 0.0;
//   torque.frame_b.f[2] + bodyCylinder.frame_b.f[2] = 0.0;
//   torque.frame_b.f[3] + bodyCylinder.frame_b.f[3] = 0.0;
//   bodyCylinder.frame_b.R.w[1] = torque.frame_b.R.w[1];
//   bodyCylinder.frame_b.R.w[2] = torque.frame_b.R.w[2];
//   bodyCylinder.frame_b.R.w[3] = torque.frame_b.R.w[3];
//   bodyCylinder.frame_b.R.T[1,1] = torque.frame_b.R.T[1,1];
//   bodyCylinder.frame_b.R.T[1,2] = torque.frame_b.R.T[1,2];
//   bodyCylinder.frame_b.R.T[1,3] = torque.frame_b.R.T[1,3];
//   bodyCylinder.frame_b.R.T[2,1] = torque.frame_b.R.T[2,1];
//   bodyCylinder.frame_b.R.T[2,2] = torque.frame_b.R.T[2,2];
//   bodyCylinder.frame_b.R.T[2,3] = torque.frame_b.R.T[2,3];
//   bodyCylinder.frame_b.R.T[3,1] = torque.frame_b.R.T[3,1];
//   bodyCylinder.frame_b.R.T[3,2] = torque.frame_b.R.T[3,2];
//   bodyCylinder.frame_b.R.T[3,3] = torque.frame_b.R.T[3,3];
//   bodyCylinder.frame_b.r_0[1] = torque.frame_b.r_0[1];
//   bodyCylinder.frame_b.r_0[2] = torque.frame_b.r_0[2];
//   bodyCylinder.frame_b.r_0[3] = torque.frame_b.r_0[3];
//   revolute.frame_b.t[1] + bodyCylinder.frame_a.t[1] = 0.0;
//   revolute.frame_b.t[2] + bodyCylinder.frame_a.t[2] = 0.0;
//   revolute.frame_b.t[3] + bodyCylinder.frame_a.t[3] = 0.0;
//   revolute.frame_b.f[1] + bodyCylinder.frame_a.f[1] = 0.0;
//   revolute.frame_b.f[2] + bodyCylinder.frame_a.f[2] = 0.0;
//   revolute.frame_b.f[3] + bodyCylinder.frame_a.f[3] = 0.0;
//   bodyCylinder.frame_a.R.w[1] = revolute.frame_b.R.w[1];
//   bodyCylinder.frame_a.R.w[2] = revolute.frame_b.R.w[2];
//   bodyCylinder.frame_a.R.w[3] = revolute.frame_b.R.w[3];
//   bodyCylinder.frame_a.R.T[1,1] = revolute.frame_b.R.T[1,1];
//   bodyCylinder.frame_a.R.T[1,2] = revolute.frame_b.R.T[1,2];
//   bodyCylinder.frame_a.R.T[1,3] = revolute.frame_b.R.T[1,3];
//   bodyCylinder.frame_a.R.T[2,1] = revolute.frame_b.R.T[2,1];
//   bodyCylinder.frame_a.R.T[2,2] = revolute.frame_b.R.T[2,2];
//   bodyCylinder.frame_a.R.T[2,3] = revolute.frame_b.R.T[2,3];
//   bodyCylinder.frame_a.R.T[3,1] = revolute.frame_b.R.T[3,1];
//   bodyCylinder.frame_a.R.T[3,2] = revolute.frame_b.R.T[3,2];
//   bodyCylinder.frame_a.R.T[3,3] = revolute.frame_b.R.T[3,3];
//   bodyCylinder.frame_a.r_0[1] = revolute.frame_b.r_0[1];
//   bodyCylinder.frame_a.r_0[2] = revolute.frame_b.r_0[2];
//   bodyCylinder.frame_a.r_0[3] = revolute.frame_b.r_0[3];
//   mounting1D2.housing.frame_a.t[1] + (-mounting1D2.frame_a.t[1]) = 0.0;
//   mounting1D2.housing.frame_a.t[2] + (-mounting1D2.frame_a.t[2]) = 0.0;
//   mounting1D2.housing.frame_a.t[3] + (-mounting1D2.frame_a.t[3]) = 0.0;
//   mounting1D2.housing.frame_a.f[1] + (-mounting1D2.frame_a.f[1]) = 0.0;
//   mounting1D2.housing.frame_a.f[2] + (-mounting1D2.frame_a.f[2]) = 0.0;
//   mounting1D2.housing.frame_a.f[3] + (-mounting1D2.frame_a.f[3]) = 0.0;
//   mounting1D2.frame_a.R.w[1] = mounting1D2.housing.frame_a.R.w[1];
//   mounting1D2.frame_a.R.w[2] = mounting1D2.housing.frame_a.R.w[2];
//   mounting1D2.frame_a.R.w[3] = mounting1D2.housing.frame_a.R.w[3];
//   mounting1D2.frame_a.R.T[1,1] = mounting1D2.housing.frame_a.R.T[1,1];
//   mounting1D2.frame_a.R.T[1,2] = mounting1D2.housing.frame_a.R.T[1,2];
//   mounting1D2.frame_a.R.T[1,3] = mounting1D2.housing.frame_a.R.T[1,3];
//   mounting1D2.frame_a.R.T[2,1] = mounting1D2.housing.frame_a.R.T[2,1];
//   mounting1D2.frame_a.R.T[2,2] = mounting1D2.housing.frame_a.R.T[2,2];
//   mounting1D2.frame_a.R.T[2,3] = mounting1D2.housing.frame_a.R.T[2,3];
//   mounting1D2.frame_a.R.T[3,1] = mounting1D2.housing.frame_a.R.T[3,1];
//   mounting1D2.frame_a.R.T[3,2] = mounting1D2.housing.frame_a.R.T[3,2];
//   mounting1D2.frame_a.R.T[3,3] = mounting1D2.housing.frame_a.R.T[3,3];
//   mounting1D2.frame_a.r_0[1] = mounting1D2.housing.frame_a.r_0[1];
//   mounting1D2.frame_a.r_0[2] = mounting1D2.housing.frame_a.r_0[2];
//   mounting1D2.frame_a.r_0[3] = mounting1D2.housing.frame_a.r_0[3];
//   r2.internalAxis.flange.tau + (-r2.axis.tau) = 0.0;
//   r2.axis.phi = r2.internalAxis.flange.phi;
//   r2.fixed.flange.tau + (-r2.support.tau) = 0.0;
//   r2.fixed.flange.phi = r2.support.phi;
//   r2.support.tau = 0.0;
//   mounting1D1.housing.frame_a.t[1] + (-mounting1D1.frame_a.t[1]) = 0.0;
//   mounting1D1.housing.frame_a.t[2] + (-mounting1D1.frame_a.t[2]) = 0.0;
//   mounting1D1.housing.frame_a.t[3] + (-mounting1D1.frame_a.t[3]) = 0.0;
//   mounting1D1.housing.frame_a.f[1] + (-mounting1D1.frame_a.f[1]) = 0.0;
//   mounting1D1.housing.frame_a.f[2] + (-mounting1D1.frame_a.f[2]) = 0.0;
//   mounting1D1.housing.frame_a.f[3] + (-mounting1D1.frame_a.f[3]) = 0.0;
//   mounting1D1.frame_a.R.w[1] = mounting1D1.housing.frame_a.R.w[1];
//   mounting1D1.frame_a.R.w[2] = mounting1D1.housing.frame_a.R.w[2];
//   mounting1D1.frame_a.R.w[3] = mounting1D1.housing.frame_a.R.w[3];
//   mounting1D1.frame_a.R.T[1,1] = mounting1D1.housing.frame_a.R.T[1,1];
//   mounting1D1.frame_a.R.T[1,2] = mounting1D1.housing.frame_a.R.T[1,2];
//   mounting1D1.frame_a.R.T[1,3] = mounting1D1.housing.frame_a.R.T[1,3];
//   mounting1D1.frame_a.R.T[2,1] = mounting1D1.housing.frame_a.R.T[2,1];
//   mounting1D1.frame_a.R.T[2,2] = mounting1D1.housing.frame_a.R.T[2,2];
//   mounting1D1.frame_a.R.T[2,3] = mounting1D1.housing.frame_a.R.T[2,3];
//   mounting1D1.frame_a.R.T[3,1] = mounting1D1.housing.frame_a.R.T[3,1];
//   mounting1D1.frame_a.R.T[3,2] = mounting1D1.housing.frame_a.R.T[3,2];
//   mounting1D1.frame_a.R.T[3,3] = mounting1D1.housing.frame_a.R.T[3,3];
//   mounting1D1.frame_a.r_0[1] = mounting1D1.housing.frame_a.r_0[1];
//   mounting1D1.frame_a.r_0[2] = mounting1D1.housing.frame_a.r_0[2];
//   mounting1D1.frame_a.r_0[3] = mounting1D1.housing.frame_a.r_0[3];
//   r1.internalAxis.flange.tau + (-r1.axis.tau) = 0.0;
//   r1.axis.phi = r1.internalAxis.flange.phi;
//   r1.fixed.flange.tau + (-r1.support.tau) = 0.0;
//   r1.fixed.flange.phi = r1.support.phi;
//   r1.support.tau = 0.0;
//   mounting1D.housing.frame_a.t[1] + (-mounting1D.frame_a.t[1]) = 0.0;
//   mounting1D.housing.frame_a.t[2] + (-mounting1D.frame_a.t[2]) = 0.0;
//   mounting1D.housing.frame_a.t[3] + (-mounting1D.frame_a.t[3]) = 0.0;
//   mounting1D.housing.frame_a.f[1] + (-mounting1D.frame_a.f[1]) = 0.0;
//   mounting1D.housing.frame_a.f[2] + (-mounting1D.frame_a.f[2]) = 0.0;
//   mounting1D.housing.frame_a.f[3] + (-mounting1D.frame_a.f[3]) = 0.0;
//   mounting1D.frame_a.R.w[1] = mounting1D.housing.frame_a.R.w[1];
//   mounting1D.frame_a.R.w[2] = mounting1D.housing.frame_a.R.w[2];
//   mounting1D.frame_a.R.w[3] = mounting1D.housing.frame_a.R.w[3];
//   mounting1D.frame_a.R.T[1,1] = mounting1D.housing.frame_a.R.T[1,1];
//   mounting1D.frame_a.R.T[1,2] = mounting1D.housing.frame_a.R.T[1,2];
//   mounting1D.frame_a.R.T[1,3] = mounting1D.housing.frame_a.R.T[1,3];
//   mounting1D.frame_a.R.T[2,1] = mounting1D.housing.frame_a.R.T[2,1];
//   mounting1D.frame_a.R.T[2,2] = mounting1D.housing.frame_a.R.T[2,2];
//   mounting1D.frame_a.R.T[2,3] = mounting1D.housing.frame_a.R.T[2,3];
//   mounting1D.frame_a.R.T[3,1] = mounting1D.housing.frame_a.R.T[3,1];
//   mounting1D.frame_a.R.T[3,2] = mounting1D.housing.frame_a.R.T[3,2];
//   mounting1D.frame_a.R.T[3,3] = mounting1D.housing.frame_a.R.T[3,3];
//   mounting1D.frame_a.r_0[1] = mounting1D.housing.frame_a.r_0[1];
//   mounting1D.frame_a.r_0[2] = mounting1D.housing.frame_a.r_0[2];
//   mounting1D.frame_a.r_0[3] = mounting1D.housing.frame_a.r_0[3];
//   rotor1D.rotorWith3DEffects.frame_a.t[1] + (-rotor1D.frame_a.t[1]) = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.t[2] + (-rotor1D.frame_a.t[2]) = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.t[3] + (-rotor1D.frame_a.t[3]) = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.f[1] + (-rotor1D.frame_a.f[1]) = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.f[2] + (-rotor1D.frame_a.f[2]) = 0.0;
//   rotor1D.rotorWith3DEffects.frame_a.f[3] + (-rotor1D.frame_a.f[3]) = 0.0;
//   rotor1D.frame_a.R.w[1] = rotor1D.rotorWith3DEffects.frame_a.R.w[1];
//   rotor1D.frame_a.R.w[2] = rotor1D.rotorWith3DEffects.frame_a.R.w[2];
//   rotor1D.frame_a.R.w[3] = rotor1D.rotorWith3DEffects.frame_a.R.w[3];
//   rotor1D.frame_a.R.T[1,1] = rotor1D.rotorWith3DEffects.frame_a.R.T[1,1];
//   rotor1D.frame_a.R.T[1,2] = rotor1D.rotorWith3DEffects.frame_a.R.T[1,2];
//   rotor1D.frame_a.R.T[1,3] = rotor1D.rotorWith3DEffects.frame_a.R.T[1,3];
//   rotor1D.frame_a.R.T[2,1] = rotor1D.rotorWith3DEffects.frame_a.R.T[2,1];
//   rotor1D.frame_a.R.T[2,2] = rotor1D.rotorWith3DEffects.frame_a.R.T[2,2];
//   rotor1D.frame_a.R.T[2,3] = rotor1D.rotorWith3DEffects.frame_a.R.T[2,3];
//   rotor1D.frame_a.R.T[3,1] = rotor1D.rotorWith3DEffects.frame_a.R.T[3,1];
//   rotor1D.frame_a.R.T[3,2] = rotor1D.rotorWith3DEffects.frame_a.R.T[3,2];
//   rotor1D.frame_a.R.T[3,3] = rotor1D.rotorWith3DEffects.frame_a.R.T[3,3];
//   rotor1D.frame_a.r_0[1] = rotor1D.rotorWith3DEffects.frame_a.r_0[1];
//   rotor1D.frame_a.r_0[2] = rotor1D.rotorWith3DEffects.frame_a.r_0[2];
//   rotor1D.frame_a.r_0[3] = rotor1D.rotorWith3DEffects.frame_a.r_0[3];
//   rotor1D.rotorWith3DEffects.flange_a.tau + (-rotor1D.flange_a.tau) = 0.0;
//   rotor1D.flange_a.phi = rotor1D.rotorWith3DEffects.flange_a.phi;
//   rotor1D.rotorWith3DEffects.flange_b.tau + (-rotor1D.flange_b.tau) = 0.0;
//   rotor1D.flange_b.phi = rotor1D.rotorWith3DEffects.flange_b.phi;
//   rotor1D.flange_b.tau = 0.0;
//   torque.zeroPosition.frame_resolve.t[1] + torque.basicTorque.frame_resolve.t[1] = 0.0;
//   torque.zeroPosition.frame_resolve.t[2] + torque.basicTorque.frame_resolve.t[2] = 0.0;
//   torque.zeroPosition.frame_resolve.t[3] + torque.basicTorque.frame_resolve.t[3] = 0.0;
//   torque.zeroPosition.frame_resolve.f[1] + torque.basicTorque.frame_resolve.f[1] = 0.0;
//   torque.zeroPosition.frame_resolve.f[2] + torque.basicTorque.frame_resolve.f[2] = 0.0;
//   torque.zeroPosition.frame_resolve.f[3] + torque.basicTorque.frame_resolve.f[3] = 0.0;
//   torque.basicTorque.frame_resolve.R.w[1] = torque.zeroPosition.frame_resolve.R.w[1];
//   torque.basicTorque.frame_resolve.R.w[2] = torque.zeroPosition.frame_resolve.R.w[2];
//   torque.basicTorque.frame_resolve.R.w[3] = torque.zeroPosition.frame_resolve.R.w[3];
//   torque.basicTorque.frame_resolve.R.T[1,1] = torque.zeroPosition.frame_resolve.R.T[1,1];
//   torque.basicTorque.frame_resolve.R.T[1,2] = torque.zeroPosition.frame_resolve.R.T[1,2];
//   torque.basicTorque.frame_resolve.R.T[1,3] = torque.zeroPosition.frame_resolve.R.T[1,3];
//   torque.basicTorque.frame_resolve.R.T[2,1] = torque.zeroPosition.frame_resolve.R.T[2,1];
//   torque.basicTorque.frame_resolve.R.T[2,2] = torque.zeroPosition.frame_resolve.R.T[2,2];
//   torque.basicTorque.frame_resolve.R.T[2,3] = torque.zeroPosition.frame_resolve.R.T[2,3];
//   torque.basicTorque.frame_resolve.R.T[3,1] = torque.zeroPosition.frame_resolve.R.T[3,1];
//   torque.basicTorque.frame_resolve.R.T[3,2] = torque.zeroPosition.frame_resolve.R.T[3,2];
//   torque.basicTorque.frame_resolve.R.T[3,3] = torque.zeroPosition.frame_resolve.R.T[3,3];
//   torque.basicTorque.frame_resolve.r_0[1] = torque.zeroPosition.frame_resolve.r_0[1];
//   torque.basicTorque.frame_resolve.r_0[2] = torque.zeroPosition.frame_resolve.r_0[2];
//   torque.basicTorque.frame_resolve.r_0[3] = torque.zeroPosition.frame_resolve.r_0[3];
//   torque.basicTorque.torque[1] = torque.torque[1];
//   torque.basicTorque.torque[2] = torque.torque[2];
//   torque.basicTorque.torque[3] = torque.torque[3];
//   torque.basicTorque.frame_b.t[1] + (-torque.frame_b.t[1]) = 0.0;
//   torque.basicTorque.frame_b.t[2] + (-torque.frame_b.t[2]) = 0.0;
//   torque.basicTorque.frame_b.t[3] + (-torque.frame_b.t[3]) = 0.0;
//   torque.basicTorque.frame_b.f[1] + (-torque.frame_b.f[1]) = 0.0;
//   torque.basicTorque.frame_b.f[2] + (-torque.frame_b.f[2]) = 0.0;
//   torque.basicTorque.frame_b.f[3] + (-torque.frame_b.f[3]) = 0.0;
//   torque.basicTorque.frame_b.R.w[1] = torque.frame_b.R.w[1];
//   torque.basicTorque.frame_b.R.w[2] = torque.frame_b.R.w[2];
//   torque.basicTorque.frame_b.R.w[3] = torque.frame_b.R.w[3];
//   torque.basicTorque.frame_b.R.T[1,1] = torque.frame_b.R.T[1,1];
//   torque.basicTorque.frame_b.R.T[1,2] = torque.frame_b.R.T[1,2];
//   torque.basicTorque.frame_b.R.T[1,3] = torque.frame_b.R.T[1,3];
//   torque.basicTorque.frame_b.R.T[2,1] = torque.frame_b.R.T[2,1];
//   torque.basicTorque.frame_b.R.T[2,2] = torque.frame_b.R.T[2,2];
//   torque.basicTorque.frame_b.R.T[2,3] = torque.frame_b.R.T[2,3];
//   torque.basicTorque.frame_b.R.T[3,1] = torque.frame_b.R.T[3,1];
//   torque.basicTorque.frame_b.R.T[3,2] = torque.frame_b.R.T[3,2];
//   torque.basicTorque.frame_b.R.T[3,3] = torque.frame_b.R.T[3,3];
//   torque.basicTorque.frame_b.r_0[1] = torque.frame_b.r_0[1];
//   torque.basicTorque.frame_b.r_0[2] = torque.frame_b.r_0[2];
//   torque.basicTorque.frame_b.r_0[3] = torque.frame_b.r_0[3];
//   torque.basicTorque.frame_a.t[1] + (-torque.frame_a.t[1]) = 0.0;
//   torque.basicTorque.frame_a.t[2] + (-torque.frame_a.t[2]) = 0.0;
//   torque.basicTorque.frame_a.t[3] + (-torque.frame_a.t[3]) = 0.0;
//   torque.basicTorque.frame_a.f[1] + (-torque.frame_a.f[1]) = 0.0;
//   torque.basicTorque.frame_a.f[2] + (-torque.frame_a.f[2]) = 0.0;
//   torque.basicTorque.frame_a.f[3] + (-torque.frame_a.f[3]) = 0.0;
//   torque.basicTorque.frame_a.R.w[1] = torque.frame_a.R.w[1];
//   torque.basicTorque.frame_a.R.w[2] = torque.frame_a.R.w[2];
//   torque.basicTorque.frame_a.R.w[3] = torque.frame_a.R.w[3];
//   torque.basicTorque.frame_a.R.T[1,1] = torque.frame_a.R.T[1,1];
//   torque.basicTorque.frame_a.R.T[1,2] = torque.frame_a.R.T[1,2];
//   torque.basicTorque.frame_a.R.T[1,3] = torque.frame_a.R.T[1,3];
//   torque.basicTorque.frame_a.R.T[2,1] = torque.frame_a.R.T[2,1];
//   torque.basicTorque.frame_a.R.T[2,2] = torque.frame_a.R.T[2,2];
//   torque.basicTorque.frame_a.R.T[2,3] = torque.frame_a.R.T[2,3];
//   torque.basicTorque.frame_a.R.T[3,1] = torque.frame_a.R.T[3,1];
//   torque.basicTorque.frame_a.R.T[3,2] = torque.frame_a.R.T[3,2];
//   torque.basicTorque.frame_a.R.T[3,3] = torque.frame_a.R.T[3,3];
//   torque.basicTorque.frame_a.r_0[1] = torque.frame_a.r_0[1];
//   torque.basicTorque.frame_a.r_0[2] = torque.frame_a.r_0[2];
//   torque.basicTorque.frame_a.r_0[3] = torque.frame_a.r_0[3];
//   revolute.constantTorque.flange.tau + revolute.internalAxis.flange.tau = 0.0;
//   revolute.constantTorque.flange.phi = revolute.internalAxis.flange.phi;
//   revolute.fixed.flange.tau = 0.0;
//   (-bodyCylinder.frame_a.t[1]) + (bodyCylinder.frameTranslation.frame_a.t[1] + bodyCylinder.body.frame_a.t[1]) = 0.0;
//   (-bodyCylinder.frame_a.t[2]) + (bodyCylinder.frameTranslation.frame_a.t[2] + bodyCylinder.body.frame_a.t[2]) = 0.0;
//   (-bodyCylinder.frame_a.t[3]) + (bodyCylinder.frameTranslation.frame_a.t[3] + bodyCylinder.body.frame_a.t[3]) = 0.0;
//   (-bodyCylinder.frame_a.f[1]) + (bodyCylinder.frameTranslation.frame_a.f[1] + bodyCylinder.body.frame_a.f[1]) = 0.0;
//   (-bodyCylinder.frame_a.f[2]) + (bodyCylinder.frameTranslation.frame_a.f[2] + bodyCylinder.body.frame_a.f[2]) = 0.0;
//   (-bodyCylinder.frame_a.f[3]) + (bodyCylinder.frameTranslation.frame_a.f[3] + bodyCylinder.body.frame_a.f[3]) = 0.0;
//   bodyCylinder.body.frame_a.R.w[1] = bodyCylinder.frameTranslation.frame_a.R.w[1];
//   bodyCylinder.body.frame_a.R.w[1] = bodyCylinder.frame_a.R.w[1];
//   bodyCylinder.body.frame_a.R.w[2] = bodyCylinder.frameTranslation.frame_a.R.w[2];
//   bodyCylinder.body.frame_a.R.w[2] = bodyCylinder.frame_a.R.w[2];
//   bodyCylinder.body.frame_a.R.w[3] = bodyCylinder.frameTranslation.frame_a.R.w[3];
//   bodyCylinder.body.frame_a.R.w[3] = bodyCylinder.frame_a.R.w[3];
//   bodyCylinder.body.frame_a.R.T[1,1] = bodyCylinder.frameTranslation.frame_a.R.T[1,1];
//   bodyCylinder.body.frame_a.R.T[1,1] = bodyCylinder.frame_a.R.T[1,1];
//   bodyCylinder.body.frame_a.R.T[1,2] = bodyCylinder.frameTranslation.frame_a.R.T[1,2];
//   bodyCylinder.body.frame_a.R.T[1,2] = bodyCylinder.frame_a.R.T[1,2];
//   bodyCylinder.body.frame_a.R.T[1,3] = bodyCylinder.frameTranslation.frame_a.R.T[1,3];
//   bodyCylinder.body.frame_a.R.T[1,3] = bodyCylinder.frame_a.R.T[1,3];
//   bodyCylinder.body.frame_a.R.T[2,1] = bodyCylinder.frameTranslation.frame_a.R.T[2,1];
//   bodyCylinder.body.frame_a.R.T[2,1] = bodyCylinder.frame_a.R.T[2,1];
//   bodyCylinder.body.frame_a.R.T[2,2] = bodyCylinder.frameTranslation.frame_a.R.T[2,2];
//   bodyCylinder.body.frame_a.R.T[2,2] = bodyCylinder.frame_a.R.T[2,2];
//   bodyCylinder.body.frame_a.R.T[2,3] = bodyCylinder.frameTranslation.frame_a.R.T[2,3];
//   bodyCylinder.body.frame_a.R.T[2,3] = bodyCylinder.frame_a.R.T[2,3];
//   bodyCylinder.body.frame_a.R.T[3,1] = bodyCylinder.frameTranslation.frame_a.R.T[3,1];
//   bodyCylinder.body.frame_a.R.T[3,1] = bodyCylinder.frame_a.R.T[3,1];
//   bodyCylinder.body.frame_a.R.T[3,2] = bodyCylinder.frameTranslation.frame_a.R.T[3,2];
//   bodyCylinder.body.frame_a.R.T[3,2] = bodyCylinder.frame_a.R.T[3,2];
//   bodyCylinder.body.frame_a.R.T[3,3] = bodyCylinder.frameTranslation.frame_a.R.T[3,3];
//   bodyCylinder.body.frame_a.R.T[3,3] = bodyCylinder.frame_a.R.T[3,3];
//   bodyCylinder.body.frame_a.r_0[1] = bodyCylinder.frameTranslation.frame_a.r_0[1];
//   bodyCylinder.body.frame_a.r_0[1] = bodyCylinder.frame_a.r_0[1];
//   bodyCylinder.body.frame_a.r_0[2] = bodyCylinder.frameTranslation.frame_a.r_0[2];
//   bodyCylinder.body.frame_a.r_0[2] = bodyCylinder.frame_a.r_0[2];
//   bodyCylinder.body.frame_a.r_0[3] = bodyCylinder.frameTranslation.frame_a.r_0[3];
//   bodyCylinder.body.frame_a.r_0[3] = bodyCylinder.frame_a.r_0[3];
//   (-bodyCylinder.frame_b.t[1]) + bodyCylinder.frameTranslation.frame_b.t[1] = 0.0;
//   (-bodyCylinder.frame_b.t[2]) + bodyCylinder.frameTranslation.frame_b.t[2] = 0.0;
//   (-bodyCylinder.frame_b.t[3]) + bodyCylinder.frameTranslation.frame_b.t[3] = 0.0;
//   (-bodyCylinder.frame_b.f[1]) + bodyCylinder.frameTranslation.frame_b.f[1] = 0.0;
//   (-bodyCylinder.frame_b.f[2]) + bodyCylinder.frameTranslation.frame_b.f[2] = 0.0;
//   (-bodyCylinder.frame_b.f[3]) + bodyCylinder.frameTranslation.frame_b.f[3] = 0.0;
//   bodyCylinder.frameTranslation.frame_b.R.w[1] = bodyCylinder.frame_b.R.w[1];
//   bodyCylinder.frameTranslation.frame_b.R.w[2] = bodyCylinder.frame_b.R.w[2];
//   bodyCylinder.frameTranslation.frame_b.R.w[3] = bodyCylinder.frame_b.R.w[3];
//   bodyCylinder.frameTranslation.frame_b.R.T[1,1] = bodyCylinder.frame_b.R.T[1,1];
//   bodyCylinder.frameTranslation.frame_b.R.T[1,2] = bodyCylinder.frame_b.R.T[1,2];
//   bodyCylinder.frameTranslation.frame_b.R.T[1,3] = bodyCylinder.frame_b.R.T[1,3];
//   bodyCylinder.frameTranslation.frame_b.R.T[2,1] = bodyCylinder.frame_b.R.T[2,1];
//   bodyCylinder.frameTranslation.frame_b.R.T[2,2] = bodyCylinder.frame_b.R.T[2,2];
//   bodyCylinder.frameTranslation.frame_b.R.T[2,3] = bodyCylinder.frame_b.R.T[2,3];
//   bodyCylinder.frameTranslation.frame_b.R.T[3,1] = bodyCylinder.frame_b.R.T[3,1];
//   bodyCylinder.frameTranslation.frame_b.R.T[3,2] = bodyCylinder.frame_b.R.T[3,2];
//   bodyCylinder.frameTranslation.frame_b.R.T[3,3] = bodyCylinder.frame_b.R.T[3,3];
//   bodyCylinder.frameTranslation.frame_b.r_0[1] = bodyCylinder.frame_b.r_0[1];
//   bodyCylinder.frameTranslation.frame_b.r_0[2] = bodyCylinder.frame_b.r_0[2];
//   bodyCylinder.frameTranslation.frame_b.r_0[3] = bodyCylinder.frame_b.r_0[3];
// end Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.Examples.Rotational3DEffects.MovingActuatedDrive has 2462 equation(s) and 2462 variable(s).
// 1530 of these are trivial equation(s).
// "
// ""
// endResult
