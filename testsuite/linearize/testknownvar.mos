// name:     Jacobian for Knownvars
// keywords: linearization, Jacobian
// status:   correct
// cflags: 	 +postOptModules=inlineArrayEqn,constantLinearSystem,removeSimpleEquations,generateSymbolicLinearization
// teardown_command: rm -rf TestKV* linear_TestKV* output.log
// 
//  Case for generating Jacobian for symstem with more simply equations
//  test for Bugfixe
//
loadFile("testknownvar.mo");
simulate(TestKV,numberOfIntervals=1);
//linearize
system("TestKV -l 0 ");
loadFile("linear_TestKV.mo");
list(linear_TestKV);
simulate(linear_TestKV,method="dassl2");
readFile("output.log"); // Check that output log is emtpy

// Result:
// true
// record SimulationResult
//     resultFile = "TestKV_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 1, tolerance = 0.000001, method = 'dassl', fileNamePrefix = 'TestKV', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// Linearization will performed at point of time: 0
// Linear model is created!
// 0
// true
// "model linear_TestKV
//   parameter Integer n = 1;
//   // states 
//   parameter Integer k = 0;
//   // top-level inputs 
//   parameter Integer l = 0;
//   // top-level outputs 
//   parameter Real x0[1] = {0};
//   parameter Real u0[0] = array(i for i in 1:0);
//   parameter Real A[1,1] = [2];
//   parameter Real B[1,0] = zeros(1, 0);
//   parameter Real C[0,1] = zeros(0, 1);
//   parameter Real D[0,0] = zeros(0, 0);
//   Real x[1](start = x0);
//   input Real u[0];
//   output Real y[0];
//   Real x_Px = x[1];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
// end linear_TestKV;
// 
// "
// record SimulationResult
//     resultFile = "linear_TestKV_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 0.000001, method = 'dassl2', fileNamePrefix = 'linear_TestKV', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// endResult
