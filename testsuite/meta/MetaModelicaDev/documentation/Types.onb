<!DOCTYPE OMNotebook>
<Notebook>
  <GroupCell closed="false">
    <GroupCell closed="false"/>
    <TextCell style="Title">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:10px; margin-bottom:10px; margin-left:10px; margin-right:10px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Arial'; font-size:38pt; font-weight:600; color:#000000;">MetaModelica Types&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">This notebook covers the datatypes that are part of the MetaModelica extension of Modelica. We go through data construction, access through pattern matching and how to declare elements using the types.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">In order to use the examples, you need to instruct the OpenModelica Compiler to use MetaModelica grammar.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-3.49727642936438e+304" Antialiasing="false" MinorY="-1.08693699036207e+306" Title="Plot title" LogX="false" LogY="false" MajorX="-1.13099809399271e+306" MajorY="-1.08693698955207e+306" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>setCommandLineOptions({"+g=MetaModelica"})</Input>
      <Output>true</Output>
    </GraphCell>
    <TextCell style="Section">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times'; font-size:18pt; font-weight:600; color:#000000;">Lists&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">Lists are common data structures in declarative languages since they conveniently allow representation&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">and manipulation of sequences of elements. Elements can be efficiently (in constant time) added to&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">beginning of lists in a declarative way. All elements of a list have the same type. The following basic list construction operators are available.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="0" Antialiasing="false" MinorY="0" Title="Plot title" LogX="false" LogY="false" MajorX="0" MajorY="0" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>{} // The empty list</Input>
      <Output>{}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-1.39805385545038e+308" Antialiasing="false" MinorY="0" Title="Plot title" LogX="false" LogY="false" MajorX="1.25735200987907e-316" MajorY="0" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>{1,2,3} // The list constructor</Input>
      <Output>{1,2,3}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="1.1906982064774e-321" Title="Plot title" LogX="false" LogY="false" MajorX="3.66255211039799e-317" MajorY="2.12199579047121e-314" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>1::"2"::{} // An illegal expression</Input>
      <Output>
OMC-ERROR: 
"Error: Failed to match types of cons expression 1::"2"::{}. The head has type Integer and the tail list&lt;String>.
"</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>1::{2,3}</Input>
      <Output>{1,2,3}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>listAppend({1,2,3},{4}) // Expensive; creates listLength(lst) new cells</Input>
      <Output>{1,2,3,4}</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The types of lists often need to be specified. Named list types can be declared using MetaModelica&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">type declarations.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>type StringList = list&lt;String>;</Input>
      <Output>{StringList}</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The most readable and convenient way of accessing elements in an existing list or constructing new lists&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">is through pattern matching operations.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>function stringDelimitList
  input StringList stringList;
  input String delimiter;
  output String outString;
algorithm
  outString := match stringList
    local
      String head;
      StringList tail;
    // Remember to match the empty list
    case {} then "" ;
    // The last element does not need the delimiter
    case {head} then head;
    // Pattern-matching using the cons operator
    case head::tail then head + delimiter + stringDelimitList(tail,delimiter);
  end match;
end stringDelimitList;</Input>
      <Output>{stringDelimitList}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>stringDelimitList({"1","2","3","4"},",")</Input>
      <Output>"1,2,3,4"</Output>
    </GraphCell>
    <TextCell style="Section">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times'; font-size:18pt; font-weight:600; color:#000000;">Tuples&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Tuples are represented by parenthesized, comma-separated sequences of items each of which may have a&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">different type.&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-3.47888842070181e+306" Antialiasing="false" MinorY="-3.47888842070181e+306" Title="Plot title" LogX="false" LogY="false" MajorX="-3.47888842070181e+306" MajorY="-3.47888842070181e+306" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>(1,2.0,"3")</Input>
      <Output>(1,2.0,"3")</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">Named tuple types can be declared explicitly through the type declaration using the tuple type&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">constructor.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="1.44639646998137e-307" Antialiasing="false" MinorY="1.78021255047389e-306" Title="Plot title" LogX="false" LogY="false" MajorX="1.11261434012633e-306" MajorY="1.50202671174092e-307" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>type ThreeTup = tuple&lt;Integer,Real,String>;</Input>
      <Output>{ThreeTup}</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The values of a tuple are easiest accessed through pattern-matching.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="-3.25361445107452e+306" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>function threeTupString
  input ThreeTup tup;
  output String str;
algorithm
  str := match tup
    local
      Integer int;
      Real real;
      String string;
    case (int,real,string)
      then stringAppendList({"(", String(int), ",", String(real), ",", string, ")"});
  end match;
end threeTupString;</Input>
      <Output>{threeTupString}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="2.35968380883015e-316" Antialiasing="false" MinorY="5.58294179800609e-322" Title="Plot title" LogX="false" LogY="false" MajorX="3.75603328311633e-317" MajorY="2.35968380883015e-316" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>threeTupString((1,2.5,"3"))</Input>
      <Output>"(1,2.5,3)"</Output>
    </GraphCell>
    <TextCell style="Section">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times'; font-size:18pt; font-weight:600; color:#000000;">Options&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">Option types have been introduced in MetaModelica to provide a type-safe way of representing the&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">common situation where a data item is optionally present in a data structure.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The constructor NONE() is used to represent the case where the optional data item is not present, whereas the constructor SOME() is used when the data item is present in the data structure.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="0" Antialiasing="false" MinorY="0" Title="Plot title" LogX="false" LogY="false" MajorX="0" MajorY="2.39958988629727e-316" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>type StringOption = Option&lt;String>;</Input>
      <Output>{StringOption}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>function stringOrDefault
  input StringOption strOpt;
  input String default;
  output String str;
algorithm
  str := match strOpt
    case SOME(str) then str;
    else default;
  end match;
end stringOrDefault;</Input>
      <Output>{stringOrDefault}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="6.32404026676796e-322" Title="Plot title" LogX="false" LogY="false" MajorX="2.44632770588881e-316" MajorY="2.37151510003798e-322" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>stringOrDefault(NONE(),"default")</Input>
      <Output>"default"</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="0" Antialiasing="false" MinorY="0" Title="Plot title" LogX="false" LogY="false" MajorX="0" MajorY="0" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>stringOrDefault(SOME("string"),"default")</Input>
      <Output>"string"</Output>
    </GraphCell>
    <TextCell style="Section">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times'; font-size:18pt; font-weight:600; color:#000000;">Tagged Union Types for Records, Trees and Graphs&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The uniontype declaration in MetaModelica is used to introduce union types, for example the type&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">Number below, which can be used to represent several kinds of number types such as integers, rational&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">numbers, real, and complex within the same type.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="1.78020168666362e-306" Antialiasing="false" MinorY="1.78020983581133e-306" Title="Plot title" LogX="false" LogY="false" MajorX="2.52776602848977e-316" MajorY="6.11895311743549e-308" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>uniontype Number
record INT Integer int; end INT;
record RATIONAL Integer dividend, divisor; end RATIONAL;
record REAL Real real; end REAL;
record COMPLEX Real re,im; end COMPLEX;
end Number;</Input>
      <Output>{Number}</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The different names, &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">INT&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">, &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">RATIONAL&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">, &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">REAL&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;"> and &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">COMPLEX&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">, are called constructors, as they are used to&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">construct tagged instances of the type. For example, we can construct a Number instance &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">REAL&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">(3.14)&lt;/span>&lt;/p>
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">to hold a real number or another instance &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">COMPLEX&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">(2.1,3.5) to hold a complex number.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The type Number can be viewed as the union of the record types &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">INT&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">, &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">RATIONAL&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">, &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">REAL&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;"> and &lt;/span>&lt;span style=" font-family:'Courier New'; font-size:12pt; color:#000000;">COMPLEX&lt;/span>&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">. In order to access data in a uniontype you have to use pattern-matching. The pattern both checks the type of the input and accesses the requested data.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-2.59776975128567e+307" Antialiasing="false" MinorY="-2.59776975128567e+307" Title="Plot title" LogX="false" LogY="false" MajorX="-2.59776975128567e+307" MajorY="-2.59776975128567e+307" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>function numberAbs
  "Returns the absolute value of a Number as a Real."
  input Number number;
  output Real result;
algorithm
  result := match number
    local
      Integer int,dividend,divisor;
      Real real,re,im;  
    case INT(int) then abs(int);
    case RATIONAL(dividend,divisor) then abs(dividend/divisor);
    case REAL(real=real) then abs(real);
    case COMPLEX(im=im,re=re) then abs(sqrt(im^2+re^2));
  end match;
end numberAbs;</Input>
      <Output>{numberAbs}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>numberAbs(INT(-13))</Input>
      <Output>13.0</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>numberAbs(COMPLEX(1.3,-4.2))</Input>
      <Output>4.39658958739612</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-2.59776975128567e+307" Antialiasing="false" MinorY="-2.59776975128567e+307" Title="Plot title" LogX="false" LogY="false" MajorX="-2.59776975128567e+307" MajorY="-2.59776975128567e+307" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>numberAbs(REAL(-1.3))</Input>
      <Output>1.3</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-8.22916599797022e+305" Antialiasing="false" MinorY="-8.22916599797022e+305" Title="Plot title" LogX="false" LogY="false" MajorX="-8.22916599797022e+305" MajorY="-8.22916599797022e+305" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>numberAbs(RATIONAL(13,42))</Input>
      <Output>0.30952380952381</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The most frequent use of union types in MetaModelica is to specify abstract syntax tree representations used in language specifications. Because union types need to represent a tree, they may be recursive.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-family:'Times New Roman'; font-size:12pt; color:#000000;">The following example is a simple program that can evaluate an arithmetic expression.&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-8.6697703373478e+305" Antialiasing="false" MinorY="-8.6697703373478e+305" Title="Plot title" LogX="false" LogY="false" MajorX="-8.6697703373478e+305" MajorY="-8.6697703373478e+305" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>uniontype Expression
record RCONST "A real constant" Real r; end RCONST;
record ADD Expression lhs, rhs; end ADD;
record SUB Expression lhs, rhs; end SUB;
record MUL Expression lhs, rhs; end MUL;
record DIV Expression lhs, rhs; end DIV;
end Expression;</Input>
      <Output>{Expression}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="-1.9129428837399e+306" Antialiasing="false" MinorY="-1.9129428837399e+306" Title="Plot title" LogX="false" LogY="false" MajorX="-1.9129428837399e+306" MajorY="-1.9129428837399e+306" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>function evalExp
  "Evaluates an expression"
  input Expression exp;
  output Real res;
algorithm
  res := match exp
    local
      Real r;  
      Expression lhs,rhs;
    case RCONST(r) then r;
    case ADD(lhs,rhs) then evalExp(lhs)+evalExp(rhs);  
    case SUB(lhs,rhs) then evalExp(lhs)-evalExp(rhs);
    case MUL(lhs,rhs) then evalExp(lhs)*evalExp(rhs);
    case DIV(lhs,rhs) then evalExp(lhs)/evalExp(rhs);
  end match;
end evalExp;</Input>
      <Output>{evalExp}</Output>
    </GraphCell>
    <GraphCell AutoX="true" AutoY="true" style="Graph" MinorX="nan" Antialiasing="false" MinorY="nan" Title="Plot title" LogX="false" LogY="false" MajorX="nan" MajorY="nan" closed="false" YLabel="y" Area="wEgAAAAAAADAMAAAAAAAAEBZAAAAAAAAQD4AAAAAAAA=" ShowGraph="false" Grid="false" XLabel="x" Legend="false">
      <Input>// 42.0 * (1.5 + (2-1.9))
evalExp(MUL(RCONST(42),ADD(RCONST(1.5),SUB(RCONST(2),RCONST(1.9)))))</Input>
      <Output>67.2</Output>
    </GraphCell>
    <TextCell style="Text">
      <Text>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=" font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;">
&lt;table border="0" style="-qt-table-type: root; margin-top:5px; margin-bottom:5px; margin-left:5px; margin-right:5px;">
&lt;tr>
&lt;td style="border: none;">
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>
&lt;p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;/p>&lt;/td>&lt;/tr>&lt;/table>&lt;/body>&lt;/html></Text>
    </TextCell>
  </GroupCell>
</Notebook>
