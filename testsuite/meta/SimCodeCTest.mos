// name: SimCodeCTest
// cflags: +g=MetaModelica
// status: correct
// setup_command: rm -f SimCodeC_abc.c SimCodeC_abc.h SimCodeC_abc.makefile

setCommandLineOptions({"+g=MetaModelica","+d=rml"});

runScript("LoadCompilerSources.mos");
getErrorString();

func:=SimCode.FUNCTION(Absyn.QUALIFIED("SimCodeC",Absyn.IDENT("abc")),{},{},{},{},{},{});
params:=SimCode.MAKEFILE_PARAMS("gcc","g++","g++","",".so","/tmp","-Wall -g","-fPIC","-lSendDataHumbug",{});
SimCodeC.translateFunctions(Tpl.emptyTxt, SimCode.FUNCTIONCODE("SimCodeC_abc",func,{},{},params,{}));
getErrorString();
readFile("SimCodeC_abc.h");
readFile("SimCodeC_abc.c");
readFile("SimCodeC_abc.makefile");

// Result:
// true
// Loaded all files without error
// "true
// "
// ""
// record SimCode.Function.FUNCTION
//     name = record Absyn.Path.QUALIFIED
//     name = "SimCodeC",
//     path = record Absyn.Path.IDENT
//     name = "abc"
// end Absyn.Path.IDENT;
// end Absyn.Path.QUALIFIED;,
//     inVars = {},
//     outVars = {},
//     recordDecls = {},
//     functionArguments = {},
//     variableDeclarations = {},
//     body = {}
// end SimCode.Function.FUNCTION;
// record SimCode.MakefileParams.MAKEFILE_PARAMS
//     ccompiler = "gcc",
//     cxxcompiler = "g++",
//     linker = "g++",
//     exeext = "",
//     dllext = ".so",
//     omhome = "/tmp",
//     cflags = "-Wall -g",
//     ldflags = "-fPIC",
//     senddatalibs = "-lSendDataHumbug",
//     libs = {}
// end SimCode.MakefileParams.MAKEFILE_PARAMS;
// record Tpl.Text.MEM.TEXT
//     tokens = {},
//     blocksStack = {}
// end Tpl.Text.MEM.TEXT;
// ""
// "#ifndef SimCodeC_abc__H
// #define SimCodeC_abc__H
// #include "modelica.h"
// #include <stdio.h>
// #include <stdlib.h>
// #include <errno.h>
// 
// #if defined(_MSC_VER)
//   #define DLLExport   __declspec( dllexport )
// #else
//   #define DLLExport /* nothing */
// #endif
// #ifdef __cplusplus
// extern "C" {
// #endif
// 
// 
// void _SimCodeC_abc();
// 
// #ifdef __cplusplus
// }
// #endif
// #endif"
// "#include "SimCodeC_abc.h"
// #include <algorithm>
// #define MODELICA_ASSERT(cond,msg) { if (!(cond)) fprintf(stderr,"Modelica Assert: %s!\n", msg); }
// #define MODELICA_TERMINATE(msg) { fprintf(stderr,"Modelica Terminate: %s!\n", msg); fflush(stderr); }
// 
// extern "C" {
// void _SimCodeC_abc()
// {
//   state tmp1;
//   tmp1 = get_memory_state();
// 
// 
//   
//   _return:
//   restore_memory_state(tmp1);
//   return ;
// }
// 
// int in_SimCodeC_abc(type_description * inArgs, type_description * outVar)
// {
//   _SimCodeC_abc();
//   write_noretcall(outVar);
//   return 0;
// }
// 
// }
// 
// "
// "# Makefile generated by OpenModelica
// 
// CC=gcc
// CXX=g++
// LINK=g++
// EXEEXT=
// DLLEXT=.so
// CFLAGS= -I"/tmp/include/omc" -Wall -g
// LDFLAGS= -L"/tmp/lib/omc" -fPIC
// 
// .PHONY: SimCodeC_abc
// SimCodeC_abc: SimCodeC_abc.c SimCodeC_abc.h
// 	 $(LINK) $(CFLAGS) -o SimCodeC_abc$(DLLEXT) SimCodeC_abc.c  $(LDFLAGS) -lm"
// endResult
