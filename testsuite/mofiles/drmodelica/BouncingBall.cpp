//Simulation code for BouncingBall
//Generated by OpenModelica.

#include "modelica.h"

#include "assert.h"

#include "simulation_runtime.h"

#include "BouncingBall_functions.cpp"
extern "C" {

}

#define NHELP 1
#define NG 1//number of zero crossing
#define NX 3
#define NY 0
#define NP 2 // number of paramters
#define NO 0 // number of outputvar on topmodel
#define NI 0 // number of inputvar on topmodel
#define NR 5 // number of residuals for initialialization function
#define NEXT 0 // number of external objects
#define MAXORD 5



static DATA* localData = 0;
#define time localData->timeValue
char *model_name="BouncingBall";
char* state_names[3]={"$dummy", "height", "velocity"};
char* derivative_names[3]={"der($dummy)", "der(height)", "der(velocity)"};
char* algvars_names[1] = {""};
char* input_names[1] = {""};
char* output_names[1] = {""};
char* param_names[2]={"c", "radius"};

char* state_comments[3]={"", "", ""};
char* derivative_comments[3]={"", "", ""};
char* algvars_comments[1] = {""};
char* input_comments[1] = {""};
char* output_comments[1] = {""};
char* param_comments[2]={"", ""};

#define $radius localData->parameters[1]
#define $c localData->parameters[0]
#define $velocity localData->states[2]
#define $derivative$velocity localData->statesDerivatives[2]
#define $height localData->states[1]
#define $derivative$height localData->statesDerivatives[1]
#define $$dummy localData->states[0]
#define $derivative$$dummy localData->statesDerivatives[0]

char* getName( double* ptr)
{
  if( &$derivative$velocity == ptr ) return derivative_names[2];
  if( &$velocity == ptr ) return state_names[2];
  if( &$derivative$height == ptr ) return derivative_names[1];
  if( &$height == ptr ) return state_names[1];
  if( &$derivative$$dummy == ptr ) return derivative_names[0];
  if( &$$dummy == ptr ) return state_names[0];

  return "";
}
static char init_fixed[NX+NX+NY+NP]={1/*$dummy*/, 1/*height*/, 1/*velocity*/, 1/*default*/, 
1/*default*/, 1/*default*/, 1/*c*/, 
1/*radius*/};
char var_attr[NX+NY+NP]={/*$dummy:*/1+0, /*height:*/1+0, /*velocity:*/1+0, /*c:*/1+0, 
/*radius:*/1+0};
#define DIVISION(a,b,c) ((b != 0) ? a / b : a / division_error(b,c))


int encounteredDivisionByZero = 0;
double division_error(double b,const char* division_str)
{
  if(!encounteredDivisionByZero){
    fprintf(stderr,"ERROR: Division by zero in partial equation: %s.\n",division_str);
    encounteredDivisionByZero = 1;
   }   return b;
}


void setLocalData(DATA* data)
{

   localData = data;
}

DATA* initializeDataStruc(DATA_FLAGS flags)
{


  DATA* returnData = (DATA*)malloc(sizeof(DATA));

  if(!returnData) //error check

    return 0;

  returnData->nStates = NX;

  returnData->nAlgebraic = NY;

  returnData->nParameters = NP;

  returnData->nInputVars = NI;

  returnData->nOutputVars = NO;

  returnData->nZeroCrossing = NG;

  returnData->nInitialResiduals = NR;

  returnData->nHelpVars = NHELP;

  if(flags & STATES && returnData->nStates){

    returnData->states = (double*) malloc(sizeof(double)*returnData->nStates);

    returnData->oldStates = (double*) malloc(sizeof(double)*returnData->nStates);

    returnData->oldStates2 = (double*) malloc(sizeof(double)*returnData->nStates);

  }else{

    returnData->states = 0;

    returnData->oldStates = 0;

    returnData->oldStates2 = 0;

  }

  if(flags & STATESDERIVATIVES && returnData->nStates){

    returnData->statesDerivatives = (double*) malloc(sizeof(double)*returnData->nStates);

    returnData->oldStatesDerivatives = (double*) malloc(sizeof(double)*returnData->nStates);

    returnData->oldStatesDerivatives2 = (double*) malloc(sizeof(double)*returnData->nStates);


  }else{

    returnData->statesDerivatives = 0;

    returnData->oldStatesDerivatives = 0;

    returnData->oldStatesDerivatives2 = 0;

  }

  if(flags & HELPVARS && returnData->nHelpVars){

    returnData->helpVars = (double*) malloc(sizeof(double)*returnData->nHelpVars);

  }else{

    returnData->helpVars = 0;

  }

  if(flags & ALGEBRAICS && returnData->nAlgebraic){

    returnData->algebraics = (double*) malloc(sizeof(double)*returnData->nAlgebraic);

    returnData->oldAlgebraics = (double*) malloc(sizeof(double)*returnData->nAlgebraic);

    returnData->oldAlgebraics2 = (double*) malloc(sizeof(double)*returnData->nAlgebraic);
        
  }else{

    returnData->algebraics = 0;

    returnData->oldAlgebraics = 0;

    returnData->oldAlgebraics2 = 0;
    
  }

  if(flags & PARAMETERS && returnData->nParameters){

    returnData->parameters = (double*) malloc(sizeof(double)*returnData->nParameters);

  }else{

    returnData->parameters = 0;

  }

  if(flags & OUTPUTVARS && returnData->nOutputVars){

    returnData->outputVars = (double*) malloc(sizeof(double)*returnData->nOutputVars);

  }else{

    returnData->outputVars = 0;

  }

  if(flags & INPUTVARS && returnData->nInputVars){

    returnData->inputVars = (double*) malloc(sizeof(double)*returnData->nInputVars);

  }else{

    returnData->inputVars = 0;

  }

  if(flags & INITIALRESIDUALS && returnData->nInitialResiduals){

    returnData->initialResiduals = (double*) malloc(sizeof(double)*returnData->nInitialResiduals);

  }else{

    returnData->initialResiduals = 0;

  }

  if(flags & INITFIXED){

    returnData->initFixed = init_fixed;

  }else{

    returnData->initFixed = 0;

  }

  /*   names   */

  if(flags & MODELNAME){

    returnData->modelName = model_name;

  }else{

    returnData->modelName = 0;

  }

  if(flags & STATESNAMES){

    returnData->statesNames = state_names;

  }else{

    returnData->statesNames = 0;

  }

  if(flags & STATESDERIVATIVESNAMES){

    returnData->stateDerivativesNames = derivative_names;

  }else{

    returnData->stateDerivativesNames = 0;

  }

  if(flags & ALGEBRAICSNAMES){

    returnData->algebraicsNames = algvars_names;

  }else{

    returnData->algebraicsNames = 0;

  }

  if(flags & PARAMETERSNAMES){

    returnData->parametersNames = param_names;

  }else{

    returnData->parametersNames = 0;

  }

  if(flags & INPUTNAMES){

    returnData->inputNames = input_names;

  }else{

    returnData->inputNames = 0;

  }

  if(flags & OUTPUTNAMES){

    returnData->outputNames = output_names;

  }else{

    returnData->outputNames = 0;

  }

  /*   comments  */

  if(flags & STATESCOMMENTS){

    returnData->statesComments = state_comments;

  }else{

    returnData->statesComments = 0;

  }

  if(flags & STATESDERIVATIVESCOMMENTS){

    returnData->stateDerivativesComments = derivative_comments;

  }else{

    returnData->stateDerivativesComments = 0;

  }

  if(flags & ALGEBRAICSCOMMENTS){

    returnData->algebraicsComments = algvars_comments;

  }else{

    returnData->algebraicsComments = 0;

  }

  if(flags & PARAMETERSCOMMENTS){

    returnData->parametersComments = param_comments;

  }else{

    returnData->parametersComments = 0;

  }

  if(flags & INPUTCOMMENTS){

    returnData->inputComments = input_comments;

  }else{

    returnData->inputComments = 0;

  }

  if(flags & OUTPUTCOMMENTS){

    returnData->outputComments = output_comments;

  }else{

    returnData->outputComments = 0;

  }

  if (flags & EXTERNALVARS) {

  returnData->extObjs = (void**)malloc(sizeof(void*)*NEXT);

  if (!returnData->extObjs) { 

     printf("error allocating external objects\n");

     exit(-2);

  }

  setLocalData(returnData); /* must be set since used by constructors*/


  }

  return returnData;

}

void deInitializeDataStruc(DATA* data, DATA_FLAGS flags)

{

  if(!data)

    return;

  if(flags & STATES && data->states){

    free(data->states);

    data->states = 0;

  }

  if(flags & STATESDERIVATIVES && data->statesDerivatives){

    free(data->statesDerivatives);

    data->statesDerivatives = 0;

  }

  if(flags & ALGEBRAICS && data->algebraics){

    free(data->algebraics);

    data->algebraics = 0;

  }

  if(flags & PARAMETERS && data->parameters){

    free(data->parameters);

    data->parameters = 0;

  }

  if(flags & OUTPUTVARS && data->inputVars){

    free(data->inputVars);

    data->inputVars = 0;

  }

  if(flags & INPUTVARS && data->outputVars){

    free(data->outputVars);

    data->outputVars = 0;

  }

  if(flags & INITIALRESIDUALS && data->initialResiduals){

    free(data->initialResiduals);

    data->initialResiduals = 0;

  }

  if (flags & EXTERNALVARS && data->extObjs) {



    free(data->extObjs);

    data->extObjs = 0;

  }

}

int functionDAE_output()
{
  state mem_state;


  mem_state = get_memory_state();

  restore_memory_state(mem_state);
  return 0;

}

/*
*/
int input_function()
{
  return 0;

}

/*
*/
int output_function()
{
  return 0;

}
int functionDAE_res(double *t, double *x, double *xd, double *delta, long int *ires, double *rpar, long int* ipar)
{
  int i;
  double temp_xd[NX];
  double* statesDerivativesBackup;
  double timeBackup;


  statesDerivativesBackup = localData->statesDerivatives;
  timeBackup = localData->timeValue;
  for (i=0; i<localData->nStates; i++) temp_xd[i]=localData->statesDerivatives[i];
  
  localData->statesDerivatives = temp_xd;
  localData->timeValue = *t;
  
  functionODE();
  /* get the difference between the temp_xd(=localData->statesDerivatives) and xd(=statesDerivativesBackup)*/
   for (i=0; i < localData->nStates; i++) delta[i]=localData->statesDerivatives[i]-statesDerivativesBackup[i];
  
  localData->statesDerivatives = statesDerivativesBackup;
  localData->timeValue = timeBackup;
  if (modelErrorCode) {
    *ires = -1;
    modelErrorCode =0;
  }
  return 0;


}
int function_zeroCrossing(long *neqm, double *t, double *x, long *ng, double *gout, double *rpar, long* ipar)
{
  double timeBackup;
  state mem_state;


  mem_state = get_memory_state();
  timeBackup = localData->timeValue;
  localData->timeValue = *t;
  ZEROCROSSING(0,LessEq($height,$radius));


  restore_memory_state(mem_state);
  localData->timeValue = timeBackup;
  return 0;

}
int handleZeroCrossing(long index)
{
  state mem_state;


  mem_state = get_memory_state();
  switch(index) {
    case 0:

    
    break;

    default: break;
  }
  restore_memory_state(mem_state);
  return 0;

}
int function_updateDependents()
{
  state mem_state;


  mem_state = get_memory_state();
  $derivative$velocity = -9.81;
  $derivative$height = $velocity;
  $derivative$$dummy = 0.0;
    localData->helpVars[0] = $height <= $radius;


  restore_memory_state(mem_state);
  return 0;

}
int function_when(int i)
{
  state mem_state;


  mem_state = get_memory_state();
  switch(i) {
     case 0: //when $height <= $radius

        $velocity = -$c * pre($velocity);

    break;
    default: break;
  }

  restore_memory_state(mem_state);
  return 0;

}
int functionODE()
{
  state mem_state;


  mem_state = get_memory_state();
  $derivative$velocity = -9.81;
  $derivative$height = $velocity;
  $derivative$$dummy = 0.0;

  restore_memory_state(mem_state);
  return 0;

}
int initial_function()
{



  return 0;

}
int initial_residual()
{
  int i=0;
  state mem_state;


  mem_state = get_memory_state();
  localData->initialResiduals[i++] = $derivative$$dummy;
  localData->initialResiduals[i++] = ($derivative$height - $velocity);
  localData->initialResiduals[i++] = ($derivative$velocity - -9.81);
  localData->initialResiduals[i++] = $velocity;
  localData->initialResiduals[i++] = ($height - 1.0);

  restore_memory_state(mem_state);
  return 0;

}
int bound_parameters()
{
  state mem_state;


  mem_state = get_memory_state();

  restore_memory_state(mem_state);
  return 0;

}
int checkForDiscreteVarChanges()
{
  int needToIterate=0;
  if (edge(localData->helpVars[0])) AddEvent(0 + localData->nZeroCrossing);

  return needToIterate;
}
