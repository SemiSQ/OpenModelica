// name:     SineSpeed
// keywords: Simulate, readSimulationData
// status:   correct
// cflags:   +std=2.x
// teardown_command: rm -f TestModels.RotationalModels.SpringInertia.SineSpeed* output.log
// 
//  Simulate Rotational inertias with springs 
//
loadModel(Modelica,{"2.2.1"});
loadFile("TestModels.mo");

// SineSpeed
simulate(TestModels.RotationalModels.SpringInertia.SineSpeed, tolerance=1e-5, numberOfIntervals=100);
{val(inertia1.w,0.0),val(inertia1.w,0.2),val(inertia1.w,0.4),
val(inertia1.w,0.6),val(inertia1.w,0.8),val(inertia1.w,1.0)};
{val(inertia1.phi,0.0),val(inertia1.phi,0.2),val(inertia1.phi,0.4),
val(inertia1.phi,0.6),val(inertia1.phi,0.8),val(inertia1.phi,1.0)};

// Result:
// true
// true
// record SimulationResult
//     resultFile = "TestModels.RotationalModels.SpringInertia.SineSpeed_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 100, tolerance = 1e-005, method = 'dassl', fileNamePrefix = 'TestModels.RotationalModels.SpringInertia.SineSpeed', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// {0.0,0.0439794277980902,0.167311295391549,0.345695946409462,0.544054221849494,0.72332705946605}
// {0.0,0.00298158425453847,0.022946679874744,0.0735985603678965,0.162565063242381,0.289940565284482}
// endResult
