// name: Interactive API for Annotations
// keywords: Graphical API, component attributes
// status: correct
// env: OPENMODELICALIBRARY=../../libraries/msl31
// Subset of the Graphical API for annotations
//


getAnnotationVersion();
setAnnotationVersion("3.x");
getAnnotationVersion();

loadModel(Modelica); getErrorString();
loadModel(ModelicaServices); getErrorString();

// If we set the annotations version to 3, then the OMC API getIconAnnotation don't returns the flat model for some components. 
// I have tried it for Resistor, Conductor, EMF..........i am not sure how many more have this problem. 
// Here is the output for 3 of them

getIconAnnotation(Modelica.Electrical.Analog.Basic.Resistor);        getErrorString();
getIconAnnotation(Modelica.Electrical.Analog.Basic.HeatingResistor); getErrorString();
getIconAnnotation(Modelica.Electrical.Analog.Basic.EMF);             getErrorString();
getIconAnnotation(Modelica.Electrical.Analog.Basic.Conductor);       getErrorString();

// I am using MSL31.
// One more thing, can someone tell me what is the output of getComponentAnnotations,

getIconAnnotation(Modelica.Electrical.Analog.Basic.Ground); getErrorString();
getComponentAnnotations(Modelica.Electrical.Analog.Basic.Ground); getErrorString();

// What does each parameter means? I have looked for it in the Modelica Specifications for 3.2 but couldn't find anything.
// One more thing i have noticed is, the default parameter values for the components are empty. Like,

getParameterNames(Modelica.Electrical.Analog.Basic.Resistor);                   getErrorString();
// R one doesn't have a default value!
getParameterValue(Modelica.Electrical.Analog.Basic.Resistor, R);                getErrorString();
// the the modification names
getComponentModifierNames(Modelica.Electrical.Analog.Basic.Resistor, R);        getErrorString();
// retrieve the start value
getComponentModifierValue(Modelica.Electrical.Analog.Basic.Resistor, R.start); getErrorString();
getParameterValue(Modelica.Electrical.Analog.Basic.Resistor, T_ref);            getErrorString();
getComponentModifierNames(Modelica.Electrical.Analog.Basic.Resistor, T_ref);    getErrorString();
getParameterValue(Modelica.Electrical.Analog.Basic.Resistor, alpha);            getErrorString();
getComponentModifierNames(Modelica.Electrical.Analog.Basic.Resistor, alpha);    getErrorString();

// Also there are old bug report related to this issue: bug 1166 and 1160
// Best Regards Mohsen

// get documentation from package
getDocumentationAnnotation(Modelica.Mechanics.Rotational.Components); getErrorString();
// get documentation from model
getDocumentationAnnotation(Modelica.Mechanics.Rotational.Components.Intertia); getErrorString();
// get documentation from package
getDocumentationAnnotation(Modelica.Electrical.Analog.Basic); getErrorString();
// get documentation from model
getDocumentationAnnotation(Modelica.Electrical.Analog.Basic.EMF); getErrorString();

// Result:
// "3.x"
// true
// "3.x"
// true
// ""
// true
// ""
// {-100.0,-100.0,100.0,100.0,true,0.1,2.0,2.0,{Rectangle(true,{0.0,0.0},0,{0,0,255},{255,255,255},LinePattern.Solid,FillPattern.Solid,0.25,BorderPattern.None,{{-70,30},{70,-30}},0),Line(true,{0.0,0.0},0,{{-90,0},{-70,0}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{70,0},{90,0}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,0},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{-144,-40},{142,-72}},"R=%R",0,TextAlignment.Center),Line(false,{0.0,0.0},0,{{0,-100},{0,-30}},{127,0,0},LinePattern.Dot,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,255},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{-152,87},{148,47}},"%name",0,TextAlignment.Center)}}
// ""
// {-100.0,-100.0,100.0,100.0,true,0.1,1.0,1.0,{Line(true,{0.0,0.0},0,{{-90,0},{-70,0}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{70,0},{90,0}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Rectangle(true,{0.0,0.0},0,{0,0,255},{255,255,255},LinePattern.Solid,FillPattern.Solid,0.25,BorderPattern.None,{{-70,30},{70,-30}},0),Line(true,{0.0,0.0},0,{{-52,-50},{48,50}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Polygon(true,{0.0,0.0},0,{0,0,255},{0,0,255},LinePattern.Solid,FillPattern.Solid,0.25,{{40,52},{50,42},{54,56},{40,52}},Smooth.None),Line(true,{0.0,0.0},0,{{0,-100},{0,-30}},{127,0,0},LinePattern.Dot,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,255},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{-156,109},{144,69}},"%name",0,TextAlignment.Center)}}
// ""
// {-100.0,-100.0,100.0,100.0,true,0.1,1.0,1.0,{Rectangle(true,{0.0,0.0},0,{0,0,0},{192,192,192},LinePattern.Solid,FillPattern.HorizontalCylinder,0.25,BorderPattern.None,{{-85,10},{-36,-10}},0),Line(true,{0.0,0.0},0,{{0,90},{0,40}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Rectangle(true,{0.0,0.0},0,{0,0,0},{192,192,192},LinePattern.Solid,FillPattern.HorizontalCylinder,0.25,BorderPattern.None,{{35,10},{100,-10}},0),Ellipse(true,{0.0,0.0},0,{0,0,255},{255,255,255},LinePattern.Solid,FillPattern.Solid,0.25,{{-40,40},{40,-40}},0,360),Line(true,{0.0,0.0},0,{{0,-90},{0,-40}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,255},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{0,-50},{199,-90}},"%name",0,TextAlignment.Center),Text(true,{0.0,0.0},0,{160,160,164},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{0,80},{189,46}},"k=%k",0,TextAlignment.Center),Line(true,{0.0,0.0},0,{{-100,-30},{-40,-30}},{0,0,0},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{-100,-50},{-80,-30}},{0,0,0},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{-80,-50},{-60,-30}},{0,0,0},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{-60,-50},{-40,-30}},{0,0,0},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{-70,-30},{-70,-10}},{0,0,0},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None)}}
// ""
// {-100.0,-100.0,100.0,100.0,true,0.1,2.0,2.0,{Rectangle(true,{0.0,0.0},0,{0,0,255},{255,255,255},LinePattern.Solid,FillPattern.Solid,0.25,BorderPattern.None,{{-70,30},{70,-30}},0),Rectangle(true,{0.0,0.0},0,{0,0,255},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,BorderPattern.None,{{-70,30},{70,-30}},0),Line(true,{0.0,0.0},0,{{-90,0},{-70,0}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{70,0},{90,0}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,0},{0,0,0},LinePattern.None,FillPattern.None,0.25,{{-136,-42},{142,-74}},"G=%G",0,TextAlignment.Center),Line(false,{0.0,0.0},0,{{0,-100},{0,-30}},{127,0,0},LinePattern.Dot,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,255},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{-152,87},{148,47}},"%name",0,TextAlignment.Center),Text(true,{0.0,0.0},0,{0,0,0},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{-144,-40},{142,-72}},"G=%G",0,TextAlignment.Center)}}
// ""
// {-100.0,-100.0,100.0,100.0,true,0.1,2.0,2.0,{Line(true,{0.0,0.0},0,{{-60,50},{60,50}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{-40,30},{40,30}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{-20,10},{20,10}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Line(true,{0.0,0.0},0,{{0,90},{0,50}},{0,0,255},LinePattern.Solid,0.25,{Arrow.None,Arrow.None},3,Smooth.None),Text(true,{0.0,0.0},0,{0,0,255},{0,0,0},LinePattern.Solid,FillPattern.None,0.25,{{-144,-19},{156,-59}},"%name",0,TextAlignment.Center)}}
// ""
// {{true,0.0,100.0,10.0,-10.0,-10.0,10.0,270.0,0.0,0.0,-,-,-,-,0.0}}
// ""
// {R, T_ref, alpha}
// ""
// 
// ""
// {start}
// ""
//  = 1
// ""
// 300.15
// ""
// {}
// ""
// 0
// ""
// {}
// ""
// {"<html>
// <p>
// This package contains basic components 1D mechanical rotational drive trains.
// </p>
// </html>"}
// ""
// 
// ""
// {"<HTML>
// <p>
// This package contains basic analog electrical components.
// </p>
// 
// </HTML>
// ","<html>
// <dl>
// <dt>
// <b>Main Authors:</b>
// <dd>
// Christoph Clau&szlig;
//     &lt;<a href=\"mailto:Christoph.Clauss@eas.iis.fraunhofer.de\">Christoph.Clauss@eas.iis.fraunhofer.de</a>&gt;<br>
//     Andr&eacute; Schneider
//     &lt;<a href=\"mailto:Andre.Schneider@eas.iis.fraunhofer.de\">Andre.Schneider@eas.iis.fraunhofer.de</a>&gt;<br>
//     Fraunhofer Institute for Integrated Circuits<br>
//     Design Automation Department<br>
//     Zeunerstra&szlig;e 38<br>
//     D-01069 Dresden<br>
// <p>
// </dl>
// </html>"}
// ""
// {"<html>
// <p>EMF transforms electrical energy into rotational mechanical energy. It is used as basic building block of an electrical motor. The mechanical connector flange can be connected to elements of the Modelica.Mechanics.Rotational library. flange.tau is the cut-torque, flange.phi is the angle at the rotational connection. </p>
// </html>","<html>
// <ul>
// <li><i> 1998   </i>
//        by Martin Otter<br> initially implemented<br>
//        </li>
// </ul>
// </html>"}
// ""
// endResult
