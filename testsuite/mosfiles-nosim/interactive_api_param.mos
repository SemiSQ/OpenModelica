// name: API-Parameters
// keywords: Graphical API, Parameters
// status: correct
// 
//  Subset of the Graphical API for accessing parameters and modifiers
//
loadFile("interactive_api_param.mo");
getComponentModifierNames(C,b1);
getComponentModifierValue(C,b1.a1);
setComponentModifierValue(C,b1.a1,Code((p1=45)));
getComponentModifierValue(C,b1.a1);
setComponentModifierValue(C,b1.a2,Code(=33));
getComponentModifierValue(C,b1.a2);
getExtendsModifierNames(D2,B2);
getExtendsModifierValue(D2,B2,a.x);
setExtendsModifierValue(D2,B2,a.x,Code(=10));
getExtendsModifierValue(D2,B2,a.x);
setComponentModifierValue(E,a.p1,Code(()));
getComponentModifierNames(E,a);
getInheritanceCount(T1);
getInheritanceCount(Types.T2);
getNthInheritedClass(T1,1);
getNthInheritedClass(T2,1);
getNthInheritedClass(Types.T2,1);
getExtendsModifierNames(Resistance,Real);
setComponentModifierValue(Q,x.start,Code(=4));
getComponentModifierValue(Q,x.start);
getComponentModifierValue(Q,x);
getExtendsModifierNames(Modelica.Blocks.Interfaces.BooleanInput,Modelica.Blocks.Interfaces.BooleanSignal);
setComponentModifierValue(M,x.start,Code(()));
getComponentModifierNames(M,x);
getComponentModifierValue(M,x);
getComponentModifierValue(M2,x);
setComponentModifierValue(M2,x,Code(()));
setComponentModifierValue(M3,x,Code(()));
getComponentModifierNames(M,x);
getComponentModifierValue(M3,x);
setComponentModifierValue(M4,x,Code(()));
setComponentModifierValue(M5,x.start,Code(()));
setComponentModifierValue(M7,a1.x.fixed,Code(()));
setComponentModifierValue(M7,a1.x.fixed,Code(=false));
getComponentModifierValue(M7,a1.x.fixed);
setComponentModifierValue(M7,a1.x.fixed,Code(=true));
getComponentModifierValue(M7,a1.x.fixed);
getComponentModifierNames(M5,x);
getComponentModifierNames(M7,x);
setExtendsModifierValue(K,Resistor,R,Code(=2));
setExtendsModifierValue(K2,Resistor,R.start,Code(=2.25));
getExtendsModifierValue(K2,Resistor,R.start);
getExtendsModifierValue(K2,Resistor,R.fixed);
setExtendsModifierValue(K2,Resistor,R.start,Code(()));
getExtendsModifierValue(K2,Resistor,R.start);
getExtendsModifierValue(K2,Resistor,R.fixed);
setExtendsModifierValue(K3,Resistor,R,Code(=2));
getExtendsModifierValue(K3,Resistor,R.start);
getExtendsModifierValue(K3,Resistor,R);
setExtendsModifierValue(K3,Resistor,R.fixed,Code(=false));
setExtendsModifierValue(K3,Resistor,R.start,Code(=2.21));
getExtendsModifierValue(K3,Resistor,R);
getExtendsModifierNames(K4,Resistor);
setExtendsModifierValue(K4,Resistor,x,Code(()));
getExtendsModifierValue(K4,Resistor,x);
setExtendsModifierValue(K5,Resistor,x,Code(()));
getExtendsModifierNames(K5,Resistor);
getExtendsModifierValue(K5,Resistor,x.fixed);
getExtendsModifierValue(K5,Resistor,x.start);
// Result:
// true
// {a1.p1, a1.p2, a2.p2}
// (p1 = 0, p2 = 0)
// Ok
// (p1 = 45)
// Ok
//  = 33
// {a.x, f}
// = 2 * y
// Ok
// = 10
// Ok
// {p2}
// 1
// 1
// Real
// Real
// Types.T1
// {unit}
// Ok
// = 4
// 1
// {}
// Ok
// {}
// 1
// 1
// Ok
// Ok
// {}
// 
// Ok
// Ok
// Ok
// Ok
// = false
// Ok
// = true
// {}
// {}
// Ok
// Ok
// = 2.25
// = true
// Ok
// Error
// = true
// Ok
// = 5
// (start = 5, fixed = true) = 2
// Ok
// Ok
// (start = 2.21, fixed = false) = 2
// {x, x.start, x.fixed}
// Ok
// (start = 2, fixed = true)
// Ok
// {x.fixed, x.start}
// = true
// = 2
// endResult
