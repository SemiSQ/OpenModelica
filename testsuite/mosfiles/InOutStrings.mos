// name:     String array arguments
// keywords: array, string, external function
// status:   correct

// We need -fPIC to build on 64-bit Linux, but this prints warnings
// in Windows. GCC is supposed to not output warnings since we use
// the -w flag. If it doesn't work, do some nice work-around that
// keeps -fPIC. Adding the source files instead of o-files in the
// annotation usually works.
system("g++ -c -w -fPIC -o libInOutStrings1.o InOutStrings_fkn1.cc");
system("g++ -c -w -fPIC -o libInOutStrings2.o InOutStrings_fkn2.cc");
loadFile("InOutStrings.mo");
simulate(c1);
echo(false);
s:=readSimulationResultSize("c1_res.plt");
res:=readSimulationResult("c1_res.plt",{x},s);
echo(true);
res[1,1];
ext1({1,2,3});

simulate(c2);
echo(false);
s:=readSimulationResultSize("c2_res.plt");
res:=readSimulationResult("c2_res.plt",{x},s);
echo(true);
res[1,1];
ext2({"a","b","c"});
system("rm -f c1.makefile c1.log c1.libs c1_init.txt c1_functions.cpp c1.cpp ext1.so ext1.makefile ext1.log ext1.libs ext1.c c2.makefile c2.log c2.libs c2_init.txt c2_functions.cpp c2.cpp c1_res.plt c1 output.log c2_res.plt c2 ext2.so ext2.makefile ext2.log ext2.libs ext2.c libInOutStrings1.o libInOutStrings2.o");
// Result:
// 0
// 0
// true
// record SimulationResult
//     resultFile = "c1_res.plt",
//     messages = ""
// end SimulationResult;
// true
// 4.0
// 3
// record SimulationResult
//     resultFile = "c2_res.plt",
//     messages = ""
// end SimulationResult;
// true
// 4.0
// 3
// 0
// endResult
