// name:     Inverted pendulum
// keywords: simulate, msl, multibody
// status:   correct
// 
//  
//
loadFile("invertedPendulumTotal.mo");

instantiateModel(IntroductoryExamples.Systems.InvertedPendulum);
getErrorString();
//checkModel(IntroductoryExamples.Systems.InvertedPendulum);
//setDebugFlags("failtrace");
//buildModel(IntroductoryExamples.Systems.InvertedPendulum);
//getErrorString();
//simulate(IntroductoryExamples.Systems.InvertedPendulum,stopTime=20,numberOfIntervals=-1);
//getErrorString();
val(controller.y,0.5:1:19.5);
getErrorString();

// Result:
// true
// "function MCVisualShape.local_normalize
// input Real[3] iv;
// output Real[3] ov;
// Real length;
// algorithm
//   length := sqrt(iv[1] ^ 2.0 + iv[2] ^ 2.0 + iv[3] ^ 2.0);
//   ov := {iv[1] / length,iv[2] / length,iv[3] / length};
// end MCVisualShape.local_normalize;
// 
// function Modelica.Blocks.Sources.TimeTable.getInterpolationCoefficients
// input Real[:, 2] table "Table for interpolation";
// input Real offset "y-offset";
// input Real startTime "time-offset";
// input Real t "Actual time instant";
// input Integer last "Last used lower grid index";
// input Real TimeEps "Relative epsilon to check for identical time instants";
// output Real a "Interpolation coefficients a (y=a*x + b)";
// output Real b "Interpolation coefficients b (y=a*x + b)";
// output Real nextEvent "Next event instant";
// output Integer next "New lower grid index";
// protected Integer columns = 2 "Column to be interpolated";
// protected Integer ncol = 2 "Number of columns to be interpolated";
// protected Integer nrow = size(table,1) "Number of table rows";
// protected Integer next0;
// protected Real tp;
// protected Real dt;
// algorithm
//   next := last;
//   nextEvent := t - TimeEps * abs(t);
//   tp := (t + TimeEps * abs(t)) - startTime;
//   if tp < 0.0 then
//     nextEvent := startTime;
//     a := 0.0;
//     b := offset;
//   elseif nrow < 2 then
//     a := 0.0;
//     b := offset + table[1, columns];
//   else
//     while next < nrow AND tp >= table[next, 1] loop
//       next := 1 + next;
//     end while;
//     if next < nrow then
//       nextEvent := startTime + table[next, 1];
//     end if;
//     next0 := next - 1;
//     dt := table[next, 1] - table[next0, 1];
//     if dt <= TimeEps * abs(table[next, 1]) then
//       a := 0.0;
//       b := offset + table[next, columns];
//     else
//       a := (table[next, columns] - table[next0, columns]) / dt;
//       b := (offset + table[next0, columns]) - a * table[next0, 1];
//     end if;
//   end if;
//   b := b - a * startTime;
// end Modelica.Blocks.Sources.TimeTable.getInterpolationCoefficients;
// 
// function PackMaterial
// input Real r;
// input Real g;
// input Real b;
// input Real spec;
// output Real packedMaterial;
// Integer i1;
// Integer i2;
// Integer i3;
// Integer i4;
// algorithm
//   i1 := integer(floor(99.0 * r));
//   if i1 < 0 then
//     i1 := 0;
//   end if;
//   if i1 > 99 then
//     i1 := 99;
//   end if;
//   i2 := integer(floor(99.0 * g));
//   if i2 < 0 then
//     i2 := 0;
//   end if;
//   if i2 > 99 then
//     i2 := 99;
//   end if;
//   i3 := integer(floor(99.0 * b));
//   if i3 < 0 then
//     i3 := 0;
//   end if;
//   if i3 > 99 then
//     i3 := 99;
//   end if;
//   i4 := integer(floor(9.0 * spec));
//   if i4 < 0 then
//     i4 := 0;
//   end if;
//   if i4 > 99 then
//     i4 := 9;
//   end if;
//   packedMaterial := /*REAL*/(100000 * i1 + 1000 * i2 + 10 * i3 + i4);
// end PackMaterial;
// 
// function PackShape
// input String shape;
// output Real packedShape;
// algorithm
//   if shape == "box" then
//     packedShape := 101.0;
//   elseif shape == "sphere" then
//     packedShape := 102.0;
//   elseif shape == "cylinder" then
//     packedShape := 103.0;
//   elseif shape == "cone" then
//     packedShape := 104.0;
//   elseif shape == "pipe" then
//     packedShape := 105.0;
//   elseif shape == "beam" then
//     packedShape := 106.0;
//   elseif shape == "wirebox" then
//     packedShape := 107.0;
//   elseif shape == "gearwheel" then
//     packedShape := 108.0;
//   elseif shape == "spring" then
//     packedShape := 111.0;
//   else
//     packedShape := 200.0;
//   end if;
// end PackShape;
// 
// class IntroductoryExamples.Systems.InvertedPendulum
// parameter Integer referenceType(min = 1, max = 3) = 2 "Type of reference signal: 1=step, 2=pulse, 3=time table";
// parameter Real motor.R(quantity = "Resistance", unit = "Ohm") = 2.6 "Resistance";
// parameter Real motor.L(quantity = "Inductance", unit = "H") = 0.001 "Inductance";
// parameter Real motor.k(unit = "N.m/A") = 0.00767 "Transformation coefficient";
// Real motor.voltageSource.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real motor.voltageSource.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.voltageSource.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real motor.voltageSource.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.voltageSource.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// input Real motor.voltageSource.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
// Real motor.resistor.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real motor.resistor.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real motor.resistor.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.resistor.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real motor.resistor.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.resistor.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real motor.resistor.R(quantity = "Resistance", unit = "Ohm") = motor.R "Resistance";
// Real motor.inductor.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real motor.inductor.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real motor.inductor.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.inductor.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real motor.inductor.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.inductor.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real motor.inductor.L(quantity = "Inductance", unit = "H") = motor.L "Inductance";
// parameter Real motor.EMF.k(unit = "N.m/A") = motor.k "Transformation coefficient";
// Real motor.EMF.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
// Real motor.EMF.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
// Real motor.EMF.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
// Real motor.EMF.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.EMF.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real motor.EMF.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.EMF.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real motor.EMF.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real motor.EMF.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// input Real motor.u;
// Real motor.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real motor.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real motor.ground.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real motor.ground.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real controller.A[1,1] = -1.80378 "Observer A matrix";
// parameter Real controller.A[1,2] = 1.0 "Observer A matrix";
// parameter Real controller.A[1,3] = -0.301845 "Observer A matrix";
// parameter Real controller.A[1,4] = 0.0 "Observer A matrix";
// parameter Real controller.A[2,1] = -1.67236 "Observer A matrix";
// parameter Real controller.A[2,2] = -13.7653 "Observer A matrix";
// parameter Real controller.A[2,3] = -0.753808 "Observer A matrix";
// parameter Real controller.A[2,4] = 0.0 "Observer A matrix";
// parameter Real controller.A[3,1] = -0.301845 "Observer A matrix";
// parameter Real controller.A[3,2] = 0.0 "Observer A matrix";
// parameter Real controller.A[3,3] = -7.83137 "Observer A matrix";
// parameter Real controller.A[3,4] = 1.0 "Observer A matrix";
// parameter Real controller.A[4,1] = -0.617197 "Observer A matrix";
// parameter Real controller.A[4,2] = -19.3623 "Observer A matrix";
// parameter Real controller.A[4,3] = -14.7496 "Observer A matrix";
// parameter Real controller.A[4,4] = 0.0 "Observer A matrix";
// parameter Real controller.B[1,1] = 0.0 "Observer B matrix";
// parameter Real controller.B[1,2] = 1.80378 "Observer B matrix";
// parameter Real controller.B[1,3] = 0.301845 "Observer B matrix";
// parameter Real controller.B[2,1] = 2.69088 "Observer B matrix";
// parameter Real controller.B[2,2] = 1.67236 "Observer B matrix";
// parameter Real controller.B[2,3] = 2.29112 "Observer B matrix";
// parameter Real controller.B[3,1] = 0.0 "Observer B matrix";
// parameter Real controller.B[3,2] = 0.301845 "Observer B matrix";
// parameter Real controller.B[3,3] = 7.83137 "Observer B matrix";
// parameter Real controller.B[4,1] = 3.785 "Observer B matrix";
// parameter Real controller.B[4,2] = 0.617197 "Observer B matrix";
// parameter Real controller.B[4,3] = 30.7107 "Observer B matrix";
// parameter Real controller.C[1,1] = 1.0 "Observer C matrix";
// parameter Real controller.C[1,2] = 0.0 "Observer C matrix";
// parameter Real controller.C[1,3] = 0.0 "Observer C matrix";
// parameter Real controller.C[1,4] = 0.0 "Observer C matrix";
// parameter Real controller.C[2,1] = 0.0 "Observer C matrix";
// parameter Real controller.C[2,2] = 1.0 "Observer C matrix";
// parameter Real controller.C[2,3] = 0.0 "Observer C matrix";
// parameter Real controller.C[2,4] = 0.0 "Observer C matrix";
// parameter Real controller.C[3,1] = 0.0 "Observer C matrix";
// parameter Real controller.C[3,2] = 0.0 "Observer C matrix";
// parameter Real controller.C[3,3] = 1.0 "Observer C matrix";
// parameter Real controller.C[3,4] = 0.0 "Observer C matrix";
// parameter Real controller.C[4,1] = 0.0 "Observer C matrix";
// parameter Real controller.C[4,2] = 0.0 "Observer C matrix";
// parameter Real controller.C[4,3] = 0.0 "Observer C matrix";
// parameter Real controller.C[4,4] = 1.0 "Observer C matrix";
// parameter Real controller.D[1,1] = 0.0 "Observer D matrix";
// parameter Real controller.D[1,2] = 0.0 "Observer D matrix";
// parameter Real controller.D[1,3] = 0.0 "Observer D matrix";
// parameter Real controller.D[2,1] = 0.0 "Observer D matrix";
// parameter Real controller.D[2,2] = 0.0 "Observer D matrix";
// parameter Real controller.D[2,3] = 0.0 "Observer D matrix";
// parameter Real controller.D[3,1] = 0.0 "Observer D matrix";
// parameter Real controller.D[3,2] = 0.0 "Observer D matrix";
// parameter Real controller.D[3,3] = 0.0 "Observer D matrix";
// parameter Real controller.D[4,1] = 0.0 "Observer D matrix";
// parameter Real controller.D[4,2] = 0.0 "Observer D matrix";
// parameter Real controller.D[4,3] = 0.0 "Observer D matrix";
// parameter Real controller.K_L[1,1] = -14.1421 "L matrix such that eigenvalues for A-B*L is inside stability region";
// parameter Real controller.K_L[1,2] = -23.685 "L matrix such that eigenvalues for A-B*L is inside stability region";
// parameter Real controller.K_L[1,3] = 114.738 "L matrix such that eigenvalues for A-B*L is inside stability region";
// parameter Real controller.K_L[1,4] = 21.4806 "L matrix such that eigenvalues for A-B*L is inside stability region";
// parameter Real controller.k_Lr = -14.1421 "Static gain in order to make system gain equal to one";
// parameter Real controller.uMax(min = 0.0) = 10.0 "Maximum output value";
// parameter Real controller.table[1,1] = 0.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[1,2] = 0.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[2,1] = 2.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[2,2] = 0.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[3,1] = 2.5 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[3,2] = 1.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[4,1] = 3.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[4,2] = -1.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[5,1] = 3.5 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[5,2] = 1.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[6,1] = 4.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[6,2] = 0.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[7,1] = 4.5 "Table matrix (time = first column). Only if inputType=3";
// parameter Real controller.table[7,2] = 0.0 "Table matrix (time = first column). Only if inputType=3";
// parameter Integer controller.referenceType(min = 1, max = 3) = referenceType "Type of reference signal: 1=step, 2=pulse, 3=time table";
// output Real controller.step.y "Connector of Real output signal";
// parameter Real controller.step.k = 1.0 "Constant output value";
// parameter Integer controller.observer.nin = 3 "Number of inputs";
// parameter Integer controller.observer.nout = 4 "Number of outputs";
// input Real controller.observer.u[1] "Connector of Real input signals";
// input Real controller.observer.u[2] "Connector of Real input signals";
// input Real controller.observer.u[3] "Connector of Real input signals";
// output Real controller.observer.y[1] "Connector of Real output signals";
// output Real controller.observer.y[2] "Connector of Real output signals";
// output Real controller.observer.y[3] "Connector of Real output signals";
// output Real controller.observer.y[4] "Connector of Real output signals";
// parameter Real controller.observer.A[1,1] = controller.A[1,1] "Matrix A of state space model";
// parameter Real controller.observer.A[1,2] = controller.A[1,2] "Matrix A of state space model";
// parameter Real controller.observer.A[1,3] = controller.A[1,3] "Matrix A of state space model";
// parameter Real controller.observer.A[1,4] = controller.A[1,4] "Matrix A of state space model";
// parameter Real controller.observer.A[2,1] = controller.A[2,1] "Matrix A of state space model";
// parameter Real controller.observer.A[2,2] = controller.A[2,2] "Matrix A of state space model";
// parameter Real controller.observer.A[2,3] = controller.A[2,3] "Matrix A of state space model";
// parameter Real controller.observer.A[2,4] = controller.A[2,4] "Matrix A of state space model";
// parameter Real controller.observer.A[3,1] = controller.A[3,1] "Matrix A of state space model";
// parameter Real controller.observer.A[3,2] = controller.A[3,2] "Matrix A of state space model";
// parameter Real controller.observer.A[3,3] = controller.A[3,3] "Matrix A of state space model";
// parameter Real controller.observer.A[3,4] = controller.A[3,4] "Matrix A of state space model";
// parameter Real controller.observer.A[4,1] = controller.A[4,1] "Matrix A of state space model";
// parameter Real controller.observer.A[4,2] = controller.A[4,2] "Matrix A of state space model";
// parameter Real controller.observer.A[4,3] = controller.A[4,3] "Matrix A of state space model";
// parameter Real controller.observer.A[4,4] = controller.A[4,4] "Matrix A of state space model";
// parameter Real controller.observer.B[1,1] = controller.B[1,1] "Matrix B of state space model";
// parameter Real controller.observer.B[1,2] = controller.B[1,2] "Matrix B of state space model";
// parameter Real controller.observer.B[1,3] = controller.B[1,3] "Matrix B of state space model";
// parameter Real controller.observer.B[2,1] = controller.B[2,1] "Matrix B of state space model";
// parameter Real controller.observer.B[2,2] = controller.B[2,2] "Matrix B of state space model";
// parameter Real controller.observer.B[2,3] = controller.B[2,3] "Matrix B of state space model";
// parameter Real controller.observer.B[3,1] = controller.B[3,1] "Matrix B of state space model";
// parameter Real controller.observer.B[3,2] = controller.B[3,2] "Matrix B of state space model";
// parameter Real controller.observer.B[3,3] = controller.B[3,3] "Matrix B of state space model";
// parameter Real controller.observer.B[4,1] = controller.B[4,1] "Matrix B of state space model";
// parameter Real controller.observer.B[4,2] = controller.B[4,2] "Matrix B of state space model";
// parameter Real controller.observer.B[4,3] = controller.B[4,3] "Matrix B of state space model";
// parameter Real controller.observer.C[1,1] = controller.C[1,1] "Matrix C of state space model";
// parameter Real controller.observer.C[1,2] = controller.C[1,2] "Matrix C of state space model";
// parameter Real controller.observer.C[1,3] = controller.C[1,3] "Matrix C of state space model";
// parameter Real controller.observer.C[1,4] = controller.C[1,4] "Matrix C of state space model";
// parameter Real controller.observer.C[2,1] = controller.C[2,1] "Matrix C of state space model";
// parameter Real controller.observer.C[2,2] = controller.C[2,2] "Matrix C of state space model";
// parameter Real controller.observer.C[2,3] = controller.C[2,3] "Matrix C of state space model";
// parameter Real controller.observer.C[2,4] = controller.C[2,4] "Matrix C of state space model";
// parameter Real controller.observer.C[3,1] = controller.C[3,1] "Matrix C of state space model";
// parameter Real controller.observer.C[3,2] = controller.C[3,2] "Matrix C of state space model";
// parameter Real controller.observer.C[3,3] = controller.C[3,3] "Matrix C of state space model";
// parameter Real controller.observer.C[3,4] = controller.C[3,4] "Matrix C of state space model";
// parameter Real controller.observer.C[4,1] = controller.C[4,1] "Matrix C of state space model";
// parameter Real controller.observer.C[4,2] = controller.C[4,2] "Matrix C of state space model";
// parameter Real controller.observer.C[4,3] = controller.C[4,3] "Matrix C of state space model";
// parameter Real controller.observer.C[4,4] = controller.C[4,4] "Matrix C of state space model";
// parameter Real controller.observer.D[1,1] = controller.D[1,1] "Matrix D of state space model";
// parameter Real controller.observer.D[1,2] = controller.D[1,2] "Matrix D of state space model";
// parameter Real controller.observer.D[1,3] = controller.D[1,3] "Matrix D of state space model";
// parameter Real controller.observer.D[2,1] = controller.D[2,1] "Matrix D of state space model";
// parameter Real controller.observer.D[2,2] = controller.D[2,2] "Matrix D of state space model";
// parameter Real controller.observer.D[2,3] = controller.D[2,3] "Matrix D of state space model";
// parameter Real controller.observer.D[3,1] = controller.D[3,1] "Matrix D of state space model";
// parameter Real controller.observer.D[3,2] = controller.D[3,2] "Matrix D of state space model";
// parameter Real controller.observer.D[3,3] = controller.D[3,3] "Matrix D of state space model";
// parameter Real controller.observer.D[4,1] = controller.D[4,1] "Matrix D of state space model";
// parameter Real controller.observer.D[4,2] = controller.D[4,2] "Matrix D of state space model";
// parameter Real controller.observer.D[4,3] = controller.D[4,3] "Matrix D of state space model";
// parameter Integer controller.observer.initType(min = 1, max = 4) = 1 "Type of initialization";
// parameter Real controller.observer.x_start[1] = 0.0 "Initial or guess values of states";
// parameter Real controller.observer.x_start[2] = 0.0 "Initial or guess values of states";
// parameter Real controller.observer.x_start[3] = 0.0 "Initial or guess values of states";
// parameter Real controller.observer.x_start[4] = 0.0 "Initial or guess values of states";
// parameter Real controller.observer.y_start[1] = 0.0 "Initial values of outputs (remaining states are in steady state if possible)";
// parameter Real controller.observer.y_start[2] = 0.0 "Initial values of outputs (remaining states are in steady state if possible)";
// parameter Real controller.observer.y_start[3] = 0.0 "Initial values of outputs (remaining states are in steady state if possible)";
// parameter Real controller.observer.y_start[4] = 0.0 "Initial values of outputs (remaining states are in steady state if possible)";
// output Real controller.observer.x[1](start = controller.observer.x_start[1]) "State vector";
// output Real controller.observer.x[2](start = controller.observer.x_start[2]) "State vector";
// output Real controller.observer.x[3](start = controller.observer.x_start[3]) "State vector";
// output Real controller.observer.x[4](start = controller.observer.x_start[4]) "State vector";
// protected parameter Integer controller.observer.nx = 4 "number of states";
// protected parameter Integer controller.observer.ny = 4 "number of outputs";
// parameter Integer controller.L.nin = 4 "Number of inputs";
// parameter Integer controller.L.nout = 1 "Number of outputs";
// input Real controller.L.u[1] "Connector of Real input signals";
// input Real controller.L.u[2] "Connector of Real input signals";
// input Real controller.L.u[3] "Connector of Real input signals";
// input Real controller.L.u[4] "Connector of Real input signals";
// output Real controller.L.y[1] "Connector of Real output signals";
// parameter Real controller.L.K[1,1] = controller.K_L[1,1] "Gain matrix which is multiplied with the input";
// parameter Real controller.L.K[1,2] = controller.K_L[1,2] "Gain matrix which is multiplied with the input";
// parameter Real controller.L.K[1,3] = controller.K_L[1,3] "Gain matrix which is multiplied with the input";
// parameter Real controller.L.K[1,4] = controller.K_L[1,4] "Gain matrix which is multiplied with the input";
// input Real controller.feedback.u1;
// output Real controller.feedback.y;
// input Real controller.feedback.u2;
// parameter Real controller.L_r.k = controller.k_Lr "Gain value multiplied with input signal";
// input Real controller.L_r.u "Input signal connector";
// output Real controller.L_r.y "Output signal connector";
// parameter Integer controller.mux.n1 = 1 "dimension of input signal connector 1";
// parameter Integer controller.mux.n2 = 1 "dimension of input signal connector 2";
// parameter Integer controller.mux.n3 = 1 "dimension of input signal connector 3";
// input Real controller.mux.u1[1] "Connector of Real input signals 1";
// input Real controller.mux.u2[1] "Connector of Real input signals 2";
// input Real controller.mux.u3[1] "Connector of Real input signals 3";
// output Real controller.mux.y[1] "Connector of Real output signals";
// output Real controller.mux.y[2] "Connector of Real output signals";
// output Real controller.mux.y[3] "Connector of Real output signals";
// output Real controller.pulse.y "Connector of Real output signal";
// parameter Real controller.pulse.amplitude = 1.0 "Amplitude of pulse";
// parameter Real controller.pulse.width(min = 1e-60, max = 100.0) = 50.0 "Width of pulse in % of periods";
// parameter Real controller.pulse.period(quantity = "Time", unit = "s", min = 1e-60) = 10.0 "Time for one period";
// parameter Real controller.pulse.offset = -0.5 "Offset of output signals";
// parameter Real controller.pulse.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
// protected Real controller.pulse.T0(quantity = "Time", unit = "s", start = controller.pulse.startTime) "Start time of current period";
// protected Real controller.pulse.T_width(quantity = "Time", unit = "s") = controller.pulse.period * controller.pulse.width / 100.0;
// input Real controller.switch1.u1 "Connector of first Real input signal";
// input Boolean controller.switch1.u2 "Connector of Boolean input signal";
// input Real controller.switch1.u3 "Connector of second Real input signal";
// output Real controller.switch1.y "Connector of Real output signal";
// output Boolean controller.ConstantQ.y "Connector of Boolean output signal";
// parameter Boolean controller.ConstantQ.k = controller.k1 "Constant output value";
// input Real controller.limiter.u "Connector of Real input signal";
// output Real controller.limiter.y "Connector of Real output signal";
// parameter Real controller.limiter.uMax = controller.uMax "Upper limits of input signals";
// parameter Real controller.limiter.uMin = -controller.limiter.uMax "Lower limits of input signals";
// parameter Boolean controller.limiter.limitsAtInit = true "= false, if limits are ignored during initializiation (i.e., y=u)";
// input Real controller.angle;
// input Real controller.xPos;
// output Real controller.y;
// input Real controller.switch2.u1 "Connector of first Real input signal";
// input Boolean controller.switch2.u2 "Connector of Boolean input signal";
// input Real controller.switch2.u3 "Connector of second Real input signal";
// output Real controller.switch2.y "Connector of Real output signal";
// output Boolean controller.ConstantQ1.y "Connector of Boolean output signal";
// parameter Boolean controller.ConstantQ1.k = controller.k2 "Constant output value";
// output Real controller.timeTable.y "Connector of Real output signal";
// parameter Real controller.timeTable.table[1,1] = controller.table[1,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[1,2] = controller.table[1,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[2,1] = controller.table[2,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[2,2] = controller.table[2,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[3,1] = controller.table[3,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[3,2] = controller.table[3,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[4,1] = controller.table[4,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[4,2] = controller.table[4,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[5,1] = controller.table[5,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[5,2] = controller.table[5,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[6,1] = controller.table[6,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[6,2] = controller.table[6,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[7,1] = controller.table[7,1] "Table matrix (time = first column)";
// parameter Real controller.timeTable.table[7,2] = controller.table[7,2] "Table matrix (time = first column)";
// parameter Real controller.timeTable.offset = 0.0 "Offset of output signal";
// parameter Real controller.timeTable.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
// protected Real controller.timeTable.a "Interpolation coefficients a of actual interval (y=a*x+b)";
// protected Real controller.timeTable.b "Interpolation coefficients b of actual interval (y=a*x+b)";
// protected Integer controller.timeTable.last(start = 1) "Last used lower grid index";
// protected Real controller.timeTable.nextEvent(quantity = "Time", unit = "s", start = 0.0) "Next event instant";
// protected parameter Boolean controller.k1 = controller.referenceType == 1 "Step signal";
// protected parameter Boolean controller.k2 = controller.referenceType == 2 "Pulse signal";
// protected parameter Boolean controller.k3 = controller.referenceType == 3 "Time table";
// parameter Real pendulum.l_pendulum(quantity = "Length", unit = "m") = 0.61 "Pendulum length";
// parameter Real pendulum.r_pendulum(quantity = "Length", unit = "m", min = 0.0) = 0.005 "Pendulum radius";
// parameter Real pendulum.d_pendulum(unit = "N.m.s/rad", min = 0.0) = 0.01 "Pendulum damper constant";
// parameter Real pendulum.rho_pendulum(unit = "g/cm3") = 7.7 "Pendulum material density";
// parameter Real pendulum.d_slider(unit = "N/(m/s)", min = 0.0) = 2.0 "Pendulum slider constant";
// parameter Real pendulum.rho_cart(unit = "g/cm3") = 0.445 "Cart material density";
// parameter Real pendulum.l_cart(quantity = "Length", unit = "m") = 0.1 "Cart length";
// parameter Real pendulum.h_cart(quantity = "Length", unit = "m") = 0.1 "Cart height";
// parameter Real pendulum.w_cart(quantity = "Length", unit = "m") = 0.1 "Cart width";
// parameter Real pendulum.inertialSystem.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Gravity constant";
// parameter Real pendulum.inertialSystem.ng[1] = 0.0 "Direction of gravity (gravity = g*ng)";
// parameter Real pendulum.inertialSystem.ng[2] = -1.0 "Direction of gravity (gravity = g*ng)";
// parameter Real pendulum.inertialSystem.ng[3] = 0.0 "Direction of gravity (gravity = g*ng)";
// parameter String pendulum.inertialSystem.label1 = "x" "Label of horizontal axis in icon";
// parameter String pendulum.inertialSystem.label2 = "y" "Label of vertical axis in icon";
// Real pendulum.inertialSystem.gravity[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
// Real pendulum.inertialSystem.gravity[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
// Real pendulum.inertialSystem.gravity[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
// output Real pendulum.inertialSystem.frame_b.r0[1](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.inertialSystem.frame_b.r0[2](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.inertialSystem.frame_b.r0[3](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.inertialSystem.frame_b.S[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.S[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.inertialSystem.frame_b.v[1](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.v[2](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.v[3](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.inertialSystem.frame_b.f[1](quantity = "Force", unit = "N");
// Real pendulum.inertialSystem.frame_b.f[2](quantity = "Force", unit = "N");
// Real pendulum.inertialSystem.frame_b.f[3](quantity = "Force", unit = "N");
// Real pendulum.inertialSystem.frame_b.t[1](quantity = "Torque", unit = "N.m");
// Real pendulum.inertialSystem.frame_b.t[2](quantity = "Torque", unit = "N.m");
// Real pendulum.inertialSystem.frame_b.t[3](quantity = "Torque", unit = "N.m");
// constant Real pendulum.cart.pi = 3.14159265358979;
// constant Real pendulum.cart.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.cart.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.cart.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.cart.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.cart.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.cart.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.cart.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.cart.frame_a.S[1,1] = pendulum.cart.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[1,2] = pendulum.cart.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[1,3] = pendulum.cart.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[2,1] = pendulum.cart.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[2,2] = pendulum.cart.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[2,3] = pendulum.cart.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[3,1] = pendulum.cart.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[3,2] = pendulum.cart.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.S[3,3] = pendulum.cart.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.cart.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.cart.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.cart.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.cart.fa[1];
// Real pendulum.cart.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.cart.fa[2];
// Real pendulum.cart.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.cart.fa[3];
// Real pendulum.cart.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.cart.ta[1];
// Real pendulum.cart.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.cart.ta[2];
// Real pendulum.cart.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.cart.ta[3];
// output Real pendulum.cart.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.cart.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.cart.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.cart.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.cart.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.cart.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.cart.frame_b.S[1,1] = pendulum.cart.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[1,2] = pendulum.cart.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[1,3] = pendulum.cart.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[2,1] = pendulum.cart.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[2,2] = pendulum.cart.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[2,3] = pendulum.cart.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[3,1] = pendulum.cart.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[3,2] = pendulum.cart.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.S[3,3] = pendulum.cart.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.cart.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.cart.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.cart.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.cart.fb[1];
// Real pendulum.cart.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.cart.fb[2];
// Real pendulum.cart.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.cart.fb[3];
// Real pendulum.cart.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.cart.tb[1];
// Real pendulum.cart.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.cart.tb[2];
// Real pendulum.cart.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.cart.tb[3];
// protected Real pendulum.cart.Sa[1,1](start = 1.0);
// protected Real pendulum.cart.Sa[1,2](start = 0.0);
// protected Real pendulum.cart.Sa[1,3](start = 0.0);
// protected Real pendulum.cart.Sa[2,1](start = 0.0);
// protected Real pendulum.cart.Sa[2,2](start = 1.0);
// protected Real pendulum.cart.Sa[2,3](start = 0.0);
// protected Real pendulum.cart.Sa[3,1](start = 0.0);
// protected Real pendulum.cart.Sa[3,2](start = 0.0);
// protected Real pendulum.cart.Sa[3,3](start = 1.0);
// protected Real pendulum.cart.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.cart.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.cart.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.cart.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.cart.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.cart.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.cart.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.Sb[1,1](start = 1.0);
// protected Real pendulum.cart.Sb[1,2](start = 0.0);
// protected Real pendulum.cart.Sb[1,3](start = 0.0);
// protected Real pendulum.cart.Sb[2,1](start = 0.0);
// protected Real pendulum.cart.Sb[2,2](start = 1.0);
// protected Real pendulum.cart.Sb[2,3](start = 0.0);
// protected Real pendulum.cart.Sb[3,1](start = 0.0);
// protected Real pendulum.cart.Sb[3,2](start = 0.0);
// protected Real pendulum.cart.Sb[3,3](start = 1.0);
// protected Real pendulum.cart.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.cart.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.cart.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.cart.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.cart.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.cart.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.cart.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.tb[3](quantity = "Torque", unit = "N.m");
// parameter Real pendulum.cart.r[1](quantity = "Length", unit = "m") = pendulum.l_cart "Vector from frame_a to frame_b, resolved in frame_a";
// parameter Real pendulum.cart.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
// parameter Real pendulum.cart.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
// parameter Real pendulum.cart.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left box plane, resolved in frame_a";
// parameter Real pendulum.cart.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left box plane, resolved in frame_a";
// parameter Real pendulum.cart.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left box plane, resolved in frame_a";
// parameter Real pendulum.cart.LengthDirection[1](quantity = "Length", unit = "m") = pendulum.cart.r[1] - pendulum.cart.r0[1] "Vector in length direction, resolved in frame_a";
// parameter Real pendulum.cart.LengthDirection[2](quantity = "Length", unit = "m") = pendulum.cart.r[2] - pendulum.cart.r0[2] "Vector in length direction, resolved in frame_a";
// parameter Real pendulum.cart.LengthDirection[3](quantity = "Length", unit = "m") = pendulum.cart.r[3] - pendulum.cart.r0[3] "Vector in length direction, resolved in frame_a";
// parameter Real pendulum.cart.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
// parameter Real pendulum.cart.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
// parameter Real pendulum.cart.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
// parameter Real pendulum.cart.Length(quantity = "Length", unit = "m") = sqrt((pendulum.cart.r[1] - pendulum.cart.r0[1]) ^ 2.0 + ((pendulum.cart.r[2] - pendulum.cart.r0[2]) ^ 2.0 + (pendulum.cart.r[3] - pendulum.cart.r0[3]) ^ 2.0)) "Length of box";
// parameter Real pendulum.cart.Width(quantity = "Length", unit = "m") = pendulum.w_cart "Width of box";
// parameter Real pendulum.cart.Height(quantity = "Length", unit = "m") = pendulum.h_cart "Height of box";
// parameter Real pendulum.cart.InnerWidth(quantity = "Length", unit = "m") = 0.0 "Width of inner box surface";
// parameter Real pendulum.cart.InnerHeight(quantity = "Length", unit = "m") = 0.0 "Height of inner box surface";
// parameter Real pendulum.cart.rho = pendulum.rho_cart "Density of box material [g/cm^3]";
// parameter Real pendulum.cart.Material[1] = 1.0 "Color and specular coefficient";
// parameter Real pendulum.cart.Material[2] = 0.0 "Color and specular coefficient";
// parameter Real pendulum.cart.Material[3] = 0.0 "Color and specular coefficient";
// parameter Real pendulum.cart.Material[4] = 0.5 "Color and specular coefficient";
// Real pendulum.cart.mo(quantity = "Mass", unit = "kg", min = 0.0);
// Real pendulum.cart.mi(quantity = "Mass", unit = "kg", min = 0.0);
// Real pendulum.cart.Sbox[1,1];
// Real pendulum.cart.Sbox[1,2];
// Real pendulum.cart.Sbox[1,3];
// Real pendulum.cart.Sbox[2,1];
// Real pendulum.cart.Sbox[2,2];
// Real pendulum.cart.Sbox[2,3];
// Real pendulum.cart.Sbox[3,1];
// Real pendulum.cart.Sbox[3,2];
// Real pendulum.cart.Sbox[3,3];
// Real pendulum.cart.l(quantity = "Length", unit = "m");
// Real pendulum.cart.w(quantity = "Length", unit = "m");
// Real pendulum.cart.h(quantity = "Length", unit = "m");
// Real pendulum.cart.wi(quantity = "Length", unit = "m");
// Real pendulum.cart.hi(quantity = "Length", unit = "m");
// parameter Real pendulum.cart.box.r0[1] = pendulum.cart.r0[1] "Origin of visual object.";
// parameter Real pendulum.cart.box.r0[2] = pendulum.cart.r0[2] "Origin of visual object.";
// parameter Real pendulum.cart.box.r0[3] = pendulum.cart.r0[3] "Origin of visual object.";
// parameter Real pendulum.cart.box.Length = pendulum.cart.Length "Length of visual object.";
// parameter Real pendulum.cart.box.Width = pendulum.cart.Width "Width of visual object.";
// parameter Real pendulum.cart.box.Height = pendulum.cart.Height "Height of visual object.";
// parameter Real pendulum.cart.box.LengthDirection[1] = pendulum.cart.LengthDirection[1] "Vector in length direction.";
// parameter Real pendulum.cart.box.LengthDirection[2] = pendulum.cart.LengthDirection[2] "Vector in length direction.";
// parameter Real pendulum.cart.box.LengthDirection[3] = pendulum.cart.LengthDirection[3] "Vector in length direction.";
// parameter Real pendulum.cart.box.WidthDirection[1] = pendulum.cart.WidthDirection[1] "Vector in width direction.";
// parameter Real pendulum.cart.box.WidthDirection[2] = pendulum.cart.WidthDirection[2] "Vector in width direction.";
// parameter Real pendulum.cart.box.WidthDirection[3] = pendulum.cart.WidthDirection[3] "Vector in width direction.";
// parameter String pendulum.cart.box.Shape = "box" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// parameter Real pendulum.cart.box.Material[1] = pendulum.cart.Material[1] "Color and specular coefficient.";
// parameter Real pendulum.cart.box.Material[2] = pendulum.cart.Material[2] "Color and specular coefficient.";
// parameter Real pendulum.cart.box.Material[3] = pendulum.cart.Material[3] "Color and specular coefficient.";
// parameter Real pendulum.cart.box.Material[4] = pendulum.cart.Material[4] "Color and specular coefficient.";
// parameter Real pendulum.cart.box.Extra = 0.0 "Additional size data for some of the shape types";
// input Real pendulum.cart.box.S[1,1] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[1,2] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[1,3] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[2,1] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[2,2] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[2,3] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[3,1] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[3,2] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.S[3,3] "3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
// input Real pendulum.cart.box.r[1] "Position of visual object.";
// input Real pendulum.cart.box.r[2] "Position of visual object.";
// input Real pendulum.cart.box.r[3] "Position of visual object.";
// Real pendulum.cart.box.nLength[1];
// Real pendulum.cart.box.nLength[2];
// Real pendulum.cart.box.nLength[3];
// Real pendulum.cart.box.nWidth[1];
// Real pendulum.cart.box.nWidth[2];
// Real pendulum.cart.box.nWidth[3];
// Real pendulum.cart.box.nHeight[1];
// Real pendulum.cart.box.nHeight[2];
// Real pendulum.cart.box.nHeight[3];
// parameter String pendulum.cart.box.mcShape.shapeType = pendulum.cart.box.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real pendulum.cart.box.mcShape.r[1](quantity = "Length", unit = "m") = pendulum.cart.box.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real pendulum.cart.box.mcShape.r[2](quantity = "Length", unit = "m") = pendulum.cart.box.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real pendulum.cart.box.mcShape.r[3](quantity = "Length", unit = "m") = pendulum.cart.box.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real pendulum.cart.box.mcShape.r_shape[1](quantity = "Length", unit = "m") = pendulum.cart.box.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real pendulum.cart.box.mcShape.r_shape[2](quantity = "Length", unit = "m") = pendulum.cart.box.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real pendulum.cart.box.mcShape.r_shape[3](quantity = "Length", unit = "m") = pendulum.cart.box.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real pendulum.cart.box.mcShape.lengthDirection[1] = pendulum.cart.box.LengthDirection[1] "Vector in length direction, resolved in object frame";
// input Real pendulum.cart.box.mcShape.lengthDirection[2] = pendulum.cart.box.LengthDirection[2] "Vector in length direction, resolved in object frame";
// input Real pendulum.cart.box.mcShape.lengthDirection[3] = pendulum.cart.box.LengthDirection[3] "Vector in length direction, resolved in object frame";
// input Real pendulum.cart.box.mcShape.widthDirection[1] = pendulum.cart.box.WidthDirection[1] "Vector in width direction, resolved in object frame";
// input Real pendulum.cart.box.mcShape.widthDirection[2] = pendulum.cart.box.WidthDirection[2] "Vector in width direction, resolved in object frame";
// input Real pendulum.cart.box.mcShape.widthDirection[3] = pendulum.cart.box.WidthDirection[3] "Vector in width direction, resolved in object frame";
// input Real pendulum.cart.box.mcShape.length(quantity = "Length", unit = "m") = pendulum.cart.box.Length "Length of visual object";
// input Real pendulum.cart.box.mcShape.width(quantity = "Length", unit = "m") = pendulum.cart.box.Width "Width of visual object";
// input Real pendulum.cart.box.mcShape.height(quantity = "Length", unit = "m") = pendulum.cart.box.Height "Height of visual object";
// input Real pendulum.cart.box.mcShape.extra = pendulum.cart.box.Extra "Additional size data for some of the shape types";
// input Real pendulum.cart.box.mcShape.color[1] = 255.0 * pendulum.cart.box.Material[1] "Color of shape";
// input Real pendulum.cart.box.mcShape.color[2] = 255.0 * pendulum.cart.box.Material[2] "Color of shape";
// input Real pendulum.cart.box.mcShape.color[3] = 255.0 * pendulum.cart.box.Material[3] "Color of shape";
// input Real pendulum.cart.box.mcShape.specularCoefficient = pendulum.cart.box.Material[4];
// input Real pendulum.cart.box.mcShape.S[1,1] = pendulum.cart.box.S[1,1] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[1,2] = pendulum.cart.box.S[1,2] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[1,3] = pendulum.cart.box.S[1,3] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[2,1] = pendulum.cart.box.S[2,1] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[2,2] = pendulum.cart.box.S[2,2] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[2,3] = pendulum.cart.box.S[2,3] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[3,1] = pendulum.cart.box.S[3,1] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[3,2] = pendulum.cart.box.S[3,2] "3 x 3 transformation matrix.";
// input Real pendulum.cart.box.mcShape.S[3,3] = pendulum.cart.box.S[3,3] "3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[1,1] = pendulum.cart.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[1,2] = pendulum.cart.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[1,3] = pendulum.cart.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[2,1] = pendulum.cart.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[2,2] = pendulum.cart.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[2,3] = pendulum.cart.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[3,1] = pendulum.cart.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[3,2] = pendulum.cart.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
// Real pendulum.cart.box.mcShape.Sshape[3,3] = pendulum.cart.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
// output Real pendulum.cart.box.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
// output Real pendulum.cart.box.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
// output Real pendulum.cart.box.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
// output Real pendulum.cart.box.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
// output Real pendulum.cart.box.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
// output Real pendulum.cart.box.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
// output Real pendulum.cart.box.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real pendulum.cart.box.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real pendulum.cart.box.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// Real pendulum.cart.box.mcShape.abs_n_x = sqrt(pendulum.cart.box.mcShape.lengthDirection[1] ^ 2.0 + (pendulum.cart.box.mcShape.lengthDirection[2] ^ 2.0 + pendulum.cart.box.mcShape.lengthDirection[3] ^ 2.0));
// Real pendulum.cart.box.mcShape.e_x[1] = if noEvent(pendulum.cart.box.mcShape.abs_n_x < 1e-10) then 1.0 else pendulum.cart.box.mcShape.lengthDirection[1] / pendulum.cart.box.mcShape.abs_n_x;
// Real pendulum.cart.box.mcShape.e_x[2] = if noEvent(pendulum.cart.box.mcShape.abs_n_x < 1e-10) then 0.0 else pendulum.cart.box.mcShape.lengthDirection[2] / pendulum.cart.box.mcShape.abs_n_x;
// Real pendulum.cart.box.mcShape.e_x[3] = if noEvent(pendulum.cart.box.mcShape.abs_n_x < 1e-10) then 0.0 else pendulum.cart.box.mcShape.lengthDirection[3] / pendulum.cart.box.mcShape.abs_n_x;
// Real pendulum.cart.box.mcShape.n_z_aux[1] = pendulum.cart.box.mcShape.e_x[2] * pendulum.cart.box.mcShape.widthDirection[3] - pendulum.cart.box.mcShape.e_x[3] * pendulum.cart.box.mcShape.widthDirection[2];
// Real pendulum.cart.box.mcShape.n_z_aux[2] = pendulum.cart.box.mcShape.e_x[3] * pendulum.cart.box.mcShape.widthDirection[1] - pendulum.cart.box.mcShape.e_x[1] * pendulum.cart.box.mcShape.widthDirection[3];
// Real pendulum.cart.box.mcShape.n_z_aux[3] = pendulum.cart.box.mcShape.e_x[1] * pendulum.cart.box.mcShape.widthDirection[2] - pendulum.cart.box.mcShape.e_x[2] * pendulum.cart.box.mcShape.widthDirection[1];
// Real pendulum.cart.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({pendulum.cart.box.mcShape.e_x[1],pendulum.cart.box.mcShape.e_x[2],pendulum.cart.box.mcShape.e_x[3]},if noEvent(pendulum.cart.box.mcShape.n_z_aux[1] ^ 2.0 + (pendulum.cart.box.mcShape.n_z_aux[2] ^ 2.0 + pendulum.cart.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {pendulum.cart.box.mcShape.widthDirection[1],pendulum.cart.box.mcShape.widthDirection[2],pendulum.cart.box.mcShape.widthDirection[3]} else if noEvent(abs(pendulum.cart.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{pendulum.cart.box.mcShape.e_x[1],pendulum.cart.box.mcShape.e_x[2],pendulum.cart.box.mcShape.e_x[3]})[1];
// Real pendulum.cart.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({pendulum.cart.box.mcShape.e_x[1],pendulum.cart.box.mcShape.e_x[2],pendulum.cart.box.mcShape.e_x[3]},if noEvent(pendulum.cart.box.mcShape.n_z_aux[1] ^ 2.0 + (pendulum.cart.box.mcShape.n_z_aux[2] ^ 2.0 + pendulum.cart.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {pendulum.cart.box.mcShape.widthDirection[1],pendulum.cart.box.mcShape.widthDirection[2],pendulum.cart.box.mcShape.widthDirection[3]} else if noEvent(abs(pendulum.cart.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{pendulum.cart.box.mcShape.e_x[1],pendulum.cart.box.mcShape.e_x[2],pendulum.cart.box.mcShape.e_x[3]})[2];
// Real pendulum.cart.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({pendulum.cart.box.mcShape.e_x[1],pendulum.cart.box.mcShape.e_x[2],pendulum.cart.box.mcShape.e_x[3]},if noEvent(pendulum.cart.box.mcShape.n_z_aux[1] ^ 2.0 + (pendulum.cart.box.mcShape.n_z_aux[2] ^ 2.0 + pendulum.cart.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {pendulum.cart.box.mcShape.widthDirection[1],pendulum.cart.box.mcShape.widthDirection[2],pendulum.cart.box.mcShape.widthDirection[3]} else if noEvent(abs(pendulum.cart.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{pendulum.cart.box.mcShape.e_x[1],pendulum.cart.box.mcShape.e_x[2],pendulum.cart.box.mcShape.e_x[3]})[3];
// Real pendulum.cart.box.mcShape.e_z[1] = pendulum.cart.box.mcShape.e_x[2] * pendulum.cart.box.mcShape.e_y[3] - pendulum.cart.box.mcShape.e_x[3] * pendulum.cart.box.mcShape.e_y[2];
// Real pendulum.cart.box.mcShape.e_z[2] = pendulum.cart.box.mcShape.e_x[3] * pendulum.cart.box.mcShape.e_y[1] - pendulum.cart.box.mcShape.e_x[1] * pendulum.cart.box.mcShape.e_y[3];
// Real pendulum.cart.box.mcShape.e_z[3] = pendulum.cart.box.mcShape.e_x[1] * pendulum.cart.box.mcShape.e_y[2] - pendulum.cart.box.mcShape.e_x[2] * pendulum.cart.box.mcShape.e_y[1];
// protected output Real pendulum.cart.box.mcShape.Form;
// protected output Real pendulum.cart.box.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real pendulum.cart.box.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real pendulum.cart.box.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real pendulum.cart.box.mcShape.Material;
// protected output Real pendulum.cart.box.mcShape.Extra;
// constant Real pendulum.cart.frameTranslation.pi = 3.14159265358979;
// constant Real pendulum.cart.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.cart.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.cart.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.cart.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.cart.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.cart.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.cart.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[1,1] = pendulum.cart.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[1,2] = pendulum.cart.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[1,3] = pendulum.cart.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[2,1] = pendulum.cart.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[2,2] = pendulum.cart.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[2,3] = pendulum.cart.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[3,1] = pendulum.cart.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[3,2] = pendulum.cart.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.S[3,3] = pendulum.cart.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.cart.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.cart.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.cart.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.cart.frameTranslation.fa[1];
// Real pendulum.cart.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.cart.frameTranslation.fa[2];
// Real pendulum.cart.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.cart.frameTranslation.fa[3];
// Real pendulum.cart.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.cart.frameTranslation.ta[1];
// Real pendulum.cart.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.cart.frameTranslation.ta[2];
// Real pendulum.cart.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.cart.frameTranslation.ta[3];
// output Real pendulum.cart.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.cart.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.cart.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.cart.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.cart.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.cart.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[1,1] = pendulum.cart.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[1,2] = pendulum.cart.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[1,3] = pendulum.cart.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[2,1] = pendulum.cart.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[2,2] = pendulum.cart.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[2,3] = pendulum.cart.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[3,1] = pendulum.cart.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[3,2] = pendulum.cart.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.S[3,3] = pendulum.cart.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.cart.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.cart.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.cart.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.cart.frameTranslation.fb[1];
// Real pendulum.cart.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.cart.frameTranslation.fb[2];
// Real pendulum.cart.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.cart.frameTranslation.fb[3];
// Real pendulum.cart.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.cart.frameTranslation.tb[1];
// Real pendulum.cart.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.cart.frameTranslation.tb[2];
// Real pendulum.cart.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.cart.frameTranslation.tb[3];
// protected Real pendulum.cart.frameTranslation.Sa[1,1](start = 1.0);
// protected Real pendulum.cart.frameTranslation.Sa[1,2](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sa[1,3](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sa[2,1](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sa[2,2](start = 1.0);
// protected Real pendulum.cart.frameTranslation.Sa[2,3](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sa[3,1](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sa[3,2](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sa[3,3](start = 1.0);
// protected Real pendulum.cart.frameTranslation.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.cart.frameTranslation.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.cart.frameTranslation.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.cart.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.frameTranslation.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.cart.frameTranslation.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.cart.frameTranslation.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.cart.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.frameTranslation.Sb[1,1](start = 1.0);
// protected Real pendulum.cart.frameTranslation.Sb[1,2](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sb[1,3](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sb[2,1](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sb[2,2](start = 1.0);
// protected Real pendulum.cart.frameTranslation.Sb[2,3](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sb[3,1](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sb[3,2](start = 0.0);
// protected Real pendulum.cart.frameTranslation.Sb[3,3](start = 1.0);
// protected Real pendulum.cart.frameTranslation.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.cart.frameTranslation.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.cart.frameTranslation.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.cart.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.frameTranslation.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.cart.frameTranslation.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.cart.frameTranslation.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.cart.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
// parameter Real pendulum.cart.frameTranslation.r[1](quantity = "Length", unit = "m") = pendulum.cart.r[1] "Vector from frame_a to frame_b resolved in frame_a";
// parameter Real pendulum.cart.frameTranslation.r[2](quantity = "Length", unit = "m") = pendulum.cart.r[2] "Vector from frame_a to frame_b resolved in frame_a";
// parameter Real pendulum.cart.frameTranslation.r[3](quantity = "Length", unit = "m") = pendulum.cart.r[3] "Vector from frame_a to frame_b resolved in frame_a";
// protected Real pendulum.cart.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
// input Real pendulum.cart.body.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.cart.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.cart.body.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.cart.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.cart.body.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.cart.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.cart.body.frame_a.S[1,1] = pendulum.cart.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[1,2] = pendulum.cart.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[1,3] = pendulum.cart.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[2,1] = pendulum.cart.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[2,2] = pendulum.cart.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[2,3] = pendulum.cart.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[3,1] = pendulum.cart.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[3,2] = pendulum.cart.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.S[3,3] = pendulum.cart.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.cart.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.cart.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.cart.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.cart.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.cart.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.cart.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.cart.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.cart.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.cart.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.cart.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.cart.body.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.cart.body.fa[1];
// Real pendulum.cart.body.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.cart.body.fa[2];
// Real pendulum.cart.body.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.cart.body.fa[3];
// Real pendulum.cart.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.cart.body.ta[1];
// Real pendulum.cart.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.cart.body.ta[2];
// Real pendulum.cart.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.cart.body.ta[3];
// protected Real pendulum.cart.body.Sa[1,1](start = 1.0);
// protected Real pendulum.cart.body.Sa[1,2](start = 0.0);
// protected Real pendulum.cart.body.Sa[1,3](start = 0.0);
// protected Real pendulum.cart.body.Sa[2,1](start = 0.0);
// protected Real pendulum.cart.body.Sa[2,2](start = 1.0);
// protected Real pendulum.cart.body.Sa[2,3](start = 0.0);
// protected Real pendulum.cart.body.Sa[3,1](start = 0.0);
// protected Real pendulum.cart.body.Sa[3,2](start = 0.0);
// protected Real pendulum.cart.body.Sa[3,3](start = 1.0);
// protected Real pendulum.cart.body.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.cart.body.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.cart.body.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.cart.body.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.body.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.body.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.cart.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.cart.body.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.body.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.body.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.cart.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.cart.body.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.cart.body.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.cart.body.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.cart.body.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.body.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.cart.body.ta[3](quantity = "Torque", unit = "N.m");
// Real pendulum.cart.body.m(quantity = "Mass", unit = "kg", min = 0.0);
// Real pendulum.cart.body.rCM[1](quantity = "Length", unit = "m");
// Real pendulum.cart.body.rCM[2](quantity = "Length", unit = "m");
// Real pendulum.cart.body.rCM[3](quantity = "Length", unit = "m");
// Real pendulum.cart.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.cart.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
// constant Real pendulum.pendulum.pi = 3.14159265358979;
// constant Real pendulum.pendulum.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.pendulum.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.pendulum.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulum.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.pendulum.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulum.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.pendulum.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulum.frame_a.S[1,1] = pendulum.pendulum.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[1,2] = pendulum.pendulum.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[1,3] = pendulum.pendulum.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[2,1] = pendulum.pendulum.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[2,2] = pendulum.pendulum.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[2,3] = pendulum.pendulum.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[3,1] = pendulum.pendulum.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[3,2] = pendulum.pendulum.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.S[3,3] = pendulum.pendulum.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.pendulum.fa[1];
// Real pendulum.pendulum.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.pendulum.fa[2];
// Real pendulum.pendulum.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.pendulum.fa[3];
// Real pendulum.pendulum.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.pendulum.ta[1];
// Real pendulum.pendulum.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.pendulum.ta[2];
// Real pendulum.pendulum.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.pendulum.ta[3];
// output Real pendulum.pendulum.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.pendulum.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.pendulum.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.pendulum.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.pendulum.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.pendulum.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulum.frame_b.S[1,1] = pendulum.pendulum.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[1,2] = pendulum.pendulum.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[1,3] = pendulum.pendulum.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[2,1] = pendulum.pendulum.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[2,2] = pendulum.pendulum.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[2,3] = pendulum.pendulum.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[3,1] = pendulum.pendulum.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[3,2] = pendulum.pendulum.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.S[3,3] = pendulum.pendulum.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.pendulum.fb[1];
// Real pendulum.pendulum.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.pendulum.fb[2];
// Real pendulum.pendulum.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.pendulum.fb[3];
// Real pendulum.pendulum.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.pendulum.tb[1];
// Real pendulum.pendulum.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.pendulum.tb[2];
// Real pendulum.pendulum.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.pendulum.tb[3];
// protected Real pendulum.pendulum.Sa[1,1](start = 1.0);
// protected Real pendulum.pendulum.Sa[1,2](start = 0.0);
// protected Real pendulum.pendulum.Sa[1,3](start = 0.0);
// protected Real pendulum.pendulum.Sa[2,1](start = 0.0);
// protected Real pendulum.pendulum.Sa[2,2](start = 1.0);
// protected Real pendulum.pendulum.Sa[2,3](start = 0.0);
// protected Real pendulum.pendulum.Sa[3,1](start = 0.0);
// protected Real pendulum.pendulum.Sa[3,2](start = 0.0);
// protected Real pendulum.pendulum.Sa[3,3](start = 1.0);
// protected Real pendulum.pendulum.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.Sb[1,1](start = 1.0);
// protected Real pendulum.pendulum.Sb[1,2](start = 0.0);
// protected Real pendulum.pendulum.Sb[1,3](start = 0.0);
// protected Real pendulum.pendulum.Sb[2,1](start = 0.0);
// protected Real pendulum.pendulum.Sb[2,2](start = 1.0);
// protected Real pendulum.pendulum.Sb[2,3](start = 0.0);
// protected Real pendulum.pendulum.Sb[3,1](start = 0.0);
// protected Real pendulum.pendulum.Sb[3,2](start = 0.0);
// protected Real pendulum.pendulum.Sb[3,3](start = 1.0);
// protected Real pendulum.pendulum.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.tb[3](quantity = "Torque", unit = "N.m");
// parameter Real pendulum.pendulum.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
// parameter Real pendulum.pendulum.r[2](quantity = "Length", unit = "m") = pendulum.l_pendulum "Vector from frame_a to frame_b, resolved in frame_a";
// parameter Real pendulum.pendulum.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
// parameter Real pendulum.pendulum.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
// parameter Real pendulum.pendulum.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
// parameter Real pendulum.pendulum.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
// parameter Real pendulum.pendulum.Axis[1](quantity = "Length", unit = "m") = pendulum.pendulum.r[1] - pendulum.pendulum.r0[1] "Vector in direction of cylinder axis, resolved in frame_a";
// parameter Real pendulum.pendulum.Axis[2](quantity = "Length", unit = "m") = pendulum.pendulum.r[2] - pendulum.pendulum.r0[2] "Vector in direction of cylinder axis, resolved in frame_a";
// parameter Real pendulum.pendulum.Axis[3](quantity = "Length", unit = "m") = pendulum.pendulum.r[3] - pendulum.pendulum.r0[3] "Vector in direction of cylinder axis, resolved in frame_a";
// parameter Real pendulum.pendulum.Length(quantity = "Length", unit = "m") = sqrt(pendulum.pendulum.Axis[1] ^ 2.0 + (pendulum.pendulum.Axis[2] ^ 2.0 + pendulum.pendulum.Axis[3] ^ 2.0)) "Length of cylinder";
// parameter Real pendulum.pendulum.Radius(quantity = "Length", unit = "m", min = 0.0) = pendulum.r_pendulum "Radius of cylinder";
// parameter Real pendulum.pendulum.InnerRadius(quantity = "Length", unit = "m", min = 0.0, max = pendulum.pendulum.Radius) = 0.0 "Inner radius of cylinder";
// parameter Real pendulum.pendulum.rho(min = 0.0) = pendulum.rho_pendulum "Density of material [g/cm^3]";
// parameter Real pendulum.pendulum.Material[1] = 0.0 "Color and specular coefficient";
// parameter Real pendulum.pendulum.Material[2] = 0.0 "Color and specular coefficient";
// parameter Real pendulum.pendulum.Material[3] = 1.0 "Color and specular coefficient";
// parameter Real pendulum.pendulum.Material[4] = 0.5 "Color and specular coefficient";
// Real pendulum.pendulum.Scyl[1,1];
// Real pendulum.pendulum.Scyl[1,2];
// Real pendulum.pendulum.Scyl[1,3];
// Real pendulum.pendulum.Scyl[2,1];
// Real pendulum.pendulum.Scyl[2,2];
// Real pendulum.pendulum.Scyl[2,3];
// Real pendulum.pendulum.Scyl[3,1];
// Real pendulum.pendulum.Scyl[3,2];
// Real pendulum.pendulum.Scyl[3,3];
// Real pendulum.pendulum.mo(quantity = "Mass", unit = "kg", min = 0.0);
// Real pendulum.pendulum.mi(quantity = "Mass", unit = "kg", min = 0.0);
// Real pendulum.pendulum.I22(quantity = "MomentOfInertia", unit = "kg.m2");
// parameter Real pendulum.pendulum.box.r0[1] = pendulum.pendulum.r0[1] "Origin of visual object.";
// parameter Real pendulum.pendulum.box.r0[2] = pendulum.pendulum.r0[2] "Origin of visual object.";
// parameter Real pendulum.pendulum.box.r0[3] = pendulum.pendulum.r0[3] "Origin of visual object.";
// parameter Real pendulum.pendulum.box.Length = pendulum.pendulum.Length "Length of visual object.";
// parameter Real pendulum.pendulum.box.Width = 2.0 * pendulum.pendulum.Radius "Width of visual object.";
// parameter Real pendulum.pendulum.box.Height = 2.0 * pendulum.pendulum.Radius "Height of visual object.";
// parameter Real pendulum.pendulum.box.LengthDirection[1] = pendulum.pendulum.Axis[1] "Vector in length direction.";
// parameter Real pendulum.pendulum.box.LengthDirection[2] = pendulum.pendulum.Axis[2] "Vector in length direction.";
// parameter Real pendulum.pendulum.box.LengthDirection[3] = pendulum.pendulum.Axis[3] "Vector in length direction.";
// parameter Real pendulum.pendulum.box.WidthDirection[1] = 0.0 "Vector in width direction.";
// parameter Real pendulum.pendulum.box.WidthDirection[2] = 1.0 "Vector in width direction.";
// parameter Real pendulum.pendulum.box.WidthDirection[3] = 0.0 "Vector in width direction.";
// parameter String pendulum.pendulum.box.Shape = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// parameter Real pendulum.pendulum.box.Material[1] = pendulum.pendulum.Material[1] "Color and specular coefficient.";
// parameter Real pendulum.pendulum.box.Material[2] = pendulum.pendulum.Material[2] "Color and specular coefficient.";
// parameter Real pendulum.pendulum.box.Material[3] = pendulum.pendulum.Material[3] "Color and specular coefficient.";
// parameter Real pendulum.pendulum.box.Material[4] = pendulum.pendulum.Material[4] "Color and specular coefficient.";
// parameter Real pendulum.pendulum.box.Extra = pendulum.pendulum.InnerRadius / pendulum.pendulum.Radius "Additional size data for some of the shape types";
// input Real pendulum.pendulum.box.S[1,1] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[1,2] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[1,3] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[2,1] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[2,2] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[2,3] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[3,1] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[3,2] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.S[3,3] "3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.r[1] "Position of visual object.";
// input Real pendulum.pendulum.box.r[2] "Position of visual object.";
// input Real pendulum.pendulum.box.r[3] "Position of visual object.";
// Real pendulum.pendulum.box.nLength[1];
// Real pendulum.pendulum.box.nLength[2];
// Real pendulum.pendulum.box.nLength[3];
// Real pendulum.pendulum.box.nWidth[1];
// Real pendulum.pendulum.box.nWidth[2];
// Real pendulum.pendulum.box.nWidth[3];
// Real pendulum.pendulum.box.nHeight[1];
// Real pendulum.pendulum.box.nHeight[2];
// Real pendulum.pendulum.box.nHeight[3];
// parameter String pendulum.pendulum.box.mcShape.shapeType = pendulum.pendulum.box.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real pendulum.pendulum.box.mcShape.r[1](quantity = "Length", unit = "m") = pendulum.pendulum.box.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real pendulum.pendulum.box.mcShape.r[2](quantity = "Length", unit = "m") = pendulum.pendulum.box.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real pendulum.pendulum.box.mcShape.r[3](quantity = "Length", unit = "m") = pendulum.pendulum.box.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real pendulum.pendulum.box.mcShape.r_shape[1](quantity = "Length", unit = "m") = pendulum.pendulum.box.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.r_shape[2](quantity = "Length", unit = "m") = pendulum.pendulum.box.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.r_shape[3](quantity = "Length", unit = "m") = pendulum.pendulum.box.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.lengthDirection[1] = pendulum.pendulum.box.LengthDirection[1] "Vector in length direction, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.lengthDirection[2] = pendulum.pendulum.box.LengthDirection[2] "Vector in length direction, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.lengthDirection[3] = pendulum.pendulum.box.LengthDirection[3] "Vector in length direction, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.widthDirection[1] = pendulum.pendulum.box.WidthDirection[1] "Vector in width direction, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.widthDirection[2] = pendulum.pendulum.box.WidthDirection[2] "Vector in width direction, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.widthDirection[3] = pendulum.pendulum.box.WidthDirection[3] "Vector in width direction, resolved in object frame";
// input Real pendulum.pendulum.box.mcShape.length(quantity = "Length", unit = "m") = pendulum.pendulum.box.Length "Length of visual object";
// input Real pendulum.pendulum.box.mcShape.width(quantity = "Length", unit = "m") = pendulum.pendulum.box.Width "Width of visual object";
// input Real pendulum.pendulum.box.mcShape.height(quantity = "Length", unit = "m") = pendulum.pendulum.box.Height "Height of visual object";
// input Real pendulum.pendulum.box.mcShape.extra = pendulum.pendulum.box.Extra "Additional size data for some of the shape types";
// input Real pendulum.pendulum.box.mcShape.color[1] = 255.0 * pendulum.pendulum.box.Material[1] "Color of shape";
// input Real pendulum.pendulum.box.mcShape.color[2] = 255.0 * pendulum.pendulum.box.Material[2] "Color of shape";
// input Real pendulum.pendulum.box.mcShape.color[3] = 255.0 * pendulum.pendulum.box.Material[3] "Color of shape";
// input Real pendulum.pendulum.box.mcShape.specularCoefficient = pendulum.pendulum.box.Material[4];
// input Real pendulum.pendulum.box.mcShape.S[1,1] = pendulum.pendulum.box.S[1,1] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[1,2] = pendulum.pendulum.box.S[1,2] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[1,3] = pendulum.pendulum.box.S[1,3] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[2,1] = pendulum.pendulum.box.S[2,1] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[2,2] = pendulum.pendulum.box.S[2,2] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[2,3] = pendulum.pendulum.box.S[2,3] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[3,1] = pendulum.pendulum.box.S[3,1] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[3,2] = pendulum.pendulum.box.S[3,2] "3 x 3 transformation matrix.";
// input Real pendulum.pendulum.box.mcShape.S[3,3] = pendulum.pendulum.box.S[3,3] "3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[1,1] = pendulum.pendulum.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[1,2] = pendulum.pendulum.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[1,3] = pendulum.pendulum.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[2,1] = pendulum.pendulum.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[2,2] = pendulum.pendulum.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[2,3] = pendulum.pendulum.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[3,1] = pendulum.pendulum.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[3,2] = pendulum.pendulum.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
// Real pendulum.pendulum.box.mcShape.Sshape[3,3] = pendulum.pendulum.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
// output Real pendulum.pendulum.box.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real pendulum.pendulum.box.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// Real pendulum.pendulum.box.mcShape.abs_n_x = sqrt(pendulum.pendulum.box.mcShape.lengthDirection[1] ^ 2.0 + (pendulum.pendulum.box.mcShape.lengthDirection[2] ^ 2.0 + pendulum.pendulum.box.mcShape.lengthDirection[3] ^ 2.0));
// Real pendulum.pendulum.box.mcShape.e_x[1] = if noEvent(pendulum.pendulum.box.mcShape.abs_n_x < 1e-10) then 1.0 else pendulum.pendulum.box.mcShape.lengthDirection[1] / pendulum.pendulum.box.mcShape.abs_n_x;
// Real pendulum.pendulum.box.mcShape.e_x[2] = if noEvent(pendulum.pendulum.box.mcShape.abs_n_x < 1e-10) then 0.0 else pendulum.pendulum.box.mcShape.lengthDirection[2] / pendulum.pendulum.box.mcShape.abs_n_x;
// Real pendulum.pendulum.box.mcShape.e_x[3] = if noEvent(pendulum.pendulum.box.mcShape.abs_n_x < 1e-10) then 0.0 else pendulum.pendulum.box.mcShape.lengthDirection[3] / pendulum.pendulum.box.mcShape.abs_n_x;
// Real pendulum.pendulum.box.mcShape.n_z_aux[1] = pendulum.pendulum.box.mcShape.e_x[2] * pendulum.pendulum.box.mcShape.widthDirection[3] - pendulum.pendulum.box.mcShape.e_x[3] * pendulum.pendulum.box.mcShape.widthDirection[2];
// Real pendulum.pendulum.box.mcShape.n_z_aux[2] = pendulum.pendulum.box.mcShape.e_x[3] * pendulum.pendulum.box.mcShape.widthDirection[1] - pendulum.pendulum.box.mcShape.e_x[1] * pendulum.pendulum.box.mcShape.widthDirection[3];
// Real pendulum.pendulum.box.mcShape.n_z_aux[3] = pendulum.pendulum.box.mcShape.e_x[1] * pendulum.pendulum.box.mcShape.widthDirection[2] - pendulum.pendulum.box.mcShape.e_x[2] * pendulum.pendulum.box.mcShape.widthDirection[1];
// Real pendulum.pendulum.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({pendulum.pendulum.box.mcShape.e_x[1],pendulum.pendulum.box.mcShape.e_x[2],pendulum.pendulum.box.mcShape.e_x[3]},if noEvent(pendulum.pendulum.box.mcShape.n_z_aux[1] ^ 2.0 + (pendulum.pendulum.box.mcShape.n_z_aux[2] ^ 2.0 + pendulum.pendulum.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {pendulum.pendulum.box.mcShape.widthDirection[1],pendulum.pendulum.box.mcShape.widthDirection[2],pendulum.pendulum.box.mcShape.widthDirection[3]} else if noEvent(abs(pendulum.pendulum.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{pendulum.pendulum.box.mcShape.e_x[1],pendulum.pendulum.box.mcShape.e_x[2],pendulum.pendulum.box.mcShape.e_x[3]})[1];
// Real pendulum.pendulum.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({pendulum.pendulum.box.mcShape.e_x[1],pendulum.pendulum.box.mcShape.e_x[2],pendulum.pendulum.box.mcShape.e_x[3]},if noEvent(pendulum.pendulum.box.mcShape.n_z_aux[1] ^ 2.0 + (pendulum.pendulum.box.mcShape.n_z_aux[2] ^ 2.0 + pendulum.pendulum.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {pendulum.pendulum.box.mcShape.widthDirection[1],pendulum.pendulum.box.mcShape.widthDirection[2],pendulum.pendulum.box.mcShape.widthDirection[3]} else if noEvent(abs(pendulum.pendulum.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{pendulum.pendulum.box.mcShape.e_x[1],pendulum.pendulum.box.mcShape.e_x[2],pendulum.pendulum.box.mcShape.e_x[3]})[2];
// Real pendulum.pendulum.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({pendulum.pendulum.box.mcShape.e_x[1],pendulum.pendulum.box.mcShape.e_x[2],pendulum.pendulum.box.mcShape.e_x[3]},if noEvent(pendulum.pendulum.box.mcShape.n_z_aux[1] ^ 2.0 + (pendulum.pendulum.box.mcShape.n_z_aux[2] ^ 2.0 + pendulum.pendulum.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {pendulum.pendulum.box.mcShape.widthDirection[1],pendulum.pendulum.box.mcShape.widthDirection[2],pendulum.pendulum.box.mcShape.widthDirection[3]} else if noEvent(abs(pendulum.pendulum.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{pendulum.pendulum.box.mcShape.e_x[1],pendulum.pendulum.box.mcShape.e_x[2],pendulum.pendulum.box.mcShape.e_x[3]})[3];
// Real pendulum.pendulum.box.mcShape.e_z[1] = pendulum.pendulum.box.mcShape.e_x[2] * pendulum.pendulum.box.mcShape.e_y[3] - pendulum.pendulum.box.mcShape.e_x[3] * pendulum.pendulum.box.mcShape.e_y[2];
// Real pendulum.pendulum.box.mcShape.e_z[2] = pendulum.pendulum.box.mcShape.e_x[3] * pendulum.pendulum.box.mcShape.e_y[1] - pendulum.pendulum.box.mcShape.e_x[1] * pendulum.pendulum.box.mcShape.e_y[3];
// Real pendulum.pendulum.box.mcShape.e_z[3] = pendulum.pendulum.box.mcShape.e_x[1] * pendulum.pendulum.box.mcShape.e_y[2] - pendulum.pendulum.box.mcShape.e_x[2] * pendulum.pendulum.box.mcShape.e_y[1];
// protected output Real pendulum.pendulum.box.mcShape.Form;
// protected output Real pendulum.pendulum.box.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real pendulum.pendulum.box.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real pendulum.pendulum.box.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real pendulum.pendulum.box.mcShape.Material;
// protected output Real pendulum.pendulum.box.mcShape.Extra;
// constant Real pendulum.pendulum.frameTranslation.pi = 3.14159265358979;
// constant Real pendulum.pendulum.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.pendulum.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.pendulum.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulum.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.pendulum.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulum.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.pendulum.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[1,1] = pendulum.pendulum.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[1,2] = pendulum.pendulum.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[1,3] = pendulum.pendulum.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[2,1] = pendulum.pendulum.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[2,2] = pendulum.pendulum.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[2,3] = pendulum.pendulum.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[3,1] = pendulum.pendulum.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[3,2] = pendulum.pendulum.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.S[3,3] = pendulum.pendulum.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.pendulum.frameTranslation.fa[1];
// Real pendulum.pendulum.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.pendulum.frameTranslation.fa[2];
// Real pendulum.pendulum.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.pendulum.frameTranslation.fa[3];
// Real pendulum.pendulum.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.pendulum.frameTranslation.ta[1];
// Real pendulum.pendulum.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.pendulum.frameTranslation.ta[2];
// Real pendulum.pendulum.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.pendulum.frameTranslation.ta[3];
// output Real pendulum.pendulum.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.pendulum.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.pendulum.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.pendulum.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.pendulum.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.pendulum.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[1,1] = pendulum.pendulum.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[1,2] = pendulum.pendulum.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[1,3] = pendulum.pendulum.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[2,1] = pendulum.pendulum.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[2,2] = pendulum.pendulum.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[2,3] = pendulum.pendulum.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[3,1] = pendulum.pendulum.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[3,2] = pendulum.pendulum.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.S[3,3] = pendulum.pendulum.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.pendulum.frameTranslation.fb[1];
// Real pendulum.pendulum.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.pendulum.frameTranslation.fb[2];
// Real pendulum.pendulum.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.pendulum.frameTranslation.fb[3];
// Real pendulum.pendulum.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.pendulum.frameTranslation.tb[1];
// Real pendulum.pendulum.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.pendulum.frameTranslation.tb[2];
// Real pendulum.pendulum.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.pendulum.frameTranslation.tb[3];
// protected Real pendulum.pendulum.frameTranslation.Sa[1,1](start = 1.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[1,2](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[1,3](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[2,1](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[2,2](start = 1.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[2,3](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[3,1](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[3,2](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sa[3,3](start = 1.0);
// protected Real pendulum.pendulum.frameTranslation.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.frameTranslation.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.frameTranslation.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.frameTranslation.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.frameTranslation.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.frameTranslation.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.frameTranslation.Sb[1,1](start = 1.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[1,2](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[1,3](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[2,1](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[2,2](start = 1.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[2,3](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[3,1](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[3,2](start = 0.0);
// protected Real pendulum.pendulum.frameTranslation.Sb[3,3](start = 1.0);
// protected Real pendulum.pendulum.frameTranslation.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.frameTranslation.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.frameTranslation.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.frameTranslation.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.frameTranslation.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.frameTranslation.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
// parameter Real pendulum.pendulum.frameTranslation.r[1](quantity = "Length", unit = "m") = pendulum.pendulum.r[1] "Vector from frame_a to frame_b resolved in frame_a";
// parameter Real pendulum.pendulum.frameTranslation.r[2](quantity = "Length", unit = "m") = pendulum.pendulum.r[2] "Vector from frame_a to frame_b resolved in frame_a";
// parameter Real pendulum.pendulum.frameTranslation.r[3](quantity = "Length", unit = "m") = pendulum.pendulum.r[3] "Vector from frame_a to frame_b resolved in frame_a";
// protected Real pendulum.pendulum.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
// input Real pendulum.pendulum.body.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.pendulum.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulum.body.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.pendulum.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulum.body.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.pendulum.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulum.body.frame_a.S[1,1] = pendulum.pendulum.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[1,2] = pendulum.pendulum.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[1,3] = pendulum.pendulum.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[2,1] = pendulum.pendulum.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[2,2] = pendulum.pendulum.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[2,3] = pendulum.pendulum.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[3,1] = pendulum.pendulum.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[3,2] = pendulum.pendulum.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.S[3,3] = pendulum.pendulum.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulum.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulum.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulum.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulum.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulum.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulum.body.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.pendulum.body.fa[1];
// Real pendulum.pendulum.body.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.pendulum.body.fa[2];
// Real pendulum.pendulum.body.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.pendulum.body.fa[3];
// Real pendulum.pendulum.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.pendulum.body.ta[1];
// Real pendulum.pendulum.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.pendulum.body.ta[2];
// Real pendulum.pendulum.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.pendulum.body.ta[3];
// protected Real pendulum.pendulum.body.Sa[1,1](start = 1.0);
// protected Real pendulum.pendulum.body.Sa[1,2](start = 0.0);
// protected Real pendulum.pendulum.body.Sa[1,3](start = 0.0);
// protected Real pendulum.pendulum.body.Sa[2,1](start = 0.0);
// protected Real pendulum.pendulum.body.Sa[2,2](start = 1.0);
// protected Real pendulum.pendulum.body.Sa[2,3](start = 0.0);
// protected Real pendulum.pendulum.body.Sa[3,1](start = 0.0);
// protected Real pendulum.pendulum.body.Sa[3,2](start = 0.0);
// protected Real pendulum.pendulum.body.Sa[3,3](start = 1.0);
// protected Real pendulum.pendulum.body.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.body.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.body.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulum.body.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.body.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.body.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulum.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulum.body.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.body.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.body.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulum.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulum.body.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.body.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.body.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulum.body.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.body.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulum.body.ta[3](quantity = "Torque", unit = "N.m");
// Real pendulum.pendulum.body.m(quantity = "Mass", unit = "kg", min = 0.0);
// Real pendulum.pendulum.body.rCM[1](quantity = "Length", unit = "m");
// Real pendulum.pendulum.body.rCM[2](quantity = "Length", unit = "m");
// Real pendulum.pendulum.body.rCM[3](quantity = "Length", unit = "m");
// Real pendulum.pendulum.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
// Real pendulum.pendulum.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
// constant Real pendulum.pendulumJoint.pi = 3.14159265358979;
// constant Real pendulum.pendulumJoint.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.pendulumJoint.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.pendulumJoint.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulumJoint.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.pendulumJoint.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.pendulumJoint.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.pendulumJoint.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulumJoint.frame_a.S[1,1] = pendulum.pendulumJoint.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[1,2] = pendulum.pendulumJoint.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[1,3] = pendulum.pendulumJoint.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[2,1] = pendulum.pendulumJoint.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[2,2] = pendulum.pendulumJoint.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[2,3] = pendulum.pendulumJoint.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[3,1] = pendulum.pendulumJoint.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[3,2] = pendulum.pendulumJoint.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.S[3,3] = pendulum.pendulumJoint.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulumJoint.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulumJoint.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulumJoint.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulumJoint.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulumJoint.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulumJoint.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulumJoint.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulumJoint.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulumJoint.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulumJoint.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulumJoint.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulumJoint.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.pendulumJoint.fa[1];
// Real pendulum.pendulumJoint.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.pendulumJoint.fa[2];
// Real pendulum.pendulumJoint.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.pendulumJoint.fa[3];
// Real pendulum.pendulumJoint.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.pendulumJoint.ta[1];
// Real pendulum.pendulumJoint.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.pendulumJoint.ta[2];
// Real pendulum.pendulumJoint.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.pendulumJoint.ta[3];
// output Real pendulum.pendulumJoint.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.pendulumJoint.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.pendulumJoint.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.pendulumJoint.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.pendulumJoint.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.pendulumJoint.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.pendulumJoint.frame_b.S[1,1] = pendulum.pendulumJoint.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[1,2] = pendulum.pendulumJoint.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[1,3] = pendulum.pendulumJoint.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[2,1] = pendulum.pendulumJoint.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[2,2] = pendulum.pendulumJoint.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[2,3] = pendulum.pendulumJoint.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[3,1] = pendulum.pendulumJoint.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[3,2] = pendulum.pendulumJoint.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.S[3,3] = pendulum.pendulumJoint.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.pendulumJoint.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.pendulumJoint.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.pendulumJoint.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.pendulumJoint.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulumJoint.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulumJoint.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.pendulumJoint.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulumJoint.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulumJoint.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.pendulumJoint.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulumJoint.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulumJoint.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.pendulumJoint.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.pendulumJoint.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.pendulumJoint.fb[1];
// Real pendulum.pendulumJoint.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.pendulumJoint.fb[2];
// Real pendulum.pendulumJoint.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.pendulumJoint.fb[3];
// Real pendulum.pendulumJoint.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.pendulumJoint.tb[1];
// Real pendulum.pendulumJoint.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.pendulumJoint.tb[2];
// Real pendulum.pendulumJoint.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.pendulumJoint.tb[3];
// protected Real pendulum.pendulumJoint.Sa[1,1](start = 1.0);
// protected Real pendulum.pendulumJoint.Sa[1,2](start = 0.0);
// protected Real pendulum.pendulumJoint.Sa[1,3](start = 0.0);
// protected Real pendulum.pendulumJoint.Sa[2,1](start = 0.0);
// protected Real pendulum.pendulumJoint.Sa[2,2](start = 1.0);
// protected Real pendulum.pendulumJoint.Sa[2,3](start = 0.0);
// protected Real pendulum.pendulumJoint.Sa[3,1](start = 0.0);
// protected Real pendulum.pendulumJoint.Sa[3,2](start = 0.0);
// protected Real pendulum.pendulumJoint.Sa[3,3](start = 1.0);
// protected Real pendulum.pendulumJoint.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulumJoint.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulumJoint.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulumJoint.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulumJoint.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulumJoint.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulumJoint.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulumJoint.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulumJoint.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulumJoint.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulumJoint.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulumJoint.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulumJoint.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulumJoint.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulumJoint.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulumJoint.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulumJoint.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulumJoint.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulumJoint.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulumJoint.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulumJoint.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulumJoint.Sb[1,1](start = 1.0);
// protected Real pendulum.pendulumJoint.Sb[1,2](start = 0.0);
// protected Real pendulum.pendulumJoint.Sb[1,3](start = 0.0);
// protected Real pendulum.pendulumJoint.Sb[2,1](start = 0.0);
// protected Real pendulum.pendulumJoint.Sb[2,2](start = 1.0);
// protected Real pendulum.pendulumJoint.Sb[2,3](start = 0.0);
// protected Real pendulum.pendulumJoint.Sb[3,1](start = 0.0);
// protected Real pendulum.pendulumJoint.Sb[3,2](start = 0.0);
// protected Real pendulum.pendulumJoint.Sb[3,3](start = 1.0);
// protected Real pendulum.pendulumJoint.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.pendulumJoint.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.pendulumJoint.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.pendulumJoint.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulumJoint.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulumJoint.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.pendulumJoint.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulumJoint.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulumJoint.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.pendulumJoint.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulumJoint.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulumJoint.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.pendulumJoint.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulumJoint.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulumJoint.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.pendulumJoint.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.pendulumJoint.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.pendulumJoint.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.pendulumJoint.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulumJoint.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.pendulumJoint.tb[3](quantity = "Torque", unit = "N.m");
// Real pendulum.pendulumJoint.S_rel[1,1];
// Real pendulum.pendulumJoint.S_rel[1,2];
// Real pendulum.pendulumJoint.S_rel[1,3];
// Real pendulum.pendulumJoint.S_rel[2,1];
// Real pendulum.pendulumJoint.S_rel[2,2];
// Real pendulum.pendulumJoint.S_rel[2,3];
// Real pendulum.pendulumJoint.S_rel[3,1];
// Real pendulum.pendulumJoint.S_rel[3,2];
// Real pendulum.pendulumJoint.S_rel[3,3];
// Real pendulum.pendulumJoint.r_rela[1](quantity = "Length", unit = "m");
// Real pendulum.pendulumJoint.r_rela[2](quantity = "Length", unit = "m");
// Real pendulum.pendulumJoint.r_rela[3](quantity = "Length", unit = "m");
// Real pendulum.pendulumJoint.v_rela[1](quantity = "Velocity", unit = "m/s");
// Real pendulum.pendulumJoint.v_rela[2](quantity = "Velocity", unit = "m/s");
// Real pendulum.pendulumJoint.v_rela[3](quantity = "Velocity", unit = "m/s");
// Real pendulum.pendulumJoint.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// Real pendulum.pendulumJoint.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// Real pendulum.pendulumJoint.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// Real pendulum.pendulumJoint.a_rela[1](quantity = "Acceleration", unit = "m/s2");
// Real pendulum.pendulumJoint.a_rela[2](quantity = "Acceleration", unit = "m/s2");
// Real pendulum.pendulumJoint.a_rela[3](quantity = "Acceleration", unit = "m/s2");
// Real pendulum.pendulumJoint.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
// Real pendulum.pendulumJoint.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
// Real pendulum.pendulumJoint.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
// parameter Real pendulum.pendulumJoint.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
// parameter Real pendulum.pendulumJoint.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
// parameter Real pendulum.pendulumJoint.n[3] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
// parameter Real pendulum.pendulumJoint.q0 = 0.0 "Rotation angle offset (see info) [deg]";
// parameter Boolean pendulum.pendulumJoint.startValueFixed = false "true, if start values of q, qd are fixed";
// Real pendulum.pendulumJoint.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = pendulum.pendulumJoint.startValueFixed);
// Real pendulum.pendulumJoint.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = 0.01, fixed = pendulum.pendulumJoint.startValueFixed);
// Real pendulum.pendulumJoint.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
// Real pendulum.pendulumJoint.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
// Real pendulum.pendulumJoint.nn[1];
// Real pendulum.pendulumJoint.nn[2];
// Real pendulum.pendulumJoint.nn[3];
// Real pendulum.pendulumJoint.sinq;
// Real pendulum.pendulumJoint.cosq;
// Real pendulum.pendulumJoint.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real pendulum.pendulumJoint.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real pendulum.pendulumJoint.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real pendulum.pendulumJoint.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// constant Real pendulum.toMidCart.pi = 3.14159265358979;
// constant Real pendulum.toMidCart.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.toMidCart.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.toMidCart.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.toMidCart.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.toMidCart.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.toMidCart.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.toMidCart.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.toMidCart.frame_a.S[1,1] = pendulum.toMidCart.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[1,2] = pendulum.toMidCart.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[1,3] = pendulum.toMidCart.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[2,1] = pendulum.toMidCart.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[2,2] = pendulum.toMidCart.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[2,3] = pendulum.toMidCart.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[3,1] = pendulum.toMidCart.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[3,2] = pendulum.toMidCart.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.S[3,3] = pendulum.toMidCart.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.toMidCart.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.toMidCart.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.toMidCart.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.toMidCart.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.toMidCart.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.toMidCart.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.toMidCart.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.toMidCart.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.toMidCart.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.toMidCart.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.toMidCart.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.toMidCart.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.toMidCart.fa[1];
// Real pendulum.toMidCart.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.toMidCart.fa[2];
// Real pendulum.toMidCart.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.toMidCart.fa[3];
// Real pendulum.toMidCart.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.toMidCart.ta[1];
// Real pendulum.toMidCart.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.toMidCart.ta[2];
// Real pendulum.toMidCart.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.toMidCart.ta[3];
// output Real pendulum.toMidCart.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.toMidCart.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.toMidCart.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.toMidCart.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.toMidCart.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.toMidCart.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.toMidCart.frame_b.S[1,1] = pendulum.toMidCart.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[1,2] = pendulum.toMidCart.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[1,3] = pendulum.toMidCart.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[2,1] = pendulum.toMidCart.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[2,2] = pendulum.toMidCart.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[2,3] = pendulum.toMidCart.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[3,1] = pendulum.toMidCart.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[3,2] = pendulum.toMidCart.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.S[3,3] = pendulum.toMidCart.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.toMidCart.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.toMidCart.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.toMidCart.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.toMidCart.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.toMidCart.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.toMidCart.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.toMidCart.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.toMidCart.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.toMidCart.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.toMidCart.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.toMidCart.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.toMidCart.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.toMidCart.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.toMidCart.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.toMidCart.fb[1];
// Real pendulum.toMidCart.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.toMidCart.fb[2];
// Real pendulum.toMidCart.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.toMidCart.fb[3];
// Real pendulum.toMidCart.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.toMidCart.tb[1];
// Real pendulum.toMidCart.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.toMidCart.tb[2];
// Real pendulum.toMidCart.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.toMidCart.tb[3];
// protected Real pendulum.toMidCart.Sa[1,1](start = 1.0);
// protected Real pendulum.toMidCart.Sa[1,2](start = 0.0);
// protected Real pendulum.toMidCart.Sa[1,3](start = 0.0);
// protected Real pendulum.toMidCart.Sa[2,1](start = 0.0);
// protected Real pendulum.toMidCart.Sa[2,2](start = 1.0);
// protected Real pendulum.toMidCart.Sa[2,3](start = 0.0);
// protected Real pendulum.toMidCart.Sa[3,1](start = 0.0);
// protected Real pendulum.toMidCart.Sa[3,2](start = 0.0);
// protected Real pendulum.toMidCart.Sa[3,3](start = 1.0);
// protected Real pendulum.toMidCart.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.toMidCart.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.toMidCart.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.toMidCart.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.toMidCart.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.toMidCart.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.toMidCart.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.toMidCart.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.toMidCart.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.toMidCart.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.toMidCart.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.toMidCart.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.toMidCart.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.toMidCart.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.toMidCart.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.toMidCart.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.toMidCart.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.toMidCart.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.toMidCart.Sb[1,1](start = 1.0);
// protected Real pendulum.toMidCart.Sb[1,2](start = 0.0);
// protected Real pendulum.toMidCart.Sb[1,3](start = 0.0);
// protected Real pendulum.toMidCart.Sb[2,1](start = 0.0);
// protected Real pendulum.toMidCart.Sb[2,2](start = 1.0);
// protected Real pendulum.toMidCart.Sb[2,3](start = 0.0);
// protected Real pendulum.toMidCart.Sb[3,1](start = 0.0);
// protected Real pendulum.toMidCart.Sb[3,2](start = 0.0);
// protected Real pendulum.toMidCart.Sb[3,3](start = 1.0);
// protected Real pendulum.toMidCart.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.toMidCart.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.toMidCart.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.toMidCart.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.toMidCart.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.toMidCart.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.toMidCart.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.toMidCart.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.toMidCart.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.toMidCart.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.toMidCart.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.toMidCart.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.toMidCart.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.toMidCart.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.toMidCart.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.toMidCart.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.toMidCart.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.toMidCart.tb[3](quantity = "Torque", unit = "N.m");
// parameter Real pendulum.toMidCart.r[1](quantity = "Length", unit = "m") = (-pendulum.cart.r[1]) / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
// parameter Real pendulum.toMidCart.r[2](quantity = "Length", unit = "m") = pendulum.cart.Height / 2.0 "Vector from frame_a to frame_b resolved in frame_a";
// parameter Real pendulum.toMidCart.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
// protected Real pendulum.toMidCart.vaux[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.vaux[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.toMidCart.vaux[3](quantity = "Velocity", unit = "m/s");
// constant Real pendulum.sliderConstraint.pi = 3.14159265358979;
// constant Real pendulum.sliderConstraint.PI = 3.14159265358979 "Only for compatibility reasons";
// input Real pendulum.sliderConstraint.frame_a.r0[1](quantity = "Length", unit = "m") = pendulum.sliderConstraint.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.sliderConstraint.frame_a.r0[2](quantity = "Length", unit = "m") = pendulum.sliderConstraint.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// input Real pendulum.sliderConstraint.frame_a.r0[3](quantity = "Length", unit = "m") = pendulum.sliderConstraint.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.sliderConstraint.frame_a.S[1,1] = pendulum.sliderConstraint.Sa[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[1,2] = pendulum.sliderConstraint.Sa[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[1,3] = pendulum.sliderConstraint.Sa[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[2,1] = pendulum.sliderConstraint.Sa[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[2,2] = pendulum.sliderConstraint.Sa[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[2,3] = pendulum.sliderConstraint.Sa[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[3,1] = pendulum.sliderConstraint.Sa[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[3,2] = pendulum.sliderConstraint.Sa[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.S[3,3] = pendulum.sliderConstraint.Sa[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_a.v[1](quantity = "Velocity", unit = "m/s") = pendulum.sliderConstraint.va[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.v[2](quantity = "Velocity", unit = "m/s") = pendulum.sliderConstraint.va[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.v[3](quantity = "Velocity", unit = "m/s") = pendulum.sliderConstraint.va[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.sliderConstraint.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.sliderConstraint.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.sliderConstraint.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.sliderConstraint.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.sliderConstraint.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.sliderConstraint.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.sliderConstraint.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.sliderConstraint.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.sliderConstraint.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_a.f[1](quantity = "Force", unit = "N") = pendulum.sliderConstraint.fa[1];
// Real pendulum.sliderConstraint.frame_a.f[2](quantity = "Force", unit = "N") = pendulum.sliderConstraint.fa[2];
// Real pendulum.sliderConstraint.frame_a.f[3](quantity = "Force", unit = "N") = pendulum.sliderConstraint.fa[3];
// Real pendulum.sliderConstraint.frame_a.t[1](quantity = "Torque", unit = "N.m") = pendulum.sliderConstraint.ta[1];
// Real pendulum.sliderConstraint.frame_a.t[2](quantity = "Torque", unit = "N.m") = pendulum.sliderConstraint.ta[2];
// Real pendulum.sliderConstraint.frame_a.t[3](quantity = "Torque", unit = "N.m") = pendulum.sliderConstraint.ta[3];
// output Real pendulum.sliderConstraint.frame_b.r0[1](quantity = "Length", unit = "m") = pendulum.sliderConstraint.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.sliderConstraint.frame_b.r0[2](quantity = "Length", unit = "m") = pendulum.sliderConstraint.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
// output Real pendulum.sliderConstraint.frame_b.r0[3](quantity = "Length", unit = "m") = pendulum.sliderConstraint.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
// Real pendulum.sliderConstraint.frame_b.S[1,1] = pendulum.sliderConstraint.Sb[1,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[1,2] = pendulum.sliderConstraint.Sb[1,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[1,3] = pendulum.sliderConstraint.Sb[1,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[2,1] = pendulum.sliderConstraint.Sb[2,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[2,2] = pendulum.sliderConstraint.Sb[2,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[2,3] = pendulum.sliderConstraint.Sb[2,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[3,1] = pendulum.sliderConstraint.Sb[3,1] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[3,2] = pendulum.sliderConstraint.Sb[3,2] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.S[3,3] = pendulum.sliderConstraint.Sb[3,3] "Transformation matrix from frame_a to inertial system";
// Real pendulum.sliderConstraint.frame_b.v[1](quantity = "Velocity", unit = "m/s") = pendulum.sliderConstraint.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.v[2](quantity = "Velocity", unit = "m/s") = pendulum.sliderConstraint.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.v[3](quantity = "Velocity", unit = "m/s") = pendulum.sliderConstraint.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.sliderConstraint.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.sliderConstraint.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = pendulum.sliderConstraint.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = pendulum.sliderConstraint.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = pendulum.sliderConstraint.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = pendulum.sliderConstraint.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.sliderConstraint.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.sliderConstraint.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = pendulum.sliderConstraint.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
// Real pendulum.sliderConstraint.frame_b.f[1](quantity = "Force", unit = "N") = -pendulum.sliderConstraint.fb[1];
// Real pendulum.sliderConstraint.frame_b.f[2](quantity = "Force", unit = "N") = -pendulum.sliderConstraint.fb[2];
// Real pendulum.sliderConstraint.frame_b.f[3](quantity = "Force", unit = "N") = -pendulum.sliderConstraint.fb[3];
// Real pendulum.sliderConstraint.frame_b.t[1](quantity = "Torque", unit = "N.m") = -pendulum.sliderConstraint.tb[1];
// Real pendulum.sliderConstraint.frame_b.t[2](quantity = "Torque", unit = "N.m") = -pendulum.sliderConstraint.tb[2];
// Real pendulum.sliderConstraint.frame_b.t[3](quantity = "Torque", unit = "N.m") = -pendulum.sliderConstraint.tb[3];
// protected Real pendulum.sliderConstraint.Sa[1,1](start = 1.0);
// protected Real pendulum.sliderConstraint.Sa[1,2](start = 0.0);
// protected Real pendulum.sliderConstraint.Sa[1,3](start = 0.0);
// protected Real pendulum.sliderConstraint.Sa[2,1](start = 0.0);
// protected Real pendulum.sliderConstraint.Sa[2,2](start = 1.0);
// protected Real pendulum.sliderConstraint.Sa[2,3](start = 0.0);
// protected Real pendulum.sliderConstraint.Sa[3,1](start = 0.0);
// protected Real pendulum.sliderConstraint.Sa[3,2](start = 0.0);
// protected Real pendulum.sliderConstraint.Sa[3,3](start = 1.0);
// protected Real pendulum.sliderConstraint.r0a[1](quantity = "Length", unit = "m");
// protected Real pendulum.sliderConstraint.r0a[2](quantity = "Length", unit = "m");
// protected Real pendulum.sliderConstraint.r0a[3](quantity = "Length", unit = "m");
// protected Real pendulum.sliderConstraint.va[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.sliderConstraint.va[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.sliderConstraint.va[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.sliderConstraint.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.sliderConstraint.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.sliderConstraint.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.sliderConstraint.aa[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.sliderConstraint.aa[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.sliderConstraint.aa[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.sliderConstraint.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.sliderConstraint.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.sliderConstraint.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.sliderConstraint.fa[1](quantity = "Force", unit = "N");
// protected Real pendulum.sliderConstraint.fa[2](quantity = "Force", unit = "N");
// protected Real pendulum.sliderConstraint.fa[3](quantity = "Force", unit = "N");
// protected Real pendulum.sliderConstraint.ta[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.sliderConstraint.ta[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.sliderConstraint.ta[3](quantity = "Torque", unit = "N.m");
// protected Real pendulum.sliderConstraint.Sb[1,1](start = 1.0);
// protected Real pendulum.sliderConstraint.Sb[1,2](start = 0.0);
// protected Real pendulum.sliderConstraint.Sb[1,3](start = 0.0);
// protected Real pendulum.sliderConstraint.Sb[2,1](start = 0.0);
// protected Real pendulum.sliderConstraint.Sb[2,2](start = 1.0);
// protected Real pendulum.sliderConstraint.Sb[2,3](start = 0.0);
// protected Real pendulum.sliderConstraint.Sb[3,1](start = 0.0);
// protected Real pendulum.sliderConstraint.Sb[3,2](start = 0.0);
// protected Real pendulum.sliderConstraint.Sb[3,3](start = 1.0);
// protected Real pendulum.sliderConstraint.r0b[1](quantity = "Length", unit = "m");
// protected Real pendulum.sliderConstraint.r0b[2](quantity = "Length", unit = "m");
// protected Real pendulum.sliderConstraint.r0b[3](quantity = "Length", unit = "m");
// protected Real pendulum.sliderConstraint.vb[1](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.sliderConstraint.vb[2](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.sliderConstraint.vb[3](quantity = "Velocity", unit = "m/s");
// protected Real pendulum.sliderConstraint.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.sliderConstraint.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.sliderConstraint.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// protected Real pendulum.sliderConstraint.ab[1](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.sliderConstraint.ab[2](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.sliderConstraint.ab[3](quantity = "Acceleration", unit = "m/s2");
// protected Real pendulum.sliderConstraint.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.sliderConstraint.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.sliderConstraint.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
// protected Real pendulum.sliderConstraint.fb[1](quantity = "Force", unit = "N");
// protected Real pendulum.sliderConstraint.fb[2](quantity = "Force", unit = "N");
// protected Real pendulum.sliderConstraint.fb[3](quantity = "Force", unit = "N");
// protected Real pendulum.sliderConstraint.tb[1](quantity = "Torque", unit = "N.m");
// protected Real pendulum.sliderConstraint.tb[2](quantity = "Torque", unit = "N.m");
// protected Real pendulum.sliderConstraint.tb[3](quantity = "Torque", unit = "N.m");
// Real pendulum.sliderConstraint.S_rel[1,1];
// Real pendulum.sliderConstraint.S_rel[1,2];
// Real pendulum.sliderConstraint.S_rel[1,3];
// Real pendulum.sliderConstraint.S_rel[2,1];
// Real pendulum.sliderConstraint.S_rel[2,2];
// Real pendulum.sliderConstraint.S_rel[2,3];
// Real pendulum.sliderConstraint.S_rel[3,1];
// Real pendulum.sliderConstraint.S_rel[3,2];
// Real pendulum.sliderConstraint.S_rel[3,3];
// Real pendulum.sliderConstraint.r_rela[1](quantity = "Length", unit = "m");
// Real pendulum.sliderConstraint.r_rela[2](quantity = "Length", unit = "m");
// Real pendulum.sliderConstraint.r_rela[3](quantity = "Length", unit = "m");
// Real pendulum.sliderConstraint.v_rela[1](quantity = "Velocity", unit = "m/s");
// Real pendulum.sliderConstraint.v_rela[2](quantity = "Velocity", unit = "m/s");
// Real pendulum.sliderConstraint.v_rela[3](quantity = "Velocity", unit = "m/s");
// Real pendulum.sliderConstraint.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// Real pendulum.sliderConstraint.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// Real pendulum.sliderConstraint.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
// Real pendulum.sliderConstraint.a_rela[1](quantity = "Acceleration", unit = "m/s2");
// Real pendulum.sliderConstraint.a_rela[2](quantity = "Acceleration", unit = "m/s2");
// Real pendulum.sliderConstraint.a_rela[3](quantity = "Acceleration", unit = "m/s2");
// Real pendulum.sliderConstraint.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
// Real pendulum.sliderConstraint.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
// Real pendulum.sliderConstraint.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
// parameter Real pendulum.sliderConstraint.n[1] = 1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
// parameter Real pendulum.sliderConstraint.n[2] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
// parameter Real pendulum.sliderConstraint.n[3] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
// parameter Real pendulum.sliderConstraint.q0(quantity = "Length", unit = "m") = 0.0 "Relative distance offset(see info)";
// parameter Boolean pendulum.sliderConstraint.startValueFixed = false "true, if start values of q, qd are fixed";
// Real pendulum.sliderConstraint.q(quantity = "Length", unit = "m", fixed = pendulum.sliderConstraint.startValueFixed, StateSelect = StateSelect.prefer);
// Real pendulum.sliderConstraint.qd(quantity = "Velocity", unit = "m/s", fixed = pendulum.sliderConstraint.startValueFixed);
// Real pendulum.sliderConstraint.qdd(quantity = "Acceleration", unit = "m/s2");
// Real pendulum.sliderConstraint.qq(quantity = "Length", unit = "m");
// Real pendulum.sliderConstraint.nn[1];
// Real pendulum.sliderConstraint.nn[2];
// Real pendulum.sliderConstraint.nn[3];
// Real pendulum.sliderConstraint.vaux[1](quantity = "Velocity", unit = "m/s");
// Real pendulum.sliderConstraint.vaux[2](quantity = "Velocity", unit = "m/s");
// Real pendulum.sliderConstraint.vaux[3](quantity = "Velocity", unit = "m/s");
// Real pendulum.sliderConstraint.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real pendulum.sliderConstraint.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real pendulum.sliderConstraint.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real pendulum.sliderConstraint.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real pendulum.pendulumDamper.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", start = 0.0) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
// Real pendulum.pendulumDamper.tau(quantity = "Torque", unit = "N.m") "Torque between flanges (= flange_b.tau)";
// Real pendulum.pendulumDamper.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real pendulum.pendulumDamper.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real pendulum.pendulumDamper.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real pendulum.pendulumDamper.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// parameter Real pendulum.pendulumDamper.d(unit = "N.m.s/rad", min = 0.0) = pendulum.d_pendulum "Damping constant";
// Real pendulum.pendulumDamper.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between flange_b and flange_a";
// Real pendulum.sliderDamper.s_rel(quantity = "Length", unit = "m", min = 0.0) "relative distance (= flange_b.s - flange_a.s)";
// Real pendulum.sliderDamper.f(quantity = "Force", unit = "N") "forcee between flanges (positive in direction of flange axis R)";
// Real pendulum.sliderDamper.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real pendulum.sliderDamper.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real pendulum.sliderDamper.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real pendulum.sliderDamper.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
// parameter Real pendulum.sliderDamper.d(unit = "N/ (m/s)", min = 0.0) = pendulum.d_slider "damping constant [N/ (m/s)]";
// Real pendulum.sliderDamper.v_rel(quantity = "Velocity", unit = "m/s") "relative velocity between flange_a and flange_b";
// Real pendulum.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real pendulum.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real pendulum.angleSensor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real pendulum.angleSensor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// output Real pendulum.angleSensor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
// Real pendulum.positionSensor.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real pendulum.positionSensor.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
// output Real pendulum.positionSensor.s(quantity = "Length", unit = "m") "Absolute position of flange as output signal";
// output Real pendulum.position;
// output Real pendulum.angle;
// parameter Real gear.ratio_rotational = 3.7 "Rotational transmission ratio from input wheel to pinion";
// parameter Real gear.ratio_translational(unit = "rad/m") = 157.48 "Translational transmission ratio from pinion to gear rack";
// parameter Real gear.gearR2T.ratio(unit = "rad/m") = gear.ratio_translational "transmission ratio (flange_a.phi/flange_b.s)";
// Real gear.gearR2T.tau_support(quantity = "Torque", unit = "N.m");
// Real gear.gearR2T.f_support(quantity = "Force", unit = "N");
// Real gear.gearR2T.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real gear.gearR2T.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real gear.gearR2T.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real gear.gearR2T.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real gear.gearR2T.bearingR.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real gear.gearR2T.bearingR.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real gear.gearR2T.bearingT.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real gear.gearR2T.bearingT.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real gear.idealGear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real gear.idealGear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real gear.idealGear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real gear.idealGear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real gear.idealGear.tau_support(quantity = "Torque", unit = "N.m");
// Real gear.idealGear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real gear.idealGear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// Real gear.idealGear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
// Real gear.idealGear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
// parameter Real gear.idealGear.ratio = gear.ratio_rotational "Transmission ratio (flange_a.phi/flange_b.phi)";
// Real gear.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real gear.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
// Real gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
// equation
//   motor.voltageSource.v = motor.voltageSource.p.v - motor.voltageSource.n.v;
//   0.0 = motor.voltageSource.p.i + motor.voltageSource.n.i;
//   motor.voltageSource.i = motor.voltageSource.p.i;
//   motor.resistor.R * motor.resistor.i = motor.resistor.v;
//   motor.resistor.v = motor.resistor.p.v - motor.resistor.n.v;
//   0.0 = motor.resistor.p.i + motor.resistor.n.i;
//   motor.resistor.i = motor.resistor.p.i;
//   motor.inductor.L * der(motor.inductor.i) = motor.inductor.v;
//   motor.inductor.v = motor.inductor.p.v - motor.inductor.n.v;
//   0.0 = motor.inductor.p.i + motor.inductor.n.i;
//   motor.inductor.i = motor.inductor.p.i;
//   motor.EMF.v = motor.EMF.p.v - motor.EMF.n.v;
//   0.0 = motor.EMF.p.i + motor.EMF.n.i;
//   motor.EMF.i = motor.EMF.p.i;
//   motor.EMF.w = der(motor.EMF.flange_b.phi);
//   motor.EMF.k * motor.EMF.w = motor.EMF.v;
//   motor.EMF.flange_b.tau = (-motor.EMF.k) * motor.EMF.i;
//   motor.ground.p.v = 0.0;
//   motor.EMF.n.i + (motor.ground.p.i + motor.voltageSource.n.i) = 0.0;
// motor.EMF.n.v = motor.ground.p.v;
// motor.ground.p.v = motor.voltageSource.n.v;
//   motor.voltageSource.p.i + motor.resistor.p.i = 0.0;
// motor.voltageSource.p.v = motor.resistor.p.v;
//   motor.resistor.n.i + motor.inductor.p.i = 0.0;
// motor.resistor.n.v = motor.inductor.p.v;
//   motor.inductor.n.i + motor.EMF.p.i = 0.0;
// motor.inductor.n.v = motor.EMF.p.v;
//   motor.EMF.flange_b.tau + (-motor.flange.tau) = 0.0;
// motor.EMF.flange_b.phi = motor.flange.phi;
// motor.voltageSource.v = motor.u;
//   controller.step.y = controller.step.k;
//   der(controller.observer.x[1]) = controller.observer.A[1,1] * controller.observer.x[1] + (controller.observer.A[1,2] * controller.observer.x[2] + (controller.observer.A[1,3] * controller.observer.x[3] + (controller.observer.A[1,4] * controller.observer.x[4] + (controller.observer.B[1,1] * controller.observer.u[1] + (controller.observer.B[1,2] * controller.observer.u[2] + controller.observer.B[1,3] * controller.observer.u[3])))));
//   der(controller.observer.x[2]) = controller.observer.A[2,1] * controller.observer.x[1] + (controller.observer.A[2,2] * controller.observer.x[2] + (controller.observer.A[2,3] * controller.observer.x[3] + (controller.observer.A[2,4] * controller.observer.x[4] + (controller.observer.B[2,1] * controller.observer.u[1] + (controller.observer.B[2,2] * controller.observer.u[2] + controller.observer.B[2,3] * controller.observer.u[3])))));
//   der(controller.observer.x[3]) = controller.observer.A[3,1] * controller.observer.x[1] + (controller.observer.A[3,2] * controller.observer.x[2] + (controller.observer.A[3,3] * controller.observer.x[3] + (controller.observer.A[3,4] * controller.observer.x[4] + (controller.observer.B[3,1] * controller.observer.u[1] + (controller.observer.B[3,2] * controller.observer.u[2] + controller.observer.B[3,3] * controller.observer.u[3])))));
//   der(controller.observer.x[4]) = controller.observer.A[4,1] * controller.observer.x[1] + (controller.observer.A[4,2] * controller.observer.x[2] + (controller.observer.A[4,3] * controller.observer.x[3] + (controller.observer.A[4,4] * controller.observer.x[4] + (controller.observer.B[4,1] * controller.observer.u[1] + (controller.observer.B[4,2] * controller.observer.u[2] + controller.observer.B[4,3] * controller.observer.u[3])))));
//   controller.observer.y[1] = controller.observer.C[1,1] * controller.observer.x[1] + (controller.observer.C[1,2] * controller.observer.x[2] + (controller.observer.C[1,3] * controller.observer.x[3] + (controller.observer.C[1,4] * controller.observer.x[4] + (controller.observer.D[1,1] * controller.observer.u[1] + (controller.observer.D[1,2] * controller.observer.u[2] + controller.observer.D[1,3] * controller.observer.u[3])))));
//   controller.observer.y[2] = controller.observer.C[2,1] * controller.observer.x[1] + (controller.observer.C[2,2] * controller.observer.x[2] + (controller.observer.C[2,3] * controller.observer.x[3] + (controller.observer.C[2,4] * controller.observer.x[4] + (controller.observer.D[2,1] * controller.observer.u[1] + (controller.observer.D[2,2] * controller.observer.u[2] + controller.observer.D[2,3] * controller.observer.u[3])))));
//   controller.observer.y[3] = controller.observer.C[3,1] * controller.observer.x[1] + (controller.observer.C[3,2] * controller.observer.x[2] + (controller.observer.C[3,3] * controller.observer.x[3] + (controller.observer.C[3,4] * controller.observer.x[4] + (controller.observer.D[3,1] * controller.observer.u[1] + (controller.observer.D[3,2] * controller.observer.u[2] + controller.observer.D[3,3] * controller.observer.u[3])))));
//   controller.observer.y[4] = controller.observer.C[4,1] * controller.observer.x[1] + (controller.observer.C[4,2] * controller.observer.x[2] + (controller.observer.C[4,3] * controller.observer.x[3] + (controller.observer.C[4,4] * controller.observer.x[4] + (controller.observer.D[4,1] * controller.observer.u[1] + (controller.observer.D[4,2] * controller.observer.u[2] + controller.observer.D[4,3] * controller.observer.u[3])))));
//   controller.L.y[1] = controller.L.K[1,1] * controller.L.u[1] + (controller.L.K[1,2] * controller.L.u[2] + (controller.L.K[1,3] * controller.L.u[3] + controller.L.K[1,4] * controller.L.u[4]));
//   controller.feedback.y = controller.feedback.u1 - controller.feedback.u2;
//   controller.L_r.y = controller.L_r.k * controller.L_r.u;
//   controller.mux.y[1] = controller.mux.u1[1];
//   controller.mux.y[2] = controller.mux.u2[1];
//   controller.mux.y[3] = controller.mux.u3[1];
//   when sample(controller.pulse.startTime,controller.pulse.period) then
//   controller.pulse.T0 = time;
//   end when;
//   controller.pulse.y = controller.pulse.offset + (if time < controller.pulse.startTime OR time >= controller.pulse.T0 + controller.pulse.T_width then 0.0 else controller.pulse.amplitude);
//   controller.switch1.y = if controller.switch1.u2 then controller.switch1.u1 else controller.switch1.u3;
//   controller.ConstantQ.y = controller.ConstantQ.k;
// assert(controller.limiter.uMax >= controller.limiter.uMin,"Limiter: Limits must be consistent. However, uMax (=" + String(controller.limiter.uMax,0,true,6) + ") < uMin (=" + String(controller.limiter.uMin,0,true,6) + ")");
//   if initial() AND  NOT controller.limiter.limitsAtInit then
//   controller.limiter.y = controller.limiter.u;
// assert(controller.limiter.u >= controller.limiter.uMin - 0.01 * abs(controller.limiter.uMin) AND controller.limiter.u <= controller.limiter.uMax + 0.01 * abs(controller.limiter.uMax),"Limiter: During initialization the limits have been ignored.\n" + "However, the result is that the input u is not within the required limits:\n" + "  u = " + String(controller.limiter.u,0,true,6) + ", uMin = " + String(controller.limiter.uMin,0,true,6) + ", uMax = " + String(controller.limiter.uMax,0,true,6));
//   else
//   controller.limiter.y = if controller.limiter.u > controller.limiter.uMax then controller.limiter.uMax else if controller.limiter.u < controller.limiter.uMin then controller.limiter.uMin else controller.limiter.u;
//   end if;
//   controller.switch2.y = if controller.switch2.u2 then controller.switch2.u1 else controller.switch2.u3;
//   controller.ConstantQ1.y = controller.ConstantQ1.k;
//   controller.timeTable.y = controller.timeTable.a * time + controller.timeTable.b;
// controller.observer.y[1] = controller.L.u[1];
// controller.observer.y[2] = controller.L.u[2];
// controller.observer.y[3] = controller.L.u[3];
// controller.observer.y[4] = controller.L.u[4];
// controller.L.y[1] = controller.feedback.u2;
// controller.L_r.y = controller.feedback.u1;
// controller.mux.y[1] = controller.observer.u[1];
// controller.mux.y[2] = controller.observer.u[2];
// controller.mux.y[3] = controller.observer.u[3];
// controller.step.y = controller.switch1.u1;
// controller.y = controller.limiter.y;
// controller.limiter.y = controller.mux.u1[1];
// controller.feedback.y = controller.limiter.u;
// controller.angle = controller.mux.u3[1];
// controller.xPos = controller.mux.u2[1];
// controller.switch2.u1 = controller.pulse.y;
// controller.switch2.y = controller.switch1.u3;
// controller.ConstantQ1.y = controller.switch2.u2;
// controller.timeTable.y = controller.switch2.u3;
// controller.ConstantQ.y = controller.switch1.u2;
// controller.switch1.y = controller.L_r.u;
//   pendulum.inertialSystem.gravity[1] = pendulum.inertialSystem.g * pendulum.inertialSystem.ng[1];
//   pendulum.inertialSystem.gravity[2] = pendulum.inertialSystem.g * pendulum.inertialSystem.ng[2];
//   pendulum.inertialSystem.gravity[3] = pendulum.inertialSystem.g * pendulum.inertialSystem.ng[3];
//   pendulum.inertialSystem.frame_b.S[1,1] = 1.0;
//   pendulum.inertialSystem.frame_b.S[1,2] = 0.0;
//   pendulum.inertialSystem.frame_b.S[1,3] = 0.0;
//   pendulum.inertialSystem.frame_b.S[2,1] = 0.0;
//   pendulum.inertialSystem.frame_b.S[2,2] = 1.0;
//   pendulum.inertialSystem.frame_b.S[2,3] = 0.0;
//   pendulum.inertialSystem.frame_b.S[3,1] = 0.0;
//   pendulum.inertialSystem.frame_b.S[3,2] = 0.0;
//   pendulum.inertialSystem.frame_b.S[3,3] = 1.0;
//   pendulum.inertialSystem.frame_b.r0[1] = 0.0;
//   pendulum.inertialSystem.frame_b.r0[2] = 0.0;
//   pendulum.inertialSystem.frame_b.r0[3] = 0.0;
//   pendulum.inertialSystem.frame_b.v[1] = 0.0;
//   pendulum.inertialSystem.frame_b.v[2] = 0.0;
//   pendulum.inertialSystem.frame_b.v[3] = 0.0;
//   pendulum.inertialSystem.frame_b.w[1] = 0.0;
//   pendulum.inertialSystem.frame_b.w[2] = 0.0;
//   pendulum.inertialSystem.frame_b.w[3] = 0.0;
//   pendulum.inertialSystem.frame_b.a[1] = -pendulum.inertialSystem.gravity[1];
//   pendulum.inertialSystem.frame_b.a[2] = -pendulum.inertialSystem.gravity[2];
//   pendulum.inertialSystem.frame_b.a[3] = -pendulum.inertialSystem.gravity[3];
//   pendulum.inertialSystem.frame_b.z[1] = 0.0;
//   pendulum.inertialSystem.frame_b.z[2] = 0.0;
//   pendulum.inertialSystem.frame_b.z[3] = 0.0;
//   pendulum.cart.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(pendulum.cart.box.mcShape.shapeType);
//   pendulum.cart.box.mcShape.Material = PackMaterial(pendulum.cart.box.mcShape.color[1] / 255.0,pendulum.cart.box.mcShape.color[2] / 255.0,pendulum.cart.box.mcShape.color[3] / 255.0,pendulum.cart.box.mcShape.specularCoefficient);
//   pendulum.cart.box.mcShape.Extra = pendulum.cart.box.mcShape.extra;
//   pendulum.cart.box.mcShape.size[1] = pendulum.cart.box.mcShape.length;
//   pendulum.cart.box.mcShape.size[2] = pendulum.cart.box.mcShape.width;
//   pendulum.cart.box.mcShape.size[3] = pendulum.cart.box.mcShape.height;
//   pendulum.cart.box.mcShape.Sshape[1,1] = pendulum.cart.box.mcShape.e_x[1];
//   pendulum.cart.box.mcShape.Sshape[1,2] = pendulum.cart.box.mcShape.e_y[1];
//   pendulum.cart.box.mcShape.Sshape[1,3] = pendulum.cart.box.mcShape.e_x[2] * pendulum.cart.box.mcShape.e_y[3] - pendulum.cart.box.mcShape.e_x[3] * pendulum.cart.box.mcShape.e_y[2];
//   pendulum.cart.box.mcShape.Sshape[2,1] = pendulum.cart.box.mcShape.e_x[2];
//   pendulum.cart.box.mcShape.Sshape[2,2] = pendulum.cart.box.mcShape.e_y[2];
//   pendulum.cart.box.mcShape.Sshape[2,3] = pendulum.cart.box.mcShape.e_x[3] * pendulum.cart.box.mcShape.e_y[1] - pendulum.cart.box.mcShape.e_x[1] * pendulum.cart.box.mcShape.e_y[3];
//   pendulum.cart.box.mcShape.Sshape[3,1] = pendulum.cart.box.mcShape.e_x[3];
//   pendulum.cart.box.mcShape.Sshape[3,2] = pendulum.cart.box.mcShape.e_y[3];
//   pendulum.cart.box.mcShape.Sshape[3,3] = pendulum.cart.box.mcShape.e_x[1] * pendulum.cart.box.mcShape.e_y[2] - pendulum.cart.box.mcShape.e_x[2] * pendulum.cart.box.mcShape.e_y[1];
//   pendulum.cart.box.mcShape.rxvisobj[1] = pendulum.cart.box.mcShape.S[1,1] * pendulum.cart.box.mcShape.e_x[1] + (pendulum.cart.box.mcShape.S[1,2] * pendulum.cart.box.mcShape.e_x[2] + pendulum.cart.box.mcShape.S[1,3] * pendulum.cart.box.mcShape.e_x[3]);
//   pendulum.cart.box.mcShape.rxvisobj[2] = pendulum.cart.box.mcShape.S[2,1] * pendulum.cart.box.mcShape.e_x[1] + (pendulum.cart.box.mcShape.S[2,2] * pendulum.cart.box.mcShape.e_x[2] + pendulum.cart.box.mcShape.S[2,3] * pendulum.cart.box.mcShape.e_x[3]);
//   pendulum.cart.box.mcShape.rxvisobj[3] = pendulum.cart.box.mcShape.S[3,1] * pendulum.cart.box.mcShape.e_x[1] + (pendulum.cart.box.mcShape.S[3,2] * pendulum.cart.box.mcShape.e_x[2] + pendulum.cart.box.mcShape.S[3,3] * pendulum.cart.box.mcShape.e_x[3]);
//   pendulum.cart.box.mcShape.ryvisobj[1] = pendulum.cart.box.mcShape.S[1,1] * pendulum.cart.box.mcShape.e_y[1] + (pendulum.cart.box.mcShape.S[1,2] * pendulum.cart.box.mcShape.e_y[2] + pendulum.cart.box.mcShape.S[1,3] * pendulum.cart.box.mcShape.e_y[3]);
//   pendulum.cart.box.mcShape.ryvisobj[2] = pendulum.cart.box.mcShape.S[2,1] * pendulum.cart.box.mcShape.e_y[1] + (pendulum.cart.box.mcShape.S[2,2] * pendulum.cart.box.mcShape.e_y[2] + pendulum.cart.box.mcShape.S[2,3] * pendulum.cart.box.mcShape.e_y[3]);
//   pendulum.cart.box.mcShape.ryvisobj[3] = pendulum.cart.box.mcShape.S[3,1] * pendulum.cart.box.mcShape.e_y[1] + (pendulum.cart.box.mcShape.S[3,2] * pendulum.cart.box.mcShape.e_y[2] + pendulum.cart.box.mcShape.S[3,3] * pendulum.cart.box.mcShape.e_y[3]);
//   pendulum.cart.box.mcShape.rvisobj[1] = pendulum.cart.box.mcShape.r[1] + (pendulum.cart.box.mcShape.S[1,1] * pendulum.cart.box.mcShape.r_shape[1] + (pendulum.cart.box.mcShape.S[1,2] * pendulum.cart.box.mcShape.r_shape[2] + pendulum.cart.box.mcShape.S[1,3] * pendulum.cart.box.mcShape.r_shape[3]));
//   pendulum.cart.box.mcShape.rvisobj[2] = pendulum.cart.box.mcShape.r[2] + (pendulum.cart.box.mcShape.S[2,1] * pendulum.cart.box.mcShape.r_shape[1] + (pendulum.cart.box.mcShape.S[2,2] * pendulum.cart.box.mcShape.r_shape[2] + pendulum.cart.box.mcShape.S[2,3] * pendulum.cart.box.mcShape.r_shape[3]));
//   pendulum.cart.box.mcShape.rvisobj[3] = pendulum.cart.box.mcShape.r[3] + (pendulum.cart.box.mcShape.S[3,1] * pendulum.cart.box.mcShape.r_shape[1] + (pendulum.cart.box.mcShape.S[3,2] * pendulum.cart.box.mcShape.r_shape[2] + pendulum.cart.box.mcShape.S[3,3] * pendulum.cart.box.mcShape.r_shape[3]));
//   pendulum.cart.box.mcShape.e_x[1] = pendulum.cart.box.nLength[1];
//   pendulum.cart.box.mcShape.e_x[2] = pendulum.cart.box.nLength[2];
//   pendulum.cart.box.mcShape.e_x[3] = pendulum.cart.box.nLength[3];
//   pendulum.cart.box.mcShape.e_y[1] = pendulum.cart.box.nWidth[1];
//   pendulum.cart.box.mcShape.e_y[2] = pendulum.cart.box.nWidth[2];
//   pendulum.cart.box.mcShape.e_y[3] = pendulum.cart.box.nWidth[3];
//   pendulum.cart.box.mcShape.e_z[1] = pendulum.cart.box.nHeight[1];
//   pendulum.cart.box.mcShape.e_z[2] = pendulum.cart.box.nHeight[2];
//   pendulum.cart.box.mcShape.e_z[3] = pendulum.cart.box.nHeight[3];
//   pendulum.cart.frameTranslation.Sb[1,1] = pendulum.cart.frameTranslation.Sa[1,1];
//   pendulum.cart.frameTranslation.Sb[1,2] = pendulum.cart.frameTranslation.Sa[1,2];
//   pendulum.cart.frameTranslation.Sb[1,3] = pendulum.cart.frameTranslation.Sa[1,3];
//   pendulum.cart.frameTranslation.Sb[2,1] = pendulum.cart.frameTranslation.Sa[2,1];
//   pendulum.cart.frameTranslation.Sb[2,2] = pendulum.cart.frameTranslation.Sa[2,2];
//   pendulum.cart.frameTranslation.Sb[2,3] = pendulum.cart.frameTranslation.Sa[2,3];
//   pendulum.cart.frameTranslation.Sb[3,1] = pendulum.cart.frameTranslation.Sa[3,1];
//   pendulum.cart.frameTranslation.Sb[3,2] = pendulum.cart.frameTranslation.Sa[3,2];
//   pendulum.cart.frameTranslation.Sb[3,3] = pendulum.cart.frameTranslation.Sa[3,3];
//   pendulum.cart.frameTranslation.wb[1] = pendulum.cart.frameTranslation.wa[1];
//   pendulum.cart.frameTranslation.wb[2] = pendulum.cart.frameTranslation.wa[2];
//   pendulum.cart.frameTranslation.wb[3] = pendulum.cart.frameTranslation.wa[3];
//   pendulum.cart.frameTranslation.zb[1] = pendulum.cart.frameTranslation.za[1];
//   pendulum.cart.frameTranslation.zb[2] = pendulum.cart.frameTranslation.za[2];
//   pendulum.cart.frameTranslation.zb[3] = pendulum.cart.frameTranslation.za[3];
//   pendulum.cart.frameTranslation.r0b[1] = pendulum.cart.frameTranslation.r0a[1] + (pendulum.cart.frameTranslation.Sa[1,1] * pendulum.cart.frameTranslation.r[1] + (pendulum.cart.frameTranslation.Sa[1,2] * pendulum.cart.frameTranslation.r[2] + pendulum.cart.frameTranslation.Sa[1,3] * pendulum.cart.frameTranslation.r[3]));
//   pendulum.cart.frameTranslation.r0b[2] = pendulum.cart.frameTranslation.r0a[2] + (pendulum.cart.frameTranslation.Sa[2,1] * pendulum.cart.frameTranslation.r[1] + (pendulum.cart.frameTranslation.Sa[2,2] * pendulum.cart.frameTranslation.r[2] + pendulum.cart.frameTranslation.Sa[2,3] * pendulum.cart.frameTranslation.r[3]));
//   pendulum.cart.frameTranslation.r0b[3] = pendulum.cart.frameTranslation.r0a[3] + (pendulum.cart.frameTranslation.Sa[3,1] * pendulum.cart.frameTranslation.r[1] + (pendulum.cart.frameTranslation.Sa[3,2] * pendulum.cart.frameTranslation.r[2] + pendulum.cart.frameTranslation.Sa[3,3] * pendulum.cart.frameTranslation.r[3]));
//   pendulum.cart.frameTranslation.vaux[1] = pendulum.cart.frameTranslation.wa[2] * pendulum.cart.frameTranslation.r[3] - pendulum.cart.frameTranslation.wa[3] * pendulum.cart.frameTranslation.r[2];
//   pendulum.cart.frameTranslation.vaux[2] = pendulum.cart.frameTranslation.wa[3] * pendulum.cart.frameTranslation.r[1] - pendulum.cart.frameTranslation.wa[1] * pendulum.cart.frameTranslation.r[3];
//   pendulum.cart.frameTranslation.vaux[3] = pendulum.cart.frameTranslation.wa[1] * pendulum.cart.frameTranslation.r[2] - pendulum.cart.frameTranslation.wa[2] * pendulum.cart.frameTranslation.r[1];
//   pendulum.cart.frameTranslation.vb[1] = pendulum.cart.frameTranslation.va[1] + pendulum.cart.frameTranslation.vaux[1];
//   pendulum.cart.frameTranslation.vb[2] = pendulum.cart.frameTranslation.va[2] + pendulum.cart.frameTranslation.vaux[2];
//   pendulum.cart.frameTranslation.vb[3] = pendulum.cart.frameTranslation.va[3] + pendulum.cart.frameTranslation.vaux[3];
//   pendulum.cart.frameTranslation.ab[1] = pendulum.cart.frameTranslation.aa[1] + (pendulum.cart.frameTranslation.za[2] * pendulum.cart.frameTranslation.r[3] + ((-pendulum.cart.frameTranslation.za[3] * pendulum.cart.frameTranslation.r[2]) + (pendulum.cart.frameTranslation.wa[2] * pendulum.cart.frameTranslation.vaux[3] + (-pendulum.cart.frameTranslation.wa[3] * pendulum.cart.frameTranslation.vaux[2]))));
//   pendulum.cart.frameTranslation.ab[2] = pendulum.cart.frameTranslation.aa[2] + (pendulum.cart.frameTranslation.za[3] * pendulum.cart.frameTranslation.r[1] + ((-pendulum.cart.frameTranslation.za[1] * pendulum.cart.frameTranslation.r[3]) + (pendulum.cart.frameTranslation.wa[3] * pendulum.cart.frameTranslation.vaux[1] + (-pendulum.cart.frameTranslation.wa[1] * pendulum.cart.frameTranslation.vaux[3]))));
//   pendulum.cart.frameTranslation.ab[3] = pendulum.cart.frameTranslation.aa[3] + (pendulum.cart.frameTranslation.za[1] * pendulum.cart.frameTranslation.r[2] + ((-pendulum.cart.frameTranslation.za[2] * pendulum.cart.frameTranslation.r[1]) + (pendulum.cart.frameTranslation.wa[1] * pendulum.cart.frameTranslation.vaux[2] + (-pendulum.cart.frameTranslation.wa[2] * pendulum.cart.frameTranslation.vaux[1]))));
//   pendulum.cart.frameTranslation.fa[1] = pendulum.cart.frameTranslation.fb[1];
//   pendulum.cart.frameTranslation.fa[2] = pendulum.cart.frameTranslation.fb[2];
//   pendulum.cart.frameTranslation.fa[3] = pendulum.cart.frameTranslation.fb[3];
//   pendulum.cart.frameTranslation.ta[1] = pendulum.cart.frameTranslation.tb[1] + (pendulum.cart.frameTranslation.r[2] * pendulum.cart.frameTranslation.fa[3] + (-pendulum.cart.frameTranslation.r[3] * pendulum.cart.frameTranslation.fa[2]));
//   pendulum.cart.frameTranslation.ta[2] = pendulum.cart.frameTranslation.tb[2] + (pendulum.cart.frameTranslation.r[3] * pendulum.cart.frameTranslation.fa[1] + (-pendulum.cart.frameTranslation.r[1] * pendulum.cart.frameTranslation.fa[3]));
//   pendulum.cart.frameTranslation.ta[3] = pendulum.cart.frameTranslation.tb[3] + (pendulum.cart.frameTranslation.r[1] * pendulum.cart.frameTranslation.fa[2] + (-pendulum.cart.frameTranslation.r[2] * pendulum.cart.frameTranslation.fa[1]));
//   pendulum.cart.body.fa[1] = pendulum.cart.body.m * (pendulum.cart.body.aa[1] + (pendulum.cart.body.za[2] * pendulum.cart.body.rCM[3] + ((-pendulum.cart.body.za[3] * pendulum.cart.body.rCM[2]) + (pendulum.cart.body.wa[2] * (pendulum.cart.body.wa[1] * pendulum.cart.body.rCM[2] - pendulum.cart.body.wa[2] * pendulum.cart.body.rCM[1]) + (-pendulum.cart.body.wa[3] * (pendulum.cart.body.wa[3] * pendulum.cart.body.rCM[1] - pendulum.cart.body.wa[1] * pendulum.cart.body.rCM[3]))))));
//   pendulum.cart.body.fa[2] = pendulum.cart.body.m * (pendulum.cart.body.aa[2] + (pendulum.cart.body.za[3] * pendulum.cart.body.rCM[1] + ((-pendulum.cart.body.za[1] * pendulum.cart.body.rCM[3]) + (pendulum.cart.body.wa[3] * (pendulum.cart.body.wa[2] * pendulum.cart.body.rCM[3] - pendulum.cart.body.wa[3] * pendulum.cart.body.rCM[2]) + (-pendulum.cart.body.wa[1] * (pendulum.cart.body.wa[1] * pendulum.cart.body.rCM[2] - pendulum.cart.body.wa[2] * pendulum.cart.body.rCM[1]))))));
//   pendulum.cart.body.fa[3] = pendulum.cart.body.m * (pendulum.cart.body.aa[3] + (pendulum.cart.body.za[1] * pendulum.cart.body.rCM[2] + ((-pendulum.cart.body.za[2] * pendulum.cart.body.rCM[1]) + (pendulum.cart.body.wa[1] * (pendulum.cart.body.wa[3] * pendulum.cart.body.rCM[1] - pendulum.cart.body.wa[1] * pendulum.cart.body.rCM[3]) + (-pendulum.cart.body.wa[2] * (pendulum.cart.body.wa[2] * pendulum.cart.body.rCM[3] - pendulum.cart.body.wa[3] * pendulum.cart.body.rCM[2]))))));
//   pendulum.cart.body.ta[1] = pendulum.cart.body.I[1,1] * pendulum.cart.body.za[1] + (pendulum.cart.body.I[1,2] * pendulum.cart.body.za[2] + (pendulum.cart.body.I[1,3] * pendulum.cart.body.za[3] + (pendulum.cart.body.wa[2] * (pendulum.cart.body.I[3,1] * pendulum.cart.body.wa[1] + (pendulum.cart.body.I[3,2] * pendulum.cart.body.wa[2] + pendulum.cart.body.I[3,3] * pendulum.cart.body.wa[3])) + ((-pendulum.cart.body.wa[3] * (pendulum.cart.body.I[2,1] * pendulum.cart.body.wa[1] + (pendulum.cart.body.I[2,2] * pendulum.cart.body.wa[2] + pendulum.cart.body.I[2,3] * pendulum.cart.body.wa[3]))) + (pendulum.cart.body.rCM[2] * pendulum.cart.body.fa[3] + (-pendulum.cart.body.rCM[3] * pendulum.cart.body.fa[2]))))));
//   pendulum.cart.body.ta[2] = pendulum.cart.body.I[2,1] * pendulum.cart.body.za[1] + (pendulum.cart.body.I[2,2] * pendulum.cart.body.za[2] + (pendulum.cart.body.I[2,3] * pendulum.cart.body.za[3] + (pendulum.cart.body.wa[3] * (pendulum.cart.body.I[1,1] * pendulum.cart.body.wa[1] + (pendulum.cart.body.I[1,2] * pendulum.cart.body.wa[2] + pendulum.cart.body.I[1,3] * pendulum.cart.body.wa[3])) + ((-pendulum.cart.body.wa[1] * (pendulum.cart.body.I[3,1] * pendulum.cart.body.wa[1] + (pendulum.cart.body.I[3,2] * pendulum.cart.body.wa[2] + pendulum.cart.body.I[3,3] * pendulum.cart.body.wa[3]))) + (pendulum.cart.body.rCM[3] * pendulum.cart.body.fa[1] + (-pendulum.cart.body.rCM[1] * pendulum.cart.body.fa[3]))))));
//   pendulum.cart.body.ta[3] = pendulum.cart.body.I[3,1] * pendulum.cart.body.za[1] + (pendulum.cart.body.I[3,2] * pendulum.cart.body.za[2] + (pendulum.cart.body.I[3,3] * pendulum.cart.body.za[3] + (pendulum.cart.body.wa[1] * (pendulum.cart.body.I[2,1] * pendulum.cart.body.wa[1] + (pendulum.cart.body.I[2,2] * pendulum.cart.body.wa[2] + pendulum.cart.body.I[2,3] * pendulum.cart.body.wa[3])) + ((-pendulum.cart.body.wa[2] * (pendulum.cart.body.I[1,1] * pendulum.cart.body.wa[1] + (pendulum.cart.body.I[1,2] * pendulum.cart.body.wa[2] + pendulum.cart.body.I[1,3] * pendulum.cart.body.wa[3]))) + (pendulum.cart.body.rCM[1] * pendulum.cart.body.fa[2] + (-pendulum.cart.body.rCM[2] * pendulum.cart.body.fa[1]))))));
//   pendulum.cart.box.S[1,1] = pendulum.cart.Sa[1,1];
//   pendulum.cart.box.S[1,2] = pendulum.cart.Sa[1,2];
//   pendulum.cart.box.S[1,3] = pendulum.cart.Sa[1,3];
//   pendulum.cart.box.S[2,1] = pendulum.cart.Sa[2,1];
//   pendulum.cart.box.S[2,2] = pendulum.cart.Sa[2,2];
//   pendulum.cart.box.S[2,3] = pendulum.cart.Sa[2,3];
//   pendulum.cart.box.S[3,1] = pendulum.cart.Sa[3,1];
//   pendulum.cart.box.S[3,2] = pendulum.cart.Sa[3,2];
//   pendulum.cart.box.S[3,3] = pendulum.cart.Sa[3,3];
//   pendulum.cart.box.r[1] = pendulum.cart.r0a[1];
//   pendulum.cart.box.r[2] = pendulum.cart.r0a[2];
//   pendulum.cart.box.r[3] = pendulum.cart.r0a[3];
//   pendulum.cart.box.Sshape[1,1] = pendulum.cart.Sbox[1,1];
//   pendulum.cart.box.Sshape[1,2] = pendulum.cart.Sbox[1,2];
//   pendulum.cart.box.Sshape[1,3] = pendulum.cart.Sbox[1,3];
//   pendulum.cart.box.Sshape[2,1] = pendulum.cart.Sbox[2,1];
//   pendulum.cart.box.Sshape[2,2] = pendulum.cart.Sbox[2,2];
//   pendulum.cart.box.Sshape[2,3] = pendulum.cart.Sbox[2,3];
//   pendulum.cart.box.Sshape[3,1] = pendulum.cart.Sbox[3,1];
//   pendulum.cart.box.Sshape[3,2] = pendulum.cart.Sbox[3,2];
//   pendulum.cart.box.Sshape[3,3] = pendulum.cart.Sbox[3,3];
//   pendulum.cart.l = pendulum.cart.Length;
//   pendulum.cart.w = pendulum.cart.Width;
//   pendulum.cart.h = pendulum.cart.Height;
//   pendulum.cart.wi = pendulum.cart.InnerWidth;
//   pendulum.cart.hi = pendulum.cart.InnerHeight;
//   pendulum.cart.mo = 1000.0 * (pendulum.cart.rho * (pendulum.cart.l * (pendulum.cart.w * pendulum.cart.h)));
//   pendulum.cart.mi = 1000.0 * (pendulum.cart.rho * (pendulum.cart.l * (pendulum.cart.wi * pendulum.cart.hi)));
//   pendulum.cart.body.m = pendulum.cart.mo - pendulum.cart.mi;
//   pendulum.cart.body.rCM[1] = pendulum.cart.r0[1] + 0.5 * (pendulum.cart.l * pendulum.cart.box.nLength[1]);
//   pendulum.cart.body.rCM[2] = pendulum.cart.r0[2] + 0.5 * (pendulum.cart.l * pendulum.cart.box.nLength[2]);
//   pendulum.cart.body.rCM[3] = pendulum.cart.r0[3] + 0.5 * (pendulum.cart.l * pendulum.cart.box.nLength[3]);
//   pendulum.cart.body.I[1,1] = pendulum.cart.Sbox[1,1] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) + (pendulum.cart.Sbox[1,2] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) + pendulum.cart.Sbox[1,3] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)));
//   pendulum.cart.body.I[1,2] = pendulum.cart.Sbox[1,1] * ((pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[2,1]) + (pendulum.cart.Sbox[1,2] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[2,2]) + pendulum.cart.Sbox[1,3] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[2,3]));
//   pendulum.cart.body.I[1,3] = pendulum.cart.Sbox[1,1] * ((pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[3,1]) + (pendulum.cart.Sbox[1,2] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[3,2]) + pendulum.cart.Sbox[1,3] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[3,3]));
//   pendulum.cart.body.I[2,1] = pendulum.cart.Sbox[2,1] * ((pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[1,1]) + (pendulum.cart.Sbox[2,2] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[1,2]) + pendulum.cart.Sbox[2,3] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[1,3]));
//   pendulum.cart.body.I[2,2] = pendulum.cart.Sbox[2,1] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) + (pendulum.cart.Sbox[2,2] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) + pendulum.cart.Sbox[2,3] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)));
//   pendulum.cart.body.I[2,3] = pendulum.cart.Sbox[2,1] * ((pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[3,1]) + (pendulum.cart.Sbox[2,2] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[3,2]) + pendulum.cart.Sbox[2,3] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[3,3]));
//   pendulum.cart.body.I[3,1] = pendulum.cart.Sbox[3,1] * ((pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[1,1]) + (pendulum.cart.Sbox[3,2] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[1,2]) + pendulum.cart.Sbox[3,3] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[1,3]));
//   pendulum.cart.body.I[3,2] = pendulum.cart.Sbox[3,1] * ((pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[2,1]) + (pendulum.cart.Sbox[3,2] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[2,2]) + pendulum.cart.Sbox[3,3] * ((pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)) * pendulum.cart.Sbox[2,3]));
//   pendulum.cart.body.I[3,3] = pendulum.cart.Sbox[3,1] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.w ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.wi ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) + (pendulum.cart.Sbox[3,2] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.h ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.hi ^ 2.0 / 12.0)) + pendulum.cart.Sbox[3,3] ^ 2.0 * (pendulum.cart.mo * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.w ^ 2.0 / 12.0) - pendulum.cart.mi * (pendulum.cart.l ^ 2.0 / 12.0 + pendulum.cart.wi ^ 2.0 / 12.0)));
//   pendulum.cart.body.frame_a.t[1] + ((-pendulum.cart.frame_a.t[1]) + pendulum.cart.frameTranslation.frame_a.t[1]) = 0.0;
//   pendulum.cart.body.frame_a.t[2] + ((-pendulum.cart.frame_a.t[2]) + pendulum.cart.frameTranslation.frame_a.t[2]) = 0.0;
//   pendulum.cart.body.frame_a.t[3] + ((-pendulum.cart.frame_a.t[3]) + pendulum.cart.frameTranslation.frame_a.t[3]) = 0.0;
//   pendulum.cart.body.frame_a.f[1] + ((-pendulum.cart.frame_a.f[1]) + pendulum.cart.frameTranslation.frame_a.f[1]) = 0.0;
//   pendulum.cart.body.frame_a.f[2] + ((-pendulum.cart.frame_a.f[2]) + pendulum.cart.frameTranslation.frame_a.f[2]) = 0.0;
//   pendulum.cart.body.frame_a.f[3] + ((-pendulum.cart.frame_a.f[3]) + pendulum.cart.frameTranslation.frame_a.f[3]) = 0.0;
// pendulum.cart.body.frame_a.z[1] = pendulum.cart.frame_a.z[1];
// pendulum.cart.frame_a.z[1] = pendulum.cart.frameTranslation.frame_a.z[1];
// pendulum.cart.body.frame_a.z[2] = pendulum.cart.frame_a.z[2];
// pendulum.cart.frame_a.z[2] = pendulum.cart.frameTranslation.frame_a.z[2];
// pendulum.cart.body.frame_a.z[3] = pendulum.cart.frame_a.z[3];
// pendulum.cart.frame_a.z[3] = pendulum.cart.frameTranslation.frame_a.z[3];
// pendulum.cart.body.frame_a.a[1] = pendulum.cart.frame_a.a[1];
// pendulum.cart.frame_a.a[1] = pendulum.cart.frameTranslation.frame_a.a[1];
// pendulum.cart.body.frame_a.a[2] = pendulum.cart.frame_a.a[2];
// pendulum.cart.frame_a.a[2] = pendulum.cart.frameTranslation.frame_a.a[2];
// pendulum.cart.body.frame_a.a[3] = pendulum.cart.frame_a.a[3];
// pendulum.cart.frame_a.a[3] = pendulum.cart.frameTranslation.frame_a.a[3];
// pendulum.cart.body.frame_a.w[1] = pendulum.cart.frame_a.w[1];
// pendulum.cart.frame_a.w[1] = pendulum.cart.frameTranslation.frame_a.w[1];
// pendulum.cart.body.frame_a.w[2] = pendulum.cart.frame_a.w[2];
// pendulum.cart.frame_a.w[2] = pendulum.cart.frameTranslation.frame_a.w[2];
// pendulum.cart.body.frame_a.w[3] = pendulum.cart.frame_a.w[3];
// pendulum.cart.frame_a.w[3] = pendulum.cart.frameTranslation.frame_a.w[3];
// pendulum.cart.body.frame_a.v[1] = pendulum.cart.frame_a.v[1];
// pendulum.cart.frame_a.v[1] = pendulum.cart.frameTranslation.frame_a.v[1];
// pendulum.cart.body.frame_a.v[2] = pendulum.cart.frame_a.v[2];
// pendulum.cart.frame_a.v[2] = pendulum.cart.frameTranslation.frame_a.v[2];
// pendulum.cart.body.frame_a.v[3] = pendulum.cart.frame_a.v[3];
// pendulum.cart.frame_a.v[3] = pendulum.cart.frameTranslation.frame_a.v[3];
// pendulum.cart.body.frame_a.S[1,1] = pendulum.cart.frame_a.S[1,1];
// pendulum.cart.frame_a.S[1,1] = pendulum.cart.frameTranslation.frame_a.S[1,1];
// pendulum.cart.body.frame_a.S[1,2] = pendulum.cart.frame_a.S[1,2];
// pendulum.cart.frame_a.S[1,2] = pendulum.cart.frameTranslation.frame_a.S[1,2];
// pendulum.cart.body.frame_a.S[1,3] = pendulum.cart.frame_a.S[1,3];
// pendulum.cart.frame_a.S[1,3] = pendulum.cart.frameTranslation.frame_a.S[1,3];
// pendulum.cart.body.frame_a.S[2,1] = pendulum.cart.frame_a.S[2,1];
// pendulum.cart.frame_a.S[2,1] = pendulum.cart.frameTranslation.frame_a.S[2,1];
// pendulum.cart.body.frame_a.S[2,2] = pendulum.cart.frame_a.S[2,2];
// pendulum.cart.frame_a.S[2,2] = pendulum.cart.frameTranslation.frame_a.S[2,2];
// pendulum.cart.body.frame_a.S[2,3] = pendulum.cart.frame_a.S[2,3];
// pendulum.cart.frame_a.S[2,3] = pendulum.cart.frameTranslation.frame_a.S[2,3];
// pendulum.cart.body.frame_a.S[3,1] = pendulum.cart.frame_a.S[3,1];
// pendulum.cart.frame_a.S[3,1] = pendulum.cart.frameTranslation.frame_a.S[3,1];
// pendulum.cart.body.frame_a.S[3,2] = pendulum.cart.frame_a.S[3,2];
// pendulum.cart.frame_a.S[3,2] = pendulum.cart.frameTranslation.frame_a.S[3,2];
// pendulum.cart.body.frame_a.S[3,3] = pendulum.cart.frame_a.S[3,3];
// pendulum.cart.frame_a.S[3,3] = pendulum.cart.frameTranslation.frame_a.S[3,3];
// pendulum.cart.body.frame_a.r0[1] = pendulum.cart.frame_a.r0[1];
// pendulum.cart.frame_a.r0[1] = pendulum.cart.frameTranslation.frame_a.r0[1];
// pendulum.cart.body.frame_a.r0[2] = pendulum.cart.frame_a.r0[2];
// pendulum.cart.frame_a.r0[2] = pendulum.cart.frameTranslation.frame_a.r0[2];
// pendulum.cart.body.frame_a.r0[3] = pendulum.cart.frame_a.r0[3];
// pendulum.cart.frame_a.r0[3] = pendulum.cart.frameTranslation.frame_a.r0[3];
//   pendulum.cart.frameTranslation.frame_b.t[1] + (-pendulum.cart.frame_b.t[1]) = 0.0;
//   pendulum.cart.frameTranslation.frame_b.t[2] + (-pendulum.cart.frame_b.t[2]) = 0.0;
//   pendulum.cart.frameTranslation.frame_b.t[3] + (-pendulum.cart.frame_b.t[3]) = 0.0;
//   pendulum.cart.frameTranslation.frame_b.f[1] + (-pendulum.cart.frame_b.f[1]) = 0.0;
//   pendulum.cart.frameTranslation.frame_b.f[2] + (-pendulum.cart.frame_b.f[2]) = 0.0;
//   pendulum.cart.frameTranslation.frame_b.f[3] + (-pendulum.cart.frame_b.f[3]) = 0.0;
// pendulum.cart.frameTranslation.frame_b.z[1] = pendulum.cart.frame_b.z[1];
// pendulum.cart.frameTranslation.frame_b.z[2] = pendulum.cart.frame_b.z[2];
// pendulum.cart.frameTranslation.frame_b.z[3] = pendulum.cart.frame_b.z[3];
// pendulum.cart.frameTranslation.frame_b.a[1] = pendulum.cart.frame_b.a[1];
// pendulum.cart.frameTranslation.frame_b.a[2] = pendulum.cart.frame_b.a[2];
// pendulum.cart.frameTranslation.frame_b.a[3] = pendulum.cart.frame_b.a[3];
// pendulum.cart.frameTranslation.frame_b.w[1] = pendulum.cart.frame_b.w[1];
// pendulum.cart.frameTranslation.frame_b.w[2] = pendulum.cart.frame_b.w[2];
// pendulum.cart.frameTranslation.frame_b.w[3] = pendulum.cart.frame_b.w[3];
// pendulum.cart.frameTranslation.frame_b.v[1] = pendulum.cart.frame_b.v[1];
// pendulum.cart.frameTranslation.frame_b.v[2] = pendulum.cart.frame_b.v[2];
// pendulum.cart.frameTranslation.frame_b.v[3] = pendulum.cart.frame_b.v[3];
// pendulum.cart.frameTranslation.frame_b.S[1,1] = pendulum.cart.frame_b.S[1,1];
// pendulum.cart.frameTranslation.frame_b.S[1,2] = pendulum.cart.frame_b.S[1,2];
// pendulum.cart.frameTranslation.frame_b.S[1,3] = pendulum.cart.frame_b.S[1,3];
// pendulum.cart.frameTranslation.frame_b.S[2,1] = pendulum.cart.frame_b.S[2,1];
// pendulum.cart.frameTranslation.frame_b.S[2,2] = pendulum.cart.frame_b.S[2,2];
// pendulum.cart.frameTranslation.frame_b.S[2,3] = pendulum.cart.frame_b.S[2,3];
// pendulum.cart.frameTranslation.frame_b.S[3,1] = pendulum.cart.frame_b.S[3,1];
// pendulum.cart.frameTranslation.frame_b.S[3,2] = pendulum.cart.frame_b.S[3,2];
// pendulum.cart.frameTranslation.frame_b.S[3,3] = pendulum.cart.frame_b.S[3,3];
// pendulum.cart.frameTranslation.frame_b.r0[1] = pendulum.cart.frame_b.r0[1];
// pendulum.cart.frameTranslation.frame_b.r0[2] = pendulum.cart.frame_b.r0[2];
// pendulum.cart.frameTranslation.frame_b.r0[3] = pendulum.cart.frame_b.r0[3];
//   pendulum.pendulum.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(pendulum.pendulum.box.mcShape.shapeType);
//   pendulum.pendulum.box.mcShape.Material = PackMaterial(pendulum.pendulum.box.mcShape.color[1] / 255.0,pendulum.pendulum.box.mcShape.color[2] / 255.0,pendulum.pendulum.box.mcShape.color[3] / 255.0,pendulum.pendulum.box.mcShape.specularCoefficient);
//   pendulum.pendulum.box.mcShape.Extra = pendulum.pendulum.box.mcShape.extra;
//   pendulum.pendulum.box.mcShape.size[1] = pendulum.pendulum.box.mcShape.length;
//   pendulum.pendulum.box.mcShape.size[2] = pendulum.pendulum.box.mcShape.width;
//   pendulum.pendulum.box.mcShape.size[3] = pendulum.pendulum.box.mcShape.height;
//   pendulum.pendulum.box.mcShape.Sshape[1,1] = pendulum.pendulum.box.mcShape.e_x[1];
//   pendulum.pendulum.box.mcShape.Sshape[1,2] = pendulum.pendulum.box.mcShape.e_y[1];
//   pendulum.pendulum.box.mcShape.Sshape[1,3] = pendulum.pendulum.box.mcShape.e_x[2] * pendulum.pendulum.box.mcShape.e_y[3] - pendulum.pendulum.box.mcShape.e_x[3] * pendulum.pendulum.box.mcShape.e_y[2];
//   pendulum.pendulum.box.mcShape.Sshape[2,1] = pendulum.pendulum.box.mcShape.e_x[2];
//   pendulum.pendulum.box.mcShape.Sshape[2,2] = pendulum.pendulum.box.mcShape.e_y[2];
//   pendulum.pendulum.box.mcShape.Sshape[2,3] = pendulum.pendulum.box.mcShape.e_x[3] * pendulum.pendulum.box.mcShape.e_y[1] - pendulum.pendulum.box.mcShape.e_x[1] * pendulum.pendulum.box.mcShape.e_y[3];
//   pendulum.pendulum.box.mcShape.Sshape[3,1] = pendulum.pendulum.box.mcShape.e_x[3];
//   pendulum.pendulum.box.mcShape.Sshape[3,2] = pendulum.pendulum.box.mcShape.e_y[3];
//   pendulum.pendulum.box.mcShape.Sshape[3,3] = pendulum.pendulum.box.mcShape.e_x[1] * pendulum.pendulum.box.mcShape.e_y[2] - pendulum.pendulum.box.mcShape.e_x[2] * pendulum.pendulum.box.mcShape.e_y[1];
//   pendulum.pendulum.box.mcShape.rxvisobj[1] = pendulum.pendulum.box.mcShape.S[1,1] * pendulum.pendulum.box.mcShape.e_x[1] + (pendulum.pendulum.box.mcShape.S[1,2] * pendulum.pendulum.box.mcShape.e_x[2] + pendulum.pendulum.box.mcShape.S[1,3] * pendulum.pendulum.box.mcShape.e_x[3]);
//   pendulum.pendulum.box.mcShape.rxvisobj[2] = pendulum.pendulum.box.mcShape.S[2,1] * pendulum.pendulum.box.mcShape.e_x[1] + (pendulum.pendulum.box.mcShape.S[2,2] * pendulum.pendulum.box.mcShape.e_x[2] + pendulum.pendulum.box.mcShape.S[2,3] * pendulum.pendulum.box.mcShape.e_x[3]);
//   pendulum.pendulum.box.mcShape.rxvisobj[3] = pendulum.pendulum.box.mcShape.S[3,1] * pendulum.pendulum.box.mcShape.e_x[1] + (pendulum.pendulum.box.mcShape.S[3,2] * pendulum.pendulum.box.mcShape.e_x[2] + pendulum.pendulum.box.mcShape.S[3,3] * pendulum.pendulum.box.mcShape.e_x[3]);
//   pendulum.pendulum.box.mcShape.ryvisobj[1] = pendulum.pendulum.box.mcShape.S[1,1] * pendulum.pendulum.box.mcShape.e_y[1] + (pendulum.pendulum.box.mcShape.S[1,2] * pendulum.pendulum.box.mcShape.e_y[2] + pendulum.pendulum.box.mcShape.S[1,3] * pendulum.pendulum.box.mcShape.e_y[3]);
//   pendulum.pendulum.box.mcShape.ryvisobj[2] = pendulum.pendulum.box.mcShape.S[2,1] * pendulum.pendulum.box.mcShape.e_y[1] + (pendulum.pendulum.box.mcShape.S[2,2] * pendulum.pendulum.box.mcShape.e_y[2] + pendulum.pendulum.box.mcShape.S[2,3] * pendulum.pendulum.box.mcShape.e_y[3]);
//   pendulum.pendulum.box.mcShape.ryvisobj[3] = pendulum.pendulum.box.mcShape.S[3,1] * pendulum.pendulum.box.mcShape.e_y[1] + (pendulum.pendulum.box.mcShape.S[3,2] * pendulum.pendulum.box.mcShape.e_y[2] + pendulum.pendulum.box.mcShape.S[3,3] * pendulum.pendulum.box.mcShape.e_y[3]);
//   pendulum.pendulum.box.mcShape.rvisobj[1] = pendulum.pendulum.box.mcShape.r[1] + (pendulum.pendulum.box.mcShape.S[1,1] * pendulum.pendulum.box.mcShape.r_shape[1] + (pendulum.pendulum.box.mcShape.S[1,2] * pendulum.pendulum.box.mcShape.r_shape[2] + pendulum.pendulum.box.mcShape.S[1,3] * pendulum.pendulum.box.mcShape.r_shape[3]));
//   pendulum.pendulum.box.mcShape.rvisobj[2] = pendulum.pendulum.box.mcShape.r[2] + (pendulum.pendulum.box.mcShape.S[2,1] * pendulum.pendulum.box.mcShape.r_shape[1] + (pendulum.pendulum.box.mcShape.S[2,2] * pendulum.pendulum.box.mcShape.r_shape[2] + pendulum.pendulum.box.mcShape.S[2,3] * pendulum.pendulum.box.mcShape.r_shape[3]));
//   pendulum.pendulum.box.mcShape.rvisobj[3] = pendulum.pendulum.box.mcShape.r[3] + (pendulum.pendulum.box.mcShape.S[3,1] * pendulum.pendulum.box.mcShape.r_shape[1] + (pendulum.pendulum.box.mcShape.S[3,2] * pendulum.pendulum.box.mcShape.r_shape[2] + pendulum.pendulum.box.mcShape.S[3,3] * pendulum.pendulum.box.mcShape.r_shape[3]));
//   pendulum.pendulum.box.mcShape.e_x[1] = pendulum.pendulum.box.nLength[1];
//   pendulum.pendulum.box.mcShape.e_x[2] = pendulum.pendulum.box.nLength[2];
//   pendulum.pendulum.box.mcShape.e_x[3] = pendulum.pendulum.box.nLength[3];
//   pendulum.pendulum.box.mcShape.e_y[1] = pendulum.pendulum.box.nWidth[1];
//   pendulum.pendulum.box.mcShape.e_y[2] = pendulum.pendulum.box.nWidth[2];
//   pendulum.pendulum.box.mcShape.e_y[3] = pendulum.pendulum.box.nWidth[3];
//   pendulum.pendulum.box.mcShape.e_z[1] = pendulum.pendulum.box.nHeight[1];
//   pendulum.pendulum.box.mcShape.e_z[2] = pendulum.pendulum.box.nHeight[2];
//   pendulum.pendulum.box.mcShape.e_z[3] = pendulum.pendulum.box.nHeight[3];
//   pendulum.pendulum.frameTranslation.Sb[1,1] = pendulum.pendulum.frameTranslation.Sa[1,1];
//   pendulum.pendulum.frameTranslation.Sb[1,2] = pendulum.pendulum.frameTranslation.Sa[1,2];
//   pendulum.pendulum.frameTranslation.Sb[1,3] = pendulum.pendulum.frameTranslation.Sa[1,3];
//   pendulum.pendulum.frameTranslation.Sb[2,1] = pendulum.pendulum.frameTranslation.Sa[2,1];
//   pendulum.pendulum.frameTranslation.Sb[2,2] = pendulum.pendulum.frameTranslation.Sa[2,2];
//   pendulum.pendulum.frameTranslation.Sb[2,3] = pendulum.pendulum.frameTranslation.Sa[2,3];
//   pendulum.pendulum.frameTranslation.Sb[3,1] = pendulum.pendulum.frameTranslation.Sa[3,1];
//   pendulum.pendulum.frameTranslation.Sb[3,2] = pendulum.pendulum.frameTranslation.Sa[3,2];
//   pendulum.pendulum.frameTranslation.Sb[3,3] = pendulum.pendulum.frameTranslation.Sa[3,3];
//   pendulum.pendulum.frameTranslation.wb[1] = pendulum.pendulum.frameTranslation.wa[1];
//   pendulum.pendulum.frameTranslation.wb[2] = pendulum.pendulum.frameTranslation.wa[2];
//   pendulum.pendulum.frameTranslation.wb[3] = pendulum.pendulum.frameTranslation.wa[3];
//   pendulum.pendulum.frameTranslation.zb[1] = pendulum.pendulum.frameTranslation.za[1];
//   pendulum.pendulum.frameTranslation.zb[2] = pendulum.pendulum.frameTranslation.za[2];
//   pendulum.pendulum.frameTranslation.zb[3] = pendulum.pendulum.frameTranslation.za[3];
//   pendulum.pendulum.frameTranslation.r0b[1] = pendulum.pendulum.frameTranslation.r0a[1] + (pendulum.pendulum.frameTranslation.Sa[1,1] * pendulum.pendulum.frameTranslation.r[1] + (pendulum.pendulum.frameTranslation.Sa[1,2] * pendulum.pendulum.frameTranslation.r[2] + pendulum.pendulum.frameTranslation.Sa[1,3] * pendulum.pendulum.frameTranslation.r[3]));
//   pendulum.pendulum.frameTranslation.r0b[2] = pendulum.pendulum.frameTranslation.r0a[2] + (pendulum.pendulum.frameTranslation.Sa[2,1] * pendulum.pendulum.frameTranslation.r[1] + (pendulum.pendulum.frameTranslation.Sa[2,2] * pendulum.pendulum.frameTranslation.r[2] + pendulum.pendulum.frameTranslation.Sa[2,3] * pendulum.pendulum.frameTranslation.r[3]));
//   pendulum.pendulum.frameTranslation.r0b[3] = pendulum.pendulum.frameTranslation.r0a[3] + (pendulum.pendulum.frameTranslation.Sa[3,1] * pendulum.pendulum.frameTranslation.r[1] + (pendulum.pendulum.frameTranslation.Sa[3,2] * pendulum.pendulum.frameTranslation.r[2] + pendulum.pendulum.frameTranslation.Sa[3,3] * pendulum.pendulum.frameTranslation.r[3]));
//   pendulum.pendulum.frameTranslation.vaux[1] = pendulum.pendulum.frameTranslation.wa[2] * pendulum.pendulum.frameTranslation.r[3] - pendulum.pendulum.frameTranslation.wa[3] * pendulum.pendulum.frameTranslation.r[2];
//   pendulum.pendulum.frameTranslation.vaux[2] = pendulum.pendulum.frameTranslation.wa[3] * pendulum.pendulum.frameTranslation.r[1] - pendulum.pendulum.frameTranslation.wa[1] * pendulum.pendulum.frameTranslation.r[3];
//   pendulum.pendulum.frameTranslation.vaux[3] = pendulum.pendulum.frameTranslation.wa[1] * pendulum.pendulum.frameTranslation.r[2] - pendulum.pendulum.frameTranslation.wa[2] * pendulum.pendulum.frameTranslation.r[1];
//   pendulum.pendulum.frameTranslation.vb[1] = pendulum.pendulum.frameTranslation.va[1] + pendulum.pendulum.frameTranslation.vaux[1];
//   pendulum.pendulum.frameTranslation.vb[2] = pendulum.pendulum.frameTranslation.va[2] + pendulum.pendulum.frameTranslation.vaux[2];
//   pendulum.pendulum.frameTranslation.vb[3] = pendulum.pendulum.frameTranslation.va[3] + pendulum.pendulum.frameTranslation.vaux[3];
//   pendulum.pendulum.frameTranslation.ab[1] = pendulum.pendulum.frameTranslation.aa[1] + (pendulum.pendulum.frameTranslation.za[2] * pendulum.pendulum.frameTranslation.r[3] + ((-pendulum.pendulum.frameTranslation.za[3] * pendulum.pendulum.frameTranslation.r[2]) + (pendulum.pendulum.frameTranslation.wa[2] * pendulum.pendulum.frameTranslation.vaux[3] + (-pendulum.pendulum.frameTranslation.wa[3] * pendulum.pendulum.frameTranslation.vaux[2]))));
//   pendulum.pendulum.frameTranslation.ab[2] = pendulum.pendulum.frameTranslation.aa[2] + (pendulum.pendulum.frameTranslation.za[3] * pendulum.pendulum.frameTranslation.r[1] + ((-pendulum.pendulum.frameTranslation.za[1] * pendulum.pendulum.frameTranslation.r[3]) + (pendulum.pendulum.frameTranslation.wa[3] * pendulum.pendulum.frameTranslation.vaux[1] + (-pendulum.pendulum.frameTranslation.wa[1] * pendulum.pendulum.frameTranslation.vaux[3]))));
//   pendulum.pendulum.frameTranslation.ab[3] = pendulum.pendulum.frameTranslation.aa[3] + (pendulum.pendulum.frameTranslation.za[1] * pendulum.pendulum.frameTranslation.r[2] + ((-pendulum.pendulum.frameTranslation.za[2] * pendulum.pendulum.frameTranslation.r[1]) + (pendulum.pendulum.frameTranslation.wa[1] * pendulum.pendulum.frameTranslation.vaux[2] + (-pendulum.pendulum.frameTranslation.wa[2] * pendulum.pendulum.frameTranslation.vaux[1]))));
//   pendulum.pendulum.frameTranslation.fa[1] = pendulum.pendulum.frameTranslation.fb[1];
//   pendulum.pendulum.frameTranslation.fa[2] = pendulum.pendulum.frameTranslation.fb[2];
//   pendulum.pendulum.frameTranslation.fa[3] = pendulum.pendulum.frameTranslation.fb[3];
//   pendulum.pendulum.frameTranslation.ta[1] = pendulum.pendulum.frameTranslation.tb[1] + (pendulum.pendulum.frameTranslation.r[2] * pendulum.pendulum.frameTranslation.fa[3] + (-pendulum.pendulum.frameTranslation.r[3] * pendulum.pendulum.frameTranslation.fa[2]));
//   pendulum.pendulum.frameTranslation.ta[2] = pendulum.pendulum.frameTranslation.tb[2] + (pendulum.pendulum.frameTranslation.r[3] * pendulum.pendulum.frameTranslation.fa[1] + (-pendulum.pendulum.frameTranslation.r[1] * pendulum.pendulum.frameTranslation.fa[3]));
//   pendulum.pendulum.frameTranslation.ta[3] = pendulum.pendulum.frameTranslation.tb[3] + (pendulum.pendulum.frameTranslation.r[1] * pendulum.pendulum.frameTranslation.fa[2] + (-pendulum.pendulum.frameTranslation.r[2] * pendulum.pendulum.frameTranslation.fa[1]));
//   pendulum.pendulum.body.fa[1] = pendulum.pendulum.body.m * (pendulum.pendulum.body.aa[1] + (pendulum.pendulum.body.za[2] * pendulum.pendulum.body.rCM[3] + ((-pendulum.pendulum.body.za[3] * pendulum.pendulum.body.rCM[2]) + (pendulum.pendulum.body.wa[2] * (pendulum.pendulum.body.wa[1] * pendulum.pendulum.body.rCM[2] - pendulum.pendulum.body.wa[2] * pendulum.pendulum.body.rCM[1]) + (-pendulum.pendulum.body.wa[3] * (pendulum.pendulum.body.wa[3] * pendulum.pendulum.body.rCM[1] - pendulum.pendulum.body.wa[1] * pendulum.pendulum.body.rCM[3]))))));
//   pendulum.pendulum.body.fa[2] = pendulum.pendulum.body.m * (pendulum.pendulum.body.aa[2] + (pendulum.pendulum.body.za[3] * pendulum.pendulum.body.rCM[1] + ((-pendulum.pendulum.body.za[1] * pendulum.pendulum.body.rCM[3]) + (pendulum.pendulum.body.wa[3] * (pendulum.pendulum.body.wa[2] * pendulum.pendulum.body.rCM[3] - pendulum.pendulum.body.wa[3] * pendulum.pendulum.body.rCM[2]) + (-pendulum.pendulum.body.wa[1] * (pendulum.pendulum.body.wa[1] * pendulum.pendulum.body.rCM[2] - pendulum.pendulum.body.wa[2] * pendulum.pendulum.body.rCM[1]))))));
//   pendulum.pendulum.body.fa[3] = pendulum.pendulum.body.m * (pendulum.pendulum.body.aa[3] + (pendulum.pendulum.body.za[1] * pendulum.pendulum.body.rCM[2] + ((-pendulum.pendulum.body.za[2] * pendulum.pendulum.body.rCM[1]) + (pendulum.pendulum.body.wa[1] * (pendulum.pendulum.body.wa[3] * pendulum.pendulum.body.rCM[1] - pendulum.pendulum.body.wa[1] * pendulum.pendulum.body.rCM[3]) + (-pendulum.pendulum.body.wa[2] * (pendulum.pendulum.body.wa[2] * pendulum.pendulum.body.rCM[3] - pendulum.pendulum.body.wa[3] * pendulum.pendulum.body.rCM[2]))))));
//   pendulum.pendulum.body.ta[1] = pendulum.pendulum.body.I[1,1] * pendulum.pendulum.body.za[1] + (pendulum.pendulum.body.I[1,2] * pendulum.pendulum.body.za[2] + (pendulum.pendulum.body.I[1,3] * pendulum.pendulum.body.za[3] + (pendulum.pendulum.body.wa[2] * (pendulum.pendulum.body.I[3,1] * pendulum.pendulum.body.wa[1] + (pendulum.pendulum.body.I[3,2] * pendulum.pendulum.body.wa[2] + pendulum.pendulum.body.I[3,3] * pendulum.pendulum.body.wa[3])) + ((-pendulum.pendulum.body.wa[3] * (pendulum.pendulum.body.I[2,1] * pendulum.pendulum.body.wa[1] + (pendulum.pendulum.body.I[2,2] * pendulum.pendulum.body.wa[2] + pendulum.pendulum.body.I[2,3] * pendulum.pendulum.body.wa[3]))) + (pendulum.pendulum.body.rCM[2] * pendulum.pendulum.body.fa[3] + (-pendulum.pendulum.body.rCM[3] * pendulum.pendulum.body.fa[2]))))));
//   pendulum.pendulum.body.ta[2] = pendulum.pendulum.body.I[2,1] * pendulum.pendulum.body.za[1] + (pendulum.pendulum.body.I[2,2] * pendulum.pendulum.body.za[2] + (pendulum.pendulum.body.I[2,3] * pendulum.pendulum.body.za[3] + (pendulum.pendulum.body.wa[3] * (pendulum.pendulum.body.I[1,1] * pendulum.pendulum.body.wa[1] + (pendulum.pendulum.body.I[1,2] * pendulum.pendulum.body.wa[2] + pendulum.pendulum.body.I[1,3] * pendulum.pendulum.body.wa[3])) + ((-pendulum.pendulum.body.wa[1] * (pendulum.pendulum.body.I[3,1] * pendulum.pendulum.body.wa[1] + (pendulum.pendulum.body.I[3,2] * pendulum.pendulum.body.wa[2] + pendulum.pendulum.body.I[3,3] * pendulum.pendulum.body.wa[3]))) + (pendulum.pendulum.body.rCM[3] * pendulum.pendulum.body.fa[1] + (-pendulum.pendulum.body.rCM[1] * pendulum.pendulum.body.fa[3]))))));
//   pendulum.pendulum.body.ta[3] = pendulum.pendulum.body.I[3,1] * pendulum.pendulum.body.za[1] + (pendulum.pendulum.body.I[3,2] * pendulum.pendulum.body.za[2] + (pendulum.pendulum.body.I[3,3] * pendulum.pendulum.body.za[3] + (pendulum.pendulum.body.wa[1] * (pendulum.pendulum.body.I[2,1] * pendulum.pendulum.body.wa[1] + (pendulum.pendulum.body.I[2,2] * pendulum.pendulum.body.wa[2] + pendulum.pendulum.body.I[2,3] * pendulum.pendulum.body.wa[3])) + ((-pendulum.pendulum.body.wa[2] * (pendulum.pendulum.body.I[1,1] * pendulum.pendulum.body.wa[1] + (pendulum.pendulum.body.I[1,2] * pendulum.pendulum.body.wa[2] + pendulum.pendulum.body.I[1,3] * pendulum.pendulum.body.wa[3]))) + (pendulum.pendulum.body.rCM[1] * pendulum.pendulum.body.fa[2] + (-pendulum.pendulum.body.rCM[2] * pendulum.pendulum.body.fa[1]))))));
//   pendulum.pendulum.box.S[1,1] = pendulum.pendulum.Sa[1,1];
//   pendulum.pendulum.box.S[1,2] = pendulum.pendulum.Sa[1,2];
//   pendulum.pendulum.box.S[1,3] = pendulum.pendulum.Sa[1,3];
//   pendulum.pendulum.box.S[2,1] = pendulum.pendulum.Sa[2,1];
//   pendulum.pendulum.box.S[2,2] = pendulum.pendulum.Sa[2,2];
//   pendulum.pendulum.box.S[2,3] = pendulum.pendulum.Sa[2,3];
//   pendulum.pendulum.box.S[3,1] = pendulum.pendulum.Sa[3,1];
//   pendulum.pendulum.box.S[3,2] = pendulum.pendulum.Sa[3,2];
//   pendulum.pendulum.box.S[3,3] = pendulum.pendulum.Sa[3,3];
//   pendulum.pendulum.box.r[1] = pendulum.pendulum.r0a[1];
//   pendulum.pendulum.box.r[2] = pendulum.pendulum.r0a[2];
//   pendulum.pendulum.box.r[3] = pendulum.pendulum.r0a[3];
//   pendulum.pendulum.box.Sshape[1,1] = pendulum.pendulum.Scyl[1,1];
//   pendulum.pendulum.box.Sshape[1,2] = pendulum.pendulum.Scyl[1,2];
//   pendulum.pendulum.box.Sshape[1,3] = pendulum.pendulum.Scyl[1,3];
//   pendulum.pendulum.box.Sshape[2,1] = pendulum.pendulum.Scyl[2,1];
//   pendulum.pendulum.box.Sshape[2,2] = pendulum.pendulum.Scyl[2,2];
//   pendulum.pendulum.box.Sshape[2,3] = pendulum.pendulum.Scyl[2,3];
//   pendulum.pendulum.box.Sshape[3,1] = pendulum.pendulum.Scyl[3,1];
//   pendulum.pendulum.box.Sshape[3,2] = pendulum.pendulum.Scyl[3,2];
//   pendulum.pendulum.box.Sshape[3,3] = pendulum.pendulum.Scyl[3,3];
//   pendulum.pendulum.mo = 3141.59265358979 * (pendulum.pendulum.rho * (pendulum.pendulum.Length * pendulum.pendulum.Radius ^ 2.0));
//   pendulum.pendulum.mi = 3141.59265358979 * (pendulum.pendulum.rho * (pendulum.pendulum.Length * pendulum.pendulum.InnerRadius ^ 2.0));
//   pendulum.pendulum.I22 = pendulum.pendulum.mo * (pendulum.pendulum.Length ^ 2.0 + 3.0 * pendulum.pendulum.Radius ^ 2.0) / 12.0 - pendulum.pendulum.mi * (pendulum.pendulum.Length ^ 2.0 + 3.0 * pendulum.pendulum.InnerRadius ^ 2.0) / 12.0;
//   pendulum.pendulum.body.m = pendulum.pendulum.mo - pendulum.pendulum.mi;
//   pendulum.pendulum.body.rCM[1] = pendulum.pendulum.r0[1] + 0.5 * (pendulum.pendulum.Length * pendulum.pendulum.box.nLength[1]);
//   pendulum.pendulum.body.rCM[2] = pendulum.pendulum.r0[2] + 0.5 * (pendulum.pendulum.Length * pendulum.pendulum.box.nLength[2]);
//   pendulum.pendulum.body.rCM[3] = pendulum.pendulum.r0[3] + 0.5 * (pendulum.pendulum.Length * pendulum.pendulum.box.nLength[3]);
//   pendulum.pendulum.body.I[1,1] = pendulum.pendulum.Scyl[1,1] ^ 2.0 * (0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) + (pendulum.pendulum.Scyl[1,2] ^ 2.0 * pendulum.pendulum.I22 + pendulum.pendulum.Scyl[1,3] ^ 2.0 * pendulum.pendulum.I22);
//   pendulum.pendulum.body.I[1,2] = pendulum.pendulum.Scyl[1,1] * ((0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) * pendulum.pendulum.Scyl[2,1]) + (pendulum.pendulum.Scyl[1,2] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[2,2]) + pendulum.pendulum.Scyl[1,3] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[2,3]));
//   pendulum.pendulum.body.I[1,3] = pendulum.pendulum.Scyl[1,1] * ((0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) * pendulum.pendulum.Scyl[3,1]) + (pendulum.pendulum.Scyl[1,2] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[3,2]) + pendulum.pendulum.Scyl[1,3] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[3,3]));
//   pendulum.pendulum.body.I[2,1] = pendulum.pendulum.Scyl[2,1] * ((0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) * pendulum.pendulum.Scyl[1,1]) + (pendulum.pendulum.Scyl[2,2] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[1,2]) + pendulum.pendulum.Scyl[2,3] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[1,3]));
//   pendulum.pendulum.body.I[2,2] = pendulum.pendulum.Scyl[2,1] ^ 2.0 * (0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) + (pendulum.pendulum.Scyl[2,2] ^ 2.0 * pendulum.pendulum.I22 + pendulum.pendulum.Scyl[2,3] ^ 2.0 * pendulum.pendulum.I22);
//   pendulum.pendulum.body.I[2,3] = pendulum.pendulum.Scyl[2,1] * ((0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) * pendulum.pendulum.Scyl[3,1]) + (pendulum.pendulum.Scyl[2,2] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[3,2]) + pendulum.pendulum.Scyl[2,3] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[3,3]));
//   pendulum.pendulum.body.I[3,1] = pendulum.pendulum.Scyl[3,1] * ((0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) * pendulum.pendulum.Scyl[1,1]) + (pendulum.pendulum.Scyl[3,2] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[1,2]) + pendulum.pendulum.Scyl[3,3] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[1,3]));
//   pendulum.pendulum.body.I[3,2] = pendulum.pendulum.Scyl[3,1] * ((0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) * pendulum.pendulum.Scyl[2,1]) + (pendulum.pendulum.Scyl[3,2] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[2,2]) + pendulum.pendulum.Scyl[3,3] * (pendulum.pendulum.I22 * pendulum.pendulum.Scyl[2,3]));
//   pendulum.pendulum.body.I[3,3] = pendulum.pendulum.Scyl[3,1] ^ 2.0 * (0.5 * (pendulum.pendulum.mo * pendulum.pendulum.Radius ^ 2.0) - 0.5 * (pendulum.pendulum.mi * pendulum.pendulum.InnerRadius ^ 2.0)) + (pendulum.pendulum.Scyl[3,2] ^ 2.0 * pendulum.pendulum.I22 + pendulum.pendulum.Scyl[3,3] ^ 2.0 * pendulum.pendulum.I22);
//   (-pendulum.pendulum.frame_a.t[1]) + (pendulum.pendulum.frameTranslation.frame_a.t[1] + pendulum.pendulum.body.frame_a.t[1]) = 0.0;
//   (-pendulum.pendulum.frame_a.t[2]) + (pendulum.pendulum.frameTranslation.frame_a.t[2] + pendulum.pendulum.body.frame_a.t[2]) = 0.0;
//   (-pendulum.pendulum.frame_a.t[3]) + (pendulum.pendulum.frameTranslation.frame_a.t[3] + pendulum.pendulum.body.frame_a.t[3]) = 0.0;
//   (-pendulum.pendulum.frame_a.f[1]) + (pendulum.pendulum.frameTranslation.frame_a.f[1] + pendulum.pendulum.body.frame_a.f[1]) = 0.0;
//   (-pendulum.pendulum.frame_a.f[2]) + (pendulum.pendulum.frameTranslation.frame_a.f[2] + pendulum.pendulum.body.frame_a.f[2]) = 0.0;
//   (-pendulum.pendulum.frame_a.f[3]) + (pendulum.pendulum.frameTranslation.frame_a.f[3] + pendulum.pendulum.body.frame_a.f[3]) = 0.0;
// pendulum.pendulum.frame_a.z[1] = pendulum.pendulum.frameTranslation.frame_a.z[1];
// pendulum.pendulum.frameTranslation.frame_a.z[1] = pendulum.pendulum.body.frame_a.z[1];
// pendulum.pendulum.frame_a.z[2] = pendulum.pendulum.frameTranslation.frame_a.z[2];
// pendulum.pendulum.frameTranslation.frame_a.z[2] = pendulum.pendulum.body.frame_a.z[2];
// pendulum.pendulum.frame_a.z[3] = pendulum.pendulum.frameTranslation.frame_a.z[3];
// pendulum.pendulum.frameTranslation.frame_a.z[3] = pendulum.pendulum.body.frame_a.z[3];
// pendulum.pendulum.frame_a.a[1] = pendulum.pendulum.frameTranslation.frame_a.a[1];
// pendulum.pendulum.frameTranslation.frame_a.a[1] = pendulum.pendulum.body.frame_a.a[1];
// pendulum.pendulum.frame_a.a[2] = pendulum.pendulum.frameTranslation.frame_a.a[2];
// pendulum.pendulum.frameTranslation.frame_a.a[2] = pendulum.pendulum.body.frame_a.a[2];
// pendulum.pendulum.frame_a.a[3] = pendulum.pendulum.frameTranslation.frame_a.a[3];
// pendulum.pendulum.frameTranslation.frame_a.a[3] = pendulum.pendulum.body.frame_a.a[3];
// pendulum.pendulum.frame_a.w[1] = pendulum.pendulum.frameTranslation.frame_a.w[1];
// pendulum.pendulum.frameTranslation.frame_a.w[1] = pendulum.pendulum.body.frame_a.w[1];
// pendulum.pendulum.frame_a.w[2] = pendulum.pendulum.frameTranslation.frame_a.w[2];
// pendulum.pendulum.frameTranslation.frame_a.w[2] = pendulum.pendulum.body.frame_a.w[2];
// pendulum.pendulum.frame_a.w[3] = pendulum.pendulum.frameTranslation.frame_a.w[3];
// pendulum.pendulum.frameTranslation.frame_a.w[3] = pendulum.pendulum.body.frame_a.w[3];
// pendulum.pendulum.frame_a.v[1] = pendulum.pendulum.frameTranslation.frame_a.v[1];
// pendulum.pendulum.frameTranslation.frame_a.v[1] = pendulum.pendulum.body.frame_a.v[1];
// pendulum.pendulum.frame_a.v[2] = pendulum.pendulum.frameTranslation.frame_a.v[2];
// pendulum.pendulum.frameTranslation.frame_a.v[2] = pendulum.pendulum.body.frame_a.v[2];
// pendulum.pendulum.frame_a.v[3] = pendulum.pendulum.frameTranslation.frame_a.v[3];
// pendulum.pendulum.frameTranslation.frame_a.v[3] = pendulum.pendulum.body.frame_a.v[3];
// pendulum.pendulum.frame_a.S[1,1] = pendulum.pendulum.frameTranslation.frame_a.S[1,1];
// pendulum.pendulum.frameTranslation.frame_a.S[1,1] = pendulum.pendulum.body.frame_a.S[1,1];
// pendulum.pendulum.frame_a.S[1,2] = pendulum.pendulum.frameTranslation.frame_a.S[1,2];
// pendulum.pendulum.frameTranslation.frame_a.S[1,2] = pendulum.pendulum.body.frame_a.S[1,2];
// pendulum.pendulum.frame_a.S[1,3] = pendulum.pendulum.frameTranslation.frame_a.S[1,3];
// pendulum.pendulum.frameTranslation.frame_a.S[1,3] = pendulum.pendulum.body.frame_a.S[1,3];
// pendulum.pendulum.frame_a.S[2,1] = pendulum.pendulum.frameTranslation.frame_a.S[2,1];
// pendulum.pendulum.frameTranslation.frame_a.S[2,1] = pendulum.pendulum.body.frame_a.S[2,1];
// pendulum.pendulum.frame_a.S[2,2] = pendulum.pendulum.frameTranslation.frame_a.S[2,2];
// pendulum.pendulum.frameTranslation.frame_a.S[2,2] = pendulum.pendulum.body.frame_a.S[2,2];
// pendulum.pendulum.frame_a.S[2,3] = pendulum.pendulum.frameTranslation.frame_a.S[2,3];
// pendulum.pendulum.frameTranslation.frame_a.S[2,3] = pendulum.pendulum.body.frame_a.S[2,3];
// pendulum.pendulum.frame_a.S[3,1] = pendulum.pendulum.frameTranslation.frame_a.S[3,1];
// pendulum.pendulum.frameTranslation.frame_a.S[3,1] = pendulum.pendulum.body.frame_a.S[3,1];
// pendulum.pendulum.frame_a.S[3,2] = pendulum.pendulum.frameTranslation.frame_a.S[3,2];
// pendulum.pendulum.frameTranslation.frame_a.S[3,2] = pendulum.pendulum.body.frame_a.S[3,2];
// pendulum.pendulum.frame_a.S[3,3] = pendulum.pendulum.frameTranslation.frame_a.S[3,3];
// pendulum.pendulum.frameTranslation.frame_a.S[3,3] = pendulum.pendulum.body.frame_a.S[3,3];
// pendulum.pendulum.frame_a.r0[1] = pendulum.pendulum.frameTranslation.frame_a.r0[1];
// pendulum.pendulum.frameTranslation.frame_a.r0[1] = pendulum.pendulum.body.frame_a.r0[1];
// pendulum.pendulum.frame_a.r0[2] = pendulum.pendulum.frameTranslation.frame_a.r0[2];
// pendulum.pendulum.frameTranslation.frame_a.r0[2] = pendulum.pendulum.body.frame_a.r0[2];
// pendulum.pendulum.frame_a.r0[3] = pendulum.pendulum.frameTranslation.frame_a.r0[3];
// pendulum.pendulum.frameTranslation.frame_a.r0[3] = pendulum.pendulum.body.frame_a.r0[3];
//   pendulum.pendulum.frameTranslation.frame_b.t[1] + (-pendulum.pendulum.frame_b.t[1]) = 0.0;
//   pendulum.pendulum.frameTranslation.frame_b.t[2] + (-pendulum.pendulum.frame_b.t[2]) = 0.0;
//   pendulum.pendulum.frameTranslation.frame_b.t[3] + (-pendulum.pendulum.frame_b.t[3]) = 0.0;
//   pendulum.pendulum.frameTranslation.frame_b.f[1] + (-pendulum.pendulum.frame_b.f[1]) = 0.0;
//   pendulum.pendulum.frameTranslation.frame_b.f[2] + (-pendulum.pendulum.frame_b.f[2]) = 0.0;
//   pendulum.pendulum.frameTranslation.frame_b.f[3] + (-pendulum.pendulum.frame_b.f[3]) = 0.0;
// pendulum.pendulum.frameTranslation.frame_b.z[1] = pendulum.pendulum.frame_b.z[1];
// pendulum.pendulum.frameTranslation.frame_b.z[2] = pendulum.pendulum.frame_b.z[2];
// pendulum.pendulum.frameTranslation.frame_b.z[3] = pendulum.pendulum.frame_b.z[3];
// pendulum.pendulum.frameTranslation.frame_b.a[1] = pendulum.pendulum.frame_b.a[1];
// pendulum.pendulum.frameTranslation.frame_b.a[2] = pendulum.pendulum.frame_b.a[2];
// pendulum.pendulum.frameTranslation.frame_b.a[3] = pendulum.pendulum.frame_b.a[3];
// pendulum.pendulum.frameTranslation.frame_b.w[1] = pendulum.pendulum.frame_b.w[1];
// pendulum.pendulum.frameTranslation.frame_b.w[2] = pendulum.pendulum.frame_b.w[2];
// pendulum.pendulum.frameTranslation.frame_b.w[3] = pendulum.pendulum.frame_b.w[3];
// pendulum.pendulum.frameTranslation.frame_b.v[1] = pendulum.pendulum.frame_b.v[1];
// pendulum.pendulum.frameTranslation.frame_b.v[2] = pendulum.pendulum.frame_b.v[2];
// pendulum.pendulum.frameTranslation.frame_b.v[3] = pendulum.pendulum.frame_b.v[3];
// pendulum.pendulum.frameTranslation.frame_b.S[1,1] = pendulum.pendulum.frame_b.S[1,1];
// pendulum.pendulum.frameTranslation.frame_b.S[1,2] = pendulum.pendulum.frame_b.S[1,2];
// pendulum.pendulum.frameTranslation.frame_b.S[1,3] = pendulum.pendulum.frame_b.S[1,3];
// pendulum.pendulum.frameTranslation.frame_b.S[2,1] = pendulum.pendulum.frame_b.S[2,1];
// pendulum.pendulum.frameTranslation.frame_b.S[2,2] = pendulum.pendulum.frame_b.S[2,2];
// pendulum.pendulum.frameTranslation.frame_b.S[2,3] = pendulum.pendulum.frame_b.S[2,3];
// pendulum.pendulum.frameTranslation.frame_b.S[3,1] = pendulum.pendulum.frame_b.S[3,1];
// pendulum.pendulum.frameTranslation.frame_b.S[3,2] = pendulum.pendulum.frame_b.S[3,2];
// pendulum.pendulum.frameTranslation.frame_b.S[3,3] = pendulum.pendulum.frame_b.S[3,3];
// pendulum.pendulum.frameTranslation.frame_b.r0[1] = pendulum.pendulum.frame_b.r0[1];
// pendulum.pendulum.frameTranslation.frame_b.r0[2] = pendulum.pendulum.frame_b.r0[2];
// pendulum.pendulum.frameTranslation.frame_b.r0[3] = pendulum.pendulum.frame_b.r0[3];
//   pendulum.pendulumJoint.axis.phi = pendulum.pendulumJoint.q;
//   pendulum.pendulumJoint.bearing.phi = 0.0;
//   pendulum.pendulumJoint.qd = der(pendulum.pendulumJoint.q);
//   pendulum.pendulumJoint.qdd = der(pendulum.pendulumJoint.qd);
//   pendulum.pendulumJoint.nn[1] = pendulum.pendulumJoint.n[1] / sqrt(pendulum.pendulumJoint.n[1] ^ 2.0 + (pendulum.pendulumJoint.n[2] ^ 2.0 + pendulum.pendulumJoint.n[3] ^ 2.0));
//   pendulum.pendulumJoint.nn[2] = pendulum.pendulumJoint.n[2] / sqrt(pendulum.pendulumJoint.n[1] ^ 2.0 + (pendulum.pendulumJoint.n[2] ^ 2.0 + pendulum.pendulumJoint.n[3] ^ 2.0));
//   pendulum.pendulumJoint.nn[3] = pendulum.pendulumJoint.n[3] / sqrt(pendulum.pendulumJoint.n[1] ^ 2.0 + (pendulum.pendulumJoint.n[2] ^ 2.0 + pendulum.pendulumJoint.n[3] ^ 2.0));
//   pendulum.pendulumJoint.qq = pendulum.pendulumJoint.q - 0.0174532925199433 * pendulum.pendulumJoint.q0;
//   pendulum.pendulumJoint.sinq = sin(pendulum.pendulumJoint.qq);
//   pendulum.pendulumJoint.cosq = cos(pendulum.pendulumJoint.qq);
//   pendulum.pendulumJoint.S_rel[1,1] = pendulum.pendulumJoint.nn[1] ^ 2.0 + pendulum.pendulumJoint.cosq * (1.0 - pendulum.pendulumJoint.nn[1] ^ 2.0);
//   pendulum.pendulumJoint.S_rel[1,2] = pendulum.pendulumJoint.nn[1] * pendulum.pendulumJoint.nn[2] + pendulum.pendulumJoint.cosq * ((-pendulum.pendulumJoint.nn[1]) * pendulum.pendulumJoint.nn[2]) - (-pendulum.pendulumJoint.sinq) * pendulum.pendulumJoint.nn[3];
//   pendulum.pendulumJoint.S_rel[1,3] = pendulum.pendulumJoint.nn[1] * pendulum.pendulumJoint.nn[3] + pendulum.pendulumJoint.cosq * ((-pendulum.pendulumJoint.nn[1]) * pendulum.pendulumJoint.nn[3]) - pendulum.pendulumJoint.sinq * pendulum.pendulumJoint.nn[2];
//   pendulum.pendulumJoint.S_rel[2,1] = pendulum.pendulumJoint.nn[2] * pendulum.pendulumJoint.nn[1] + pendulum.pendulumJoint.cosq * ((-pendulum.pendulumJoint.nn[2]) * pendulum.pendulumJoint.nn[1]) - pendulum.pendulumJoint.sinq * pendulum.pendulumJoint.nn[3];
//   pendulum.pendulumJoint.S_rel[2,2] = pendulum.pendulumJoint.nn[2] ^ 2.0 + pendulum.pendulumJoint.cosq * (1.0 - pendulum.pendulumJoint.nn[2] ^ 2.0);
//   pendulum.pendulumJoint.S_rel[2,3] = pendulum.pendulumJoint.nn[2] * pendulum.pendulumJoint.nn[3] + pendulum.pendulumJoint.cosq * ((-pendulum.pendulumJoint.nn[2]) * pendulum.pendulumJoint.nn[3]) - (-pendulum.pendulumJoint.sinq) * pendulum.pendulumJoint.nn[1];
//   pendulum.pendulumJoint.S_rel[3,1] = pendulum.pendulumJoint.nn[3] * pendulum.pendulumJoint.nn[1] + pendulum.pendulumJoint.cosq * ((-pendulum.pendulumJoint.nn[3]) * pendulum.pendulumJoint.nn[1]) - (-pendulum.pendulumJoint.sinq) * pendulum.pendulumJoint.nn[2];
//   pendulum.pendulumJoint.S_rel[3,2] = pendulum.pendulumJoint.nn[3] * pendulum.pendulumJoint.nn[2] + pendulum.pendulumJoint.cosq * ((-pendulum.pendulumJoint.nn[3]) * pendulum.pendulumJoint.nn[2]) - pendulum.pendulumJoint.sinq * pendulum.pendulumJoint.nn[1];
//   pendulum.pendulumJoint.S_rel[3,3] = pendulum.pendulumJoint.nn[3] ^ 2.0 + pendulum.pendulumJoint.cosq * (1.0 - pendulum.pendulumJoint.nn[3] ^ 2.0);
//   pendulum.pendulumJoint.r_rela[1] = 0.0;
//   pendulum.pendulumJoint.r_rela[2] = 0.0;
//   pendulum.pendulumJoint.r_rela[3] = 0.0;
//   pendulum.pendulumJoint.v_rela[1] = 0.0;
//   pendulum.pendulumJoint.v_rela[2] = 0.0;
//   pendulum.pendulumJoint.v_rela[3] = 0.0;
//   pendulum.pendulumJoint.a_rela[1] = 0.0;
//   pendulum.pendulumJoint.a_rela[2] = 0.0;
//   pendulum.pendulumJoint.a_rela[3] = 0.0;
//   pendulum.pendulumJoint.w_rela[1] = pendulum.pendulumJoint.qd * pendulum.pendulumJoint.nn[1];
//   pendulum.pendulumJoint.w_rela[2] = pendulum.pendulumJoint.qd * pendulum.pendulumJoint.nn[2];
//   pendulum.pendulumJoint.w_rela[3] = pendulum.pendulumJoint.qd * pendulum.pendulumJoint.nn[3];
//   pendulum.pendulumJoint.z_rela[1] = pendulum.pendulumJoint.qdd * pendulum.pendulumJoint.nn[1];
//   pendulum.pendulumJoint.z_rela[2] = pendulum.pendulumJoint.qdd * pendulum.pendulumJoint.nn[2];
//   pendulum.pendulumJoint.z_rela[3] = pendulum.pendulumJoint.qdd * pendulum.pendulumJoint.nn[3];
//   pendulum.pendulumJoint.Sb[1,1] = pendulum.pendulumJoint.Sa[1,1] * pendulum.pendulumJoint.S_rel[1,1] + (pendulum.pendulumJoint.Sa[1,2] * pendulum.pendulumJoint.S_rel[1,2] + pendulum.pendulumJoint.Sa[1,3] * pendulum.pendulumJoint.S_rel[1,3]);
//   pendulum.pendulumJoint.Sb[1,2] = pendulum.pendulumJoint.Sa[1,1] * pendulum.pendulumJoint.S_rel[2,1] + (pendulum.pendulumJoint.Sa[1,2] * pendulum.pendulumJoint.S_rel[2,2] + pendulum.pendulumJoint.Sa[1,3] * pendulum.pendulumJoint.S_rel[2,3]);
//   pendulum.pendulumJoint.Sb[1,3] = pendulum.pendulumJoint.Sa[1,1] * pendulum.pendulumJoint.S_rel[3,1] + (pendulum.pendulumJoint.Sa[1,2] * pendulum.pendulumJoint.S_rel[3,2] + pendulum.pendulumJoint.Sa[1,3] * pendulum.pendulumJoint.S_rel[3,3]);
//   pendulum.pendulumJoint.Sb[2,1] = pendulum.pendulumJoint.Sa[2,1] * pendulum.pendulumJoint.S_rel[1,1] + (pendulum.pendulumJoint.Sa[2,2] * pendulum.pendulumJoint.S_rel[1,2] + pendulum.pendulumJoint.Sa[2,3] * pendulum.pendulumJoint.S_rel[1,3]);
//   pendulum.pendulumJoint.Sb[2,2] = pendulum.pendulumJoint.Sa[2,1] * pendulum.pendulumJoint.S_rel[2,1] + (pendulum.pendulumJoint.Sa[2,2] * pendulum.pendulumJoint.S_rel[2,2] + pendulum.pendulumJoint.Sa[2,3] * pendulum.pendulumJoint.S_rel[2,3]);
//   pendulum.pendulumJoint.Sb[2,3] = pendulum.pendulumJoint.Sa[2,1] * pendulum.pendulumJoint.S_rel[3,1] + (pendulum.pendulumJoint.Sa[2,2] * pendulum.pendulumJoint.S_rel[3,2] + pendulum.pendulumJoint.Sa[2,3] * pendulum.pendulumJoint.S_rel[3,3]);
//   pendulum.pendulumJoint.Sb[3,1] = pendulum.pendulumJoint.Sa[3,1] * pendulum.pendulumJoint.S_rel[1,1] + (pendulum.pendulumJoint.Sa[3,2] * pendulum.pendulumJoint.S_rel[1,2] + pendulum.pendulumJoint.Sa[3,3] * pendulum.pendulumJoint.S_rel[1,3]);
//   pendulum.pendulumJoint.Sb[3,2] = pendulum.pendulumJoint.Sa[3,1] * pendulum.pendulumJoint.S_rel[2,1] + (pendulum.pendulumJoint.Sa[3,2] * pendulum.pendulumJoint.S_rel[2,2] + pendulum.pendulumJoint.Sa[3,3] * pendulum.pendulumJoint.S_rel[2,3]);
//   pendulum.pendulumJoint.Sb[3,3] = pendulum.pendulumJoint.Sa[3,1] * pendulum.pendulumJoint.S_rel[3,1] + (pendulum.pendulumJoint.Sa[3,2] * pendulum.pendulumJoint.S_rel[3,2] + pendulum.pendulumJoint.Sa[3,3] * pendulum.pendulumJoint.S_rel[3,3]);
//   pendulum.pendulumJoint.r0b[1] = pendulum.pendulumJoint.r0a[1];
//   pendulum.pendulumJoint.r0b[2] = pendulum.pendulumJoint.r0a[2];
//   pendulum.pendulumJoint.r0b[3] = pendulum.pendulumJoint.r0a[3];
//   pendulum.pendulumJoint.vb[1] = pendulum.pendulumJoint.S_rel[1,1] * pendulum.pendulumJoint.va[1] + (pendulum.pendulumJoint.S_rel[1,2] * pendulum.pendulumJoint.va[2] + pendulum.pendulumJoint.S_rel[1,3] * pendulum.pendulumJoint.va[3]);
//   pendulum.pendulumJoint.vb[2] = pendulum.pendulumJoint.S_rel[2,1] * pendulum.pendulumJoint.va[1] + (pendulum.pendulumJoint.S_rel[2,2] * pendulum.pendulumJoint.va[2] + pendulum.pendulumJoint.S_rel[2,3] * pendulum.pendulumJoint.va[3]);
//   pendulum.pendulumJoint.vb[3] = pendulum.pendulumJoint.S_rel[3,1] * pendulum.pendulumJoint.va[1] + (pendulum.pendulumJoint.S_rel[3,2] * pendulum.pendulumJoint.va[2] + pendulum.pendulumJoint.S_rel[3,3] * pendulum.pendulumJoint.va[3]);
//   pendulum.pendulumJoint.wb[1] = pendulum.pendulumJoint.S_rel[1,1] * (pendulum.pendulumJoint.wa[1] + pendulum.pendulumJoint.w_rela[1]) + (pendulum.pendulumJoint.S_rel[1,2] * (pendulum.pendulumJoint.wa[2] + pendulum.pendulumJoint.w_rela[2]) + pendulum.pendulumJoint.S_rel[1,3] * (pendulum.pendulumJoint.wa[3] + pendulum.pendulumJoint.w_rela[3]));
//   pendulum.pendulumJoint.wb[2] = pendulum.pendulumJoint.S_rel[2,1] * (pendulum.pendulumJoint.wa[1] + pendulum.pendulumJoint.w_rela[1]) + (pendulum.pendulumJoint.S_rel[2,2] * (pendulum.pendulumJoint.wa[2] + pendulum.pendulumJoint.w_rela[2]) + pendulum.pendulumJoint.S_rel[2,3] * (pendulum.pendulumJoint.wa[3] + pendulum.pendulumJoint.w_rela[3]));
//   pendulum.pendulumJoint.wb[3] = pendulum.pendulumJoint.S_rel[3,1] * (pendulum.pendulumJoint.wa[1] + pendulum.pendulumJoint.w_rela[1]) + (pendulum.pendulumJoint.S_rel[3,2] * (pendulum.pendulumJoint.wa[2] + pendulum.pendulumJoint.w_rela[2]) + pendulum.pendulumJoint.S_rel[3,3] * (pendulum.pendulumJoint.wa[3] + pendulum.pendulumJoint.w_rela[3]));
//   pendulum.pendulumJoint.ab[1] = pendulum.pendulumJoint.S_rel[1,1] * pendulum.pendulumJoint.aa[1] + (pendulum.pendulumJoint.S_rel[1,2] * pendulum.pendulumJoint.aa[2] + pendulum.pendulumJoint.S_rel[1,3] * pendulum.pendulumJoint.aa[3]);
//   pendulum.pendulumJoint.ab[2] = pendulum.pendulumJoint.S_rel[2,1] * pendulum.pendulumJoint.aa[1] + (pendulum.pendulumJoint.S_rel[2,2] * pendulum.pendulumJoint.aa[2] + pendulum.pendulumJoint.S_rel[2,3] * pendulum.pendulumJoint.aa[3]);
//   pendulum.pendulumJoint.ab[3] = pendulum.pendulumJoint.S_rel[3,1] * pendulum.pendulumJoint.aa[1] + (pendulum.pendulumJoint.S_rel[3,2] * pendulum.pendulumJoint.aa[2] + pendulum.pendulumJoint.S_rel[3,3] * pendulum.pendulumJoint.aa[3]);
//   pendulum.pendulumJoint.zb[1] = pendulum.pendulumJoint.S_rel[1,1] * (pendulum.pendulumJoint.za[1] + (pendulum.pendulumJoint.z_rela[1] + (pendulum.pendulumJoint.wa[2] * pendulum.pendulumJoint.w_rela[3] + (-pendulum.pendulumJoint.wa[3] * pendulum.pendulumJoint.w_rela[2])))) + (pendulum.pendulumJoint.S_rel[1,2] * (pendulum.pendulumJoint.za[2] + (pendulum.pendulumJoint.z_rela[2] + (pendulum.pendulumJoint.wa[3] * pendulum.pendulumJoint.w_rela[1] + (-pendulum.pendulumJoint.wa[1] * pendulum.pendulumJoint.w_rela[3])))) + pendulum.pendulumJoint.S_rel[1,3] * (pendulum.pendulumJoint.za[3] + (pendulum.pendulumJoint.z_rela[3] + (pendulum.pendulumJoint.wa[1] * pendulum.pendulumJoint.w_rela[2] + (-pendulum.pendulumJoint.wa[2] * pendulum.pendulumJoint.w_rela[1])))));
//   pendulum.pendulumJoint.zb[2] = pendulum.pendulumJoint.S_rel[2,1] * (pendulum.pendulumJoint.za[1] + (pendulum.pendulumJoint.z_rela[1] + (pendulum.pendulumJoint.wa[2] * pendulum.pendulumJoint.w_rela[3] + (-pendulum.pendulumJoint.wa[3] * pendulum.pendulumJoint.w_rela[2])))) + (pendulum.pendulumJoint.S_rel[2,2] * (pendulum.pendulumJoint.za[2] + (pendulum.pendulumJoint.z_rela[2] + (pendulum.pendulumJoint.wa[3] * pendulum.pendulumJoint.w_rela[1] + (-pendulum.pendulumJoint.wa[1] * pendulum.pendulumJoint.w_rela[3])))) + pendulum.pendulumJoint.S_rel[2,3] * (pendulum.pendulumJoint.za[3] + (pendulum.pendulumJoint.z_rela[3] + (pendulum.pendulumJoint.wa[1] * pendulum.pendulumJoint.w_rela[2] + (-pendulum.pendulumJoint.wa[2] * pendulum.pendulumJoint.w_rela[1])))));
//   pendulum.pendulumJoint.zb[3] = pendulum.pendulumJoint.S_rel[3,1] * (pendulum.pendulumJoint.za[1] + (pendulum.pendulumJoint.z_rela[1] + (pendulum.pendulumJoint.wa[2] * pendulum.pendulumJoint.w_rela[3] + (-pendulum.pendulumJoint.wa[3] * pendulum.pendulumJoint.w_rela[2])))) + (pendulum.pendulumJoint.S_rel[3,2] * (pendulum.pendulumJoint.za[2] + (pendulum.pendulumJoint.z_rela[2] + (pendulum.pendulumJoint.wa[3] * pendulum.pendulumJoint.w_rela[1] + (-pendulum.pendulumJoint.wa[1] * pendulum.pendulumJoint.w_rela[3])))) + pendulum.pendulumJoint.S_rel[3,3] * (pendulum.pendulumJoint.za[3] + (pendulum.pendulumJoint.z_rela[3] + (pendulum.pendulumJoint.wa[1] * pendulum.pendulumJoint.w_rela[2] + (-pendulum.pendulumJoint.wa[2] * pendulum.pendulumJoint.w_rela[1])))));
//   pendulum.pendulumJoint.fa[1] = pendulum.pendulumJoint.S_rel[1,1] * pendulum.pendulumJoint.fb[1] + (pendulum.pendulumJoint.S_rel[2,1] * pendulum.pendulumJoint.fb[2] + pendulum.pendulumJoint.S_rel[3,1] * pendulum.pendulumJoint.fb[3]);
//   pendulum.pendulumJoint.fa[2] = pendulum.pendulumJoint.S_rel[1,2] * pendulum.pendulumJoint.fb[1] + (pendulum.pendulumJoint.S_rel[2,2] * pendulum.pendulumJoint.fb[2] + pendulum.pendulumJoint.S_rel[3,2] * pendulum.pendulumJoint.fb[3]);
//   pendulum.pendulumJoint.fa[3] = pendulum.pendulumJoint.S_rel[1,3] * pendulum.pendulumJoint.fb[1] + (pendulum.pendulumJoint.S_rel[2,3] * pendulum.pendulumJoint.fb[2] + pendulum.pendulumJoint.S_rel[3,3] * pendulum.pendulumJoint.fb[3]);
//   pendulum.pendulumJoint.ta[1] = pendulum.pendulumJoint.S_rel[1,1] * pendulum.pendulumJoint.tb[1] + (pendulum.pendulumJoint.S_rel[2,1] * pendulum.pendulumJoint.tb[2] + pendulum.pendulumJoint.S_rel[3,1] * pendulum.pendulumJoint.tb[3]);
//   pendulum.pendulumJoint.ta[2] = pendulum.pendulumJoint.S_rel[1,2] * pendulum.pendulumJoint.tb[1] + (pendulum.pendulumJoint.S_rel[2,2] * pendulum.pendulumJoint.tb[2] + pendulum.pendulumJoint.S_rel[3,2] * pendulum.pendulumJoint.tb[3]);
//   pendulum.pendulumJoint.ta[3] = pendulum.pendulumJoint.S_rel[1,3] * pendulum.pendulumJoint.tb[1] + (pendulum.pendulumJoint.S_rel[2,3] * pendulum.pendulumJoint.tb[2] + pendulum.pendulumJoint.S_rel[3,3] * pendulum.pendulumJoint.tb[3]);
//   pendulum.pendulumJoint.axis.tau = pendulum.pendulumJoint.nn[1] * pendulum.pendulumJoint.tb[1] + (pendulum.pendulumJoint.nn[2] * pendulum.pendulumJoint.tb[2] + pendulum.pendulumJoint.nn[3] * pendulum.pendulumJoint.tb[3]);
//   pendulum.toMidCart.Sb[1,1] = pendulum.toMidCart.Sa[1,1];
//   pendulum.toMidCart.Sb[1,2] = pendulum.toMidCart.Sa[1,2];
//   pendulum.toMidCart.Sb[1,3] = pendulum.toMidCart.Sa[1,3];
//   pendulum.toMidCart.Sb[2,1] = pendulum.toMidCart.Sa[2,1];
//   pendulum.toMidCart.Sb[2,2] = pendulum.toMidCart.Sa[2,2];
//   pendulum.toMidCart.Sb[2,3] = pendulum.toMidCart.Sa[2,3];
//   pendulum.toMidCart.Sb[3,1] = pendulum.toMidCart.Sa[3,1];
//   pendulum.toMidCart.Sb[3,2] = pendulum.toMidCart.Sa[3,2];
//   pendulum.toMidCart.Sb[3,3] = pendulum.toMidCart.Sa[3,3];
//   pendulum.toMidCart.wb[1] = pendulum.toMidCart.wa[1];
//   pendulum.toMidCart.wb[2] = pendulum.toMidCart.wa[2];
//   pendulum.toMidCart.wb[3] = pendulum.toMidCart.wa[3];
//   pendulum.toMidCart.zb[1] = pendulum.toMidCart.za[1];
//   pendulum.toMidCart.zb[2] = pendulum.toMidCart.za[2];
//   pendulum.toMidCart.zb[3] = pendulum.toMidCart.za[3];
//   pendulum.toMidCart.r0b[1] = pendulum.toMidCart.r0a[1] + (pendulum.toMidCart.Sa[1,1] * pendulum.toMidCart.r[1] + (pendulum.toMidCart.Sa[1,2] * pendulum.toMidCart.r[2] + pendulum.toMidCart.Sa[1,3] * pendulum.toMidCart.r[3]));
//   pendulum.toMidCart.r0b[2] = pendulum.toMidCart.r0a[2] + (pendulum.toMidCart.Sa[2,1] * pendulum.toMidCart.r[1] + (pendulum.toMidCart.Sa[2,2] * pendulum.toMidCart.r[2] + pendulum.toMidCart.Sa[2,3] * pendulum.toMidCart.r[3]));
//   pendulum.toMidCart.r0b[3] = pendulum.toMidCart.r0a[3] + (pendulum.toMidCart.Sa[3,1] * pendulum.toMidCart.r[1] + (pendulum.toMidCart.Sa[3,2] * pendulum.toMidCart.r[2] + pendulum.toMidCart.Sa[3,3] * pendulum.toMidCart.r[3]));
//   pendulum.toMidCart.vaux[1] = pendulum.toMidCart.wa[2] * pendulum.toMidCart.r[3] - pendulum.toMidCart.wa[3] * pendulum.toMidCart.r[2];
//   pendulum.toMidCart.vaux[2] = pendulum.toMidCart.wa[3] * pendulum.toMidCart.r[1] - pendulum.toMidCart.wa[1] * pendulum.toMidCart.r[3];
//   pendulum.toMidCart.vaux[3] = pendulum.toMidCart.wa[1] * pendulum.toMidCart.r[2] - pendulum.toMidCart.wa[2] * pendulum.toMidCart.r[1];
//   pendulum.toMidCart.vb[1] = pendulum.toMidCart.va[1] + pendulum.toMidCart.vaux[1];
//   pendulum.toMidCart.vb[2] = pendulum.toMidCart.va[2] + pendulum.toMidCart.vaux[2];
//   pendulum.toMidCart.vb[3] = pendulum.toMidCart.va[3] + pendulum.toMidCart.vaux[3];
//   pendulum.toMidCart.ab[1] = pendulum.toMidCart.aa[1] + (pendulum.toMidCart.za[2] * pendulum.toMidCart.r[3] + ((-pendulum.toMidCart.za[3] * pendulum.toMidCart.r[2]) + (pendulum.toMidCart.wa[2] * pendulum.toMidCart.vaux[3] + (-pendulum.toMidCart.wa[3] * pendulum.toMidCart.vaux[2]))));
//   pendulum.toMidCart.ab[2] = pendulum.toMidCart.aa[2] + (pendulum.toMidCart.za[3] * pendulum.toMidCart.r[1] + ((-pendulum.toMidCart.za[1] * pendulum.toMidCart.r[3]) + (pendulum.toMidCart.wa[3] * pendulum.toMidCart.vaux[1] + (-pendulum.toMidCart.wa[1] * pendulum.toMidCart.vaux[3]))));
//   pendulum.toMidCart.ab[3] = pendulum.toMidCart.aa[3] + (pendulum.toMidCart.za[1] * pendulum.toMidCart.r[2] + ((-pendulum.toMidCart.za[2] * pendulum.toMidCart.r[1]) + (pendulum.toMidCart.wa[1] * pendulum.toMidCart.vaux[2] + (-pendulum.toMidCart.wa[2] * pendulum.toMidCart.vaux[1]))));
//   pendulum.toMidCart.fa[1] = pendulum.toMidCart.fb[1];
//   pendulum.toMidCart.fa[2] = pendulum.toMidCart.fb[2];
//   pendulum.toMidCart.fa[3] = pendulum.toMidCart.fb[3];
//   pendulum.toMidCart.ta[1] = pendulum.toMidCart.tb[1] + (pendulum.toMidCart.r[2] * pendulum.toMidCart.fa[3] + (-pendulum.toMidCart.r[3] * pendulum.toMidCart.fa[2]));
//   pendulum.toMidCart.ta[2] = pendulum.toMidCart.tb[2] + (pendulum.toMidCart.r[3] * pendulum.toMidCart.fa[1] + (-pendulum.toMidCart.r[1] * pendulum.toMidCart.fa[3]));
//   pendulum.toMidCart.ta[3] = pendulum.toMidCart.tb[3] + (pendulum.toMidCart.r[1] * pendulum.toMidCart.fa[2] + (-pendulum.toMidCart.r[2] * pendulum.toMidCart.fa[1]));
//   pendulum.sliderConstraint.axis.s = pendulum.sliderConstraint.q;
//   pendulum.sliderConstraint.bearing.s = 0.0;
//   pendulum.sliderConstraint.qd = der(pendulum.sliderConstraint.q);
//   pendulum.sliderConstraint.qdd = der(pendulum.sliderConstraint.qd);
//   pendulum.sliderConstraint.nn[1] = pendulum.sliderConstraint.n[1] / sqrt(pendulum.sliderConstraint.n[1] ^ 2.0 + (pendulum.sliderConstraint.n[2] ^ 2.0 + pendulum.sliderConstraint.n[3] ^ 2.0));
//   pendulum.sliderConstraint.nn[2] = pendulum.sliderConstraint.n[2] / sqrt(pendulum.sliderConstraint.n[1] ^ 2.0 + (pendulum.sliderConstraint.n[2] ^ 2.0 + pendulum.sliderConstraint.n[3] ^ 2.0));
//   pendulum.sliderConstraint.nn[3] = pendulum.sliderConstraint.n[3] / sqrt(pendulum.sliderConstraint.n[1] ^ 2.0 + (pendulum.sliderConstraint.n[2] ^ 2.0 + pendulum.sliderConstraint.n[3] ^ 2.0));
//   pendulum.sliderConstraint.S_rel[1,1] = 1.0;
//   pendulum.sliderConstraint.S_rel[1,2] = 0.0;
//   pendulum.sliderConstraint.S_rel[1,3] = 0.0;
//   pendulum.sliderConstraint.S_rel[2,1] = 0.0;
//   pendulum.sliderConstraint.S_rel[2,2] = 1.0;
//   pendulum.sliderConstraint.S_rel[2,3] = 0.0;
//   pendulum.sliderConstraint.S_rel[3,1] = 0.0;
//   pendulum.sliderConstraint.S_rel[3,2] = 0.0;
//   pendulum.sliderConstraint.S_rel[3,3] = 1.0;
//   pendulum.sliderConstraint.qq = pendulum.sliderConstraint.q - pendulum.sliderConstraint.q0;
//   pendulum.sliderConstraint.r_rela[1] = pendulum.sliderConstraint.qq * pendulum.sliderConstraint.nn[1];
//   pendulum.sliderConstraint.r_rela[2] = pendulum.sliderConstraint.qq * pendulum.sliderConstraint.nn[2];
//   pendulum.sliderConstraint.r_rela[3] = pendulum.sliderConstraint.qq * pendulum.sliderConstraint.nn[3];
//   pendulum.sliderConstraint.v_rela[1] = pendulum.sliderConstraint.qd * pendulum.sliderConstraint.nn[1];
//   pendulum.sliderConstraint.v_rela[2] = pendulum.sliderConstraint.qd * pendulum.sliderConstraint.nn[2];
//   pendulum.sliderConstraint.v_rela[3] = pendulum.sliderConstraint.qd * pendulum.sliderConstraint.nn[3];
//   pendulum.sliderConstraint.a_rela[1] = pendulum.sliderConstraint.qdd * pendulum.sliderConstraint.nn[1];
//   pendulum.sliderConstraint.a_rela[2] = pendulum.sliderConstraint.qdd * pendulum.sliderConstraint.nn[2];
//   pendulum.sliderConstraint.a_rela[3] = pendulum.sliderConstraint.qdd * pendulum.sliderConstraint.nn[3];
//   pendulum.sliderConstraint.w_rela[1] = 0.0;
//   pendulum.sliderConstraint.w_rela[2] = 0.0;
//   pendulum.sliderConstraint.w_rela[3] = 0.0;
//   pendulum.sliderConstraint.z_rela[1] = 0.0;
//   pendulum.sliderConstraint.z_rela[2] = 0.0;
//   pendulum.sliderConstraint.z_rela[3] = 0.0;
//   pendulum.sliderConstraint.Sb[1,1] = pendulum.sliderConstraint.Sa[1,1];
//   pendulum.sliderConstraint.Sb[1,2] = pendulum.sliderConstraint.Sa[1,2];
//   pendulum.sliderConstraint.Sb[1,3] = pendulum.sliderConstraint.Sa[1,3];
//   pendulum.sliderConstraint.Sb[2,1] = pendulum.sliderConstraint.Sa[2,1];
//   pendulum.sliderConstraint.Sb[2,2] = pendulum.sliderConstraint.Sa[2,2];
//   pendulum.sliderConstraint.Sb[2,3] = pendulum.sliderConstraint.Sa[2,3];
//   pendulum.sliderConstraint.Sb[3,1] = pendulum.sliderConstraint.Sa[3,1];
//   pendulum.sliderConstraint.Sb[3,2] = pendulum.sliderConstraint.Sa[3,2];
//   pendulum.sliderConstraint.Sb[3,3] = pendulum.sliderConstraint.Sa[3,3];
//   pendulum.sliderConstraint.r0b[1] = pendulum.sliderConstraint.r0a[1] + (pendulum.sliderConstraint.Sa[1,1] * pendulum.sliderConstraint.r_rela[1] + (pendulum.sliderConstraint.Sa[1,2] * pendulum.sliderConstraint.r_rela[2] + pendulum.sliderConstraint.Sa[1,3] * pendulum.sliderConstraint.r_rela[3]));
//   pendulum.sliderConstraint.r0b[2] = pendulum.sliderConstraint.r0a[2] + (pendulum.sliderConstraint.Sa[2,1] * pendulum.sliderConstraint.r_rela[1] + (pendulum.sliderConstraint.Sa[2,2] * pendulum.sliderConstraint.r_rela[2] + pendulum.sliderConstraint.Sa[2,3] * pendulum.sliderConstraint.r_rela[3]));
//   pendulum.sliderConstraint.r0b[3] = pendulum.sliderConstraint.r0a[3] + (pendulum.sliderConstraint.Sa[3,1] * pendulum.sliderConstraint.r_rela[1] + (pendulum.sliderConstraint.Sa[3,2] * pendulum.sliderConstraint.r_rela[2] + pendulum.sliderConstraint.Sa[3,3] * pendulum.sliderConstraint.r_rela[3]));
//   pendulum.sliderConstraint.vaux[1] = pendulum.sliderConstraint.wa[2] * pendulum.sliderConstraint.r_rela[3] - pendulum.sliderConstraint.wa[3] * pendulum.sliderConstraint.r_rela[2];
//   pendulum.sliderConstraint.vaux[2] = pendulum.sliderConstraint.wa[3] * pendulum.sliderConstraint.r_rela[1] - pendulum.sliderConstraint.wa[1] * pendulum.sliderConstraint.r_rela[3];
//   pendulum.sliderConstraint.vaux[3] = pendulum.sliderConstraint.wa[1] * pendulum.sliderConstraint.r_rela[2] - pendulum.sliderConstraint.wa[2] * pendulum.sliderConstraint.r_rela[1];
//   pendulum.sliderConstraint.vb[1] = pendulum.sliderConstraint.va[1] + (pendulum.sliderConstraint.v_rela[1] + pendulum.sliderConstraint.vaux[1]);
//   pendulum.sliderConstraint.vb[2] = pendulum.sliderConstraint.va[2] + (pendulum.sliderConstraint.v_rela[2] + pendulum.sliderConstraint.vaux[2]);
//   pendulum.sliderConstraint.vb[3] = pendulum.sliderConstraint.va[3] + (pendulum.sliderConstraint.v_rela[3] + pendulum.sliderConstraint.vaux[3]);
//   pendulum.sliderConstraint.wb[1] = pendulum.sliderConstraint.wa[1];
//   pendulum.sliderConstraint.wb[2] = pendulum.sliderConstraint.wa[2];
//   pendulum.sliderConstraint.wb[3] = pendulum.sliderConstraint.wa[3];
//   pendulum.sliderConstraint.ab[1] = pendulum.sliderConstraint.aa[1] + (pendulum.sliderConstraint.a_rela[1] + (pendulum.sliderConstraint.za[2] * pendulum.sliderConstraint.r_rela[3] + ((-pendulum.sliderConstraint.za[3] * pendulum.sliderConstraint.r_rela[2]) + (pendulum.sliderConstraint.wa[2] * (pendulum.sliderConstraint.vaux[3] + 2.0 * pendulum.sliderConstraint.v_rela[3]) + (-pendulum.sliderConstraint.wa[3] * (pendulum.sliderConstraint.vaux[2] + 2.0 * pendulum.sliderConstraint.v_rela[2]))))));
//   pendulum.sliderConstraint.ab[2] = pendulum.sliderConstraint.aa[2] + (pendulum.sliderConstraint.a_rela[2] + (pendulum.sliderConstraint.za[3] * pendulum.sliderConstraint.r_rela[1] + ((-pendulum.sliderConstraint.za[1] * pendulum.sliderConstraint.r_rela[3]) + (pendulum.sliderConstraint.wa[3] * (pendulum.sliderConstraint.vaux[1] + 2.0 * pendulum.sliderConstraint.v_rela[1]) + (-pendulum.sliderConstraint.wa[1] * (pendulum.sliderConstraint.vaux[3] + 2.0 * pendulum.sliderConstraint.v_rela[3]))))));
//   pendulum.sliderConstraint.ab[3] = pendulum.sliderConstraint.aa[3] + (pendulum.sliderConstraint.a_rela[3] + (pendulum.sliderConstraint.za[1] * pendulum.sliderConstraint.r_rela[2] + ((-pendulum.sliderConstraint.za[2] * pendulum.sliderConstraint.r_rela[1]) + (pendulum.sliderConstraint.wa[1] * (pendulum.sliderConstraint.vaux[2] + 2.0 * pendulum.sliderConstraint.v_rela[2]) + (-pendulum.sliderConstraint.wa[2] * (pendulum.sliderConstraint.vaux[1] + 2.0 * pendulum.sliderConstraint.v_rela[1]))))));
//   pendulum.sliderConstraint.zb[1] = pendulum.sliderConstraint.za[1];
//   pendulum.sliderConstraint.zb[2] = pendulum.sliderConstraint.za[2];
//   pendulum.sliderConstraint.zb[3] = pendulum.sliderConstraint.za[3];
//   pendulum.sliderConstraint.fa[1] = pendulum.sliderConstraint.fb[1];
//   pendulum.sliderConstraint.fa[2] = pendulum.sliderConstraint.fb[2];
//   pendulum.sliderConstraint.fa[3] = pendulum.sliderConstraint.fb[3];
//   pendulum.sliderConstraint.ta[1] = pendulum.sliderConstraint.tb[1] + (pendulum.sliderConstraint.r_rela[2] * pendulum.sliderConstraint.fa[3] + (-pendulum.sliderConstraint.r_rela[3] * pendulum.sliderConstraint.fa[2]));
//   pendulum.sliderConstraint.ta[2] = pendulum.sliderConstraint.tb[2] + (pendulum.sliderConstraint.r_rela[3] * pendulum.sliderConstraint.fa[1] + (-pendulum.sliderConstraint.r_rela[1] * pendulum.sliderConstraint.fa[3]));
//   pendulum.sliderConstraint.ta[3] = pendulum.sliderConstraint.tb[3] + (pendulum.sliderConstraint.r_rela[1] * pendulum.sliderConstraint.fa[2] + (-pendulum.sliderConstraint.r_rela[2] * pendulum.sliderConstraint.fa[1]));
//   pendulum.sliderConstraint.axis.f = pendulum.sliderConstraint.nn[1] * pendulum.sliderConstraint.fb[1] + (pendulum.sliderConstraint.nn[2] * pendulum.sliderConstraint.fb[2] + pendulum.sliderConstraint.nn[3] * pendulum.sliderConstraint.fb[3]);
//   pendulum.pendulumDamper.w_rel = der(pendulum.pendulumDamper.phi_rel);
//   pendulum.pendulumDamper.tau = pendulum.pendulumDamper.d * pendulum.pendulumDamper.w_rel;
//   pendulum.pendulumDamper.phi_rel = pendulum.pendulumDamper.flange_b.phi - pendulum.pendulumDamper.flange_a.phi;
//   pendulum.pendulumDamper.flange_b.tau = pendulum.pendulumDamper.tau;
//   pendulum.pendulumDamper.flange_a.tau = -pendulum.pendulumDamper.tau;
//   pendulum.sliderDamper.v_rel = der(pendulum.sliderDamper.s_rel);
//   pendulum.sliderDamper.f = pendulum.sliderDamper.d * pendulum.sliderDamper.v_rel;
//   pendulum.sliderDamper.s_rel = pendulum.sliderDamper.flange_b.s - pendulum.sliderDamper.flange_a.s;
//   pendulum.sliderDamper.flange_b.f = pendulum.sliderDamper.f;
//   pendulum.sliderDamper.flange_a.f = -pendulum.sliderDamper.f;
//   pendulum.angleSensor.phi = pendulum.angleSensor.flange_a.phi;
//   0.0 = pendulum.angleSensor.flange_a.tau;
//   pendulum.positionSensor.s = pendulum.positionSensor.flange_a.s;
//   0.0 = pendulum.positionSensor.flange_a.f;
// pendulum.positionSensor.s = pendulum.position;
// pendulum.angleSensor.phi = pendulum.angle;
//   pendulum.positionSensor.flange_a.f + ((-pendulum.flange_a.f) + (pendulum.sliderDamper.flange_b.f + pendulum.sliderConstraint.axis.f)) = 0.0;
// pendulum.positionSensor.flange_a.s = pendulum.flange_a.s;
// pendulum.flange_a.s = pendulum.sliderDamper.flange_b.s;
// pendulum.sliderDamper.flange_b.s = pendulum.sliderConstraint.axis.s;
//   pendulum.inertialSystem.frame_b.t[1] + pendulum.sliderConstraint.frame_a.t[1] = 0.0;
//   pendulum.inertialSystem.frame_b.t[2] + pendulum.sliderConstraint.frame_a.t[2] = 0.0;
//   pendulum.inertialSystem.frame_b.t[3] + pendulum.sliderConstraint.frame_a.t[3] = 0.0;
//   pendulum.inertialSystem.frame_b.f[1] + pendulum.sliderConstraint.frame_a.f[1] = 0.0;
//   pendulum.inertialSystem.frame_b.f[2] + pendulum.sliderConstraint.frame_a.f[2] = 0.0;
//   pendulum.inertialSystem.frame_b.f[3] + pendulum.sliderConstraint.frame_a.f[3] = 0.0;
// pendulum.inertialSystem.frame_b.z[1] = pendulum.sliderConstraint.frame_a.z[1];
// pendulum.inertialSystem.frame_b.z[2] = pendulum.sliderConstraint.frame_a.z[2];
// pendulum.inertialSystem.frame_b.z[3] = pendulum.sliderConstraint.frame_a.z[3];
// pendulum.inertialSystem.frame_b.a[1] = pendulum.sliderConstraint.frame_a.a[1];
// pendulum.inertialSystem.frame_b.a[2] = pendulum.sliderConstraint.frame_a.a[2];
// pendulum.inertialSystem.frame_b.a[3] = pendulum.sliderConstraint.frame_a.a[3];
// pendulum.inertialSystem.frame_b.w[1] = pendulum.sliderConstraint.frame_a.w[1];
// pendulum.inertialSystem.frame_b.w[2] = pendulum.sliderConstraint.frame_a.w[2];
// pendulum.inertialSystem.frame_b.w[3] = pendulum.sliderConstraint.frame_a.w[3];
// pendulum.inertialSystem.frame_b.v[1] = pendulum.sliderConstraint.frame_a.v[1];
// pendulum.inertialSystem.frame_b.v[2] = pendulum.sliderConstraint.frame_a.v[2];
// pendulum.inertialSystem.frame_b.v[3] = pendulum.sliderConstraint.frame_a.v[3];
// pendulum.inertialSystem.frame_b.S[1,1] = pendulum.sliderConstraint.frame_a.S[1,1];
// pendulum.inertialSystem.frame_b.S[1,2] = pendulum.sliderConstraint.frame_a.S[1,2];
// pendulum.inertialSystem.frame_b.S[1,3] = pendulum.sliderConstraint.frame_a.S[1,3];
// pendulum.inertialSystem.frame_b.S[2,1] = pendulum.sliderConstraint.frame_a.S[2,1];
// pendulum.inertialSystem.frame_b.S[2,2] = pendulum.sliderConstraint.frame_a.S[2,2];
// pendulum.inertialSystem.frame_b.S[2,3] = pendulum.sliderConstraint.frame_a.S[2,3];
// pendulum.inertialSystem.frame_b.S[3,1] = pendulum.sliderConstraint.frame_a.S[3,1];
// pendulum.inertialSystem.frame_b.S[3,2] = pendulum.sliderConstraint.frame_a.S[3,2];
// pendulum.inertialSystem.frame_b.S[3,3] = pendulum.sliderConstraint.frame_a.S[3,3];
// pendulum.inertialSystem.frame_b.r0[1] = pendulum.sliderConstraint.frame_a.r0[1];
// pendulum.inertialSystem.frame_b.r0[2] = pendulum.sliderConstraint.frame_a.r0[2];
// pendulum.inertialSystem.frame_b.r0[3] = pendulum.sliderConstraint.frame_a.r0[3];
//   pendulum.sliderConstraint.frame_b.t[1] + pendulum.cart.frame_a.t[1] = 0.0;
//   pendulum.sliderConstraint.frame_b.t[2] + pendulum.cart.frame_a.t[2] = 0.0;
//   pendulum.sliderConstraint.frame_b.t[3] + pendulum.cart.frame_a.t[3] = 0.0;
//   pendulum.sliderConstraint.frame_b.f[1] + pendulum.cart.frame_a.f[1] = 0.0;
//   pendulum.sliderConstraint.frame_b.f[2] + pendulum.cart.frame_a.f[2] = 0.0;
//   pendulum.sliderConstraint.frame_b.f[3] + pendulum.cart.frame_a.f[3] = 0.0;
// pendulum.sliderConstraint.frame_b.z[1] = pendulum.cart.frame_a.z[1];
// pendulum.sliderConstraint.frame_b.z[2] = pendulum.cart.frame_a.z[2];
// pendulum.sliderConstraint.frame_b.z[3] = pendulum.cart.frame_a.z[3];
// pendulum.sliderConstraint.frame_b.a[1] = pendulum.cart.frame_a.a[1];
// pendulum.sliderConstraint.frame_b.a[2] = pendulum.cart.frame_a.a[2];
// pendulum.sliderConstraint.frame_b.a[3] = pendulum.cart.frame_a.a[3];
// pendulum.sliderConstraint.frame_b.w[1] = pendulum.cart.frame_a.w[1];
// pendulum.sliderConstraint.frame_b.w[2] = pendulum.cart.frame_a.w[2];
// pendulum.sliderConstraint.frame_b.w[3] = pendulum.cart.frame_a.w[3];
// pendulum.sliderConstraint.frame_b.v[1] = pendulum.cart.frame_a.v[1];
// pendulum.sliderConstraint.frame_b.v[2] = pendulum.cart.frame_a.v[2];
// pendulum.sliderConstraint.frame_b.v[3] = pendulum.cart.frame_a.v[3];
// pendulum.sliderConstraint.frame_b.S[1,1] = pendulum.cart.frame_a.S[1,1];
// pendulum.sliderConstraint.frame_b.S[1,2] = pendulum.cart.frame_a.S[1,2];
// pendulum.sliderConstraint.frame_b.S[1,3] = pendulum.cart.frame_a.S[1,3];
// pendulum.sliderConstraint.frame_b.S[2,1] = pendulum.cart.frame_a.S[2,1];
// pendulum.sliderConstraint.frame_b.S[2,2] = pendulum.cart.frame_a.S[2,2];
// pendulum.sliderConstraint.frame_b.S[2,3] = pendulum.cart.frame_a.S[2,3];
// pendulum.sliderConstraint.frame_b.S[3,1] = pendulum.cart.frame_a.S[3,1];
// pendulum.sliderConstraint.frame_b.S[3,2] = pendulum.cart.frame_a.S[3,2];
// pendulum.sliderConstraint.frame_b.S[3,3] = pendulum.cart.frame_a.S[3,3];
// pendulum.sliderConstraint.frame_b.r0[1] = pendulum.cart.frame_a.r0[1];
// pendulum.sliderConstraint.frame_b.r0[2] = pendulum.cart.frame_a.r0[2];
// pendulum.sliderConstraint.frame_b.r0[3] = pendulum.cart.frame_a.r0[3];
//   pendulum.cart.frame_b.t[1] + pendulum.toMidCart.frame_a.t[1] = 0.0;
//   pendulum.cart.frame_b.t[2] + pendulum.toMidCart.frame_a.t[2] = 0.0;
//   pendulum.cart.frame_b.t[3] + pendulum.toMidCart.frame_a.t[3] = 0.0;
//   pendulum.cart.frame_b.f[1] + pendulum.toMidCart.frame_a.f[1] = 0.0;
//   pendulum.cart.frame_b.f[2] + pendulum.toMidCart.frame_a.f[2] = 0.0;
//   pendulum.cart.frame_b.f[3] + pendulum.toMidCart.frame_a.f[3] = 0.0;
// pendulum.cart.frame_b.z[1] = pendulum.toMidCart.frame_a.z[1];
// pendulum.cart.frame_b.z[2] = pendulum.toMidCart.frame_a.z[2];
// pendulum.cart.frame_b.z[3] = pendulum.toMidCart.frame_a.z[3];
// pendulum.cart.frame_b.a[1] = pendulum.toMidCart.frame_a.a[1];
// pendulum.cart.frame_b.a[2] = pendulum.toMidCart.frame_a.a[2];
// pendulum.cart.frame_b.a[3] = pendulum.toMidCart.frame_a.a[3];
// pendulum.cart.frame_b.w[1] = pendulum.toMidCart.frame_a.w[1];
// pendulum.cart.frame_b.w[2] = pendulum.toMidCart.frame_a.w[2];
// pendulum.cart.frame_b.w[3] = pendulum.toMidCart.frame_a.w[3];
// pendulum.cart.frame_b.v[1] = pendulum.toMidCart.frame_a.v[1];
// pendulum.cart.frame_b.v[2] = pendulum.toMidCart.frame_a.v[2];
// pendulum.cart.frame_b.v[3] = pendulum.toMidCart.frame_a.v[3];
// pendulum.cart.frame_b.S[1,1] = pendulum.toMidCart.frame_a.S[1,1];
// pendulum.cart.frame_b.S[1,2] = pendulum.toMidCart.frame_a.S[1,2];
// pendulum.cart.frame_b.S[1,3] = pendulum.toMidCart.frame_a.S[1,3];
// pendulum.cart.frame_b.S[2,1] = pendulum.toMidCart.frame_a.S[2,1];
// pendulum.cart.frame_b.S[2,2] = pendulum.toMidCart.frame_a.S[2,2];
// pendulum.cart.frame_b.S[2,3] = pendulum.toMidCart.frame_a.S[2,3];
// pendulum.cart.frame_b.S[3,1] = pendulum.toMidCart.frame_a.S[3,1];
// pendulum.cart.frame_b.S[3,2] = pendulum.toMidCart.frame_a.S[3,2];
// pendulum.cart.frame_b.S[3,3] = pendulum.toMidCart.frame_a.S[3,3];
// pendulum.cart.frame_b.r0[1] = pendulum.toMidCart.frame_a.r0[1];
// pendulum.cart.frame_b.r0[2] = pendulum.toMidCart.frame_a.r0[2];
// pendulum.cart.frame_b.r0[3] = pendulum.toMidCart.frame_a.r0[3];
//   pendulum.angleSensor.flange_a.tau + (pendulum.pendulumDamper.flange_b.tau + pendulum.pendulumJoint.axis.tau) = 0.0;
// pendulum.angleSensor.flange_a.phi = pendulum.pendulumDamper.flange_b.phi;
// pendulum.pendulumDamper.flange_b.phi = pendulum.pendulumJoint.axis.phi;
//   pendulum.toMidCart.frame_b.t[1] + pendulum.pendulumJoint.frame_a.t[1] = 0.0;
//   pendulum.toMidCart.frame_b.t[2] + pendulum.pendulumJoint.frame_a.t[2] = 0.0;
//   pendulum.toMidCart.frame_b.t[3] + pendulum.pendulumJoint.frame_a.t[3] = 0.0;
//   pendulum.toMidCart.frame_b.f[1] + pendulum.pendulumJoint.frame_a.f[1] = 0.0;
//   pendulum.toMidCart.frame_b.f[2] + pendulum.pendulumJoint.frame_a.f[2] = 0.0;
//   pendulum.toMidCart.frame_b.f[3] + pendulum.pendulumJoint.frame_a.f[3] = 0.0;
// pendulum.toMidCart.frame_b.z[1] = pendulum.pendulumJoint.frame_a.z[1];
// pendulum.toMidCart.frame_b.z[2] = pendulum.pendulumJoint.frame_a.z[2];
// pendulum.toMidCart.frame_b.z[3] = pendulum.pendulumJoint.frame_a.z[3];
// pendulum.toMidCart.frame_b.a[1] = pendulum.pendulumJoint.frame_a.a[1];
// pendulum.toMidCart.frame_b.a[2] = pendulum.pendulumJoint.frame_a.a[2];
// pendulum.toMidCart.frame_b.a[3] = pendulum.pendulumJoint.frame_a.a[3];
// pendulum.toMidCart.frame_b.w[1] = pendulum.pendulumJoint.frame_a.w[1];
// pendulum.toMidCart.frame_b.w[2] = pendulum.pendulumJoint.frame_a.w[2];
// pendulum.toMidCart.frame_b.w[3] = pendulum.pendulumJoint.frame_a.w[3];
// pendulum.toMidCart.frame_b.v[1] = pendulum.pendulumJoint.frame_a.v[1];
// pendulum.toMidCart.frame_b.v[2] = pendulum.pendulumJoint.frame_a.v[2];
// pendulum.toMidCart.frame_b.v[3] = pendulum.pendulumJoint.frame_a.v[3];
// pendulum.toMidCart.frame_b.S[1,1] = pendulum.pendulumJoint.frame_a.S[1,1];
// pendulum.toMidCart.frame_b.S[1,2] = pendulum.pendulumJoint.frame_a.S[1,2];
// pendulum.toMidCart.frame_b.S[1,3] = pendulum.pendulumJoint.frame_a.S[1,3];
// pendulum.toMidCart.frame_b.S[2,1] = pendulum.pendulumJoint.frame_a.S[2,1];
// pendulum.toMidCart.frame_b.S[2,2] = pendulum.pendulumJoint.frame_a.S[2,2];
// pendulum.toMidCart.frame_b.S[2,3] = pendulum.pendulumJoint.frame_a.S[2,3];
// pendulum.toMidCart.frame_b.S[3,1] = pendulum.pendulumJoint.frame_a.S[3,1];
// pendulum.toMidCart.frame_b.S[3,2] = pendulum.pendulumJoint.frame_a.S[3,2];
// pendulum.toMidCart.frame_b.S[3,3] = pendulum.pendulumJoint.frame_a.S[3,3];
// pendulum.toMidCart.frame_b.r0[1] = pendulum.pendulumJoint.frame_a.r0[1];
// pendulum.toMidCart.frame_b.r0[2] = pendulum.pendulumJoint.frame_a.r0[2];
// pendulum.toMidCart.frame_b.r0[3] = pendulum.pendulumJoint.frame_a.r0[3];
//   pendulum.sliderDamper.flange_a.f + pendulum.sliderConstraint.bearing.f = 0.0;
// pendulum.sliderDamper.flange_a.s = pendulum.sliderConstraint.bearing.s;
//   pendulum.pendulumDamper.flange_a.tau + pendulum.pendulumJoint.bearing.tau = 0.0;
// pendulum.pendulumDamper.flange_a.phi = pendulum.pendulumJoint.bearing.phi;
//   pendulum.pendulumJoint.frame_b.t[1] + pendulum.pendulum.frame_a.t[1] = 0.0;
//   pendulum.pendulumJoint.frame_b.t[2] + pendulum.pendulum.frame_a.t[2] = 0.0;
//   pendulum.pendulumJoint.frame_b.t[3] + pendulum.pendulum.frame_a.t[3] = 0.0;
//   pendulum.pendulumJoint.frame_b.f[1] + pendulum.pendulum.frame_a.f[1] = 0.0;
//   pendulum.pendulumJoint.frame_b.f[2] + pendulum.pendulum.frame_a.f[2] = 0.0;
//   pendulum.pendulumJoint.frame_b.f[3] + pendulum.pendulum.frame_a.f[3] = 0.0;
// pendulum.pendulumJoint.frame_b.z[1] = pendulum.pendulum.frame_a.z[1];
// pendulum.pendulumJoint.frame_b.z[2] = pendulum.pendulum.frame_a.z[2];
// pendulum.pendulumJoint.frame_b.z[3] = pendulum.pendulum.frame_a.z[3];
// pendulum.pendulumJoint.frame_b.a[1] = pendulum.pendulum.frame_a.a[1];
// pendulum.pendulumJoint.frame_b.a[2] = pendulum.pendulum.frame_a.a[2];
// pendulum.pendulumJoint.frame_b.a[3] = pendulum.pendulum.frame_a.a[3];
// pendulum.pendulumJoint.frame_b.w[1] = pendulum.pendulum.frame_a.w[1];
// pendulum.pendulumJoint.frame_b.w[2] = pendulum.pendulum.frame_a.w[2];
// pendulum.pendulumJoint.frame_b.w[3] = pendulum.pendulum.frame_a.w[3];
// pendulum.pendulumJoint.frame_b.v[1] = pendulum.pendulum.frame_a.v[1];
// pendulum.pendulumJoint.frame_b.v[2] = pendulum.pendulum.frame_a.v[2];
// pendulum.pendulumJoint.frame_b.v[3] = pendulum.pendulum.frame_a.v[3];
// pendulum.pendulumJoint.frame_b.S[1,1] = pendulum.pendulum.frame_a.S[1,1];
// pendulum.pendulumJoint.frame_b.S[1,2] = pendulum.pendulum.frame_a.S[1,2];
// pendulum.pendulumJoint.frame_b.S[1,3] = pendulum.pendulum.frame_a.S[1,3];
// pendulum.pendulumJoint.frame_b.S[2,1] = pendulum.pendulum.frame_a.S[2,1];
// pendulum.pendulumJoint.frame_b.S[2,2] = pendulum.pendulum.frame_a.S[2,2];
// pendulum.pendulumJoint.frame_b.S[2,3] = pendulum.pendulum.frame_a.S[2,3];
// pendulum.pendulumJoint.frame_b.S[3,1] = pendulum.pendulum.frame_a.S[3,1];
// pendulum.pendulumJoint.frame_b.S[3,2] = pendulum.pendulum.frame_a.S[3,2];
// pendulum.pendulumJoint.frame_b.S[3,3] = pendulum.pendulum.frame_a.S[3,3];
// pendulum.pendulumJoint.frame_b.r0[1] = pendulum.pendulum.frame_a.r0[1];
// pendulum.pendulumJoint.frame_b.r0[2] = pendulum.pendulum.frame_a.r0[2];
// pendulum.pendulumJoint.frame_b.r0[3] = pendulum.pendulum.frame_a.r0[3];
//   pendulum.pendulum.frame_b.f[1] = 0.0;
//   pendulum.pendulum.frame_b.f[2] = 0.0;
//   pendulum.pendulum.frame_b.f[3] = 0.0;
//   pendulum.pendulum.frame_b.t[1] = 0.0;
//   pendulum.pendulum.frame_b.t[2] = 0.0;
//   pendulum.pendulum.frame_b.t[3] = 0.0;
//   gear.gearR2T.flange_a.phi - gear.gearR2T.bearingR.phi = gear.gearR2T.ratio * (gear.gearR2T.flange_b.s - gear.gearR2T.bearingT.s);
//   0.0 = gear.gearR2T.ratio * gear.gearR2T.flange_a.tau + gear.gearR2T.flange_b.f;
//   0.0 = gear.gearR2T.flange_a.tau + gear.gearR2T.tau_support;
//   0.0 = gear.gearR2T.flange_b.f + gear.gearR2T.f_support;
//   gear.gearR2T.bearingR.phi = 0.0;
//   gear.gearR2T.bearingT.s = 0.0;
//   gear.idealGear.phi_a = gear.idealGear.ratio * gear.idealGear.phi_b;
//   0.0 = gear.idealGear.ratio * gear.idealGear.flange_a.tau + gear.idealGear.flange_b.tau;
//   gear.idealGear.bearing.phi = 0.0;
//   0.0 = gear.idealGear.flange_a.tau + (gear.idealGear.flange_b.tau + gear.idealGear.tau_support);
//   gear.idealGear.phi_a = gear.idealGear.flange_a.phi - gear.idealGear.bearing.phi;
//   gear.idealGear.phi_b = gear.idealGear.flange_b.phi - gear.idealGear.bearing.phi;
//   (-gear.flange_b.f) + gear.gearR2T.flange_b.f = 0.0;
// gear.flange_b.s = gear.gearR2T.flange_b.s;
//   gear.idealGear.flange_a.tau + (-gear.flange_a.tau) = 0.0;
// gear.idealGear.flange_a.phi = gear.flange_a.phi;
//   gear.gearR2T.flange_a.tau + gear.idealGear.flange_b.tau = 0.0;
// gear.gearR2T.flange_a.phi = gear.idealGear.flange_b.phi;
//   gear.gearR2T.bearingT.f = 0.0;
//   gear.gearR2T.bearingR.tau = 0.0;
//   gear.idealGear.bearing.tau = 0.0;
// pendulum.angle = controller.angle;
// pendulum.position = controller.xPos;
// motor.u = controller.y;
//   motor.flange.tau + gear.flange_a.tau = 0.0;
// motor.flange.phi = gear.flange_a.phi;
//   gear.flange_b.f + pendulum.flange_a.f = 0.0;
// gear.flange_b.s = pendulum.flange_a.s;
// algorithm
//   when {time >= pre(controller.timeTable.nextEvent),initial()} then
//     (controller.timeTable.a, controller.timeTable.b, controller.timeTable.nextEvent, controller.timeTable.last) := Modelica.Blocks.Sources.TimeTable.getInterpolationCoefficients({{controller.timeTable.table[1,1],controller.timeTable.table[1,2]},{controller.timeTable.table[2,1],controller.timeTable.table[2,2]},{controller.timeTable.table[3,1],controller.timeTable.table[3,2]},{controller.timeTable.table[4,1],controller.timeTable.table[4,2]},{controller.timeTable.table[5,1],controller.timeTable.table[5,2]},{controller.timeTable.table[6,1],controller.timeTable.table[6,2]},{controller.timeTable.table[7,1],controller.timeTable.table[7,2]}},controller.timeTable.offset,controller.timeTable.startTime,time,controller.timeTable.last,1e-13);
//   end when;
// end IntroductoryExamples.Systems.InvertedPendulum;
// "
// ""
// 
// ""
// endResult
