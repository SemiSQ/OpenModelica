within SiemensPowerOMCtest.Utilities.HeatTransfer;
model Escoa
  "flue gas-metal(finned tubes) heat transition according to Weierman (Escoa)"
  import SI = Modelica.SIunits;
  extends SiemensPowerOMCtest.Utilities.HeatTransfer.HeatTransferBaseClass;
  constant Real pi=Modelica.Constants.pi;

Real C1;
Real C2;
Real C3;
Real Ao;
Real Apo;
Real Afo;
Real Psi;
Real TGas;
Real[numberOfNodes] effectivity( each start=1.0);
Real[numberOfNodes] mb1(each start=1.0);
Real mb2( start=1.0);
SI.Temperature[numberOfNodes] TFins(each start=400.0);
SI.ThermalConductivity[numberOfNodes] lambdaFins;
SI.Area AHeatTransferActual;
Real[numberOfNodes] NusseltConvective;
SI.CoefficientOfHeatTransfer[numberOfNodes] alphaConvective(each start=100.0);
Real Rey;

equation
Rey = max(Re, 1);
TGas = Medium.temperature(state);
TFins = 7/9* TWall + 2/9*TGas*ones(numberOfNodes);
for i in 1:numberOfNodes loop
        lambdaFins[i] = SiemensPowerOMCtest.Utilities.Functions.lambdaFin(TFins[i], geoFins.material);
        NusseltConvective[i] = SiemensPowerOMCtest.Utilities.Functions.CharacteristicNumbers.NusseltNumber(
               alphaConvective[i], lengthNu, lambda);
        alpha[i] = alphaConvective[i]*(effectivity[i]*Afo+Apo)/Ao;
end for;
heatingSurfaceFactor = AHeatTransferActual/AHeatTransfer;
AHeatTransferActual=Ao*geoPipe.Nt*geoPipe.L;
Ao=Apo+Afo;

  if geoFins.finned then
      Apo=pi*geoPipe.d_out*(1-geoFins.n*geoFins.s);
      Psi=1-(geoPipe.d_out+2*geoFins.h*geoFins.s*geoFins.n)/geoFGZ.pt;
      for i in 1:numberOfNodes loop
        mb1[i]=sqrt((2*alphaConvective[i])/(lambdaFins[i]*geoFins.s))*(geoFins.h+0.5*geoFins.s);
        effectivity[i] = Modelica.Math.tanh(mb1[i]*mb2)/(mb1[i]*mb2);
      end for;
      if (geoFGZ.staggered) then
        if (geoFins.serrated) then
          C2= 0.35 + 0.65*exp(-0.17*geoFins.n*geoFins.h/(1-geoFins.n*geoFins.s));
        else
          C2= 0.35 + 0.65*exp(-0.25*geoFins.n*geoFins.h/(1-geoFins.n*geoFins.s));
        end if;

           C3=0.7+(0.7-0.8*exp(-0.15*geoFGZ.Nr^2))*exp(-geoFGZ.pl/geoFGZ.pt);
           C1=0.091*Rey^(-0.25);
           for i in 1:numberOfNodes loop
              NusseltConvective[i]=0.5*pi*Rey*Pr^0.33*C1*C2*C3*sqrt(1+2*geoFins.h/geoPipe.d_out)*(TGas/TFins[i])^0.25;
           end for;
      else
        if (geoFins.serrated) then
          C2= 0.25+0.6*exp(-0.26*geoFins.n*geoFins.h/(1-geoFins.n*geoFins.s));
        else
          C2= 0.2+0.65*exp(-0.25*geoFins.n*geoFins.h/(1-geoFins.n*geoFins.s));
        end if;
           C3=1.1-(0.75-1.5*exp(-0.7*geoFGZ.Nr))*exp(-2*geoFGZ.pl/geoFGZ.pt);
           C1=0.053*Rey^(-0.21)*(1.45-2.9*(geoFGZ.pl/geoPipe.d_out)^(-2.3));
           for i in 1:numberOfNodes loop
                NusseltConvective[i]=0.5*pi*Rey*Pr^0.33*C1*C2*C3*sqrt(1+2*geoFins.h/geoPipe.d_out)*(TGas/TFins[i])^0.5;
           end for;
      end if;
      if geoFins.serrated then
            Ao=2*pi*geoFins.n*((geoFins.h-geoFins.b)*(geoPipe.d_out+geoFins.b)*(1+geoFins.s/geoFins.w)+(geoPipe.d_out+geoFins.b+0.5*geoFins.s)*geoFins.b) + pi*geoPipe.d_out;
            mb2=sqrt(1+geoFins.s/geoFins.w);
      else
            Ao=2*pi*geoFins.h*geoFins.n*(geoPipe.d_out+geoFins.h+geoFins.s) + pi*geoPipe.d_out;
            mb2=1+0.35*Modelica.Math.log(1+2*geoFins.h/geoPipe.d_out);
      end if;
  else    // plain tubes
      Apo=pi*geoPipe.d_out;
      Afo=0;
      Psi=1-(pi*0.25*geoPipe.d_out^2)/(geoFGZ.pl*geoFGZ.pt);
      C1=1.95+0.178*Rey^0.4*Pr^0.116;
      NusseltConvective=C1^2*Pr^0.19*C3*ones(numberOfNodes);
      C2=4*Psi*geoFGZ.pt/(pi*geoPipe.d_out);
      if geoFGZ.staggered then
          if (C2>3.04) then
              C3=1+1.5312/(C2-0.4);
          else
              C3=1 + (1.87 - 1.7*geoPipe.d_out/geoFGZ.pl) / (C2-0.4);
          end if;
      else
           C3 =  1 + (1.90 - 1.8*geoPipe.d_out/geoFGZ.pl) / (C2-0.4);
      end if;
      mb1=ones(numberOfNodes);
      mb2=1;
      effectivity = ones(numberOfNodes);
  end if;

annotation(Documentation(
 info="<HTML>
 This gas-metal heat transfer model is very good for finned (solid or serrated) or unfinned tubes. The finned tubes correlation is taken from the ESCOA manual.
You should use lengthNu = 0.5*pi*geoPipe.d_out as well as lengthRe = geoPipe.d_out for finned and lengthRe = lengthNu for unfinned tubes.
Further, A_cross = geoFGZ.Lw*geoFGZ.Ld and AHeatTransfer = geoPipe.Nt*pi*geoPipe.d_out*geoPipe.L/N (compare aggregate FlueGasZone).
</HTML><HTML> 
       <p>  
           <table>
                <tr>
                              <td><b>Author:</b>  </td>
                             <td><a href=\"mailto:haiko.steuer@siemens.com\">Haiko Steuer</a> </td>
                        <td><a href=\"https://scd.siemens.com/db4/v3/lookUp.d4w?tcgid=Z001K4SN\">SCD</a> </td>
                       </tr>
                <tr>
                           <td><b>Checked by:</b>   </td>
                           <td>            </td>
                </tr> 
                <tr>
                           <td><b>Protection class:</b>    </td>
                           <td> </td>
                </tr> 
                <tr>
                           <td><b>Used Dymola version:</b>    </td>
                           <td> </td>
                  </tr> 
           </table>
                Copyright &copy  2007 Siemens AG, PG EIP12. All rights reserved.<br> <br>
               This model is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY. 
           For details see <a href=\"./Documents/Disclaimer.html\">disclaimer</a> <br>
        </p>
</HTML>",
    revisions="<html>
                      <ul>
                              <li> June 2007 by Haiko Steuer
                       </ul>
                        </html>"));
end Escoa;
