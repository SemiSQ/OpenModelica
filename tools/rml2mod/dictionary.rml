
(*
   Copyright 2005-2006, Adrian Pop, adrpo@ida.liu.se
*)

(**
 ** file:	 dictionary.rml
 ** module:      Dictionary
 ** description: Very fast and very memory eater unique string key dictionary
 **              using multidimentional vectors of size Dictionary.range.
 **              Starts with a Dictionary.range size vector and enters with the
 **              first char from the key in it getting back another vector of
 **              Dictionary.range size. Then takes the next char from key
 **              and uses as an index in this new vector and so on, until the
 **              end of the key is reached. Then retrieves or inserts or updates
 **              the polymorphic value.
 ** example: look below at Dictionary.test
 **)

module Dictionary:

  type 'a value = 'a option

  datatype 'a dictEntry = ENTRY of 'a dictEntry vector * 'a value
					    | EMPTY
  datatype 'a dict = DICT of 'a dictEntry


  val emptyDict: 'a dict
  val range: int (* useful ascii range *)

  relation insert: ('a dict, string, 'a) => 'a dict
  relation update: ('a dict, string, 'a) => 'a dict
  relation search: ('a dict, string) => 'a value
  relation toList: ('a dict) => (string * 'a value) list
  relation show: ('a dict) => ()
  relation test: () => ()

end

val emptyDict = DICT(EMPTY)

(* useful ascii range,
 * actually it could be only from
 * 32 to 127 but then some mapping
 * should be done *)
val range = 127

relation insert: ('a dict, string, 'a ) => 'a dict =

	rule insertDict(dictionary, s, SOME(d)) => newDict
		 ---------------------------------------------
		 insert(dictionary, s, d) => newDict

end

relation insertDict: ('a dict, string, 'a value) => 'a dict =

    (* empty dictionary, make a new one *)
	rule (* if dictionary is empty create the first entry *)
	     vector_create(range, EMPTY) => dictEntryVector &
		 (* then insert it *)
		 insertDict(DICT(ENTRY(dictEntryVector, NONE)), s, v) => newDict
		 -----------------------------------------------------------------
		 insertDict(DICT(EMPTY), s, v) => newDict

    (* something is there, use it *)
	rule insertEntry(entry, s, v, 0) => newEntry
		 -----------------------------------------------
		 insertDict(DICT(entry), s, v) => DICT(newEntry)

    (* wierd dictionary *)
	rule print "Wierd dictionary!\n" & debug_print("WierdDict", x)
		 ---------------------------------------------------------
	     insertDict(x, s, v) => x

end

relation insertEntry: ('a dictEntry, string, 'a value, int) => 'a dictEntry =

	rule string_length(s) => len &
		 int_lt(ind, len) => true & (* if the index in the string is less than the string *)
		 string_nth_string_char(s, ind) => sind &
		 index(sind) => i &
		 vector_nth(dictEntryVect, i) => EMPTY & (* not there, create *)
		 vector_create(range, EMPTY) => newEmptyVect &
		 ind + 1 => newind &
         insertEntry(ENTRY(newEmptyVect, NONE), s, v, newind) => newEntry &
		 vector_setnth(dictEntryVect, i, newEntry) => newEntryVect
		 -----------------------------------------------------------------------------
		 insertEntry(ENTRY(dictEntryVect, var), s, v, ind) => ENTRY(newEntryVect, var)

	rule string_length(s) => len &
		 int_lt(ind, len) => true & (* if the index in the string is less than the string *)
		 string_nth_string_char(s, ind) => sind &
		 index(sind) => i &
		 vector_nth(dictEntryVect, i) => entry & (* already there *)
		 ind + 1 => newind &
         insertEntry(entry, s, v, newind) => newEntry &
		 vector_setnth(dictEntryVect, i, newEntry) => newEntryVect
		 -----------------------------------------------------------------------------
		 insertEntry(ENTRY(dictEntryVect, var), s, v, ind) => ENTRY(newEntryVect, var)

	rule string_length(s) => len &
		 int_eq(ind, len) => true
		 (* if the index in the string is exactly
		    the string lenght we have found it, update the entry *)
		 ----------------------------------------------------------
		 insertEntry(ENTRY(x, NONE), s, v, ind) => ENTRY(x, v)

	rule string_length(s) => len &
		 int_eq(ind, len) => true &
		 (* if the index in the string is exactly
		    the string lenght we have found it, update the entry *)
		 print "DICT: Updating key:" & print s & print "\n"
		 (*
		 print "Already existing value. UPDATING!\n" &
		 print "Use Dictionary.update(dict, key, updatedvalue instead)!\n"
		 *)
		 (* &
		 debug_print("exi value", var) &
		 debug_print("new value", v)
		 *)
		 ---------------------------------------------------------------
		 insertEntry(ENTRY(x, var as SOME(d)), s, v, ind) => ENTRY(x, v)

	rule print "How did we came here? key=" & print s & print " index=" &
	     int_string(ind) => ind_str & print ind_str & print "\n" &
		 debug_print("entry", x)
		 -----------------------------------------------------------
		 insertEntry(x, s, v, ind) => fail

end

(* this one updates the existing value without complaining *)
relation update: ('a dict, string, 'a ) => 'a dict =

	rule updateDict(dictionary, s, SOME(d)) => newDict
		 ---------------------------------------------
		 update(dictionary, s, d) => newDict

end

relation updateDict: ('a dict, string, 'a value) => 'a dict =

    (* empty dictionary, make a new one *)
	rule (* if dictionary is empty create the first entry *)
	     vector_create(range, EMPTY) => dictEntryVector &
		 (* then update it *)
		 updateDict(DICT(ENTRY(dictEntryVector, NONE)), s, v) => newDict
		 -----------------------------------------------------------------
		 updateDict(DICT(EMPTY), s, v) => newDict

    (* something is there, use it *)
	rule updateEntry(entry, s, v, 0) => newEntry
		 -----------------------------------------------
		 updateDict(DICT(entry), s, v) => DICT(newEntry)

    (* wierd dictionary *)
	rule print "Wierd dictionary!\n" & debug_print("WierdDict", x)
		 ---------------------------------------------------------
	     updateDict(x, s, v) => x

end

relation updateEntry: ('a dictEntry, string, 'a value, int) => 'a dictEntry =

	rule string_length(s) => len &
		 int_lt(ind, len) => true & (* if the index in the string is less than the string *)
		 string_nth_string_char(s, ind) => sind &
		 index(sind) => i &
		 vector_nth(dictEntryVect, i) => EMPTY & (* not there, create *)
		 vector_create(range, EMPTY) => newEmptyVect &
		 ind + 1 => newind &
         updateEntry(ENTRY(newEmptyVect, NONE), s, v, newind) => newEntry &
		 vector_setnth(dictEntryVect, i, newEntry) => newEntryVect
		 -----------------------------------------------------------------------------
		 updateEntry(ENTRY(dictEntryVect, var), s, v, ind) => ENTRY(newEntryVect, var)

	rule string_length(s) => len &
		 int_lt(ind, len) => true & (* if the index in the string is less than the string *)
		 string_nth_string_char(s, ind) => sind &
		 index(sind) => i &
		 vector_nth(dictEntryVect, i) => entry & (* already there *)
		 ind + 1 => newind &
         updateEntry(entry, s, v, newind) => newEntry &
		 vector_setnth(dictEntryVect, i, newEntry) => newEntryVect
		 -----------------------------------------------------------------------------
		 updateEntry(ENTRY(dictEntryVect, var), s, v, ind) => ENTRY(newEntryVect, var)

	rule string_length(s) => len &
		 int_eq(ind, len) => true
		 (* if the index in the string is exactly
		    the string lenght we have found it, update the entry *)
		 ----------------------------------------------------------
		 updateEntry(ENTRY(x, NONE), s, v, ind) => ENTRY(x, v)

	rule string_length(s) => len &
		 int_eq(ind, len) => true
		 (* if the index in the string is exactly
		    the string lenght we have found it, update the entry *)
		 ---------------------------------------------------------------
		 updateEntry(ENTRY(x, var as SOME(d)), s, v, ind) => ENTRY(x, v)

	rule print "How did we came here? key=" & print s & print " index=" &
	     int_string(ind) => ind_str & print ind_str & print "\n" &
		 debug_print("entry", x)
		 -----------------------------------------------------------
		 updateEntry(x, s, v, ind) => fail

end

(*
 * returns NONE if not found or the SOME(data) if found
 *)
relation search: ('a dict, string) => 'a value =

	rule searchDict(dictionary, s) => v
		 ------------------------------
		 search(dictionary, s) => v

end

(*
 * returns NONE if not found or the SOME(data) if found
 *)
relation searchDict: ('a dict, string) => 'a value =

    axiom searchDict(DICT(EMPTY), _) => NONE

	rule searchEntry(entry, s, 0) => v
		 --------------------------------------
		 searchDict(DICT(entry), s) => v

end

(*
 * returns NONE if not found or the SOME(data) if found
 *)
relation searchEntry: ('a dictEntry, string, int) => 'a value =

	rule (*
	     print "\nentry=" & showEntry(x,0) & debug_print("\ns", s) & debug_print("ind", ind) &
		 *)
	     string_length(s) => len &
		 int_lt(ind, len) => true & (* if the index in the string is less than the string *)
		 string_nth_string_char(s, ind) => sind &
		 index(sind) => i &
		 vector_nth(dictEntryVect, i) => entry &
		 ind + 1 => newind &
         searchEntry(entry, s, newind) => v
		 ---------------------------------------------------
		 searchEntry(x as ENTRY(dictEntryVect, var), s, ind) => v

	rule (*
	     print "\nentry=" & showEntry(x,0) & debug_print("\ns", s) & debug_print("ind", ind) &
		 *)
		 string_length(s) => len &
		 int_eq(ind, len) => true
		 (* if the index in the string is exactly
		    the string lenght we have found it *)
		 ------------------------------------------
		 searchEntry(x as ENTRY(_, v), s, ind) => v

	rule (*
	     debug_print("entry", x) & debug_print("s", s) & debug_print("ind", ind)
		 *)
		 ------------------------------
		 searchEntry(x, s, ind) => NONE

end

relation index: string => int =

  rule string_char_int(s) => i
       -----------------------
	   index(s) => i

end

relation showEntryVec: ('a dictEntry vector, int) => () =

	rule vector_length(v) => len &
	     int_lt(i, len) => true &
		 int_string_char(i) => s &
		 vector_nth(v, i) => (entry as ENTRY(_, _)) &
		 print s &
		 i + 1 => newI &
		 showEntryVec(v, newI) &
		 showEntry(entry, 0)
	     -------------------------
		 showEntryVec(v, i)

	rule vector_length(v) => len &
	     int_lt(i, len) => true &
		 int_string_char(i) => s &
		 vector_nth(v, i) => EMPTY &
		 i + 1 => newI &
		 showEntryVec(v, newI)
	     -------------------------
		 showEntryVec(v, i)

	rule vector_length(v) => len &
	     int_lt(i, len) => false
	     -------------------------
		 showEntryVec(v, i)

    rule debug_print("i",i) & debug_print("v", v)
	     ----------------------------------------
		 showEntryVec(v, i)
end


relation showEntry: ('a dictEntry, int) => () =

	rule print "E"
	     ---------------------
		 showEntry(EMPTY, ind)

	rule showEntryVec(entryVec, ind) & print "->" & debug_print("S", v)
	     -----------------------------
		 showEntry(ENTRY(entryVec, SOME(v)), ind)

	rule showEntryVec(entryVec, ind)
	     -----------------------------
		 showEntry(ENTRY(entryVec, NONE), ind)
end

relation show: 'a dict => () =

	rule print "Empty Dict\n"
	     --------------------
		 show(DICT(EMPTY))

	rule showEntry(entry, 0) & print "\n"
	     -------------------
		 show(DICT(entry))

end


(* start dictionary toList *)
relation entryToListVec =

	rule vector_length(v) => len &
	     int_lt(i, len) => true &
		 int_char(i) => s &
		 vector_nth(v, i) => (entry as ENTRY(_, _)) &
		 i + 1 => newI &
		 list_append(keyLst, [s]) => newKeyLst &
		 entryToList(entry, 0, newKeyLst, dictLst) => newDictLst1 &
		 entryToListVec(v, newI, keyLst, dictLst) => newDictLst2 &
		 list_append(newDictLst1, newDictLst2) => newDictLst
	     -----------------------------------------------------------
		 entryToListVec(v, i, keyLst, dictLst) => newDictLst

	rule vector_length(v) => len &
	     int_lt(i, len) => true &
		 int_string_char(i) => s &
		 vector_nth(v, i) => (entry as EMPTY) &
		 i + 1 => newI &
		 entryToListVec(v, newI, keyLst, dictLst) => newDictLst
	     -----------------------------------------------------------
		 entryToListVec(v, i, keyLst, dictLst) => newDictLst

	rule vector_length(v) => len &
	     int_lt(i, len) => false
	     ------------------------------------------------
		 entryToListVec(v, i, keyLst, dictLst) => dictLst

    rule debug_print("i",i) & debug_print("v", v)
	     ------------------------------------------------
		 entryToListVec(v, i, keyLst, dictLst) => dictLst
end


relation entryToList =

	axiom entryToList(EMPTY, ind, keyLst, dictLst) => dictLst

	rule entryToListVec(entryVec, ind, keyLst, dictLst) => newDictLst &
		 list_string(keyLst) => key &
		 list_append(dictLst, (key,SOME(v))::newDictLst) => newDictLst
	     -------------------------------------------------------------------------
		 entryToList(ENTRY(entryVec, SOME(v)), ind, keyLst, dictLst) => newDictLst

	rule entryToListVec(entryVec, ind, keyLst, dictLst) => newDictLst
	     ----------------------------------------------------------------------
		 entryToList(ENTRY(entryVec, NONE), ind, keyLst, dictLst) => newDictLst
end

relation toList: 'a dict => ((string * 'a value) list) =

	axiom toList(DICT(EMPTY)) => []

	rule entryToList(entry, 0, [], []) => dictLst
	     ----------------------------------------
		 toList(DICT(entry)) => dictLst

end
(* end dictionary toList *)
(* just for the sake of testing *)
datatype data =  FUNC of string list * (* input  *)
                        string list   (* output *)
			|  CTOR of string list   (* constructor *)


relation test: () => () =

  rule 	insert(emptyDict, "Absyn.PROGRAM", CTOR(["prog"])) => dict &
		print "1Dict\n" & show(dict) &
		insert(dict, "Absyn.STUFF", CTOR(["stuff"]))       => dict &
		print "2Dict\n" & show(dict) &
		insert(dict, "Absyn.func", FUNC(["in"],["out"]))   => dict &
		print "3Dict\n" & show(dict) &
		insert(dict, "Bla", FUNC(["in_bla"],["out_bla"]))   => dict &
		print "4Dict\n" & show(dict) &
		search(dict, "A") => v &
		debug_print("\nA", v) &
		search(dict, "Absyn") => v &
		debug_print("\nAbsyn", v) &
		search(dict, "Absyn.PROGRAM") => v &
		debug_print("\nAbsyn.PROGRAM", v) &
		search(dict, "Absyn.func") => v &
		debug_print("\nAbsyn.func", v) &
		search(dict, "Bla") => v &
		debug_print("\nBla", v)
		--------------------------------------------------------------
		test

end
