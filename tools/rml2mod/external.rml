module External:

  relation write_file: (string, string) => ()
  relation to_lowercase : string => string
  relation toJavaName: string => string
  relation startsWith: (string, string) => bool
  relation endsWith: (string, string) => bool
  relation substring: (string, int, int) => string
  relation strstr: (string, string) => bool
  relation strcmp: (string, string) => int
  relation trim: string => string
  (* string replace the first str2 occurence in str1 with str3 *)
  relation strrpl: (string, string, string) => string
  (* string replace all str2 occurences in str1 with str3 *)
  relation strrplall: (string, string, string) => string
  relation strtok: (string, string) => string
  (*
     sst = string separated tokens
     this one gets a str1 and str2 calls strtok and returns the tokens in a string 
     separated by str3 
  *)
  relation sst: (string, string, string) => string
  (* trims at start and end of str1 any occurence of str2 *)
  relation trimstring: (string, string) => string
  (* get the first alfa(alfanumeric)* word in the string *)
  relation getFirstIdent: string => string
  relation string_real: string => real

  relation stringEscape: string => string
  relation commentEscape: string => string

end

(* testing of external *)
(* 
		External.endsWith("/pah/to/file.rml","file.rml") => true &
		External.endsWith("/pah/to/file.rml","file2.rml") => false &
        External.trimstring("*   hai baaa   ***", "*") => s &
		print s &
		External.trimstring(s, " ") => s &
		print s &		External.strrpl("bla", "l", "s") => str &
		print str & print "\n" &
		External.strrpl("bla", "l", "ssss") => str &
		print str & print "\n" &
		External.strrpl("bla", "s", "ssss") => str &
		print str & print "\n" &
		External.strrpl("bla", "b", "") => str &
		print str & print "\n" &
		External.strrplall("bla shit bla", "bla", "1") => str &
		print str & print "\n" &
		External.strrplall("bla shit bla", "bla", "huooo") => str &
		print str & print "\n" &
		External.strrplall("bla shit bla", "b", "") => str &
		print str & print "\n" &
		External.strrplall("bla shit bla", "b", "c") => str &
		print str 
*)

(*
relation to_lowercase : (int,string) => string =

  rule  External.toJavaName(str) => res
		-------------------------------
		to_lowercase(_, str) => res

  axiom to_lowercase(i, str) => str

  (*
  rule	string_length(str) => l &
		int_ge(i,l) => true
		--------------------------
		to_lowercase(i,str) => ""

  rule	string_nth(str,i) => c &
		char_int(c) => ic &
		int_le(ic,90) => true &
		int_ge(ic,65) => true &
		int_add(ic,32) => ic' &
		int_string_char(ic') => s &
		int_add(i,1) => i' &
		to_lowercase(i',str) => str' &
		string_append(s,str') => str''
		--------------------------
		to_lowercase(i,str) => str''

  rule	string_nth_string_char(str,i) => s &
		int_add(i,1) => i' &
		to_lowercase(i',str) => str' &
		string_append(s,str') => str''
		----------------------------
		to_lowercase(i,str) => str''
  *)
end
*)
